void sub_210A8D650(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t CAComponentDescription::Matches(CAComponentDescription *this, const AudioComponentDescription *a2)
{
  int v2;
  OSType componentType;
  BOOL v4;
  char v5;
  uint64_t v6;
  int v7;
  OSType componentSubType;
  int v9;
  OSType componentManufacturer;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  BOOL v15;
  unsigned int v16;

  v2 = *(_DWORD *)this;
  componentType = a2->componentType;
  if (*(_DWORD *)this == a2->componentType
    || (v2 ? (v4 = componentType == 0) : (v4 = 0),
        !v4 ? (v5 = 0) : (v5 = 1),
        !(componentType | v2) || (v5 & 1) != 0 || (v6 = 0, !v2) && componentType))
  {
    v7 = *((_DWORD *)this + 1);
    componentSubType = a2->componentSubType;
    if (v7 == componentSubType
      || (v7 ? (v11 = componentSubType == 0) : (v11 = 0),
          !v11 ? (v12 = 0) : (v12 = 1),
          !(componentSubType | v7) || (v12 & 1) != 0 || (v6 = 0, !v7) && componentSubType))
    {
      v9 = *((_DWORD *)this + 2);
      componentManufacturer = a2->componentManufacturer;
      if (v9 == componentManufacturer)
      {
        return 1;
      }
      else
      {
        if (v9)
          v13 = componentManufacturer == 0;
        else
          v13 = 0;
        v14 = v13;
        v6 = 1;
        if (componentManufacturer | v9)
        {
          if (v9)
            v15 = 1;
          else
            v15 = componentManufacturer == 0;
          v16 = !v15;
          if ((v14 & 1) != 0)
            return 1;
          else
            return v16;
        }
      }
    }
  }
  return v6;
}

void AUScopeDynamic::~AUScopeDynamic(ElementVector2 ***this)
{
  AUScopeDynamic::~AUScopeDynamic(this);
  JUMPOUT(0x212BCDF50);
}

{
  int v2;
  uint64_t v3;
  uint64_t v4;
  ElementVector2 **v5;

  *this = (ElementVector2 **)&off_24CA8DD30;
  ElementVector2::freeOld(this[3]);
  v2 = ((uint64_t (*)(ElementVector2 ***))(*this)[3])(this);
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = ((uint64_t (*)(ElementVector2 ***, uint64_t))(*this)[4])(this, v3);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = (v3 + 1);
    }
    while (v2 != (_DWORD)v3);
  }
  v5 = this[3];
  if (v5)
  {
    free(v5[2]);
    MEMORY[0x212BCDF50](v5, 0x10A0C409D8FE3EALL);
  }
  CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(this + 4));
}

ElementVector2 *AUScopeDynamic::Cleanup(ElementVector2 ***this)
{
  return ElementVector2::freeOld(this[3]);
}

uint64_t ElementVector::ElementVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  size_t v7;
  void *v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  *(_QWORD *)a1 = a3;
  v5 = -(int)__clz(a2 - 1);
  v6 = v5 & 0x3F;
  *(_QWORD *)(a1 + 8) = (1 << v5);
  v7 = (8 << v5) & 0x7FFFFFFF8;
  v8 = malloc_type_malloc(v7, 0x2C8E6D5CuLL);
  if (v6 <= 0x1F && v8 == 0)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
  }
  v10 = v8;
  bzero(v8, v7);
  *(_QWORD *)(a1 + 16) = v10;
  if (a3)
  {
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11)
    {
      v12 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12) = *(_QWORD *)(*(_QWORD *)(a3 + 16) + v12);
        v12 += 8;
      }
      while (8 * v11 != v12);
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  return a1;
}

void AUParametricEQ::~AUParametricEQ(AUParametricEQ *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUParametricEQ::GetPropertyInfo(AUParametricEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 51)
    {
      if (a2 == 52)
      {
        result = 0;
        v7 = 0x4000;
      }
      else
      {
        if (a2 != 57)
        {
          if (a2 == 56)
          {
            result = 0;
            *a5 = 8;
            *a6 = 1;
          }
          return result;
        }
        result = 0;
        v7 = 72;
      }
      *a5 = v7;
      *a6 = 0;
      return result;
    }
    if (a2 == 21 || a2 == 29)
    {
      result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  return result;
}

uint64_t AUParametricEQ::GetProperty(AUParametricEQ *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  ParametricEQKernel **v17;
  ParametricEQKernel *v18;
  const BiquadCoefficients *v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3)
    return 4294956417;
  v25 = v8;
  v26 = v7;
  v27 = v5;
  v28 = v6;
  v10 = a5;
  result = 4294956417;
  if (a2 > 51)
  {
    if (a2 == 52)
    {
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      (*(void (**)(__int128 *__return_ptr, AUParametricEQ *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v22, this, 2, 0);
      v16 = *(double *)&v22;
      v22 = 0uLL;
      v24 = 0;
      v23 = 0x3FF0000000000000uLL;
      v17 = (ParametricEQKernel **)*((_QWORD *)this + 66);
      if (*((ParametricEQKernel ***)this + 67) == v17)
        v18 = 0;
      else
        v18 = *v17;
      ParametricEQKernel::CalculateCoefficients(v18, (Biquad *)&v22);
      v20[0] = v22;
      v20[1] = v23;
      v21 = v24;
      GetFrequencyResponse((uint64_t)v10, (AudioUnitFrequencyResponseBin *)1, (uint64_t)v20, v19, v16);
    }
    else
    {
      if (a2 != 57)
        return result;
      v13 = 0;
      v14 = *((_QWORD *)this + 1);
      do
      {
        v15 = overviewParameterIDs[v13];
        *(_QWORD *)v10 = v14;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = v15;
        ++v13;
        v10 += 6;
      }
      while (v13 != 3);
    }
    return 0;
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v12 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29)
        return result;
      result = 0;
      v12 = *((unsigned __int8 *)this + 554);
    }
    *a5 = v12;
  }
  return result;
}

uint64_t AUParametricEQ::SetParameter(AUParametricEQ *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

double AUParametricEQ::GetParameterInfo(AUParametricEQ *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  double result;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  const __CFString *v10;
  const __CFString *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (!a2)
  {
    *(_QWORD *)&result = 0x254A760E0;
    v12 = xmmword_24CA965D8;
    v13 = &kCenterFreq_Name;
    if (!LocalizeAUParameterStringsForClass<AUParametricEQ>(std::initializer_list<__CFString const**>)::sLocalized)
      LocalizeAUParameterStringsForClass<AUParametricEQ>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)&v12, 3);
    switch(a3)
    {
      case 2:
        v10 = (const __CFString *)kGain_Name;
        buffer->cfNameString = (CFStringRef)kGain_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        result = 134217825.0;
        *(_QWORD *)&buffer->minValue = 0x41A00000C1A00000;
        buffer->defaultValue = 0.0;
        break;
      case 1:
        v11 = (const __CFString *)kQ_Name;
        buffer->cfNameString = (CFStringRef)kQ_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Generic;
        result = 134217760.0;
        *(_QWORD *)&buffer->minValue = 0x41A000003F800000;
        buffer->defaultValue = 10.0;
        break;
      case 0:
        v8 = (const __CFString *)kCenterFreq_Name;
        buffer->cfNameString = (CFStringRef)kCenterFreq_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        *(_QWORD *)&buffer->unit = 0x41A0000000000008;
        result = *(double *)(ausdk::AUScope::SafeGetElement((AUParametricEQ *)((char *)this + 128), 0) + 80) * 0.495;
        *(float *)&result = result;
        buffer->maxValue = *(AudioUnitParameterValue *)&result;
        v9 = buffer->flags + 0x400000;
        buffer->defaultValue = 2000.0;
        buffer->flags = v9;
        break;
    }
  }
  return result;
}

uint64_t AUParametricEQ::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUParametricEQ::GetTailTime(AUParametricEQ *this)
{
  return 0.001;
}

uint64_t AUParametricEQ::SupportsTail(AUParametricEQ *this)
{
  return 1;
}

BOOL AUParametricEQ::StreamFormatWritable(AUParametricEQ *this)
{
  return *((_BYTE *)this + 17) == 0;
}

void AUParametricEQ::NewKernel(AUParametricEQ *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA902E0;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = this;
  ParametricEQKernel::Reset((ParametricEQKernel *)v4);
  *a2 = v4;
}

uint64_t AUParametricEQ::Version(AUParametricEQ *this)
{
  return 0x10000;
}

void ParametricEQKernel::~ParametricEQKernel(ParametricEQKernel *this)
{
  JUMPOUT(0x212BCDF50);
}

double ParametricEQKernel::Reset(ParametricEQKernel *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

float64x2_t ParametricEQKernel::Process(ParametricEQKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  int v9;
  float32x2_t v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  float32x2_t v51;
  float v52;
  float v54;
  float v55;
  float v57;
  float64x2_t result;

  v9 = *(_DWORD *)(*((_QWORD *)this + 12) + 592);
  if (*((_DWORD *)this + 5) != v9)
  {
    *((_DWORD *)this + 5) = v9;
    ParametricEQKernel::CalculateCoefficients(this, (ParametricEQKernel *)((char *)this + 24));
  }
  v10 = vcvt_f32_f64(*((float64x2_t *)this + 4));
  v11 = vcvt_f32_f64(*((float64x2_t *)this + 5));
  v12 = *((double *)this + 5);
  v13 = *((double *)this + 6);
  v14 = *((double *)this + 7);
  v15 = *((double *)this + 3);
  v16 = *((double *)this + 4);
  v17 = v10.f32[1];
  v18 = v11.f32[1];
  v19 = -v15;
  v20 = -v16;
  v21 = a4 - 4;
  if (a4 >= 4)
  {
    v23 = *a2;
    v22 = a2[1];
    v17 = a2[2];
    v24 = a2[3];
    v25 = (float)((float)((float)(*a2 * v12) + (float)(v13 * v10.f32[0])) + (float)(v14 * v10.f32[1]))
        - (float)(v15 * v11.f32[0]);
    v26 = (float)((float)(v22 * v12) + (float)(v13 * *a2)) + (float)(v14 * v10.f32[0]);
    v27 = (float)(v17 * v12) + (float)(v13 * v22);
    v28 = v24 * v12;
    a2 += 4;
    if (v21 >= 5)
    {
      do
      {
        v29 = *a2;
        v30 = v25 + (float)(v20 * v18);
        v31 = v27 + (float)(v14 * v23);
        v32 = v28 + (float)(v13 * v17);
        v33 = *a2 * v12;
        *a3 = v30;
        v23 = a2[1];
        v34 = (float)(v26 + (float)(v19 * v30)) + (float)(v20 * v11.f32[0]);
        v35 = v31 + (float)(v19 * v34);
        v36 = v32 + (float)(v14 * v22);
        a3[1] = v34;
        v22 = a2[2];
        v37 = v35 + (float)(v20 * v30);
        v38 = v36 + (float)(v19 * v37);
        v39 = (float)(v33 + (float)(v13 * v24)) + (float)(v14 * v17);
        a3[2] = v37;
        v17 = a2[3];
        v18 = v38 + (float)(v20 * v34);
        v40 = v39 + (float)(v19 * v18);
        v41 = (float)((float)(v23 * v12) + (float)(v13 * v29)) + (float)(v14 * v24);
        a3[3] = v18;
        v24 = a2[4];
        v11.f32[0] = v40 + (float)(v20 * v37);
        v25 = v41 + (float)(v19 * v11.f32[0]);
        v26 = (float)((float)(v22 * v12) + (float)(v13 * v23)) + (float)(v14 * v29);
        v27 = (float)(v17 * v12) + (float)(v13 * v22);
        a3[4] = v11.f32[0];
        a3 += 5;
        v21 -= 5;
        v28 = v24 * v12;
        a2 += 5;
      }
      while (v21 > 4);
    }
    v42 = v25 + (float)(v20 * v18);
    v43 = (float)(v26 + (float)(v19 * v42)) + (float)(v20 * v11.f32[0]);
    *a3 = v42;
    a3[1] = v43;
    v18 = (float)((float)(v27 + (float)(v14 * v23)) + (float)(v19 * v43)) + (float)(v20 * v42);
    v11.f32[0] = (float)((float)((float)(v28 + (float)(v13 * v17)) + (float)(v14 * v22)) + (float)(v19 * v18))
               + (float)(v20 * v43);
    a3[2] = v18;
    a3[3] = v11.f32[0];
    a3 += 4;
    v10.f32[0] = v24;
    a4 = v21;
  }
  if (a4 < 1)
  {
    v45 = v17;
    v47 = v18;
  }
  else
  {
    v44 = a4 + 1;
    do
    {
      v45 = v10.f32[0];
      v46 = *a2++;
      v10.f32[0] = v46;
      v47 = v11.f32[0];
      v11.f32[0] = (float)((float)((float)((float)(v45 * v13) + (float)(v12 * v46)) + (float)(v14 * v17))
                         + (float)(v19 * v11.f32[0]))
                 + (float)(v20 * v18);
      *a3++ = v11.f32[0];
      --v44;
      v18 = v47;
      v17 = v45;
    }
    while (v44 > 1);
  }
  v48 = fabsf(v10.f32[0]);
  v49 = v48 >= 1.0e15 || v48 <= 1.0e-15;
  v50 = 0.0;
  if (v49)
    v51.f32[0] = 0.0;
  else
    v51.f32[0] = v10.f32[0];
  v52 = fabsf(v45);
  if (v52 >= 1.0e15 || v52 <= 1.0e-15)
    v54 = 0.0;
  else
    v54 = v45;
  v51.f32[1] = v54;
  v55 = fabsf(v11.f32[0]);
  if (v55 >= 1.0e15 || v55 <= 1.0e-15)
    v11.f32[0] = 0.0;
  v57 = fabsf(v47);
  if (v57 < 1.0e15 && v57 > 1.0e-15)
    v50 = v47;
  v11.f32[1] = v50;
  result = vcvtq_f64_f32(v11);
  *((float64x2_t *)this + 4) = vcvtq_f64_f32(v51);
  *((float64x2_t *)this + 5) = result;
  return result;
}

BiquadCoefficients *ParametricEQKernel::CalculateCoefficients(ParametricEQKernel *this, Biquad *a2)
{
  double v4;
  float Parameter;
  double v6;
  float v7;
  double v8;
  double v9;

  v4 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 1) + 128), 0) + 80);
  Parameter = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 1u);
  v6 = pow(20.0, (Parameter + -1.0) / 19.0);
  v7 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 2u);
  v8 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0);
  v9 = v8 * 2.2 / v4;
  if (v6 >= v9)
    v9 = v6;
  return BiquadCoefficients::SetQ(a2, 10, v8 * 6.28318531 / v4, v9, v7);
}

_QWORD *AUParametricEQFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUParametricEQ>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUParametricEQ>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void AUGenericOutput::~AUGenericOutput(AUGenericOutput *this)
{
  AUGenericOutput::~AUGenericOutput(this);
  JUMPOUT(0x212BCDF50);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24CA8E2D8;
  if (*((_BYTE *)this + 558))
  {
    *((_BYTE *)this + 558) = 0;
    v2 = *((_QWORD *)this + 51);
    v3 = *((_QWORD *)this + 52);
    while (v2 != v3)
    {
      if (*(_DWORD *)v2 == 2001)
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(v2 + 8))(*(_QWORD *)(v2 + 16), *((_QWORD *)this + 1), 2001, 0, 0);
      v2 += 24;
    }
  }
  AUConverterBase::CloseConverters(this);
  AUConverterBase::~AUConverterBase(this);
}

uint64_t AUGenericOutput::Cleanup(AUGenericOutput *this)
{
  (*(void (**)(AUGenericOutput *))(*(_QWORD *)this + 448))(this);
  return AUConverterBase::CloseConverters(this);
}

uint64_t AUGenericOutput::GetPropertyInfo(AUGenericOutput *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  if (a2 != 2001 || a3)
    return AUConverterBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  *a5 = 4;
  *a6 = 0;
  return 0;
}

uint64_t AUGenericOutput::GetProperty(AUGenericOutput *this, int a2, int a3, unsigned int a4, int *a5)
{
  if (a2 != 2001 || a3)
    return AUConverterBase::GetProperty(this, a2, a3, a4, a5);
  *a5 = *((unsigned __int8 *)this + 558);
  return 0;
}

uint64_t AUGenericOutput::Stop(AUGenericOutput *this)
{
  if (*((_BYTE *)this + 558))
  {
    *((_BYTE *)this + 558) = 0;
    (*(void (**)(AUGenericOutput *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 2001, 0, 0);
  }
  return 0;
}

_QWORD *AUGenericOutputFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x270uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUOutputLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUOutputLookup,AUGenericOutput>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUOutputLookup,AUGenericOutput>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void VoiceActivityDetector::~VoiceActivityDetector(VoiceActivityDetector *this)
{
  VoiceActivityDetector::~VoiceActivityDetector(this);
  JUMPOUT(0x212BCDF50);
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)this = &off_24CA91168;
  MultiRadixRealFFT_Dispose();
  v2 = *((_QWORD *)this + 6);
  if (v2)
    MEMORY[0x212BCDF2C](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x212BCDF2C](v3, 0x1000C8052888210);
  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v5 = v4[1];
  if (v5)
    MEMORY[0x212BCDF2C](v5, 0x1000C8052888210);
  v6 = v4[2];
  if (v6)
    MEMORY[0x212BCDF2C](v6, 0x1000C8052888210);
  v7 = v4[3];
  if (v7)
    MEMORY[0x212BCDF2C](v7, 0x1000C8052888210);
  v8 = v4[4];
  if (v8)
    MEMORY[0x212BCDF2C](v8, 0x1000C8052888210);
  v9 = v4[7];
  if (v9)
    MEMORY[0x212BCDF2C](v9, 0x1000C8052888210);
  v10 = v4[8];
  if (v10)
    MEMORY[0x212BCDF2C](v10, 0x1000C8052888210);
  v11 = v4[5];
  if (v11)
    MEMORY[0x212BCDF2C](v11, 0x1000C8052888210);
  v12 = *((_QWORD *)this + 4);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = (_QWORD *)*((_QWORD *)this + 1);
  v14 = v13[5];
  if (v14)
    MEMORY[0x212BCDF2C](v14, 0x1000C8052888210);
  v15 = v13[6];
  if (v15)
    MEMORY[0x212BCDF2C](v15, 0x1000C8052888210);
  v16 = v13[7];
  if (v16)
    MEMORY[0x212BCDF2C](v16, 0x1000C8052888210);
  v17 = v13[8];
  if (v17)
    MEMORY[0x212BCDF2C](v17, 0x1000C8052888210);
  v18 = v13[10];
  if (v18)
    MEMORY[0x212BCDF2C](v18, 0x1000C8052888210);
  v19 = v13[11];
  if (v19)
    MEMORY[0x212BCDF2C](v19, 0x1000C8052888210);
  v20 = v13[12];
  if (v20)
    MEMORY[0x212BCDF2C](v20, 0x1000C8052888210);
  v21 = v13[13];
  if (v21)
    MEMORY[0x212BCDF2C](v21, 0x1000C8052888210);
  v22 = v13[14];
  if (v22)
    MEMORY[0x212BCDF2C](v22, 0x1000C8052888210);
  v23 = v13[15];
  if (v23)
    MEMORY[0x212BCDF2C](v23, 0x1000C8052888210);
  v24 = v13[16];
  if (v24)
    MEMORY[0x212BCDF2C](v24, 0x1000C8052888210);
  v25 = v13[17];
  if (v25)
    MEMORY[0x212BCDF2C](v25, 0x1000C8052888210);
  v26 = v13[23];
  if (v26)
    MEMORY[0x212BCDF2C](v26, 0x1000C8052888210);
  v27 = v13[24];
  if (v27)
    MEMORY[0x212BCDF2C](v27, 0x1000C8052888210);
  v28 = *((_QWORD *)this + 1);
  if (v28)
    MEMORY[0x212BCDF50](v28, 0x10A0C401EE7F367);
}

char *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *a1, const void *a2, uint64_t a3, unint64_t a4)
{
  char *result;
  char *v8;
  uint64_t v9;
  size_t v10;

  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a4);
  v8 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v9];
  v10 = a3 - (_QWORD)a2;
  if (v10)
    result = (char *)memmove(result, a2, v10);
  a1[1] = &v8[v10];
  return result;
}

void sub_210A8E760(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VoiceActivityDetector::SpxVADProcess(VoiceActivityDetector *this, float *a2)
{
  uint64_t v3;
  vDSP_Length v4;
  int64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  VoiceActivityDetector *v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  unint64_t v24;
  float v25;
  float *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  _QWORD v36[2];
  float v37;
  float __A;
  float v39;
  float v40;
  float v41;
  float v42;
  float __C;
  float v44;
  float __B;
  uint64_t v46;

  v36[1] = v36;
  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 1);
  v4 = *((int *)this + 7);
  v5 = *((int *)this + 5);
  v6 = *(_QWORD *)(v3 + 56);
  v7 = *(_DWORD *)(v3 + 200);
  v8 = (float)*((unsigned int *)this + 6);
  if (v7 + 1 < (int)(float)((float)(v8 * 30.0) / (float)(int)v5))
    v9 = v7 + 1;
  else
    v9 = (int)(float)((float)(v8 * 30.0) / (float)(int)v5);
  *(_DWORD *)(v3 + 200) = v9;
  ++*(_DWORD *)(v3 + 208);
  v10 = v9 <= (int)(float)((float)(v8 * 0.5) / (float)(int)v5);
  v11 = 176;
  if (!v10)
    v11 = 172;
  __B = *(float *)(v3 + v11);
  v44 = 1.0 - __B;
  v12 = v5 + v4;
  v13 = MEMORY[0x24BDAC7A8](this);
  v15 = ((unint64_t)v36 - ((v14 + 31) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF3;
  v16 = (VoiceActivityDetector *)MEMORY[0x24BDAC7A8](v13);
  v18 = (((unint64_t)v36 - v17) & 0xFFFFFFFFFFFFFFF3) + 16;
  VoiceActivityDetector::preprocess_analysis(v16, v19);
  v20 = 4 * v5;
  MEMORY[0x24BDAC7A8](v21);
  v22 = (float *)((((unint64_t)v36 - ((4 * v5 + 31) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF3) + 16);
  __C = 0.0;
  vDSP_vmul(*(const float **)(v3 + 56), 1, *(const float **)(v3 + 64), 1, v22, 1, v5);
  vDSP_sve(v22, 1, &__C, v5);
  vDSP_vclr(v22, 1, v5);
  v42 = 0.0;
  vDSP_vmul(*(const float **)(v3 + 56), 1, *(const float **)(v3 + 56), 1, v22, 1, v5);
  vDSP_sve(v22, 1, &v42, v5);
  vDSP_vclr(v22, 1, v5);
  v41 = 0.0;
  vDSP_vmul(*(const float **)(v3 + 64), 1, *(const float **)(v3 + 64), 1, v22, 1, v5);
  vDSP_sve(v22, 1, &v41, v5);
  v23 = 0.0;
  if (v42 > 0.0 && v41 > 0.0)
    v23 = __C / (float)(sqrtf(v42) * sqrtf(v41));
  v24 = v15 + 16;
  *(float *)(v3 + 72) = v23;
  v25 = expf(v23 * -26.49) * 8000000.0;
  memcpy(*(void **)(v3 + 64), *(const void **)(v3 + 56), 4 * v5);
  VoiceActivityDetector::update_noise_prob(this);
  vDSP_vsmul((const float *)(*(_QWORD *)(v3 + 56) + 4 * v5), 1, &__B, (float *)(v18 + 4 * v5), 1, v4);
  vDSP_vsma((const float *)(*(_QWORD *)(v3 + 88) + 4 * v5), 1, &v44, (const float *)(v18 + 4 * v5), 1, (float *)(v18 + 4 * v5), 1, v4);
  if ((int)v4 >= 1)
  {
    v26 = *(float **)(v3 + 136);
    v27 = v4;
    do
    {
      if (*v26 <= 0.0)
        *(_DWORD *)(*(_QWORD *)(v3 + 88) + v20) = *(_DWORD *)(v18 + v20);
      v20 += 4;
      ++v26;
      --v27;
    }
    while (v27);
  }
  v28 = fminf(v25, 0.1);
  v39 = 0.0;
  v40 = -1.0;
  v37 = 100.0;
  __A = 1.0;
  vDSP_vclr((float *)(v18 + 4 * v5), 1, v4);
  vDSP_vadd((const float *)(v18 + 4 * v5), 1, (const float *)(*(_QWORD *)(v3 + 88) + 4 * v5), 1, (float *)(v18 + 4 * v5), 1, v4);
  vDSP_vsadd((const float *)(v18 + 4 * v5), 1, &__A, (float *)(v18 + 4 * v5), 1, v4);
  vDSP_svdiv(&__A, (const float *)(v18 + 4 * v5), 1, (float *)(v24 + 4 * v5), 1, v4);
  vDSP_vmsa((const float *)(v6 + 4 * v5), 1, (const float *)(v24 + 4 * v5), 1, &v40, (float *)(*(_QWORD *)(v3 + 96) + 4 * v5), 1, v4);
  vDSP_vclip((const float *)(*(_QWORD *)(v3 + 96) + 4 * v5), 1, &v39, &v37, (float *)(*(_QWORD *)(v3 + 96) + 4 * v5), 1, v4);
  vDSP_vsub((const float *)(*(_QWORD *)(v3 + 96) + 4 * v5), 1, (const float *)(*(_QWORD *)(v3 + 104) + 4 * v5), 1, (float *)(v24 + 4 * v5), 1, v4);
  vDSP_vthres((const float *)(v24 + 4 * v5), 1, &v39, (float *)(v18 + 4 * v5), 1, v4);
  vDSP_vsub((const float *)(v18 + 4 * v5), 1, (const float *)(v24 + 4 * v5), 1, (float *)(v24 + 4 * v5), 1, v4);
  vDSP_vsma((const float *)(v24 + 4 * v5), 1, (const float *)(v3 + 160), (const float *)(*(_QWORD *)(v3 + 96) + 4 * v5), 1, (float *)(v24 + 4 * v5), 1, v4);
  vDSP_vsma((const float *)(v18 + 4 * v5), 1, (const float *)(v3 + 164), (const float *)(v24 + 4 * v5), 1, (float *)(*(_QWORD *)(v3 + 104) + 4 * v5), 1, 5uLL);
  vDSP_vsma((const float *)(v18 + 4 * v5 + 20), 1, (const float *)(v3 + 168), (const float *)(v24 + 4 * v5 + 20), 1, (float *)(*(_QWORD *)(v3 + 104) + 4 * v5 + 20), 1, v4 - 5);
  if ((int)v4 < 1)
  {
    v29 = 0.0;
  }
  else
  {
    v29 = 0.0;
    do
    {
      v30 = *(float *)(*(_QWORD *)(v3 + 104) + 4 * v5);
      if (v30 <= 1.0)
        v30 = -0.0;
      v29 = v29 + v30;
      ++v5;
    }
    while (v5 < v12);
  }
  v31 = v29 / (float)*((unsigned int *)this + 7);
  v32 = (float)((float)(1.0 / (float)((float)(0.5 / v31) + 1.0)) * 0.899) + 0.1;
  *(float *)(v3 + 144) = v31;
  *(float *)(v3 + 148) = v32;
  v33 = *(float *)(v3 + 152);
  if (v32 <= v33)
    v34 = (float)(v28 * v32) + (float)(v33 * (float)(1.0 - v28));
  else
    v34 = v32;
  *(float *)(v3 + 152) = v34;
  if (!*(_DWORD *)v3)
    return 1;
  if (v34 > *(float *)(v3 + 4) || *(_DWORD *)(v3 + 204) && v34 > *(float *)(v3 + 8))
  {
    result = 1;
    *(_DWORD *)(v3 + 204) = 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v3 + 204) = 0;
  }
  return result;
}

float VoiceActivityDetector::preprocess_analysis(VoiceActivityDetector *this, float *a2)
{
  uint64_t v4;
  int v5;
  vDSP_Length v6;
  int v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float *v13;
  _DWORD *v14;
  uint64_t v15;
  DSPSplitComplex v17;
  float __B;
  DSPSplitComplex __Z;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  v5 = *((_DWORD *)this + 4);
  v6 = *((int *)this + 5);
  v7 = 2 * v6 - v5;
  v8 = v5 - v7;
  v9 = *(float **)(v4 + 56);
  memcpy(*(void **)(v4 + 40), *(const void **)(v4 + 184), 4 * v7);
  memcpy((void *)(*(_QWORD *)(v4 + 40) + 4 * v7), a2, 4 * *((unsigned int *)this + 4));
  memcpy(*(void **)(v4 + 184), &a2[v8], 4 * v7);
  vDSP_vmul(*(const float **)(v4 + 40), 1, *(const float **)(v4 + 80), 1, *(float **)(v4 + 40), 1, 2 * v6);
  MEMORY[0x24BDAC7A8](v10);
  v12 = ((unint64_t)&v17 - ((v11 + 31) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF3;
  v13 = (float *)(v12 + 16 + 4 * v6);
  __Z.realp = (float *)(v12 + 16);
  __Z.imagp = v13;
  vDSP_ctoz(*(const DSPComplex **)(v4 + 40), 2, &__Z, 1, v6);
  MultiRadixRealFFT_RealInPlaceTransform();
  __B = (float)(int)v6 + (float)(int)v6;
  vDSP_vsdiv((const float *)(v12 + 16), 1, &__B, (float *)(v12 + 16), 1, 2 * v6);
  v17.realp = v13 + 1;
  v17.imagp = (float *)(v12 + 24);
  vDSP_ztoc(&v17, 1, (DSPComplex *)(*(_QWORD *)(v4 + 48) + 8), 2, v6 - 2);
  v14 = *(_DWORD **)(v4 + 48);
  *v14 = *(_DWORD *)(v12 + 16);
  v14[1] = *(_DWORD *)(v12 + 20);
  v15 = 8 * (_DWORD)v6 - 4;
  v14[2 * (_DWORD)v6 - 2] = *(_DWORD *)(v12 + 16 + v15);
  *(float *)((char *)v14 + v15) = *v13;
  vDSP_zvmags(&__Z, 1, v9, 1, v6);
  *v9 = *__Z.realp * *__Z.realp;
  return VPFilterBank::filterbank32_compute(*((VPFilterBank **)this + 4), v9, &v9[v6]);
}

void VoiceActivityDetector::update_noise_prob(VoiceActivityDetector *this)
{
  uint64_t v2;
  uint64_t v3;
  vDSP_Length v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  int v8;
  float v9;
  float v10;
  uint64_t v12;
  float v13;
  float v14;
  float __B;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 1);
  v3 = *((int *)this + 5);
  v4 = *((int *)this + 7);
  MEMORY[0x24BDAC7A8](this);
  v5 = ((unint64_t)&v12 - ((4 * v4 + 31) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF3;
  v6 = 1.0 - *(float *)(v2 + 156);
  *(_DWORD *)(v5 + 16) = 0;
  v7 = v5 + 16;
  v14 = v6 * 0.667;
  __B = v6 * 0.333;
  vDSP_vsmul((const float *)(*(_QWORD *)(v2 + 56) + 4 * v3), 1, &__B, (float *)(v7 + 4), 1, v4 - 1);
  vDSP_vsma((const float *)(*(_QWORD *)(v2 + 56) + 4 * v3 + 4), 1, &__B, (const float *)v7, 1, (float *)v7, 1, v4 - 1);
  vDSP_vsma((const float *)(*(_QWORD *)(v2 + 56) + 4 * v3), 1, &v14, (const float *)v7, 1, (float *)v7, 1, v4);
  vDSP_vsma(*(const float **)(v2 + 112), 1, (const float *)(v2 + 156), (const float *)v7, 1, *(float **)(v2 + 112), 1, v4);
  v8 = *(_DWORD *)(v2 + 200);
  if (v8 == 1)
  {
    vDSP_vclr(*(float **)(v2 + 120), 1, v4);
    vDSP_vclr(*(float **)(v2 + 128), 1, v4);
    v8 = *(_DWORD *)(v2 + 200);
  }
  v9 = (float)*((unsigned int *)this + 6);
  v10 = (float)(v9 * 0.2) / (float)(int)v3;
  if ((float)(v9 / (float)(int)v3) <= (float)v8 && v10 <= (float)v8)
    v10 = (float)(v9 + v9) / (float)(int)v3;
  if (*(_DWORD *)(v2 + 208) <= (int)v10)
  {
    vDSP_vmin(*(const float **)(v2 + 120), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 120), 1, v4);
    vDSP_vmin(*(const float **)(v2 + 128), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 128), 1, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 208) = 0;
    vDSP_vmin(*(const float **)(v2 + 128), 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 120), 1, v4);
    memcpy(*(void **)(v2 + 128), *(const void **)(v2 + 112), 4 * v4);
  }
  v13 = 4.0;
  vDSP_vsmul(*(const float **)(v2 + 120), 1, &v13, (float *)v7, 1, v4);
  vDSP_vsub((const float *)v7, 1, *(const float **)(v2 + 112), 1, *(float **)(v2 + 136), 1, v4);
}

void AUDistortion::~AUDistortion(AUDistortion *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUDistortion::GetPropertyInfo(AUDistortion *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  result = 4294956417;
  if (a3)
    return result;
  if (a2 <= 28)
  {
    if (a2 != 21)
    {
      if (a2 != 26)
        return result;
      result = 0;
      v7 = 4;
LABEL_11:
      *a5 = v7;
      *a6 = 1;
      return result;
    }
LABEL_12:
    result = 0;
    *a6 = 1;
    *a5 = 4;
    return result;
  }
  switch(a2)
  {
    case 29:
      goto LABEL_12;
    case 57:
      result = 0;
      *a5 = 384;
      *a6 = 0;
      return result;
    case 56:
      result = 0;
      v7 = 8;
      goto LABEL_11;
  }
  return result;
}

uint64_t AUDistortion::GetProperty(AUDistortion *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 28)
  {
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 26)
        return result;
      result = 0;
      v7 = *((_DWORD *)this + 148);
    }
    goto LABEL_14;
  }
  if (a2 == 29)
  {
    result = 0;
    v7 = *((unsigned __int8 *)this + 554);
LABEL_14:
    *a5 = v7;
    return result;
  }
  if (a2 == 57)
  {
    v8 = 0;
    v9 = *((_QWORD *)this + 1);
    do
    {
      v10 = overviewParameterIDs[v8];
      *(_QWORD *)a5 = v9;
      a5[3] = 0;
      a5[4] = 0;
      a5[2] = v10;
      ++v8;
      a5 += 6;
    }
    while (v8 != 16);
    return 0;
  }
  return result;
}

uint64_t AUDistortion::SetProperty(AUDistortion *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  unsigned int v7;
  uint64_t result;
  uint64_t Element;
  int v11;

  if (a2 != 26 || a3)
    return AUEffectWithCustomViewBase::SetProperty(this, a2, a3, a4, a5, a6);
  v7 = *a5;
  if (*a5 > 0x7F)
    return 4294967246;
  Element = ausdk::AUScope::SafeGetElement((AUDistortion *)((char *)this + 128), 0);
  result = 0;
  if (*(_DWORD *)(Element + 108) > 2u && v7 > 0x3F)
    v11 = 32;
  else
    v11 = v7;
  if (*((_DWORD *)this + 148) != v11)
  {
    result = 0;
    __dmb(0xBu);
    *((_DWORD *)this + 148) = v11;
  }
  return result;
}

uint64_t AUDistortion::SetParameter(AUDistortion *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 149);
  return 0;
}

uint64_t AUDistortion::GetParameterInfo(AUDistortion *this, int a2, int a3, AudioUnitParameterInfo *a4)
{
  uint64_t result;
  const __CFString *v7;
  AudioUnitParameterOptions v8;
  AudioUnitParameterValue v9;
  const __CFString *v10;
  AudioUnitParameterOptions v11;
  const __CFString *v12;
  UInt32 v13;
  const __CFString *v14;
  AudioUnitParameterOptions v15;
  AudioUnitParameterOptions v16;
  const __CFString *v17;
  AudioUnitParameterOptions v18;
  AudioUnitParameterOptions v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  uint64_t v23;
  const __CFString *v24;
  const __CFString *v25;
  AudioUnitParameterOptions v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  CFStringRef *v31[46];

  v31[45] = *(CFStringRef **)MEMORY[0x24BDAC8D0];
  a4->flags = -1073741824;
  if (a2)
    return 4294956418;
  memcpy(v31, off_24CA965F0, 0x168uLL);
  if (!LocalizeAUParameterStringsForClass<AUDistortion>(std::initializer_list<__CFString const**>)::sLocalized)
    LocalizeAUParameterStringsForClass<AUDistortion>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v31, 45);
  switch(a3)
  {
    case 0:
      v7 = (const __CFString *)kParameterDelay;
      a4->cfNameString = (CFStringRef)kParameterDelay;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v7, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 1;
      v8 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Milliseconds;
      *(_QWORD *)&a4->minValue = 0x43FA00003DCCCCCDLL;
      v9 = 0.1;
      goto LABEL_8;
    case 1:
      v10 = (const __CFString *)kParameterDecay;
      a4->cfNameString = (CFStringRef)kParameterDecay;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v10, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 1;
      v8 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Rate;
      *(_QWORD *)&a4->minValue = 0x424800003DCCCCCDLL;
      v9 = 1.0;
LABEL_8:
      v11 = v8 + 8454144;
      goto LABEL_29;
    case 2:
      v12 = (const __CFString *)kParameterDelayMix;
      a4->cfNameString = (CFStringRef)kParameterDelayMix;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v12, a4->name, 52, 0x8000100u);
      result = 0;
      v13 = 1;
      goto LABEL_28;
    case 3:
      v14 = (const __CFString *)kParameterDecimation;
      a4->cfNameString = (CFStringRef)kParameterDecimation;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v14, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 3;
      v15 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&a4->minValue = 0x42C8000000000000;
      v16 = v15 + 8454144;
      goto LABEL_13;
    case 4:
      v17 = (const __CFString *)kParameterDecimationRounding;
      a4->cfNameString = (CFStringRef)kParameterDecimationRounding;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v17, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 3;
      v18 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&a4->minValue = 0x42C8000000000000;
      v19 = v18 + 8585216;
      goto LABEL_25;
    case 5:
      v20 = (const __CFString *)kParameterDecimationMix;
      a4->cfNameString = (CFStringRef)kParameterDecimationMix;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v20, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 3;
      v16 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&a4->minValue = 0x42C8000000000000;
LABEL_13:
      a4->defaultValue = 50.0;
      a4->flags = v16;
      return result;
    case 6:
      v21 = (const __CFString *)kParameterLinearTerm;
      a4->cfNameString = (CFStringRef)kParameterLinearTerm;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v21, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 4;
      v11 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_LinearGain;
      *(_QWORD *)&a4->minValue = 0x3F80000000000000;
      v9 = 1.0;
      goto LABEL_29;
    case 7:
      v22 = (const __CFString *)kParameterSquaredTerm;
      goto LABEL_17;
    case 8:
      v22 = (const __CFString *)kParameterCubicTerm;
LABEL_17:
      a4->cfNameString = v22;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v22, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 4;
      v19 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_LinearGain;
      v23 = 0x41A0000000000000;
      goto LABEL_24;
    case 9:
      v24 = (const __CFString *)kParameterPolynomialMix;
      a4->cfNameString = (CFStringRef)kParameterPolynomialMix;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v24, a4->name, 52, 0x8000100u);
      result = 0;
      v13 = 4;
      goto LABEL_28;
    case 10:
      v25 = (const __CFString *)kParameterRingModFreq1;
      goto LABEL_21;
    case 11:
      v25 = (const __CFString *)kParameterRingModFreq2;
LABEL_21:
      a4->cfNameString = v25;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v25, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 2;
      v26 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Hertz;
      *(_QWORD *)&a4->minValue = 0x45FA00003F000000;
      v9 = 100.0;
      v11 = v26 + 12582912;
      goto LABEL_29;
    case 12:
      v27 = (const __CFString *)kParameterRingModBalance;
      a4->cfNameString = (CFStringRef)kParameterRingModBalance;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v27, a4->name, 52, 0x8000100u);
      result = 0;
      v13 = 2;
      goto LABEL_28;
    case 13:
      v28 = (const __CFString *)kParameterRingModMix;
      a4->cfNameString = (CFStringRef)kParameterRingModMix;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v28, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 2;
      v19 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Percent;
      v23 = 0x42C8000000000000;
LABEL_24:
      *(_QWORD *)&a4->minValue = v23;
LABEL_25:
      a4->defaultValue = 0.0;
      a4->flags = v19;
      return result;
    case 14:
      v29 = (const __CFString *)kParameterSoftClipGain;
      a4->cfNameString = (CFStringRef)kParameterSoftClipGain;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v29, a4->name, 52, 0x8000100u);
      result = 0;
      a4->clumpID = 5;
      v11 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&a4->minValue = 0x41A00000C2A00000;
      v9 = -6.0206;
      goto LABEL_29;
    case 15:
      v30 = (const __CFString *)kParameterFinalMix;
      a4->cfNameString = (CFStringRef)kParameterFinalMix;
      a4->flags |= 0x8000000u;
      CFStringGetCString(v30, a4->name, 52, 0x8000100u);
      result = 0;
      v13 = 7;
LABEL_28:
      a4->clumpID = v13;
      v11 = a4->flags | 0x100000;
      a4->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&a4->minValue = 0x42C8000000000000;
      v9 = 50.0;
LABEL_29:
      a4->defaultValue = v9;
      a4->flags = v11;
      break;
    default:
      return 4294956418;
  }
  return result;
}

uint64_t AUDistortion::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
    ++*((_DWORD *)this + 149);
  return result;
}

uint64_t AUDistortion::CopyClumpName(AUDistortion *this, int a2, int a3, unsigned int a4, CFTypeRef *a5)
{
  uint64_t result;
  CFTypeRef *v8;
  CFStringRef *v9[46];

  v9[45] = *(CFStringRef **)MEMORY[0x24BDAC8D0];
  if (a2)
    return 4294956430;
  memcpy(v9, off_24CA965F0, 0x168uLL);
  if (!LocalizeAUParameterStringsForClass<AUDistortion>(std::initializer_list<__CFString const**>)::sLocalized)
    LocalizeAUParameterStringsForClass<AUDistortion>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v9, 45);
  if ((a3 - 1) > 6)
    return 4294967246;
  v8 = (CFTypeRef *)off_24CA96758[a3 - 1];
  CFRetain(*v8);
  result = 0;
  *a5 = *v8;
  return result;
}

uint64_t AUDistortion::GetPresets(AUDistortion *this, const __CFArray **a2)
{
  __CFArray *Mutable;
  uint64_t i;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 22, 0);
    for (i = 0; i != 352; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUDistortion::NewFactoryPresetSet(AUDistortion *this, const AUPreset *a2)
{
  uint64_t v3;
  SInt32 presetNumber;

  v3 = 0;
  presetNumber = a2->presetNumber;
  while (presetNumber != *(_DWORD *)((char *)&sPresets + v3))
  {
    v3 += 16;
    if (v3 == 352)
      return 4294956445;
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)((char *)&sPresets + v3));
  AUDistortion::SetParamsForPreset(this, presetNumber);
  return 0;
}

double AUDistortion::GetTailTime(AUDistortion *this)
{
  return ausdk::AUEffectBase::GetParameter(this, 0) / 1000.0;
}

uint64_t AUDistortion::SupportsTail(AUDistortion *this)
{
  return 1;
}

uint64_t AUDistortion::NewKernel@<X0>(AUDistortion *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_24CA8FF10;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 228) = 0x1000000004;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 248) = 0;
  *(_QWORD *)(v4 + 256) = 0;
  *(_DWORD *)(v4 + 268) = 16;
  *(_QWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  v5 = operator new();
  MEMORY[0x212BCD4C4](v5, *(unsigned int *)(v4 + 232), *(unsigned int *)(v4 + 228), 48.0, 0.9);
  *(_QWORD *)(v4 + 320) = v5;
  LODWORD(v5) = *(_DWORD *)(v4 + 228);
  v6 = operator new();
  MEMORY[0x212BCD4C4](v6, *(unsigned int *)(v4 + 232), *(unsigned int *)(v4 + 228), 48.0, 0.8 / (double)(int)v5);
  *(_QWORD *)(v4 + 328) = v6;
  v7 = 1 << -(char)__clz((*(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*(_QWORD *)(v4 + 8) + 128), 0)+ 80)* 2000.0/ 100.0)- 1);
  *(_DWORD *)(v4 + 56) = v7;
  std::vector<float>::resize((char **)(v4 + 32), v7);
  LODWORD(v6) = *(_DWORD *)(*(_QWORD *)(v4 + 8) + 336);
  std::vector<float>::resize((char **)(v4 + 240), (*(_DWORD *)(v4 + 232) + v6));
  *(_DWORD *)(v4 + 264) = *(_DWORD *)(v4 + 232) - 1;
  std::vector<float>::resize((char **)(v4 + 272), (*(_DWORD *)(v4 + 268) + 4 * v6));
  *(_DWORD *)(v4 + 296) = *(_DWORD *)(v4 + 268) - 4;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *a2 = v4;
  return result;
}

void sub_210A8FDE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;

  MEMORY[0x212BCDF50](v5, 0x1080C4003DAF236);
  std::unique_ptr<SincKernel>::reset[abi:ne180100]((SincKernel **)(v1 + 320), 0);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 280) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 248) = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v9;
    operator delete(v9);
  }
  MEMORY[0x212BCDF50](v1, 0x10A1C4049825988);
  _Unwind_Resume(a1);
}

uint64_t AUDistortion::Version(AUDistortion *this)
{
  return 0x10000;
}

SincKernel *std::unique_ptr<SincKernel>::reset[abi:ne180100](SincKernel **a1, SincKernel *a2)
{
  SincKernel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    SincKernel::~SincKernel(result);
    JUMPOUT(0x212BCDF50);
  }
  return result;
}

void AUDistortionKernel::~AUDistortionKernel(SincKernel **this)
{
  AUDistortionKernel::~AUDistortionKernel(this);
  JUMPOUT(0x212BCDF50);
}

{
  SincKernel *v2;
  SincKernel *v3;
  SincKernel *v4;

  *this = (SincKernel *)&off_24CA8FF10;
  std::unique_ptr<SincKernel>::reset[abi:ne180100](this + 41, 0);
  std::unique_ptr<SincKernel>::reset[abi:ne180100](this + 40, 0);
  v2 = this[34];
  if (v2)
  {
    this[35] = v2;
    operator delete(v2);
  }
  v3 = this[30];
  if (v3)
  {
    this[31] = v3;
    operator delete(v3);
  }
  v4 = this[4];
  if (v4)
  {
    this[5] = v4;
    operator delete(v4);
  }
}

void AUDistortionKernel::Reset(AUDistortionKernel *this)
{
  void *v2;
  uint64_t v3;
  SincKernel *v4;
  double v5;
  SincKernel *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  *((_DWORD *)this + 5) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 15) = *((_DWORD *)this + 14) - 1;
  v2 = (void *)*((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 5) - (_QWORD)v2;
  if (v3)
    bzero(v2, v3 & 0xFFFFFFFFFFFFFFFCLL);
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_QWORD *)((char *)this + 308) = 0;
  *(_QWORD *)((char *)this + 300) = 0;
  v4 = (SincKernel *)operator new();
  MEMORY[0x212BCD4C4](v4, *((unsigned int *)this + 58), *((unsigned int *)this + 57), 48.0, 0.9);
  std::unique_ptr<SincKernel>::reset[abi:ne180100]((SincKernel **)this + 40, v4);
  v5 = 0.8 / (double)*((int *)this + 57);
  v6 = (SincKernel *)operator new();
  MEMORY[0x212BCD4C4](v6, *((unsigned int *)this + 58), *((unsigned int *)this + 57), 48.0, v5);
  std::unique_ptr<SincKernel>::reset[abi:ne180100]((SincKernel **)this + 41, v6);
  v7 = (void *)*((_QWORD *)this + 30);
  v8 = *((_QWORD *)this + 31) - (_QWORD)v7;
  if (v8)
    bzero(v7, v8 & 0xFFFFFFFFFFFFFFFCLL);
  *((_DWORD *)this + 66) = *((_DWORD *)this + 58) - 1;
  v9 = (void *)*((_QWORD *)this + 34);
  v10 = *((_QWORD *)this + 35) - (_QWORD)v9;
  if (v10)
    bzero(v9, v10 & 0xFFFFFFFFFFFFFFFCLL);
  *((_DWORD *)this + 74) = *((_DWORD *)this + 67) - 4;
}

void sub_210A9004C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x1080C4003DAF236);
  _Unwind_Resume(a1);
}

void AUDistortionKernel::Process(AUDistortionKernel *this, const float *a2, float *a3, int a4, BOOL *a5)
{
  uint64_t v9;
  int v10;
  float v11;
  float Parameter;
  float v13;
  double v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  __float2 v22;
  __float2 v23;
  float v24;
  float v25;
  double v26;
  double v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  int v35;
  int v36;
  float v37;
  uint64_t v38;
  int v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  int v56;
  float v57;
  float v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  double v63;
  int v64;
  int v65;
  float v67;
  float v68;
  int v74;
  float v79;
  float32x4_t v80;
  float v81;
  double v82;
  float v83;
  float v84;
  int v85;
  int v86;
  float v87;
  float v88;
  float v90;
  float32x4_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  double v97;
  float v98;

  v9 = *((_QWORD *)this + 1);
  v10 = *(_DWORD *)(v9 + 596);
  if (*((_DWORD *)this + 5) != v10)
  {
    *((_DWORD *)this + 5) = v10;
    v11 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v9 + 128), 0) + 80);
    *((double *)this + 3) = 1.0 / v11;
    *((_DWORD *)this + 34) = (int)((float)(ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 3u)
                                         * 0.01)
                                 * 511.0)
                           + 1;
    Parameter = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 4u);
    v13 = exp2f((float)((float)((float)(Parameter * -0.01) * 31.0) + 31.0) + 1.0);
    *((float *)this + 35) = v13;
    *((float *)this + 36) = 1.0 / v13;
    v97 = (float)(v11 * 0.25);
    if (v97 * 0.001 >= 2.22507386e-308)
      v14 = -6.90775528 / (v97 * 0.001);
    else
      v14 = -INFINITY;
    v15 = exp(v14);
    if (v14 < -708.4)
      v15 = 0.0;
    v16 = v15;
    *((float *)this + 18) = v16;
    v17 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0) * 0.001;
    *((_DWORD *)this + 37) = (int)(float)(v17 * v11);
    v18 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 1u);
    v19 = exp(v17 * -6.90775528 / (float)(v17 * v18));
    *((float *)this + 38) = v19;
    *((float *)this + 16) = v16;
    v20 = *((double *)this + 3) * 6.28318531;
    *(float *)&v20 = v20 * ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xAu);
    v21 = *((double *)this + 3) * 6.28318531;
    *(float *)&v21 = v21 * ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xBu);
    v22 = __sincosf_stret(*(float *)&v20);
    *((float *)this + 51) = v22.__cosval + v22.__cosval;
    v23 = __sincosf_stret(*(float *)&v21);
    *((_DWORD *)this + 52) = 0;
    *((_DWORD *)this + 55) = 0;
    *((float *)this + 53) = -v22.__sinval;
    *((float *)this + 54) = v23.__cosval + v23.__cosval;
    *((float *)this + 56) = -v23.__sinval;
    v24 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xCu) * 0.01;
    *((float *)this + 39) = v24;
    *((float *)this + 40) = 1.0 - v24;
    v25 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xEu);
    *((float *)this + 41) = __exp10f(v25 * 0.05);
    if (v97 * 0.03 >= 2.22507386e-308)
      v26 = -6.90775528 / (v97 * 0.03);
    else
      v26 = -INFINITY;
    v27 = exp(v26);
    if (v26 < -708.4)
      v27 = 0.0;
    v28 = v27;
    *((float *)this + 17) = v28;
    v29 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 9u) * 0.01;
    *((float *)this + 42) = sqrtf(v29);
    *((float *)this + 43) = sqrtf(1.0 - v29);
    v30 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xDu) * 0.01;
    *((float *)this + 44) = sqrtf(v30);
    *((float *)this + 45) = sqrtf(1.0 - v30);
    v31 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 5u) * 0.01;
    *((float *)this + 46) = sqrtf(v31);
    *((float *)this + 47) = sqrtf(1.0 - v31);
    *((float *)this + 48) = sqrtf(ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 2u) * 0.01);
    v32 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0xFu) * 0.01;
    *((float *)this + 49) = sqrtf(v32);
    *((float *)this + 50) = sqrtf(1.0 - v32);
    v9 = *((_QWORD *)this + 1);
  }
  v33 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(v9 + 128), 0) + 80);
  *((double *)this + 3) = 1.0 / v33;
  v34 = *((_DWORD *)this + 34);
  v35 = *((_DWORD *)this + 35);
  v36 = *((_DWORD *)this + 37);
  v96 = *((float *)this + 38);
  v37 = *((float *)this + 21);
  v38 = *((_QWORD *)this + 4);
  v39 = *((_DWORD *)this + 19);
  v40 = *((_DWORD *)this + 20);
  v95 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 6u);
  v94 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 7u);
  v93 = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 8u);
  v42 = *((float *)this + 22);
  v41 = *((float *)this + 23);
  v43 = *((float *)this + 24);
  _Q4 = *(float32x4_t *)((char *)this + 100);
  _Q27 = *(float32x4_t *)((char *)this + 116);
  v46 = *((float *)this + 33);
  v47 = *((float *)this + 75);
  v48 = *((float *)this + 76);
  v49 = *((float *)this + 77);
  v50 = *((float *)this + 78);
  v51 = *((float *)this + 52);
  v52 = *((float *)this + 53);
  v54 = *((float *)this + 55);
  v53 = *((float *)this + 56);
  if (a4)
  {
    v55 = 0;
    v56 = *((_DWORD *)this + 39);
    v57 = *((float *)this + 41);
    v58 = *((float *)this + 51);
    v92 = *((float *)this + 50);
    v59 = *((float *)this + 54);
    v60.i64[0] = *((_QWORD *)this + 23);
    v61.i64[0] = *((_QWORD *)this + 22);
    v60.i64[1] = *((_QWORD *)this + 21);
    v61.i64[1] = *((_QWORD *)this + 24);
    v91 = v60;
    v62 = 1.0;
    v63 = 0.995;
    v64 = 1;
    v65 = *((_DWORD *)this + 15);
    do
    {
      _S24 = a2[v55];
      v67 = -(float)(v52 - (float)(v58 * v51));
      v68 = -(float)(v53 - (float)(v59 * v54));
      __asm { FMLA            S0, S24, V27.S[1] }
      if (v64 == v34)
        v64 = 1;
      else
        ++v64;
      v74 = v40 - v39;
      if (v40 - v39 < 0)
        v74 += *((_DWORD *)this + 14);
      __asm { FMLA            S13, S0, V4.S[1] }
      v49 = (float)(_S13 - v47) + (float)(v49 * 0.995);
      _S7 = *(_DWORD *)(v38 + 4 * v74);
      __asm
      {
        FMLA            S0, S7, V27.S[2]
        FMLA            S16, S0, V4.S[3]
      }
      *(float *)(v38 + 4 * v40) = v37 * (float)((float)(v57 * _S16) / (float)(fabsf(v57 * _S16) + v62));
      if ((v55 & 3) != 0)
      {
        v79 = v46;
        v80 = _Q27;
      }
      else
      {
        v81 = *((float *)this + 18);
        v39 += (int)(float)(v81 * (float)(v36 - v39));
        v98 = v68;
        v82 = v63;
        v83 = v59;
        v84 = v57;
        v85 = v56;
        v86 = v35;
        v87 = *((float *)this + 16);
        v88 = *((float *)this + 17);
        v42 = v42 + (float)(v87 * (float)(v95 - v42));
        v41 = v41 + (float)(v87 * (float)(v94 - v41));
        v43 = v43 + (float)(v87 * (float)(v93 - v43));
        v35 = v86;
        _Q4 = vmlaq_n_f32(_Q4, vsubq_f32(v91, _Q4), v88);
        v56 = v85;
        v57 = v84;
        v59 = v83;
        v63 = v82;
        v68 = v98;
        v37 = v37 + (float)(v81 * (float)(v96 - v37));
        v80 = vmlaq_n_f32(_Q27, vsubq_f32(v61, _Q27), v88);
        v79 = v46 + (float)(v88 * (float)(v92 - v46));
        v62 = 1.0;
      }
      __asm { FMLA            S16, S7, V27.S[2] }
      v90 = vmuls_lane_f32(_S16, _Q27, 3) + (float)(v46 * _S24);
      v50 = (float)(v90 - v48) + v50 * v63;
      a3[v55] = v50;
      v40 = v65 & (v40 + 1);
      v52 = v51;
      v53 = v54;
      ++v55;
      v54 = v68;
      v51 = v67;
      v48 = v90;
      v47 = _S13;
      v46 = v79;
      _Q27 = v80;
    }
    while (a4 != v55);
  }
  else
  {
    v79 = *((float *)this + 33);
    _S13 = *((float *)this + 75);
    v90 = *((float *)this + 76);
    v67 = *((float *)this + 52);
    v68 = *((float *)this + 55);
    v80 = *(float32x4_t *)((char *)this + 116);
  }
  *((float *)this + 52) = v67;
  *((float *)this + 53) = v52;
  *((float *)this + 55) = v68;
  *((float *)this + 56) = v53;
  *((float *)this + 75) = _S13;
  *((float *)this + 76) = v90;
  *((float *)this + 77) = v49;
  *((float *)this + 78) = v50;
  *((_DWORD *)this + 19) = v39;
  *((_DWORD *)this + 20) = v40;
  *((float *)this + 21) = v37;
  *((float *)this + 22) = v42;
  *((float *)this + 23) = v41;
  *((float *)this + 24) = v43;
  *(float32x4_t *)((char *)this + 100) = _Q4;
  *(float32x4_t *)((char *)this + 116) = v80;
  *((float *)this + 33) = v79;
}

void AUDistortion::SetParamsForPreset(AUDistortion *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;

  v3 = 0;
  v4 = (char *)&presetParams + 64 * (uint64_t)a2;
  do
  {
    v5 = *((_QWORD *)this + 9);
    if (v5)
    {
      v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
    }
    else
    {
      v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v7)
        v6 = 0;
      else
        v6 = *v7;
    }
    ausdk::AUElement::SetParameter(v6, v3, *(float *)&v4[4 * v3], 0);
    ++v3;
  }
  while (v3 != 16);
  ++*((_DWORD *)this + 149);
}

_QWORD *AUDistortionFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDistortion>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDistortion>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDistortion>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void AUDistortion::AUDistortion(AUDistortion *this, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  uint64_t Element;
  uint64_t v5;
  AUDistortion *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  AudioUnitParameterInfo v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *((_WORD *)v3 + 276) = 0;
  *((_QWORD *)v3 + 68) = 0;
  *((_OWORD *)v3 + 33) = 0u;
  *((_BYTE *)v3 + 554) = 1;
  *((_DWORD *)v3 + 139) = 0;
  *((_BYTE *)v3 + 560) = 0;
  *((_DWORD *)v3 + 147) = 0;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *((_BYTE *)v3 + 584) = 0;
  *(_QWORD *)v3 = &off_24CA8BCD8;
  *((_DWORD *)v3 + 149) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)v3);
  v8 = 0x40E5888000000000;
  v9 = xmmword_210B09F40;
  v10 = xmmword_210B09F50;
  Element = ausdk::AUScope::SafeGetElement((AUDistortion *)((char *)this + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v8);
  v5 = ausdk::AUScope::SafeGetElement((AUDistortion *)((char *)this + 128), 0);
  v6 = (AUDistortion *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 56))(v5, &v8);
  v7 = 0;
  *((_DWORD *)this + 148) = 64;
  do
  {
    AUDistortion::GetParameterInfo(v6, 0, v7, &v11);
    ausdk::AUEffectBase::SetParameter(this, v7++, v11.defaultValue);
  }
  while (v7 != 16);
  AUDistortion::SetParamsForPreset(this, 0);
  *((_BYTE *)this + 553) = 1;
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sPresets);
}

void sub_210A909D0(_Unwind_Exception *a1)
{
  AUEffectWithCustomViewBase *v1;

  AUEffectWithCustomViewBase::~AUEffectWithCustomViewBase(v1);
  _Unwind_Resume(a1);
}

void RandomValueControlSource::~RandomValueControlSource(RandomValueControlSource *this)
{
  *((_QWORD *)this + 4) = off_24CA88518;
  *(_QWORD *)this = &unk_24CA88580;
  *((_QWORD *)this + 1) = &unk_24CA885E0;
}

{
  *((_QWORD *)this + 4) = off_24CA88518;
  *(_QWORD *)this = &unk_24CA88580;
  *((_QWORD *)this + 1) = &unk_24CA885E0;
  MemAllocator::FreeMem(this, (void *)0xB8);
}

uint64_t RandomValueControlSource::GetRunFrameCount(RandomValueControlSource *this, uint64_t a2)
{
  return a2;
}

void `virtual thunk to'RandomValueControlSource::~RandomValueControlSource(RandomValueControlSource *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1[4] = off_24CA88518;
  *v1 = &unk_24CA88580;
  v1[1] = &unk_24CA885E0;
}

{
  RandomValueControlSource::~RandomValueControlSource((RandomValueControlSource *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'RandomValueControlSource::GetRunFrameCount(RandomValueControlSource *this, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

uint64_t AUNotQuiteSoSimpleTime::GetProperty(AUNotQuiteSoSimpleTime *this, int a2, int a3, unsigned int a4, char *__dst)
{
  uint64_t result;
  int v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int16 v30;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 56)
  {
    if (a2 > 3801)
    {
      if (a2 == 3802)
      {
        if (*((_BYTE *)this + 17))
        {
          v11 = *(_DWORD *)__dst;
          if (*(_DWORD *)__dst)
          {
            v12 = 0;
            v13 = *((_BYTE *)this + 1029) != 0;
            v14 = *((double *)this + 145);
            v15 = *((double *)this + 144);
            v16 = *((double *)this + 147);
            v17 = *((double *)this + 146);
            v18 = *((double *)this + 106);
            v19 = *((_DWORD *)this + 250);
LABEL_26:
            v20 = *((_DWORD *)this + 249);
            while (1)
            {
              v22 = v20 >= v19;
              v21 = v20 - v19;
              if (v21 != 0 && v22)
              {
                v22 = v11 >= v21;
                v23 = v11 - v21;
                v11 = v22 ? v23 : 0;
                if (v23 == 0 || !v22)
                  break;
              }
              if (!v13)
              {
                v24 = (double)v20;
                if (**((_QWORD **)this + 143))
                {
                  v16 = v14 + v24;
                  RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(*((_QWORD *)this + 142) + 8), v14 + v24);
                  v25 = v17 - v15;
                }
                else
                {
                  v25 = floor(v24 * *((double *)this + 105) + 0.5);
                }
                v13 = 0;
                v19 = 0;
                v26 = v18 + v25;
                v12 += v26;
                v18 = v26 - (double)v26;
                v14 = v16;
                v15 = v17;
                goto LABEL_26;
              }
              v13 = 0;
              v19 = 0;
              v12 += *((_DWORD *)this + 247);
              v16 = v14;
              v17 = v15;
            }
          }
          else
          {
            v12 = 0;
          }
          result = 0;
          *((_DWORD *)__dst + 1) = v12;
        }
        else
        {
          return 4294956429;
        }
      }
      else if (a2 == 3803)
      {
        if (*((_BYTE *)this + 17))
        {
          ausdk::AUScope::SafeGetElement((AUNotQuiteSoSimpleTime *)((char *)this + 80), 0);
          ausdk::AUScope::SafeGetElement((AUNotQuiteSoSimpleTime *)((char *)this + 128), 0);
        }
        RampList::Writer::GetRamps();
        return 0;
      }
    }
    else if (a2 == 57)
    {
      result = 0;
      *(_QWORD *)__dst = *((_QWORD *)this + 1);
      *((_QWORD *)__dst + 1) = 0;
      *((_DWORD *)__dst + 4) = 0;
    }
    else if (a2 == 3801)
    {
      v9 = *((_BYTE *)this + 745);
      v29 = *(_DWORD *)((char *)this + 746);
      v30 = *((_WORD *)this + 375);
      v10 = *((_QWORD *)this + 94);
      v27 = *(_OWORD *)((char *)this + 760);
      LOBYTE(v28) = *((_BYTE *)this + 776);
      memmove(__dst, (char *)this + 528, 0xD9uLL);
      result = 0;
      __dst[217] = v9;
      *(_DWORD *)(__dst + 218) = v29;
      *((_WORD *)__dst + 111) = v30;
      *((_QWORD *)__dst + 28) = v10;
      *(_OWORD *)(__dst + 232) = v27;
      *((_QWORD *)__dst + 31) = v28;
    }
  }
  else
  {
    if (a2 <= 36)
    {
      if (a2 == 21)
      {
        result = 0;
        v8 = *((_DWORD *)this + 256);
      }
      else
      {
        if (a2 != 26)
          return result;
        result = 0;
        v8 = *((_DWORD *)this + 206);
      }
      goto LABEL_22;
    }
    if (a2 == 37)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 1028);
LABEL_22:
      *(_DWORD *)__dst = v8;
      return result;
    }
    if (a2 == 49)
    {
      result = 0;
      *(_OWORD *)__dst = *(_OWORD *)((char *)this + 808);
    }
  }
  return result;
}

double AUNotQuiteSoSimpleTime::GetParameterInfo(AUNotQuiteSoSimpleTime *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  double result;
  AudioUnitParameterOptions v6;

  buffer->flags = -1073741824;
  if (!(a3 | a2))
  {
    buffer->cfNameString = CFSTR("rate");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("rate"), buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Rate;
    result = 2.00000047;
    *(_QWORD *)&buffer->minValue = 0x400000003F000000;
    v6 = buffer->flags + 12582912;
    buffer->defaultValue = 1.0;
    buffer->flags = v6;
  }
  return result;
}

double AUNotQuiteSoSimpleTime::GetTailTime(AUNotQuiteSoSimpleTime *this)
{
  return 0.0;
}

uint64_t AUNotQuiteSoSimpleTime::SupportsTail(AUNotQuiteSoSimpleTime *this)
{
  return 1;
}

uint64_t AUNotQuiteSoSimpleTime::SupportedNumChannels(AUNotQuiteSoSimpleTime *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNotQuiteSoSimpleTime::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUNotQuiteSoSimpleTime::Version(AUNotQuiteSoSimpleTime *this)
{
  return 0x10000;
}

void std::__destroy_at[abi:ne180100]<AUNotQuiteSoSimpleTime::PerChannelState,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
}

void std::vector<AUNotQuiteSoSimpleTime::PerChannelState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<AUNotQuiteSoSimpleTime::PerChannelState,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *AUNotQuiteSoSimpleTimeFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x4E8uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUNotQuiteSoSimpleTime>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUNotQuiteSoSimpleTime>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void MemorySample::~MemorySample(MemorySample *this)
{
  MemorySample::~MemorySample(this);
  JUMPOUT(0x212BCDF50);
}

{
  *(_QWORD *)this = &off_24CA8C1E0;
  MemorySample::Unload(this);
  Sample::~Sample(this);
}

uint64_t MemorySample::IsLoaded(MemorySample *this)
{
  return *((unsigned __int8 *)this + 197);
}

void MemorySample::Unload(MemorySample *this)
{
  uint64_t v2;
  const void *v3;

  v2 = *((_QWORD *)this + 17);
  if (v2)
    MEMORY[0x212BCDF2C](v2, 0x1000C8077774924);
  *((_QWORD *)this + 17) = 0;
  v3 = (const void *)*((_QWORD *)this + 4);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 197) = 0;
}

uint64_t std::allocate_shared[abi:ne180100]<TFileBSD,std::allocator<TFileBSD>,__CFURL const*&,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24CA95880;
  result = MEMORY[0x212BCDBCC](v4 + 3, a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_210A91040(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TFileBSD>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TFileBSD>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_emplace<TFileBSD>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void InfoChunk::InfoChunk(InfoChunk *this, RIFFChunkHeader *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  int v8;
  TStream *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char Byte;
  unint64_t *v14;
  unint64_t v15;

  *(_QWORD *)this = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = 0;
  v7 = *(_OWORD *)((char *)a2 + 28);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 28) = v7;
  v8 = *((_DWORD *)this + 6);
  *((_BYTE *)this + 303) = 0;
  do
  {
    while (1)
    {
      v9 = *(TStream **)this;
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      Byte = TStream::ReadByte(v9);
      if (v10)
      {
        v14 = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v6 < 0xFF)
        break;
      if ((int)++v6 >= v8)
        return;
    }
    *((_BYTE *)this + v6++ + 48) = Byte;
  }
  while ((int)v6 < v8);
  *((_BYTE *)this + v6 + 48) = 0;
}

void sub_210A911B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void InfoList::AddInfo(uint64_t *a1, int a2, TString *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD v26[2];
  char *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  void *v31[7];

  v31[6] = *(void **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a1[1];
  if (v7 == *a1)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - v7) >> 3)) >= 4)
    {
LABEL_19:
      LODWORD(v30) = a2;
      TString::TString((TString *)v31, a3);
      v17 = a1[2];
      v18 = (_DWORD *)a1[1];
      if ((unint64_t)v18 >= v17)
      {
        v20 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v18 - *a1) >> 3);
        if ((unint64_t)(v20 + 1) > 0x492492492492492)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - *a1) >> 3);
        v22 = 2 * v21;
        if (2 * v21 <= v20 + 1)
          v22 = v20 + 1;
        if (v21 >= 0x249249249249249)
          v23 = 0x492492492492492;
        else
          v23 = v22;
        v29 = a1 + 2;
        if (v23)
        {
          if (v23 > 0x492492492492492)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v24 = (char *)operator new(56 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[56 * v20];
        v26[0] = v24;
        v26[1] = v25;
        v27 = v25;
        v28 = &v24[56 * v23];
        *(_DWORD *)v25 = (_DWORD)v30;
        TString::TString((TString *)(v25 + 8), (const TString *)v31);
        v27 += 56;
        std::vector<InfoList::InfoEntry>::__swap_out_circular_buffer(a1, v26);
        v19 = (_DWORD *)a1[1];
        std::__split_buffer<InfoList::InfoEntry>::~__split_buffer((uint64_t)v26);
      }
      else
      {
        *v18 = (_DWORD)v30;
        TString::TString((TString *)(v18 + 2), (const TString *)v31);
        v19 = v18 + 14;
        a1[1] = (uint64_t)(v18 + 14);
      }
      a1[1] = (uint64_t)v19;
      if (v31[0])
        free(v31[0]);
      return;
    }
    v31[3] = a1 + 2;
    v30 = (char *)operator new(0xE0uLL);
    v31[0] = v30;
    v31[1] = v30;
    v31[2] = v30 + 224;
    std::vector<InfoList::InfoEntry>::__swap_out_circular_buffer(a1, &v30);
    std::__split_buffer<InfoList::InfoEntry>::~__split_buffer((uint64_t)&v30);
    v6 = *a1;
    v7 = a1[1];
  }
  v8 = v7 - v6;
  if (v7 == v6)
    goto LABEL_19;
  v9 = 0;
  v10 = 0;
  v11 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
  while (*(_DWORD *)(v6 + 56 * v9) != a2)
  {
    v9 = ++v10;
    if (v11 <= v10)
      goto LABEL_19;
  }
  if (v10 == -1)
    goto LABEL_19;
  v12 = v6 + 56 * (int)v10;
  v13 = *(unsigned __int8 **)a3;
  if (!*(_QWORD *)a3)
    v13 = (unsigned __int8 *)a3 + 8;
  v14 = *v13;
  TString::AllocateBuffer((void **)(v12 + 8), *v13);
  if (*(_QWORD *)(v12 + 8))
    v15 = *(void **)(v12 + 8);
  else
    v15 = (void *)(v12 + 16);
  if (*(_QWORD *)a3)
    v16 = *(char **)a3;
  else
    v16 = (char *)a3 + 8;
  memcpy(v15, v16, v14 + 2);
}

void sub_210A914B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
  std::__split_buffer<InfoList::InfoEntry>::~__split_buffer((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::vector<InfoList::InfoEntry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  for (i = 64; ; i -= 56)
  {
    v8 = v6 + i;
    v9 = v4 + i;
    if (v4 + i - 64 == v5)
      break;
    *(_DWORD *)(v8 - 120) = *(_DWORD *)(v9 - 120);
    TString::TString((TString *)(v8 - 112), (const TString *)(v9 - 112));
  }
  v10 = v8 - 64;
  a2[1] = v10;
  v11 = *a1;
  *a1 = v10;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<InfoList::InfoEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    *(_QWORD *)(a1 + 16) = v3 - 56;
    v4 = *(void **)(v3 - 48);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(v3 - 48) = 0;
      v3 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v3 -= 56;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void InfoListChunk::InfoListChunk(InfoListChunk *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unsigned int v19;
  int v20;
  void *v21[6];
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  char v30[264];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)this + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)(a2 + 28);
  *((_OWORD *)this + 1) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)((char *)this + 28) = v8;
  if (!*((_BYTE *)this + 17) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)v23 = "DlsFileBase.cpp";
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)&v23[10] = 403;
    v24 = 2080;
    v25 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFileBase.cpp";
    v26 = 1024;
    v27 = 403;
    v28 = 2080;
    v29 = "GetHeader().IsListType()";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  v9 = (unint64_t)this + 16;
  if (*((_DWORD *)this + 10) != 1330007625 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)v23 = "DlsFileBase.cpp";
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)&v23[10] = 404;
    v24 = 2080;
    v25 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFileBase.cpp";
    v26 = 1024;
    v27 = 404;
    v28 = 2080;
    v29 = "GetHeader().GetSubType() == ChunkType(kListType_InfoList)";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (*(_BYTE *)v9)
  {
    while (!RIFFChunkHeader::IsDone(this))
    {
      v17 = 0;
      v18 = 0;
      v19 = 1061109567;
      v20 = 1061109567;
      RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v17, *(RIFFChunkHeader **)this, *((_QWORD *)this + 1));
      InfoChunk::InfoChunk((InfoChunk *)buf, (RIFFChunkHeader *)&v17);
      v10 = v19;
      TString::TString((TString *)v21, v30);
      v9 = v9 & 0xFFFFFFFF00000000 | v10;
      InfoList::AddInfo(a3, v9, (TString *)v21);
      if (v21[0])
        free(v21[0]);
      v11 = *(std::__shared_weak_count **)&v23[4];
      if (*(_QWORD *)&v23[4])
      {
        v12 = (unint64_t *)(*(_QWORD *)&v23[4] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
}

void sub_210A91924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  if (a15)
    free(a15);
  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  if (a10)
  {
    v26 = (unint64_t *)&a10->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void SamplerState::GetProperty(SamplerState *this, unsigned int a2, void *a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "SamplerState.h";
    v5 = 1024;
    v6 = 59;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Not implemented for this subclass", (uint8_t *)&v3, 0x12u);
  }
  __break(1u);
}

void SamplerState::SetProperty(SamplerState *this, unsigned int a2, const void *a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v3 = 136315394;
    v4 = "SamplerState.h";
    v5 = 1024;
    v6 = 61;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Not implemented for this subclass", (uint8_t *)&v3, 0x12u);
  }
  __break(1u);
}

void SamplerState::Save(SamplerState *this, CACFDictionary *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315394;
    v3 = "SamplerState.h";
    v4 = 1024;
    v5 = 65;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Not implemented for this subclass", (uint8_t *)&v2, 0x12u);
  }
  __break(1u);
}

void SamplerState::Restore(SamplerState *this, const CACFDictionary *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v2 = 136315394;
    v3 = "SamplerState.h";
    v4 = 1024;
    v5 = 67;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Not implemented for this subclass", (uint8_t *)&v2, 0x12u);
  }
  __break(1u);
}

_BYTE *SamplerState::SetEnabled(_BYTE *this, int a2)
{
  if (this[48] != a2)
  {
    this[48] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4121, 0);
  }
  return this;
}

uint64_t SamplerState::SetName(SamplerState *this, const __CFString *a2, int a3)
{
  uint64_t result;

  result = CACFString::operator=((uint64_t)this + 32, a2);
  if (a3)
    return (*(uint64_t (**)(SamplerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4120, 0);
  return result;
}

uint64_t SamplerState::Disconnect(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 104))(this);
  return this;
}

void SamplerState::~SamplerState(SamplerState *this)
{
  SamplerState::~SamplerState(this);
  JUMPOUT(0x212BCDF50);
}

{
  _DWORD *v2;
  int v3;
  int v4;
  caulk::rt_safe_memory_resource *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24CA8C2A8;
  v2 = (_DWORD *)*((_QWORD *)this + 3);
  if (!v2)
  {
LABEL_7:
    v5 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 8);
    if (v5)
    {
      *((_QWORD *)this + 9) = v5;
      std::allocator_traits<caulk::rt_allocator<StateView *>>::deallocate[abi:ne180100](v5, (uint64_t)(*((_QWORD *)this + 10) - (_QWORD)v5) >> 3);
    }
    CACFString::~CACFString((SamplerState *)((char *)this + 32));
    return;
  }
  v3 = v2[3];
  if (v3)
  {
    v4 = v3 - 1;
    v2[3] = v4;
    if (!v4 && !v2[2])
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 104))(v2);
    *((_QWORD *)this + 3) = 0;
    goto LABEL_7;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v6 = 136315394;
    v7 = "SamplerState.cpp";
    v8 = 1024;
    v9 = 64;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: unbalanced reference count", (uint8_t *)&v6, 0x12u);
  }
  __break(1u);
}

_QWORD *SamplerState::Notify(SamplerState *this, uint64_t a2, int a3)
{
  _QWORD *result;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3)
    (*(void (**)(SamplerState *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 120))(this, a2, *((unsigned int *)this + 4), *((unsigned int *)this + 5));
  result = CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v11, (uint64_t)this + 52, 0);
  v6 = v11;
  if (*v11)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "SamplerState.cpp";
      v14 = 1024;
      v15 = 133;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: Did not acquire mViewsLock", buf, 0x12u);
    }
    __break(1u);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  v7 = (_QWORD *)*((_QWORD *)this + 9);
  if (v8 != v7)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
      ++v8;
    }
    while (v8 != v7);
    v6 = v11;
  }
  v9 = v6 + 1;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return result;
}

void sub_210A91D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

uint64_t SamplerState::DoNotify(SamplerState *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<StateView *>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 61))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void SamplerState::SamplerState(SamplerState *this, int a2, int a3, SamplerState *a4, unsigned int a5)
{
  *(_QWORD *)this = &off_24CA8C2A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 1;
  *((_BYTE *)this + 48) = 1;
  *(_QWORD *)((char *)this + 52) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (a4)
    ++*((_DWORD *)a4 + 3);
  std::vector<StateView *,caulk::rt_allocator<StateView *>>::reserve((unint64_t *)this + 8, a5 >> 1);
}

void sub_210A91FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  CACFString *v2;
  caulk::rt_safe_memory_resource **v3;
  caulk::rt_safe_memory_resource *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    std::allocator_traits<caulk::rt_allocator<StateView *>>::deallocate[abi:ne180100](v5, (uint64_t)(*(_QWORD *)(v1 + 80) - (_QWORD)v5) >> 3);
  }
  CACFString::~CACFString(v2);
  _Unwind_Resume(a1);
}

unint64_t *std::vector<StateView *,caulk::rt_allocator<StateView *>>::reserve(unint64_t *result, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64(v6);
      v8 = v4 + (v3 & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      v8 = v4 + (v3 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v9 = *(_QWORD *)(v6 - 8);
        v6 -= 8;
        *(_QWORD *)(v8 - 8) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = v4 + (v3 & 0xFFFFFFFFFFFFFFF8);
    v13 = v10;
    v11 = v2[2];
    v2[2] = v4 + 8 * v5;
    v14 = v11;
    v12 = v10.i64[0];
    return (unint64_t *)std::__split_buffer<StateView *,caulk::rt_allocator<StateView *> &>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

unint64_t std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(unint64_t result)
{
  if (!(result >> 61))
  {
    result = *MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<StateView *,caulk::rt_allocator<StateView *> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<StateView *>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 3);
  return a1;
}

void SamplerState::SamplerState(SamplerState *this, const SamplerState *a2, int a3)
{
  uint64_t v3;

  *(_QWORD *)this = &off_24CA8C2A8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = a3;
  v3 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 1;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)((char *)this + 52) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (v3)
    ++*(_DWORD *)(v3 + 12);
  std::vector<StateView *,caulk::rt_allocator<StateView *>>::reserve((unint64_t *)this + 8, (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 8)) >> 3);
}

void sub_210A921D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  CACFString *v2;
  caulk::rt_safe_memory_resource **v3;
  caulk::rt_safe_memory_resource *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    std::allocator_traits<caulk::rt_allocator<StateView *>>::deallocate[abi:ne180100](v5, (uint64_t)(*(_QWORD *)(v1 + 80) - (_QWORD)v5) >> 3);
  }
  CACFString::~CACFString(v2);
  _Unwind_Resume(a1);
}

void MIDIControlSource::~MIDIControlSource(MIDIControlSource *this)
{
  *(_QWORD *)this = off_24CA87F28;
  *((_QWORD *)this + 22) = &unk_24CA87FB8;
}

uint64_t MIDIControlSource::GetComponentID(MIDIControlSource *this)
{
  return *((unsigned int *)this + 40);
}

void `virtual thunk to'MIDIControlSource::~MIDIControlSource(MIDIControlSource *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_24CA87F28;
  v1[22] = &unk_24CA87FB8;
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_24CA87F28;
  v1[22] = &unk_24CA87FB8;
  operator delete(v1);
}

uint64_t `virtual thunk to'MIDIControlSource::GetComponentID(MIDIControlSource *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32) + 160);
}

uint64_t `virtual thunk to'MIDIControlSource::GetRunFrameCount(MIDIControlSource *this, uint64_t a2)
{
  char *v3;
  unsigned int v4;
  uint64_t result;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
  if (!v3[168]
    || !(*(unsigned int (**)(char *))(*(_QWORD *)v3 + 48))((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)))
  {
    return a2;
  }
  if (*((_DWORD *)v3 + 40) == 11)
    v4 = MIDIControlSource::sRunFrameCount;
  else
    v4 = 16;
  if (v4 >= a2)
    result = a2;
  else
    result = v4;
  v3[168] = 0;
  return result;
}

BiquadCoefficients *Biquad::GetLowShelfParams(BiquadCoefficients *this, double a2, double a3)
{
  double v3;

  v3 = a2 * 3.14159265;
  if (v3 <= 0.0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    if (v3 > 3.11017673)
      v3 = 3.11017673;
    return (BiquadCoefficients *)BiquadCoefficients::SetPriv(this, 7, v3, 0.707106781, a3);
  }
  return this;
}

BiquadCoefficients *Biquad::GetHighShelfParams(BiquadCoefficients *this, double a2, double a3)
{
  double v3;

  v3 = a2 * 3.14159265;
  if (v3 <= 0.0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    if (v3 > 3.11017673)
      v3 = 3.11017673;
    return (BiquadCoefficients *)BiquadCoefficients::SetPriv(this, 8, v3, 0.707106781, a3);
  }
  return this;
}

double *Biquad::Process(double *this, float *a2, float *a3, int a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  double v25;
  double v26;
  float v27;
  double v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float v36;
  double v37;
  double v38;
  float v39;
  float v40;
  unsigned int v41;
  double v42;
  double v43;
  float v44;
  float v45;
  double v46;
  BOOL v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v55;
  double v56;

  v4 = this[2];
  v5 = this[3];
  v6 = this[4];
  v7 = this[5];
  v9 = this[6];
  v8 = this[7];
  v10 = this[8];
  v11 = -*this;
  v12 = -this[1];
  v13 = a4 - 4;
  if (a4 >= 4)
  {
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[2];
    v17 = v4 * v14 + v5 * v7 + v6 * v9 - *this * v8;
    v18 = v4 * v15 + v5 * v14 + v6 * v7;
    v19 = v4 * v16 + v5 * v15;
    v7 = a2[3];
    v20 = v4 * v7;
    a2 += 4;
    if (v13 >= 5)
    {
      do
      {
        v21 = *a2;
        v22 = v17 + v12 * v10;
        v23 = v19 + v6 * v14;
        v24 = v22;
        *a3 = v24;
        v14 = a2[1];
        v25 = v18 + v11 * v22 + v12 * v8;
        v26 = v20 + v5 * v16 + v6 * v15;
        v27 = v25;
        a3[1] = v27;
        v15 = a2[2];
        v28 = v23 + v11 * v25 + v12 * v22;
        v29 = v26 + v11 * v28;
        v30 = v4 * v21 + v5 * v7 + v6 * v16;
        v31 = v28;
        a3[2] = v31;
        v16 = a2[3];
        v10 = v29 + v12 * v25;
        v32 = v10;
        a3[3] = v32;
        v33 = a2[4];
        v8 = v30 + v11 * v10 + v12 * v28;
        v17 = v4 * v14 + v5 * v21 + v6 * v7 + v11 * v8;
        v18 = v4 * v15 + v5 * v14 + v6 * v21;
        v19 = v4 * v16 + v5 * v15;
        v34 = v8;
        a3[4] = v34;
        a3 += 5;
        v13 -= 5;
        v7 = v33;
        v20 = v4 * v33;
        a2 += 5;
      }
      while (v13 > 4);
    }
    v35 = v17 + v12 * v10;
    v36 = v35;
    v37 = v18 + v11 * v35 + v12 * v8;
    v38 = v19 + v6 * v14 + v11 * v37;
    v39 = v37;
    *a3 = v36;
    a3[1] = v39;
    v10 = v38 + v12 * v35;
    *(float *)&v38 = v10;
    v8 = v20 + v5 * v16 + v6 * v15 + v11 * v10 + v12 * v37;
    v40 = v8;
    a3[2] = *(float *)&v38;
    a3[3] = v40;
    a3 += 4;
    v9 = v16;
    a4 = v13;
  }
  if (a4 < 1)
  {
    v42 = v9;
    v43 = v10;
  }
  else
  {
    v41 = a4 + 1;
    do
    {
      v42 = v7;
      v43 = v8;
      v44 = *a2++;
      v7 = v44;
      v8 = v5 * v42 + v4 * v44 + v6 * v9 + v11 * v8 + v12 * v10;
      v45 = v8;
      *a3++ = v45;
      --v41;
      v10 = v43;
      v9 = v42;
    }
    while (v41 > 1);
  }
  v46 = fabs(v7);
  v47 = v46 >= 1.0e15 || v46 <= 1.0e-15;
  v48 = 0.0;
  if (v47)
    v49 = 0.0;
  else
    v49 = v7;
  v50 = fabs(v42);
  if (v50 >= 1.0e15 || v50 <= 1.0e-15)
    v52 = 0.0;
  else
    v52 = v42;
  this[5] = v49;
  this[6] = v52;
  v53 = fabs(v8);
  if (v53 >= 1.0e15 || v53 <= 1.0e-15)
    v55 = 0.0;
  else
    v55 = v8;
  v56 = fabs(v43);
  if (v56 < 1.0e15 && v56 > 1.0e-15)
    v48 = v43;
  this[7] = v55;
  this[8] = v48;
  return this;
}

uint64_t SamplerBaseElement::SetSampleRate(uint64_t this, float a2)
{
  *(float *)(this + 252) = a2;
  return this;
}

uint64_t SamplerBaseElement::GetDestinationComponentByID(SamplerBaseElement *this)
{
  return 0;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,unsigned int>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned int>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,unsigned int>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int const,unsigned int>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned int>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,unsigned int>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int const,unsigned int>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned int>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,unsigned int>>>::destroy(v3, a2[1]);
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

void Ramp::~Ramp(Ramp *this)
{
  ModControlDestination::~ModControlDestination((Ramp *)((char *)this + 152), (uint64_t *)&off_24CA89BD8);
  *(_QWORD *)this = off_24CA88658;
  *((_QWORD *)this + 37) = &unk_24CA886E8;
}

{
  ModControlDestination::~ModControlDestination((Ramp *)((char *)this + 152), (uint64_t *)&off_24CA89BD8);
  *(_QWORD *)this = off_24CA88658;
  *((_QWORD *)this + 37) = &unk_24CA886E8;
  MemAllocator::FreeMem(this, (void *)0x130);
}

uint64_t Ramp::GetRunFrameCount(Ramp *this, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;

  v2 = a2;
  if ((_DWORD)a2)
  {
    if (!*((_BYTE *)this + 288) && (*(unsigned int (**)(Ramp *))(*(_QWORD *)this + 48))(this))
    {
      v4 = *((_DWORD *)this + 71);
      if (v4 >= v2)
        v4 = v2;
      if (v4 <= 1)
        v2 = 1;
      else
        v2 = v4;
    }
    *((_DWORD *)this + 69) = v2;
  }
  return v2;
}

void Ramp::RegisterInput(Ramp *this, int a2)
{
  _QWORD *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2 == 74448896)
  {
    if (*((_DWORD *)this + 41))
    {
      if (!*((_QWORD *)this + 21))
      {
        v3 = (_QWORD *)MemAllocator::AllocMem((MemAllocator *)0x10);
        *v3 = off_24CA90D78;
        v3[1] = this;
        *((_QWORD *)this + 21) = v3;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v4 = 136315394;
        v5 = "ModControlDestination.h";
        v6 = 1024;
        v7 = 52;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  index > current number of inputs and/or max inputs", (uint8_t *)&v4, 0x12u);
      }
      __break(1u);
    }
  }
}

void `non-virtual thunk to'Ramp::~Ramp(Ramp *this)
{
  uint64_t v1;

  ModControlDestination::~ModControlDestination(this, (uint64_t *)&off_24CA89BD8);
  *(_QWORD *)(v1 - 152) = off_24CA88658;
  *(_QWORD *)(v1 + 144) = &unk_24CA886E8;
}

{
  Ramp::~Ramp((Ramp *)((char *)this - 152));
}

uint64_t `non-virtual thunk to'Ramp::GetRunFrameCount(Ramp *this, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;

  v2 = a2;
  if ((_DWORD)a2)
  {
    if (!*((_BYTE *)this + 136) && (*(unsigned int (**)(void))(*((_QWORD *)this - 19) + 48))())
    {
      v4 = *((_DWORD *)this + 33);
      if (v4 >= v2)
        v4 = v2;
      if (v4 <= 1)
        v2 = 1;
      else
        v2 = v4;
    }
    *((_DWORD *)this + 31) = v2;
  }
  return v2;
}

void `non-virtual thunk to'Ramp::RegisterInput(Ramp *this, int a2)
{
  Ramp::RegisterInput((Ramp *)((char *)this - 152), a2);
}

void `virtual thunk to'Ramp::~Ramp(Ramp *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  ModControlDestination::~ModControlDestination((ModControlDestination *)(v1 + 19), (uint64_t *)&off_24CA89BD8);
  *v1 = off_24CA88658;
  v1[37] = &unk_24CA886E8;
}

{
  Ramp::~Ramp((Ramp *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'Ramp::GetRunFrameCount(Ramp *this, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;

  v2 = a2;
  if ((_DWORD)a2)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
    if (!v3[288]
      && (*(unsigned int (**)(char *))(*(_QWORD *)v3 + 48))((char *)this + *(_QWORD *)(*(_QWORD *)this
                                                                                                  - 40)))
    {
      v4 = *((_DWORD *)v3 + 71);
      if (v4 >= v2)
        v4 = v2;
      if (v4 <= 1)
        v2 = 1;
      else
        v2 = v4;
    }
    *((_DWORD *)v3 + 69) = v2;
  }
  return v2;
}

uint64_t ControlInputInstance<Ramp,&Ramp::HandleRateInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

uint64_t ControlInputInstance<Ramp,&Ramp::HandleRateInput>::Set(uint64_t result, float a2)
{
  uint64_t v3;

  if (a2 != 0.0)
  {
    v3 = *(_QWORD *)(result + 8);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    if ((_DWORD)result)
    {
      *(float *)(v3 + 268) = *(float *)(v3 + 268) * a2;
      *(_BYTE *)(v3 + 248) = 1;
    }
  }
  return result;
}

_QWORD *LayerState::ResetToDefaults(LayerState *this, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD **v14;

  *((_BYTE *)this + 48) = 1;
  (*(void (**)(LayerState *, const __CFString *, uint64_t))(*(_QWORD *)this + 72))(this, &stru_24CA985C0, 1);
  *((_DWORD *)this + 22) = 2130738944;
  *((_WORD *)this + 46) = 32512;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0xFFFFFFFF00000000;
  *((_BYTE *)this + 130) = -1;
  *((_DWORD *)this + 33) = 30;
  *(_QWORD *)((char *)this + 140) = 0x50000000ALL;
  *((_DWORD *)this + 37) = -1;
  *((_BYTE *)this + 152) = 0;
  *((_BYTE *)this + 154) = 1;
  *((int32x2_t *)this + 20) = vdup_n_s32(0x47C35000u);
  *((_DWORD *)this + 42) = 1203982336;
  if (a2)
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 8))(*((_QWORD *)this + 22), 1);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 23) + 8))(*((_QWORD *)this + 23), 1);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 24) + 8))(*((_QWORD *)this + 24), 1);
    v4 = (uint64_t *)*((_QWORD *)this + 56);
    v5 = (uint64_t *)*((_QWORD *)this + 57);
    while (v4 != v5)
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 8))(v6, 1);
    }
    v7 = (uint64_t *)*((_QWORD *)this + 59);
    v8 = (uint64_t *)*((_QWORD *)this + 60);
    while (v7 != v8)
    {
      v9 = *v7++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 1);
    }
    v10 = (uint64_t *)*((_QWORD *)this + 62);
    v11 = (uint64_t *)*((_QWORD *)this + 63);
    while (v10 != v11)
    {
      v12 = *v10++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 8))(v12, 1);
    }
  }
  *((_WORD *)this + 100) = 0;
  LayerState::UnregisterConnections(this);
  v13 = (_DWORD **)*((_QWORD *)this + 65);
  v14 = (_DWORD **)*((_QWORD *)this + 66);
  if (v13 != v14)
  {
    do
    {
      if (*v13)
        SamplerState::Unref(*v13);
      ++v13;
    }
    while (v13 != v14);
    v13 = (_DWORD **)*((_QWORD *)this + 65);
  }
  *((_QWORD *)this + 66) = v13;
  LayerState::CreateDefaultConnections((uint64_t)this, sDefaultConnections);
  return LayerState::RegisterConnections(this);
}

uint64_t LayerState::GetProperty(LayerState *this, int a2, _BYTE *a3)
{
  uint64_t result;
  const void *v6;
  const void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (***v10)(_QWORD);
  uint64_t v11;
  unint64_t v12;
  int v13;
  float v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  result = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 4219)
  {
    switch(a2)
    {
      case 4120:
        v6 = (const void *)(*(uint64_t (**)(LayerState *))(*(_QWORD *)this + 80))(this);
        v7 = v6;
        if (v6)
          CFRetain(v6);
        *(_QWORD *)a3 = v7;
        return 1;
      case 4121:
        v13 = *((unsigned __int8 *)this + 48);
        goto LABEL_54;
      case 4122:
        v13 = *((_DWORD *)this + 39);
        goto LABEL_54;
      case 4123:
        v13 = *((_DWORD *)this + 24);
        goto LABEL_54;
      case 4124:
        v14 = *((float *)this + 25);
        goto LABEL_33;
      case 4125:
        v14 = *((float *)this + 26);
        goto LABEL_33;
      case 4126:
        v14 = *((float *)this + 27) * 200.0;
LABEL_33:
        *(float *)a3 = v14;
        return 1;
      case 4127:
        v13 = *((char *)this + 152);
        goto LABEL_54;
      case 4128:
        *a3 = *((_BYTE *)this + 88);
        v15 = *((_BYTE *)this + 89);
        goto LABEL_46;
      case 4129:
        *a3 = *((_BYTE *)this + 90);
        v15 = *((_BYTE *)this + 91);
        goto LABEL_46;
      case 4130:
        v13 = *((unsigned __int8 *)this + 154);
        goto LABEL_54;
      case 4131:
        v13 = *((_DWORD *)this + 37);
        goto LABEL_54;
      case 4136:
        v13 = *((char *)this + 153);
        goto LABEL_54;
      case 4150:
        v13 = *((_DWORD *)this + 36);
        goto LABEL_54;
      case 4151:
        v13 = *((_DWORD *)this + 35);
        goto LABEL_54;
      case 4152:
        v13 = *((_DWORD *)this + 33);
        goto LABEL_54;
      case 4153:
        v13 = *((unsigned __int8 *)this + 136);
        goto LABEL_54;
      case 4154:
        v13 = *((_DWORD *)this + 28);
        goto LABEL_54;
      case 4155:
        *a3 = *((_BYTE *)this + 92);
        v15 = *((_BYTE *)this + 93);
LABEL_46:
        a3[1] = v15;
        return 1;
      default:
        return result;
    }
  }
  if (a2 > 4249)
  {
    if (a2 > 4269)
    {
      if (a2 == 4270)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v18 = (**(uint64_t (***)(LayerState *))this)(this);
          v19 = (*((_QWORD *)this + 66) - *((_QWORD *)this + 65)) >> 3;
          v22 = 136315906;
          v23 = "LayerState.cpp";
          v24 = 1024;
          v25 = 1220;
          v26 = 1024;
          v27 = v18;
          v28 = 1024;
          v29 = v19;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::GetProperty: layer %u returning %u total connections", (uint8_t *)&v22, 0x1Eu);
        }
        v20 = *((_QWORD *)this + 65);
        if (((*((_QWORD *)this + 66) - v20) & 0x7FFFFFFF8) == 0)
          return 1;
        v21 = 0;
        do
        {
          *(_DWORD *)&a3[4 * v21] = (***(uint64_t (****)(_QWORD))(v20 + 8 * v21))(*(_QWORD *)(v20 + 8 * v21));
          ++v21;
          v20 = *((_QWORD *)this + 65);
          result = 1;
        }
        while (v21 < ((unint64_t)(*((_QWORD *)this + 66) - v20) >> 3));
      }
      else
      {
        if (a2 != 4280)
          return result;
        v11 = *((_QWORD *)this + 56);
        if (((*((_QWORD *)this + 57) - v11) & 0x7FFFFFFF8) == 0)
          return 1;
        v12 = 0;
        do
        {
          *(_DWORD *)&a3[4 * v12] = (***(uint64_t (****)(_QWORD))(v11 + 8 * v12))(*(_QWORD *)(v11 + 8 * v12));
          ++v12;
          v11 = *((_QWORD *)this + 56);
          result = 1;
        }
        while (v12 < ((unint64_t)(*((_QWORD *)this + 57) - v11) >> 3));
      }
      return result;
    }
    if (a2 == 4250)
    {
      v10 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 22);
    }
    else
    {
      if (a2 != 4260)
        return result;
      v10 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 24);
    }
LABEL_52:
    *(_DWORD *)a3 = (**v10)(v10);
    return 1;
  }
  if (a2 > 4232)
  {
    if (a2 == 4233)
    {
      v13 = 7;
LABEL_54:
      *(_DWORD *)a3 = v13;
      return 1;
    }
    if (a2 != 4240)
      return result;
    v10 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 23);
    goto LABEL_52;
  }
  if (a2 != 4220)
  {
    if (a2 != 4230)
      return result;
    v8 = *((_QWORD *)this + 62);
    if (((*((_QWORD *)this + 63) - v8) & 0x7FFFFFFF8) != 0)
    {
      v9 = 0;
      do
      {
        *(_DWORD *)&a3[4 * v9] = (***(uint64_t (****)(_QWORD))(v8 + 8 * v9))(*(_QWORD *)(v8 + 8 * v9));
        ++v9;
        v8 = *((_QWORD *)this + 62);
        result = 1;
      }
      while (v9 < ((unint64_t)(*((_QWORD *)this + 63) - v8) >> 3));
      return result;
    }
    return 1;
  }
  v16 = *((_QWORD *)this + 59);
  if (((*((_QWORD *)this + 60) - v16) & 0x7FFFFFFF8) == 0)
    return 1;
  v17 = 0;
  do
  {
    *(_DWORD *)&a3[4 * v17] = (***(uint64_t (****)(_QWORD))(v16 + 8 * v17))(*(_QWORD *)(v16 + 8 * v17));
    ++v17;
    v16 = *((_QWORD *)this + 59);
    result = 1;
  }
  while (v17 < ((unint64_t)(*((_QWORD *)this + 60) - v16) >> 3));
  return result;
}

uint64_t LayerState::SetProperty(LayerState *this, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  __n128 v7;
  int *v8;
  uint64_t (***v9)(_QWORD);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (***v13)(_QWORD);
  __n128 v14;
  int NextAvailable;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  CAXException *v27;
  unsigned int v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t result;
  CAXException *exception;
  CAXException *v38;
  CAXException *v39;
  CAXException *v40;
  CAXException *v41;
  CAXException *v42;
  _BYTE v43[16];
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[10];
  const char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      v45 = "LayerState.cpp";
      v46 = 1024;
      v47 = 1246;
      v48 = 2080;
      *(_QWORD *)v49 = v43;
      *(_WORD *)&v49[8] = 2080;
      v50 = "LayerState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::SetProperty: NULL property value", -10851);
  }
  v6 = 0;
  if (a2 <= 4220)
  {
    switch(a2)
    {
      case 4120:
        v6 = 1;
        (*(void (**)(LayerState *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, *(_QWORD *)a3, 1);
        break;
      case 4121:
        (*(void (**)(LayerState *, BOOL))(*(_QWORD *)this + 64))(this, *a3 != 0);
        return 1;
      case 4122:
        LayerState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        LayerState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        LayerState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        LayerState::SetGain((float *)this, *(float *)a3);
        return 1;
      case 4126:
        LayerState::SetPan(this, *(float *)a3 * 0.005);
        return 1;
      case 4127:
        LayerState::SetKeyOffset(this, *a3);
        return 1;
      case 4128:
        CheckDataSize(a4, 2u);
        LayerState::SetKeyRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4129:
        CheckDataSize(a4, 2u);
        LayerState::SetVelRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4130:
        LayerState::SetSelfExclusive((uint64_t)this, *a3 != 0);
        return 1;
      case 4131:
        LayerState::SetVoiceCount(this, *a3);
        return 1;
      case 4133:
        CheckDataSize(a4, 0x48u);
        v12 = *a3;
        switch(((v12 & 0xF0000000) - 0x10000000) >> 28)
        {
          case 0u:
            v13 = (uint64_t (***)(_QWORD))LayerState::CopyLFO((char **)this, v12);
            break;
          case 1u:
            v13 = (uint64_t (***)(_QWORD))LayerState::CopyEnvelope((char **)this, v12);
            break;
          case 2u:
          case 3u:
          case 4u:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v45 = "LayerState.cpp";
              v46 = 1024;
              v47 = 1351;
              v48 = 2080;
              *(_QWORD *)v49 = v43;
              *(_WORD *)&v49[8] = 2080;
              v50 = "LayerState::SetProperty: Item of this type cannot be copied";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v40 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v40, "LayerState::SetProperty: Item of this type cannot be copied", -10851);
          case 5u:
            v13 = (uint64_t (***)(_QWORD))LayerState::CopyConnection((char **)this, v12);
            break;
          case 6u:
            v13 = (uint64_t (***)(_QWORD))LayerState::CopyZone((char **)this, v12);
            break;
          default:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v45 = "LayerState.cpp";
              v46 = 1024;
              v47 = 1354;
              v48 = 2080;
              *(_QWORD *)v49 = v43;
              *(_WORD *)&v49[8] = 2080;
              v50 = "LayerState::SetProperty: No item matching that element ID";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v42 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v42, "LayerState::SetProperty: No item matching that element ID", -10851);
        }
        goto LABEL_70;
      case 4134:
        CheckDataSize(a4, 4u);
        v11 = *a3;
        switch(((v11 & 0xF0000000) - 0x10000000) >> 28)
        {
          case 0u:
            LayerState::RemoveLFO((uint64_t **)this, v11);
            break;
          case 1u:
            LayerState::RemoveEnvelope((uint64_t **)this, v11);
            break;
          case 2u:
          case 3u:
          case 4u:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v45 = "LayerState.cpp";
              v46 = 1024;
              v47 = 1380;
              v48 = 2080;
              *(_QWORD *)v49 = v43;
              *(_WORD *)&v49[8] = 2080;
              v50 = "LayerState::SetProperty: Item of this type cannot be removed";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v39 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v39, "LayerState::SetProperty: Item of this type cannot be removed", -10851);
          case 5u:
            if ((LayerState::RemoveConnection(this, v11) & 1) == 0)
            {
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
                *(float *)buf = 4.8153e-34;
                v45 = "LayerState.cpp";
                v46 = 1024;
                v47 = 1372;
                v48 = 2080;
                *(_QWORD *)v49 = v43;
                *(_WORD *)&v49[8] = 2080;
                v50 = "LayerState::SetProperty: No connection matching that element ID";
                _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v27 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v27, "LayerState::SetProperty: No connection matching that element ID", -10851);
            }
            return result;
          case 6u:
            LayerState::RemoveZone((LayerState **)this, v11);
            break;
          default:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v45 = "LayerState.cpp";
              v46 = 1024;
              v47 = 1383;
              v48 = 2080;
              *(_QWORD *)v49 = v43;
              *(_WORD *)&v49[8] = 2080;
              v50 = "LayerState::SetProperty: No item matching that element ID";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v41 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v41, "LayerState::SetProperty: No item matching that element ID", -10851);
        }
        return 1;
      case 4135:
        (*(void (**)(LayerState *, BOOL))(*(_QWORD *)this + 8))(this, *a3 != 0);
        return 1;
      case 4136:
        LayerState::SetVelocityOffset(this, *a3);
        return 1;
      case 4150:
        LayerState::SetVoiceAllocationMethod(this, *a3);
        return 1;
      case 4151:
        LayerState::SetGateMode(this, *a3);
        return 1;
      case 4152:
        LayerState::SetZoneSelectMethod(this, *a3);
        return 1;
      case 4153:
        LayerState::SetZoneVelocityXFade(this, *a3);
        return 1;
      case 4154:
        LayerState::SetSelectionController((uint64_t)this, *a3);
        return 1;
      case 4155:
        CheckDataSize(a4, 2u);
        LayerState::SetSelectionControllerRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      default:
        return v6;
    }
    return v6;
  }
  if (a2 > 4280)
  {
    if (a2 > 4402)
    {
      if (a2 == 4403)
      {
        *(float *)buf = *(float *)a3;
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope decay factor limit", 1.0, 100000.0);
        v14.n128_u32[0] = *(_DWORD *)buf;
        if (*(float *)buf != *((float *)this + 41))
        {
          *((float *)this + 41) = *(float *)buf;
          (*(void (**)(LayerState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4403, 0, v14);
        }
      }
      else
      {
        if (a2 != 4404)
          return v6;
        *(float *)buf = *(float *)a3;
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope release factor limit", 1.0, 100000.0);
        v10.n128_u32[0] = *(_DWORD *)buf;
        if (*(float *)buf != *((float *)this + 42))
        {
          *((float *)this + 42) = *(float *)buf;
          (*(void (**)(LayerState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4404, 0, v10);
        }
      }
      return 1;
    }
    if (a2 != 4281)
    {
      if (a2 != 4402)
        return v6;
      *(float *)buf = *(float *)a3;
      CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid envelope attack factor limit", 1.0, 100000.0);
      v7.n128_u32[0] = *(_DWORD *)buf;
      if (*(float *)buf != *((float *)this + 40))
      {
        *((float *)this + 40) = *(float *)buf;
        (*(void (**)(LayerState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4402, 0, v7);
      }
      return 1;
    }
    CheckDataSize(a4, 0x48u);
    v13 = (uint64_t (***)(_QWORD))LayerState::AddZone((char **)this, *a3);
    goto LABEL_70;
  }
  switch(a2)
  {
    case 4221:
      CheckDataSize(a4, 0x48u);
      v13 = (uint64_t (***)(_QWORD))LayerState::AddEnvelope((char **)this);
LABEL_70:
      v28 = (**v13)(v13);
LABEL_81:
      a3[16] = v28;
      return 1;
    case 4231:
      CheckDataSize(a4, 0x48u);
      NextAvailable = GetNextAvailableIndex<ZoneState>(*((char **)this + 62), *((char **)this + 63));
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v16 = (**(uint64_t (***)(LayerState *))this)(this);
        *(float *)buf = 4.8153e-34;
        v45 = "LayerState.cpp";
        v46 = 1024;
        v47 = 551;
        v48 = 1024;
        *(_DWORD *)v49 = v16;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = NextAvailable;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddLFO: layer %u adding ID 0x%x", buf, 0x1Eu);
      }
      v17 = operator new();
      SamplerState::SamplerState((SamplerState *)v17, 7, NextAvailable, this, 0x20u);
      *(_QWORD *)v17 = &off_24CA937A0;
      *(_QWORD *)(v17 + 88) = 0x1B10000000;
      *(_QWORD *)(v17 + 96) = 0x40A000003C23D70ALL;
      v19 = (uint64_t *)*((_QWORD *)this + 63);
      v18 = *((_QWORD *)this + 64);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *((_QWORD *)this + 62);
        v22 = ((uint64_t)v19 - v21) >> 3;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v23 = v18 - v21;
        v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v25);
        else
          v26 = 0;
        v29 = (uint64_t *)(v25 + 8 * v22);
        v30 = v25 + 8 * v26;
        *v29 = v17;
        v20 = v29 + 1;
        v32 = (char *)*((_QWORD *)this + 62);
        v31 = (char *)*((_QWORD *)this + 63);
        if (v31 != v32)
        {
          do
          {
            v33 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v29 = v33;
          }
          while (v31 != v32);
          v31 = (char *)*((_QWORD *)this + 62);
        }
        *((_QWORD *)this + 62) = v29;
        *((_QWORD *)this + 63) = v20;
        *((_QWORD *)this + 64) = v30;
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v19 = v17;
        v20 = v19 + 1;
      }
      *((_QWORD *)this + 63) = v20;
      ++*(_DWORD *)(v17 + 8);
      v34 = (_QWORD *)*((_QWORD *)this + 56);
      v35 = (_QWORD *)*((_QWORD *)this + 57);
      while (v34 != v35)
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v34 + 112))(*v34, 4231, 0);
        ++v34;
      }
      (*(void (**)(LayerState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4230, 1);
      v28 = (**(uint64_t (***)(uint64_t))v17)(v17);
      goto LABEL_81;
    case 4271:
      CheckDataSize(a4, 0x48u);
      v8 = *(int **)a3;
      if ((LayerState::VerifyConnection((uint64_t)this, *(int **)a3) & 1) == 0)
      {
        a3[16] = 0;
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v43, 0xFFFFD59D);
          *(float *)buf = 4.8153e-34;
          v45 = "LayerState.cpp";
          v46 = 1024;
          v47 = 1409;
          v48 = 2080;
          *(_QWORD *)v49 = v43;
          *(_WORD *)&v49[8] = 2080;
          v50 = "Invalid Connection";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v38 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v38, "Invalid Connection", -10851);
      }
      v6 = 1;
      v9 = (uint64_t (***)(_QWORD))LayerState::AddConnection((uint64_t)this, v8, 1);
      a3[16] = (**v9)(v9);
      break;
  }
  return v6;
}

void sub_210A93BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int (***LayerState::FindState(LayerState *this, int a2, int a3))(_QWORD)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int (***v8)(_QWORD);
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;

  switch(a3)
  {
    case 1879048192:
      goto LABEL_4;
    case 536870912:
LABEL_9:
      v9 = (_QWORD *)*((_QWORD *)this + 59);
      v10 = (_QWORD *)*((_QWORD *)this + 60);
      while (v9 != v10)
      {
        v8 = (unsigned int (***)(_QWORD))*v9;
        if ((**(unsigned int (***)(_QWORD))*v9)(*v9) == a2)
          return v8;
        ++v9;
      }
      break;
    case 0:
LABEL_4:
      v6 = (_QWORD *)*((_QWORD *)this + 56);
      v7 = (_QWORD *)*((_QWORD *)this + 57);
      while (v6 != v7)
      {
        v8 = (unsigned int (***)(_QWORD))*v6;
        if ((**(unsigned int (***)(_QWORD))*v6)(*v6) == a2)
          return v8;
        ++v6;
      }
      if ((a3 | 0x20000000) == 0x20000000)
        goto LABEL_9;
      break;
  }
  v8 = 0;
  HIDWORD(v12) = a3;
  LODWORD(v12) = a3;
  v11 = v12 >> 28;
  switch(v11)
  {
    case 0:
    case 1:
      v13 = (_QWORD *)*((_QWORD *)this + 62);
      v14 = (_QWORD *)*((_QWORD *)this + 63);
      while (2)
      {
        if (v13 == v14)
        {
          v8 = 0;
          switch(v11)
          {
            case 0:
            case 5:
              goto LABEL_19;
            case 3:
              goto LABEL_27;
            case 4:
              goto LABEL_23;
            case 6:
              goto LABEL_31;
            default:
              return v8;
          }
        }
        else
        {
          v8 = (unsigned int (***)(_QWORD))*v13;
          if ((**(unsigned int (***)(_QWORD))*v13)(*v13) != a2)
          {
            ++v13;
            continue;
          }
        }
        return v8;
      }
    case 3:
      goto LABEL_27;
    case 4:
      goto LABEL_23;
    case 5:
LABEL_19:
      v15 = (char *)this + 192;
      if ((***((unsigned int (****)(_QWORD))this + 24))(*((_QWORD *)this + 24)) == a2)
        return *(unsigned int (****)(_QWORD))v15;
      if (v11 == 4)
        goto LABEL_23;
      if (v11 == 3)
        goto LABEL_27;
      if (v11)
        return 0;
LABEL_23:
      v15 = (char *)this + 184;
      if ((***((unsigned int (****)(_QWORD))this + 23))(*((_QWORD *)this + 23)) == a2)
        return *(unsigned int (****)(_QWORD))v15;
      if (!a3)
        goto LABEL_27;
      if (a3 == 1610612736)
        goto LABEL_31;
      if (a3 != 805306368)
        return 0;
LABEL_27:
      v15 = (char *)this + 176;
      if ((***((unsigned int (****)(_QWORD))this + 22))(*((_QWORD *)this + 22)) == a2)
        return *(unsigned int (****)(_QWORD))v15;
      if (a3 != 1610612736 && a3)
        return 0;
LABEL_31:
      v16 = (_QWORD *)*((_QWORD *)this + 65);
      v17 = (_QWORD *)*((_QWORD *)this + 66);
      break;
    case 6:
      goto LABEL_31;
    default:
      return v8;
  }
  while (v16 != v17)
  {
    v8 = (unsigned int (***)(_QWORD))*v16;
    if ((**(unsigned int (***)(_QWORD))*v16)(*v16) == a2)
      return v8;
    ++v16;
  }
  return 0;
}

uint64_t LayerState::Save(LayerState *this, CACFDictionary *a2)
{
  const __CFString *v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  const __CFArray *Mutable;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const CFDictionaryKeyCallBacks *v23;
  const CFDictionaryValueCallBacks *v24;
  uint64_t v25;
  BOOL v26;
  const __CFArray *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const CFDictionaryKeyCallBacks *v31;
  const CFDictionaryValueCallBacks *v32;
  uint64_t v33;
  BOOL v34;
  const __CFArray *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const CFDictionaryKeyCallBacks *v39;
  const CFDictionaryValueCallBacks *v40;
  uint64_t v41;
  BOOL v42;
  __CFDictionary *v44;
  __int16 v45;
  _BYTE buf[12];
  __int16 v47;
  int v48;
  __int16 v49;
  LayerState *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "LayerState.cpp";
    v47 = 1024;
    v48 = 1437;
    v49 = 2048;
    v50 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::Save(this=%p)", buf, 0x1Cu);
  }
  CACFDictionary::AddUInt32(a2, CFSTR("ID"));
  v4 = (const __CFString *)(*(uint64_t (**)(LayerState *))(*(_QWORD *)this + 80))(this);
  CACFDictionary::AddString(a2, CFSTR("name"), v4);
  if (!*((_BYTE *)this + 48))
    CACFDictionary::AddBool(a2, CFSTR("enabled"));
  if (*((_BYTE *)this + 88) || *((_BYTE *)this + 89) != 127)
  {
    CACFDictionary::AddUInt32(a2, CFSTR("min key"));
    CACFDictionary::AddUInt32(a2, CFSTR("max key"));
  }
  if (*((_BYTE *)this + 90) || *((_BYTE *)this + 91) != 127)
  {
    CACFDictionary::AddUInt32(a2, CFSTR("min vel"));
    CACFDictionary::AddUInt32(a2, CFSTR("max vel"));
  }
  if (*((_BYTE *)this + 152))
    CACFDictionary::AddSInt32(a2, CFSTR("key offset"));
  if (*((_BYTE *)this + 153))
    CACFDictionary::AddSInt32(a2, CFSTR("vel offset"));
  if (*((_DWORD *)this + 39) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("output"));
  if (*((_DWORD *)this + 24))
    CACFDictionary::AddSInt32(a2, CFSTR("coarse tune"));
  v5 = *((float *)this + 25);
  if (v5 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("fine tune"), v5);
  v6 = *((float *)this + 26);
  if (v6 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("gain"), v6);
  v7 = *((float *)this + 27) * 200.0;
  if (v7 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("pan"), v7);
  if (((*(uint64_t (**)(LayerState *))(*(_QWORD *)this + 56))(this) & 1) == 0)
    CACFDictionary::AddBool(a2, CFSTR("enabled"));
  if (*((_DWORD *)this + 33) != 30)
    CACFDictionary::AddUInt32(a2, CFSTR("zone select"));
  if (*((_BYTE *)this + 136))
    CACFDictionary::AddUInt32(a2, CFSTR("zone vel xfade"));
  if (*((_DWORD *)this + 28))
    CACFDictionary::AddUInt32(a2, CFSTR("sel ctrlr"));
  if (*((_BYTE *)this + 92) || *((_BYTE *)this + 93) != 127)
  {
    CACFDictionary::AddUInt32(a2, CFSTR("sel ctrlr min val"));
    CACFDictionary::AddUInt32(a2, CFSTR("sel ctrlr max val"));
  }
  if (*((_DWORD *)this + 35) != 10)
    CACFDictionary::AddUInt32(a2, CFSTR("trigger mode"));
  if (*((_DWORD *)this + 36) != 5)
    CACFDictionary::AddUInt32(a2, CFSTR("voice alloc method"));
  if (*((_DWORD *)this + 37) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("voice count"));
  if (!*((_BYTE *)this + 154))
    CACFDictionary::AddBool(a2, CFSTR("self exclusive"));
  *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22), buf);
  CACFDictionary::AddDictionary(a2, CFSTR("Oscillator"), *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 23) + 40))(*((_QWORD *)this + 23), buf);
  CACFDictionary::AddDictionary(a2, CFSTR("Filters"), *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(_QWORD *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  *(_WORD *)&buf[8] = 256;
  (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), buf);
  CACFDictionary::AddDictionary(a2, CFSTR("Amplifier"), *(const __CFDictionary **)buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  v8 = *((_QWORD *)this + 63) - *((_QWORD *)this + 62);
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    Mutable = CFArrayCreateMutable(0, (v8 >> 3), MEMORY[0x24BDBD690]);
    *(_QWORD *)buf = Mutable;
    *(_WORD *)&buf[8] = 256;
    v10 = *((_QWORD *)this + 62);
    v11 = *((_QWORD *)this + 63);
    if (v10 == v11)
    {
      v16 = 0;
    }
    else
    {
      v12 = v10 + 8;
      v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
      v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
      do
      {
        v15 = *(_QWORD *)(v12 - 8);
        v44 = CFDictionaryCreateMutable(0, 0, v13, v14);
        v45 = 256;
        v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v15 + 40))(v15, &v44);
        CACFArray::AppendDictionary((CACFArray *)buf, v44);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
        if ((_DWORD)v16)
          v17 = 1;
        else
          v17 = v12 == v11;
        v12 += 8;
      }
      while (!v17);
      Mutable = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, CFSTR("LFOs"), Mutable);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  else
  {
    v16 = 0;
  }
  v18 = *((_QWORD *)this + 60) - *((_QWORD *)this + 59);
  if ((v18 & 0x7FFFFFFF8) != 0)
  {
    v19 = CFArrayCreateMutable(0, (v18 >> 3), MEMORY[0x24BDBD690]);
    *(_QWORD *)buf = v19;
    *(_WORD *)&buf[8] = 256;
    v20 = *((_QWORD *)this + 59);
    v21 = *((_QWORD *)this + 60);
    if (v20 != v21)
    {
      v22 = v20 + 8;
      v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
      v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
      do
      {
        v25 = *(_QWORD *)(v22 - 8);
        v44 = CFDictionaryCreateMutable(0, 0, v23, v24);
        v45 = 256;
        v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v25 + 40))(v25, &v44);
        CACFArray::AppendDictionary((CACFArray *)buf, v44);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
        if ((_DWORD)v16)
          v26 = 1;
        else
          v26 = v22 == v21;
        v22 += 8;
      }
      while (!v26);
      v19 = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, CFSTR("Envelopes"), v19);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  v27 = CFArrayCreateMutable(0, ((*((_QWORD *)this + 57) - *((_QWORD *)this + 56)) >> 3), MEMORY[0x24BDBD690]);
  *(_QWORD *)buf = v27;
  *(_WORD *)&buf[8] = 256;
  v28 = *((_QWORD *)this + 56);
  v29 = *((_QWORD *)this + 57);
  if (v28 != v29)
  {
    v30 = v28 + 8;
    v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v32 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v33 = *(_QWORD *)(v30 - 8);
      v44 = CFDictionaryCreateMutable(0, 0, v31, v32);
      v45 = 256;
      v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v33 + 40))(v33, &v44);
      CACFArray::AppendDictionary((CACFArray *)buf, v44);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
      if ((_DWORD)v16)
        v34 = 1;
      else
        v34 = v30 == v29;
      v30 += 8;
    }
    while (!v34);
    v27 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, CFSTR("Zones"), v27);
  CACFArray::~CACFArray((CACFArray *)buf);
  v35 = CFArrayCreateMutable(0, ((*((_QWORD *)this + 66) - *((_QWORD *)this + 65)) >> 3), MEMORY[0x24BDBD690]);
  *(_QWORD *)buf = v35;
  *(_WORD *)&buf[8] = 256;
  v36 = *((_QWORD *)this + 65);
  v37 = *((_QWORD *)this + 66);
  if (v36 != v37)
  {
    v38 = v36 + 8;
    v39 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v40 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v41 = *(_QWORD *)(v38 - 8);
      v44 = CFDictionaryCreateMutable(0, 0, v39, v40);
      v45 = 256;
      v16 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v41 + 40))(v41, &v44);
      CACFArray::AppendDictionary((CACFArray *)buf, v44);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v44);
      if ((_DWORD)v16)
        v42 = 1;
      else
        v42 = v38 == v37;
      v38 += 8;
    }
    while (!v42);
    v35 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, CFSTR("Connections"), v35);
  CACFArray::~CACFArray((CACFArray *)buf);
  return v16;
}

void sub_210A9463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t LayerState::Restore(LayerState *this, const CACFDictionary *a2)
{
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD **v9;
  _DWORD **v10;
  _DWORD **v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  const __CFArray *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  const __CFArray *v33;
  uint64_t v34;
  NSObject *v35;
  EnvelopeState *v36;
  unint64_t v37;
  EnvelopeState **v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  EnvelopeState **v46;
  char *v47;
  char *v48;
  EnvelopeState *v49;
  uint64_t i;
  unsigned int Count;
  ZoneState *v52;
  unint64_t v53;
  ZoneState **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  ZoneState **v62;
  char *v63;
  char *v64;
  ZoneState *v65;
  const __CFArray *v66;
  uint64_t v67;
  SamplerState *v68;
  double v69;
  const __CFArray *v70;
  uint64_t v71;
  SamplerState *v72;
  double v73;
  const __CFArray *v74;
  uint64_t v75;
  SamplerState *v76;
  double v77;
  CAXException *exception;
  CAXException *v80;
  unsigned int v81[2];
  __CFString *v82;
  _BYTE v83[16];
  CFArrayRef theArray;
  __int16 v85;
  _BYTE buf[12];
  __int16 v87;
  int v88;
  __int16 v89;
  CFArrayRef *p_theArray;
  __int16 v91;
  const char *v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a2)
    return 4294956445;
  if ((CACFDictionary::GetUInt32(a2, CFSTR("ID"), (unsigned int *)&v82) & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&theArray, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "LayerState.cpp";
      v87 = 1024;
      v88 = 1537;
      v89 = 2080;
      p_theArray = &theArray;
      v91 = 2080;
      v92 = "LayerState::Restore: Dictionary missing layer ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::Restore: Dictionary missing layer ID", -10851);
  }
  LayerState::UnregisterConnections(this);
  v4 = (_DWORD **)*((_QWORD *)this + 65);
  v5 = (_DWORD **)*((_QWORD *)this + 66);
  if (v4 != v5)
  {
    do
    {
      if (*v4)
        SamplerState::Unref(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_DWORD **)*((_QWORD *)this + 65);
  }
  *((_QWORD *)this + 66) = v4;
  v6 = (_DWORD **)*((_QWORD *)this + 56);
  v7 = (_DWORD **)*((_QWORD *)this + 57);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
        SamplerState::Unref(*v6);
      ++v6;
    }
    while (v6 != v7);
    v6 = (_DWORD **)*((_QWORD *)this + 56);
  }
  *((_QWORD *)this + 57) = v6;
  v8 = (_DWORD **)*((_QWORD *)this + 62);
  v9 = (_DWORD **)*((_QWORD *)this + 63);
  if (v8 != v9)
  {
    do
    {
      if (*v8)
        SamplerState::Unref(*v8);
      ++v8;
    }
    while (v8 != v9);
    v8 = (_DWORD **)*((_QWORD *)this + 62);
  }
  *((_QWORD *)this + 63) = v8;
  v10 = (_DWORD **)*((_QWORD *)this + 59);
  v11 = (_DWORD **)*((_QWORD *)this + 60);
  if (v10 != v11)
  {
    do
    {
      if (*v10)
        SamplerState::Unref(*v10);
      ++v10;
    }
    while (v10 != v11);
    v10 = (_DWORD **)*((_QWORD *)this + 59);
  }
  *((_QWORD *)this + 60) = v10;
  *((_DWORD *)this + 5) = (_DWORD)v82;
  if (CACFDictionary::GetString(a2, CFSTR("name"), (const __CFString **)&v82))
    (*(void (**)(LayerState *, __CFString *, uint64_t))(*(_QWORD *)this + 72))(this, v82, 1);
  if (CACFDictionary::GetBool(a2, CFSTR("enabled"), (BOOL *)&v82))
    (*(void (**)(LayerState *, _QWORD))(*(_QWORD *)this + 64))(this, v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("output"), (unsigned int *)&v82))
    LayerState::SetOutputScope(this, v82);
  if (CACFDictionary::GetSInt32(a2, CFSTR("coarse tune"), (int *)&v82))
    LayerState::SetCoarseTuning(this, (int)v82);
  if (CACFDictionary::GetFloat32(a2, CFSTR("fine tune"), (float *)&v82))
    LayerState::SetFineTuning((float *)this, *(float *)&v82);
  if (CACFDictionary::GetFloat32(a2, CFSTR("gain"), (float *)&v82))
    LayerState::SetGain((float *)this, *(float *)&v82);
  if (CACFDictionary::GetFloat32(a2, CFSTR("pan"), (float *)&v82))
    LayerState::SetPan(this, *(float *)&v82 * 0.005);
  *(_QWORD *)v81 = 0;
  if ((CACFDictionary::GetUInt32(a2, CFSTR("min key"), &v81[1]) & 1) == 0)
    v81[1] = 0;
  if (CACFDictionary::GetUInt32(a2, CFSTR("max key"), v81))
  {
    v12 = v81[0];
  }
  else
  {
    v12 = 127;
    v81[0] = 127;
  }
  LayerState::SetKeyRange(this, v81[1], v12);
  if ((CACFDictionary::GetUInt32(a2, CFSTR("min vel"), &v81[1]) & 1) == 0)
    v81[1] = 0;
  if (CACFDictionary::GetUInt32(a2, CFSTR("max vel"), v81))
  {
    v14 = v81[0];
  }
  else
  {
    v14 = 127;
    v81[0] = 127;
  }
  LayerState::SetVelRange(this, v81[1], v14);
  if ((CACFDictionary::GetUInt32(a2, CFSTR("sel ctrlr min val"), &v81[1]) & 1) == 0)
    v81[1] = 0;
  if (CACFDictionary::GetUInt32(a2, CFSTR("sel ctrlr max val"), v81))
  {
    v15 = v81[0];
  }
  else
  {
    v15 = 127;
    v81[0] = 127;
  }
  LayerState::SetSelectionControllerRange(this, v81[1], v15);
  if (CACFDictionary::GetUInt32(a2, CFSTR("sel ctrlr"), (unsigned int *)&v82))
    LayerState::SetSelectionController((uint64_t)this, v82);
  if (CACFDictionary::GetSInt32(a2, CFSTR("key offset"), (int *)&v82))
    LayerState::SetKeyOffset(this, (int)v82);
  if (CACFDictionary::GetSInt32(a2, CFSTR("vel offset"), (int *)&v82))
    LayerState::SetVelocityOffset(this, (int)v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("zone select"), (unsigned int *)&v82))
    LayerState::SetZoneSelectMethod(this, (int)v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("zone vel xfade"), (unsigned int *)&v82))
    LayerState::SetZoneVelocityXFade(this, v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("trigger mode"), (unsigned int *)&v82))
    LayerState::SetGateMode(this, (int)v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("voice alloc method"), (unsigned int *)&v82))
    LayerState::SetVoiceAllocationMethod(this, (int)v82);
  if (CACFDictionary::GetUInt32(a2, CFSTR("voice count"), (unsigned int *)&v82))
    LayerState::SetVoiceCount(this, v82);
  if (CACFDictionary::GetBool(a2, CFSTR("self exclusive"), (BOOL *)&v82))
    LayerState::SetSelfExclusive((uint64_t)this, v82);
  *(_QWORD *)buf = 0;
  *(_WORD *)&buf[8] = 0;
  CACFDictionary::GetCACFDictionary(a2, CFSTR("Oscillator"), (CACFDictionary *)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 22) + 48))(*((_QWORD *)this + 22), buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(_QWORD *)buf = 0;
  *(_WORD *)&buf[8] = 0;
  CACFDictionary::GetCACFDictionary(a2, CFSTR("Filters"), (CACFDictionary *)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 23) + 48))(*((_QWORD *)this + 23), buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  *(_QWORD *)buf = 0;
  *(_WORD *)&buf[8] = 0;
  CACFDictionary::GetCACFDictionary(a2, CFSTR("Amplifier"), (CACFDictionary *)buf);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)this + 24) + 48))(*((_QWORD *)this + 24), buf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  theArray = 0;
  v85 = 0;
  CACFDictionary::GetCACFArray(a2, CFSTR("LFOs"), (CACFArray *)&theArray);
  v16 = theArray;
  v13 = 0;
  if (theArray)
  {
    v17 = 0;
    v18 = MEMORY[0x24BDACB70];
LABEL_99:
    LODWORD(v16) = CFArrayGetCount(v16);
    while (v17 < v16)
    {
      if (v17 >= 5 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "LayerState.cpp";
        v87 = 1024;
        v88 = 1592;
        v89 = 1024;
        LODWORD(p_theArray) = v17 + 1;
        _os_log_impl(&dword_210A23000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LFO %d > LFO limit. Connections to it will cause voice errors", buf, 0x18u);
      }
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, v17, (CACFDictionary *)buf);
      v19 = operator new();
      SamplerState::SamplerState((SamplerState *)v19, 7, 0, this, 0x20u);
      *(_QWORD *)v19 = &off_24CA937A0;
      *(_QWORD *)(v19 + 88) = 0x1B10000000;
      *(_QWORD *)(v19 + 96) = 0x40A000003C23D70ALL;
      v21 = (uint64_t *)*((_QWORD *)this + 63);
      v20 = *((_QWORD *)this + 64);
      if ((unint64_t)v21 >= v20)
      {
        v23 = *((_QWORD *)this + 62);
        v24 = ((uint64_t)v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v25 = v20 - v23;
        v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v27);
        else
          v28 = 0;
        v29 = (uint64_t *)(v27 + 8 * v24);
        *v29 = v19;
        v22 = v29 + 1;
        v31 = (char *)*((_QWORD *)this + 62);
        v30 = (char *)*((_QWORD *)this + 63);
        if (v30 != v31)
        {
          do
          {
            v32 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *--v29 = v32;
          }
          while (v30 != v31);
          v30 = (char *)*((_QWORD *)this + 62);
        }
        *((_QWORD *)this + 62) = v29;
        *((_QWORD *)this + 63) = v22;
        *((_QWORD *)this + 64) = v27 + 8 * v28;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v21 = v19;
        v22 = v21 + 1;
      }
      *((_QWORD *)this + 63) = v22;
      ++*(_DWORD *)(v19 + 8);
      v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 48))(v19, buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      v17 = (v17 + 1);
      v16 = theArray;
      if (theArray)
        goto LABEL_99;
    }
  }
  CACFDictionary::GetCACFArray(a2, CFSTR("Envelopes"), (CACFArray *)&theArray);
  v33 = theArray;
  if (theArray)
  {
    v34 = 0;
    v35 = MEMORY[0x24BDACB70];
LABEL_123:
    LODWORD(v33) = CFArrayGetCount(v33);
    while (v34 < v33)
    {
      if (v34 >= 5 && os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "LayerState.cpp";
        v87 = 1024;
        v88 = 1603;
        v89 = 1024;
        LODWORD(p_theArray) = v34 + 1;
        _os_log_impl(&dword_210A23000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Envelope %d > Env limit. Connections to it will cause voice errors", buf, 0x18u);
      }
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, v34, (CACFDictionary *)buf);
      v36 = (EnvelopeState *)operator new();
      EnvelopeState::EnvelopeState(v36, 0, this, 0);
      v38 = (EnvelopeState **)*((_QWORD *)this + 60);
      v37 = *((_QWORD *)this + 61);
      if ((unint64_t)v38 >= v37)
      {
        v40 = *((_QWORD *)this + 59);
        v41 = ((uint64_t)v38 - v40) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v42 = v37 - v40;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v44);
        else
          v45 = 0;
        v46 = (EnvelopeState **)(v44 + 8 * v41);
        *v46 = v36;
        v39 = v46 + 1;
        v48 = (char *)*((_QWORD *)this + 59);
        v47 = (char *)*((_QWORD *)this + 60);
        if (v47 != v48)
        {
          do
          {
            v49 = (EnvelopeState *)*((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = (char *)*((_QWORD *)this + 59);
        }
        *((_QWORD *)this + 59) = v46;
        *((_QWORD *)this + 60) = v39;
        *((_QWORD *)this + 61) = v44 + 8 * v45;
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v38 = v36;
        v39 = v38 + 1;
      }
      *((_QWORD *)this + 60) = v39;
      ++*((_DWORD *)v36 + 2);
      v13 = (*(uint64_t (**)(EnvelopeState *, _BYTE *))(*(_QWORD *)v36 + 48))(v36, buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      v34 = (v34 + 1);
      v33 = theArray;
      if (theArray)
        goto LABEL_123;
    }
  }
  CACFDictionary::GetCACFArray(a2, CFSTR("Zones"), (CACFArray *)&theArray);
  if (theArray)
  {
    if (!CFArrayGetCount(theArray))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v83, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "LayerState.cpp";
        v87 = 1024;
        v88 = 1613;
        v89 = 2080;
        p_theArray = (CFArrayRef *)v83;
        v91 = 2080;
        v92 = "LayerState::Restore: Missing or zero zone count for layer";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v80 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v80, "LayerState::Restore: Missing or zero zone count for layer", -10851);
    }
    for (i = 0; ; i = (i + 1))
    {
      Count = theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
        break;
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, i, (CACFDictionary *)buf);
      v52 = (ZoneState *)operator new();
      ZoneState::ZoneState(v52, 0, this, 0xFFFFFFFF);
      v54 = (ZoneState **)*((_QWORD *)this + 57);
      v53 = *((_QWORD *)this + 58);
      if ((unint64_t)v54 >= v53)
      {
        v56 = *((_QWORD *)this + 56);
        v57 = ((uint64_t)v54 - v56) >> 3;
        if ((unint64_t)(v57 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v58 = v53 - v56;
        v59 = v58 >> 2;
        if (v58 >> 2 <= (unint64_t)(v57 + 1))
          v59 = v57 + 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
          v60 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        if (v60)
          v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v60);
        else
          v61 = 0;
        v62 = (ZoneState **)(v60 + 8 * v57);
        *v62 = v52;
        v55 = v62 + 1;
        v64 = (char *)*((_QWORD *)this + 56);
        v63 = (char *)*((_QWORD *)this + 57);
        if (v63 != v64)
        {
          do
          {
            v65 = (ZoneState *)*((_QWORD *)v63 - 1);
            v63 -= 8;
            *--v62 = v65;
          }
          while (v63 != v64);
          v63 = (char *)*((_QWORD *)this + 56);
        }
        *((_QWORD *)this + 56) = v62;
        *((_QWORD *)this + 57) = v55;
        *((_QWORD *)this + 58) = v60 + 8 * v61;
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v54 = v52;
        v55 = v54 + 1;
      }
      *((_QWORD *)this + 57) = v55;
      ++*((_DWORD *)v52 + 2);
      v13 = (*(uint64_t (**)(ZoneState *, _BYTE *))(*(_QWORD *)v52 + 48))(v52, buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    }
    LayerState::SortZones(*((LayerState **)this + 56), *((LayerState **)this + 57));
  }
  CACFDictionary::GetCACFArray(a2, CFSTR("Connections"), (CACFArray *)&theArray);
  v66 = theArray;
  if (theArray)
  {
    v67 = 0;
LABEL_152:
    LODWORD(v66) = CFArrayGetCount(v66);
    while (v67 < v66)
    {
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, v67, (CACFDictionary *)buf);
      v68 = (SamplerState *)operator new();
      v69 = ConnectionState::ConnectionState(v68, this);
      v13 = (*(uint64_t (**)(SamplerState *, _BYTE *, double))(*(_QWORD *)v68 + 48))(v68, buf, v69);
      LayerState::AddConnection(this, v68, 0);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      v67 = (v67 + 1);
      v66 = theArray;
      if (theArray)
        goto LABEL_152;
    }
  }
  else
  {
    CACFDictionary::GetCACFArray(a2, CFSTR("Static Conns"), (CACFArray *)&theArray);
    v70 = theArray;
    if (theArray)
    {
      v71 = 0;
LABEL_158:
      LODWORD(v70) = CFArrayGetCount(v70);
      while (v71 < v70)
      {
        *(_QWORD *)buf = 0;
        *(_WORD *)&buf[8] = 0;
        CACFArray::GetCACFDictionary((CACFArray *)&theArray, v71, (CACFDictionary *)buf);
        v72 = (SamplerState *)operator new();
        v73 = ConnectionState::ConnectionState(v72, this);
        v13 = (*(uint64_t (**)(SamplerState *, _BYTE *, double))(*(_QWORD *)v72 + 48))(v72, buf, v73);
        LayerState::AddConnection(this, v72, 0);
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        v71 = (v71 + 1);
        v70 = theArray;
        if (theArray)
          goto LABEL_158;
      }
    }
    CACFDictionary::GetCACFArray(a2, CFSTR("Dynamic Conns"), (CACFArray *)&theArray);
    v74 = theArray;
    if (theArray)
    {
      v75 = 0;
LABEL_163:
      LODWORD(v74) = CFArrayGetCount(v74);
      while (v75 < v74)
      {
        *(_QWORD *)buf = 0;
        *(_WORD *)&buf[8] = 0;
        CACFArray::GetCACFDictionary((CACFArray *)&theArray, v75, (CACFDictionary *)buf);
        v76 = (SamplerState *)operator new();
        v77 = ConnectionState::ConnectionState(v76, this);
        v13 = (*(uint64_t (**)(SamplerState *, _BYTE *, double))(*(_QWORD *)v76 + 48))(v76, buf, v77);
        LayerState::AddConnection(this, v76, 0);
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        v75 = (v75 + 1);
        v74 = theArray;
        if (theArray)
          goto LABEL_163;
      }
    }
  }
  LayerState::VerifyRestore(this);
  LayerState::SortConnections(*((LayerState **)this + 65), *((LayerState **)this + 66));
  LayerState::RegisterConnections(this);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v13;
}

void sub_210A95528()
{
  JUMPOUT(0x210A956F0);
}

void sub_210A95624(void *a1, int a2)
{
  _DWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    ++v2[2];
    SamplerState::Unref(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x210A956F8);
}

void sub_210A95650()
{
  __cxa_end_catch();
  JUMPOUT(0x210A956E8);
}

void sub_210A9565C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x210A956F8);
}

void sub_210A95688()
{
  uint64_t v0;

  MEMORY[0x212BCDF50](v0, 0x10E1C40A72B6B85);
  JUMPOUT(0x210A956E8);
}

void sub_210A956A0()
{
  uint64_t v0;

  MEMORY[0x212BCDF50](v0, 0x10E1C40D6EAEC2ALL);
  JUMPOUT(0x210A956E8);
}

void sub_210A956B8()
{
  JUMPOUT(0x210A956C8);
}

void sub_210A956E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

void sub_210A95700()
{
  JUMPOUT(0x210A956F8);
}

void LayerState::SetEnabled(LayerState *this, int a2)
{
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(LayerState *))(*(_QWORD *)this + 56))(this) != a2)
  {
    if (*((unsigned __int8 *)this + 48) != a2)
    {
      *((_BYTE *)this + 48) = a2;
      (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4121, 0);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(LayerState *))this)(this);
      v8 = 136315906;
      v9 = "LayerState.cpp";
      v10 = 1024;
      v11 = 2209;
      v12 = 1024;
      v13 = v4;
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetEnabled: Layer %u enabled %d", (uint8_t *)&v8, 0x1Eu);
    }
    v6 = (uint64_t *)*((_QWORD *)this + 56);
    v5 = (uint64_t *)*((_QWORD *)this + 57);
    while (v6 != v5)
    {
      v7 = *v6++;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 112))(v7, 4121, 0);
    }
  }
}

_DWORD *LayerState::Disconnect(LayerState *this)
{
  _DWORD **v2;
  _DWORD **v3;
  _DWORD **v4;
  _DWORD **v5;
  _DWORD **v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD **v9;
  _DWORD *v10;

  v2 = (_DWORD **)*((_QWORD *)this + 65);
  v3 = (_DWORD **)*((_QWORD *)this + 66);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        SamplerState::Unref(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_DWORD **)*((_QWORD *)this + 65);
  }
  *((_QWORD *)this + 66) = v2;
  v4 = (_DWORD **)*((_QWORD *)this + 56);
  v5 = (_DWORD **)*((_QWORD *)this + 57);
  if (v4 != v5)
  {
    do
    {
      if (*v4)
        SamplerState::Unref(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_DWORD **)*((_QWORD *)this + 56);
  }
  *((_QWORD *)this + 57) = v4;
  v6 = (_DWORD **)*((_QWORD *)this + 62);
  v7 = (_DWORD **)*((_QWORD *)this + 63);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
        SamplerState::Unref(*v6);
      ++v6;
    }
    while (v6 != v7);
    v6 = (_DWORD **)*((_QWORD *)this + 62);
  }
  *((_QWORD *)this + 63) = v6;
  v8 = (_DWORD **)*((_QWORD *)this + 59);
  v9 = (_DWORD **)*((_QWORD *)this + 60);
  if (v8 != v9)
  {
    do
    {
      if (*v8)
        SamplerState::Unref(*v8);
      ++v8;
    }
    while (v8 != v9);
    v8 = (_DWORD **)*((_QWORD *)this + 59);
  }
  *((_QWORD *)this + 60) = v8;
  SamplerState::Unref(*((_DWORD **)this + 24));
  SamplerState::Unref(*((_DWORD **)this + 23));
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v10 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  return SamplerState::Unref(v10);
}

void LayerState::~LayerState(LayerState *this)
{
  LayerState::~LayerState(this);
  JUMPOUT(0x212BCDF50);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24CA8A950;
  v2 = (void *)*((_QWORD *)this + 65);
  if (v2)
  {
    *((_QWORD *)this + 66) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 62);
  if (v3)
  {
    *((_QWORD *)this + 63) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 59);
  if (v4)
  {
    *((_QWORD *)this + 60) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 56);
  if (v5)
  {
    *((_QWORD *)this + 57) = v5;
    operator delete(v5);
  }
  SamplerState::~SamplerState(this);
}

_QWORD *LayerState::Notify(LayerState *this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v6 = (a2 - 4122);
  if (v6 <= 0x22)
  {
    if (((1 << (a2 - 26)) & 0x2000021F) != 0)
      goto LABEL_10;
    if (v6 == 34)
    {
LABEL_4:
      v7 = (uint64_t *)*((_QWORD *)this + 56);
      v8 = (uint64_t *)*((_QWORD *)this + 57);
      while (v7 != v8)
      {
        v9 = *v7++;
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 112))(v9, a2, 0);
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 3) + 112))(*((_QWORD *)this + 3), a2, 0);
      return SamplerState::Notify(this, a2, a3);
    }
  }
  if ((a2 - 4220) <= 0x3D && ((1 << (a2 - 124)) & 0x300C000000000C03) != 0)
    goto LABEL_4;
  if ((_DWORD)a2)
    return SamplerState::Notify(this, a2, a3);
LABEL_10:
  v11 = (uint64_t *)*((_QWORD *)this + 56);
  v12 = (uint64_t *)*((_QWORD *)this + 57);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 112))(v13, a2, 0);
  }
  return SamplerState::Notify(this, a2, a3);
}

_QWORD *LayerState::UnregisterConnections(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (uint64_t *)this[65];
  v2 = (uint64_t *)this[66];
  if (v1 != v2)
  {
    v3 = this[3];
    do
    {
      v4 = *(uint64_t **)(v3 + 88);
      v5 = *(uint64_t **)(v3 + 96);
      if (v4 != v5)
      {
        v6 = *v1;
        v7 = *(unsigned int *)(*v1 + 92);
        do
        {
          v8 = *v4++;
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(v8, v7);
        }
        while (v4 != v5);
        v9 = *(uint64_t **)(v3 + 88);
        v10 = *(uint64_t **)(v3 + 96);
        if (v9 != v10)
        {
          v11 = *(unsigned int *)(v6 + 116);
          do
          {
            v12 = *v9++;
            this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 152))(v12, v11);
          }
          while (v9 != v10);
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

_DWORD *LayerState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (this[39] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v6, 0, 0x10u, (uint64_t)"Invalid output scope");
      v3 = v6;
    }
    v2[39] = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v5 = v2[39];
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2308;
      v11 = 1024;
      v12 = v4;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetOutputScope: Layer %u scope %u", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4122, 0);
  }
  return this;
}

_DWORD *LayerState::SetCoarseTuning(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (this[24] != a2)
  {
    v2 = this;
    CHECK_RANGE<int>(&v5, -24, 24, (uint64_t)"Invalid coarse tuning");
    v2[24] = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v4 = v2[24];
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2093;
      v10 = 1024;
      v11 = v3;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetCoarseTuning: Layer %u tuning %d", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4123, 0);
  }
  return this;
}

float *LayerState::SetFineTuning(float *this, float a2)
{
  float *v2;
  int v3;
  double v4;
  float v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (this[25] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v5, (uint64_t)"Invalid fine tuning", -99.0, 99.0);
    v2[25] = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(float *))v2)(v2);
      v4 = v2[25];
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2103;
      v10 = 1024;
      v11 = v3;
      v12 = 2048;
      v13 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetFineTuning: Layer %u tuning %f", buf, 0x22u);
    }
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4124, 0);
  }
  return this;
}

float *LayerState::SetGain(float *this, float a2)
{
  float *v2;
  int v3;
  double v4;
  float v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (this[26] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v5, (uint64_t)"Invalid gain", -96.0, 12.0);
    v2[26] = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(float *))v2)(v2);
      v4 = v2[26];
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2113;
      v10 = 1024;
      v11 = v3;
      v12 = 2048;
      v13 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetGain: Layer %u gain %f", buf, 0x22u);
    }
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4125, 0);
  }
  return this;
}

void LayerState::SetPan(LayerState *this, float a2)
{
  int v4;
  double v5;
  float v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE v12[18];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v8 = "LayerState.cpp";
    v9 = 1024;
    v10 = 2120;
    v11 = 2048;
    *(_QWORD *)v12 = this;
    *(_WORD *)&v12[8] = 2048;
    *(double *)&v12[10] = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetPan(%p, %f)", buf, 0x26u);
  }
  if (*((float *)this + 27) != a2)
  {
    CHECK_RANGE<float>(&v6, (uint64_t)"Invalid pan", -0.5, 0.5);
    *((float *)this + 27) = v6;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(LayerState *))this)(this);
      v5 = *((float *)this + 27);
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2124;
      v11 = 1024;
      *(_DWORD *)v12 = v4;
      *(_WORD *)&v12[4] = 2048;
      *(double *)&v12[6] = v5;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetPan: Layer %u pan %f", buf, 0x22u);
    }
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4126, 0);
  }
}

uint64_t LayerState::SetKeyRange(LayerState *this, unsigned int a2, unsigned int a3)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a2;
  CHECK_RANGE<unsigned int>(&v9, 0, 0x7Fu, (uint64_t)"Invalid key range");
  v4 = v9;
  CHECK_RANGE<unsigned int>(&v10, 0, v9, (uint64_t)"Invalid key range");
  *((_BYTE *)this + 88) = v10;
  *((_BYTE *)this + 89) = v4;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = (**(uint64_t (***)(LayerState *))this)(this);
    v6 = *((unsigned __int8 *)this + 88);
    v7 = *((unsigned __int8 *)this + 89);
    *(_DWORD *)buf = 136316162;
    v12 = "LayerState.cpp";
    v13 = 1024;
    v14 = 2136;
    v15 = 1024;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = v7;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetKeyRange: Layer %u [%u %u]", buf, 0x24u);
  }
  return (*(uint64_t (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4128, 0);
}

uint64_t LayerState::SetVelRange(LayerState *this, unsigned int a2, unsigned int a3)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a2;
  CHECK_RANGE<unsigned int>(&v9, 0, 0x7Fu, (uint64_t)"Invalid velocity range");
  v4 = v9;
  CHECK_RANGE<unsigned int>(&v10, 0, v9, (uint64_t)"Invalid velocity range");
  *((_BYTE *)this + 90) = v10;
  *((_BYTE *)this + 91) = v4;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = (**(uint64_t (***)(LayerState *))this)(this);
    v6 = *((unsigned __int8 *)this + 90);
    v7 = *((unsigned __int8 *)this + 91);
    *(_DWORD *)buf = 136316162;
    v12 = "LayerState.cpp";
    v13 = 1024;
    v14 = 2148;
    v15 = 1024;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = v7;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetVelRange: Layer %u [%u %u]", buf, 0x24u);
  }
  return (*(uint64_t (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4129, 0);
}

uint64_t LayerState::SetSelectionControllerRange(LayerState *this, unsigned int a2, unsigned int a3)
{
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned int v9;
  unsigned int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a2;
  CHECK_RANGE<unsigned int>(&v9, 0, 0x7Fu, (uint64_t)"Invalid controller range");
  v4 = v9;
  CHECK_RANGE<unsigned int>(&v10, 0, v9, (uint64_t)"Invalid controller range");
  *((_BYTE *)this + 92) = v10;
  *((_BYTE *)this + 93) = v4;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = (**(uint64_t (***)(LayerState *))this)(this);
    v6 = *((unsigned __int8 *)this + 92);
    v7 = *((unsigned __int8 *)this + 93);
    *(_DWORD *)buf = 136316162;
    v12 = "LayerState.cpp";
    v13 = 1024;
    v14 = 2160;
    v15 = 1024;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = v7;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionControllerRange: Layer %u [%u %u]", buf, 0x24u);
  }
  return (*(uint64_t (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4155, 0);
}

uint64_t LayerState::SetSelectionController(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v3 = this;
  v23 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0x12F || (a2 & 0xFFFFFFF8) == 0x3E8)
  {
    v4 = *(unsigned int *)(this + 112);
    if ((_DWORD)v4 != (_DWORD)a2)
    {
      v5 = *(_QWORD *)(this + 24);
      v6 = *(uint64_t **)(v5 + 88);
      v7 = *(uint64_t **)(v5 + 96);
      if (v6 == v7)
      {
        *(_DWORD *)(this + 112) = a2;
      }
      else
      {
        do
        {
          v8 = *v6++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(v8, v4);
        }
        while (v6 != v7);
        v9 = *(_QWORD *)(v3 + 24);
        v10 = *(uint64_t **)(v9 + 88);
        v11 = *(uint64_t **)(v9 + 96);
        *(_DWORD *)(v3 + 112) = a2;
        while (v10 != v11)
        {
          v12 = *v10++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 144))(v12, a2);
        }
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v13 = (**(uint64_t (***)(uint64_t))v3)(v3);
        v14 = *(_DWORD *)(v3 + 112);
        v15 = 136315906;
        v16 = "LayerState.cpp";
        v17 = 1024;
        v18 = 2173;
        v19 = 1024;
        v20 = v13;
        v21 = 1024;
        v22 = v14;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionController: Layer %u ctrlr %u", (uint8_t *)&v15, 0x1Eu);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4154, 0);
    }
  }
  return this;
}

void LayerState::SetKeyOffset(LayerState *this, int a2)
{
  int v3;
  int v4;
  int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  CHECK_RANGE<int>(&v5, -64, 64, (uint64_t)"LayerState::SetKeyOffset: Invalid key offset");
  if (v5 != *((char *)this + 152))
  {
    *((_BYTE *)this + 152) = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(LayerState *))this)(this);
      v4 = *((char *)this + 152);
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2278;
      v10 = 1024;
      v11 = v3;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetKeyOffset: Layer %u offset %d", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4127, 0);
  }
}

void LayerState::SetVelocityOffset(LayerState *this, int a2)
{
  int v3;

  v3 = a2;
  CHECK_RANGE<int>(&v3, -127, 127, (uint64_t)"LayerState::SetVelocityOffset: Invalid velocity offset");
  if (v3 != *((char *)this + 153))
  {
    *((_BYTE *)this + 153) = v3;
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4136, 0);
  }
}

_DWORD *LayerState::SetZoneSelectMethod(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  CAXException *exception;
  _BYTE v6[16];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE v12[10];
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (this[33] != a2)
  {
    if ((a2 - 33) <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v8 = "LayerState.cpp";
        v9 = 1024;
        v10 = 2219;
        v11 = 2080;
        *(_QWORD *)v12 = v6;
        *(_WORD *)&v12[8] = 2080;
        v13 = "LayerState::SetZoneSelectMethod: Invalid zone select method";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "LayerState::SetZoneSelectMethod: Invalid zone select method", -10851);
    }
    v2 = this;
    this[33] = a2;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v4 = v2[33];
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2221;
      v11 = 1024;
      *(_DWORD *)v12 = v3;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetZoneSelectMethod: Layer %u method %u", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4152, 0);
  }
  return this;
}

void sub_210A96A9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::SetZoneVelocityXFade(LayerState *this, unsigned int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"Invalid zone velocity crossfade");
  if (v5 != *((unsigned __int8 *)this + 136))
  {
    *((_BYTE *)this + 136) = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(LayerState *))this)(this);
      v4 = *((unsigned __int8 *)this + 136);
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2232;
      v10 = 1024;
      v11 = v3;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetZoneVelocityXFade: Layer %u xfade +- %u", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4153, 0);
  }
}

_DWORD *LayerState::SetGateMode(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  CAXException *exception;
  _BYTE v6[16];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE v12[10];
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (this[35] != a2)
  {
    if ((a2 - 13) <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v8 = "LayerState.cpp";
        v9 = 1024;
        v10 = 2242;
        v11 = 2080;
        *(_QWORD *)v12 = v6;
        *(_WORD *)&v12[8] = 2080;
        v13 = "LayerState::SetGateMode: Invalid gate mode";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "LayerState::SetGateMode: Invalid gate mode", -10851);
    }
    v2 = this;
    this[35] = a2;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v4 = v2[35];
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2244;
      v11 = 1024;
      *(_DWORD *)v12 = v3;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetGateMode: Layer %u mode %u", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4151, 0);
  }
  return this;
}

void sub_210A96DA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *LayerState::SetVoiceAllocationMethod(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  CAXException *exception;
  _BYTE v6[16];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE v12[10];
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (this[36] != a2)
  {
    if (a2 != 5)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v8 = "LayerState.cpp";
        v9 = 1024;
        v10 = 2254;
        v11 = 2080;
        *(_QWORD *)v12 = v6;
        *(_WORD *)&v12[8] = 2080;
        v13 = "LayerState::SetVoiceAllocationMethod: Invalid voice allocation method";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "LayerState::SetVoiceAllocationMethod: Invalid voice allocation method", -10851);
    }
    v2 = this;
    this[36] = 5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v3 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v4 = v2[36];
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2256;
      v11 = 1024;
      *(_DWORD *)v12 = v3;
      *(_WORD *)&v12[4] = 1024;
      *(_DWORD *)&v12[6] = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetVoiceAllocationMethod: Layer %u method %u", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4150, 0);
  }
  return this;
}

void sub_210A96F8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *LayerState::SetVoiceCount(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (this[37] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v6, 1u, 0x40u, (uint64_t)"LayerState::SetVoiceCount: Invalid count");
      v3 = v6;
    }
    v2[37] = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(_DWORD *))v2)(v2);
      v5 = v2[37];
      *(_DWORD *)buf = 136315906;
      v8 = "LayerState.cpp";
      v9 = 1024;
      v10 = 2268;
      v11 = 1024;
      v12 = v4;
      v13 = 1024;
      v14 = v5;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetVoiceCount: Layer %u count %u", buf, 0x1Eu);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4131, 0);
  }
  return this;
}

uint64_t LayerState::SetSelfExclusive(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(this + 154) != a2)
  {
    v3 = this;
    *(_BYTE *)(this + 154) = a2;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(uint64_t))v3)(v3);
      v5 = 136315906;
      v6 = "LayerState.cpp";
      v7 = 1024;
      v8 = 2296;
      v9 = 1024;
      v10 = v4;
      v11 = 1024;
      v12 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelfExclusive: Layer %u %u", (uint8_t *)&v5, 0x1Eu);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4130, 0);
  }
  return this;
}

uint64_t LayerState::SortZones(LayerState *this, LayerState *a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL (*v5)(ZoneState *, ZoneState *);

  v2 = 126 - 2 * __clz((a2 - this) >> 3);
  v5 = zcmp;
  if (a2 == this)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **,false>((uint64_t)this, (char *)a2, (uint64_t (**)(_QWORD))&v5, v3, 1);
}

void LayerState::AddConnection(LayerState *this, ConnectionState *a2, int a3)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)*((_QWORD *)this + 66);
  v7 = *((_QWORD *)this + 67);
  if ((unint64_t)v6 >= v7)
  {
    v9 = *((_QWORD *)this + 65);
    v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v11 = v7 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v13);
    else
      v14 = 0;
    v15 = (_QWORD *)(v13 + 8 * v10);
    v16 = v13 + 8 * v14;
    *v15 = a2;
    v8 = v15 + 1;
    v17 = (char *)*((_QWORD *)this + 66);
    v18 = (char *)*((_QWORD *)this + 65);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)*((_QWORD *)this + 65);
    }
    *((_QWORD *)this + 65) = v15;
    *((_QWORD *)this + 66) = v8;
    *((_QWORD *)this + 67) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v6 = a2;
    v8 = v6 + 1;
  }
  *((_QWORD *)this + 66) = v8;
  ++*((_DWORD *)a2 + 2);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v20 = (**(uint64_t (***)(LayerState *))this)(this);
    if (a3)
      v21 = "adding/registering";
    else
      v21 = "adding";
    v22 = (**(uint64_t (***)(ConnectionState *))a2)(a2);
    v23 = (*((_QWORD *)this + 66) - *((_QWORD *)this + 65)) >> 3;
    v32 = 136316418;
    v33 = "LayerState.cpp";
    v34 = 1024;
    v35 = 1686;
    v36 = 1024;
    v37 = v20;
    v38 = 2080;
    v39 = v21;
    v40 = 1024;
    v41 = v22;
    v42 = 1024;
    v43 = v23;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddConnection (layer %u): %s new, ID 0x%x.  %u total connections", (uint8_t *)&v32, 0x2Eu);
  }
  if (a3)
  {
    v24 = *((_QWORD *)this + 3);
    v25 = *(_QWORD **)(v24 + 88);
    v26 = *(_QWORD **)(v24 + 96);
    if (v25 != v26)
    {
      v27 = *((unsigned int *)a2 + 23);
      do
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v25 + 144))(*v25, v27);
        ++v25;
      }
      while (v25 != v26);
      v28 = *((_QWORD *)this + 3);
      v29 = *(_QWORD **)(v28 + 88);
      v30 = *(_QWORD **)(v28 + 96);
      if (v29 != v30)
      {
        v31 = *((unsigned int *)a2 + 29);
        do
        {
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v29 + 144))(*v29, v31);
          ++v29;
        }
        while (v29 != v30);
      }
    }
  }
}

void LayerState::VerifyRestore(LayerState *this)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  unsigned int v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  char *v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  unsigned int v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  char *v66;
  int v67;
  CAXException *exception;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  uint8_t v74[16];
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint8_t *v80;
  __int16 v81;
  const char *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)*((_QWORD *)this + 56);
  v70 = (_QWORD *)*((_QWORD *)this + 57);
  if (v1 == v70)
  {
    v2 = 0;
    v73 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    v73 = 0;
    v4 = 0;
    v5 = MEMORY[0x24BDACB70];
    do
    {
      v6 = (**(uint64_t (***)(_QWORD))*v1)(*v1);
      v7 = v6;
      if ((unint64_t)v3 >= v73)
      {
        v8 = (v3 - v2) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v73 - (_QWORD)v2) >> 1 > v9)
          v9 = (uint64_t)(v73 - (_QWORD)v2) >> 1;
        if (v73 - (unint64_t)v2 >= 0x7FFFFFFFFFFFFFFCLL)
          v10 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
        else
          v11 = 0;
        v12 = (char *)(v10 + 4 * v8);
        *(_DWORD *)v12 = v7;
        v13 = v12 + 4;
        while (v3 != v2)
        {
          v14 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        v73 = v10 + 4 * v11;
        if (v2)
          operator delete(v2);
        v2 = v12;
        v3 = v13;
      }
      else
      {
        *(_DWORD *)v3 = v6;
        v3 += 4;
      }
      v15 = v4;
      if (v4)
      {
        v16 = v2;
        v17 = v15;
        do
        {
          v19 = *(_DWORD *)v16;
          v16 += 4;
          v18 = v19;
          if (v19 == *(_DWORD *)&v2[4 * v15] && os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v76 = "LayerState.cpp";
            v77 = 1024;
            v78 = 957;
            v79 = 1024;
            LODWORD(v80) = v18;
            _os_log_impl(&dword_210A23000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Duplicate zone ID (%u) in document", buf, 0x18u);
          }
          --v17;
        }
        while (v17);
      }
      v4 = v15 + 1;
      ++v1;
    }
    while (v1 != v70);
  }
  v20 = (_QWORD *)*((_QWORD *)this + 59);
  v71 = (_QWORD *)*((_QWORD *)this + 60);
  if (v20 != v71)
  {
    LODWORD(v21) = 0;
    v22 = MEMORY[0x24BDACB70];
    v23 = v2;
    do
    {
      v24 = (**(uint64_t (***)(_QWORD))*v20)(*v20);
      v25 = v24;
      if ((unint64_t)v23 >= v73)
      {
        v26 = (v23 - v2) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v73 - (_QWORD)v2) >> 1 > v27)
          v27 = (uint64_t)(v73 - (_QWORD)v2) >> 1;
        if (v73 - (unint64_t)v2 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
        else
          v29 = 0;
        v30 = (char *)(v28 + 4 * v26);
        *(_DWORD *)v30 = v25;
        v31 = v30 + 4;
        while (v23 != v2)
        {
          v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        v73 = v28 + 4 * v29;
        if (v2)
          operator delete(v2);
        v2 = v30;
        v23 = v31;
      }
      else
      {
        *(_DWORD *)v23 = v24;
        v23 += 4;
      }
      v33 = v21;
      if ((_DWORD)v21)
      {
        v34 = v2;
        v21 = v21;
        do
        {
          v35 = *(_DWORD *)v34;
          v34 += 4;
          if (v35 == *(_DWORD *)&v2[4 * v33] && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v76 = "LayerState.cpp";
            v77 = 1024;
            v78 = 966;
            _os_log_impl(&dword_210A23000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Duplicate envelope IDs in document", buf, 0x12u);
          }
          --v21;
        }
        while (v21);
      }
      LODWORD(v21) = v33 + 1;
      ++v20;
    }
    while (v20 != v71);
  }
  v36 = (_QWORD *)*((_QWORD *)this + 62);
  v72 = (_QWORD *)*((_QWORD *)this + 63);
  if (v36 != v72)
  {
    LODWORD(v37) = 0;
    v38 = MEMORY[0x24BDACB70];
    v39 = v2;
    do
    {
      v40 = (**(uint64_t (***)(_QWORD))*v36)(*v36);
      v41 = v40;
      if ((unint64_t)v39 >= v73)
      {
        v42 = (v39 - v2) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v73 - (_QWORD)v2) >> 1 > v43)
          v43 = (uint64_t)(v73 - (_QWORD)v2) >> 1;
        if (v73 - (unint64_t)v2 >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44);
        else
          v45 = 0;
        v46 = (char *)(v44 + 4 * v42);
        *(_DWORD *)v46 = v41;
        v47 = v46 + 4;
        while (v39 != v2)
        {
          v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v46 - 1) = v48;
          v46 -= 4;
        }
        v73 = v44 + 4 * v45;
        if (v2)
          operator delete(v2);
        v2 = v46;
        v39 = v47;
      }
      else
      {
        *(_DWORD *)v39 = v40;
        v39 += 4;
      }
      v49 = v37;
      if ((_DWORD)v37)
      {
        v50 = v2;
        v37 = v37;
        do
        {
          v51 = *(_DWORD *)v50;
          v50 += 4;
          if (v51 == *(_DWORD *)&v2[4 * v49] && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            v76 = "LayerState.cpp";
            v77 = 1024;
            v78 = 975;
            _os_log_impl(&dword_210A23000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Duplicate LFO IDs in document", buf, 0x12u);
          }
          --v37;
        }
        while (v37);
      }
      LODWORD(v37) = v49 + 1;
      ++v36;
    }
    while (v36 != v72);
  }
  v52 = (_QWORD *)*((_QWORD *)this + 65);
  v53 = (_QWORD *)*((_QWORD *)this + 66);
  if (v52 != v53)
  {
    v54 = 0;
    v55 = v2;
    do
    {
      v56 = (**(uint64_t (***)(_QWORD))*v52)(*v52);
      v57 = v56;
      if ((unint64_t)v55 >= v73)
      {
        v58 = (v55 - v2) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v73 - (_QWORD)v2) >> 1 > v59)
          v59 = (uint64_t)(v73 - (_QWORD)v2) >> 1;
        if (v73 - (unint64_t)v2 >= 0x7FFFFFFFFFFFFFFCLL)
          v60 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v60 = v59;
        if (v60)
          v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v60);
        else
          v61 = 0;
        v62 = (char *)(v60 + 4 * v58);
        *(_DWORD *)v62 = v57;
        v63 = v62 + 4;
        while (v55 != v2)
        {
          v64 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v62 - 1) = v64;
          v62 -= 4;
        }
        v73 = v60 + 4 * v61;
        if (v2)
          operator delete(v2);
        v2 = v62;
        v55 = v63;
      }
      else
      {
        *(_DWORD *)v55 = v56;
        v55 += 4;
      }
      if (v54)
      {
        v65 = v54;
        v66 = v2;
        do
        {
          v67 = *(_DWORD *)v66;
          v66 += 4;
          if (v67 == *(_DWORD *)&v2[4 * v54])
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v74, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              v76 = "LayerState.cpp";
              v77 = 1024;
              v78 = 984;
              v79 = 2080;
              v80 = v74;
              v81 = 2080;
              v82 = "Duplicate connection IDs in document";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "Duplicate connection IDs in document", -10851);
          }
          --v65;
        }
        while (v65);
      }
      ++v54;
      ++v52;
    }
    while (v52 != v53);
  }
  if (v2)
    operator delete(v2);
}

void sub_210A97B70(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t LayerState::SortConnections(LayerState *this, LayerState *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t);

  v2 = 126 - 2 * __clz((a2 - this) >> 3);
  v5 = ccmp;
  if (a2 == this)
    v3 = 0;
  else
    v3 = v2;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **,false>((uint64_t)this, (char *)a2, (uint64_t (**)(_QWORD))&v5, v3, 1);
}

_QWORD *LayerState::RegisterConnections(_QWORD *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (uint64_t *)this[65];
  v2 = (uint64_t *)this[66];
  if (v1 != v2)
  {
    v3 = this[3];
    do
    {
      v4 = *(uint64_t **)(v3 + 88);
      v5 = *(uint64_t **)(v3 + 96);
      if (v4 != v5)
      {
        v6 = *v1;
        v7 = *(unsigned int *)(*v1 + 92);
        do
        {
          v8 = *v4++;
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, v7);
        }
        while (v4 != v5);
        v9 = *(uint64_t **)(v3 + 88);
        v10 = *(uint64_t **)(v3 + 96);
        if (v9 != v10)
        {
          v11 = *(unsigned int *)(v6 + 116);
          do
          {
            v12 = *v9++;
            this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 144))(v12, v11);
          }
          while (v9 != v10);
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t ccmp(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t result;
  _BOOL4 v14;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a1 + 96);
  v4 = v2 & 0xF0000000;
  v5 = *(_DWORD *)(a2 + 92);
  v6 = *(_DWORD *)(a2 + 96);
  v7 = v5 & 0xF0000000;
  v8 = v3 & 0xF0000000;
  v9 = v6 & 0xF0000000;
  if ((v3 & 0xF0000000) == (v5 & 0xF0000000))
  {
    if (v3 == v5)
      return 1;
  }
  else if (v9 == v4 && (v6 ^ v2) == 0)
  {
    return 0;
  }
  v11 = v6 & 0xB0000000;
  if (v8 == 0x10000000 || (v3 & 0xB0000000) == 0x20000000)
  {
    if (v9 != 0x10000000 && v11 != 0x20000000)
      return 1;
    if (v4)
    {
      if (!v7)
        return 0;
    }
    else if (v7)
    {
      return 1;
    }
    if (v8 != v9)
      return v8 > v9;
    goto LABEL_27;
  }
  result = 0;
  if (v9 != 0x10000000 && v11 != 0x20000000)
  {
    if (!v4 && v7)
      return 1;
    if (!v7)
      return 0;
LABEL_27:
    v14 = v3 > v6;
    if (v2 == v5)
      return v14;
    else
      return v2 < v5;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **,false>(uint64_t result, char *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  int64_t v84;
  uint64_t v85;
  char *v86;
  int64_t v87;

  v8 = (char *)result;
LABEL_2:
  v86 = a2 - 8;
  v81 = a2 - 24;
  v82 = a2 - 16;
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = a2 - v9;
    v11 = (a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v86, *(_QWORD *)v8);
        if ((_DWORD)result)
        {
          v38 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v86;
          *(_QWORD *)v86 = v38;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, v86, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, (_QWORD *)v8 + 2, v86, a3);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, (_QWORD *)v8 + 2, (_QWORD *)v8 + 3, v86, a3);
      default:
        if (v10 <= 191)
        {
          v39 = v8 + 8;
          v41 = v8 == a2 || v39 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 0;
              v43 = v8;
              do
              {
                v45 = *(_QWORD *)v43;
                v44 = *((_QWORD *)v43 + 1);
                v43 = v39;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v44, v45);
                if ((_DWORD)result)
                {
                  v46 = *(_QWORD *)v43;
                  v47 = v42;
                  while (1)
                  {
                    *(_QWORD *)&v8[v47 + 8] = *(_QWORD *)&v8[v47];
                    if (!v47)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v46, *(_QWORD *)&v8[v47 - 8]);
                    v47 -= 8;
                    if ((result & 1) == 0)
                    {
                      v48 = &v8[v47 + 8];
                      goto LABEL_73;
                    }
                  }
                  v48 = v8;
LABEL_73:
                  *(_QWORD *)v48 = v46;
                }
                v39 = v43 + 8;
                v42 += 8;
              }
              while (v43 + 8 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v75 = *(_QWORD *)v8;
              v74 = *((_QWORD *)v8 + 1);
              v8 = v39;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *(_QWORD *)v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *((_QWORD *)v77 - 1);
                  v77 -= 8;
                  *(_QWORD *)v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *((_QWORD *)v78 - 2));
                }
                while ((result & 1) != 0);
                *(_QWORD *)v77 = v76;
              }
              v39 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v11 - 2) >> 1;
            v87 = v49;
            v80 = a2;
            do
            {
              v50 = v49;
              if (v87 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[8 * v51];
                if (2 * v49 + 2 < v11
                  && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *((_QWORD *)v52 + 1)))
                {
                  v52 += 8;
                  v51 = 2 * v50 + 2;
                }
                v53 = &v8[8 * v50];
                result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *(_QWORD *)v53);
                if ((result & 1) == 0)
                {
                  v84 = v50;
                  v54 = *(_QWORD *)v53;
                  do
                  {
                    v55 = v52;
                    *(_QWORD *)v53 = *(_QWORD *)v52;
                    if (v87 < v51)
                      break;
                    v56 = (2 * v51) | 1;
                    v52 = &v8[8 * v56];
                    if (2 * v51 + 2 < v11
                      && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *((_QWORD *)v52 + 1)))
                    {
                      v52 += 8;
                      v56 = 2 * v51 + 2;
                    }
                    result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v52, v54);
                    v53 = v55;
                    v51 = v56;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v55 = v54;
                  a2 = v80;
                  v50 = v84;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v57 = (unint64_t)v10 >> 3;
            do
            {
              v58 = a2;
              v59 = 0;
              v60 = v57 - 2;
              v85 = *(_QWORD *)v8;
              if (v57 < 2)
                v60 = v57 - 1;
              v61 = v60 >> 1;
              v62 = v8;
              do
              {
                v63 = &v62[8 * v59 + 8];
                v64 = (2 * v59) | 1;
                v65 = 2 * v59 + 2;
                if (v65 < v57)
                {
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)&v62[8 * v59 + 8], *(_QWORD *)&v62[8 * v59 + 16]);
                  if ((_DWORD)result)
                  {
                    v63 += 8;
                    v64 = v65;
                  }
                }
                *(_QWORD *)v62 = *(_QWORD *)v63;
                v62 = v63;
                v59 = v64;
              }
              while (v64 <= v61);
              v66 = v58 - 8;
              if (v63 == v66)
              {
                v67 = v66;
                *(_QWORD *)v63 = v85;
              }
              else
              {
                *(_QWORD *)v63 = *(_QWORD *)v66;
                v67 = v66;
                *(_QWORD *)v66 = v85;
                v68 = v63 - v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (unint64_t)((v68 >> 3) - 2) >> 1;
                  v70 = &v8[8 * v69];
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v70, *(_QWORD *)v63);
                  if ((_DWORD)result)
                  {
                    v71 = *(_QWORD *)v63;
                    do
                    {
                      v72 = v70;
                      *(_QWORD *)v63 = *(_QWORD *)v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[8 * v69];
                      result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v70, v71);
                      v63 = v72;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v72 = v71;
                  }
                }
              }
              v73 = v57-- <= 2;
              a2 = v67;
            }
            while (!v73);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[8 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v13, v8, v86, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, v13, v86, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v8 + 1, (_QWORD *)v13 - 1, v82, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v8 + 2, &v8[8 * v12 + 8], v81, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v13 - 1, v13, &v8[8 * v12 + 8], a3);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0
          && (((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)v8 - 1), *(_QWORD *)v8) & 1) == 0)
        {
          v29 = *(_QWORD *)v8;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v8, *(_QWORD *)v86);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v30 = *((_QWORD *)v9 + 1);
              v9 += 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v8 + 8;
            do
            {
              v9 = v31;
              if (v31 >= a2)
                break;
              v31 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v29, *(_QWORD *)v9);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v32)
          {
            v34 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v34;
            do
            {
              v35 = *((_QWORD *)v9 + 1);
              v9 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v29, v35));
            do
            {
              v36 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v9 - 8;
          if (v9 - 8 != v8)
            *(_QWORD *)v8 = *(_QWORD *)v37;
          a5 = 0;
          *(_QWORD *)v37 = v29;
          continue;
        }
        v15 = *(_QWORD *)v8;
        v16 = v8;
        do
        {
          v17 = v16;
          v18 = *((_QWORD *)v16 + 1);
          v16 += 8;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v18, v15) & 1) != 0);
        v19 = a2;
        if (v17 == v8)
        {
          v19 = a2;
          do
          {
            if (v16 >= v19)
              break;
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v15) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v20, v15));
        }
        v22 = a2;
        if (v16 < v19)
        {
          v23 = v16;
          v24 = v19;
          do
          {
            v25 = *(_QWORD *)v23;
            *(_QWORD *)v23 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v17 = v23;
              v26 = *((_QWORD *)v23 + 1);
              v23 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v26, v15) & 1) != 0);
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v27, v15));
          }
          while (v23 < v24);
        }
        if (v17 != v8)
          *(_QWORD *)v8 = *(_QWORD *)v17;
        *(_QWORD *)v17 = v15;
        a2 = v22;
        if (v16 < v19)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **,false>(v8, v17, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v17 + 8;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, v17, a3);
        v9 = v17 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v17 + 1, v22, a3);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL zcmp(ZoneState *a1, ZoneState *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;

  v2 = *((unsigned __int8 *)a1 + 184);
  v3 = *((unsigned __int8 *)a2 + 184);
  if (v2 < v3)
    return 1;
  if (v2 == v3)
  {
    v4 = *((unsigned __int8 *)a1 + 185);
    v5 = *((unsigned __int8 *)a2 + 185);
    if (v4 < v5)
      return 1;
    if (v4 > v5)
      return 0;
  }
  else if (v2 > v3)
  {
    return 0;
  }
  v6 = *((unsigned __int8 *)a1 + 186);
  v7 = *((unsigned __int8 *)a2 + 186);
  if (v6 < v7)
    return 1;
  if (v6 == v7)
  {
    v9 = *((unsigned __int8 *)a1 + 187);
    v10 = *((unsigned __int8 *)a2 + 187);
    if (v9 < v10)
      return 1;
    if (v9 > v10)
      return 0;
  }
  else if (v6 > v7)
  {
    return 0;
  }
  return *((unsigned __int8 *)a1 + 188) < *((unsigned __int8 *)a2 + 188);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **,false>(uint64_t result, char *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  int64_t v84;
  uint64_t v85;
  char *v86;
  int64_t v87;

  v8 = (char *)result;
LABEL_2:
  v86 = a2 - 8;
  v81 = a2 - 24;
  v82 = a2 - 16;
  v9 = v8;
  while (2)
  {
    v8 = v9;
    v10 = a2 - v9;
    v11 = (a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v86, *(_QWORD *)v8);
        if ((_DWORD)result)
        {
          v38 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v86;
          *(_QWORD *)v86 = v38;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, v86, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, (_QWORD *)v8 + 2, v86, a3);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, (_QWORD *)v8 + 1, (_QWORD *)v8 + 2, (_QWORD *)v8 + 3, v86, a3);
      default:
        if (v10 <= 191)
        {
          v39 = v8 + 8;
          v41 = v8 == a2 || v39 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 0;
              v43 = v8;
              do
              {
                v45 = *(_QWORD *)v43;
                v44 = *((_QWORD *)v43 + 1);
                v43 = v39;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v44, v45);
                if ((_DWORD)result)
                {
                  v46 = *(_QWORD *)v43;
                  v47 = v42;
                  while (1)
                  {
                    *(_QWORD *)&v8[v47 + 8] = *(_QWORD *)&v8[v47];
                    if (!v47)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v46, *(_QWORD *)&v8[v47 - 8]);
                    v47 -= 8;
                    if ((result & 1) == 0)
                    {
                      v48 = &v8[v47 + 8];
                      goto LABEL_73;
                    }
                  }
                  v48 = v8;
LABEL_73:
                  *(_QWORD *)v48 = v46;
                }
                v39 = v43 + 8;
                v42 += 8;
              }
              while (v43 + 8 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v75 = *(_QWORD *)v8;
              v74 = *((_QWORD *)v8 + 1);
              v8 = v39;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *(_QWORD *)v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *((_QWORD *)v77 - 1);
                  v77 -= 8;
                  *(_QWORD *)v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *((_QWORD *)v78 - 2));
                }
                while ((result & 1) != 0);
                *(_QWORD *)v77 = v76;
              }
              v39 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v11 - 2) >> 1;
            v87 = v49;
            v80 = a2;
            do
            {
              v50 = v49;
              if (v87 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[8 * v51];
                if (2 * v49 + 2 < v11
                  && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *((_QWORD *)v52 + 1)))
                {
                  v52 += 8;
                  v51 = 2 * v50 + 2;
                }
                v53 = &v8[8 * v50];
                result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *(_QWORD *)v53);
                if ((result & 1) == 0)
                {
                  v84 = v50;
                  v54 = *(_QWORD *)v53;
                  do
                  {
                    v55 = v52;
                    *(_QWORD *)v53 = *(_QWORD *)v52;
                    if (v87 < v51)
                      break;
                    v56 = (2 * v51) | 1;
                    v52 = &v8[8 * v56];
                    if (2 * v51 + 2 < v11
                      && ((unsigned int (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v52, *((_QWORD *)v52 + 1)))
                    {
                      v52 += 8;
                      v56 = 2 * v51 + 2;
                    }
                    result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v52, v54);
                    v53 = v55;
                    v51 = v56;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v55 = v54;
                  a2 = v80;
                  v50 = v84;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v57 = (unint64_t)v10 >> 3;
            do
            {
              v58 = a2;
              v59 = 0;
              v60 = v57 - 2;
              v85 = *(_QWORD *)v8;
              if (v57 < 2)
                v60 = v57 - 1;
              v61 = v60 >> 1;
              v62 = v8;
              do
              {
                v63 = &v62[8 * v59 + 8];
                v64 = (2 * v59) | 1;
                v65 = 2 * v59 + 2;
                if (v65 < v57)
                {
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)&v62[8 * v59 + 8], *(_QWORD *)&v62[8 * v59 + 16]);
                  if ((_DWORD)result)
                  {
                    v63 += 8;
                    v64 = v65;
                  }
                }
                *(_QWORD *)v62 = *(_QWORD *)v63;
                v62 = v63;
                v59 = v64;
              }
              while (v64 <= v61);
              v66 = v58 - 8;
              if (v63 == v66)
              {
                v67 = v66;
                *(_QWORD *)v63 = v85;
              }
              else
              {
                *(_QWORD *)v63 = *(_QWORD *)v66;
                v67 = v66;
                *(_QWORD *)v66 = v85;
                v68 = v63 - v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (unint64_t)((v68 >> 3) - 2) >> 1;
                  v70 = &v8[8 * v69];
                  result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v70, *(_QWORD *)v63);
                  if ((_DWORD)result)
                  {
                    v71 = *(_QWORD *)v63;
                    do
                    {
                      v72 = v70;
                      *(_QWORD *)v63 = *(_QWORD *)v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[8 * v69];
                      result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(_QWORD *)v70, v71);
                      v63 = v72;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v72 = v71;
                  }
                }
              }
              v73 = v57-- <= 2;
              a2 = v67;
            }
            while (!v73);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[8 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v13, v8, v86, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(v8, v13, v86, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v8 + 1, (_QWORD *)v13 - 1, v82, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v8 + 2, &v8[8 * v12 + 8], v81, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>((_QWORD *)v13 - 1, v13, &v8[8 * v12 + 8], a3);
          v14 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)v13;
          *(_QWORD *)v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0
          && (((uint64_t (*)(_QWORD, _QWORD))*a3)(*((_QWORD *)v8 - 1), *(_QWORD *)v8) & 1) == 0)
        {
          v29 = *(_QWORD *)v8;
          result = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(_QWORD *)v8, *(_QWORD *)v86);
          if ((result & 1) != 0)
          {
            v9 = v8;
            do
            {
              v30 = *((_QWORD *)v9 + 1);
              v9 += 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v30);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v31 = v8 + 8;
            do
            {
              v9 = v31;
              if (v31 >= a2)
                break;
              v31 += 8;
              result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v29, *(_QWORD *)v9);
            }
            while (!(_DWORD)result);
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v33);
            }
            while ((result & 1) != 0);
          }
          while (v9 < v32)
          {
            v34 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v34;
            do
            {
              v35 = *((_QWORD *)v9 + 1);
              v9 += 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v29, v35));
            do
            {
              v36 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v36);
            }
            while ((result & 1) != 0);
          }
          v37 = v9 - 8;
          if (v9 - 8 != v8)
            *(_QWORD *)v8 = *(_QWORD *)v37;
          a5 = 0;
          *(_QWORD *)v37 = v29;
          continue;
        }
        v15 = *(_QWORD *)v8;
        v16 = v8;
        do
        {
          v17 = v16;
          v18 = *((_QWORD *)v16 + 1);
          v16 += 8;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v18, v15) & 1) != 0);
        v19 = a2;
        if (v17 == v8)
        {
          v19 = a2;
          do
          {
            if (v16 >= v19)
              break;
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v15) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v20, v15));
        }
        v22 = a2;
        if (v16 < v19)
        {
          v23 = v16;
          v24 = v19;
          do
          {
            v25 = *(_QWORD *)v23;
            *(_QWORD *)v23 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v17 = v23;
              v26 = *((_QWORD *)v23 + 1);
              v23 += 8;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v26, v15) & 1) != 0);
            do
            {
              v27 = *((_QWORD *)v24 - 1);
              v24 -= 8;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v27, v15));
          }
          while (v23 < v24);
        }
        if (v17 != v8)
          *(_QWORD *)v8 = *(_QWORD *)v17;
        *(_QWORD *)v17 = v15;
        a2 = v22;
        if (v16 < v19)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **,false>(v8, v17, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v17 + 8;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **>(v8, v17, a3);
        v9 = v17 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **>((_QWORD *)v17 + 1, v22, a3);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_30;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ZoneState *,ZoneState *),ZoneState **>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ConnectionState *,ConnectionState *),ConnectionState **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void CHECK_RANGE<int>(int *a1, int a2, int a3, uint64_t a4)
{
  int v5;
  int v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 <= *a1)
    v5 = *a1;
  else
    v5 = a2;
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = v5;
  if (v6 != *a1 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "SamplerUtils.h";
    v10 = 1024;
    v11 = 57;
    v12 = 2080;
    v13 = a4;
    v14 = 2080;
    v15 = "value constrained to limits";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s:  %s", (uint8_t *)&v8, 0x26u);
  }
  *a1 = v6;
}

uint64_t LayerState::CopyLFO(char **this, uint64_t a2)
{
  uint64_t v3;
  const SamplerState *v4;
  int NextAvailable;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  CAXException *exception;
  _BYTE v26[16];
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[10];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = (*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 0x10000000);
  if (!v3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v26, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v28 = "LayerState.cpp";
      v29 = 1024;
      v30 = 586;
      v31 = 2080;
      *(_QWORD *)v32 = v26;
      *(_WORD *)&v32[8] = 2080;
      v33 = "LayerState::CopyLFO: No LFO matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::CopyLFO: No LFO matching that element ID", -10851);
  }
  v4 = (const SamplerState *)v3;
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[62], this[63]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v6 = (*(uint64_t (**)(char **))*this)(this);
    *(_DWORD *)buf = 136315906;
    v28 = "LayerState.cpp";
    v29 = 1024;
    v30 = 588;
    v31 = 1024;
    *(_DWORD *)v32 = v6;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyLFO: layer %u adding ID 0x%x", buf, 0x1Eu);
  }
  v7 = operator new();
  SamplerState::SamplerState((SamplerState *)v7, v4, NextAvailable);
  *(_QWORD *)v7 = &off_24CA937A0;
  *(_QWORD *)(v7 + 88) = *((_QWORD *)v4 + 11);
  *(_QWORD *)(v7 + 96) = *((_QWORD *)v4 + 12);
  v9 = (uint64_t *)this[63];
  v8 = this[64];
  if (v9 >= (uint64_t *)v8)
  {
    v11 = this[62];
    v12 = ((char *)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
    else
      v16 = 0;
    v17 = (uint64_t *)(v15 + 8 * v12);
    v18 = (char *)(v15 + 8 * v16);
    *v17 = v7;
    v10 = (char *)(v17 + 1);
    v20 = this[62];
    v19 = this[63];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = this[62];
    }
    this[62] = (char *)v17;
    this[63] = v10;
    this[64] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v7;
    v10 = (char *)(v9 + 1);
  }
  this[63] = v10;
  ++*(_DWORD *)(v7 + 8);
  v22 = this[56];
  v23 = this[57];
  while (v22 != v23)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v22 + 112))(*(_QWORD *)v22, 4231, 0);
    v22 += 8;
  }
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4230, 1);
  return v7;
}

void sub_210A996C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

EnvelopeState *LayerState::CopyEnvelope(char **this, uint64_t a2)
{
  uint64_t v3;
  const EnvelopeState *v4;
  int NextAvailable;
  int v6;
  EnvelopeState *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  CAXException *exception;
  _BYTE v26[16];
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BYTE v32[10];
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = (*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 0x20000000);
  if (!v3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v26, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v28 = "LayerState.cpp";
      v29 = 1024;
      v30 = 573;
      v31 = 2080;
      *(_QWORD *)v32 = v26;
      *(_WORD *)&v32[8] = 2080;
      v33 = "LayerState::CopyEnvelope: No envelope matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::CopyEnvelope: No envelope matching that element ID", -10851);
  }
  v4 = (const EnvelopeState *)v3;
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[59], this[60]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v6 = (*(uint64_t (**)(char **))*this)(this);
    *(_DWORD *)buf = 136315906;
    v28 = "LayerState.cpp";
    v29 = 1024;
    v30 = 575;
    v31 = 1024;
    *(_DWORD *)v32 = v6;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyEnvelope: layer %u adding ID 0x%x", buf, 0x1Eu);
  }
  v7 = (EnvelopeState *)operator new();
  EnvelopeState::EnvelopeState(v7, v4, NextAvailable);
  v9 = this[60];
  v8 = this[61];
  if (v9 >= v8)
  {
    v11 = this[59];
    v12 = (v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
    else
      v16 = 0;
    v17 = (char *)(v15 + 8 * v12);
    v18 = (char *)(v15 + 8 * v16);
    *(_QWORD *)v17 = v7;
    v10 = v17 + 8;
    v20 = this[59];
    v19 = this[60];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = this[59];
    }
    this[59] = v17;
    this[60] = v10;
    this[61] = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_QWORD *)v9 = v7;
    v10 = v9 + 8;
  }
  this[60] = v10;
  ++*((_DWORD *)v7 + 2);
  v22 = this[56];
  v23 = this[57];
  while (v22 != v23)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v22 + 112))(*(_QWORD *)v22, 4221, 0);
    v22 += 8;
  }
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4220, 1);
  return v7;
}

void sub_210A999DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t LayerState::CopyConnection(char **this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int NextAvailable;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  CAXException *exception;
  _BYTE v12[16];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _BYTE v18[10];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = (*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 1610612736);
  if (!v3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v14 = "LayerState.cpp";
      v15 = 1024;
      v16 = 612;
      v17 = 2080;
      *(_QWORD *)v18 = v12;
      *(_WORD *)&v18[8] = 2080;
      v19 = "LayerState::CopyConnection: No connection matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::CopyConnection: No connection matching that element ID", -10851);
  }
  v4 = v3;
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[65], this[66]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v6 = (*(uint64_t (**)(char **))*this)(this);
    *(_DWORD *)buf = 136315906;
    v14 = "LayerState.cpp";
    v15 = 1024;
    v16 = 614;
    v17 = 1024;
    *(_DWORD *)v18 = v6;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyConnection: layer %u adding ID 0x%x", buf, 0x1Eu);
  }
  v7 = operator new();
  SamplerState::SamplerState((SamplerState *)v7, (const SamplerState *)v4, NextAvailable);
  *(_QWORD *)v7 = &off_24CA8E7D0;
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(v4 + 88);
  *(_DWORD *)(v7 + 96) = *(_DWORD *)(v4 + 96);
  *(_QWORD *)(v7 + 100) = *(_QWORD *)(v4 + 100);
  *(_BYTE *)(v7 + 108) = *(_BYTE *)(v4 + 108);
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v4 + 112);
  *(_BYTE *)(v7 + 120) = *(_BYTE *)(v4 + 120);
  *(_DWORD *)(v7 + 124) = *(_DWORD *)(v4 + 124);
  *(_QWORD *)(v7 + 128) = 0;
  LayerState::AddConnection((LayerState *)this, (ConnectionState *)v7, 1);
  LayerState::SortConnections((LayerState *)this[65], (LayerState *)this[66]);
  v8 = this[56];
  v9 = this[57];
  while (v8 != v9)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v8 + 112))(*(_QWORD *)v8, 4271, 0);
    v8 += 8;
  }
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4270, 1);
  return v7;
}

void sub_210A99CAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t LayerState::CopyZone(char **this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int NextAvailable;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  uint64_t *v12;
  LayerState *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  CAXException *exception;
  _BYTE v27[16];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BYTE v33[10];
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = (*((uint64_t (**)(char **, uint64_t, uint64_t))*this + 4))(this, a2, 1879048192);
  if (!v3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v27, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v29 = "LayerState.cpp";
      v30 = 1024;
      v31 = 599;
      v32 = 2080;
      *(_QWORD *)v33 = v27;
      *(_WORD *)&v33[8] = 2080;
      v34 = "LayerState::CopyZone: No zone matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::CopyZone: No zone matching that element ID", -10851);
  }
  v4 = v3;
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[56], this[57]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v6 = (*(uint64_t (**)(char **))*this)(this);
    *(_DWORD *)buf = 136315906;
    v29 = "LayerState.cpp";
    v30 = 1024;
    v31 = 601;
    v32 = 1024;
    *(_DWORD *)v33 = v6;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CopyZone: layer %u adding ID 0x%x", buf, 0x1Eu);
  }
  v7 = operator new();
  SamplerState::SamplerState((SamplerState *)v7, (const SamplerState *)v4, NextAvailable);
  *(_DWORD *)(v7 + 88) = *(_DWORD *)(v4 + 88);
  *(_QWORD *)v7 = &off_24CA947D0;
  *(_DWORD *)(v7 + 96) = *(_DWORD *)(v4 + 96);
  v8 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v7 + 104) = v8;
  *(_DWORD *)(v7 + 112) = *(_DWORD *)(v4 + 112);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(v4 + 120);
  *(_DWORD *)(v7 + 136) = *(_DWORD *)(v4 + 136);
  *(_BYTE *)(v7 + 140) = *(_BYTE *)(v4 + 140);
  *(_DWORD *)(v7 + 144) = *(_DWORD *)(v4 + 144);
  *(_OWORD *)(v7 + 152) = *(_OWORD *)(v4 + 152);
  *(_DWORD *)(v7 + 168) = *(_DWORD *)(v4 + 168);
  *(_DWORD *)(v7 + 172) = *(_DWORD *)(v4 + 172);
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 20);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(v7 + 176) = *(_QWORD *)(v4 + 176);
  *(_WORD *)(v7 + 188) = *(_WORD *)(v4 + 188);
  *(_DWORD *)(v7 + 192) = *(_DWORD *)(v4 + 192);
  *(_OWORD *)(v7 + 196) = *(_OWORD *)(v4 + 196);
  *(_DWORD *)(v7 + 212) = *(_DWORD *)(v4 + 212);
  *(_DWORD *)(v7 + 216) = *(_DWORD *)(v4 + 216);
  *(_WORD *)(v7 + 220) = *(_WORD *)(v4 + 220);
  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v4 + 224);
  *(_BYTE *)(v7 + 184) = *(_BYTE *)(v4 + 184);
  *(_BYTE *)(v7 + 185) = *(_BYTE *)(v4 + 185);
  *(_BYTE *)(v7 + 186) = *(_BYTE *)(v4 + 186);
  *(_BYTE *)(v7 + 187) = *(_BYTE *)(v4 + 187);
  v12 = (uint64_t *)this[57];
  v11 = this[58];
  if (v12 >= (uint64_t *)v11)
  {
    v14 = this[56];
    v15 = ((char *)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v16 = v11 - v14;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v18);
    else
      v19 = 0;
    v20 = (char *)(v18 + 8 * v15);
    v21 = (char *)(v18 + 8 * v19);
    *(_QWORD *)v20 = v7;
    v13 = (LayerState *)(v20 + 8);
    v23 = this[56];
    v22 = this[57];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = this[56];
    }
    this[56] = v20;
    this[57] = (char *)v13;
    this[58] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = v7;
    v13 = (LayerState *)(v12 + 1);
  }
  this[57] = (char *)v13;
  ++*(_DWORD *)(v7 + 8);
  LayerState::SortZones((LayerState *)this[56], v13);
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4280, 1);
  return v7;
}

void sub_210A9A084(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LayerState::RemoveLFO(uint64_t **this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  CAXException *exception;
  _BYTE v15[16];
  _BYTE buf[30];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = ((uint64_t (*)(uint64_t **))**this)(this);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "LayerState.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 641;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveLFO: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  v5 = ((uint64_t (*)(uint64_t **, uint64_t, uint64_t))(*this)[4])(this, a2, 0x10000000);
  v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "LayerState.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 643;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2080;
      v17 = "LayerState::RemoveLFO: No LFO matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveLFO: No LFO matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0);
  memset(buf, 0, 24);
  v7 = (**(uint64_t (***)(_DWORD *))v6)(v6);
  LayerState::FindConnectionsUsingID(this[65], this[66], v7, (void **)buf);
  v8 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v9 = *(_QWORD **)buf;
    do
    {
      v10 = (**(uint64_t (***)(_QWORD))*v9)(*v9);
      LayerState::RemoveConnection((LayerState *)this, v10);
      ++v9;
    }
    while (v9 != v8);
  }
  ((void (*)(uint64_t **, uint64_t, uint64_t))(*this)[14])(this, 4230, 1);
  v11 = this[63];
  v12 = this[62];
  if (v12 != v11)
  {
    while ((_DWORD *)*v12 != v6)
    {
      if (++v12 == v11)
      {
        v12 = this[63];
        break;
      }
    }
  }
  if (v12 != v11)
  {
    v13 = v12 + 1;
    if (v12 + 1 != v11)
    {
      do
      {
        if ((_DWORD *)*v13 != v6)
          *v12++ = *v13;
        ++v13;
      }
      while (v13 != v11);
      v11 = this[63];
    }
  }
  if (v11 != v12)
    this[63] = v12;
  SamplerState::Unref(v6);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
}

void sub_210A9A3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void LayerState::RemoveEnvelope(uint64_t **this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  CAXException *exception;
  _BYTE v15[16];
  _BYTE buf[30];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = ((uint64_t (*)(uint64_t **))**this)(this);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "LayerState.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 625;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveEnvelope: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  v5 = ((uint64_t (*)(uint64_t **, uint64_t, _QWORD))(*this)[4])(this, a2, 0);
  v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v15, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "LayerState.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 627;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v15;
      *(_WORD *)&buf[28] = 2080;
      v17 = "LayerState::RemoveEnvelope: No envelope matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveEnvelope: No envelope matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0);
  memset(buf, 0, 24);
  v7 = (**(uint64_t (***)(_DWORD *))v6)(v6);
  LayerState::FindConnectionsUsingID(this[65], this[66], v7, (void **)buf);
  v8 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v9 = *(_QWORD **)buf;
    do
    {
      v10 = (**(uint64_t (***)(_QWORD))*v9)(*v9);
      LayerState::RemoveConnection((LayerState *)this, v10);
      ++v9;
    }
    while (v9 != v8);
  }
  ((void (*)(uint64_t **, uint64_t, uint64_t))(*this)[14])(this, 4220, 1);
  v11 = this[60];
  v12 = this[59];
  if (v12 != v11)
  {
    while ((_DWORD *)*v12 != v6)
    {
      if (++v12 == v11)
      {
        v12 = this[60];
        break;
      }
    }
  }
  if (v12 != v11)
  {
    v13 = v12 + 1;
    if (v12 + 1 != v11)
    {
      do
      {
        if ((_DWORD *)*v13 != v6)
          *v12++ = *v13;
        ++v13;
      }
      while (v13 != v11);
      v11 = this[60];
    }
  }
  if (v11 != v12)
    this[60] = v12;
  SamplerState::Unref(v6);
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
}

void sub_210A9A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t LayerState::RemoveConnection(LayerState *this, int a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  LayerState *v13;
  LayerState *v14;
  LayerState *v15;
  LayerState *v16;

  v2 = (unsigned int **)*((_QWORD *)this + 65);
  v3 = (unsigned int **)*((_QWORD *)this + 66);
  if (v2 == v3)
    return 0;
  while (1)
  {
    v6 = *v2;
    if ((**(unsigned int (***)(unsigned int *))*v2)(*v2) == a2)
      break;
    if (++v2 == v3)
      return 0;
  }
  (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v6 + 64))(v6, 0);
  v8 = *((_QWORD *)this + 3);
  v9 = *(uint64_t **)(v8 + 88);
  v10 = *(uint64_t **)(v8 + 96);
  if (v9 != v10)
  {
    v11 = v6[23];
    do
    {
      v12 = *v9++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 152))(v12, v11);
    }
    while (v9 != v10);
  }
  v13 = (LayerState *)*((_QWORD *)this + 65);
  v14 = (LayerState *)*((_QWORD *)this + 66);
  v15 = v13;
  if (v13 != v14)
  {
    while (*(unsigned int **)v15 != v6)
    {
      v15 = (LayerState *)((char *)v15 + 8);
      if (v15 == v14)
      {
        v15 = (LayerState *)*((_QWORD *)this + 66);
        break;
      }
    }
  }
  if (v15 != v14)
  {
    v16 = (LayerState *)((char *)v15 + 8);
    if ((LayerState *)((char *)v15 + 8) != v14)
    {
      do
      {
        if (*(unsigned int **)v16 != v6)
        {
          *(_QWORD *)v15 = *(_QWORD *)v16;
          v15 = (LayerState *)((char *)v15 + 8);
        }
        v16 = (LayerState *)((char *)v16 + 8);
      }
      while (v16 != v14);
      v14 = (LayerState *)*((_QWORD *)this + 66);
      v13 = (LayerState *)*((_QWORD *)this + 65);
    }
  }
  if (v14 != v15)
  {
    *((_QWORD *)this + 66) = v15;
    v14 = v15;
  }
  LayerState::SortConnections(v13, v14);
  v7 = 1;
  (*(void (**)(LayerState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4270, 1);
  SamplerState::Unref(v6);
  return v7;
}

uint64_t LayerState::RemoveZone(LayerState **this, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _DWORD *v6;
  LayerState *v7;
  LayerState *v8;
  LayerState *v9;
  CAXException *exception;
  _BYTE v12[16];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _BYTE v18[10];
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = (*(uint64_t (**)(LayerState **))*this)(this);
    *(_DWORD *)buf = 136315906;
    v14 = "LayerState.cpp";
    v15 = 1024;
    v16 = 657;
    v17 = 1024;
    *(_DWORD *)v18 = v4;
    *(_WORD *)&v18[4] = 1024;
    *(_DWORD *)&v18[6] = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::RemoveZone: layer %u removing ID 0x%x", buf, 0x1Eu);
  }
  v5 = (*((uint64_t (**)(LayerState **, uint64_t, uint64_t))*this + 4))(this, a2, 1879048192);
  v6 = (_DWORD *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v14 = "LayerState.cpp";
      v15 = 1024;
      v16 = 659;
      v17 = 2080;
      *(_QWORD *)v18 = v12;
      *(_WORD *)&v18[8] = 2080;
      v19 = "LayerState::RemoveZone: No zone matching that element ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::RemoveZone: No zone matching that element ID", -10851);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0);
  (*((void (**)(LayerState **, uint64_t, uint64_t))*this + 14))(this, 4280, 1);
  v7 = this[57];
  v8 = this[56];
  if (v8 != v7)
  {
    while (*(_DWORD **)v8 != v6)
    {
      v8 = (LayerState *)((char *)v8 + 8);
      if (v8 == v7)
      {
        v8 = this[57];
        break;
      }
    }
  }
  if (v8 != v7)
  {
    v9 = (LayerState *)((char *)v8 + 8);
    if ((LayerState *)((char *)v8 + 8) != v7)
    {
      do
      {
        if (*(_DWORD **)v9 != v6)
        {
          *(_QWORD *)v8 = *(_QWORD *)v9;
          v8 = (LayerState *)((char *)v8 + 8);
        }
        v9 = (LayerState *)((char *)v9 + 8);
      }
      while (v9 != v7);
      v7 = this[57];
    }
  }
  if (v7 != v8)
    this[57] = v8;
  SamplerState::Unref(v6);
  return LayerState::SortZones(this[56], this[57]);
}

void sub_210A9AB20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

EnvelopeState *LayerState::AddEnvelope(char **this)
{
  int NextAvailable;
  int v3;
  EnvelopeState *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[59], this[60]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v3 = (*(uint64_t (**)(char **))*this)(this);
    v22 = 136315906;
    v23 = "LayerState.cpp";
    v24 = 1024;
    v25 = 540;
    v26 = 1024;
    v27 = v3;
    v28 = 1024;
    v29 = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddEnvelope: layer %u adding ID 0x%x", (uint8_t *)&v22, 0x1Eu);
  }
  v4 = (EnvelopeState *)operator new();
  EnvelopeState::EnvelopeState(v4, NextAvailable, (SamplerState *)this, 0);
  v6 = this[60];
  v5 = this[61];
  if (v6 >= v5)
  {
    v8 = this[59];
    v9 = (v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v12);
    else
      v13 = 0;
    v14 = (char *)(v12 + 8 * v9);
    v15 = (char *)(v12 + 8 * v13);
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    v17 = this[59];
    v16 = this[60];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = this[59];
    }
    this[59] = v14;
    this[60] = v7;
    this[61] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_QWORD *)v6 = v4;
    v7 = v6 + 8;
  }
  this[60] = v7;
  ++*((_DWORD *)v4 + 2);
  v19 = this[56];
  v20 = this[57];
  while (v19 != v20)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v19 + 112))(*(_QWORD *)v19, 4221, 0);
    v19 += 8;
  }
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4220, 1);
  return v4;
}

void sub_210A9AD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40D6EAEC2ALL);
  _Unwind_Resume(a1);
}

uint64_t LayerState::VerifyConnection(uint64_t a1, int *a2)
{
  int v4;
  unsigned int v5;
  uint64_t (*v6)(void);
  _BOOL4 v7;
  uint64_t result;
  NSObject *v9;
  const char *v10;
  int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = v4 & 0xF0000000;
  if ((v4 & 0xF0000000) == 0)
  {
    if ((v4 - 1000) < 0xFFFFFD6A)
      goto LABEL_10;
LABEL_6:
    v7 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v7)
      return result;
    v22 = 136315394;
    v23 = "LayerState.cpp";
    v24 = 1024;
    v25 = 715;
    v9 = MEMORY[0x24BDACB70];
    v10 = "%25s:%-5d  Invalid connection source type or index";
LABEL_38:
    _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v22, 0x12u);
    return 0;
  }
  if (v5 == 0x20000000)
  {
    v6 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 32);
  }
  else
  {
    if (v5 != 0x10000000)
    {
      v14 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v14)
        return result;
      v22 = 136315394;
      v23 = "LayerState.cpp";
      v24 = 1024;
      v25 = 711;
      v9 = MEMORY[0x24BDACB70];
      v10 = "%25s:%-5d  Invalid connection source";
      goto LABEL_38;
    }
    v6 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 32);
  }
  if (!v6())
    goto LABEL_6;
LABEL_10:
  v11 = a2[6];
  v12 = v11 & 0xF0000000;
  if ((v11 & 0xF0000000) == 0x20000000 || v12 == 0x10000000)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    {
LABEL_14:
      v13 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v13)
        return result;
      v22 = 136315394;
      v23 = "LayerState.cpp";
      v24 = 1024;
      v25 = 734;
      v9 = MEMORY[0x24BDACB70];
      v10 = "%25s:%-5d  Invalid connection control source index";
      goto LABEL_38;
    }
  }
  else
  {
    if (v12)
    {
      v17 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v17)
        return result;
      v22 = 136315394;
      v23 = "LayerState.cpp";
      v24 = 1024;
      v25 = 730;
      v9 = MEMORY[0x24BDACB70];
      v10 = "%25s:%-5d  Invalid connection control source";
      goto LABEL_38;
    }
    if ((v11 - 1000) >= 0xFFFFFD6A)
      goto LABEL_14;
  }
  v15 = a2[1];
  v16 = v15 & 0xF00FFFFF;
  switch(((v15 & 0xF0000000) - 0x10000000) >> 28)
  {
    case 0u:
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16, 0x10000000);
      goto LABEL_29;
    case 1u:
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16, 0x20000000);
      goto LABEL_29;
    case 2u:
    case 3u:
    case 4u:
      if (!a2[1])
        goto LABEL_30;
      goto LABEL_36;
    case 5u:
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16, 1610612736);
LABEL_29:
      if (v18)
        goto LABEL_30;
LABEL_36:
      v21 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v21)
        return result;
      v22 = 136315394;
      v23 = "LayerState.cpp";
      v24 = 1024;
      v25 = 759;
      v9 = MEMORY[0x24BDACB70];
      v10 = "%25s:%-5d  Invalid connection destination index";
      goto LABEL_38;
    default:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v22 = 136315394;
        v23 = "LayerState.cpp";
        v24 = 1024;
        v25 = 756;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Invalid connection destination component", (uint8_t *)&v22, 0x12u);
      }
LABEL_30:
      v19 = a2[1] & 0xFF00000;
      result = 1;
      if (v19 > 0x20FFFFF)
      {
        if ((a2[1] & 0xFF00000u) <= 0x29FFFFF)
        {
          if ((a2[1] & 0xFF00000u) <= 0x22FFFFF)
          {
            if (v19 == 34603008)
              return result;
            v20 = 35651584;
          }
          else
          {
            if (v19 == 36700160 || v19 == 37748736)
              return result;
            v20 = 42991616;
          }
        }
        else if ((a2[1] & 0xFF00000u) > 0x3EFFFFF)
        {
          if (v19 == 66060288 || v19 == 0x4000000)
            return result;
          v20 = 68157440;
        }
        else
        {
          if (v19 == 44040192 || v19 == 63963136)
            return result;
          v20 = 65011712;
        }
LABEL_64:
        if (v19 == v20)
          return result;
        goto LABEL_65;
      }
      if ((a2[1] & 0xFF00000u) >= 0xD00000)
      {
        if ((a2[1] & 0xFF00000u) <= 0x15FFFFF)
        {
          if (v19 == 13631488)
            return result;
          v20 = 22020096;
        }
        else
        {
          if (v19 == 23068672 || v19 == 32505856)
            return result;
          v20 = 0x2000000;
        }
        goto LABEL_64;
      }
      if ((a2[1] & 0xFF00000u) < 0x300000)
      {
        if (v19 == 0x100000 || v19 == 0x200000)
          return result;
      }
      else if (v19 == 3145728 || v19 == 11534336 || v19 == 12582912)
      {
        return result;
      }
LABEL_65:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v22 = 136315394;
        v23 = "LayerState.cpp";
        v24 = 1024;
        v25 = 789;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Invalid connection destination property", (uint8_t *)&v22, 0x12u);
      }
      return 1;
  }
}

uint64_t LayerState::AddConnection(uint64_t a1, int *a2, int a3)
{
  int NextAvailable;
  unsigned int v7;
  int v8;
  float v9;
  int v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  CAXException *exception;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE v31[10];
  _BYTE v32[10];
  __int16 v33;
  double v34;
  _BYTE v35[16];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  NextAvailable = GetNextAvailableIndex<ZoneState>(*(char **)(a1 + 520), *(char **)(a1 + 528));
  v7 = a2[4] - 1;
  if (v7 >= 5)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v35, 0xFFFFD581);
      v26 = 136315906;
      v27 = "LayerState.cpp";
      v28 = 1024;
      v29 = 819;
      v30 = 2080;
      *(_QWORD *)v31 = v35;
      *(_WORD *)&v31[8] = 2080;
      *(_QWORD *)v32 = "LayerState::AddConnection: Invalid connection transform";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&v26, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "LayerState::AddConnection: Invalid connection transform", -10879);
  }
  v8 = NextAvailable;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v9 = *(float *)a2;
    v10 = a2[1];
    v11 = *((float *)a2 + 2);
    v12 = *((float *)a2 + 3);
    v26 = 136316418;
    v27 = "LayerState.cpp";
    v28 = 1024;
    v29 = 823;
    v30 = 1024;
    *(float *)v31 = v9;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v10;
    *(_WORD *)v32 = 2048;
    *(double *)&v32[2] = v11;
    v33 = 2048;
    v34 = v12;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddConnection: src 0x%x dst 0x%x min %f max %f", (uint8_t *)&v26, 0x32u);
  }
  if (a2[9])
  {
    v13 = operator new();
    v14 = a2[11];
    *(_QWORD *)v13 = *(_QWORD *)(a2 + 9);
    *(_DWORD *)(v13 + 8) = v14;
  }
  else
  {
    v13 = 0;
  }
  v15 = operator new();
  v16 = *(_QWORD *)a2;
  v17 = *((_QWORD *)a2 + 1);
  v19 = a2[5];
  v18 = a2[6];
  v21 = a2[7];
  v20 = a2[8];
  SamplerState::SamplerState((SamplerState *)v15, 7, v8, (SamplerState *)a1, 0x20u);
  *(_DWORD *)(v15 + 88) = 1610612736;
  *(_QWORD *)v15 = &off_24CA8E7D0;
  *(_QWORD *)(v15 + 92) = v16;
  *(_QWORD *)(v15 + 100) = v17;
  *(_BYTE *)(v15 + 108) = v19 != 0;
  *(_DWORD *)(v15 + 112) = v7;
  *(_DWORD *)(v15 + 116) = v18;
  *(_BYTE *)(v15 + 120) = v21 != 0;
  *(_DWORD *)(v15 + 124) = v20;
  *(_QWORD *)(v15 + 128) = v13;
  LayerState::AddConnection((LayerState *)a1, (ConnectionState *)v15, a3);
  LayerState::SortConnections(*(LayerState **)(a1 + 520), *(LayerState **)(a1 + 528));
  v22 = *(_QWORD **)(a1 + 448);
  v23 = *(_QWORD **)(a1 + 456);
  while (v22 != v23)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v22 + 112))(*v22, 4271, 0);
    ++v22;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, 4270, 1);
  return v15;
}

void sub_210A9B614(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

ZoneState *LayerState::AddZone(char **this, unsigned int a2)
{
  int NextAvailable;
  int v5;
  ZoneState *v6;
  char *v7;
  char *v8;
  LayerState *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  NextAvailable = GetNextAvailableIndex<ZoneState>(this[56], this[57]);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = (*(uint64_t (**)(char **))*this)(this);
    v22 = 136315906;
    v23 = "LayerState.cpp";
    v24 = 1024;
    v25 = 562;
    v26 = 1024;
    v27 = v5;
    v28 = 1024;
    v29 = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::AddZone: layer %u adding ID 0x%x", (uint8_t *)&v22, 0x1Eu);
  }
  v6 = (ZoneState *)operator new();
  ZoneState::ZoneState(v6, NextAvailable, (SamplerState *)this, a2);
  v8 = this[57];
  v7 = this[58];
  if (v8 >= v7)
  {
    v10 = this[56];
    v11 = (v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v14);
    else
      v15 = 0;
    v16 = (char *)(v14 + 8 * v11);
    v17 = (char *)(v14 + 8 * v15);
    *(_QWORD *)v16 = v6;
    v9 = (LayerState *)(v16 + 8);
    v19 = this[56];
    v18 = this[57];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = this[56];
    }
    this[56] = v16;
    this[57] = (char *)v9;
    this[58] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v8 = v6;
    v9 = (LayerState *)(v8 + 8);
  }
  this[57] = (char *)v9;
  ++*((_DWORD *)v6 + 2);
  LayerState::SortZones((LayerState *)this[56], v9);
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4280, 1);
  return v6;
}

void sub_210A9B884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40A72B6B85);
  _Unwind_Resume(a1);
}

unint64_t GetNextAvailableIndex<ZoneState>(char *a1, char *a2)
{
  unint64_t v2;
  char *v4;
  unsigned __int8 (***v5)(_QWORD);

  v2 = (unint64_t)(a2 - a1) >> 3;
  if (a2 != a1)
  {
    v4 = a1;
    do
    {
      v5 = *(unsigned __int8 (****)(_QWORD))v4;
      if (v2 <= (***(unsigned __int8 (****)(_QWORD))v4)(*(_QWORD *)v4))
        v2 = (**v5)(v5) + 1;
      v4 += 8;
    }
    while (v4 != a2);
  }
  return v2;
}

void LayerState::FindConnectionsUsingID(uint64_t *a1, uint64_t *a2, int a3, void **a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      v8 = *v7;
      if (*(_DWORD *)(*v7 + 92) == a3 || (*(_DWORD *)(v8 + 96) & 0xF00FFFFF) == a3 || *(_DWORD *)(v8 + 116) == a3)
      {
        v10 = a4[1];
        v9 = (unint64_t)a4[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = ((char *)v10 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          v13 = v9 - (_QWORD)*a4;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
          else
            v16 = 0;
          v17 = (_QWORD *)(v15 + 8 * v12);
          *v17 = v8;
          v11 = v17 + 1;
          v19 = (char *)*a4;
          v18 = (char *)a4[1];
          if (v18 != *a4)
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v17 = v20;
            }
            while (v18 != v19);
            v18 = (char *)*a4;
          }
          *a4 = v17;
          a4[1] = v11;
          a4[2] = (void *)(v15 + 8 * v16);
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v10 = v8;
          v11 = v10 + 1;
        }
        a4[1] = v11;
      }
      ++v7;
    }
    while (v7 != a2);
  }
}

uint64_t LayerState::CreateDefaultConnections(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  LayerState *v6;
  int v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t (***v11)(_QWORD);
  int v12;
  _QWORD *v13;
  uint64_t (***v14)(_QWORD);
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  LayerState *v26;
  int v28;
  unsigned int v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
    *(_DWORD *)buf = 136315650;
    v31 = "LayerState.cpp";
    v32 = 1024;
    v33 = 252;
    v34 = 1024;
    v35 = v4;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::CreateDefaultConnections (layer %u)", buf, 0x18u);
  }
  v5 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v6 = *(LayerState **)(a1 + 528);
  if (v6 != *(LayerState **)(a1 + 520))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v31 = "LayerState.cpp";
      v32 = 1024;
      v33 = 259;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: connection list not empty", buf, 0x12u);
    }
    __break(1u);
  }
  v7 = *a2;
  if (!*a2)
  {
    v26 = *(LayerState **)(a1 + 528);
    return LayerState::SortConnections(v26, v6);
  }
  v29 = 0;
  v28 = v5 << 8;
  v8 = (_QWORD *)(a1 + 496);
  v9 = a2 + 8;
  do
  {
    v10 = v8;
    if ((v7 & 0xF0000000) != 0x10000000)
    {
      if ((v7 & 0xF0000000) != 0x20000000)
        goto LABEL_10;
      v10 = (_QWORD *)(a1 + 472);
    }
    v11 = *(uint64_t (****)(_QWORD))(*v10 + 8 * v7);
    v7 = (**v11)(v11);
LABEL_10:
    v12 = *(v9 - 2);
    v13 = v8;
    if ((v12 & 0xF0000000) != 0x10000000)
    {
      if ((v12 & 0xF0000000) != 0x20000000)
        goto LABEL_14;
      v13 = (_QWORD *)(a1 + 472);
    }
    v14 = *(uint64_t (****)(_QWORD))(*v13 + 8 * *(v9 - 2));
    v12 = (**v14)(v14);
LABEL_14:
    v15 = *(v9 - 7);
    v16 = v15 & 0xF0000000;
    if ((v15 & 0xF0000000) == 0x30000000)
    {
      v17 = (***(uint64_t (****)(_QWORD))(a1 + 176))(*(_QWORD *)(a1 + 176));
      goto LABEL_20;
    }
    if (v16 == 0x40000000)
    {
      v17 = (***(uint64_t (****)(_QWORD))(a1 + 184))(*(_QWORD *)(a1 + 184));
      goto LABEL_20;
    }
    if (v16 == 1342177280)
    {
      v17 = (***(uint64_t (****)(_QWORD))(a1 + 192))(*(_QWORD *)(a1 + 192));
LABEL_20:
      v18 = v17 | v15 & 0xFF00000;
      goto LABEL_22;
    }
    v18 = v15 | v28;
LABEL_22:
    v19 = operator new();
    v20 = v8;
    v21 = *((_QWORD *)v9 - 3);
    v22 = *((_BYTE *)v9 - 16);
    v23 = *(v9 - 3);
    v24 = *((_BYTE *)v9 - 4);
    SamplerState::SamplerState((SamplerState *)v19, 7, v29, (SamplerState *)a1, 0x20u);
    *(_QWORD *)v19 = &off_24CA8E7D0;
    *(_DWORD *)(v19 + 88) = 1610612736;
    *(_DWORD *)(v19 + 92) = v7;
    *(_DWORD *)(v19 + 96) = v18;
    *(_QWORD *)(v19 + 100) = v21;
    *(_BYTE *)(v19 + 108) = v22;
    *(_DWORD *)(v19 + 112) = v23;
    *(_DWORD *)(v19 + 116) = v12;
    *(_BYTE *)(v19 + 120) = v24;
    *(_DWORD *)(v19 + 124) = 0;
    *(_QWORD *)(v19 + 128) = 0;
    LayerState::AddConnection((LayerState *)a1, (ConnectionState *)v19, 0);
    v8 = v20;
    ++v29;
    v25 = *v9;
    v9 += 8;
    v7 = v25;
  }
  while (v25);
  v26 = *(LayerState **)(a1 + 520);
  v6 = *(LayerState **)(a1 + 528);
  return LayerState::SortConnections(v26, v6);
}

void sub_210A9BDA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40BE464577);
  _Unwind_Resume(a1);
}

void LayerState::LayerState(LayerState *this, int a2, SamplerState *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char **v11;
  ZoneState *v12;
  unint64_t v13;
  ZoneState **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  ZoneState **v21;
  unint64_t v22;
  char *v23;
  char *v24;
  ZoneState *v25;
  EnvelopeState *v26;
  unint64_t v27;
  EnvelopeState **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  EnvelopeState **v36;
  unint64_t v37;
  char *v38;
  char *v39;
  EnvelopeState *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  SamplerState::SamplerState(this, 6, a2, a3, 0x20u);
  *(_QWORD *)v6 = &off_24CA8A950;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v6 + 120) = 0;
  *(_WORD *)(v6 + 128) = 1;
  *(_BYTE *)(v6 + 130) = -1;
  *(_DWORD *)(v6 + 132) = 30;
  *(_BYTE *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 140) = 0x50000000ALL;
  *(_DWORD *)(v6 + 148) = -1;
  *(_WORD *)(v6 + 152) = 0;
  *(_BYTE *)(v6 + 154) = 1;
  *(_DWORD *)(v6 + 156) = -1;
  *(int32x2_t *)(v6 + 160) = vdup_n_s32(0x47C35000u);
  *(_DWORD *)(v6 + 168) = 1203982336;
  v7 = operator new();
  SamplerState::SamplerState((SamplerState *)v7, 7, 0, this, 0x20u);
  *(_QWORD *)v7 = &off_24CA8E920;
  *(_BYTE *)(v7 + 48) = 1;
  *(_QWORD *)(v7 + 88) = 805306368;
  *(_DWORD *)(v7 + 96) = 0;
  *((_QWORD *)this + 22) = v7;
  v8 = operator new();
  SamplerState::SamplerState((SamplerState *)v8, 7, 0, this, 0x20u);
  *(_QWORD *)v8 = &off_24CA8B060;
  *(_QWORD *)(v8 + 88) = 0x2840000000;
  *(_QWORD *)(v8 + 96) = 0xC0400000469C4000;
  if (*(_BYTE *)(v8 + 48))
  {
    *(_BYTE *)(v8 + 48) = 0;
    SamplerState::Notify((SamplerState *)v8, 4121, 0);
  }
  *((_QWORD *)this + 23) = v8;
  v9 = operator new();
  SamplerState::SamplerState((SamplerState *)v9, 7, 0, this, 0x20u);
  *(_DWORD *)(v9 + 88) = 1342177280;
  *(_QWORD *)v9 = &off_24CA8DDB0;
  *(_QWORD *)(v9 + 92) = 0;
  *(_BYTE *)(v9 + 100) = 0;
  *((_QWORD *)this + 24) = v9;
  *((_WORD *)this + 100) = 0;
  v10 = (**(uint64_t (***)(LayerState *))this)(this);
  TRandom::Seed((LayerState *)((char *)this + 208), v10);
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 22) = 2130738944;
  *((_WORD *)this + 46) = 32512;
  if (a4)
  {
    v11 = (char **)((char *)this + 448);
    v12 = (ZoneState *)operator new();
    ZoneState::ZoneState(v12, 0, this, 0xFFFFFFFE);
    v14 = (ZoneState **)*((_QWORD *)this + 57);
    v13 = *((_QWORD *)this + 58);
    if ((unint64_t)v14 >= v13)
    {
      v16 = ((char *)v14 - *v11) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v17 = v13 - (_QWORD)*v11;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v19);
      else
        v20 = 0;
      v21 = (ZoneState **)(v19 + 8 * v16);
      v22 = v19 + 8 * v20;
      *v21 = v12;
      v15 = v21 + 1;
      v24 = (char *)*((_QWORD *)this + 56);
      v23 = (char *)*((_QWORD *)this + 57);
      if (v23 != v24)
      {
        do
        {
          v25 = (ZoneState *)*((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = *v11;
      }
      *((_QWORD *)this + 56) = v21;
      *((_QWORD *)this + 57) = v15;
      *((_QWORD *)this + 58) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v14 = v12;
      v15 = v14 + 1;
    }
    *((_QWORD *)this + 57) = v15;
    ++*((_DWORD *)v12 + 2);
    v26 = (EnvelopeState *)operator new();
    EnvelopeState::EnvelopeState(v26, 0, this, 1);
    v28 = (EnvelopeState **)*((_QWORD *)this + 60);
    v27 = *((_QWORD *)this + 61);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *((_QWORD *)this + 59);
      v31 = ((uint64_t)v28 - v30) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v32 = v27 - v30;
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v34);
      else
        v35 = 0;
      v36 = (EnvelopeState **)(v34 + 8 * v31);
      v37 = v34 + 8 * v35;
      *v36 = v26;
      v29 = v36 + 1;
      v39 = (char *)*((_QWORD *)this + 59);
      v38 = (char *)*((_QWORD *)this + 60);
      if (v38 != v39)
      {
        do
        {
          v40 = (EnvelopeState *)*((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = (char *)*((_QWORD *)this + 59);
      }
      *((_QWORD *)this + 59) = v36;
      *((_QWORD *)this + 60) = v29;
      *((_QWORD *)this + 61) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v28 = v26;
      v29 = v28 + 1;
    }
    *((_QWORD *)this + 60) = v29;
    ++*((_DWORD *)v26 + 2);
    v41 = operator new();
    SamplerState::SamplerState((SamplerState *)v41, 7, 0, this, 0x20u);
    *(_QWORD *)v41 = &off_24CA937A0;
    *(_QWORD *)(v41 + 88) = 0x1B10000000;
    *(_QWORD *)(v41 + 96) = 0x40A000003C23D70ALL;
    v43 = (uint64_t *)*((_QWORD *)this + 63);
    v42 = *((_QWORD *)this + 64);
    if ((unint64_t)v43 >= v42)
    {
      v45 = *((_QWORD *)this + 62);
      v46 = ((uint64_t)v43 - v45) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v47 = v42 - v45;
      v48 = v47 >> 2;
      if (v47 >> 2 <= (unint64_t)(v46 + 1))
        v48 = v46 + 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
        v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v49);
      else
        v50 = 0;
      v51 = (uint64_t *)(v49 + 8 * v46);
      v52 = v49 + 8 * v50;
      *v51 = v41;
      v44 = v51 + 1;
      v54 = (char *)*((_QWORD *)this + 62);
      v53 = (char *)*((_QWORD *)this + 63);
      if (v53 != v54)
      {
        do
        {
          v55 = *((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v51 = v55;
        }
        while (v53 != v54);
        v53 = (char *)*((_QWORD *)this + 62);
      }
      *((_QWORD *)this + 62) = v51;
      *((_QWORD *)this + 63) = v44;
      *((_QWORD *)this + 64) = v52;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v43 = v41;
      v44 = v43 + 1;
    }
    *((_QWORD *)this + 63) = v44;
    ++*(_DWORD *)(v41 + 8);
    LayerState::CreateDefaultConnections((uint64_t)this, sDefaultConnections);
  }
  ++*(_DWORD *)(*((_QWORD *)this + 24) + 8);
  v56 = *((_QWORD *)this + 23);
  ++*(_DWORD *)(*((_QWORD *)this + 22) + 8);
  ++*(_DWORD *)(v56 + 8);
}

void sub_210A9C2D4(_Unwind_Exception *a1)
{
  SamplerState *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  MEMORY[0x212BCDF50](v2, 0x10E1C402E53C1ECLL);
  v5 = (void *)*((_QWORD *)v1 + 65);
  if (v5)
  {
    *((_QWORD *)v1 + 66) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 62);
  if (v6)
  {
    *((_QWORD *)v1 + 63) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 59);
  if (v7)
  {
    *((_QWORD *)v1 + 60) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 57) = v8;
    operator delete(v8);
  }
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

uint64_t LayerState::GetMatchingZones(uint64_t a1, unsigned __int8 *a2, unsigned __int8 ***a3)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v16;
  unsigned __int8 **v17;
  unsigned __int8 **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  int64x2_t v29;
  unsigned __int8 **v30;
  unsigned __int8 **v31;
  uint64_t result;
  int v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 **v40;
  uint64_t v41;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  unint64_t v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  int64x2_t v56;
  unsigned __int8 **v57;
  uint64_t v58;
  int64x2_t v59;
  unint64_t v60;
  _QWORD *v61;

  v5 = *(_QWORD *)(a1 + 456) - *(_QWORD *)(a1 + 448);
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    v7 = 0;
    v8 = (v5 >> 3);
    do
    {
      v9 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 448) + 8 * v7);
      if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v9 + 56))(v9))
      {
        v10 = a2[2];
        v11 = (v9[186] - v10) & ~((v9[186] - v10) >> 31);
        if (v11 >= 0x7F)
          v11 = 127;
        v12 = v9[187] + v10;
        if (v12 >= 0x7F)
          v12 = 127;
        v13 = *a2;
        if (v13 >= v9[184] && v13 <= v9[185])
        {
          v14 = a2[1];
          if (v14 >= v11 && v14 <= v12)
          {
            v17 = a3[1];
            v16 = (unint64_t)a3[2];
            if ((unint64_t)v17 >= v16)
            {
              v19 = v17 - *a3;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<void const*>::__throw_length_error[abi:ne180100]();
              v20 = v16 - (_QWORD)*a3;
              v21 = v20 >> 2;
              if (v20 >> 2 <= (unint64_t)(v19 + 1))
                v21 = v19 + 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v21;
              v61 = a3 + 2;
              if (v22)
                v22 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v22);
              else
                v23 = 0;
              v24 = (unsigned __int8 **)(v22 + 8 * v19);
              v25 = v22 + 8 * v23;
              v60 = v25;
              *v24 = v9;
              v18 = v24 + 1;
              v59.i64[1] = (uint64_t)(v24 + 1);
              v27 = *a3;
              v26 = (unint64_t)a3[1];
              if ((unsigned __int8 **)v26 == *a3)
              {
                v29 = vdupq_n_s64(v26);
              }
              else
              {
                do
                {
                  v28 = *(unsigned __int8 **)(v26 - 8);
                  v26 -= 8;
                  *--v24 = v28;
                }
                while ((unsigned __int8 **)v26 != v27);
                v29 = *(int64x2_t *)a3;
                v18 = (unsigned __int8 **)v59.i64[1];
                v25 = v60;
              }
              *a3 = v24;
              a3[1] = v18;
              v59 = v29;
              v30 = a3[2];
              a3[2] = (unsigned __int8 **)v25;
              v60 = (unint64_t)v30;
              v58 = v29.i64[0];
              std::__split_buffer<ZoneState *,caulk::rt_allocator<ZoneState *> &>::~__split_buffer((uint64_t)&v58);
            }
            else
            {
              *v17 = v9;
              v18 = v17 + 1;
            }
            a3[1] = v18;
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v31 = *a3;
  result = (unint64_t)((char *)a3[1] - (char *)*a3) >> 3;
  if (result >= 2)
  {
    v33 = *(_DWORD *)(a1 + 132);
    if (v33 == 32)
    {
      v47 = (*(_QWORD *)(a1 + 432) + 1) % 55;
      v48 = (*(_QWORD *)(a1 + 440) + 1) % 55;
      *(_QWORD *)(a1 + 432) = v47;
      *(_QWORD *)(a1 + 440) = v48;
      LODWORD(v48) = *(_DWORD *)(a1 + 208 + 4 * v47) - *(_DWORD *)(a1 + 208 + 4 * v48);
      *(_DWORD *)(a1 + 208 + 4 * v47) = v48;
      v35 = v31[v48 % result];
      v49 = (unint64_t)a3[2];
      a3[1] = v31;
      if ((unint64_t)v31 >= v49)
      {
        v50 = v49 - (_QWORD)v31;
        v51 = v50 >> 2;
        if ((unint64_t)(v50 >> 2) <= 1)
          v51 = 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v51;
        v61 = a3 + 2;
        v40 = (unsigned __int8 **)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v52);
        v42 = &v40[v53];
        *v40 = v35;
        v43 = v40 + 1;
        v54 = *a3;
        v44 = (unint64_t)a3[1];
        if ((unsigned __int8 **)v44 != *a3)
        {
          do
          {
            v55 = *(unsigned __int8 **)(v44 - 8);
            v44 -= 8;
            *--v40 = v55;
          }
          while ((unsigned __int8 **)v44 != v54);
          goto LABEL_53;
        }
LABEL_54:
        v56 = vdupq_n_s64(v44);
        goto LABEL_55;
      }
    }
    else
    {
      if (v33 != 31)
        return result;
      v34 = *(unsigned __int16 *)(a1 + 200);
      *(_WORD *)(a1 + 200) = v34 + 1;
      v35 = v31[v34 % result];
      v36 = (unint64_t)a3[2];
      a3[1] = v31;
      if ((unint64_t)v31 >= v36)
      {
        v37 = v36 - (_QWORD)v31;
        v38 = v37 >> 2;
        if ((unint64_t)(v37 >> 2) <= 1)
          v38 = 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        v61 = a3 + 2;
        v40 = (unsigned __int8 **)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v39);
        v42 = &v40[v41];
        *v40 = v35;
        v43 = v40 + 1;
        v45 = *a3;
        v44 = (unint64_t)a3[1];
        if ((unsigned __int8 **)v44 != *a3)
        {
          do
          {
            v46 = *(unsigned __int8 **)(v44 - 8);
            v44 -= 8;
            *--v40 = v46;
          }
          while ((unsigned __int8 **)v44 != v45);
LABEL_53:
          v56 = *(int64x2_t *)a3;
LABEL_55:
          *a3 = v40;
          a3[1] = v43;
          v59 = v56;
          v57 = a3[2];
          a3[2] = v42;
          v60 = (unint64_t)v57;
          v58 = v56.i64[0];
          std::__split_buffer<ZoneState *,caulk::rt_allocator<ZoneState *> &>::~__split_buffer((uint64_t)&v58);
          goto LABEL_56;
        }
        goto LABEL_54;
      }
    }
    *v31 = v35;
    v43 = v31 + 1;
LABEL_56:
    a3[1] = v43;
    return 1;
  }
  return result;
}

uint64_t std::__split_buffer<ZoneState *,caulk::rt_allocator<ZoneState *> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<ZoneState *>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 3);
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<ZoneState *>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 61))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

uint64_t LayerState::NotifyConnectionChange(LayerState *this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  if ((a2 | 2) == 0x10CE)
  {
    v5 = *((_QWORD *)this + 3);
    v6 = *(uint64_t **)(v5 + 88);
    v7 = *(uint64_t **)(v5 + 96);
    if (v6 != v7)
    {
      do
      {
        v10 = *v6++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 152))(v10, a3);
      }
      while (v6 != v7);
      v11 = *((_QWORD *)this + 3);
      v12 = *(uint64_t **)(v11 + 88);
      v13 = *(uint64_t **)(v11 + 96);
      while (v12 != v13)
      {
        v14 = *v12++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 144))(v14, a4);
      }
    }
  }
  return LayerState::SortConnections(*((LayerState **)this + 65), *((LayerState **)this + 66));
}

uint64_t LayerState::GetPropertyInfo(LayerState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  int v4;
  uint64_t result;
  int v6;

  v4 = (int)this;
  result = 0;
  v6 = 8;
  switch(v4)
  {
    case 4120:
      goto LABEL_5;
    case 4121:
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4130:
    case 4131:
    case 4134:
    case 4135:
    case 4136:
    case 4150:
    case 4151:
    case 4152:
    case 4153:
    case 4154:
      v6 = 4;
      goto LABEL_5;
    case 4128:
    case 4129:
    case 4155:
      v6 = 2;
      goto LABEL_5;
    case 4133:
      v6 = 72;
LABEL_5:
      *a2 = v6;
      *(_BYTE *)a3 = 1;
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t LayerState::AddZoneFromRegion(LayerState *this, const DlsRegion *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t FrameLength;
  int v8;
  float v9;
  int v10;
  float v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v6 = operator new();
  ZoneState::ZoneState((ZoneState *)v6, (*((_QWORD *)this + 57) - *((_QWORD *)this + 56)) >> 3, this, a3);
  ZoneState::SetRootKey((_BYTE *)v6, *((unsigned __int8 *)a2 + 128));
  ZoneState::SetKeyRange((ZoneState *)v6, *((unsigned __int8 *)a2 + 112), *((unsigned __int8 *)a2 + 114));
  ZoneState::SetVelRange((ZoneState *)v6, *((unsigned __int8 *)a2 + 116), *((unsigned __int8 *)a2 + 118));
  if (*((_DWORD *)a2 + 37))
  {
    ZoneState::SetLoopEnabled((ZoneState *)v6, 1);
    ZoneState::SetLoopEnd((ZoneState *)v6, (*((_DWORD *)a2 + 37) + *((_DWORD *)a2 + 36)) - 1);
    ZoneState::SetLoopStart((ZoneState *)v6, *((unsigned int *)a2 + 36));
    ZoneState::SetLoopType((ZoneState *)v6, 71);
  }
  else
  {
    FrameLength = DlsRegion::GetFrameLength(a2);
    ZoneState::SetLoopEnd((ZoneState *)v6, FrameLength - 1);
    ZoneState::SetLoopStart((ZoneState *)v6, 0);
    ZoneState::SetLoopEnabled((ZoneState *)v6, 0);
  }
  if (*((_BYTE *)a2 + 122))
    ZoneState::SetKeyGroup((ZoneState *)v6, *((unsigned __int8 *)a2 + 122) | 0x10000000);
  if (*((_DWORD *)a2 + 35) == 1)
    v8 = 51;
  else
    v8 = 50;
  ZoneState::SetLoopingMode((ZoneState *)v6, v8);
  v9 = (float)*((__int16 *)a2 + 65);
  v10 = (int)(float)(v9 / 100.0);
  ZoneState::SetFineTuning((float *)v6, v9 - (float)((float)v10 * 100.0));
  ZoneState::SetCoarseTuning((_DWORD *)v6, v10);
  v11 = (double)*((int *)a2 + 33) * 0.00000152587891;
  ZoneState::SetGain((float *)v6, v11);
  v13 = (uint64_t *)*((_QWORD *)this + 57);
  v12 = *((_QWORD *)this + 58);
  if ((unint64_t)v13 >= v12)
  {
    v15 = *((_QWORD *)this + 56);
    v16 = ((uint64_t)v13 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v17 = v12 - v15;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v19);
    else
      v20 = 0;
    v21 = (uint64_t *)(v19 + 8 * v16);
    v22 = v19 + 8 * v20;
    *v21 = v6;
    v14 = v21 + 1;
    v24 = (char *)*((_QWORD *)this + 56);
    v23 = (char *)*((_QWORD *)this + 57);
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)*((_QWORD *)this + 56);
    }
    *((_QWORD *)this + 56) = v21;
    *((_QWORD *)this + 57) = v14;
    *((_QWORD *)this + 58) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v13 = v6;
    v14 = v13 + 1;
  }
  *((_QWORD *)this + 57) = v14;
  ++*(_DWORD *)(v6 + 8);
  if (*(unsigned __int8 *)(v6 + 184) >= *((unsigned __int8 *)this + 88))
    v26 = *((unsigned __int8 *)this + 88);
  else
    v26 = *(unsigned __int8 *)(v6 + 184);
  if (*((unsigned __int8 *)this + 89) <= *(unsigned __int8 *)(v6 + 185))
    v27 = *(unsigned __int8 *)(v6 + 185);
  else
    v27 = *((unsigned __int8 *)this + 89);
  LayerState::SetKeyRange(this, v26, v27);
  if (*(unsigned __int8 *)(v6 + 186) >= *((unsigned __int8 *)this + 90))
    v28 = *((unsigned __int8 *)this + 90);
  else
    v28 = *(unsigned __int8 *)(v6 + 186);
  if (*((unsigned __int8 *)this + 91) <= *(unsigned __int8 *)(v6 + 187))
    v29 = *(unsigned __int8 *)(v6 + 187);
  else
    v29 = *((unsigned __int8 *)this + 91);
  return LayerState::SetVelRange(this, v28, v29);
}

void sub_210A9CBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40A72B6B85);
  _Unwind_Resume(a1);
}

void LayerState::SetSelectionLayerIndex(LayerState *this, unsigned int a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (a2 == -1)
  {
    v3 = -1;
  }
  else
  {
    CHECK_RANGE<unsigned int>(&v5, 0, 0xFFFu, (uint64_t)"Invalid selection layer index");
    v3 = v5;
  }
  if (v3 != *((_DWORD *)this + 29))
  {
    *((_DWORD *)this + 29) = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(LayerState *))this)(this);
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2187;
      v10 = 1024;
      v11 = v4;
      v12 = 1024;
      v13 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionLayerIndex: Layer %u index %u", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4156, 0);
  }
}

void LayerState::SetSelectionKeyNum(LayerState *this, unsigned int a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"Invalid selection key number");
  v3 = v5;
  if (v5 != *((unsigned __int8 *)this + 130))
  {
    *((_BYTE *)this + 130) = v5;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = (**(uint64_t (***)(LayerState *))this)(this);
      *(_DWORD *)buf = 136315906;
      v7 = "LayerState.cpp";
      v8 = 1024;
      v9 = 2200;
      v10 = 1024;
      v11 = v4;
      v12 = 1024;
      v13 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::SetSelectionKeyNum: Layer %u key %d", buf, 0x1Eu);
    }
    (*(void (**)(LayerState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4157, 0);
  }
}

uint64_t GlobalState::ResetToDefaults(uint64_t this, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  *(_QWORD *)(this + 168) = 1;
  *(_QWORD *)(this + 188) = 0;
  *(_QWORD *)(this + 180) = 0;
  *(_QWORD *)(this + 196) = 64;
  *(_DWORD *)(this + 204) = 1;
  if (a2)
  {
    v2 = *(uint64_t **)(this + 88);
    v3 = *(uint64_t **)(this + 96);
    while (v2 != v3)
    {
      v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(v4, 1);
    }
  }
  return this;
}

uint64_t GlobalState::GetProperty(GlobalState *this, int a2, _DWORD *a3)
{
  uint64_t v4;
  const __CFString *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  char **v13;
  float v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  char *v20;
  BOOL v21;
  CAXException *v22;
  char *v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  BOOL v27;
  char **v28;
  float v29;
  uint64_t result;
  unsigned int v31;
  char *v32;
  char *v33;
  unsigned int v34;
  BOOL v35;
  char **v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int (***v43)(_QWORD);
  NSObject *v44;
  const char *v45;
  float32x2_t v46;
  float *v47;
  unsigned int (**v48)(_QWORD);
  unsigned int (**v49)(_QWORD);
  _DWORD *v50;
  const void *v51;
  CAXException *exception;
  CAXException *v53;
  CAXException *v54;
  float32x2_t v55;
  float32x2_t v56;
  uint8_t v57[16];
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint8_t *v63;
  __int16 v64;
  const char *v65;
  uint64_t v66;

  v4 = 0;
  v66 = *MEMORY[0x24BDAC8D0];
  if (a2 > 4108)
  {
    switch(a2)
    {
      case 4122:
        v15 = *((_DWORD *)this + 50);
        if (v15 == -1)
          v15 = 0;
        goto LABEL_59;
      case 4123:
        v15 = *((_DWORD *)this + 46);
        goto LABEL_59;
      case 4124:
        v29 = *((float *)this + 47);
        goto LABEL_57;
      case 4125:
        v29 = *((float *)this + 45);
        goto LABEL_57;
      case 4126:
        v29 = *((float *)this + 48) * 200.0;
LABEL_57:
        *(float *)a3 = v29;
        return 1;
      case 4127:
      case 4128:
      case 4129:
      case 4130:
        return v4;
      case 4131:
        v15 = *((_DWORD *)this + 49);
        goto LABEL_59;
      default:
        if (a2 == 4109)
        {
          a3[1] = 0;
          *((_QWORD *)a3 + 1) = 0x3F80000000000000;
          *((_QWORD *)a3 + 2) = 0;
          v31 = *a3;
          v32 = (char *)*((_QWORD *)this + 16);
          if (!v32)
            goto LABEL_105;
          v33 = (char *)this + 128;
          do
          {
            v34 = *((_DWORD *)v32 + 8);
            v35 = v34 >= v31;
            if (v34 >= v31)
              v36 = (char **)v32;
            else
              v36 = (char **)(v32 + 8);
            if (v35)
              v33 = v32;
            v32 = *v36;
          }
          while (*v36);
          if (v33 == (char *)this + 128 || *((_DWORD *)v33 + 8) > v31)
          {
LABEL_105:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v59 = "GlobalState.cpp";
              v60 = 1024;
              v61 = 279;
              v62 = 1024;
              LODWORD(v63) = v31;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d GetProperty: no mapping for parameter %u found", buf, 0x18u);
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              v59 = "GlobalState.cpp";
              v60 = 1024;
              v61 = 280;
              v62 = 2080;
              v63 = v57;
              v64 = 2080;
              v65 = "GlobalState::GetProperty: parameter is not mapped";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "GlobalState::GetProperty: parameter is not mapped", -10851);
          }
          v37 = (uint64_t *)*((_QWORD *)this + 11);
          if (*((uint64_t **)this + 12) == v37)
            std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
          v38 = *v37;
          v39 = *(_QWORD **)(v38 + 232);
          v40 = *(_QWORD **)(v38 + 240);
          if (v39 == v40)
          {
LABEL_78:
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              return 1;
            *(_DWORD *)buf = 136315394;
            v59 = "GlobalState.cpp";
            v60 = 1024;
            v61 = 263;
            v44 = MEMORY[0x24BDACB70];
            v45 = "%25s:%-5d GetProperty: Invalid map destination property";
          }
          else
          {
            v41 = *((_DWORD *)v33 + 10);
            v42 = *(_QWORD *)(v33 + 44);
            while (1)
            {
              v43 = (unsigned int (***)(_QWORD))*v39;
              if ((**(unsigned int (***)(_QWORD))*v39)(*v39) == ((v41 >> 8) & 0xFFF))
                break;
              if (++v39 == v40)
                goto LABEL_78;
            }
            v48 = v43[65];
            v49 = v43[66];
            if (v48 != v49)
            {
              while (1)
              {
                v50 = *v48;
                if (*((_DWORD *)*v48 + 23) == *a3)
                  break;
                if (++v48 == v49)
                  goto LABEL_86;
              }
              a3[1] = v41;
              *((_QWORD *)a3 + 1) = v42;
              v51 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v50 + 80))(v50);
              *((_QWORD *)a3 + 2) = v51;
              if (v51)
                CFRetain(v51);
              return 1;
            }
LABEL_86:
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
              return 1;
            *(_DWORD *)buf = 136315394;
            v59 = "GlobalState.cpp";
            v60 = 1024;
            v61 = 266;
            v44 = MEMORY[0x24BDACB70];
            v45 = "%25s:%-5d GetProperty: Did not find connection state associated with mapped parameter";
          }
          _os_log_impl(&dword_210A23000, v44, OS_LOG_TYPE_DEFAULT, v45, buf, 0x12u);
          return 1;
        }
        if (a2 != 4113)
          return v4;
        if ((ParameterMapManager::GetConnectionInfo((uint64_t)a3) & 1) == 0)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            v59 = "GlobalState.cpp";
            v60 = 1024;
            v61 = 288;
            v62 = 2080;
            v63 = v57;
            v64 = 2080;
            v65 = "GlobalState::GetProperty: bad connection IDs";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v22 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v22, "GlobalState::GetProperty: bad connection IDs", -10851);
        }
        return result;
    }
    return 1;
  }
  if (a2 > 4102)
  {
    if (a2 == 4103)
    {
      v15 = *((_DWORD *)this + 51);
LABEL_59:
      *a3 = v15;
      return 1;
    }
    if (a2 == 4106)
    {
      v16 = (char *)*((_QWORD *)this + 15);
      v17 = (char *)this + 128;
      if (v16 != (char *)this + 128)
      {
        v18 = 0;
        do
        {
          a3[v18] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 7) + 72))(*((_QWORD *)v16 + 7));
          v19 = (char *)*((_QWORD *)v16 + 1);
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = *(char **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (char *)*((_QWORD *)v16 + 2);
              v21 = *(_QWORD *)v20 == (_QWORD)v16;
              v16 = v20;
            }
            while (!v21);
          }
          ++v18;
          v16 = v20;
        }
        while (v20 != v17);
      }
      return 1;
    }
  }
  else
  {
    if (a2 == 33)
    {
      v23 = (char *)*((_QWORD *)this + 16);
      if (v23)
      {
        v24 = *a3;
        v25 = (char *)this + 128;
        do
        {
          v26 = *((_DWORD *)v23 + 8);
          v27 = v26 >= v24;
          if (v26 >= v24)
            v28 = (char **)v23;
          else
            v28 = (char **)(v23 + 8);
          if (v27)
            v25 = v23;
          v23 = *v28;
        }
        while (*v28);
        if (v25 != (char *)this + 128 && *((_DWORD *)v25 + 8) <= v24)
        {
          v46 = *(float32x2_t *)(v25 + 44);
          *(_DWORD *)buf = 0;
          v47 = (float *)*((_QWORD *)a3 + 1);
          if (!v47)
          {
            v56 = v46;
            GlobalState::GetPerformanceParameter(this, v24, (float *)buf);
            v47 = (float *)buf;
            v46 = v56;
          }
          snprintf(GlobalState::GetProperty(unsigned int,void *)const::str, 0x20uLL, "%2.1f", vmlas_n_f32(v46.f32[0], *v47, vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), v46).f32[0]));
          *((_QWORD *)a3 + 2) = CFStringCreateWithCString(0, GlobalState::GetProperty(unsigned int,void *)const::str, 0x600u);
          return 1;
        }
      }
      return 0;
    }
    if (a2 == 38)
    {
      v5 = (const __CFString *)*((_QWORD *)a3 + 1);
      if (!v5)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v59 = "GlobalState.cpp";
          v60 = 1024;
          v61 = 203;
          v62 = 2080;
          v63 = v57;
          v64 = 2080;
          v65 = "GlobalState::GetProperty: Null name string";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v53 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v53, "GlobalState::GetProperty: Null name string", -10851);
      }
      v8 = (char *)*((_QWORD *)this + 16);
      v6 = (char *)this + 128;
      v7 = v8;
      if (v8)
      {
        v9 = *a3;
        v10 = v6;
        do
        {
          v11 = *((_DWORD *)v7 + 8);
          v12 = v11 >= v9;
          if (v11 >= v9)
            v13 = (char **)v7;
          else
            v13 = (char **)(v7 + 8);
          if (v12)
            v10 = v7;
          v7 = *v13;
        }
        while (*v13);
        if (v10 != v6 && *((_DWORD *)v10 + 8) <= v9)
        {
          v55 = *(float32x2_t *)(v10 + 44);
          if (!CFStringGetCString(v5, GlobalState::GetProperty(unsigned int,void *)const::str, 32, 0x600u))
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v57, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              v59 = "GlobalState.cpp";
              v60 = 1024;
              v61 = 209;
              v62 = 2080;
              v63 = v57;
              v64 = 2080;
              v65 = "GlobalState::GetProperty: Unable to read name string";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v54 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v54, "GlobalState::GetProperty: Unable to read name string", -10851);
          }
          v14 = (atof(GlobalState::GetProperty(unsigned int,void *)const::str) - v55.f32[0])
              / vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v55).f32[0];
          *((float *)a3 + 4) = v14;
          return 1;
        }
      }
      return 0;
    }
  }
  return v4;
}

void sub_210A9D6C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t GlobalState::SetProperty(GlobalState *this, signed int a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  unsigned int (***v14)(_QWORD);
  CAXException *v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;
  _BOOL4 v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  _BOOL4 v38;
  char *v39;
  unsigned int v40;
  float *v41;
  float v42;
  float v43;
  unsigned int v44;
  BOOL v45;
  char **v46;
  BOOL v47;
  float v48;
  float v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  unsigned int v55;
  int v56;
  double v57;
  double v58;
  const char *v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  CAXException *exception;
  NSObject *v66;
  _DWORD *v67;
  CAXException *v68;
  CAXException *v69;
  CAXException *v70;
  CAXException *v71;
  _BYTE v72[16];
  uint8_t buf[4];
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  _BYTE v78[24];
  __int16 v79;
  double v80;
  __int16 v81;
  const char *v82;
  __int16 v83;
  int v84;
  int v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  float v89;
  float v90;
  int v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v88, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      v74 = "GlobalState.cpp";
      v75 = 1024;
      v76 = 301;
      v77 = 2080;
      *(_QWORD *)v78 = &v88;
      *(_WORD *)&v78[8] = 2080;
      *(_QWORD *)&v78[10] = "GlobalState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "GlobalState::SetProperty: NULL property value", -10851);
  }
  v7 = 0;
  if (a2 <= 4130)
  {
    switch(a2)
    {
      case 4103:
        v8 = *a3;
        if (*((_DWORD *)this + 51) != *a3)
        {
          if (v8 >= 2)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v88, 0xFFFFD59D);
              *(float *)buf = 4.8153e-34;
              v74 = "GlobalState.cpp";
              v75 = 1024;
              v76 = 594;
              v77 = 2080;
              *(_QWORD *)v78 = &v88;
              *(_WORD *)&v78[8] = 2080;
              *(_QWORD *)&v78[10] = "GlobalState::SetMIDIMode:  invalid mode";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v71 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v71, "GlobalState::SetMIDIMode:  invalid mode", -10851);
          }
          *((_DWORD *)this + 51) = v8;
          (*(void (**)(GlobalState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4103, 0);
        }
        return 1;
      case 4104:
      case 4105:
      case 4110:
      case 4111:
      case 4112:
      case 4113:
      case 4114:
      case 4115:
      case 4116:
      case 4117:
      case 4118:
      case 4119:
      case 4120:
      case 4121:
        return v7;
      case 4106:
      case 4109:
        v66 = CADefaultLog();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v88, a2);
          *(float *)buf = 4.8153e-34;
          v74 = "GlobalState.cpp";
          v75 = 1024;
          v76 = 337;
          v77 = 1024;
          *(_DWORD *)v78 = -10865;
          *(_WORD *)&v78[4] = 2080;
          *(_QWORD *)&v78[6] = &v88;
          _os_log_impl(&dword_210A23000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (%d): \"property %s not writable\"", buf, 0x22u);
        }
        v67 = __cxa_allocate_exception(0x10uLL);
        *(_QWORD *)v67 = MEMORY[0x24BED33E0] + 40;
        v67[2] = -10865;
      case 4107:
        if (a4 <= 0x17)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v88, 0xFFFFD581);
            *(float *)buf = 4.8153e-34;
            v74 = "GlobalState.cpp";
            v75 = 1024;
            v76 = 329;
            v77 = 2080;
            *(_QWORD *)v78 = &v88;
            *(_WORD *)&v78[8] = 2080;
            *(_QWORD *)&v78[10] = "GlobalState::SetProperty: Invalid mapping data size";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v68 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v68, "GlobalState::SetProperty: Invalid mapping data size", -10879);
        }
        v9 = (uint64_t *)*((_QWORD *)this + 11);
        if (*((uint64_t **)this + 12) == v9)
          std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
        v10 = *v9;
        v11 = *(_QWORD **)(*v9 + 232);
        v12 = *(_QWORD **)(*v9 + 240);
        if (v11 == v12)
          goto LABEL_19;
        v13 = (a3[1] >> 8) & 0xFFF;
        while (1)
        {
          v14 = (unsigned int (***)(_QWORD))*v11;
          if ((**(unsigned int (***)(_QWORD))*v11)(*v11) == v13)
            break;
          if (++v11 == v12)
          {
LABEL_19:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)&v88, 0xFFFFD581);
              *(float *)buf = 4.8153e-34;
              v74 = "GlobalState.cpp";
              v75 = 1024;
              v76 = 618;
              v77 = 2080;
              *(_QWORD *)v78 = &v88;
              *(_WORD *)&v78[8] = 2080;
              *(_QWORD *)&v78[10] = "GlobalState::AddParameterMapping: Invalid map target layer";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v15 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v15, "GlobalState::AddParameterMapping: Invalid map target layer", -10879);
          }
        }
        v17 = *((float *)a3 + 2);
        v16 = *((float *)a3 + 3);
        v18 = -v16;
        v19 = v17 != 0.0;
        if (v16 >= v17)
          v19 = 0;
        if (v17 == v18 || v19)
          v21 = v19;
        else
          v21 = v16 == 0.0;
        if (v17 >= 0.0 && v16 >= 0.0)
        {
          if (v16 >= v17)
            v22 = *((float *)a3 + 2);
          else
            v22 = *((float *)a3 + 3);
          v23 = v17 < v16;
          goto LABEL_48;
        }
        if (v17 < 0.0 && v16 < 0.0)
        {
          v23 = v16 < v17;
          if (v16 <= v17)
            v22 = *((float *)a3 + 2);
          else
            v22 = *((float *)a3 + 3);
LABEL_48:
          if (v23)
            v24 = *((float *)a3 + 3);
          else
            v24 = *((float *)a3 + 2);
          goto LABEL_68;
        }
        if (v17 < v18)
          v25 = *((float *)a3 + 2);
        else
          v25 = *((float *)a3 + 3);
        if (v17 >= v18)
          v26 = *((float *)a3 + 2);
        else
          v26 = *((float *)a3 + 3);
        if (v16 < (float)-v17)
          v27 = *((float *)a3 + 3);
        else
          v27 = *((float *)a3 + 2);
        if (v16 < (float)-v17)
          v16 = *((float *)a3 + 2);
        if (v17 < 0.0)
          v22 = v27;
        else
          v22 = v25;
        if (v17 < 0.0)
          v24 = v16;
        else
          v24 = v26;
LABEL_68:
        v88 = *(_QWORD *)a3;
        v89 = v22;
        v90 = v24;
        v91 = 1;
        v92 = v21;
        v93 = 0;
        v94 = 0;
        v95 = 1065353216;
        if (!LayerState::VerifyConnection((uint64_t)v14, (int *)&v88))
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&v85, 0xFFFFD581);
            *(float *)buf = 4.8153e-34;
            v74 = "GlobalState.cpp";
            v75 = 1024;
            v76 = 633;
            v77 = 2080;
            *(_QWORD *)v78 = &v85;
            *(_WORD *)&v78[8] = 2080;
            *(_QWORD *)&v78[10] = "GlobalState::AddParameterMapping: Invalid map connection";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v69 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v69, "GlobalState::AddParameterMapping: Invalid map connection", -10879);
        }
        v28 = *(_QWORD *)(v10 + 232);
        v29 = *(_QWORD *)(v10 + 240) - v28;
        if ((v29 & 0x7FFFFFFF8) != 0)
        {
          v30 = 0;
          if (((v29 >> 3) & 0xFFFFFFFE) != 0)
            v31 = (v29 >> 3);
          else
            v31 = 1;
LABEL_73:
          v32 = *(_QWORD *)(v28 + 8 * v30);
          v33 = *(uint64_t **)(v32 + 520);
          v34 = *(uint64_t **)(v32 + 528);
          while (1)
          {
            if (v33 == v34)
            {
              if (++v30 != v31)
                goto LABEL_73;
              goto LABEL_117;
            }
            v35 = *v33;
            if (*(_DWORD *)(*v33 + 92) == *a3)
              break;
            ++v33;
          }
          v36 = a3[1];
          v37 = *(_DWORD *)(v35 + 96);
          v38 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
          if (v36 == v37)
          {
            if (v38)
            {
              *(float *)buf = 4.8151e-34;
              v74 = "GlobalState.cpp";
              v75 = 1024;
              v76 = 651;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modifying existing mapping -- editing current connection", buf, 0x12u);
            }
            v39 = (char *)*((_QWORD *)this + 16);
            if (v39)
            {
              v40 = *a3;
              v41 = (float *)((char *)this + 128);
              v42 = *((float *)a3 + 2);
              v43 = *((float *)a3 + 3);
              do
              {
                v44 = *((_DWORD *)v39 + 8);
                v45 = v44 >= v40;
                if (v44 >= v40)
                  v46 = (char **)v39;
                else
                  v46 = (char **)(v39 + 8);
                if (v45)
                  v41 = (float *)v39;
                v39 = *v46;
              }
              while (*v46);
              if (v41 != (float *)((char *)this + 128) && *((_DWORD *)v41 + 8) <= v40)
              {
                v41[11] = v42;
                v41[12] = v43;
                v47 = v42 != 0.0 && v43 == 0.0;
                v48 = 1.0;
                if (!v47)
                  v48 = 0.0;
                if (v43 != (float)-v42 || v43 == 0.0)
                  v50 = v48;
                else
                  v50 = 0.5;
                *(float *)(*((_QWORD *)v41 + 7) + 164) = v50;
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                {
                  *(float *)buf = 4.8155e-34;
                  v74 = "ParameterMapManager.cpp";
                  v75 = 1024;
                  v76 = 83;
                  v77 = 1024;
                  *(_DWORD *)v78 = v40;
                  *(_WORD *)&v78[4] = 2048;
                  *(double *)&v78[6] = v42;
                  *(_WORD *)&v78[14] = 2048;
                  *(double *)&v78[16] = v43;
                  v79 = 2048;
                  v80 = v50;
                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ParameterMapManager::SetMappingRange(id %u, min %f, max %f): connection default value set to %f", buf, 0x36u);
                }
              }
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              *(float *)buf = 4.8154e-34;
              v74 = "GlobalState.cpp";
              v75 = 1024;
              v76 = 655;
              v77 = 2048;
              *(double *)v78 = v22;
              *(_WORD *)&v78[8] = 2048;
              *(double *)&v78[10] = v24;
              *(_WORD *)&v78[18] = 1024;
              *(_DWORD *)&v78[20] = v21;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: set connection min: %f max: %f inverse: %d", buf, 0x2Cu);
            }
            ConnectionState::SetMinValue((float *)v35, v22);
            ConnectionState::SetMaxValue((float *)v35, v24);
            ConnectionState::SetInverse((_BYTE *)v35, v21);
            v51 = *((_QWORD *)a3 + 2);
            if (v51)
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 72))(v35, v51, 1);
            (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4, 1);
            (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4106, 1);
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              v52 = *((float *)a3 + 2);
              v53 = *((float *)a3 + 3);
              *(double *)&v54 = COERCE_DOUBLE("");
              v55 = *a3;
              v56 = a3[1];
              if (v21)
                *(double *)&v54 = COERCE_DOUBLE("inverted");
              *(float *)buf = 4.8156e-34;
              v74 = "GlobalState.cpp";
              v75 = 1024;
              v76 = 667;
              v77 = 1024;
              *(_DWORD *)v78 = v55;
              *(_WORD *)&v78[4] = 2048;
              *(double *)&v78[6] = v52;
              *(_WORD *)&v78[14] = 2048;
              *(double *)&v78[16] = v53;
              v79 = 2080;
              v80 = *(double *)&v54;
              v81 = 1024;
              LODWORD(v82) = v56;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modified: param %u ==> ([%f - %f] %s) ==> prop 0x%x", buf, 0x3Cu);
            }
            return 1;
          }
          if (v38)
          {
            *(float *)buf = 4.8151e-34;
            v74 = "GlobalState.cpp";
            v75 = 1024;
            v76 = 646;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: modifying existing mapping -- but destination changing", buf, 0x12u);
          }
          GlobalState::RemoveParameterMapping(this, *a3, 0);
        }
LABEL_117:
        if (v17 == v18)
          v22 = 0.0;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v57 = *((float *)a3 + 2);
          v58 = *((float *)a3 + 3);
          v59 = "";
          v60 = *a3;
          v61 = a3[1];
          if (v21)
            v59 = "inverted";
          *(float *)buf = 4.8158e-34;
          v74 = "GlobalState.cpp";
          v75 = 1024;
          v76 = 678;
          v77 = 1024;
          *(_DWORD *)v78 = v60;
          *(_WORD *)&v78[4] = 2048;
          *(double *)&v78[6] = v57;
          *(_WORD *)&v78[14] = 2048;
          *(double *)&v78[16] = v58;
          v79 = 2048;
          v80 = v22;
          v81 = 2080;
          v82 = v59;
          v83 = 1024;
          v84 = v61;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::AddParameterMapping: adding: param %u ==> ([%f - %f] default: %f %s) ==> prop 0x%x", buf, 0x46u);
        }
        v85 = a3[1];
        v86 = *((_QWORD *)a3 + 1);
        v87 = v22;
        if ((LayerState::VerifyConnection((uint64_t)v14, (int *)&v88) & 1) == 0)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v72, 0xFFFFD581);
            *(float *)buf = 4.8153e-34;
            v74 = "GlobalState.cpp";
            v75 = 1024;
            v76 = 681;
            v77 = 2080;
            *(_QWORD *)v78 = v72;
            *(_WORD *)&v78[8] = 2080;
            *(_QWORD *)&v78[10] = "GlobalState::AddParameterMapping: Invalid map connection";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v70 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v70, "GlobalState::AddParameterMapping: Invalid map connection", -10879);
        }
        if (ParameterMapManager::AddMapping((uint64_t **)this + 15, *a3, (float *)&v85))
        {
          v62 = LayerState::AddConnection((uint64_t)v14, (int *)&v88, 0);
          v63 = *((_QWORD *)a3 + 2);
          if (v63)
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62 + 72))(v62, v63, 1);
          (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 3, 1);
          (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4106, 1);
        }
        break;
      case 4108:
        v7 = 1;
        GlobalState::RemoveParameterMapping(this, *a3, 1);
        return v7;
      case 4122:
        GlobalState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        GlobalState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        GlobalState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        *(float *)buf = *(float *)a3;
        if (*((float *)this + 45) != *(float *)buf)
        {
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid volume", -96.0, 12.0);
          *((float *)this + 45) = *(float *)buf;
          (*(void (**)(GlobalState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4125, 0);
        }
        return 1;
      case 4126:
        GlobalState::SetPan((float *)this, *(float *)a3 * 0.005);
        return 1;
      default:
        if (a2 != 2)
          return v7;
        (*(void (**)(GlobalState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 2, 0);
        return 1;
    }
    return 1;
  }
  if (a2 == 4131)
  {
    GlobalState::SetVoiceCount(this, *a3);
    return 1;
  }
  if (a2 == 4135)
  {
    (*(void (**)(GlobalState *, BOOL))(*(_QWORD *)this + 8))(this, *a3 != 0);
    return 1;
  }
  return v7;
}

void sub_210A9E4E0(void *a1, int a2)
{
  unsigned int *v2;
  ParameterMapManager *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    ParameterMapManager::RemoveMapping(v3, *v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x210A9E540);
}

void sub_210A9E504()
{
  __cxa_end_catch();
  JUMPOUT(0x210A9E540);
}

void sub_210A9E510(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x210A9E540);
}

void sub_210A9E52C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int (***GlobalState::FindState(GlobalState *this, int a2, int a3))(_QWORD)
{
  unsigned int (***v3)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int i;

  if (a3)
    return 0;
  v6 = *((_QWORD *)this + 11);
  v7 = *((_QWORD *)this + 12);
  if (v7 == v6)
    return 0;
  v9 = 0;
  for (i = 1; ; ++i)
  {
    if (v9 >= (v7 - v6) >> 3)
      std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
    v3 = *(unsigned int (****)(_QWORD))(v6 + 8 * v9);
    if ((**v3)(v3) == a2)
      break;
    v9 = i;
    v6 = *((_QWORD *)this + 11);
    v7 = *((_QWORD *)this + 12);
    if (v9 >= (v7 - v6) >> 3)
      return 0;
  }
  return v3;
}

uint64_t GlobalState::Save(GlobalState *this, CACFDictionary *a2)
{
  uint64_t *v4;
  uint64_t v5;
  CFURLRef ***Instance;
  CFURLRef **v7;
  const CFArrayCallBacks *v8;
  NSObject *v9;
  CFURLRef *v10;
  unint64_t v11;
  CFIndex v12;
  uint64_t v13;
  CFStringRef PathComponent;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const __CFAllocator **v20;
  const __CFAllocator *v21;
  SampleManager *v22;
  unint64_t v23;
  uint64_t v24;
  const __CFURL *v25;
  const __CFString *v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  CFURLRef ***v31;
  int v32;
  CFURLRef **v33;
  uint64_t v34;
  const __CFAllocator *v35;
  const __CFString *v36;
  const __CFDictionary *v37;
  NSObject *v39;
  const char *v40;
  CAXException *exception;
  unsigned int v42;
  uint64_t v43;
  int v44;
  CACFDictionary *v45;
  __CFDictionary *Mutable;
  __int16 v47;
  const __CFString *v48;
  CFTypeRef cf;
  __int16 v50;
  CFStringRef theString;
  __int16 v52;
  _BYTE buf[12];
  __int16 v54;
  int v55;
  __int16 v56;
  unint64_t p_theString;
  __int16 v58;
  const char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  CACFDictionary::AddFloat32(a2, CFSTR("AU version"), 1.0);
  CACFDictionary::AddUInt32(a2, CFSTR("output"));
  if (*((_DWORD *)this + 49) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("voice count"));
  CACFDictionary::AddSInt32(a2, CFSTR("coarse tune"));
  CACFDictionary::AddFloat32(a2, CFSTR("fine tune"), *((float *)this + 47));
  CACFDictionary::AddFloat32(a2, CFSTR("pan"), *((float *)this + 48) * 200.0);
  CACFDictionary::AddFloat32(a2, CFSTR("gain"), *((float *)this + 45));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "GlobalState.cpp";
    v54 = 1024;
    v55 = 378;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SaveState: Saving instrument data", buf, 0x12u);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 11);
  if (*((uint64_t **)this + 12) == v4)
    goto LABEL_59;
  v5 = *v4;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v47 = 256;
  v42 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v5 + 40))(v5, &Mutable);
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v50 = 256;
  Instance = (CFURLRef ***)DLSBankManager::GetInstance((DLSBankManager *)cf);
  v44 = ((uint64_t (*)(void))Instance[3][2])();
  v43 = v5;
  v45 = a2;
  v7 = *Instance;
  if (*Instance != Instance[1])
  {
    v8 = (const CFArrayCallBacks *)MEMORY[0x24BDBD690];
    v9 = MEMORY[0x24BDACB70];
    do
    {
      v10 = *v7;
      v11 = (*v7)[7] - (*v7)[6];
      v12 = (v11 >> 2);
      theString = (CFStringRef)CFArrayCreateMutable(0, v12, v8);
      v52 = 256;
      if ((v11 & 0x3FFFFFFFCLL) != 0)
      {
        v13 = 0;
        do
        {
          CACFArray::AppendUInt32((CACFArray *)&theString);
          ++v13;
        }
        while (v12 != v13);
      }
      PathComponent = CFURLCopyLastPathComponent(*v10);
      v48 = PathComponent;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "DLSBankManager.cpp";
        v54 = 1024;
        v55 = 240;
        v56 = 2112;
        p_theString = (unint64_t)PathComponent;
        _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::StoreSampleIDs: adding entry for bank '%@'", buf, 0x1Cu);
        PathComponent = v48;
      }
      CACFDictionary::AddArray((CACFDictionary *)&cf, PathComponent, (const __CFArray *)theString);
      Smart<__CFString const*>::~Smart((const void **)&v48);
      CACFArray::~CACFArray((CACFArray *)&theString);
      ++v7;
    }
    while (v7 != Instance[1]);
  }
  if (v44)
    ((void (*)(CFURLRef ***))Instance[3][3])(Instance + 3);
  if (CACFDictionary::Size((CACFDictionary *)&cf))
    CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, CFSTR("Banks"), (const __CFDictionary *)cf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  CACFDictionary::AddDictionary(a2, CFSTR("Instrument"), Mutable);
  v15 = *(_QWORD **)(v43 + 112);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
    v54 = 1024;
    v55 = 147;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::StoreFileReferences: Saving ext file refs", buf, 0x12u);
  }
  v16 = CFDictionaryCreateMutable(0, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  cf = v16;
  v50 = 257;
  v19 = (_QWORD *)*v15;
  v17 = v15 + 1;
  v18 = v19;
  v20 = (const __CFAllocator **)MEMORY[0x24BDBD240];
  if (v19 != v17)
  {
    v21 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    do
    {
      if (*((_DWORD *)v18 + 8) <= 0xFFFFFFEF)
      {
        v22 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v16);
        v23 = v18[5];
        v24 = SampleManager::SearchForSample(v22, v23);
        if (!v24)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "SampleManager.cpp";
            v54 = 1024;
            v55 = 558;
            v56 = 2048;
            p_theString = v23;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d GetSampleURL: Sample with ID %llu not found", buf, 0x1Cu);
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)&theString, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "SampleManager.cpp";
            v54 = 1024;
            v55 = 559;
            v56 = 2080;
            p_theString = (unint64_t)&theString;
            v58 = 2080;
            v59 = "No sample found for that ID";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "No sample found for that ID", -10851);
        }
        v25 = *(const __CFURL **)(v24 + 32);
        if (!v25)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
            v54 = 1024;
            v55 = 158;
            v39 = MEMORY[0x24BDACB70];
            v40 = "%25s:%-5d  Unable to retrieve sample's URL";
            goto LABEL_58;
          }
LABEL_60:
          __break(1u);
        }
        v26 = CFURLCopyFileSystemPath(v25, kCFURLPOSIXPathStyle);
        theString = v26;
        if (!v26)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            goto LABEL_60;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
          v54 = 1024;
          v55 = 160;
          v39 = MEMORY[0x24BDACB70];
          v40 = "%25s:%-5d  Unable to convert sample URL into string ref";
LABEL_58:
          _os_log_impl(&dword_210A23000, v39, OS_LOG_TYPE_ERROR, v40, buf, 0x12u);
          __break(1u);
LABEL_59:
          std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
        }
        if (!CFStringHasSuffix(v26, CFSTR(".dls"))
          && !CFStringHasSuffix(theString, CFSTR(".sf2"))
          && !CFStringHasSuffix(theString, CFSTR(".DLS"))
          && !CFStringHasSuffix(theString, CFSTR(".SF2")))
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v27 = *((_DWORD *)v18 + 8);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
            v54 = 1024;
            v55 = 167;
            v56 = 2112;
            p_theString = (unint64_t)theString;
            v58 = 1024;
            LODWORD(v59) = v27;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::StoreFileReferences: Adding '%@', ID 0x%x to dictionary", buf, 0x22u);
          }
          *(_QWORD *)buf = CFStringCreateWithFormat(v21, 0, CFSTR("Sample:%u"), *((unsigned int *)v18 + 8));
          CACFDictionary::AddString((CACFDictionary *)&cf, *(const __CFString **)buf, theString);
          Smart<__CFString const*>::~Smart((const void **)buf);
        }
        v16 = Smart<__CFString const*>::~Smart((const void **)&theString);
      }
      v28 = (_QWORD *)v18[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v18[2];
          v30 = *v29 == (_QWORD)v18;
          v18 = v29;
        }
        while (!v30);
      }
      v18 = v29;
    }
    while (v29 != v17);
  }
  v31 = (CFURLRef ***)DLSBankManager::GetInstance((DLSBankManager *)v16);
  v32 = ((uint64_t (*)(CFURLRef ***))v31[3][2])(v31 + 3);
  v33 = *v31;
  if (*v31 != v31[1])
  {
    v34 = 0;
    v35 = *v20;
    while (1)
    {
      v36 = CFURLGetString(**v33);
      if (!v36)
        break;
      *(_QWORD *)buf = CFStringCreateWithFormat(v35, 0, CFSTR("Bank:%u"), v34);
      CACFDictionary::AddString((CACFDictionary *)&cf, *(const __CFString **)buf, v36);
      Smart<__CFString const*>::~Smart((const void **)buf);
      v34 = (v34 + 1);
      if (++v33 == v31[1])
        goto LABEL_44;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "DLSBankManager.cpp";
      v54 = 1024;
      v55 = 252;
      v39 = MEMORY[0x24BDACB70];
      v40 = "%25s:%-5d  Unable to convert bank path into string ref";
      goto LABEL_58;
    }
    goto LABEL_60;
  }
LABEL_44:
  if (v32)
    ((void (*)(CFURLRef ***))v31[3][3])(v31 + 3);
  v37 = (const __CFDictionary *)cf;
  CFRetain(cf);
  CACFDictionary::AddDictionary(v45, CFSTR("file-references"), v37);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v42;
}

void sub_210A9EEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  const void *v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, const void *);
  v20 = va_arg(va3, _QWORD);
  Smart<__CFString const*>::~Smart((const void **)va3);
  Smart<__CFString const*>::~Smart((const void **)va2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t GlobalState::Restore(GlobalState *this, const CACFDictionary *a2)
{
  uint64_t v4;
  unsigned int v6;

  v4 = GlobalState::RestoreWithoutGlobalState(this, a2);
  if (!(_DWORD)v4)
  {
    if (CACFDictionary::GetUInt32(a2, CFSTR("output"), &v6))
      GlobalState::SetOutputScope(this, v6);
    if (CACFDictionary::GetUInt32(a2, CFSTR("voice count"), &v6))
      GlobalState::SetVoiceCount(this, v6);
    if (CACFDictionary::GetSInt32(a2, CFSTR("coarse tune"), (int *)&v6))
      GlobalState::SetCoarseTuning(this, v6);
    if (CACFDictionary::GetFloat32(a2, CFSTR("fine tune"), (float *)&v6))
      GlobalState::SetFineTuning((float *)this, *(float *)&v6);
    if (CACFDictionary::GetFloat32(a2, CFSTR("pan"), (float *)&v6))
      GlobalState::SetPan((float *)this, *(float *)&v6 * 0.005);
  }
  return v4;
}

_DWORD *GlobalState::Disconnect(_DWORD *this)
{
  _DWORD **v1;
  _DWORD **v2;

  v1 = (_DWORD **)*((_QWORD *)this + 11);
  v2 = (_DWORD **)*((_QWORD *)this + 12);
  while (v1 != v2)
  {
    this = *v1;
    if (*v1)
      this = SamplerState::Unref(this);
    ++v1;
  }
  return this;
}

void GlobalState::~GlobalState(GlobalState *this)
{
  GlobalState::~GlobalState(this);
  JUMPOUT(0x212BCDF50);
}

{
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  GlobalState *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24CA8B0F0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v3 = 136315650;
    v4 = "GlobalState.cpp";
    v5 = 1024;
    v6 = 60;
    v7 = 2048;
    v8 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::~GlobalState(%p)", (uint8_t *)&v3, 0x1Cu);
  }
  *((_QWORD *)this + 14) = 0;
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((_QWORD **)this + 19));
  std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(*((_QWORD **)this + 16));
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  SamplerState::~SamplerState(this);
}

_QWORD *GlobalState::Notify(GlobalState *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  ausdk::AUScope *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 > 4121)
  {
    if ((a2 - 4122) >= 5)
    {
      if ((_DWORD)a2 == 4142)
      {
        v9 = (ausdk::AUScope *)(*((_QWORD *)this + 14) + 176);
        v13[0] = &off_24CA96ED8;
        v14 = v13;
        SamplerBase::DoForGroupElements(v9, (uint64_t)v13);
        v10 = v14;
        if (v14 == v13)
        {
          v11 = 4;
          v10 = v13;
        }
        else
        {
          if (!v14)
            return SamplerState::Notify(this, a2, a3);
          v11 = 5;
        }
        (*(void (**)(void))(*v10 + 8 * v11))();
        return SamplerState::Notify(this, a2, a3);
      }
      if ((_DWORD)a2 != 4131)
        return SamplerState::Notify(this, a2, a3);
    }
    goto LABEL_3;
  }
  if (!(_DWORD)a2 || (_DWORD)a2 == 2)
  {
LABEL_3:
    v6 = (uint64_t *)*((_QWORD *)this + 11);
    v7 = (uint64_t *)*((_QWORD *)this + 12);
    while (v6 != v7)
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, a2, a3);
    }
  }
  return SamplerState::Notify(this, a2, a3);
}

void sub_210A9F260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t GlobalState::DoNotify(GlobalState *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 14);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 432))(result);
  return result;
}

uint64_t GlobalState::RestoreWithoutGlobalState(GlobalState *this, const CACFDictionary *a2)
{
  InstrumentManager ***v2;
  GlobalState *v4;
  InstrumentManager **v5;
  unsigned int v6;
  unsigned int v7;
  CAXException *exception;
  int v9;
  uint64_t Count;
  const void **v11;
  const void **v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  const void *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  BOOL v21;
  char **v22;
  CFIndex length;
  const __CFString *v24;
  glob_t *v25;
  const void *v26;
  CFIndex v27;
  const __CFString *v28;
  DLSBankManager *v29;
  const void *v30;
  DLSBankManager *Instance;
  DLSBankManager *v32;
  NSObject *v33;
  const char *v34;
  os_log_type_t v35;
  InstrumentManager *v36;
  int v37;
  unsigned int v38;
  const void **v39;
  uint64_t v40;
  NSObject *v41;
  const void *v42;
  DLSBankManager *CACFArray;
  DLSBankManager *v44;
  CFURLRef *v45;
  uint64_t i;
  unsigned int v47;
  unsigned int v48;
  DlsWave *Wave;
  unsigned int v50;
  unsigned int v51;
  CFURLRef v52;
  unsigned int *v53;
  const __CFURL *v54;
  CFURLRef v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t result;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  NSObject *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float v75;
  float v76;
  int v77;
  float v78;
  int v79;
  InstrumentManager **v80;
  GlobalState *v81;
  GlobalState *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  InstrumentManager *v87;
  __CFString *PathComponent;
  __int16 v89;
  __CFDictionary *v90;
  float v91;
  unsigned int v92;
  CFDictionaryRef theDict;
  __int16 v94;
  char buffer[8];
  float v96;
  float v97;
  _BYTE buf[12];
  __int16 v99;
  int v100;
  __int16 v101;
  _BYTE v102[10];
  _BYTE v103[10];
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v2 = (InstrumentManager ***)*((_QWORD *)this + 11);
  if (*((InstrumentManager ****)this + 12) == v2)
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  v4 = this;
  v5 = *v2;
  v91 = 0.0;
  if (CACFDictionary::GetFloat32(a2, CFSTR("AU version"), &v91))
  {
    v6 = v91;
    v7 = (float)((float)(v91 - (float)v91) * 10.0);
    if (v91 >= 2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "GlobalState.cpp";
        v99 = 1024;
        v100 = 424;
        v101 = 1024;
        *(_DWORD *)v102 = v6;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)&v102[6] = v7;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot parse version %u.%u preset instrument", buf, 0x1Eu);
      }
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)buffer, 0xFFFFD589);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "GlobalState.cpp";
        v99 = 1024;
        v100 = 425;
        v101 = 2080;
        *(_QWORD *)v102 = buffer;
        *(_WORD *)&v102[8] = 2080;
        *(_QWORD *)v103 = "Unsupported instrument version";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Unsupported instrument version", -10871);
    }
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  *((_DWORD *)v4 + 42) = v6;
  *((_DWORD *)v4 + 43) = v7;
  InstrumentManager::ClearFileReferences(v5[14]);
  v87 = v5[14];
  v9 = *((unsigned __int8 *)v4 + 176);
  theDict = 0;
  if (!CACFDictionary::GetDictionary(a2, CFSTR("file-references"), &theDict))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
    v99 = 1024;
    v100 = 86;
    v33 = MEMORY[0x24BDACB70];
    v34 = "%25s:%-5d InstrumentManager::LoadFileReferences: No ext file refs dictionary";
    v35 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_53;
  }
  Count = CFDictionaryGetCount(theDict);
  if (Count)
  {
    v11 = (const void **)operator new[]();
    v12 = (const void **)operator new[]();
    CFDictionaryGetKeysAndValues(theDict, v11, v12);
    v81 = v4;
    v13 = 0;
    v14 = (char *)v87 + 8;
    v15 = MEMORY[0x24BDACB70];
    while (1)
    {
      if (CFStringGetCString((CFStringRef)v11[v13], buffer, 32, 0x8000100u))
      {
        LODWORD(v90) = -1;
        if (sscanf(buffer, "Sample:%u", &v90) == 1)
        {
          v16 = v90;
          if ((_DWORD)v90 != -1)
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              v17 = v12[v13];
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
              v99 = 1024;
              v100 = 101;
              v101 = 2112;
              *(_QWORD *)v102 = v17;
              *(_WORD *)&v102[8] = 1024;
              *(_DWORD *)v103 = v16;
              *(_WORD *)&v103[4] = 1024;
              *(_DWORD *)&v103[6] = v16;
              _os_log_impl(&dword_210A23000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadFileReferences: Reading sample '%@', ID %u (0x%x) from dictionary", buf, 0x28u);
              v16 = v90;
            }
            if ((v16 & 0x10000000) == 0)
            {
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
                v99 = 1024;
                v100 = 105;
                v101 = 1024;
                *(_DWORD *)v102 = v16;
                *(_WORD *)&v102[4] = 1024;
                *(_DWORD *)&v102[6] = v16 | 0x10000000;
                _os_log_impl(&dword_210A23000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadFileReferences: converting old sample ID %u to 0x%x", buf, 0x1Eu);
                v16 = v90;
              }
              v16 |= 0x10000000u;
              LODWORD(v90) = v16;
            }
            v18 = *(char **)v14;
            if (*(_QWORD *)v14)
            {
              v19 = (char *)v87 + 8;
              do
              {
                v20 = *((_DWORD *)v18 + 8);
                v21 = v20 >= v16;
                if (v20 >= v16)
                  v22 = (char **)v18;
                else
                  v22 = (char **)(v18 + 8);
                if (v21)
                  v19 = v18;
                v18 = *v22;
              }
              while (*v22);
              if (v19 != v14 && v16 >= *((_DWORD *)v19 + 8))
              {
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  v30 = v12[v13];
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
                  v99 = 1024;
                  v100 = 118;
                  v101 = 2112;
                  *(_QWORD *)v102 = v30;
                  *(_WORD *)&v102[8] = 1024;
                  *(_DWORD *)v103 = v16;
                  _os_log_impl(&dword_210A23000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d InstrumentManager::LoadFileReferences: Sample '%@' has duplicate ID 0x%x", buf, 0x22u);
                }
                goto LABEL_47;
              }
            }
            length = CFStringFind((CFStringRef)v12[8 * v13], CFSTR("file://"), 1uLL).length;
            v24 = (const __CFString *)v12[v13];
            if (length)
              v25 = (glob_t *)CFURLCreateWithString(0, v24, 0);
            else
              v25 = (glob_t *)CFURLCreateWithFileSystemPath(0, v24, kCFURLPOSIXPathStyle, 0);
            *(_QWORD *)buf = v25;
            InstrumentManager::AddSample(v87, v25, v9 != 0, v90, 0);
            goto LABEL_46;
          }
        }
        if (*(_DWORD *)buffer == 1802395970)
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          {
            v26 = v12[v13];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
            v99 = 1024;
            v100 = 123;
            v101 = 2112;
            *(_QWORD *)v102 = v26;
            _os_log_impl(&dword_210A23000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadFileReferences: Reading bank '%@', from dictionary", buf, 0x1Cu);
          }
          v27 = CFStringFind((CFStringRef)v12[8 * v13], CFSTR("file://"), 1uLL).length;
          v28 = (const __CFString *)v12[v13];
          if (v27)
            v29 = CFURLCreateWithString(0, v28, 0);
          else
            v29 = CFURLCreateWithFileSystemPath(0, v28, kCFURLPOSIXPathStyle, 0);
          *(_QWORD *)buf = v29;
          Instance = (DLSBankManager *)DLSBankManager::GetInstance(v29);
          DLSBankManager::AddBank(Instance, *(CFURLRef *)buf, v9 != 0);
          PathComponent = (__CFString *)CFURLCopyLastPathComponent(*(CFURLRef *)buf);
          v32 = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)PathComponent);
          DLSBankManager::AcquireBank(v32, PathComponent);
          Smart<__CFString const*>::~Smart((const void **)&PathComponent);
LABEL_46:
          Smart<__CFURL const*>::~Smart((const void **)buf);
        }
      }
LABEL_47:
      if (++v13 == Count)
      {
        MEMORY[0x212BCDF2C](v11, 0x60C8044C4A2DFLL);
        MEMORY[0x212BCDF2C](v12, 0x60C8044C4A2DFLL);
        v4 = v81;
        goto LABEL_54;
      }
    }
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
    v99 = 1024;
    v100 = 81;
    v33 = MEMORY[0x24BDACB70];
    v34 = "%25s:%-5d InstrumentManager::LoadFileReferences: No file references in document";
    v35 = OS_LOG_TYPE_DEBUG;
LABEL_53:
    _os_log_impl(&dword_210A23000, v33, v35, v34, buf, 0x12u);
  }
LABEL_54:
  v90 = 0;
  if (CACFDictionary::GetDictionary(a2, CFSTR("Instrument"), &v90))
  {
    PathComponent = (__CFString *)v90;
    v89 = 0;
    v36 = v5[14];
    v37 = *((unsigned __int8 *)v4 + 176);
    *(_QWORD *)buffer = 0;
    LOWORD(v96) = 0;
    CACFDictionary::GetCACFDictionary((CACFDictionary *)&PathComponent, CFSTR("Banks"), (CACFDictionary *)buffer);
    if (*(_QWORD *)buffer)
    {
      v38 = CACFDictionary::Size((CACFDictionary *)buffer);
      v80 = v5;
      v82 = v4;
      v39 = (const void **)operator new[]();
      CACFDictionary::GetKeys((CACFDictionary *)buffer, v39);
      if (v38)
      {
        v40 = 0;
        v41 = MEMORY[0x24BDACB70];
        v83 = v38;
        do
        {
          theDict = 0;
          v94 = 0;
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            v42 = v39[v40];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
            v99 = 1024;
            v100 = 198;
            v101 = 2112;
            *(_QWORD *)v102 = v42;
            _os_log_impl(&dword_210A23000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: found key '%@'", buf, 0x1Cu);
          }
          CACFArray = (DLSBankManager *)CACFDictionary::GetCACFArray((CACFDictionary *)buffer, (const __CFString *)v39[v40], (CACFArray *)&theDict);
          if (theDict)
          {
            v44 = (DLSBankManager *)DLSBankManager::GetInstance(CACFArray);
            v45 = DLSBankManager::AcquireBank(v44, (const __CFString *)v39[v40]);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
              v99 = 1024;
              v100 = 204;
              _os_log_impl(&dword_210A23000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: found matching BankEntry", buf, 0x12u);
            }
            for (i = 0; ; i = (i + 1))
            {
              v47 = theDict;
              if (theDict)
                v47 = CFArrayGetCount(theDict);
              if (i >= v47)
                break;
              v92 = 0;
              CACFArray::GetUInt32((CACFArray *)&theDict, i, &v92);
              v48 = v92 & 0xEFFFFFFF;
              Wave = (DlsWave *)PoolTable::GetWave((CFURLRef)((char *)v45[1] + 80), v92 & 0xEFFFFFFF);
              if (Wave)
              {
                v50 = v92;
                if ((v92 & 0x10000000) == 0)
                {
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
                    v99 = 1024;
                    v100 = 214;
                    v101 = 1024;
                    *(_DWORD *)v102 = v50;
                    *(_WORD *)&v102[4] = 1024;
                    *(_DWORD *)&v102[6] = v50 | 0x10000000;
                    _os_log_impl(&dword_210A23000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: converting bank sample id %u to 0x%x", buf, 0x1Eu);
                    v50 = v92;
                  }
                  v50 |= 0x10000000u;
                  v92 = v50;
                }
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
                  v99 = 1024;
                  v100 = 217;
                  v101 = 1024;
                  *(_DWORD *)v102 = v50;
                  _os_log_impl(&dword_210A23000, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: Adding sample ID 0x%x", buf, 0x18u);
                  v50 = v92;
                }
                InstrumentManager::AddSample(v36, Wave, *v45, v37 != 0, v50);
                v51 = v92;
                v53 = (unsigned int *)v45[7];
                v52 = v45[8];
                if (v53 >= (unsigned int *)v52)
                {
                  v55 = v45[6];
                  v56 = ((char *)v53 - (char *)v55) >> 2;
                  v57 = v56 + 1;
                  if ((unint64_t)(v56 + 1) >> 62)
                    std::vector<void const*>::__throw_length_error[abi:ne180100]();
                  v58 = v52 - v55;
                  if (v58 >> 1 > v57)
                    v57 = v58 >> 1;
                  v21 = (unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL;
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v21)
                    v59 = v57;
                  if (v59)
                  {
                    v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v59);
                    v55 = v45[6];
                    v53 = (unsigned int *)v45[7];
                  }
                  else
                  {
                    v60 = 0;
                  }
                  v61 = (unsigned int *)(v59 + 4 * v56);
                  *v61 = v51;
                  v54 = (const __CFURL *)(v61 + 1);
                  while (v53 != (unsigned int *)v55)
                  {
                    v62 = *--v53;
                    *--v61 = v62;
                  }
                  v45[6] = (CFURLRef)v61;
                  v45[7] = v54;
                  v45[8] = (CFURLRef)(v59 + 4 * v60);
                  if (v55)
                    operator delete(v55);
                }
                else
                {
                  *v53 = v92;
                  v54 = (const __CFURL *)(v53 + 1);
                }
                v45[7] = v54;
              }
              else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
                v99 = 1024;
                v100 = 222;
                v101 = 1024;
                *(_DWORD *)v102 = v48;
                _os_log_impl(&dword_210A23000, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: Unable to find sample in bank with ID %u", buf, 0x18u);
              }
            }
            DLSBankManager::ReleaseBank(v44, (const __CFString *)v39[v40]);
          }
          CACFArray::~CACFArray((CACFArray *)&theDict);
          ++v40;
        }
        while (v40 != v83);
      }
      MEMORY[0x212BCDF2C](v39, 0x60C8044C4A2DFLL);
      v5 = v80;
      v4 = v82;
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
      v99 = 1024;
      v100 = 232;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::LoadBankSampleIDs: no dictionary for banks", buf, 0x12u);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)buffer);
    v84 = (*((uint64_t (**)(InstrumentManager **, __CFString **))*v5 + 6))(v5, &PathComponent);
    if (!v84)
    {
      v64 = (uint64_t *)*((_QWORD *)v4 + 11);
      if (*((uint64_t **)v4 + 12) == v64)
        std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
      v86 = *v64;
      v65 = *(_QWORD *)(v86 + 240) - *(_QWORD *)(v86 + 232);
      if ((v65 & 0x7FFFFFFF8) != 0)
      {
        v66 = 0;
        v67 = (uint64_t **)((char *)v4 + 120);
        v68 = MEMORY[0x24BDACB70];
        v85 = (v65 >> 3);
        while (1)
        {
          v69 = *(_QWORD *)(*(_QWORD *)(v86 + 232) + 8 * v66);
          v70 = *(_QWORD *)(v69 + 528) - *(_QWORD *)(v69 + 520);
          if ((v70 & 0x7FFFFFFF8) != 0)
            break;
LABEL_123:
          if (++v66 == v85)
            goto LABEL_124;
        }
        v71 = 0;
        v72 = (v70 >> 3);
        while (1)
        {
          v73 = *(_QWORD *)(*(_QWORD *)(v69 + 520) + 8 * v71);
          v74 = *(_DWORD *)(v73 + 92);
          if ((v74 & 0xFFFFFFF8) == 0x3E8)
            break;
LABEL_122:
          if (v72 == ++v71)
            goto LABEL_123;
        }
        v76 = *(float *)(v73 + 100);
        v75 = *(float *)(v73 + 104);
        v77 = *(_DWORD *)(v73 + 124);
        if (*(_BYTE *)(v73 + 108))
        {
          if (v76 == (float)-v75)
          {
            if (v77 == 1)
            {
LABEL_110:
              v78 = *(float *)(v73 + 104);
              v75 = *(float *)(v73 + 100);
LABEL_119:
              v79 = *(_DWORD *)(v73 + 96);
              *(_DWORD *)buffer = v79;
              *(float *)&buffer[4] = v78;
              v96 = v75;
              v97 = v76;
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136316674;
                *(_QWORD *)&buf[4] = "GlobalState.cpp";
                v99 = 1024;
                v100 = 535;
                v101 = 1024;
                *(_DWORD *)v102 = v74;
                *(_WORD *)&v102[4] = 1024;
                *(_DWORD *)&v102[6] = v79;
                *(_WORD *)v103 = 2048;
                *(double *)&v103[2] = v78;
                v104 = 2048;
                v105 = v75;
                v106 = 2048;
                v107 = v76;
                _os_log_impl(&dword_210A23000, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::RestoreParameterMappings: Restoring mapped param for ID %u -> prop 0x%x min %f max %f default %f", buf, 0x3Cu);
              }
              ParameterMapManager::AddMapping(v67, v74, (float *)buffer);
              goto LABEL_122;
            }
          }
          else if (v77 != 2)
          {
            goto LABEL_110;
          }
          v78 = *(float *)(v73 + 104);
          v75 = *(float *)(v73 + 100);
LABEL_118:
          v76 = 0.0;
          goto LABEL_119;
        }
        if (v76 == (float)-v75)
        {
          if (v77 == 1)
          {
LABEL_113:
            v78 = *(float *)(v73 + 100);
            goto LABEL_119;
          }
        }
        else if (v77 != 2)
        {
          goto LABEL_113;
        }
        v78 = *(float *)(v73 + 100);
        goto LABEL_118;
      }
    }
LABEL_124:
    CACFDictionary::~CACFDictionary((CACFDictionary *)&PathComponent);
    return v84;
  }
  else
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "GlobalState.cpp";
      v99 = 1024;
      v100 = 451;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::Restore: No instrument dictionary", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

void sub_210AA022C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210AA023C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a29);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a23);
  JUMPOUT(0x210AA0334);
}

void sub_210AA0250(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  uint64_t v33;
  uint64_t v34;

  if (a2)
  {
    Smart<__CFURL const*>::~Smart(&a33);
    __cxa_begin_catch(a1);
    MEMORY[0x212BCDF2C](v33, 0x60C8044C4A2DFLL);
    MEMORY[0x212BCDF2C](v34, 0x60C8044C4A2DFLL);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_210AA02E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_210AA02F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_210AA0304()
{
  JUMPOUT(0x210AA032CLL);
}

void sub_210AA0318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  CACFArray::~CACFArray((CACFArray *)&a27);
  JUMPOUT(0x210AA0324);
}

_DWORD *GlobalState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v4 = a2;
  if (this[50] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 0, 0x10u, (uint64_t)"Invalid output scope");
      v3 = v4;
    }
    v2[50] = v3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4122, 0);
  }
  return this;
}

_DWORD *GlobalState::SetVoiceCount(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[49] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 1u, 0x40u, (uint64_t)"GlobalState::SetVoiceCount: Invalid count");
      v3 = v4;
    }
    v2[49] = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v6 = "GlobalState.cpp";
      v7 = 1024;
      v8 = 607;
      v9 = 1024;
      v10 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SetVoiceCount: count %u", buf, 0x18u);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4131, 0);
  }
  return this;
}

_DWORD *GlobalState::SetCoarseTuning(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = a2;
  if (this[46] != a2)
  {
    v2 = this;
    CHECK_RANGE<int>(&v3, -24, 24, (uint64_t)"Invalid coarse tuning");
    v2[46] = v3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4123, 0);
  }
  return this;
}

float *GlobalState::SetFineTuning(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[47] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"Invalid fine tuning", -99.0, 99.0);
    v2[47] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4124, 0);
  }
  return this;
}

float *GlobalState::SetPan(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[48] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[48] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4126, 0);
  }
  return this;
}

void GlobalState::RemoveParameterMapping(GlobalState *this, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  LayerState **v13;
  LayerState **v14;
  int v15;
  LayerState *v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  _QWORD *i;
  int v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v22 = 136315650;
    v23 = "GlobalState.cpp";
    v24 = 1024;
    v25 = 701;
    v26 = 1024;
    v27 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::RemoveParameterMapping: param %u", (uint8_t *)&v22, 0x18u);
  }
  v6 = *((_QWORD *)this + 16);
  if (!v6)
    goto LABEL_37;
  v7 = (_DWORD *)((char *)this + 128);
  do
  {
    v8 = *(_DWORD *)(v6 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (v9)
      v7 = (_DWORD *)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == (_DWORD *)((char *)this + 128) || v7[8] > a2)
  {
LABEL_37:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v22 = 136315650;
      v23 = "GlobalState.cpp";
      v24 = 1024;
      v25 = 723;
      v26 = 1024;
      v27 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d GlobalState::RemoveParameterMapping: no map found for param id %u", (uint8_t *)&v22, 0x18u);
    }
    return;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 11);
  if (*((uint64_t **)this + 12) == v11)
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  v12 = *v11;
  v13 = *(LayerState ***)(v12 + 232);
  v14 = *(LayerState ***)(v12 + 240);
  if (v13 == v14)
  {
LABEL_22:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    v22 = 136315394;
    v23 = "GlobalState.cpp";
    v24 = 1024;
    v25 = 707;
    v17 = MEMORY[0x24BDACB70];
    v18 = "%25s:%-5d RemoveParameterMapping: Invalid map target property";
    v19 = 18;
  }
  else
  {
    v15 = (v7[10] >> 8) & 0xFFF;
    while (1)
    {
      v16 = *v13;
      if ((**(unsigned int (***)(LayerState *))*v13)(*v13) == v15)
        break;
      if (++v13 == v14)
        goto LABEL_22;
    }
    for (i = (_QWORD *)*((_QWORD *)v16 + 65); i != *((_QWORD **)v16 + 66); ++i)
    {
      if (*(_DWORD *)(*i + 92) == a2)
      {
        v21 = (**(uint64_t (***)(_QWORD))*i)(*i);
        LayerState::RemoveConnection(v16, v21);
        goto LABEL_31;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    v22 = 136315650;
    v23 = "GlobalState.cpp";
    v24 = 1024;
    v25 = 714;
    v26 = 1024;
    v27 = a2;
    v17 = MEMORY[0x24BDACB70];
    v18 = "%25s:%-5d RemoveParameterMapping: no connection found for mapped param id %u";
    v19 = 24;
  }
  _os_log_impl(&dword_210A23000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v22, v19);
LABEL_31:
  if (ParameterMapManager::RemoveMapping((GlobalState *)((char *)this + 120), a2))
  {
    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 3, a3);
    (*(void (**)(GlobalState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4106, a3);
  }
}

void GlobalState::GetPerformanceParameter(GlobalState *this, unsigned int a2, float *a3)
{
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  float v10;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  v5 = (char *)*((_QWORD *)this + 16);
  if (!v5)
    goto LABEL_12;
  v6 = (char *)this + 128;
  do
  {
    v7 = *((_DWORD *)v5 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v5;
    else
      v9 = (char **)(v5 + 8);
    if (v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 128 && *((_DWORD *)v6 + 8) <= a2)
  {
    *a3 = *(float *)(*((_QWORD *)v6 + 7) + 164);
  }
  else
  {
LABEL_12:
    v10 = *((float *)std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 18, a2, &v11)+ 8);
    *a3 = v10;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v13 = "GlobalState.cpp";
      v14 = 1024;
      v15 = 743;
      v16 = 1024;
      v17 = a2;
      v18 = 2048;
      v19 = v10;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::GetPerformanceParameter: param %u value %f", buf, 0x22u);
    }
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

InstrumentState *GlobalState::CreateInstrument(GlobalState *this, int a2)
{
  InstrumentState *v4;
  InstrumentManager *v5;
  unint64_t v6;
  InstrumentState **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  InstrumentState **v15;
  InstrumentState *v16;

  v4 = (InstrumentState *)operator new();
  v5 = (InstrumentManager *)operator new();
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)v5 = (char *)v5 + 8;
  InstrumentState::InstrumentState(v4, a2, this, v5);
  v7 = (InstrumentState **)*((_QWORD *)this + 12);
  v6 = *((_QWORD *)this + 13);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 11);
    v10 = v7 - (InstrumentState **)v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (InstrumentState **)&v14[8 * v10];
    *v15 = v4;
    v8 = v15 + 1;
    if (v7 != v9)
    {
      do
      {
        v16 = *--v7;
        *--v15 = v16;
      }
      while (v7 != v9);
      v7 = (InstrumentState **)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 11) = v15;
    *((_QWORD *)this + 12) = v8;
    *((_QWORD *)this + 13) = &v14[8 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 12) = v8;
  ++*((_DWORD *)v4 + 2);
  return v4;
}

void sub_210AA0CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C4007E2654BLL);
  _Unwind_Resume(a1);
}

const void **GlobalState::LoadInstrumentFromDLSCollection(GlobalState *this, InstrumentState *a2, CFURLRef url, uint64_t a4, unsigned int a5, int a6)
{
  DLSBankManager *Instance;
  CFURLRef *v13;
  _QWORD **v14;
  CFURLRef *v15;
  uint64_t **v16;
  uint64_t Instrument;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t **v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  CFStringRef v49;
  _DWORD **v50;
  _DWORD **v51;
  _DWORD **v52;
  _DWORD **v53;
  _BYTE *v54;
  const char *v55;
  CFStringRef v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  DlsWave *Wave;
  int v64;
  unsigned int v65;
  CFURLRef v66;
  unsigned int *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  CFURLRef v71;
  const __CFURL *v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  BOOL v83;
  BOOL v84;
  _BOOL4 v85;
  BOOL v86;
  BOOL v87;
  _BOOL4 v88;
  int v89;
  BOOL v90;
  uint64_t v92;
  int v93;
  _DWORD **v94;
  _DWORD **v95;
  _DWORD **v96;
  _DWORD **v97;
  _DWORD **v98;
  _DWORD **v99;
  _DWORD **v100;
  _DWORD **v101;
  EnvelopeState *v102;
  unint64_t v103;
  EnvelopeState **v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  EnvelopeState **v112;
  char *v113;
  char *v114;
  EnvelopeState *v115;
  EnvelopeState *v116;
  unint64_t v117;
  EnvelopeState **v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  EnvelopeState **v126;
  char *v127;
  char *v128;
  EnvelopeState *v129;
  SamplerState *v130;
  uint64_t (***v131)(uint64_t, uint64_t);
  LFOState *v132;
  unint64_t v133;
  SamplerState **v134;
  SamplerState *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  SamplerState **v143;
  char *v144;
  char *v145;
  SamplerState *v146;
  LFOState *v147;
  unint64_t v148;
  SamplerState **v149;
  SamplerState *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  SamplerState **v158;
  char *v159;
  char *v160;
  SamplerState *v161;
  uint64_t v162;
  int v163;
  int v164;
  double v165;
  float v166;
  int v167;
  float v168;
  int v169;
  float v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  float v176;
  int v177;
  unsigned int v178;
  float v179;
  int v180;
  unsigned int v181;
  float v182;
  int v183;
  unsigned int v184;
  float v185;
  int v186;
  unsigned int v187;
  float v188;
  int v189;
  unsigned int v190;
  float v191;
  int v192;
  unsigned int v193;
  float v194;
  int v195;
  int v196;
  unsigned int v197;
  float v198;
  int v199;
  int v200;
  int v201;
  float v202;
  int v203;
  int v204;
  int v205;
  float v206;
  int v207;
  int v208;
  unsigned int v209;
  float v210;
  int v211;
  unsigned int v212;
  float v213;
  int v214;
  unsigned int v215;
  float v216;
  int v217;
  int v218;
  int v219;
  float v220;
  int v221;
  int v222;
  int v223;
  float v224;
  int v225;
  int v226;
  int v227;
  float v228;
  int v229;
  unsigned int v230;
  float v231;
  int v232;
  unsigned int v233;
  float v234;
  int v235;
  unsigned int v236;
  float v237;
  int v238;
  int v239;
  float v240;
  int v241;
  unsigned int v242;
  float v243;
  int v244;
  int v245;
  float v246;
  int v247;
  int v248;
  int v249;
  float v250;
  int v251;
  int v252;
  int v253;
  float v254;
  int v255;
  int v256;
  int v257;
  float v258;
  int v259;
  int v260;
  int v261;
  float v262;
  int v263;
  int v264;
  int v265;
  float v266;
  int v267;
  int v268;
  int v269;
  float v270;
  int v271;
  float v272;
  int v273;
  int v274;
  SamplerState *v275;
  unint64_t v276;
  uint64_t *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  LayerState **v289;
  LayerState **v290;
  LayerState *v291;
  const void **result;
  CFURLRef v293;
  uint64_t **v294;
  unint64_t v295;
  uint64_t *v296;
  CAXException *exception;
  CAXException *v298;
  SamplerState *v299;
  unsigned int v300;
  SamplerState *v301;
  CFURLRef *v302;
  unsigned int v303;
  __CFString *PathComponent;
  uint8_t v305[8];
  _WORD v306[2];
  uint8_t buf[4];
  _BYTE v308[36];
  uint64_t v309;
  __int128 v310;
  uint64_t v311;
  uint64_t v312;

  v312 = *MEMORY[0x24BDAC8D0];
  PathComponent = (__CFString *)CFURLCopyLastPathComponent(url);
  Instance = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)PathComponent);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v308 = "GlobalState.cpp";
    *(_WORD *)&v308[8] = 1024;
    *(_DWORD *)&v308[10] = 474;
    *(_WORD *)&v308[14] = 1024;
    *(_DWORD *)&v308[16] = a4;
    *(_WORD *)&v308[20] = 1024;
    *(_DWORD *)&v308[22] = a5;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::LoadInstrumentFromDLSCollection: bank 0x%x, patch %u", buf, 0x1Eu);
  }
  DLSBankManager::AddBank(Instance, url, *((_BYTE *)this + 176));
  v13 = DLSBankManager::AcquireBank(Instance, PathComponent);
  v14 = (_QWORD **)(v13 + 3);
  v15 = (CFURLRef *)std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>((uint64_t)(v13 + 3), a5 | (unint64_t)(a4 << 32));
  v16 = (uint64_t **)(v13 + 4);
  if (v13 + 4 != v15)
  {
    Instrument = (uint64_t)v15[5];
    if (Instrument)
    {
      v18 = *(_QWORD *)(Instrument + 64);
      v19 = *(_QWORD *)(Instrument + 72) - v18;
      v20 = (unint64_t)v19 >> 3;
      if ((int)((unint64_t)v19 >> 3) >= 1)
      {
        v21 = 0;
        v22 = (int)(v19 >> 3);
        do
        {
          v23 = *(_QWORD *)(v18 + 8 * v21);
          if (!*(_QWORD *)(v23 + 504))
          {
            v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 56) + 56) + 96);
            v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 56) + 56) + 104);
            v26 = v25 - v24;
            if (v25 == v24)
              goto LABEL_46;
            v27 = 0;
            v28 = *(_DWORD *)(v23 + 160);
            v29 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
            v30 = 1;
            while (*(_DWORD *)(v24 + 24 * v27 + 16) != v28)
            {
              v27 = v30;
              v31 = v29 > v30++;
              if (!v31)
                goto LABEL_46;
            }
            if (!*(_QWORD *)(v24 + 24 * v27))
            {
LABEL_46:
              DlsInstrument::ReferenceInstrument(Instrument);
              goto LABEL_48;
            }
          }
          ++v21;
        }
        while (v21 < v22);
        if ((int)v20 >= 1)
        {
          v32 = 0;
          if (v22 <= 1)
            v22 = 1;
          do
          {
            v33 = *(_QWORD *)(v18 + 8 * v32);
            if (!*(_QWORD *)(v33 + 472))
            {
              v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 56) + 56) + 96);
              v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 56) + 56) + 104);
              v36 = v35 - v34;
              if (v35 != v34)
              {
                v37 = 0;
                v38 = *(_DWORD *)(v33 + 160);
                v39 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 3);
                v40 = 1;
                while (*(_DWORD *)(v34 + 24 * v37 + 16) != v38)
                {
                  v37 = v40;
                  v31 = v39 > v40++;
                  if (!v31)
                    goto LABEL_19;
                }
                ++*(_DWORD *)(v34 + 24 * v37 + 20);
              }
            }
LABEL_19:
            ++v32;
          }
          while (v32 != v22);
        }
      }
      goto LABEL_48;
    }
  }
  Instrument = DlsCollection::GetInstrument(*((DlsCollection **)v13[1] + 19), *((_QWORD *)v13[1] + 20), a5, a4);
  if (Instrument)
    v41 = 1;
  else
    v41 = a6 == 0;
  if (!v41)
  {
    if (!(_BYTE)a4)
    {
      if (a5 && (_DWORD)a4 == 30720)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)v308 = "DLSBankManager.cpp";
          *(_WORD *)&v308[8] = 1024;
          *(_DWORD *)&v308[10] = 94;
          *(_WORD *)&v308[14] = 1024;
          *(_DWORD *)&v308[16] = a5;
          *(_WORD *)&v308[20] = 1024;
          *(_DWORD *)&v308[22] = 120;
          *(_WORD *)&v308[26] = 1024;
          *(_DWORD *)&v308[28] = 0;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u in bank 0x%x/%u -- using (percussion) preset 0", buf, 0x24u);
        }
        v293 = v13[1];
        v294 = (uint64_t **)*((_QWORD *)v293 + 19);
        v295 = *((_QWORD *)v293 + 20);
        if ((unint64_t)v294 < v295)
        {
          while (1)
          {
            v296 = *v294;
            if (*((_DWORD *)*v294 + 256) == 30720)
              break;
            if ((unint64_t)++v294 >= v295)
              goto LABEL_320;
          }
          Instrument = *v296;
          if (*v296)
            goto LABEL_36;
        }
      }
LABEL_320:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)v308 = "DLSBankManager.cpp";
        *(_WORD *)&v308[8] = 1024;
        *(_DWORD *)&v308[10] = 99;
        *(_WORD *)&v308[14] = 1024;
        *(_DWORD *)&v308[16] = a5;
        *(_WORD *)&v308[20] = 1024;
        *(_DWORD *)&v308[22] = BYTE1(a4);
        *(_WORD *)&v308[26] = 1024;
        *(_DWORD *)&v308[28] = a4;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u bank 0x%x/%u", buf, 0x24u);
      }
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)&v310, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v308 = "DLSBankManager.cpp";
        *(_WORD *)&v308[8] = 1024;
        *(_DWORD *)&v308[10] = 100;
        *(_WORD *)&v308[14] = 2080;
        *(_QWORD *)&v308[16] = &v310;
        *(_WORD *)&v308[24] = 2080;
        *(_QWORD *)&v308[26] = "LoadInstrument: Failed to load patch from bank";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "LoadInstrument: Failed to load patch from bank", -10851);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)v308 = "DLSBankManager.cpp";
      *(_WORD *)&v308[8] = 1024;
      *(_DWORD *)&v308[10] = 88;
      *(_WORD *)&v308[14] = 1024;
      *(_DWORD *)&v308[16] = a5;
      *(_WORD *)&v308[20] = 1024;
      *(_DWORD *)&v308[22] = BYTE1(a4);
      *(_WORD *)&v308[26] = 1024;
      *(_DWORD *)&v308[28] = a4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::LoadInstrument: Unable to find patch %u in bank 0x%x/%u -- checking bank 0", buf, 0x24u);
    }
    Instrument = DlsCollection::GetInstrument(*((DlsCollection **)v13[1] + 19), *((_QWORD *)v13[1] + 20), a5, (unsigned __int16)a4 & 0xFF00);
  }
  if (!Instrument)
    goto LABEL_320;
LABEL_36:
  DlsInstrument::ReferenceInstrument(Instrument);
  v42 = (uint64_t *)operator new(0x30uLL);
  v43 = v42;
  v42[4] = a5 | (unint64_t)(a4 << 32);
  v42[5] = Instrument;
  v44 = *v16;
  v45 = (uint64_t **)(v13 + 4);
  if (*v16)
  {
    v46 = a5 | ((_DWORD)a4 << 8);
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v44;
        v47 = ((unint64_t)v44[4] >> 24) & 0xFFFFFF00 | v44[4];
        if (v46 >= v47)
          break;
        v44 = (uint64_t *)*v44;
        v45 = v16;
        if (!*v16)
          goto LABEL_43;
      }
      if (v47 >= v46)
        break;
      v45 = (uint64_t **)(v44 + 1);
      v44 = (uint64_t *)v44[1];
      if (!v44)
        goto LABEL_43;
    }
    operator delete(v42);
  }
  else
  {
LABEL_43:
    *v42 = 0;
    v42[1] = 0;
    v42[2] = (uint64_t)v16;
    *v45 = v42;
    v48 = (_QWORD *)**v14;
    if (v48)
    {
      *v14 = v48;
      v43 = *v45;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v13[4], v43);
    v13[5] = (CFURLRef)((char *)v13[5] + 1);
  }
LABEL_48:
  InstrumentState::Cleanup(a2);
  v49 = CFURLCopyLastPathComponent(*v13);
  InstrumentState::SetCurrentBankName(a2, v49);
  CFRelease(v49);
  *((_DWORD *)a2 + 42) = *(_DWORD *)(Instrument + 88);
  *((_DWORD *)a2 + 43) = *(_DWORD *)(Instrument + 92);
  (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)a2 + 8))(a2, 0);
  (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0);
  v50 = (_DWORD **)*((_QWORD *)a2 + 26);
  v51 = (_DWORD **)*((_QWORD *)a2 + 27);
  if (v50 != v51)
  {
    do
    {
      if (*v50)
        SamplerState::Unref(*v50);
      ++v50;
    }
    while (v50 != v51);
    v50 = (_DWORD **)*((_QWORD *)a2 + 26);
  }
  *((_QWORD *)a2 + 27) = v50;
  v52 = (_DWORD **)*((_QWORD *)a2 + 29);
  v53 = (_DWORD **)*((_QWORD *)a2 + 30);
  if (v52 != v53)
  {
    do
    {
      if (*v52)
        SamplerState::Unref(*v52);
      ++v52;
    }
    while (v52 != v53);
    v52 = (_DWORD **)*((_QWORD *)a2 + 29);
  }
  *((_QWORD *)a2 + 30) = v52;
  *(_QWORD *)v305 = 0;
  v306[0] = 0;
  DlsObject::GetName(*(DlsObject **)(Instrument + 8), *(TString **)(Instrument + 16), (void **)v305);
  v54 = v306;
  if (*(_QWORD *)v305)
    v54 = *(_BYTE **)v305;
  if (*v54)
  {
    if (*(_QWORD *)v305)
      v55 = (const char *)(*(_QWORD *)v305 + 1);
    else
      v55 = (char *)v306 + 1;
    v56 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v55, 0x600u);
    *(_QWORD *)&v310 = v56;
    if (!v56)
    {
      result = (const void **)os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v308 = "InstrumentState.cpp";
        *(_WORD *)&v308[8] = 1024;
        *(_DWORD *)&v308[10] = 384;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  NULL instrument name from DLS instrument", buf, 0x12u);
        __break(1u);
LABEL_329:
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      }
      __break(1u);
      return result;
    }
    (*(void (**)(InstrumentState *, CFStringRef, uint64_t))(*(_QWORD *)a2 + 72))(a2, v56, 1);
    Smart<__CFString const*>::~Smart((const void **)&v310);
  }
  v301 = a2;
  v300 = 0;
  v57 = 0;
  v58 = MEMORY[0x24BDACB70];
  v302 = v13;
  do
  {
    v60 = *(_QWORD *)(Instrument + 64);
    v59 = *(_QWORD *)(Instrument + 72);
    if (v57 >= (int)((unint64_t)(v59 - v60) >> 3))
      break;
    v61 = v57;
    while (1)
    {
      v62 = *(_QWORD *)(v60 + 8 * v61);
      if (!v62)
        goto LABEL_310;
      if (*(_BYTE *)(v62 + 164))
        break;
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v308 = "InstrumentState.cpp";
        *(_WORD *)&v308[8] = 1024;
        *(_DWORD *)&v308[10] = 391;
        _os_log_impl(&dword_210A23000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadDlsInstrument: skipping invalid region", buf, 0x12u);
        v60 = *(_QWORD *)(Instrument + 64);
        v59 = *(_QWORD *)(Instrument + 72);
      }
      if ((int)++v61 >= (int)((unint64_t)(v59 - v60) >> 3))
        goto LABEL_310;
    }
    Wave = (DlsWave *)DlsRegion::GetWave(*(DlsRegion **)(v60 + 8 * v61));
    if (!*((_BYTE *)Wave + 57))
    {
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        goto LABEL_339;
      v64 = *(_DWORD *)(v62 + 160);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v308 = "InstrumentState.cpp";
      *(_WORD *)&v308[8] = 1024;
      *(_DWORD *)&v308[10] = 398;
      *(_WORD *)&v308[14] = 1024;
      *(_DWORD *)&v308[16] = v64;
      _os_log_impl(&dword_210A23000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d LoadDlsInstrument: Sample with wave ID %u is corrupt", buf, 0x18u);
      if (!*((_BYTE *)Wave + 57))
      {
LABEL_339:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v310, 0xFFFFD589);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)v308 = "InstrumentState.cpp";
          *(_WORD *)&v308[8] = 1024;
          *(_DWORD *)&v308[10] = 399;
          *(_WORD *)&v308[14] = 2080;
          *(_QWORD *)&v308[16] = &v310;
          *(_WORD *)&v308[24] = 2080;
          *(_QWORD *)&v308[26] = "LoadDlsInstrument: Corrupt sample";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v298 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v298, "LoadDlsInstrument: Corrupt sample", -10871);
      }
    }
    InstrumentManager::AddSample(*((InstrumentManager **)v301 + 14), Wave, *v13, *(_BYTE *)(*((_QWORD *)v301 + 3) + 176), *(_DWORD *)(v62 + 160));
    v303 = v65;
    v66 = v13[6];
    v67 = (unsigned int *)v13[7];
    v68 = ((char *)v67 - (char *)v66) >> 2;
    if (v67 == (unsigned int *)v66)
    {
LABEL_82:
      v71 = v13[8];
      if (v67 >= (unsigned int *)v71)
      {
        v73 = v68 + 1;
        if ((v68 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v74 = v71 - v66;
        if (v74 >> 1 > v73)
          v73 = v74 >> 1;
        v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL;
        v76 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v75)
          v76 = v73;
        if (v76)
        {
          v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v76);
          v66 = v13[6];
          v67 = (unsigned int *)v13[7];
        }
        else
        {
          v77 = 0;
        }
        v78 = (unsigned int *)(v76 + 4 * v68);
        *v78 = v303;
        v72 = (const __CFURL *)(v78 + 1);
        while (v67 != (unsigned int *)v66)
        {
          v79 = *--v67;
          *--v78 = v79;
        }
        v13[6] = (CFURLRef)v78;
        v13[7] = v72;
        v13[8] = (CFURLRef)(v76 + 4 * v77);
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v67 = v303;
        v72 = (const __CFURL *)(v67 + 1);
      }
      v13[7] = v72;
    }
    else
    {
      v69 = 0;
      v70 = 1;
      while (*((_DWORD *)v66 + v69) != v303)
      {
        v69 = v70;
        v31 = v68 > v70++;
        if (!v31)
          goto LABEL_82;
      }
    }
    if (v300)
    {
      v80 = 0;
      while (1)
      {
        if ((v80 & 0x80000000) != 0
          || (v81 = *(_QWORD *)(Instrument + 64),
              (int)v80 >= (int)((unint64_t)(*(_QWORD *)(Instrument + 72) - v81) >> 3)))
        {
          v82 = 0;
        }
        else
        {
          v82 = *(_QWORD **)(v81 + 8 * v80);
        }
        if (!memcmp(v82 + 22, (const void *)(v62 + 176), 0x38uLL))
        {
          v83 = v82[11] == *(_QWORD *)(v62 + 88) && v82[12] == *(_QWORD *)(v62 + 96);
          v84 = v83 && v82[13] == *(_QWORD *)(v62 + 104);
          v85 = !v84;
          v86 = v82[8] == *(_QWORD *)(v62 + 64) && v82[9] == *(_QWORD *)(v62 + 72);
          v87 = v86 && v82[10] == *(_QWORD *)(v62 + 80);
          v88 = !v87;
          v89 = memcmp(v82 + 29, (const void *)(v62 + 232), 0xE0uLL);
          v41 = !v88;
          v13 = v302;
          v90 = v41 && !v85;
          if (v90 && v89 == 0)
            break;
        }
        if (v300 == ++v80)
          goto LABEL_131;
      }
      v289 = (LayerState **)*((_QWORD *)v301 + 29);
      v290 = (LayerState **)*((_QWORD *)v301 + 30);
      while (1)
      {
        if (v289 == v290)
          goto LABEL_131;
        v291 = *v289;
        if ((**(unsigned int (***)(LayerState *))*v289)(*v289) == (_DWORD)v80)
          break;
        ++v289;
      }
      LayerState::AddZoneFromRegion(v291, (const DlsRegion *)v62, v303);
    }
    else
    {
LABEL_131:
      v92 = operator new();
      LayerState::LayerState((LayerState *)v92, v300, v301, 0);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v93 = (**(uint64_t (***)(uint64_t))v92)(v92);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)v308 = "LayerState.cpp";
        *(_WORD *)&v308[8] = 1024;
        *(_DWORD *)&v308[10] = 1716;
        *(_WORD *)&v308[14] = 1024;
        *(_DWORD *)&v308[16] = v93;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromRegion (layer %u)", buf, 0x18u);
      }
      LayerState::UnregisterConnections((_QWORD *)v92);
      v94 = *(_DWORD ***)(v92 + 520);
      v95 = *(_DWORD ***)(v92 + 528);
      if (v94 != v95)
      {
        do
        {
          if (*v94)
            SamplerState::Unref(*v94);
          ++v94;
        }
        while (v94 != v95);
        v94 = *(_DWORD ***)(v92 + 520);
      }
      *(_QWORD *)(v92 + 528) = v94;
      v96 = *(_DWORD ***)(v92 + 448);
      v97 = *(_DWORD ***)(v92 + 456);
      if (v96 != v97)
      {
        do
        {
          if (*v96)
            SamplerState::Unref(*v96);
          ++v96;
        }
        while (v96 != v97);
        v96 = *(_DWORD ***)(v92 + 448);
      }
      *(_QWORD *)(v92 + 456) = v96;
      v98 = *(_DWORD ***)(v92 + 496);
      v99 = *(_DWORD ***)(v92 + 504);
      if (v98 != v99)
      {
        do
        {
          if (*v98)
            SamplerState::Unref(*v98);
          ++v98;
        }
        while (v98 != v99);
        v98 = *(_DWORD ***)(v92 + 496);
      }
      *(_QWORD *)(v92 + 504) = v98;
      v100 = *(_DWORD ***)(v92 + 472);
      v101 = *(_DWORD ***)(v92 + 480);
      if (v100 != v101)
      {
        do
        {
          if (*v100)
            SamplerState::Unref(*v100);
          ++v100;
        }
        while (v100 != v101);
        v100 = *(_DWORD ***)(v92 + 472);
      }
      *(_QWORD *)(v92 + 480) = v100;
      v102 = (EnvelopeState *)operator new();
      EnvelopeState::EnvelopeState(v102, 0, (SamplerState *)v92, 1);
      DlsRegion::SetValid((DlsRegion *)v62, 1, 0);
      v311 = *(_QWORD *)(v62 + 80);
      v310 = *(_OWORD *)(v62 + 64);
      *(float *)&v311 = (float)((float)(log10f(*(float *)&v311) * 20.0) / 96.0) + 1.0;
      EnvelopeState::LoadFromSpec((unsigned int *)v102, (float *)&v310);
      v104 = *(EnvelopeState ***)(v92 + 480);
      v103 = *(_QWORD *)(v92 + 488);
      if ((unint64_t)v104 >= v103)
      {
        v106 = *(_QWORD *)(v92 + 472);
        v107 = ((uint64_t)v104 - v106) >> 3;
        if ((unint64_t)(v107 + 1) >> 61)
          goto LABEL_329;
        v108 = v103 - v106;
        v109 = v108 >> 2;
        if (v108 >> 2 <= (unint64_t)(v107 + 1))
          v109 = v107 + 1;
        if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
          v110 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v110 = v109;
        if (v110)
          v110 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v110);
        else
          v111 = 0;
        v112 = (EnvelopeState **)(v110 + 8 * v107);
        *v112 = v102;
        v105 = v112 + 1;
        v114 = *(char **)(v92 + 472);
        v113 = *(char **)(v92 + 480);
        if (v113 != v114)
        {
          do
          {
            v115 = (EnvelopeState *)*((_QWORD *)v113 - 1);
            v113 -= 8;
            *--v112 = v115;
          }
          while (v113 != v114);
          v113 = *(char **)(v92 + 472);
        }
        *(_QWORD *)(v92 + 472) = v112;
        *(_QWORD *)(v92 + 480) = v105;
        *(_QWORD *)(v92 + 488) = v110 + 8 * v111;
        if (v113)
          operator delete(v113);
      }
      else
      {
        *v104 = v102;
        v105 = v104 + 1;
      }
      *(_QWORD *)(v92 + 480) = v105;
      ++*((_DWORD *)v102 + 2);
      v116 = (EnvelopeState *)operator new();
      EnvelopeState::EnvelopeState(v116, 1, (SamplerState *)v92, 0);
      EnvelopeState::LoadFromSpec((unsigned int *)v116, (float *)(v62 + 88));
      v118 = *(EnvelopeState ***)(v92 + 480);
      v117 = *(_QWORD *)(v92 + 488);
      if ((unint64_t)v118 >= v117)
      {
        v120 = *(_QWORD *)(v92 + 472);
        v121 = ((uint64_t)v118 - v120) >> 3;
        if ((unint64_t)(v121 + 1) >> 61)
          goto LABEL_329;
        v122 = v117 - v120;
        v123 = v122 >> 2;
        if (v122 >> 2 <= (unint64_t)(v121 + 1))
          v123 = v121 + 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8)
          v124 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v124 = v123;
        if (v124)
          v124 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v124);
        else
          v125 = 0;
        v126 = (EnvelopeState **)(v124 + 8 * v121);
        *v126 = v116;
        v119 = v126 + 1;
        v128 = *(char **)(v92 + 472);
        v127 = *(char **)(v92 + 480);
        if (v127 != v128)
        {
          do
          {
            v129 = (EnvelopeState *)*((_QWORD *)v127 - 1);
            v127 -= 8;
            *--v126 = v129;
          }
          while (v127 != v128);
          v127 = *(char **)(v92 + 472);
        }
        *(_QWORD *)(v92 + 472) = v126;
        *(_QWORD *)(v92 + 480) = v119;
        *(_QWORD *)(v92 + 488) = v124 + 8 * v125;
        if (v127)
          operator delete(v127);
      }
      else
      {
        *v118 = v116;
        v119 = v118 + 1;
      }
      *(_QWORD *)(v92 + 480) = v119;
      ++*((_DWORD *)v116 + 2);
      v130 = (SamplerState *)operator new();
      SamplerState::SamplerState(v130, 7, 0, (SamplerState *)v92, 0x20u);
      v131 = (uint64_t (***)(uint64_t, uint64_t))(v62 + 168);
      *(_QWORD *)v132 = &off_24CA937A0;
      *((_QWORD *)v132 + 11) = 0x1B10000000;
      *((_QWORD *)v132 + 12) = 0x40A000003C23D70ALL;
      LFOState::LoadFromArticulations(v132, (uint64_t (***)(const Articulations *, uint64_t))(v62 + 168));
      v134 = *(SamplerState ***)(v92 + 504);
      v133 = *(_QWORD *)(v92 + 512);
      if ((unint64_t)v134 >= v133)
      {
        v137 = *(_QWORD *)(v92 + 496);
        v138 = ((uint64_t)v134 - v137) >> 3;
        if ((unint64_t)(v138 + 1) >> 61)
          goto LABEL_330;
        v139 = v133 - v137;
        v140 = v139 >> 2;
        if (v139 >> 2 <= (unint64_t)(v138 + 1))
          v140 = v138 + 1;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v141 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v141 = v140;
        if (v141)
          v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v141);
        else
          v142 = 0;
        v143 = (SamplerState **)(v141 + 8 * v138);
        v135 = v130;
        *v143 = v130;
        v136 = v143 + 1;
        v145 = *(char **)(v92 + 496);
        v144 = *(char **)(v92 + 504);
        if (v144 != v145)
        {
          do
          {
            v146 = (SamplerState *)*((_QWORD *)v144 - 1);
            v144 -= 8;
            *--v143 = v146;
          }
          while (v144 != v145);
          v144 = *(char **)(v92 + 496);
        }
        *(_QWORD *)(v92 + 496) = v143;
        *(_QWORD *)(v92 + 504) = v136;
        *(_QWORD *)(v92 + 512) = v141 + 8 * v142;
        if (v144)
          operator delete(v144);
      }
      else
      {
        v135 = v130;
        *v134 = v130;
        v136 = v134 + 1;
      }
      *(_QWORD *)(v92 + 504) = v136;
      ++*((_DWORD *)v135 + 2);
      v299 = (SamplerState *)operator new();
      SamplerState::SamplerState(v299, 7, 1, (SamplerState *)v92, 0x20u);
      *(_QWORD *)v147 = &off_24CA937A0;
      *((_QWORD *)v147 + 11) = 0x1B10000000;
      *((_QWORD *)v147 + 12) = 0x40A000003C23D70ALL;
      LFOState::LoadFromArticulations(v147, (uint64_t (***)(const Articulations *, uint64_t))(v62 + 168));
      v149 = *(SamplerState ***)(v92 + 504);
      v148 = *(_QWORD *)(v92 + 512);
      if ((unint64_t)v149 >= v148)
      {
        v152 = *(_QWORD *)(v92 + 496);
        v153 = ((uint64_t)v149 - v152) >> 3;
        if ((unint64_t)(v153 + 1) >> 61)
LABEL_330:
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v154 = v148 - v152;
        v155 = v154 >> 2;
        if (v154 >> 2 <= (unint64_t)(v153 + 1))
          v155 = v153 + 1;
        if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
          v156 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v156 = v155;
        if (v156)
          v156 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v156);
        else
          v157 = 0;
        v158 = (SamplerState **)(v156 + 8 * v153);
        v150 = v299;
        *v158 = v299;
        v151 = v158 + 1;
        v160 = *(char **)(v92 + 496);
        v159 = *(char **)(v92 + 504);
        if (v159 != v160)
        {
          do
          {
            v161 = (SamplerState *)*((_QWORD *)v159 - 1);
            v159 -= 8;
            *--v158 = v161;
          }
          while (v159 != v160);
          v159 = *(char **)(v92 + 496);
        }
        *(_QWORD *)(v92 + 496) = v158;
        *(_QWORD *)(v92 + 504) = v151;
        *(_QWORD *)(v92 + 512) = v156 + 8 * v157;
        if (v159)
          operator delete(v159);
      }
      else
      {
        v150 = v299;
        *v149 = v299;
        v151 = v149 + 1;
      }
      *(_QWORD *)(v92 + 504) = v151;
      ++*((_DWORD *)v150 + 2);
      v162 = *(_QWORD *)(v92 + 184);
      v163 = (**v131)(v62 + 168, 25);
      v164 = v163;
      if (v163)
      {
        if (v163 == 0x7FFFFFFF)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v162 + 64))(v162, 0);
          v165 = 6607.62318;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 64))(v162, 1);
          v165 = (double)v164 * 0.0000152587891 + -6900.0;
        }
        v166 = exp2(v165 / 1200.0) * 440.0;
        FilterState::SetCutoffFreq(v162, v166);
      }
      v167 = (**v131)(v62 + 168, 26);
      if (v167)
      {
        v168 = (double)v167 * 0.0000152587891 * 0.1;
        FilterState::SetResonance(v162, v168);
      }
      *(_DWORD *)(v92 + 88) = 8323199;
      LayerState::SetSelfExclusive(v92, (*(_WORD *)(v62 + 120) & 1) == 0);
      v169 = (**v131)(v62 + 168, 39);
      if (v169)
      {
        v170 = (double)v169 * 0.0000152587891;
        LayerState::SetFineTuning((float *)v92, v170);
      }
      v171 = (**(uint64_t (***)(EnvelopeState *))v102)(v102);
      v172 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
      *(_DWORD *)buf = v171;
      *(_DWORD *)v308 = v172 | 0x100000;
      *(_QWORD *)&v308[4] = 0xC2C0000000000000;
      *(_OWORD *)&v308[12] = 0x100000001uLL;
      *(_QWORD *)&v308[28] = 0;
      v309 = 1065353216;
      LayerState::AddConnection(v92, (int *)buf, 0);
      v173 = (**v131)(v62 + 168, 49);
      if (v173)
      {
        v174 = (**(uint64_t (***)(EnvelopeState *))v116)(v116);
        v175 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v176 = (double)v173 * 0.0000152587891;
        *(_DWORD *)buf = v174;
        *(_QWORD *)v308 = v175 | 0xB00000;
        *(float *)&v308[8] = v176;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v177 = (**v131)(v62 + 168, 11);
      if ((v177 & 0x7FFFFFFF) != 0)
      {
        v178 = (**(uint64_t (***)(EnvelopeState *))v102)(v102);
        *(_DWORD *)buf = 301;
        *(_QWORD *)v308 = v178 | 0x2000000;
        v179 = (double)v177 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v179;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v180 = (**v131)(v62 + 168, 12);
      if ((v180 & 0x7FFFFFFF) != 0)
      {
        v181 = (**(uint64_t (***)(EnvelopeState *))v102)(v102);
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v181 | 0x2200000;
        v182 = (double)v180 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v182;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v183 = (**v131)(v62 + 168, 13);
      if ((v183 & 0x7FFFFFFF) != 0)
      {
        v184 = (**(uint64_t (***)(EnvelopeState *))v102)(v102);
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v184 | 0x2100000;
        v185 = (double)v183 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v185;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v186 = (**v131)(v62 + 168, 20);
      if ((v186 & 0x7FFFFFFF) != 0)
      {
        v187 = (**(uint64_t (***)(EnvelopeState *))v116)(v116);
        *(_DWORD *)buf = 301;
        *(_QWORD *)v308 = v187 | 0x2000000;
        v188 = (double)v186 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v188;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v189 = (**v131)(v62 + 168, 21);
      if ((v189 & 0x7FFFFFFF) != 0)
      {
        v190 = (**(uint64_t (***)(EnvelopeState *))v116)(v116);
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v190 | 0x2200000;
        v191 = (double)v189 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v191;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v192 = (**v131)(v62 + 168, 22);
      if ((v192 & 0x7FFFFFFF) != 0)
      {
        v193 = (**(uint64_t (***)(EnvelopeState *))v116)(v116);
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v193 | 0x2100000;
        v194 = (double)v192 * 0.0000152587891 / 1200.0;
        *(float *)&v308[8] = v194;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      (**v131)(v62 + 168, 23);
      (**v131)(v62 + 168, 24);
      v195 = (**v131)(v62 + 168, 27);
      if (v195)
      {
        v196 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v197 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v198 = (double)v195 * 0.0000152587891;
        *(_DWORD *)buf = v196;
        *(_QWORD *)v308 = v197 | 0x1500000;
        *(float *)&v308[8] = v198;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v199 = (**v131)(v62 + 168, 28);
      if (v199)
      {
        v200 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v201 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v202 = (double)v199 * 0.0000152587891;
        *(_DWORD *)buf = v200;
        *(_QWORD *)v308 = v201 | 0x1500000u;
        *(float *)&v308[8] = v202;
        *(_OWORD *)&v308[12] = xmmword_210B0A120;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v203 = (**v131)(v62 + 168, 29);
      if (v203)
      {
        v204 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v205 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v206 = (double)v203 * 0.0000152587891;
        *(_DWORD *)buf = v204;
        *(_QWORD *)v308 = v205 | 0x1500000u;
        *(float *)&v308[8] = v206;
        *(_OWORD *)&v308[12] = xmmword_210B0A130;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v207 = (**v131)(v62 + 168, 30);
      if (v207)
      {
        v208 = (**(uint64_t (***)(EnvelopeState *))v116)(v116);
        v209 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v210 = (double)v207 * 0.0000152587891;
        *(_DWORD *)buf = v208;
        *(_QWORD *)v308 = v209 | 0x1500000;
        *(float *)&v308[8] = v210;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v211 = (**v131)(v62 + 168, 31);
      if (v211)
      {
        v212 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v213 = (double)v211 * 0.0000152587891;
        *(_DWORD *)buf = 301;
        *(_QWORD *)v308 = v212 | 0x1500000;
        *(float *)&v308[8] = v213;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v214 = (**v131)(v62 + 168, 32);
      if (v214)
      {
        v215 = (***(uint64_t (****)(_QWORD))(v92 + 184))(*(_QWORD *)(v92 + 184));
        v216 = (double)v214 * 0.0000152587891;
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v215 | 0x1500000;
        *(float *)&v308[8] = v216;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 184) + 64))(*(_QWORD *)(v92 + 184), 1);
      }
      v217 = (**v131)(v62 + 168, 33);
      if (v217)
      {
        v218 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v219 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v220 = (double)v217 * 0.00000152587891;
        *(_DWORD *)buf = v218;
        *(_DWORD *)v308 = v219 | 0x100000;
        *(float *)&v308[4] = -v220;
        *(float *)&v308[8] = v220;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v221 = (**v131)(v62 + 168, 34);
      if (v221)
      {
        v222 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v223 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v224 = (double)v221 * 0.00000152587891;
        *(_DWORD *)buf = v222;
        *(_DWORD *)v308 = v223 | 0x100000;
        *(float *)&v308[4] = -v224;
        *(float *)&v308[8] = v224;
        *(_OWORD *)&v308[12] = xmmword_210B0A120;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v225 = (**v131)(v62 + 168, 35);
      if (v225)
      {
        v226 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v227 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v228 = (double)v225 * 0.00000152587891;
        *(_DWORD *)buf = v226;
        *(_DWORD *)v308 = v227 | 0x100000;
        *(float *)&v308[4] = -v228;
        *(float *)&v308[8] = v228;
        *(_OWORD *)&v308[12] = xmmword_210B0A130;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v229 = (**v131)(v62 + 168, 36);
      if (v229)
      {
        v230 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v231 = (double)v229 * 0.00000152587891;
        *(_DWORD *)buf = 301;
        *(_QWORD *)v308 = v230 | 0x100000;
        *(float *)&v308[8] = v231;
        *(_QWORD *)&v308[28] = 0;
        *(_OWORD *)&v308[12] = 0x100000002uLL;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v232 = (**v131)(v62 + 168, 37);
      if (v232)
      {
        v233 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v234 = (double)v232 * 0.00000152587891;
        *(_DWORD *)buf = 7;
        *(_QWORD *)v308 = v233 | 0x100000;
        *(float *)&v308[8] = v234;
        *(_QWORD *)&v308[28] = 0;
        *(_OWORD *)&v308[12] = 0x100000002uLL;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v235 = (**v131)(v62 + 168, 38);
      if (v235)
      {
        v236 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        v237 = (double)v235 * 0.00000152587891;
        *(_DWORD *)buf = 11;
        *(_QWORD *)v308 = v236 | 0x100000;
        *(float *)&v308[8] = v237;
        *(_QWORD *)&v308[28] = 0;
        *(_OWORD *)&v308[12] = 0x100000002uLL;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v238 = (**v131)(v62 + 168, 40);
      if (v238)
      {
        v239 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v240 = (double)v238 * 0.0000152587891;
        *(_DWORD *)buf = 224;
        *(_DWORD *)v308 = v239 | 0xB00000;
        *(float *)&v308[4] = -v240;
        *(float *)&v308[8] = v240;
        *(_OWORD *)&v308[12] = xmmword_210B0A140;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v241 = (**v131)(v62 + 168, 41);
      if (v241)
      {
        v242 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v243 = (double)v241 * 0.0000152587891;
        *(_DWORD *)buf = 300;
        *(_QWORD *)v308 = v242 | 0xB00000;
        *(float *)&v308[8] = v243;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v244 = (**v131)(v62 + 168, 42);
      if (v244)
      {
        v245 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v246 = (double)v244 * 0.0000152587891;
        *(_DWORD *)buf = 242;
        *(_DWORD *)v308 = v245 | 0xB00000;
        *(float *)&v308[4] = -v246;
        *(float *)&v308[8] = v246;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v247 = (**v131)(v62 + 168, 43);
      if (v247)
      {
        v248 = (**(uint64_t (***)(SamplerState *))v299)(v299);
        v249 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v250 = (double)v247 * 0.0000152587891;
        *(_DWORD *)buf = v248;
        *(_DWORD *)v308 = v249 | 0xB00000;
        *(float *)&v308[4] = -v250;
        *(float *)&v308[8] = v250;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v251 = (**v131)(v62 + 168, 44);
      if (v251)
      {
        v252 = (**(uint64_t (***)(SamplerState *))v299)(v299);
        v253 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v254 = (double)v251 * 0.0000152587891;
        *(_DWORD *)buf = v252;
        *(_DWORD *)v308 = v253 | 0xB00000;
        *(float *)&v308[4] = -v254;
        *(float *)&v308[8] = v254;
        *(_OWORD *)&v308[12] = xmmword_210B0A120;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v255 = (**v131)(v62 + 168, 45);
      if (v255)
      {
        v256 = (**(uint64_t (***)(SamplerState *))v299)(v299);
        v257 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v258 = (double)v255 * 0.0000152587891;
        *(_DWORD *)buf = v256;
        *(_DWORD *)v308 = v257 | 0xB00000;
        *(float *)&v308[4] = -v258;
        *(float *)&v308[8] = v258;
        *(_OWORD *)&v308[12] = xmmword_210B0A130;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v259 = (**v131)(v62 + 168, 46);
      if (v259)
      {
        v260 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v261 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v262 = (double)v259 * 0.0000152587891;
        *(_DWORD *)buf = v260;
        *(_DWORD *)v308 = v261 | 0xB00000;
        *(float *)&v308[4] = -v262;
        *(float *)&v308[8] = v262;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v263 = (**v131)(v62 + 168, 47);
      if (v263)
      {
        v264 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v265 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v266 = (double)v263 * 0.0000152587891;
        *(_DWORD *)buf = v264;
        *(_DWORD *)v308 = v265 | 0xB00000;
        *(float *)&v308[4] = -v266;
        *(float *)&v308[8] = v266;
        *(_OWORD *)&v308[12] = xmmword_210B0A120;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v267 = (**v131)(v62 + 168, 48);
      if (v267)
      {
        v268 = (**(uint64_t (***)(SamplerState *))v130)(v130);
        v269 = (***(uint64_t (****)(_QWORD))(v92 + 176))(*(_QWORD *)(v92 + 176));
        v270 = (double)v267 * 0.0000152587891;
        *(_DWORD *)buf = v268;
        *(_DWORD *)v308 = v269 | 0xB00000;
        *(float *)&v308[4] = -v270;
        *(float *)&v308[8] = v270;
        *(_OWORD *)&v308[12] = xmmword_210B0A130;
        *(_QWORD *)&v308[28] = 0;
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      v271 = (**v131)(v62 + 168, 50);
      if (v271)
      {
        v272 = (double)v271 * 0.001;
        LayerState::SetPan((LayerState *)v92, v272);
      }
      v273 = (**v131)(v62 + 168, 51);
      if (v273)
      {
        v274 = (***(uint64_t (****)(_QWORD))(v92 + 192))(*(_QWORD *)(v92 + 192));
        *(_DWORD *)buf = 10;
        *(_DWORD *)v308 = v274 | 0x200000;
        *(float *)&v308[4] = -(float)((float)v273 / 1000.0);
        *(float *)&v308[8] = (float)v273 / 1000.0;
        *(_DWORD *)&v308[12] = 1;
        memset(&v308[16], 0, 20);
        v309 = 1065353216;
        LayerState::AddConnection(v92, (int *)buf, 0);
      }
      LayerState::VerifyRestore((LayerState *)v92);
      LayerState::AddZoneFromRegion((LayerState *)v92, (const DlsRegion *)v62, v303);
      v275 = v301;
      v277 = (uint64_t *)*((_QWORD *)v301 + 30);
      v276 = *((_QWORD *)v301 + 31);
      if ((unint64_t)v277 >= v276)
      {
        v279 = *((_QWORD *)v301 + 29);
        v280 = ((uint64_t)v277 - v279) >> 3;
        if ((unint64_t)(v280 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v281 = v276 - v279;
        v282 = v281 >> 2;
        if (v281 >> 2 <= (unint64_t)(v280 + 1))
          v282 = v280 + 1;
        if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
          v283 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v283 = v282;
        if (v283)
        {
          v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v283);
          v275 = v301;
        }
        else
        {
          v284 = 0;
        }
        v285 = (uint64_t *)(v283 + 8 * v280);
        *v285 = v92;
        v278 = v285 + 1;
        v287 = (char *)*((_QWORD *)v275 + 29);
        v286 = (char *)*((_QWORD *)v275 + 30);
        if (v286 != v287)
        {
          do
          {
            v288 = *((_QWORD *)v286 - 1);
            v286 -= 8;
            *--v285 = v288;
          }
          while (v286 != v287);
          v286 = (char *)*((_QWORD *)v275 + 29);
        }
        *((_QWORD *)v275 + 29) = v285;
        *((_QWORD *)v275 + 30) = v278;
        *((_QWORD *)v275 + 31) = v283 + 8 * v284;
        if (v286)
          operator delete(v286);
      }
      else
      {
        *v277 = v92;
        v278 = v277 + 1;
      }
      ++v300;
      *((_QWORD *)v275 + 30) = v278;
      ++*(_DWORD *)(v92 + 8);
      v13 = v302;
    }
    v57 = v61 + 1;
    v58 = MEMORY[0x24BDACB70];
  }
  while ((int)v61 > -2);
LABEL_310:
  (*(void (**)(SamplerState *, uint64_t))(*(_QWORD *)v301 + 64))(v301, 1);
  if (*(_QWORD *)v305)
    free(*(void **)v305);
  return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
}

void sub_210AA32EC()
{
  __cxa_end_catch();
  JUMPOUT(0x210AA32F4);
}

void sub_210AA3300(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x210AA3308);
  __clang_call_terminate(a1);
}

uint64_t GlobalState::LoadEXS24Instrument(InstrumentState **this, InstrumentState **a2, const __CFURL *a3)
{
  InstrumentState *v4;

  if (a2 == this)
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  v4 = *this;
  InstrumentManager::ClearFileReferences(*((InstrumentManager **)*this + 14));
  return InstrumentState::LoadEXS24Instrument(v4, a3);
}

void sub_210AA338C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "GlobalState.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 500;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d GlobalState::LoadEXS24Instrument: Load failed", (uint8_t *)&a9, 0x12u);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void GlobalState::SetPerformanceParameter(GlobalState *this, unsigned int a2, float a3)
{
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  unsigned int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v11 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v13 = "GlobalState.cpp";
    v14 = 1024;
    v15 = 729;
    v16 = 1024;
    v17 = a2;
    v18 = 2048;
    v19 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::SetPerformanceParameter: param %u value %f", buf, 0x22u);
  }
  v6 = (char *)*((_QWORD *)this + 16);
  if (!v6)
    goto LABEL_14;
  v7 = (char *)this + 128;
  do
  {
    v8 = *((_DWORD *)v6 + 8);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (char **)v6;
    else
      v10 = (char **)(v6 + 8);
    if (v9)
      v7 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 != (char *)this + 128 && *((_DWORD *)v7 + 8) <= a2)
    *(float *)(*((_QWORD *)v7 + 7) + 164) = fminf(fmaxf(a3, 0.0), 1.0);
  else
LABEL_14:
    *((float *)std::__tree<std::__value_type<unsigned int const,float>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,float>,std::less<unsigned int const>,true>,std::allocator<std::__value_type<unsigned int const,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 18, a2, &v11)+ 8) = a3;
}

void DlsInstrument::~DlsInstrument(DlsInstrument *this)
{
  DlsInstrument::~DlsInstrument(this);
  JUMPOUT(0x212BCDF50);
}

{
  unint64_t v2;
  _QWORD *v3;
  void **v4;

  *(_QWORD *)this = &off_24CA8CEA8;
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 9);
  if ((unint64_t)v3 < v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = *((_QWORD *)this + 9);
      }
      ++v3;
    }
    while ((unint64_t)v3 < v2);
    v3 = (_QWORD *)*((_QWORD *)this + 8);
  }
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 8);
  std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void DlsInstrument::SetLocale(DlsInstrument *this, int a2, int a3)
{
  _DWORD *Bank;
  uint64_t v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)this + 22) = a2;
  *((_DWORD *)this + 23) = a3;
  *((_DWORD *)this + 99) = a2 + (a3 << 8);
  Bank = BankManager::GetBank((BankManager *)(*((_QWORD *)this + 7) + 152), a3, 1);
  if (Bank)
  {
    v5 = *((unsigned int *)this + 22);
    if (v5 >= 0x80)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        v6 = 136316162;
        v7 = "BankManagement.cpp";
        v8 = 1024;
        v9 = 71;
        v10 = 2080;
        v11 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/PublicAudioUnits/DlsSynth/BankManagement.cpp";
        v12 = 1024;
        v13 = 71;
        v14 = 2080;
        v15 = "isGood";
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v6, 0x2Cu);
      }
    }
    else
    {
      *(_QWORD *)&Bank[2 * v5] = this;
    }
  }
}

uint64_t DlsInstrument::ReferenceInstrument(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  std::bad_alloc *exception;
  std::bad_alloc *v27;

  v1 = *(_QWORD *)(this + 64);
  if ((int)((unint64_t)(*(_QWORD *)(this + 72) - v1) >> 3) >= 1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v1 + 8 * v3);
      v5 = *(_QWORD *)(v4 + 472);
      if (v5)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
        if ((this & 1) == 0)
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 472) + 104))(*(_QWORD *)(v4 + 472), 0);
          v6 = *(int *)(v4 + 500);
          v7 = (4094 * (_WORD)v6 * *(_WORD *)(v4 + 492) - *(_WORD *)(v4 + 488)) & 0xFFF | (49152 * v6);
          v8 = v7 / (unint64_t)(2 * v6);
          *(_DWORD *)(v4 + 512) = v8;
          *(_DWORD *)(DlsRegion::GetWave((DlsRegion *)v4) + 140) = v8;
          v9 = malloc_type_malloc(v7 + 16, 0x7C51E058uLL);
          if (!v9)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v27 = std::bad_alloc::bad_alloc(exception);
          }
          *(_QWORD *)(v4 + 504) = v9;
          v10 = (*(uint64_t (**)(_QWORD, void *, _QWORD))(**(_QWORD **)(v4 + 472) + 16))(*(_QWORD *)(v4 + 472), v9, v7);
          this = printf("allocBytes = %d : bytesRead = %d\n", v7, v10);
        }
      }
      else
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 56) + 96);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 56) + 104);
        v13 = v12 - v11;
        if (v12 != v11)
        {
          v14 = 0;
          v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
          v16 = 1;
          while (*(_DWORD *)(v11 + 24 * v14 + 16) != *(_DWORD *)(v4 + 160))
          {
            v14 = v16;
            if (v15 <= v16++)
              goto LABEL_13;
          }
          ++*(_DWORD *)(v11 + 24 * v14 + 20);
        }
LABEL_13:
        this = DlsRegion::GetWave((DlsRegion *)v4);
        if (this)
        {
          if (!*(_QWORD *)(v4 + 472))
          {
            v18 = this;
            this = DlsRegion::GetWave((DlsRegion *)v4);
            if (!*(_BYTE *)(this + 116))
            {
              if (*(_BYTE *)(v18 + 57))
              {
                v19 = (*(_QWORD *)(DlsRegion::GetWave((DlsRegion *)v4) + 80) + 15) & 0xFFFFFFFFFFFFFFF0;
                this = DlsRegion::GetFrameLength((DlsRegion *)v4);
                v20 = *(int *)(v4 + 144);
                if (*(_DWORD *)(v4 + 148) + (int)v20 >= (int)this)
                  v21 = this;
                else
                  v21 = *(_DWORD *)(v4 + 148) + v20;
                if (v21 <= (int)v20)
                {
                  v25 = (_OWORD *)(v19 + 4 * (int)this);
                  v25[6] = 0u;
                  v25[7] = 0u;
                  v25[4] = 0u;
                  v25[5] = 0u;
                  v25[2] = 0u;
                  v25[3] = 0u;
                  *v25 = 0u;
                  v25[1] = 0u;
                }
                else
                {
                  v22 = 0;
                  v23 = v19 + 4 * v21;
                  v24 = v19 + 4 * v20;
                  do
                  {
                    *(_DWORD *)(v23 + v22) = *(_DWORD *)(v24 + v22);
                    v22 += 4;
                  }
                  while (v22 != 128);
                }
              }
            }
          }
        }
      }
      ++v3;
      v1 = *(_QWORD *)(v2 + 64);
    }
    while (v3 < (int)((unint64_t)(*(_QWORD *)(v2 + 72) - v1) >> 3));
  }
  return this;
}

uint64_t DlsInstrument::AddNewRegion(void **this)
{
  char **v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v2 = (char **)(this + 8);
  if (this[9] == this[8] && !*((_BYTE *)this + 392))
  {
    std::vector<DlsInstrument *>::reserve(this + 8, 0x10uLL);
    *((_BYTE *)this + 392) = 1;
  }
  v3 = operator new();
  v4 = v3;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 33) = 0u;
  *(_QWORD *)v3 = &off_24CA94008;
  *(_QWORD *)(v3 + 56) = this;
  v5 = (__int128 *)EnvelopeSpec::sDefaultVolumeEnvelope;
  if (!EnvelopeSpec::sDefaultVolumeEnvelope)
  {
    v5 = &sDefaultVolumeEnvelopeMem;
    sDefaultVolumeEnvelopeMem = 0uLL;
    qword_254A76B90 = 1065353216;
    EnvelopeSpec::sDefaultVolumeEnvelope = (uint64_t)&sDefaultVolumeEnvelopeMem;
  }
  v6 = *v5;
  *(_QWORD *)(v3 + 80) = *((_QWORD *)v5 + 2);
  *(_OWORD *)(v3 + 64) = v6;
  v7 = *v5;
  *(_QWORD *)(v3 + 104) = *((_QWORD *)v5 + 2);
  *(_OWORD *)(v3 + 88) = v7;
  *(_BYTE *)(v3 + 164) = 0;
  *(_QWORD *)(v3 + 168) = &off_24CA8CE90;
  *(_QWORD *)&v7 = 0x101010101010101;
  *((_QWORD *)&v7 + 1) = 0x101010101010101;
  *(_OWORD *)(v3 + 176) = v7;
  *(_OWORD *)(v3 + 192) = v7;
  *(_OWORD *)(v3 + 208) = v7;
  *(_QWORD *)(v3 + 224) = 0x101010101010101;
  *(_QWORD *)(v3 + 472) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 456) = v3;
  *(_QWORD *)(v3 + 464) = 0;
  v8.n128_f32[0] = DlsRegion::SetValid((DlsRegion *)v3, 1, 1);
  v9 = *(std::__shared_weak_count **)(v4 + 480);
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (uint64_t *)this[9];
  v12 = (uint64_t *)this[10];
  *(_DWORD *)(v4 + 488) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  if (v13 >= v12)
  {
    v15 = ((char *)v13 - *v2) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v16 = (char *)v12 - *v2;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v18);
    else
      v19 = 0;
    v20 = (uint64_t *)(v18 + 8 * v15);
    v21 = (void *)(v18 + 8 * v19);
    *v20 = v4;
    v14 = v20 + 1;
    v23 = (char *)this[8];
    v22 = (char *)this[9];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *--v20 = v24;
      }
      while (v22 != v23);
      v22 = *v2;
    }
    this[8] = v20;
    this[9] = v14;
    this[10] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v13 = v4;
    v14 = v13 + 1;
  }
  this[9] = v14;
  return v4;
}

void sub_210AA3BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v3);
  std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MEMORY[0x212BCDF50](v2, 0x10B1C4051E5FC0CLL);
  _Unwind_Resume(a1);
}

BOOL CAAudioChannelLayout::AreLayoutsEquivalent(const AudioChannelLayout *this, const AudioChannelLayout *a2, const AudioChannelLayout *a3)
{
  BOOL v3;
  UInt32 v5;
  int outPropertyData;
  _QWORD inSpecifier[3];

  inSpecifier[2] = *MEMORY[0x24BDAC8D0];
  if (this == a2)
    return 1;
  if (!a2)
    return 0;
  v5 = 4;
  outPropertyData = 0;
  inSpecifier[0] = this;
  inSpecifier[1] = a2;
  if (AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &v5, &outPropertyData))
    v3 = 1;
  else
    v3 = outPropertyData == 0;
  return !v3;
}

void DlsFile::Read(DlsFile *this)
{
  DlsFile *v1;
  TStream *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  TStream *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v65;
  TStream *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unsigned int v78;
  Articulations *v80;
  unsigned int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int v85;
  int v86;
  TStream *v87;
  unint64_t *v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  unint64_t *v92;
  unint64_t v93;
  __int16 v94;
  __int16 v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  TStream *v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  __int16 Little16;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  __int16 v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  __int16 v128;
  __int16 v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  int Little32;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  __int16 v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  __int16 v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  __int16 v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  TStream *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  unint64_t *v198;
  unint64_t v199;
  TStream *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unsigned int v204;
  int v205;
  unint64_t *v206;
  unint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  TStream *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  int v235;
  uint64_t v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  TStream *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  TStream *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  unint64_t v258;
  int v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  int v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  _DWORD *v319;
  _DWORD *exception;
  char v322;
  char v323;
  unint64_t *v324;
  uint64_t *v325;
  DlsCollection *v326;
  _QWORD *v327;
  DlsInstrument *v328;
  DlsFile *v329;
  TStream *v330;
  std::__shared_weak_count *v331;
  char v332;
  TStream *v333;
  std::__shared_weak_count *v334;
  char v335;
  char v336[8];
  std::__shared_weak_count *v337;
  RIFFChunkHeader *v338;
  std::__shared_weak_count *v339;
  _BYTE v340[28];
  RIFFChunkHeader *v341;
  uint64_t v342;
  _BYTE v343[28];
  TStream *v344;
  std::__shared_weak_count *v345;
  _BYTE v346[28];
  TStream *v347;
  std::__shared_weak_count *v348;
  RIFFChunkHeader *v349;
  std::__shared_weak_count *v350;
  int v351;
  int v352;
  TStream *v353;
  std::__shared_weak_count *v354;
  RIFFChunkHeader *v355;
  std::__shared_weak_count *v356;
  _BYTE v357[28];
  RIFFChunkHeader *v358;
  uint64_t v359;
  _BYTE v360[28];
  TStream *v361;
  std::__shared_weak_count *v362;
  _OWORD v363[2];
  char v364[8];
  std::__shared_weak_count *v365;
  char v366[8];
  std::__shared_weak_count *v367;
  RIFFChunkHeader *v368;
  std::__shared_weak_count *v369;
  _BYTE v370[28];
  TStream *v371;
  uint64_t v372;
  _BYTE v373[28];
  RIFFChunkHeader *v374;
  std::__shared_weak_count *v375;
  _BYTE v376[28];
  RIFFChunkHeader *v377;
  uint64_t v378;
  _BYTE v379[28];
  char v380[8];
  std::__shared_weak_count *v381;
  char v382[8];
  std::__shared_weak_count *v383;
  char v384[8];
  std::__shared_weak_count *v385;
  TStream *v386;
  std::__shared_weak_count *v387;
  unsigned __int8 v388;
  char v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  TStream *v393;
  std::__shared_weak_count *v394;
  TStream *v395;
  std::__shared_weak_count *v396;
  _BYTE buf[28];
  __int16 v398;
  int v399;
  __int16 v400;
  const char *v401;
  char v402;
  void *v403;
  void *v404;
  uint64_t v405;

  v1 = this;
  v405 = *MEMORY[0x24BDAC8D0];
  v2 = (TStream *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  }
  else
  {
    v2 = *(TStream **)this;
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  }
  v353 = v2;
  v354 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v347 = v2;
    v348 = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v3 = 0;
    v347 = v2;
    v348 = 0;
  }
  RIFFChunkHeader::RIFFChunkHeader((RIFFChunkHeader *)&v349, (uint64_t)v2, (uint64_t)v3);
  if (v348)
  {
    v7 = &v348->__shared_owners_;
    do
      v8 = __ldaxr((unint64_t *)v7);
    while (__stlxr(v8 - 1, (unint64_t *)v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  if (v351 != 1179011410 || v352 != 542329924)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "DlsFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 155;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
      v398 = 1024;
      v399 = 155;
      v400 = 2080;
      v401 = "isRIFFHeaderGood";
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
    }
    exception = __cxa_allocate_exception(4uLL);
    *exception = -5;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  v10 = 0;
  v323 = 0;
  v322 = 0;
  v11 = (_QWORD *)*((_QWORD *)v1 + 6);
  v325 = v11 + 12;
  v327 = v11;
  v324 = v11 + 15;
  v329 = v1;
  while (!RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v349))
  {
    v344 = 0;
    v345 = 0;
    *(_DWORD *)&v346[2] = 1061109567;
    *(_DWORD *)&v346[24] = 1061109567;
    RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v344, v349, (uint64_t)v350);
    if (v346[1])
    {
      v12 = bswap32(*(unsigned int *)&v346[24]);
      if (v12 == 1229866575)
      {
        InfoListChunk::InfoListChunk((InfoListChunk *)v336, (uint64_t)&v344, *((uint64_t **)v1 + 6));
        v232 = v337;
        if (!v337)
          goto LABEL_616;
        v233 = (unint64_t *)&v337->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        goto LABEL_566;
      }
      if (v12 == 1818848883)
      {
        v341 = 0;
        v342 = 0;
        *(_DWORD *)&v343[2] = 1061109567;
        *(_DWORD *)&v343[24] = 1061109567;
        RIFFChunkHeader::CachedReadFrom((RIFFChunkHeader *)&v341, (RIFFChunkHeader *)&v344);
        v326 = (DlsCollection *)*((_QWORD *)v1 + 6);
        v59 = (std::__shared_weak_count *)v342;
        v338 = v341;
        v339 = (std::__shared_weak_count *)v342;
        if (v342)
        {
          v60 = (unint64_t *)(v342 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        *(_OWORD *)v340 = *(_OWORD *)v343;
        *(_OWORD *)&v340[12] = *(_OWORD *)&v343[12];
        if (!v343[1] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DlsFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 923;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
          v398 = 1024;
          v399 = 923;
          v400 = 2080;
          v401 = "GetHeader().IsListType()";
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
        }
        if (*(_DWORD *)&v340[24] != 1936615788 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "DlsFile.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 924;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
          v398 = 1024;
          v399 = 924;
          v400 = 2080;
          v401 = "GetHeader().GetSubType() == ChunkType(kListType_InstrumentList)";
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
        }
        if (v340[0])
        {
          while (2)
          {
            if (!RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v338))
            {
              v328 = (DlsInstrument *)DlsCollection::AddNewInstrument(v326);
              v359 = 0;
              v358 = 0;
              *(_DWORD *)&v360[2] = 1061109567;
              *(_DWORD *)&v360[24] = 1061109567;
              RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v358, v338, (uint64_t)v339);
              v355 = v358;
              v356 = (std::__shared_weak_count *)v359;
              if (v359)
              {
                v62 = (unint64_t *)(v359 + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
              *(_OWORD *)&v357[12] = *(_OWORD *)&v360[12];
              *(_OWORD *)v357 = *(_OWORD *)v360;
              if (!v360[1] || *(_DWORD *)&v357[24] != 544435817)
              {
                v319 = __cxa_allocate_exception(4uLL);
                *v319 = -10871;
                __cxa_throw(v319, MEMORY[0x24BEDB798], 0);
              }
              if (v357[0])
              {
                while (2)
                {
                  if (!RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v355))
                  {
                    v372 = 0;
                    v371 = 0;
                    *(_DWORD *)&v373[2] = 1061109567;
                    *(_DWORD *)&v373[24] = 1061109567;
                    RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v371, v355, (uint64_t)v356);
                    if (v373[1])
                    {
                      v64 = bswap32(*(unsigned int *)&v373[24]);
                      if (v64 <= 1818325619)
                      {
                        if (v64 != 1229866575)
                        {
                          if (v64 != 1818325554)
                          {
LABEL_419:
                            RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)&v371);
                            goto LABEL_483;
                          }
LABEL_415:
                          ArticulationList::ArticulationList((ArticulationList *)v366, (RIFFChunkHeader *)&v371, (DlsInstrument *)((char *)v328 + 96));
                          v72 = v367;
                          if (v367)
                          {
                            v189 = (unint64_t *)&v367->__shared_owners_;
                            do
                              v190 = __ldaxr(v189);
                            while (__stlxr(v190 - 1, v189));
                            goto LABEL_481;
                          }
LABEL_483:
                          v221 = (std::__shared_weak_count *)v372;
                          if (v372)
                          {
                            v222 = (unint64_t *)(v372 + 8);
                            do
                              v223 = __ldaxr(v222);
                            while (__stlxr(v223 - 1, v222));
                            if (!v223)
                            {
                              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                              std::__shared_weak_count::__release_weak(v221);
                            }
                          }
                          continue;
                        }
                        InfoListChunk::InfoListChunk((InfoListChunk *)v364, (uint64_t)&v371, (uint64_t *)v328 + 1);
                        v72 = v365;
                        if (!v365)
                          goto LABEL_483;
                        v206 = (unint64_t *)&v365->__shared_owners_;
                        do
                          v190 = __ldaxr(v206);
                        while (__stlxr(v190 - 1, v206));
LABEL_481:
                        if (!v190)
                        {
                          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                          std::__shared_weak_count::__release_weak(v72);
                        }
                        goto LABEL_483;
                      }
                      if (v64 == 1818325620)
                        goto LABEL_415;
                      if (v64 != 1819436910)
                        goto LABEL_419;
                      v72 = (std::__shared_weak_count *)v372;
                      v368 = v371;
                      v369 = (std::__shared_weak_count *)v372;
                      if (v372)
                      {
                        v73 = (unint64_t *)(v372 + 8);
                        do
                          v74 = __ldxr(v73);
                        while (__stxr(v74 + 1, v73));
                      }
                      *(_OWORD *)v370 = *(_OWORD *)v373;
                      *(_OWORD *)&v370[12] = *(_OWORD *)&v373[12];
                      if (!v373[1] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136316162;
                        *(_QWORD *)&buf[4] = "DlsFile.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1040;
                        *(_WORD *)&buf[18] = 2080;
                        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
                        v398 = 1024;
                        v399 = 1040;
                        v400 = 2080;
                        v401 = "GetHeader().IsListType()";
                        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                      }
                      if (*(_DWORD *)&v370[24] != 1852273260
                        && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 136316162;
                        *(_QWORD *)&buf[4] = "DlsFile.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1041;
                        *(_WORD *)&buf[18] = 2080;
                        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
                        v398 = 1024;
                        v399 = 1041;
                        v400 = 2080;
                        v401 = "GetHeader().GetSubType() == ChunkType(kListType_RegionList)";
                        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                      }
                      if (v370[0])
                      {
                        while (2)
                        {
                          if (!RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v368))
                          {
                            v378 = 0;
                            v377 = 0;
                            *(_DWORD *)&v379[2] = 1061109567;
                            *(_DWORD *)&v379[24] = 1061109567;
                            RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v377, v368, (uint64_t)v369);
                            if (!v379[1] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136316162;
                              *(_QWORD *)&buf[4] = "DlsFile.cpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 1051;
                              *(_WORD *)&buf[18] = 2080;
                              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CASer"
                                                    "vices/DLS/DlsFile.cpp";
                              v398 = 1024;
                              v399 = 1051;
                              v400 = 2080;
                              v401 = "regionHeader.IsListType()";
                              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                            }
                            v75 = DlsInstrument::AddNewRegion((void **)v328);
                            v374 = v377;
                            v375 = (std::__shared_weak_count *)v378;
                            if (v378)
                            {
                              v76 = (unint64_t *)(v378 + 8);
                              do
                                v77 = __ldxr(v76);
                              while (__stxr(v77 + 1, v76));
                            }
                            *(_OWORD *)v376 = *(_OWORD *)v379;
                            *(_OWORD *)&v376[12] = *(_OWORD *)&v379[12];
                            if (!v379[1] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136316162;
                              *(_QWORD *)&buf[4] = "DlsFile.cpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 1075;
                              *(_WORD *)&buf[18] = 2080;
                              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CASer"
                                                    "vices/DLS/DlsFile.cpp";
                              v398 = 1024;
                              v399 = 1075;
                              v400 = 2080;
                              v401 = "GetHeader().IsListType()";
                              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                            }
                            v78 = bswap32(*(unsigned int *)&v376[24]);
                            if (v78 != 1919381024
                              && v78 != 1919381042
                              && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136316162;
                              *(_QWORD *)&buf[4] = "DlsFile.cpp";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 1078;
                              *(_WORD *)&buf[18] = 2080;
                              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CASer"
                                                    "vices/DLS/DlsFile.cpp";
                              v398 = 1024;
                              v399 = 1078;
                              v400 = 2080;
                              v401 = "GetHeader().GetSubType() == ChunkType(kChunkType_Region) || GetHeader().GetSubType("
                                     ") == ChunkType(kChunkType_Region2)";
                              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                            }
                            if (!v376[0])
                            {
LABEL_405:
                              v183 = v375;
                              if (v375)
                              {
                                v184 = (unint64_t *)&v375->__shared_owners_;
                                do
                                  v185 = __ldaxr(v184);
                                while (__stlxr(v185 - 1, v184));
                                if (!v185)
                                {
                                  ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                                  std::__shared_weak_count::__release_weak(v183);
                                }
                              }
                              v186 = (std::__shared_weak_count *)v378;
                              if (v378)
                              {
                                v187 = (unint64_t *)(v378 + 8);
                                do
                                  v188 = __ldaxr(v187);
                                while (__stlxr(v188 - 1, v187));
                                if (!v188)
                                {
                                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                                  std::__shared_weak_count::__release_weak(v186);
                                }
                              }
                              continue;
                            }
                            v80 = (Articulations *)(v75 + 168);
                            while (2)
                            {
                              if (RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v374))
                                goto LABEL_405;
                              v387 = 0;
                              v386 = 0;
                              v390 = 1061109567;
                              v392 = 1061109567;
                              RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v386, v374, (uint64_t)v375);
                              if (v389)
                              {
                                v81 = bswap32(v392);
                                if (v81 == 1229866575)
                                {
                                  InfoListChunk::InfoListChunk((InfoListChunk *)v384, (uint64_t)&v386, (uint64_t *)(v75 + 8));
                                  v82 = v385;
                                  if (v385)
                                  {
                                    v102 = (unint64_t *)&v385->__shared_owners_;
                                    do
                                      v84 = __ldaxr(v102);
                                    while (__stlxr(v84 - 1, v102));
                                    goto LABEL_327;
                                  }
LABEL_329:
                                  v154 = v387;
                                  if (v387)
                                  {
                                    v155 = (unint64_t *)&v387->__shared_owners_;
                                    do
                                      v156 = __ldaxr(v155);
                                    while (__stlxr(v156 - 1, v155));
                                    if (!v156)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                                      std::__shared_weak_count::__release_weak(v154);
                                    }
                                  }
                                  continue;
                                }
                                if (v81 == 1818325554 || v81 == 1818325620)
                                {
                                  ArticulationList::ArticulationList((ArticulationList *)v382, (RIFFChunkHeader *)&v386, v80);
                                  v82 = v383;
                                  if (v383)
                                  {
                                    v83 = (unint64_t *)&v383->__shared_owners_;
                                    do
                                      v84 = __ldaxr(v83);
                                    while (__stlxr(v84 - 1, v83));
LABEL_327:
                                    if (!v84)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                  }
                                  goto LABEL_329;
                                }
                                goto LABEL_206;
                              }
                              break;
                            }
                            v85 = v390;
                            v86 = bswap32(v390);
                            if (v86 > 2003594858)
                            {
                              if (v86 == 2003594859)
                              {
                                v104 = v386;
                                v82 = v387;
                                if (v387)
                                {
                                  v105 = (unint64_t *)&v387->__shared_owners_;
                                  do
                                    v106 = __ldxr(v105);
                                  while (__stxr(v106 + 1, v105));
                                }
                                v107 = v388;
                                if (v85 != 1802398839 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 136316162;
                                  *(_QWORD *)&buf[4] = "DlsFile.h";
                                  *(_WORD *)&buf[12] = 1024;
                                  *(_DWORD *)&buf[14] = 385;
                                  *(_WORD *)&buf[18] = 2080;
                                  *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/C"
                                                        "AServices/DLS/DlsFile.h";
                                  v398 = 1024;
                                  v399 = 385;
                                  v400 = 2080;
                                  v401 = "GetHeader().GetType() == ChunkType(kChunkType_WaveLink)";
                                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                                }
                                if (v107)
                                {
                                  *(_QWORD *)buf = v104;
                                  *(_QWORD *)&buf[8] = v82;
                                  if (v82)
                                  {
                                    v108 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v109 = __ldxr(v108);
                                    while (__stxr(v109 + 1, v108));
                                  }
                                  Little16 = TStream::ReadLittle16(v104);
                                  if (v82)
                                  {
                                    v111 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v112 = __ldaxr(v111);
                                    while (__stlxr(v112 - 1, v111));
                                    if (!v112)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v113 = __ldxr(v111);
                                    while (__stxr(v113 + 1, v111));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                  }
                                  v124 = TStream::ReadLittle16(v104);
                                  if (v82)
                                  {
                                    v125 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v126 = __ldaxr(v125);
                                    while (__stlxr(v126 - 1, v125));
                                    if (!v126)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v127 = __ldxr(v125);
                                    while (__stxr(v127 + 1, v125));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                  }
                                  Little32 = TStream::ReadLittle32(v104);
                                  if (v82)
                                  {
                                    v134 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v135 = __ldaxr(v134);
                                    while (__stlxr(v135 - 1, v134));
                                    if (!v135)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v136 = __ldxr(v134);
                                    while (__stxr(v136 + 1, v134));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                  }
                                  v137 = TStream::ReadLittle32(v104);
                                  v1 = v329;
                                  if (v82)
                                  {
                                    v138 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v139 = __ldaxr(v138);
                                    while (__stlxr(v139 - 1, v138));
                                    if (!v139)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                  }
                                  *(_WORD *)(v75 + 152) = Little16;
                                  *(_WORD *)(v75 + 154) = v124;
                                  *(_DWORD *)(v75 + 156) = Little32;
                                  *(_DWORD *)(v75 + 160) = v137;
                                  v80 = (Articulations *)(v75 + 168);
                                }
                                else
                                {
                                  *(_QWORD *)buf = v104;
                                  *(_QWORD *)&buf[8] = v82;
                                  if (v82)
                                  {
                                    v119 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v120 = __ldxr(v119);
                                    while (__stxr(v120 + 1, v119));
                                  }
                                  TStream::WriteLittle16(v104);
                                  if (v82)
                                  {
                                    v121 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v122 = __ldaxr(v121);
                                    while (__stlxr(v122 - 1, v121));
                                    if (!v122)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v123 = __ldxr(v121);
                                    while (__stxr(v123 + 1, v121));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                  }
                                  TStream::WriteLittle16(v104);
                                  if (v82)
                                  {
                                    v157 = (unint64_t *)&v82->__shared_owners_;
                                    v1 = v329;
                                    do
                                      v158 = __ldaxr(v157);
                                    while (__stlxr(v158 - 1, v157));
                                    if (!v158)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v159 = __ldxr(v157);
                                    while (__stxr(v159 + 1, v157));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                    v1 = v329;
                                  }
                                  TStream::WriteLittle32(v104);
                                  if (v82)
                                  {
                                    v163 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v164 = __ldaxr(v163);
                                    while (__stlxr(v164 - 1, v163));
                                    if (!v164)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = v82;
                                    do
                                      v165 = __ldxr(v163);
                                    while (__stxr(v165 + 1, v163));
                                  }
                                  else
                                  {
                                    *(_QWORD *)buf = v104;
                                    *(_QWORD *)&buf[8] = 0;
                                  }
                                  TStream::WriteLittle32(v104);
                                  v80 = (Articulations *)(v75 + 168);
                                  if (v82)
                                  {
                                    v166 = (unint64_t *)&v82->__shared_owners_;
                                    do
                                      v167 = __ldaxr(v166);
                                    while (__stlxr(v167 - 1, v166));
                                    if (!v167)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                      std::__shared_weak_count::__release_weak(v82);
                                    }
                                  }
                                }
                                if (v82)
                                {
                                  v140 = (unint64_t *)&v82->__shared_owners_;
                                  do
                                    v84 = __ldaxr(v140);
                                  while (__stlxr(v84 - 1, v140));
                                  goto LABEL_327;
                                }
                                goto LABEL_329;
                              }
                              if (v86 == 2004053360)
                              {
                                WaveSampleChunk::WaveSampleChunk((uint64_t)v380, (uint64_t)&v386, (uint64_t)buf);
                                v99 = v381;
                                if (v381)
                                {
                                  v100 = (unint64_t *)&v381->__shared_owners_;
                                  do
                                    v101 = __ldaxr(v100);
                                  while (__stlxr(v101 - 1, v100));
                                  if (!v101)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                                    std::__shared_weak_count::__release_weak(v99);
                                  }
                                }
                                *(_OWORD *)(v75 + 128) = *(_OWORD *)buf;
                                *(_QWORD *)(v75 + 144) = *(_QWORD *)&buf[16];
                                goto LABEL_329;
                              }
                              goto LABEL_206;
                            }
                            if (v86 == 1667525664)
                            {
                              ConditionalChunk::ConditionalChunk((ConditionalChunk *)buf, (RIFFChunkHeader *)&v386);
                              if (!v402)
                              {
                                RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)&v374);
                                *(_BYTE *)(v75 + 164) = 0;
                                if (v403)
                                {
                                  v404 = v403;
                                  operator delete(v403);
                                }
                                v177 = *(std::__shared_weak_count **)&buf[8];
                                if (*(_QWORD *)&buf[8])
                                {
                                  v178 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                  do
                                    v179 = __ldaxr(v178);
                                  while (__stlxr(v179 - 1, v178));
                                  if (!v179)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                                    std::__shared_weak_count::__release_weak(v177);
                                  }
                                }
                                v180 = v387;
                                if (v387)
                                {
                                  v181 = (unint64_t *)&v387->__shared_owners_;
                                  do
                                    v182 = __ldaxr(v181);
                                  while (__stlxr(v182 - 1, v181));
                                  if (!v182)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                                    std::__shared_weak_count::__release_weak(v180);
                                  }
                                }
                                goto LABEL_405;
                              }
                              if (v403)
                              {
                                v404 = v403;
                                operator delete(v403);
                              }
                              v82 = *(std::__shared_weak_count **)&buf[8];
                              if (*(_QWORD *)&buf[8])
                              {
                                v103 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                                do
                                  v84 = __ldaxr(v103);
                                while (__stlxr(v84 - 1, v103));
                                goto LABEL_327;
                              }
                              goto LABEL_329;
                            }
                            if (v86 != 1919381096)
                            {
LABEL_206:
                              RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)&v386);
                              goto LABEL_329;
                            }
                            v87 = v386;
                            v82 = v387;
                            if (v387)
                            {
                              v88 = (unint64_t *)&v387->__shared_owners_;
                              do
                                v89 = __ldxr(v88);
                              while (__stxr(v89 + 1, v88));
                            }
                            v90 = v388;
                            v91 = v391;
                            if (v85 != 1752065906 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136316162;
                              *(_QWORD *)&buf[4] = "DlsFile.h";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 323;
                              *(_WORD *)&buf[18] = 2080;
                              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CASer"
                                                    "vices/DLS/DlsFile.h";
                              v398 = 1024;
                              v399 = 323;
                              v400 = 2080;
                              v401 = "GetHeader().GetType() == ChunkType(kChunkType_RegionHeaderChunk)";
                              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                            }
                            if (v90)
                            {
                              *(_QWORD *)buf = v87;
                              *(_QWORD *)&buf[8] = v82;
                              if (v82)
                              {
                                v92 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v93 = __ldxr(v92);
                                while (__stxr(v93 + 1, v92));
                              }
                              v94 = TStream::ReadLittle16(v87);
                              v95 = TStream::ReadLittle16(v87);
                              if (v82)
                              {
                                v96 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v97 = __ldaxr(v96);
                                while (__stlxr(v97 - 1, v96));
                                if (!v97)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v395 = v87;
                                v396 = v82;
                                do
                                  v98 = __ldxr(v96);
                                while (__stxr(v98 + 1, v96));
                              }
                              else
                              {
                                v395 = v87;
                                v396 = 0;
                              }
                              v128 = TStream::ReadLittle16(v87);
                              v129 = TStream::ReadLittle16(v87);
                              if (v82)
                              {
                                v130 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v131 = __ldaxr(v130);
                                while (__stlxr(v131 - 1, v130));
                                if (!v131)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v393 = v87;
                                v394 = v82;
                                do
                                  v132 = __ldxr(v130);
                                while (__stxr(v132 + 1, v130));
                              }
                              else
                              {
                                v393 = v87;
                                v394 = 0;
                              }
                              v141 = TStream::ReadLittle16(v87);
                              if (v82)
                              {
                                v142 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v143 = __ldaxr(v142);
                                while (__stlxr(v143 - 1, v142));
                                if (!v143)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v393 = v87;
                                v394 = v82;
                                do
                                  v144 = __ldxr(v142);
                                while (__stxr(v144 + 1, v142));
                              }
                              else
                              {
                                v393 = v87;
                                v394 = 0;
                              }
                              v145 = TStream::ReadLittle16(v87);
                              if (v82)
                              {
                                v146 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v147 = __ldaxr(v146);
                                while (__stlxr(v147 - 1, v146));
                                if (!v147)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                if (v91 > 0xC)
                                {
                                  v393 = v87;
                                  v394 = v82;
                                  v148 = (unint64_t *)&v82->__shared_owners_;
                                  do
                                    v149 = __ldxr(v148);
                                  while (__stxr(v149 + 1, v148));
                                  goto LABEL_317;
                                }
LABEL_322:
                                v150 = 0;
                                v1 = v329;
                              }
                              else
                              {
                                if (v91 < 0xD)
                                  goto LABEL_322;
                                v393 = v87;
                                v394 = 0;
LABEL_317:
                                v150 = TStream::ReadLittle16(v87);
                                v1 = v329;
                                if (v82)
                                {
                                  v151 = (unint64_t *)&v82->__shared_owners_;
                                  do
                                    v152 = __ldaxr(v151);
                                  while (__stlxr(v152 - 1, v151));
                                  if (!v152)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                    std::__shared_weak_count::__release_weak(v82);
                                  }
                                }
                              }
                              *(_WORD *)(v75 + 112) = v94;
                              *(_WORD *)(v75 + 114) = v95;
                              *(_WORD *)(v75 + 116) = v128;
                              *(_WORD *)(v75 + 118) = v129;
                              *(_WORD *)(v75 + 120) = v141;
                              *(_WORD *)(v75 + 122) = v145;
                              *(_WORD *)(v75 + 124) = v150;
                              v80 = (Articulations *)(v75 + 168);
                            }
                            else
                            {
                              *(_QWORD *)buf = v87;
                              *(_QWORD *)&buf[8] = v82;
                              if (v82)
                              {
                                v114 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v115 = __ldxr(v114);
                                while (__stxr(v115 + 1, v114));
                              }
                              TStream::WriteLittle16(v87);
                              TStream::WriteLittle16(v87);
                              if (v82)
                              {
                                v116 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v117 = __ldaxr(v116);
                                while (__stlxr(v117 - 1, v116));
                                if (!v117)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v395 = v87;
                                v396 = v82;
                                do
                                  v118 = __ldxr(v116);
                                while (__stxr(v118 + 1, v116));
                              }
                              else
                              {
                                v395 = v87;
                                v396 = 0;
                              }
                              TStream::WriteLittle16(v87);
                              TStream::WriteLittle16(v87);
                              if (v82)
                              {
                                v160 = (unint64_t *)&v82->__shared_owners_;
                                v1 = v329;
                                do
                                  v161 = __ldaxr(v160);
                                while (__stlxr(v161 - 1, v160));
                                if (!v161)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v393 = v87;
                                v394 = v82;
                                do
                                  v162 = __ldxr(v160);
                                while (__stxr(v162 + 1, v160));
                              }
                              else
                              {
                                v393 = v87;
                                v394 = 0;
                                v1 = v329;
                              }
                              TStream::WriteLittle16(v87);
                              if (v82)
                              {
                                v168 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v169 = __ldaxr(v168);
                                while (__stlxr(v169 - 1, v168));
                                if (!v169)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v393 = v87;
                                v394 = v82;
                                do
                                  v170 = __ldxr(v168);
                                while (__stxr(v170 + 1, v168));
                              }
                              else
                              {
                                v393 = v87;
                                v394 = 0;
                              }
                              TStream::WriteLittle16(v87);
                              if (v82)
                              {
                                v171 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v172 = __ldaxr(v171);
                                while (__stlxr(v172 - 1, v171));
                                if (!v172)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                                v393 = v87;
                                v394 = v82;
                                do
                                  v173 = __ldxr(v171);
                                while (__stxr(v173 + 1, v171));
                              }
                              else
                              {
                                v393 = v87;
                                v394 = 0;
                              }
                              TStream::WriteLittle16(v87);
                              v80 = (Articulations *)(v75 + 168);
                              if (v82)
                              {
                                v174 = (unint64_t *)&v82->__shared_owners_;
                                do
                                  v175 = __ldaxr(v174);
                                while (__stlxr(v175 - 1, v174));
                                if (!v175)
                                {
                                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                  std::__shared_weak_count::__release_weak(v82);
                                }
                              }
                            }
                            if (v82)
                            {
                              v153 = (unint64_t *)&v82->__shared_owners_;
                              do
                                v84 = __ldaxr(v153);
                              while (__stlxr(v84 - 1, v153));
                              goto LABEL_327;
                            }
                            goto LABEL_329;
                          }
                          break;
                        }
                        v72 = v369;
                      }
                      if (!v72)
                        goto LABEL_483;
                      v207 = (unint64_t *)&v72->__shared_owners_;
                      do
                        v190 = __ldaxr(v207);
                      while (__stlxr(v190 - 1, v207));
                      goto LABEL_481;
                    }
                    v65 = bswap32(*(unsigned int *)&v373[2]);
                    if (v65 != 1768846184)
                    {
                      if (v65 != 1684826468)
                        goto LABEL_419;
                      v66 = v371;
                      v67 = (std::__shared_weak_count *)v372;
                      v386 = v371;
                      v387 = (std::__shared_weak_count *)v372;
                      if (v372)
                      {
                        v68 = (unint64_t *)(v372 + 8);
                        do
                          v69 = __ldxr(v68);
                        while (__stxr(v69 + 1, v68));
                      }
                      DLSID::DLSID((DLSID *)buf, v66);
                      if (v67)
                      {
                        v70 = (unint64_t *)&v67->__shared_owners_;
                        do
                          v71 = __ldaxr(v70);
                        while (__stlxr(v71 - 1, v70));
                        if (!v71)
                        {
                          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                          std::__shared_weak_count::__release_weak(v67);
                        }
                      }
                      *((_BYTE *)v328 + 48) = 1;
                      *((_OWORD *)v328 + 2) = *(_OWORD *)buf;
                      goto LABEL_483;
                    }
                    v191 = v371;
                    v192 = (std::__shared_weak_count *)v372;
                    v361 = v371;
                    v362 = (std::__shared_weak_count *)v372;
                    if (v372)
                    {
                      v193 = (unint64_t *)(v372 + 8);
                      do
                        v194 = __ldxr(v193);
                      while (__stxr(v194 + 1, v193));
                    }
                    v363[0] = *(_OWORD *)v373;
                    *(_OWORD *)((char *)v363 + 12) = *(_OWORD *)&v373[12];
                    if ((*(_QWORD *)v373 >> 16) != 1752395369
                      && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136316162;
                      *(_QWORD *)&buf[4] = "DlsFile.h";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 554;
                      *(_WORD *)&buf[18] = 2080;
                      *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.h";
                      v398 = 1024;
                      v399 = 554;
                      v400 = 2080;
                      v401 = "GetHeader().GetType() == ChunkType(kChunkType_InstrumentHeaderChunk)";
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                    }
                    if (LOBYTE(v363[0]))
                    {
                      *(_QWORD *)buf = v191;
                      *(_QWORD *)&buf[8] = v192;
                      if (v192)
                      {
                        v195 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v196 = __ldxr(v195);
                        while (__stxr(v196 + 1, v195));
                      }
                      v197 = TStream::ReadLittle32(v191);
                      if (v192)
                      {
                        v198 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v199 = __ldaxr(v198);
                        while (__stlxr(v199 - 1, v198));
                        if (!v199)
                        {
                          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                          std::__shared_weak_count::__release_weak(v192);
                        }
                      }
                      v200 = v361;
                      v201 = v362;
                      *(_QWORD *)buf = v361;
                      *(_QWORD *)&buf[8] = v362;
                      if (v362)
                      {
                        v202 = (unint64_t *)&v362->__shared_owners_;
                        do
                          v203 = __ldxr(v202);
                        while (__stxr(v203 + 1, v202));
                      }
                      v204 = TStream::ReadLittle32(v200);
                      v205 = TStream::ReadLittle32(v200);
                      if (v204 == 0x80000000)
                      {
                        v204 = 30720;
                        if (v201)
                          goto LABEL_473;
                      }
                      else if (v204 && !(_BYTE)v204)
                      {
                        if ((v204 & 0xFF00) != 0)
                          v204 = (v204 >> 8) | 0x7900;
                        if (v201)
                          goto LABEL_473;
                      }
                      else
                      {
                        v204 |= 0x7900u;
                        if (!v201)
                          goto LABEL_477;
LABEL_473:
                        v218 = (unint64_t *)&v201->__shared_owners_;
                        do
                          v219 = __ldaxr(v218);
                        while (__stlxr(v219 - 1, v218));
                        if (!v219)
                        {
                          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                          std::__shared_weak_count::__release_weak(v201);
                        }
                      }
LABEL_477:
                      DlsInstrument::SetLocale(v328, v205, v204);
                      *((_BYTE *)v328 + 392) = 1;
                      std::vector<DlsInstrument *>::reserve((void **)v328 + 8, v197);
                    }
                    else
                    {
                      *(_QWORD *)buf = v191;
                      *(_QWORD *)&buf[8] = v192;
                      if (v192)
                      {
                        v208 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v209 = __ldxr(v208);
                        while (__stxr(v209 + 1, v208));
                      }
                      TStream::WriteLittle32(v191);
                      if (v192)
                      {
                        v210 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v211 = __ldaxr(v210);
                        while (__stlxr(v211 - 1, v210));
                        if (!v211)
                        {
                          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                          std::__shared_weak_count::__release_weak(v192);
                        }
                      }
                      v212 = v361;
                      v213 = v362;
                      *(_QWORD *)buf = v361;
                      *(_QWORD *)&buf[8] = v362;
                      if (v362)
                      {
                        v214 = (unint64_t *)&v362->__shared_owners_;
                        do
                          v215 = __ldxr(v214);
                        while (__stxr(v215 + 1, v214));
                      }
                      TStream::WriteLittle32(v212);
                      TStream::WriteLittle32(v212);
                      if (v213)
                      {
                        v216 = (unint64_t *)&v213->__shared_owners_;
                        do
                          v217 = __ldaxr(v216);
                        while (__stlxr(v217 - 1, v216));
                        if (!v217)
                        {
                          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                          std::__shared_weak_count::__release_weak(v213);
                        }
                      }
                    }
                    v72 = v362;
                    if (!v362)
                      goto LABEL_483;
                    v220 = (unint64_t *)&v362->__shared_owners_;
                    do
                      v190 = __ldaxr(v220);
                    while (__stlxr(v190 - 1, v220));
                    goto LABEL_481;
                  }
                  break;
                }
                v224 = *((_QWORD *)v328 + 8);
                if ((int)((unint64_t)(*((_QWORD *)v328 + 9) - v224) >> 3) >= 1)
                {
                  v225 = 0;
                  do
                  {
                    DlsRegion::SetValid(*(DlsRegion **)(v224 + 8 * v225++), 1, 1);
                    v224 = *((_QWORD *)v328 + 8);
                  }
                  while (v225 < (int)((unint64_t)(*((_QWORD *)v328 + 9) - v224) >> 3));
                }
              }
              v226 = v356;
              if (v356)
              {
                v227 = (unint64_t *)&v356->__shared_owners_;
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
              }
              v229 = (std::__shared_weak_count *)v359;
              if (v359)
              {
                v230 = (unint64_t *)(v359 + 8);
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
              continue;
            }
            break;
          }
          v59 = v339;
        }
        if (v59)
        {
          v240 = (unint64_t *)&v59->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v242 = (std::__shared_weak_count *)v342;
        if (v342)
        {
          v243 = (unint64_t *)(v342 + 8);
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v10 = 1;
        goto LABEL_616;
      }
      if (v12 != 2004250732)
        goto LABEL_509;
      v13 = operator new();
      v14 = v13;
      v15 = *((_QWORD *)v1 + 6);
      v16 = v345;
      *(_QWORD *)v13 = v344;
      *(_QWORD *)(v13 + 8) = v16;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      *(_OWORD *)(v13 + 16) = *(_OWORD *)v346;
      *(_OWORD *)(v13 + 28) = *(_OWORD *)&v346[12];
      *(_QWORD *)(v13 + 48) = v15;
      if (!*(_BYTE *)(v13 + 17) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DlsFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 399;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
        v398 = 1024;
        v399 = 399;
        v400 = 2080;
        v401 = "GetHeader().IsListType()";
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
      }
      if (*(_DWORD *)(v14 + 40) != 1819309687 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "DlsFile.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 400;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
        v398 = 1024;
        v399 = 400;
        v400 = 2080;
        v401 = "GetHeader().GetSubType() == ChunkType(kListType_WavePool)";
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
      }
      if (*(_BYTE *)(v14 + 16))
        RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)v14);
      *((_QWORD *)v1 + 2) = v14;
      v323 = 1;
    }
    else
    {
      v19 = bswap32(*(unsigned int *)&v346[2]);
      if (v19 <= 1684826467)
      {
        if (v19 == 1667525664)
        {
          ConditionalChunk::ConditionalChunk((ConditionalChunk *)buf, (RIFFChunkHeader *)&v344);
          if (!v402)
            *(_BYTE *)(*((_QWORD *)v1 + 6) + 145) = 0;
          if (v403)
          {
            v404 = v403;
            operator delete(v403);
          }
          v232 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v268 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v234 = __ldaxr(v268);
            while (__stlxr(v234 - 1, v268));
LABEL_566:
            if (!v234)
            {
              ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
              std::__shared_weak_count::__release_weak(v232);
            }
          }
        }
        else
        {
          if (v19 != 1668246632)
          {
LABEL_509:
            RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)&v344);
            goto LABEL_616;
          }
          v235 = TStream::ReadLittle32(v353);
          *((_DWORD *)v1 + 6) = v235;
          v236 = *((_QWORD *)v1 + 6);
          v238 = *(_QWORD *)(v236 + 56);
          v239 = *(_QWORD *)(v236 + 64);
          v237 = (void **)(v236 + 56);
          if (v235 > (int)((unint64_t)(v239 - v238) >> 3))
            std::vector<DlsInstrument *>::reserve(v237, v235);
        }
      }
      else
      {
        switch(v19)
        {
          case 1684826468:
            v245 = v344;
            v246 = v345;
            v361 = v344;
            v362 = v345;
            if (v345)
            {
              v247 = (unint64_t *)&v345->__shared_owners_;
              do
                v248 = __ldxr(v247);
              while (__stxr(v248 + 1, v247));
            }
            DLSID::DLSID((DLSID *)buf, v245);
            if (v246)
            {
              v249 = (unint64_t *)&v246->__shared_owners_;
              do
                v250 = __ldaxr(v249);
              while (__stlxr(v250 - 1, v249));
              if (!v250)
              {
                ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                std::__shared_weak_count::__release_weak(v246);
              }
            }
            v251 = *((_QWORD *)v1 + 6);
            *(_BYTE *)(v251 + 40) = 1;
            *(_OWORD *)(v251 + 24) = *(_OWORD *)buf;
            break;
          case 1986359923:
            v252 = *((_QWORD *)v1 + 6);
            v254 = v344;
            v253 = v345;
            v330 = v344;
            v331 = v345;
            if (v345)
            {
              v255 = (unint64_t *)&v345->__shared_owners_;
              do
                v256 = __ldxr(v255);
              while (__stxr(v256 + 1, v255));
            }
            v332 = v346[0];
            if ((*(_QWORD *)v346 >> 16) != 1936876918
              && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "DlsFile.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 40;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.h";
              v398 = 1024;
              v399 = 40;
              v400 = 2080;
              v401 = "GetHeader().GetType() == ChunkType(kChunkType_Version)";
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
            }
            if (v332)
            {
              *(_QWORD *)buf = v254;
              *(_QWORD *)&buf[8] = v253;
              if (v253)
              {
                v257 = (unint64_t *)&v253->__shared_owners_;
                do
                  v258 = __ldxr(v257);
                while (__stxr(v258 + 1, v257));
              }
              v259 = TStream::ReadLittle32(v254);
              if (v253)
              {
                v260 = (unint64_t *)&v253->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                  std::__shared_weak_count::__release_weak(v253);
                }
              }
              *(_QWORD *)buf = v330;
              *(_QWORD *)&buf[8] = v331;
              if (v331)
              {
                v262 = (unint64_t *)&v331->__shared_owners_;
                do
                  v263 = __ldxr(v262);
                while (__stxr(v263 + 1, v262));
              }
              v264 = TStream::ReadLittle32(v330);
              if (v331)
              {
                v265 = (unint64_t *)&v331->__shared_owners_;
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 - 1, v265));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
              }
              *(_DWORD *)(v252 + 44) = v259;
              *(_DWORD *)(v252 + 48) = v264;
            }
            else
            {
              *(_QWORD *)buf = v254;
              *(_QWORD *)&buf[8] = v253;
              if (v253)
              {
                v269 = (unint64_t *)&v253->__shared_owners_;
                do
                  v270 = __ldxr(v269);
                while (__stxr(v270 + 1, v269));
              }
              TStream::WriteLittle32(v254);
              if (v253)
              {
                v271 = (unint64_t *)&v253->__shared_owners_;
                do
                  v272 = __ldaxr(v271);
                while (__stlxr(v272 - 1, v271));
                if (!v272)
                {
                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                  std::__shared_weak_count::__release_weak(v253);
                }
              }
              *(_QWORD *)buf = v330;
              *(_QWORD *)&buf[8] = v331;
              if (v331)
              {
                v273 = (unint64_t *)&v331->__shared_owners_;
                do
                  v274 = __ldxr(v273);
                while (__stxr(v274 + 1, v273));
              }
              TStream::WriteLittle32(v330);
              if (v331)
              {
                v275 = (unint64_t *)&v331->__shared_owners_;
                do
                  v276 = __ldaxr(v275);
                while (__stlxr(v276 - 1, v275));
                if (!v276)
                {
                  ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                  std::__shared_weak_count::__release_weak(v331);
                }
              }
            }
            v232 = v331;
            if (v331)
            {
              v267 = (unint64_t *)&v331->__shared_owners_;
              do
                v234 = __ldaxr(v267);
              while (__stlxr(v234 - 1, v267));
              goto LABEL_566;
            }
            break;
          case 1886675564:
            v21 = v344;
            v20 = v345;
            v333 = v344;
            v334 = v345;
            if (v345)
            {
              v22 = (unint64_t *)&v345->__shared_owners_;
              do
                v23 = __ldxr(v22);
              while (__stxr(v23 + 1, v22));
            }
            v335 = v346[0];
            if ((*(_QWORD *)v346 >> 16) != 1818391664
              && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = "DlsFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 877;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
              v398 = 1024;
              v399 = 877;
              v400 = 2080;
              v401 = "GetHeader().GetType() == ChunkType(kChunkType_PoolTableChunk)";
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
            }
            if (v335)
            {
              *(_QWORD *)buf = v21;
              *(_QWORD *)&buf[8] = v20;
              if (v20)
              {
                v24 = (unint64_t *)&v20->__shared_owners_;
                do
                  v25 = __ldxr(v24);
                while (__stxr(v25 + 1, v24));
              }
              TStream::ReadLittle32(v21);
              if (v20)
              {
                v26 = (unint64_t *)&v20->__shared_owners_;
                do
                  v27 = __ldaxr(v26);
                while (__stlxr(v27 - 1, v26));
                if (!v27)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              *(_QWORD *)buf = v333;
              *(_QWORD *)&buf[8] = v334;
              if (v334)
              {
                v28 = (unint64_t *)&v334->__shared_owners_;
                do
                  v29 = __ldxr(v28);
                while (__stxr(v29 + 1, v28));
              }
              v30 = TStream::ReadLittle32(v333);
              if (v334)
              {
                v31 = (unint64_t *)&v334->__shared_owners_;
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
                if (!v32)
                {
                  ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                  std::__shared_weak_count::__release_weak(v334);
                }
              }
              std::vector<PoolCue>::reserve(v325, v30);
              v33 = v327[15];
              if (v33 != v327[16])
                v327[16] = v33;
              std::vector<unsigned char>::reserve(v324, v30);
              v34 = v327;
              if (v30 >= 1)
              {
                v35 = 0;
                v36 = (_BYTE *)v327[16];
                do
                {
                  v37 = v34[17];
                  if ((unint64_t)v36 >= v37)
                  {
                    v39 = *v324;
                    v40 = &v36[-*v324];
                    v41 = (unint64_t)(v40 + 1);
                    if ((uint64_t)(v40 + 1) < 0)
                      std::vector<void const*>::__throw_length_error[abi:ne180100]();
                    v42 = v37 - v39;
                    if (2 * v42 > v41)
                      v41 = 2 * v42;
                    if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
                      v43 = 0x7FFFFFFFFFFFFFFFLL;
                    else
                      v43 = v41;
                    if (v43)
                      v44 = (char *)operator new(v43);
                    else
                      v44 = 0;
                    v45 = &v40[(_QWORD)v44];
                    v46 = &v40[(_QWORD)v44];
                    *v46 = 1;
                    v38 = v46 + 1;
                    if (v36 != (_BYTE *)v39)
                    {
                      v47 = &v36[~v39];
                      do
                      {
                        v48 = *--v36;
                        (v47--)[(_QWORD)v44] = v48;
                      }
                      while (v36 != (_BYTE *)v39);
                      v36 = (_BYTE *)*v324;
                      v45 = v44;
                    }
                    v327[15] = v45;
                    v327[16] = v38;
                    v327[17] = &v44[v43];
                    if (v36)
                      operator delete(v36);
                  }
                  else
                  {
                    *v36 = 1;
                    v38 = v36 + 1;
                  }
                  v34 = v327;
                  v327[16] = v38;
                  ++v35;
                  v36 = v38;
                }
                while (v35 != v30);
              }
              v1 = v329;
              if (v30)
              {
                v49 = 0;
                v50 = v30;
                do
                {
                  *(_QWORD *)buf = v333;
                  *(_QWORD *)&buf[8] = v334;
                  if (v334)
                  {
                    v51 = (unint64_t *)&v334->__shared_owners_;
                    do
                      v52 = __ldxr(v51);
                    while (__stxr(v52 + 1, v51));
                  }
                  v53 = TStream::ReadLittle32(v333);
                  if (v334)
                  {
                    v54 = (unint64_t *)&v334->__shared_owners_;
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                      std::__shared_weak_count::__release_weak(v334);
                    }
                  }
                  *(_QWORD *)buf = 0;
                  buf[8] = 1;
                  *(_DWORD *)&buf[12] = v53;
                  *(_DWORD *)&buf[16] = v49;
                  *(_DWORD *)&buf[20] = 0;
                  v56 = v327[13];
                  if (v56 >= v327[14])
                  {
                    v57 = std::vector<PoolCue>::__push_back_slow_path<PoolCue>(v325, (uint64_t)buf);
                  }
                  else
                  {
                    *(_QWORD *)v56 = 0;
                    *(_BYTE *)(v56 + 8) = 1;
                    *(_DWORD *)(v56 + 12) = v53;
                    *(_DWORD *)(v56 + 16) = v49;
                    v57 = v56 + 24;
                    *(_DWORD *)(v56 + 20) = 0;
                  }
                  v327[13] = v57;
                  v58 = v327[15];
                  if (v327[16] - v58 > v49)
                    *(_BYTE *)(v58 + v49) = 0;
                  ++v49;
                }
                while (v49 != v50);
              }
              goto LABEL_610;
            }
            *(_QWORD *)buf = v21;
            *(_QWORD *)&buf[8] = v20;
            if (v20)
            {
              v277 = (unint64_t *)&v20->__shared_owners_;
              do
                v278 = __ldxr(v277);
              while (__stxr(v278 + 1, v277));
            }
            TStream::WriteLittle32(v21);
            if (v20)
            {
              v279 = (unint64_t *)&v20->__shared_owners_;
              do
                v280 = __ldaxr(v279);
              while (__stlxr(v280 - 1, v279));
              if (!v280)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v282 = v327[12];
            v281 = v327[13];
            *(_QWORD *)buf = v333;
            *(_QWORD *)&buf[8] = v334;
            if (v334)
            {
              v283 = (unint64_t *)&v334->__shared_owners_;
              do
                v284 = __ldxr(v283);
              while (__stxr(v284 + 1, v283));
            }
            v285 = 0xAAAAAAAAAAAAAAABLL * ((v281 - v282) >> 3);
            TStream::WriteLittle32(v333);
            if (!v334)
              goto LABEL_599;
            v286 = (unint64_t *)&v334->__shared_owners_;
            do
              v287 = __ldaxr(v286);
            while (__stlxr(v287 - 1, v286));
            if (!v287)
            {
              ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
              std::__shared_weak_count::__release_weak(v334);
              if ((_DWORD)v285)
              {
LABEL_600:
                v288 = 0;
                do
                {
                  PoolCue::GetOffset((PoolCue *)(*v325 + 24 * v288));
                  *(_QWORD *)buf = v333;
                  *(_QWORD *)&buf[8] = v334;
                  if (v334)
                  {
                    v289 = (unint64_t *)&v334->__shared_owners_;
                    do
                      v290 = __ldxr(v289);
                    while (__stxr(v290 + 1, v289));
                  }
                  TStream::WriteLittle32(v333);
                  if (v334)
                  {
                    v291 = (unint64_t *)&v334->__shared_owners_;
                    do
                      v292 = __ldaxr(v291);
                    while (__stlxr(v292 - 1, v291));
                    if (!v292)
                    {
                      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                      std::__shared_weak_count::__release_weak(v334);
                    }
                  }
                  ++v288;
                }
                while (v288 != v285);
              }
            }
            else
            {
LABEL_599:
              if ((_DWORD)v285)
                goto LABEL_600;
            }
LABEL_610:
            if (v334)
            {
              v293 = (unint64_t *)&v334->__shared_owners_;
              do
                v294 = __ldaxr(v293);
              while (__stlxr(v294 - 1, v293));
              if (!v294)
              {
                ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
                std::__shared_weak_count::__release_weak(v334);
              }
            }
            v322 = 1;
            break;
          default:
            goto LABEL_509;
        }
      }
    }
LABEL_616:
    v295 = v345;
    if (v345)
    {
      v296 = (unint64_t *)&v345->__shared_owners_;
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
  }
  if ((v322 & 1) != 0)
  {
    v298 = *((_QWORD *)v1 + 6);
    *(_BYTE *)(v298 + 144) = v323 & v10 & 1;
    if ((v323 & v10 & 1) != 0)
    {
      v327[10] = *((_QWORD *)v1 + 2);
      v300 = v298 + 56;
      v299 = *(_QWORD *)(v298 + 56);
      v301 = *(_QWORD *)(v300 + 8) - v299;
      if ((int)(v301 >> 3) >= 1)
      {
        v302 = 0;
        v303 = (v301 >> 3);
        do
        {
          v304 = *(_QWORD *)(*(_QWORD *)(v299 + 8 * v302) + 64);
          v305 = *(_QWORD *)(*(_QWORD *)(v299 + 8 * v302) + 72) - v304;
          if ((int)(v305 >> 3) >= 1)
          {
            v306 = 0;
            v308 = v327[12];
            v307 = v327[13];
            v309 = (v305 >> 3);
            do
            {
              if (v307 != v308)
              {
                v310 = 0;
                v311 = 1;
                while (*(_DWORD *)(v308 + 24 * v310 + 16) != *(_DWORD *)(*(_QWORD *)(v304 + 8 * v306) + 160))
                {
                  v310 = v311;
                  if (0xAAAAAAAAAAAAAAABLL * ((v307 - v308) >> 3) <= v311++)
                    goto LABEL_635;
                }
                ++*(_DWORD *)(v308 + 24 * v310 + 20);
              }
LABEL_635:
              ++v306;
            }
            while (v306 != v309);
          }
          ++v302;
        }
        while (v302 != v303);
      }
    }
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)v1 + 6) + 144) = 0;
  }
  v313 = v350;
  if (v350)
  {
    v314 = (unint64_t *)&v350->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = v354;
  if (v354)
  {
    v317 = (unint64_t *)&v354->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
}

void sub_210AA65D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v68 - 192);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x248]);
  JUMPOUT(0x210AA6A30);
}

void sub_210AA6608()
{
  JUMPOUT(0x210AA6A18);
}

void sub_210AA6618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;

  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](&STACK[0x2B8]);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](&a68);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](&STACK[0x218]);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](&STACK[0x248]);
  JUMPOUT(0x210AA6A30);
}

void sub_210AA6624()
{
  JUMPOUT(0x210AA6674);
}

void sub_210AA6668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v68 - 192);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a68);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x248]);
  _Unwind_Resume(a1);
}

void sub_210AA667C()
{
  JUMPOUT(0x210AA6A14);
}

void sub_210AA6684()
{
  JUMPOUT(0x210AA6A0CLL);
}

void sub_210AA668C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  uint64_t v57;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;

  if (a2)
  {
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v57 - 192);
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
    v59 = (std::__shared_weak_count *)STACK[0x388];
    if (STACK[0x388])
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = (std::__shared_weak_count *)STACK[0x260];
    if (STACK[0x260])
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = (std::__shared_weak_count *)STACK[0x290];
    if (STACK[0x290])
    {
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (a57)
    {
      v68 = (unint64_t *)&a57->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))a57->__on_zero_shared)(a57);
        std::__shared_weak_count::__release_weak(a57);
      }
    }
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_210AA69FC()
{
  __cxa_end_catch();
  JUMPOUT(0x210AA6A04);
}

void sub_210AA6A28(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x210AA6A30);
  __clang_call_terminate(a1);
}

void ConditionalChunk::ConditionalChunk(ConditionalChunk *this, RIFFChunkHeader *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  NSObject *v16;
  TStream *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int Little16;
  unint64_t *v22;
  unint64_t v23;
  TStream *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  TStream *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int Little32;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  NSObject *v42;
  BOOL v43;
  int v44;
  unint64_t v45;
  int *v46;
  _DWORD *v47;
  int *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  int v57;
  _BYTE buf[18];
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  const char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)((char *)a2 + 28);
  v7 = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 7) = 0;
  v8 = (void **)((char *)this + 56);
  *((_OWORD *)this + 1) = v7;
  *(_OWORD *)((char *)this + 28) = v6;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (*(_DWORD *)((char *)this + 18) == 543974499 || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "DlsFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1276;
    v59 = 2080;
    v60 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v61 = 1024;
    v62 = 1276;
    v63 = 2080;
    v64 = "GetHeader().GetType() == ChunkType(kChunkType_Conditional)";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
    v9 = *((_QWORD *)this + 9);
    v10 = (_BYTE *)*((_QWORD *)this + 7);
  }
  if ((unint64_t)(v9 - (_QWORD)v10) <= 0x7F)
  {
    v11 = (_BYTE *)*((_QWORD *)this + 8);
    v12 = (char *)operator new(0x80uLL);
    v13 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFFCLL];
    v14 = v13;
    if (v11 != v10)
    {
      v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
        v15 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v14 - 1) = v15;
        v14 -= 4;
      }
      while (v11 != v10);
    }
    *((_QWORD *)this + 7) = v14;
    *((_QWORD *)this + 8) = v13;
    *((_QWORD *)this + 9) = v12 + 128;
    if (v10)
      operator delete(v10);
  }
  v16 = MEMORY[0x24BDACB70];
  while (!RIFFChunkHeader::IsDone(this))
  {
    v17 = *(TStream **)this;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *(_QWORD *)buf = *(_QWORD *)this;
    *(_QWORD *)&buf[8] = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    Little16 = TStream::ReadLittle16(v17);
    if (v18)
    {
      v22 = (unint64_t *)&v18->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((unsigned __int16)(Little16 - 17) <= 1u)
    {
      v24 = *(TStream **)this;
      v25 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      DLSID::DLSID((DLSID *)buf, v24);
      if (v25)
      {
        v28 = (unint64_t *)&v25->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
LABEL_43:
      v37 = Little16 - 15;
      v38 = *((_QWORD *)this + 8);
      v39 = *(_DWORD *)(v38 - 4);
      if ((Little16 - 15) > 3)
      {
        v41 = *(_DWORD *)(v38 - 8);
        *((_QWORD *)this + 8) = v38 - 8;
        switch(Little16)
        {
          case 1:
            Little32 = v41 & v39;
            break;
          case 2:
            Little32 = v41 | v39;
            break;
          case 3:
            Little32 = v41 ^ v39;
            break;
          case 4:
            Little32 = v41 + v39;
            break;
          case 5:
            Little32 = v39 - v41;
            break;
          case 6:
            Little32 = v41 * v39;
            break;
          case 7:
            Little32 = v39 / v41;
            break;
          case 8:
            if (v39)
              v43 = v41 == 0;
            else
              v43 = 1;
            v44 = !v43;
            Little32 = v44 << 31 >> 31;
            break;
          case 9:
            if (v39 | v41)
              Little32 = -1;
            else
              Little32 = 0;
            break;
          case 10:
            if (v39 >= v41)
              Little32 = 0;
            else
              Little32 = -1;
            break;
          case 11:
            if (v39 > v41)
              Little32 = 0;
            else
              Little32 = -1;
            break;
          case 12:
            if (v39 <= v41)
              Little32 = 0;
            else
              Little32 = -1;
            break;
          case 13:
            if (v39 < v41)
              Little32 = 0;
            else
              Little32 = -1;
            break;
          case 14:
            v40 = v39 == v41;
LABEL_76:
            if (v40)
              Little32 = -1;
            else
              Little32 = 0;
            break;
          default:
            goto LABEL_53;
        }
      }
      else
      {
        Little32 = 0;
        *((_QWORD *)this + 8) = v38 - 4;
        switch(v37)
        {
          case 0:
            v40 = v39 == 0;
            goto LABEL_76;
          case 2:
            Little32 = 0;
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              goto LABEL_79;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "DlsFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1529;
            v59 = 2080;
            v60 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
            v61 = 1024;
            v62 = 1529;
            v63 = 2080;
            v64 = "0";
            v42 = v16;
            break;
          case 3:
            Little32 = 0;
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              goto LABEL_79;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "DlsFile.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1491;
            v59 = 2080;
            v60 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
            v61 = 1024;
            v62 = 1491;
            v63 = 2080;
            v64 = "0";
            v42 = v16;
            break;
          default:
            goto LABEL_79;
        }
        _os_log_impl(&dword_210A23000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
LABEL_53:
        Little32 = 0;
      }
      goto LABEL_79;
    }
    if (Little16 != 16)
      goto LABEL_43;
    v30 = *(TStream **)this;
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    *(_QWORD *)buf = *(_QWORD *)this;
    *(_QWORD *)&buf[8] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Little32 = TStream::ReadLittle32(v30);
    if (v31)
    {
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    *((_QWORD *)this + 8) -= 4;
LABEL_79:
    v46 = (int *)*((_QWORD *)this + 8);
    v45 = *((_QWORD *)this + 9);
    if ((unint64_t)v46 >= v45)
    {
      v48 = (int *)*v8;
      v49 = ((char *)v46 - (_BYTE *)*v8) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v51 = v45 - (_QWORD)v48;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v52);
        v48 = (int *)*((_QWORD *)this + 7);
        v46 = (int *)*((_QWORD *)this + 8);
      }
      else
      {
        v53 = 0;
      }
      v54 = (int *)(v52 + 4 * v49);
      *v54 = Little32;
      v47 = v54 + 1;
      while (v46 != v48)
      {
        v55 = *--v46;
        *--v54 = v55;
      }
      *((_QWORD *)this + 7) = v54;
      *((_QWORD *)this + 8) = v47;
      *((_QWORD *)this + 9) = v52 + 4 * v53;
      if (v48)
        operator delete(v48);
    }
    else
    {
      *v46 = Little32;
      v47 = v46 + 1;
    }
    *((_QWORD *)this + 8) = v47;
  }
  v56 = *((_QWORD *)this + 8);
  v57 = *(_DWORD *)(v56 - 4);
  *((_QWORD *)this + 8) = v56 - 4;
  *((_BYTE *)this + 48) = v57 != 0;
}

void sub_210AA7044(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v4;
    operator delete(v4);
  }
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DLSID::DLSID(DLSID *this, TStream *a2)
{
  *(_DWORD *)this = TStream::ReadLittle32(a2);
  *((_WORD *)this + 2) = TStream::ReadLittle16(a2);
  *((_WORD *)this + 3) = TStream::ReadLittle16(a2);
  (*(void (**)(TStream *, char *, uint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)this + 8, 8);
}

uint64_t PoolCue::GetOffset(PoolCue *this)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 8) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136316162;
    v4 = "DlsPoolTable.h";
    v5 = 1024;
    v6 = 83;
    v7 = 2080;
    v8 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsPoolTable.h";
    v9 = 1024;
    v10 = 83;
    v11 = 2080;
    v12 = "HasOffset()";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", (uint8_t *)&v3, 0x2Cu);
  }
  return *((unsigned int *)this + 3);
}

void ArticulationList::ArticulationList(ArticulationList *this, RIFFChunkHeader *a2, Articulations *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v10;
  char *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  TStream *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int Little32;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int i;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t DefaultArticulations;
  uint64_t v38;
  unsigned __int16 *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t j;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  TStream *v72;
  std::__shared_weak_count *v73;
  char v74;
  TStream *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  int v78;
  _BYTE buf[28];
  __int16 v80;
  int v81;
  __int16 v82;
  const char *v83;
  _BYTE v84[18];
  __int16 v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  const char *v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_OWORD *)((char *)a2 + 28);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *(_OWORD *)((char *)this + 28) = v7;
  if (!*((_BYTE *)this + 17) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "DlsFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1185;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v80 = 1024;
    v81 = 1185;
    v82 = 2080;
    v83 = "GetHeader().IsListType()";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  v8 = bswap32(*((_DWORD *)this + 10));
  if (v8 != 1818325554 && v8 != 1818325620 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "DlsFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1187;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v80 = 1024;
    v81 = 1187;
    v82 = 2080;
    v83 = "GetHeader().GetSubType() == ChunkType(kChunkType_ArticulationList2) || GetHeader().GetSubType() == ChunkType(k"
          "ChunkType_ArticulationList)";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (*((_BYTE *)this + 16))
  {
    *(_QWORD *)&v10 = 0x101010101010101;
    *((_QWORD *)&v10 + 1) = 0x101010101010101;
    *(_OWORD *)((char *)a3 + 8) = v10;
    v11 = (char *)a3 + 8;
    *((_QWORD *)a3 + 7) = 0x101010101010101;
    v12 = MEMORY[0x24BDACB70];
    *(_OWORD *)((char *)a3 + 24) = v10;
    *(_OWORD *)((char *)a3 + 40) = v10;
    while (1)
    {
      if (RIFFChunkHeader::IsDone(this))
        return;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[18] = 1061109567;
      HIDWORD(v83) = 1061109567;
      RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)buf, *(RIFFChunkHeader **)this, *((_QWORD *)this + 1));
      v14 = *(TStream **)buf;
      v13 = *(std::__shared_weak_count **)&buf[8];
      v72 = *(TStream **)buf;
      v73 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v74 = buf[16];
      if (bswap32(*(_QWORD *)&buf[16] >> 16) - 1634890801 >= 2 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v84 = 136316162;
        *(_QWORD *)&v84[4] = "DlsFile.cpp";
        *(_WORD *)&v84[12] = 1024;
        *(_DWORD *)&v84[14] = 1217;
        v85 = 2080;
        v86 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
        v87 = 1024;
        v88 = 1217;
        v89 = 2080;
        v90 = "GetHeader().GetType() == ChunkType(kChunkType_Articulation2) || GetHeader().GetType() == ChunkType(kChunkT"
              "ype_Articulation1)";
        _os_log_impl(&dword_210A23000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v84, 0x2Cu);
      }
      if (!v74)
        break;
      *(_QWORD *)v84 = v14;
      *(_QWORD *)&v84[8] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
      }
      Little32 = TStream::ReadLittle32(v14);
      if (v13)
      {
        v20 = (unint64_t *)&v13->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *(_QWORD *)v84 = v72;
      *(_QWORD *)&v84[8] = v73;
      if (v73)
      {
        v22 = (unint64_t *)&v73->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = TStream::ReadLittle32(v72);
      if (v73)
      {
        v25 = (unint64_t *)&v73->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (Little32 < 9)
        goto LABEL_46;
      *(_QWORD *)v84 = v72;
      *(_QWORD *)&v84[8] = v73;
      if (v73)
      {
        v27 = (unint64_t *)&v73->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      (*(void (**)(TStream *, _QWORD))(*(_QWORD *)v72 + 64))(v72, Little32 - 8);
      if (!v73)
        goto LABEL_46;
      v29 = (unint64_t *)&v73->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (!v24)
          goto LABEL_121;
      }
      else
      {
LABEL_46:
        if (!v24)
          goto LABEL_121;
      }
      for (i = 0; i != v24; ++i)
      {
        *(_QWORD *)v84 = v72;
        *(_QWORD *)&v84[8] = v73;
        if (v73)
        {
          v32 = (unint64_t *)&v73->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v76 = v73;
          do
            v34 = __ldxr(v32);
          while (__stxr(v34 + 1, v32));
        }
        else
        {
          v76 = 0;
        }
        v75 = v72;
        ConnectionBlockChunk::ConnectionBlockChunk(&v75, (uint64_t)&v77, 1);
        if (v73)
        {
          v35 = (unint64_t *)&v73->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        DefaultArticulations = GetDefaultArticulations();
        v38 = 0;
        v39 = (unsigned __int16 *)(DefaultArticulations + 300);
        while ((unsigned __int16)v77 != *(v39 - 2)
             || __PAIR64__(WORD2(v77), WORD1(v77)) != __PAIR64__(*v39, *(v39 - 1)))
        {
          ++v38;
          v39 += 6;
          if (v38 == 56)
            goto LABEL_64;
        }
        if ((_DWORD)v38 != -1)
          Articulations::SetParameterValue(a3, v38, v78);
LABEL_64:
        v40 = *(std::__shared_weak_count **)&v84[8];
        if (*(_QWORD *)&v84[8])
        {
          v41 = (unint64_t *)(*(_QWORD *)&v84[8] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
      }
LABEL_121:
      if (v73)
      {
        v65 = (unint64_t *)&v73->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      v67 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v68 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
    *(_QWORD *)v84 = v14;
    *(_QWORD *)&v84[8] = v13;
    if (v13)
    {
      v43 = (unint64_t *)&v13->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    TStream::WriteLittle32(v14);
    if (v13)
    {
      v45 = (unint64_t *)&v13->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v47 = 0;
    for (j = 8; j != 64; ++j)
    {
      if (!*((_BYTE *)a3 + j))
        ++v47;
    }
    *(_QWORD *)v84 = v72;
    *(_QWORD *)&v84[8] = v73;
    if (v73)
    {
      v49 = (unint64_t *)&v73->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    TStream::WriteLittle32(v72);
    if (!v73)
      goto LABEL_92;
    v51 = (unint64_t *)&v73->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
      if (!v47)
        goto LABEL_121;
    }
    else
    {
LABEL_92:
      if (!v47)
        goto LABEL_121;
    }
    v53 = 0;
LABEL_94:
    v54 = 0;
    v55 = 0;
    while (1)
    {
      if (!v11[v54])
      {
        if (v55 == v53)
        {
          v56 = GetDefaultArticulations() + 12 * v54;
          v77 = *(_QWORD *)(v56 + 296);
          v78 = *(_DWORD *)(v56 + 304);
          if (!v11[v54])
            v78 = *((_DWORD *)a3 + v54 + 16);
LABEL_103:
          *(_QWORD *)v84 = v72;
          *(_QWORD *)&v84[8] = v73;
          if (v73)
          {
            v57 = (unint64_t *)&v73->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
            v76 = v73;
            do
              v59 = __ldxr(v57);
            while (__stxr(v59 + 1, v57));
          }
          else
          {
            v76 = 0;
          }
          v75 = v72;
          ConnectionBlockChunk::ConnectionBlockChunk(&v75, (uint64_t)&v77, 0);
          if (v73)
          {
            v60 = (unint64_t *)&v73->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          v62 = *(std::__shared_weak_count **)&v84[8];
          if (*(_QWORD *)&v84[8])
          {
            v63 = (unint64_t *)(*(_QWORD *)&v84[8] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          if (++v53 == v47)
            goto LABEL_121;
          goto LABEL_94;
        }
        ++v55;
      }
      if (++v54 == 56)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v84 = 136316162;
          *(_QWORD *)&v84[4] = "Articulations.cpp";
          *(_WORD *)&v84[12] = 1024;
          *(_DWORD *)&v84[14] = 578;
          v85 = 2080;
          v86 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/PublicAudioUnits/DlsSynth/Articulations.cpp";
          v87 = 1024;
          v88 = 578;
          v89 = 2080;
          v90 = "0";
          _os_log_impl(&dword_210A23000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v84, 0x2Cu);
        }
        goto LABEL_103;
      }
    }
  }
}

void sub_210AA7AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v7 - 160);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

uint64_t ConnectionBlockChunk::ConnectionBlockChunk(TStream **a1, uint64_t a2, int a3)
{
  TStream *v5;
  uint64_t result;

  v5 = *a1;
  if (a3)
  {
    *(_WORD *)a2 = TStream::ReadLittle16(v5);
    *(_WORD *)(a2 + 2) = TStream::ReadLittle16(*a1);
    *(_WORD *)(a2 + 4) = TStream::ReadLittle16(*a1);
    *(_WORD *)(a2 + 6) = TStream::ReadLittle16(*a1);
    result = TStream::ReadLittle32(*a1);
    *(_DWORD *)(a2 + 8) = result;
  }
  else
  {
    TStream::WriteLittle16(v5);
    TStream::WriteLittle16(*a1);
    TStream::WriteLittle16(*a1);
    TStream::WriteLittle16(*a1);
    return TStream::WriteLittle32(*a1);
  }
  return result;
}

void ConditionalChunk::~ConditionalChunk(ConditionalChunk *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t WaveSampleChunk::WaveSampleChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  __int128 v9;
  TStream *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  TStream *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 Little16;
  unint64_t *v21;
  unint64_t v22;
  TStream *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t *v28;
  unint64_t v29;
  TStream *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int Little32;
  unint64_t *v35;
  unint64_t v36;
  TStream *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  TStream *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  TStream *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  TStream *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  TStream *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  TStream *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  TStream *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  TStream *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  TStream *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  TStream *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  TStream *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  TStream *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  TStream *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  TStream *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  _BYTE buf[18];
  __int16 v129;
  const char *v130;
  __int16 v131;
  int v132;
  __int16 v133;
  const char *v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_BYTE *)(a1 + 16);
  v9 = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = v9;
  if (*(_DWORD *)(a1 + 18) != 1886221175 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "DlsFile.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 650;
    v129 = 2080;
    v130 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v131 = 1024;
    v132 = 650;
    v133 = 2080;
    v134 = "GetHeader().GetType() == ChunkType(kChunkType_WaveSampleChunk)";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (*v8)
  {
    v10 = *(TStream **)a1;
    v11 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    TStream::ReadLittle32(v10);
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v16 = *(TStream **)a1;
    v17 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    Little16 = TStream::ReadLittle16(v16);
    if (v17)
    {
      v21 = (unint64_t *)&v17->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v23 = *(TStream **)a1;
    v24 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v27 = TStream::ReadLittle16(v23);
    if (v24)
    {
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v30 = *(TStream **)a1;
    v31 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    Little32 = TStream::ReadLittle32(v30);
    if (v31)
    {
      v35 = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v37 = *(TStream **)a1;
    v38 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = TStream::ReadLittle32(v37);
    if (v38)
    {
      v42 = (unint64_t *)&v38->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v44 = *(TStream **)a1;
    v45 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = TStream::ReadLittle32(v44);
    if (v45)
    {
      v49 = (unint64_t *)&v45->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    *(_WORD *)a3 = Little16;
    *(_WORD *)(a3 + 2) = v27;
    *(_DWORD *)(a3 + 4) = Little32;
    *(_DWORD *)(a3 + 8) = v41;
    if (v48)
    {
      v51 = *(TStream **)a1;
      v52 = *(std::__shared_weak_count **)(a1 + 8);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      TStream::ReadLittle32(v51);
      v55 = TStream::ReadLittle32(v51);
      v56 = TStream::ReadLittle32(v51);
      v57 = TStream::ReadLittle32(v51);
      if (v52)
      {
        v58 = (unint64_t *)&v52->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v48 >= 2)
      {
        v60 = *(TStream **)a1;
        v61 = *(std::__shared_weak_count **)(a1 + 8);
        *(_QWORD *)buf = *(_QWORD *)a1;
        *(_QWORD *)&buf[8] = v61;
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
        (*(void (**)(TStream *, uint64_t))(*(_QWORD *)v60 + 64))(v60, 16 * (v48 - 1));
        if (v61)
        {
          v64 = (unint64_t *)&v61->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
      }
      *(_QWORD *)(a3 + 12) = __PAIR64__(v56, v55);
      *(_DWORD *)(a3 + 20) = v57;
    }
    else
    {
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 12) = 0;
    }
  }
  else
  {
    v66 = *(_DWORD *)(a3 + 20);
    v67 = *(TStream **)a1;
    v68 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    TStream::WriteLittle32(v67);
    if (v68)
    {
      v71 = (unint64_t *)&v68->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v73 = *(TStream **)a1;
    v74 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v74;
    if (v74)
    {
      v75 = (unint64_t *)&v74->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    TStream::WriteLittle16(v73);
    if (v74)
    {
      v77 = (unint64_t *)&v74->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v79 = *(TStream **)a1;
    v80 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v80;
    if (v80)
    {
      v81 = (unint64_t *)&v80->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    TStream::WriteLittle16(v79);
    if (v80)
    {
      v83 = (unint64_t *)&v80->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    v85 = *(TStream **)a1;
    v86 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v86;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    TStream::WriteLittle32(v85);
    if (v86)
    {
      v89 = (unint64_t *)&v86->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v91 = *(TStream **)a1;
    v92 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v92;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    TStream::WriteLittle32(v91);
    if (v92)
    {
      v95 = (unint64_t *)&v92->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v97 = *(TStream **)a1;
    v98 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v98;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    TStream::WriteLittle32(v97);
    if (!v98)
      goto LABEL_122;
    v101 = (unint64_t *)&v98->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      if (!v66)
        return a1;
    }
    else
    {
LABEL_122:
      if (!v66)
        return a1;
    }
    v103 = *(TStream **)a1;
    v104 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v104;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    TStream::WriteLittle32(v103);
    if (v104)
    {
      v107 = (unint64_t *)&v104->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v109 = *(TStream **)a1;
    v110 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v110;
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
    }
    TStream::WriteLittle32(v109);
    if (v110)
    {
      v113 = (unint64_t *)&v110->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    v115 = *(TStream **)a1;
    v116 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v116;
    if (v116)
    {
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
    }
    TStream::WriteLittle32(v115);
    if (v116)
    {
      v119 = (unint64_t *)&v116->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    v121 = *(TStream **)a1;
    v122 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)buf = *(_QWORD *)a1;
    *(_QWORD *)&buf[8] = v122;
    if (v122)
    {
      v123 = (unint64_t *)&v122->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    TStream::WriteLittle32(v121);
    if (v122)
    {
      v125 = (unint64_t *)&v122->__shared_owners_;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
  return a1;
}

void sub_210AA8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_210AA848C()
{
  JUMPOUT(0x210AA8478);
}

uint64_t ConnectionState::ResetToDefaults(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  return this;
}

uint64_t ConnectionState::GetProperty(ConnectionState *this, int a2, int *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t (*Function)(float);
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  int v14;
  float v15;
  float v16;
  _BOOL4 v17;
  float v18;
  double v19;
  CAXException *exception;
  uint8_t v22[16];
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 4300:
      v5 = *((_DWORD *)this + 23);
      goto LABEL_11;
    case 4301:
      v5 = *((_DWORD *)this + 24);
      goto LABEL_11;
    case 4302:
      v5 = *((_DWORD *)this + 29);
      goto LABEL_11;
    case 4303:
      v6 = *((_DWORD *)this + 28);
      if (v6 < 5)
        v5 = v6 + 1;
      else
        v5 = -1;
      goto LABEL_11;
    case 4304:
      v5 = *((unsigned __int8 *)this + 108);
      goto LABEL_11;
    case 4305:
      v5 = *((unsigned __int8 *)this + 120);
LABEL_11:
      *a3 = v5;
      return 1;
    case 4306:
      v7 = *((_DWORD *)this + 25);
      goto LABEL_13;
    case 4307:
      v7 = *((_DWORD *)this + 26);
LABEL_13:
      *a3 = v7;
      return 1;
    case 4308:
      Function = Transform::GetFunction(*((_DWORD *)this + 28));
      v10 = 0;
      v11 = MEMORY[0x24BDACB70];
      v12.n128_u32[1] = 0;
      break;
    default:
      return ComponentState::GetProperty(this, a2, a3);
  }
  do
  {
    v12.n128_u32[0] = a3[v10];
    if (v12.n128_f32[0] == -1.0)
      break;
    if (v12.n128_f32[0] < 0.0 || v12.n128_f32[0] > 1.0)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v22, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v24 = "ConnectionState.cpp";
        v25 = 1024;
        v26 = 435;
        v27 = 2080;
        v28 = COERCE_DOUBLE(v22);
        v29 = 2080;
        v30 = COERCE_DOUBLE("Illegal curve location value");
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Illegal curve location value", -10851);
    }
    v14 = *((_DWORD *)this + 31);
    if (*((_BYTE *)this + 108))
      v12.n128_f32[0] = 1.0 - v12.n128_f32[0];
    if (*((float *)this + 25) == (float)-*((float *)this + 26))
    {
      if (v14 != 1)
        goto LABEL_28;
    }
    else if (v14 == 2)
    {
LABEL_28:
      if ((*((_DWORD *)this + 28) - 1) > 1)
      {
        v15 = (float)(((float (*)(__n128))Function)(v12) * 2.0) + -1.0;
      }
      else
      {
        v16 = (float)(v12.n128_f32[0] * 2.0) + -1.0;
        v17 = v16 < 0.0;
        v12.n128_f32[0] = -v16;
        if (v16 >= 0.0)
          v12.n128_f32[0] = v16;
        v18 = ((float (*)(__n128))Function)(v12);
        if (v17)
          v15 = -v18;
        else
          v15 = v18;
      }
      goto LABEL_35;
    }
    v15 = ((float (*)(__n128))Function)(v12);
LABEL_35:
    *(float *)&a3[v10 + 1] = v15;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(float *)&a3[v10];
      *(_DWORD *)buf = 136315906;
      v24 = "ConnectionState.cpp";
      v25 = 1024;
      v26 = 438;
      v27 = 2048;
      v28 = v19;
      v29 = 2048;
      v30 = v15;
      _os_log_impl(&dword_210A23000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::GetCurveValues: loc %.2f\tval %.2f", buf, 0x26u);
    }
    v10 += 2;
  }
  while ((_DWORD)(v10 * 4) != 0x2000);
  return 1;
}

void sub_210AA8808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ConnectionState::SetProperty(LayerState **this, int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t result;
  CAXException *exception;
  _BYTE v12[16];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  LayerState **v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v14 = "ConnectionState.cpp";
      v15 = 1024;
      v16 = 192;
      v17 = 2080;
      v18 = (LayerState **)v12;
      v19 = 2080;
      v20 = "ConnectionState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4300:
      v4 = *a3;
      v5 = *((unsigned int *)this + 23);
      if ((_DWORD)v5 != (_DWORD)v4)
      {
        LayerState::NotifyConnectionChange(this[3], 4300, v5, v4);
        *((_DWORD *)this + 23) = v4;
        (*((void (**)(LayerState **, uint64_t, _QWORD))*this + 14))(this, 4300, 0);
      }
      goto LABEL_18;
    case 4301:
      v8 = *a3;
      if (*((_DWORD *)this + 24) != *a3)
      {
        LayerState::SortConnections(*((LayerState **)this[3] + 65), *((LayerState **)this[3] + 66));
        *((_DWORD *)this + 24) = v8;
        (*((void (**)(LayerState **, uint64_t, _QWORD))*this + 14))(this, 4301, 0);
      }
      goto LABEL_18;
    case 4302:
      v6 = *a3;
      v7 = *((unsigned int *)this + 29);
      if ((_DWORD)v7 != (_DWORD)v6)
      {
        LayerState::NotifyConnectionChange(this[3], 4302, v7, v6);
        *((_DWORD *)this + 29) = v6;
        (*((void (**)(LayerState **, uint64_t, _QWORD))*this + 14))(this, 4302, 0);
      }
      goto LABEL_18;
    case 4303:
      ConnectionState::SetTransformType(this, *a3);
      goto LABEL_18;
    case 4304:
      ConnectionState::SetInverse(this, *a3 != 0);
      goto LABEL_18;
    case 4305:
      v9 = *a3 != 0;
      if (*((unsigned __int8 *)this + 120) != v9)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          v14 = "ConnectionState.cpp";
          v15 = 1024;
          v16 = 392;
          v17 = 2048;
          v18 = this;
          v19 = 1024;
          LODWORD(v20) = v9;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetControlInverse(%p, %d)", buf, 0x22u);
        }
        *((_BYTE *)this + 120) = v9;
        (*((void (**)(LayerState **, uint64_t, _QWORD))*this + 14))(this, 4305, 0);
      }
      goto LABEL_18;
    case 4306:
      ConnectionState::SetMinValue((float *)this, *(float *)a3);
      goto LABEL_18;
    case 4307:
      ConnectionState::SetMaxValue((float *)this, *(float *)a3);
LABEL_18:
      result = 1;
      break;
    default:
      result = ComponentState::SetProperty((ComponentState *)this, a2, a3);
      break;
  }
  return result;
}

void sub_210AA8B34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ConnectionState::Save(ConnectionState *this, CACFDictionary *a2)
{
  float v4;
  const __CFString *v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  ConnectionState *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v7 = 136315650;
    v8 = "ConnectionState.cpp";
    v9 = 1024;
    v10 = 227;
    v11 = 2048;
    v12 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::Save(this=%p)", (uint8_t *)&v7, 0x1Cu);
  }
  ComponentState::Save((const __CFString **)this, a2);
  CACFDictionary::AddUInt32(a2, CFSTR("source"));
  CACFDictionary::AddUInt32(a2, CFSTR("destination"));
  v4 = *((float *)this + 25);
  if (v4 == 0.0)
  {
    v5 = CFSTR("scale");
  }
  else
  {
    CACFDictionary::AddFloat32(a2, CFSTR("min value"), v4);
    v5 = CFSTR("max value");
  }
  CACFDictionary::AddFloat32(a2, v5, *((float *)this + 26));
  CACFDictionary::AddBool(a2, CFSTR("inverse"));
  CACFDictionary::AddUInt32(a2, CFSTR("transform"));
  CACFDictionary::AddUInt32(a2, CFSTR("control"));
  if (*((_BYTE *)this + 120))
    CACFDictionary::AddBool(a2, CFSTR("control inverse"));
  return 0;
}

uint64_t ConnectionState::Restore(ConnectionState *this, const CACFDictionary *a2)
{
  uint64_t v4;
  int Bool;
  int v6;
  float v7;
  char Float32;
  char v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  int v15;
  int v16;
  CAXException *exception;
  CAXException *v19;
  CAXException *v20;
  BOOL v21[4];
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BYTE v27[10];
  const char *v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  _BYTE v36[16];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = ComponentState::Restore(this, a2);
  if (!*(_QWORD *)a2)
    return v4;
  if ((CACFDictionary::GetUInt32(a2, CFSTR("source"), (unsigned int *)v21) & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v23 = "ConnectionState.cpp";
      v24 = 1024;
      v25 = 269;
      v26 = 2080;
      *(_QWORD *)v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      v28 = "ConnectionState::Restore: Connection must include source ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::Restore: Connection must include source ID", -10851);
  }
  *((_DWORD *)this + 23) = *(_DWORD *)v21;
  if ((CACFDictionary::GetUInt32(a2, CFSTR("destination"), (unsigned int *)v21) & 1) == 0)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v23 = "ConnectionState.cpp";
      v24 = 1024;
      v25 = 272;
      v26 = 2080;
      *(_QWORD *)v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      v28 = "ConnectionState::Restore: Connection must include destination ID";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v19 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v19, "ConnectionState::Restore: Connection must include destination ID", -10851);
  }
  *((_DWORD *)this + 24) = *(_DWORD *)v21;
  if (CACFDictionary::GetFloat32(a2, CFSTR("scale"), (float *)v21))
  {
    ConnectionState::SetMaxValue((float *)this, *(float *)v21);
    Bool = CACFDictionary::GetBool(a2, CFSTR("bipolar"), v21);
    if (v21[0])
      v6 = Bool;
    else
      v6 = 0;
    v7 = 0.0;
    if (v6 == 1)
      v7 = -*((float *)this + 26);
    ConnectionState::SetMinValue((float *)this, v7);
    goto LABEL_13;
  }
  *(_DWORD *)v21 = 0;
  Float32 = CACFDictionary::GetFloat32(a2, CFSTR("min value"), (float *)v21);
  *((_DWORD *)this + 25) = *(_DWORD *)v21;
  *(_DWORD *)v21 = 0;
  if ((Float32 & 1) == 0)
  {
    *((_DWORD *)this + 26) = 0;
LABEL_31:
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v36, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v23 = "ConnectionState.cpp";
      v24 = 1024;
      v25 = 294;
      v26 = 2080;
      *(_QWORD *)v27 = v36;
      *(_WORD *)&v27[8] = 2080;
      v28 = "ConnectionState::Restore: Connection must include min/max or scale value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v20 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v20, "ConnectionState::Restore: Connection must include min/max or scale value", -10851);
  }
  v9 = CACFDictionary::GetFloat32(a2, CFSTR("max value"), (float *)v21);
  *((_DWORD *)this + 26) = *(_DWORD *)v21;
  if ((v9 & 1) == 0)
    goto LABEL_31;
LABEL_13:
  if (CACFDictionary::GetBool(a2, CFSTR("inverse"), v21))
    ConnectionState::SetInverse(this, v21[0]);
  if (CACFDictionary::GetUInt32(a2, CFSTR("transform"), (unsigned int *)v21))
    ConnectionState::SetTransformType(this, *(int *)v21);
  if (CACFDictionary::GetUInt32(a2, CFSTR("control"), (unsigned int *)v21))
    *((_DWORD *)this + 29) = *(_DWORD *)v21;
  if (CACFDictionary::GetUInt32(a2, CFSTR("control inverse"), (unsigned int *)v21))
    *((_BYTE *)this + 120) = *(_DWORD *)v21 != 0;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v10 = (**(uint64_t (***)(ConnectionState *))this)(this);
    v11 = *((_DWORD *)this + 23);
    v12 = *((_DWORD *)this + 24);
    v13 = *((float *)this + 25);
    v14 = *((float *)this + 26);
    v15 = *((unsigned __int8 *)this + 108);
    v16 = *((_DWORD *)this + 28);
    *(_DWORD *)buf = 136317186;
    v23 = "ConnectionState.cpp";
    v24 = 1024;
    v25 = 304;
    v26 = 1024;
    *(_DWORD *)v27 = v10;
    *(_WORD *)&v27[4] = 1024;
    *(_DWORD *)&v27[6] = v11;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = v12;
    HIWORD(v28) = 2048;
    v29 = v13;
    v30 = 2048;
    v31 = v14;
    v32 = 1024;
    v33 = v15;
    v34 = 1024;
    v35 = v16;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::Restore: id 0x%x src 0x%x dst 0x%x min %f max %f inv %d trn 0x%x", buf, 0x44u);
  }
  return v4;
}

void sub_210AA91E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ConnectionState::~ConnectionState(ConnectionState *this)
{
  ConnectionState::~ConnectionState(this);
  JUMPOUT(0x212BCDF50);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24CA8E7D0;
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    MEMORY[0x212BCDF50](v2, 0x1000C403E1C8BA9);
  SamplerState::~SamplerState(this);
}

float *ConnectionState::SetMaxValue(float *this, float a2)
{
  float *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  float *v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (this[26] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315906;
      v5 = "ConnectionState.cpp";
      v6 = 1024;
      v7 = 348;
      v8 = 2048;
      v9 = v3;
      v10 = 2048;
      v11 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetMaxValue(%p, %g)", (uint8_t *)&v4, 0x26u);
    }
    v3[26] = a2;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4307, 0);
  }
  return this;
}

float *ConnectionState::SetMinValue(float *this, float a2)
{
  float *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  float *v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (this[25] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315906;
      v5 = "ConnectionState.cpp";
      v6 = 1024;
      v7 = 339;
      v8 = 2048;
      v9 = v3;
      v10 = 2048;
      v11 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetMinValue(%p, %g)", (uint8_t *)&v4, 0x26u);
    }
    v3[25] = a2;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4306, 0);
  }
  return this;
}

_BYTE *ConnectionState::SetInverse(_BYTE *this, int a2)
{
  _BYTE *v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  _BYTE *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (this[108] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315906;
      v5 = "ConnectionState.cpp";
      v6 = 1024;
      v7 = 357;
      v8 = 2048;
      v9 = v3;
      v10 = 1024;
      v11 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetInverse(%p, %d)", (uint8_t *)&v4, 0x22u);
    }
    v3[108] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4304, 0);
  }
  return this;
}

_DWORD *ConnectionState::SetTransformType(_DWORD *this, int a2)
{
  int v2;
  _DWORD *v3;
  CAXException *exception;
  _BYTE v6[16];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  _BYTE *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = a2 - 1;
  if ((a2 - 1) >= 4)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v6, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v8 = "ConnectionState.cpp";
      v9 = 1024;
      v10 = 380;
      v11 = 2080;
      v12 = v6;
      v13 = 2080;
      v14 = "ConnectionState::SetTransformType: Invalid connection transform type";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ConnectionState::SetTransformType: Invalid connection transform type", -10851);
  }
  v3 = this;
  if (this[28] != v2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "ConnectionState.cpp";
      v9 = 1024;
      v10 = 383;
      v11 = 2048;
      v12 = v3;
      v13 = 1024;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ConnectionState::SetTransformType(%p, %d)", buf, 0x22u);
    }
    v3[28] = v2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4303, 0);
  }
  return this;
}

void sub_210AA9738(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ConnectionState::ConnectionState(SamplerState *a1, SamplerState *a2)
{
  uint64_t v2;
  double result;

  SamplerState::SamplerState(a1, 7, 0, a2, 0x20u);
  *(_QWORD *)v2 = &off_24CA8E7D0;
  *(_QWORD *)(v2 + 88) = 1610612736;
  *(_DWORD *)(v2 + 96) = 0;
  result = 0.0078125;
  *(_QWORD *)(v2 + 100) = 0x3F80000000000000;
  *(_BYTE *)(v2 + 108) = 0;
  *(_DWORD *)(v2 + 124) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 120) = 0;
  return result;
}

uint64_t ConnectionState::GetPropertyInfo(ConnectionState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  char v4;
  int v5;
  uint64_t v6;

  v4 = 0;
  v5 = 4;
  switch((int)this)
  {
    case 4300:
    case 4302:
      goto LABEL_3;
    case 4301:
    case 4303:
    case 4304:
    case 4305:
    case 4306:
    case 4307:
      goto LABEL_2;
    case 4308:
      v4 = 0;
      v5 = 0x2000;
      goto LABEL_3;
    default:
      if ((_DWORD)this == 4120)
      {
        v5 = 8;
      }
      else
      {
        v6 = 0;
        if ((_DWORD)this != 4121)
          return v6;
        v5 = 4;
      }
LABEL_2:
      v4 = 1;
LABEL_3:
      *a2 = v5;
      *(_BYTE *)a3 = v4;
      return 1;
  }
}

_QWORD *std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v9;

  v4 = *(_QWORD **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = (a2 >> 24) & 0xFFFFFF00 | a2;
  v6 = v2;
  do
  {
    v7 = (v3[4] >> 24) & 0xFFFFFF00 | v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < ((v6[4] >> 24) & 0xFFFFFF00 | v6[4]))
    return v2;
  return v6;
}

_QWORD *DLSBankManager::GetInstance(DLSBankManager *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)DLSBankManager::sManagerInstance;
  if (!DLSBankManager::sManagerInstance)
  {
    v1 = (_QWORD *)operator new();
    v1[1] = 0;
    v1[2] = 0;
    *v1 = 0;
    MEMORY[0x212BCD644](v1 + 3, "DLSBankManager lock");
    DLSBankManager::sManagerInstance = (uint64_t)v1;
  }
  return v1;
}

void sub_210AA98FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  MEMORY[0x212BCDF50](v1, 0x10F0C401840559CLL);
  _Unwind_Resume(a1);
}

void DLSBankManager::Destroy(DLSBankManager *this)
{
  uint64_t v1;
  void *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = DLSBankManager::sManagerInstance;
  if (DLSBankManager::sManagerInstance)
  {
    if (*(_QWORD *)DLSBankManager::sManagerInstance == *(_QWORD *)(DLSBankManager::sManagerInstance + 8))
    {
      CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(DLSBankManager::sManagerInstance + 24));
      v2 = *(void **)v1;
      if (*(_QWORD *)v1)
      {
        *(_QWORD *)(v1 + 8) = v2;
        operator delete(v2);
      }
      MEMORY[0x212BCDF50](v1, 0x10F0C401840559CLL);
      DLSBankManager::sManagerInstance = 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v3 = 136315394;
        v4 = "DLSBankManager.cpp";
        v5 = 1024;
        v6 = 137;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERT FAILURE: Bank manager destroyed with active banks", (uint8_t *)&v3, 0x12u);
      }
      __break(1u);
    }
  }
}

const void **DLSBankManager::AddBank(DLSBankManager *this, CFURLRef url, char a3)
{
  int v6;
  const __CFURL *v7;
  __CFString *v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const __CFString *v14;
  const __CFString *v15;
  int Length;
  int v17;
  BOOL v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  CFTypeRef v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  CAXException *exception;
  _DWORD *v53;
  int v54;
  int v55;
  CFTypeRef cf;
  __CFString *PathComponent;
  __int128 v58;
  __int128 v59;
  _BYTE buf[18];
  __int16 v61;
  __CFString *v62;
  __int16 v63;
  const char *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  PathComponent = (__CFString *)CFURLCopyLastPathComponent(url);
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 16))((char *)this + 24);
  if (DLSBankManager::FindBankEntry((CFURLRef ***)this, PathComponent))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "DLSBankManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 149;
      v61 = 2112;
      v62 = PathComponent;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AddBank: bank '%@' already added.", buf, 0x1Cu);
    }
    if (!v6)
      return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
LABEL_80:
    (*(void (**)(char *))(*((_QWORD *)this + 3) + 24))((char *)this + 24);
    return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
  }
  v55 = v6;
  v8 = (__CFString *)SampleManager::SearchForResource((glob_t *)url, v7);
  cf = v8;
  if (!v8)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)&v59, 0xFFFFFFD5);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "DLSBankManager.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 153;
      v61 = 2080;
      v62 = (__CFString *)&v59;
      v63 = 2080;
      v64 = "Unable to locate bank file";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Unable to locate bank file", -43);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "DLSBankManager.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 155;
    v61 = 2112;
    v62 = v8;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AddBank: creating new collection for bank '%@'", buf, 0x1Cu);
    v8 = (__CFString *)cf;
  }
  v9 = operator new();
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 25) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_QWORD *)(v9 + 136) = 0;
  std::vector<unsigned char>::reserve((unint64_t *)(v9 + 120), 0x800uLL);
  std::vector<PoolCue>::reserve((uint64_t *)(v9 + 96), 0x10uLL);
  *(_QWORD *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)(v9 + 176) = 0;
  *(_QWORD *)(v9 + 152) = v10;
  *(_QWORD *)(v9 + 160) = v10;
  *(_QWORD *)(v9 + 168) = v10 + 64;
  *(_QWORD *)(v9 + 184) = 0;
  *(_QWORD *)(v9 + 44) = 0;
  *(_WORD *)(v9 + 144) = 257;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100](v9 + 176, (__int128 *)buf);
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)(v9 + 192) = 0;
  std::vector<DlsInstrument *>::reserve((void **)(v9 + 56), 0x100uLL);
  *(_BYTE *)(v9 + 200) = 0;
  *(_BYTE *)(v9 + 201) = a3;
  v14 = CFURLCopyPathExtension((CFURLRef)v8);
  v15 = v14;
  if (!v14)
  {
    v53 = __cxa_allocate_exception(4uLL);
    v54 = -43;
    goto LABEL_87;
  }
  Length = CFStringGetLength(v14);
  if ((Length & 0xFFFFFFFE) == 2 && (CFStringGetCharacterAtIndex(v15, 0) & 0xFFDF) == 0x53)
  {
    v17 = CFStringGetCharacterAtIndex(v15, 1) & 0xFFDF;
    v18 = v17 == 70;
    if (Length == 3 && (unsigned __int16)v17 == 70)
      v18 = CFStringGetCharacterAtIndex(v15, 2) == 50;
  }
  else
  {
    v18 = 0;
  }
  CFRelease(v15);
  if (v18)
  {
    v19 = (_QWORD *)operator new();
    std::allocate_shared[abi:ne180100]<TFileBSD,std::allocator<TFileBSD>,__CFURL const*&,void>(v19, (uint64_t)v8);
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v9;
    *(_OWORD *)(v19 + 5) = 0u;
    *(_OWORD *)(v19 + 7) = 0u;
    *(_OWORD *)(v19 + 9) = 0u;
    *(_OWORD *)(v19 + 11) = 0u;
    *(_OWORD *)(v19 + 13) = 0u;
    *(_OWORD *)(v19 + 15) = 0u;
    *(_OWORD *)(v19 + 17) = 0u;
    *(_OWORD *)(v19 + 19) = 0u;
    *(_OWORD *)(v19 + 21) = 0u;
    *(_OWORD *)(v19 + 23) = 0u;
    *(_OWORD *)(v19 + 25) = 0u;
    *(_OWORD *)(v19 + 27) = 0u;
    *(_OWORD *)(v19 + 29) = 0u;
    *(_OWORD *)(v19 + 31) = 0u;
    *(_OWORD *)(v19 + 33) = 0u;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)(v19 + 2), (__int128 *)buf);
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v19[35] = 0;
    if (v19[4] && *v19 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 120))(*v19) & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v19 + 104))(*v19, 0);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v19 + 72))(*v19) <= 0xE4E1C0)
      {
        if (CFURLGetFileSystemRepresentation((CFURLRef)v8, 1u, buf, 1024))
        {
          std::allocate_shared[abi:ne180100]<MappedMemoryStream,std::allocator<MappedMemoryStream>,char *,void>(&v59, buf);
          std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)(v19 + 2), &v59);
          v28 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v29 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
      }
      else
      {
        DlsCollection::SetStreamFromDisk(v19[4]);
      }
    }
    *(_QWORD *)(v9 + 192) = v19;
    SFCollection::Read((SFCollection *)v19);
  }
  else
  {
    v23 = operator new(0x50uLL);
    v23[1] = 0;
    v23[2] = 0;
    *v23 = &off_24CA95848;
    v24 = v23 + 3;
    std::allocate_shared[abi:ne180100]<TFileBSD,std::allocator<TFileBSD>,__CFURL const*&,void>(v23 + 3, (uint64_t)v8);
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = v9;
    v23[5] = 0;
    *((_DWORD *)v23 + 12) = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)(v23 + 7), (__int128 *)buf);
    v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v23[9] && *v24 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 120))(*v24) & 1) == 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v24 + 104))(*v24, 0);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v24 + 72))(*v24) <= 0xE4E1C0)
      {
        if (CFURLGetFileSystemRepresentation((CFURLRef)v8, 1u, buf, 1024))
        {
          std::allocate_shared[abi:ne180100]<MappedMemoryStream,std::allocator<MappedMemoryStream>,char *,void>(&v59, buf);
          std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)(v23 + 7), &v59);
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          if (*((_QWORD *)&v59 + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
      }
      else
      {
        DlsCollection::SetStreamFromDisk(v23[9]);
      }
    }
    *(_QWORD *)&v58 = v23 + 3;
    *((_QWORD *)&v58 + 1) = v23;
    std::shared_ptr<ModControlSource>::operator=[abi:ne180100](v9 + 176, &v58);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    DlsFile::Read(*(DlsFile **)(v9 + 176));
  }
  if (!*(_BYTE *)(v9 + 144))
  {
    v53 = __cxa_allocate_exception(4uLL);
    v54 = -10871;
LABEL_87:
    *v53 = v54;
    __cxa_throw(v53, MEMORY[0x24BEDB798], 0);
  }
  v37 = operator new();
  v38 = cf;
  *(_QWORD *)v37 = cf;
  *(_QWORD *)(v37 + 8) = v9;
  *(_DWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 40) = 0;
  *(_QWORD *)(v37 + 48) = 0;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 24) = v37 + 32;
  *(_QWORD *)(v37 + 56) = 0;
  *(_QWORD *)(v37 + 64) = 0;
  CFRetain(v38);
  v40 = (uint64_t *)*((_QWORD *)this + 1);
  v39 = *((_QWORD *)this + 2);
  if ((unint64_t)v40 >= v39)
  {
    v43 = *(uint64_t **)this;
    v44 = ((uint64_t)v40 - *(_QWORD *)this) >> 3;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v46 = v39 - (_QWORD)v43;
    if (v46 >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v48 = (char *)operator new(8 * v47);
    }
    else
    {
      v48 = 0;
    }
    v49 = (uint64_t *)&v48[8 * v44];
    *v49 = v37;
    v41 = v49 + 1;
    if (v40 != v43)
    {
      do
      {
        v50 = *--v40;
        *--v49 = v50;
      }
      while (v40 != v43);
      v40 = *(uint64_t **)this;
    }
    *(_QWORD *)this = v49;
    *((_QWORD *)this + 1) = v41;
    *((_QWORD *)this + 2) = &v48[8 * v47];
    v42 = v55;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v40 = v37;
    v41 = v40 + 1;
    v42 = v55;
  }
  *((_QWORD *)this + 1) = v41;
  Smart<__CFURL const*>::~Smart(&cf);
  if (v42)
    goto LABEL_80;
  return Smart<__CFString const*>::~Smart((const void **)&PathComponent);
}

void sub_210AAA2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t buf,int a22,__int16 a23,int a24)
{
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  _DWORD *exception;

  if (a2)
  {
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v26);
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v27);
    std::__shared_weak_count::~__shared_weak_count(v24);
    operator delete(v29);
    __cxa_begin_catch(exception_object);
    DlsCollection::Cleanup(v25);
    exception = __cxa_allocate_exception(4uLL);
    *exception = -10871;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  JUMPOUT(0x210AAA620);
}

void sub_210AAA50C(uint64_t a1, int a2)
{
  BankManager *v2;
  uint64_t v3;

  if (a2)
  {
    __cxa_end_catch();
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v3);
    BankManager::~BankManager(v2);
    JUMPOUT(0x210AAA528);
  }
  JUMPOUT(0x210AAA620);
}

void sub_210AAA5E0()
{
  __cxa_end_catch();
  JUMPOUT(0x210AAA5E8);
}

void sub_210AAA618(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

CFURLRef *DLSBankManager::FindBankEntry(CFURLRef ***this, const __CFString *a2)
{
  CFURLRef **i;
  CFURLRef *v5;
  _BYTE v7[12];
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if ((CADeprecated::CAMutex::IsOwnedByCurrentThread((CADeprecated::CAMutex *)(this + 3)) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v7 = 136315394;
      *(_QWORD *)&v7[4] = "DLSBankManager.cpp";
      v8 = 1024;
      v9 = 216;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERT FAILURE: FindBankEntry called while unlocked!", v7, 0x12u);
    }
    __break(1u);
  }
  for (i = *this; ; ++i)
  {
    if (i == this[1])
      return 0;
    *(_QWORD *)v7 = CFURLCopyLastPathComponent(**i);
    if (CFStringCompare(*(CFStringRef *)v7, a2, 0) == kCFCompareEqualTo)
      break;
    Smart<__CFString const*>::~Smart((const void **)v7);
  }
  v5 = *i;
  Smart<__CFString const*>::~Smart((const void **)v7);
  return v5;
}

void sub_210AAA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  Smart<__CFString const*>::~Smart(&a9);
  _Unwind_Resume(a1);
}

CFURLRef *DLSBankManager::AcquireBank(DLSBankManager *this, const __CFString *a2)
{
  char *v4;
  int v5;
  CFURLRef *BankEntry;
  CFURLRef *v7;
  unsigned int *v8;
  unsigned int v9;
  CAXException *exception;
  _BYTE v12[16];
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const __CFString *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 24;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 16))((char *)this + 24);
  BankEntry = DLSBankManager::FindBankEntry((CFURLRef ***)this, a2);
  v7 = BankEntry;
  if (!BankEntry)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v12, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v14 = "DLSBankManager.cpp";
      v15 = 1024;
      v16 = 176;
      v17 = 2080;
      v18 = (const __CFString *)v12;
      v19 = 2080;
      v20 = "DLSBankManager::AcquireBank: No such bank";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "DLSBankManager::AcquireBank: No such bank", -10851);
  }
  v8 = (unsigned int *)(BankEntry + 2);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v14 = "DLSBankManager.cpp";
    v15 = 1024;
    v16 = 173;
    v17 = 2112;
    v18 = a2;
    v19 = 1024;
    LODWORD(v20) = v9 + 1;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::AcquireBank: bank '%@' refcount %d", buf, 0x22u);
  }
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)v4 + 24))(v4);
  return v7;
}

void sub_210AAA96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

const void **DLSBankManager::ReleaseBank(DLSBankManager *this, const __CFString *a2)
{
  const void **result;
  CFURLRef **v5;
  NSObject *v6;
  const char *v7;
  int *v8;
  CFURLRef *v9;
  unsigned int *v10;
  int v11;
  int *v12;
  const char *v13;
  _QWORD *v14;
  void *v15;
  CFURLRef **v16;
  int64_t v17;
  const __CFURL *v18;
  char *v19;
  int v20;
  const __CFString *PathComponent;
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v19 = (char *)this + 24;
  result = (const void **)(*(uint64_t (**)(void))(*((_QWORD *)this + 3) + 16))();
  v20 = (int)result;
  v5 = *(CFURLRef ***)this;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    v6 = MEMORY[0x24BDACB70];
    v7 = "DLSBankManager.cpp";
    v8 = &dword_210A23000;
    while (1)
    {
      PathComponent = CFURLCopyLastPathComponent(**v5);
      if (CFStringCompare(PathComponent, a2, 0) == kCFCompareEqualTo)
      {
        v9 = *v5;
        v10 = (unsigned int *)(*v5 + 2);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 - 1, v10));
        if (v11 == 1)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v7;
            v23 = 1024;
            v24 = 39;
            _os_log_impl(v8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d BankEntry::Unreference: deleting bank", buf, 0x12u);
          }
          v12 = v8;
          v13 = v7;
          std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(v9[4]);
          v9[3] = (CFURLRef)(v9 + 4);
          v9[4] = 0;
          v9[5] = 0;
          v14 = v9[1];
          if (v14)
          {
            DlsCollection::Cleanup(v14);
            std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 22));
            BankManager::~BankManager((BankManager *)(v14 + 19));
            PoolTable::~PoolTable((PoolTable *)(v14 + 10));
            v15 = (void *)v14[7];
            if (v15)
            {
              v14[8] = v15;
              operator delete(v15);
            }
            *(_QWORD *)buf = v14;
            std::vector<InfoList::InfoEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            MEMORY[0x212BCDF50](v14, 0x10B0C40BE9E4BC0);
          }
          v9[1] = 0;
          v7 = v13;
          v8 = v12;
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v7;
          v23 = 1024;
          v24 = 189;
          v25 = 2112;
          v26 = a2;
          v27 = 1024;
          v28 = v11 - 1;
          _os_log_impl(v8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::ReleaseBank: bank '%@' refcount now %d", buf, 0x22u);
        }
        if (v11 <= 1)
          break;
      }
      result = Smart<__CFString const*>::~Smart((const void **)&PathComponent);
      if (++v5 == *((CFURLRef ***)this + 1))
        goto LABEL_28;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v7;
      v23 = 1024;
      v24 = 193;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d DLSBankManager::ReleaseBank: destroying entry", buf, 0x12u);
    }
    v16 = (CFURLRef **)*((_QWORD *)this + 1);
    v17 = (char *)v16 - (char *)(v5 + 1);
    if (v16 != v5 + 1)
      memmove(v5, v5 + 1, (char *)v16 - (char *)(v5 + 1));
    *((_QWORD *)this + 1) = (char *)v5 + v17;
    if (v9)
    {
      CFRelease(*v9);
      v18 = v9[6];
      if (v18)
      {
        v9[7] = v18;
        operator delete(v18);
      }
      std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(v9[4]);
      MEMORY[0x212BCDF50](v9, 0x1070C40FE9556B8);
    }
    result = Smart<__CFString const*>::~Smart((const void **)&PathComponent);
  }
LABEL_28:
  if (v20)
    return (const void **)(*(uint64_t (**)(char *))(*(_QWORD *)v19 + 24))(v19);
  return result;
}

void sub_210AAACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AUNewTimePitch::Initialize(AUNewTimePitch *this)
{
  ausdk::AUScope *v2;
  int v3;
  const AudioChannelLayout *v4;
  uint64_t v5;
  const AudioChannelLayout *v6;
  uint64_t v7;
  int v8;
  double v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  const AudioChannelLayout *v17;
  uint64_t v18;
  uint64_t v19;
  const AudioChannelDescription *v20;
  PhaseVocoderTwo *v21;
  float v23;
  float v24;

  v2 = (AUNewTimePitch *)((char *)this + 128);
  v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 80), 0) + 108) != v3)
    return 4294956428;
  v5 = *((_QWORD *)this + 102);
  if (v5 && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), v4))
  {
    v7 = *((_QWORD *)this + 102);
    v8 = v7 ? CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6) : 0;
    if (v8 != v3)
      return 4294956428;
  }
  v9 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  v10.n128_u64[0] = 0x40C0000000000000;
  v11.n128_u64[0] = 0x40D0000000000000;
  v12.n128_u64[0] = 0x40E0000000000000;
  if (v9 >= 65536.0)
    v13 = 0x2000;
  else
    v13 = 4096;
  if (v9 >= 32768.0)
    v14 = v13;
  else
    v14 = 2048;
  if (v9 >= 16384.0)
    v15 = v14;
  else
    v15 = 1024;
  if (v9 >= 8192.0)
    v16 = v15;
  else
    v16 = 512;
  *((_DWORD *)this + 214) = v16 >> (*((_DWORD *)this + 206) < 0x21u);
  v24 = 0.0;
  (*(void (**)(AUNewTimePitch *, _QWORD, _QWORD, _QWORD, float *, __n128, __n128, __n128))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v24, v10, v11, v12);
  v23 = 0.0;
  v18 = (*(uint64_t (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v23);
  v19 = *((_QWORD *)this + 102);
  if (v19 && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v19 + 16), v17))
    v20 = (const AudioChannelDescription *)(*((_QWORD *)this + 102) + 28);
  else
    v20 = 0;
  v21 = (PhaseVocoderTwo *)operator new();
  PhaseVocoderTwo::PhaseVocoderTwo(v21, v9, *((_DWORD *)this + 214), v3, *((_DWORD *)this + 84), v24, v23, v20, *((_BYTE *)this + 528), (AUNewTimePitch *)((char *)this + 864));
  *((_QWORD *)this + 67) = v21;
  *((_QWORD *)v21 + 345) = AUNewTimePitch::PullForInputCallback;
  *((_QWORD *)v21 + 346) = this;
  AUNewTimePitch::UpdatePhaseVocoderState(this);
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_QWORD *)this + 99) = 0x3FF0000000000000;
  *((_BYTE *)this + 808) = 1;
  *((_BYTE *)this + 829) = 1;
  *((_QWORD *)this + 104) = 0xBFF0000000000000;
  return v18;
}

void sub_210AAAF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10F1C40CF7E226ELL);
  _Unwind_Resume(a1);
}

uint64_t AUNewTimePitch::Cleanup(AUNewTimePitch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 67);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 67) = 0;
  return result;
}

uint64_t AUNewTimePitch::Reset(AUNewTimePitch *this)
{
  const float **v2;

  v2 = (const float **)*((_QWORD *)this + 67);
  if (v2)
    PhaseVocoderTwo::Reset(v2);
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_QWORD *)this + 99) = 0x3FF0000000000000;
  *((_BYTE *)this + 808) = 1;
  *((_BYTE *)this + 829) = 1;
  *((_QWORD *)this + 104) = 0xBFF0000000000000;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *((_BYTE *)this + 936) = 1;
  RampList::Writer::clear((AUNewTimePitch *)((char *)this + 944));
  *((_QWORD *)this + 122) = 0;
  return 0;
}

uint64_t AUNewTimePitch::GetProperty(AUNewTimePitch *this, int a2, int a3, int a4, _QWORD *__dst)
{
  uint64_t result;
  _QWORD *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int16 v20;

  if (a3)
    return 4294956417;
  v6 = __dst;
  result = 4294956417;
  if (a2 <= 48)
  {
    if (a2 > 36)
    {
      if (a2 != 37)
      {
        if (a2 == 45 && a4 == 6)
        {
          result = 0;
          *__dst = 0x700000000;
        }
        return result;
      }
      result = 0;
      v8 = *((unsigned __int8 *)this + 528);
    }
    else if (a2 == 21)
    {
      result = 0;
      v8 = *((unsigned __int8 *)this + 828);
    }
    else
    {
      if (a2 != 26)
        return result;
      result = 0;
      v8 = *((_DWORD *)this + 206);
    }
    *(_DWORD *)__dst = v8;
    return result;
  }
  if (a2 <= 3800)
  {
    if (a2 == 49)
    {
      result = 0;
      *(_OWORD *)__dst = *(_OWORD *)((char *)this + 840);
      return result;
    }
    if (a2 == 57)
    {
      v9 = 0;
      v10 = *((_QWORD *)this + 1);
      do
      {
        v11 = overviewParameterIDs[v9];
        *v6 = v10;
        *((_DWORD *)v6 + 3) = 0;
        *((_DWORD *)v6 + 4) = 0;
        *((_DWORD *)v6 + 2) = v11;
        ++v9;
        v6 += 3;
      }
      while (v9 != 2);
      return 0;
    }
  }
  else
  {
    if (a2 == 3801)
    {
      v12 = *((_BYTE *)this + 769);
      v19 = *(_DWORD *)((char *)this + 770);
      v20 = *((_WORD *)this + 387);
      v13 = *((_QWORD *)this + 97);
      v17 = *((_OWORD *)this + 49);
      LOBYTE(v18) = *((_BYTE *)this + 800);
      memmove(__dst, (char *)this + 552, 0xD9uLL);
      result = 0;
      *((_BYTE *)v6 + 217) = v12;
      *(_DWORD *)((char *)v6 + 218) = v19;
      *((_WORD *)v6 + 111) = v20;
      v6[28] = v13;
      *(_OWORD *)(v6 + 29) = v17;
      v6[31] = v18;
      return result;
    }
    if (a2 != 3802)
    {
      if (a2 != 3803)
        return result;
      if (*((_BYTE *)this + 17))
      {
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 80), 0);
        ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0);
      }
      RampList::Writer::GetRamps();
      return 0;
    }
    if (*((_BYTE *)this + 17))
    {
      AUNewTimePitch::UpdatePhaseVocoderState(this);
      v15 = *((double *)this + 94);
      if (*(_QWORD *)(*((_QWORD *)this + 119) + 8) && *((_BYTE *)this + 936))
        v15 = *((double *)this + 114);
      v16 = PhaseVocoderTwo::InputFramesForOutputFrames(*((PhaseVocoderTwo **)this + 67), *(_DWORD *)v6, v15, v14);
      result = 0;
      *((_DWORD *)v6 + 1) = v16;
    }
    else
    {
      return 4294956429;
    }
  }
  return result;
}

uint64_t AUNewTimePitch::CanScheduleParameters(AUNewTimePitch *this)
{
  return 0;
}

uint64_t AUNewTimePitch::Render(AUNewTimePitch *this, unsigned int *a2, AudioTimeStamp *a3, unsigned int a4)
{
  double mSampleTime;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *Element;
  double v21;
  AudioBufferList *BufferList;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unsigned int v33;
  unsigned int v34;
  double v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  double v48;
  unsigned int v50;
  unsigned int v51;
  double v52;

  mSampleTime = a3->mSampleTime;
  v9 = *((double *)this + 122);
  if (a3->mSampleTime != v9)
  {
    v10 = mSampleTime - v9;
    v11 = *((_QWORD *)this + 67);
    v12 = *(double *)(v11 + 2264) + mSampleTime - v9;
    *(double *)(v11 + 2264) = v12;
    v13 = *(double *)(v11 + 2248) + v10;
    *(double *)(v11 + 2248) = v13;
    v14 = *(_QWORD *)(v11 + 2784);
    if (**(_QWORD **)(v14 + 104))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(*(_QWORD *)(v14 + 96) + 8), v12);
      *(_QWORD *)(v11 + 2256) = v15;
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v11 + 2784) + 96) + 8), *(double *)(v11 + 2248));
      v17 = v16;
      *(double *)(v11 + 2240) = v16;
      v13 = *(double *)(v11 + 2248);
      mSampleTime = a3->mSampleTime;
    }
    else
    {
      v18 = *(double *)(v11 + 2216);
      *(double *)(v11 + 2256) = *(double *)(v11 + 2256) + v10 * v18;
      v17 = *(double *)(v11 + 2240) + v10 * v18;
      *(double *)(v11 + 2240) = v17;
    }
    *(double *)(v11 + 2360) = v17;
    *(double *)(v11 + 2376) = v13;
  }
  v19 = (double)a4;
  *((double *)this + 122) = mSampleTime + (double)a4;
  *((_DWORD *)this + 136) = *a2;
  if (**((_QWORD **)this + 121))
  {
    *((_BYTE *)this + 936) = 0;
    RampList::Reader::AdvanceOutputTime((AUNewTimePitch *)((char *)this + 960), mSampleTime);
  }
  AUNewTimePitch::UpdatePhaseVocoderState(this);
  Element = (double *)ausdk::AUScope::SafeGetElement((AUNewTimePitch *)((char *)this + 128), 0);
  ausdk::AUIOElement::PrepareBuffer((ausdk::AUIOElement *)Element, a4);
  v21 = 1.0;
  if (!*((_BYTE *)this + 828))
    v21 = 1.0 / *(double *)(*((_QWORD *)this + 67) + 2216);
  AUTimestampGenerator::State::AddOutputTime((uint64_t)this + 552, (uint64_t)this + 552, (__int128 *)a3, (double)a4, Element[10], v21);
  BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 18));
  v23 = *((_QWORD *)this + 67);
  v24 = a3->mSampleTime;
  if (*(_BYTE *)(v23 + 2778))
  {
    v25 = *(_QWORD *)(v23 + 2784);
    if (**(_QWORD **)(v25 + 104))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(*(_QWORD *)(v25 + 96) + 8), a3->mSampleTime);
      *(_QWORD *)(v23 + 2360) = v26;
      *(double *)(v23 + 2376) = v24;
    }
  }
  *(_BYTE *)(v23 + 2778) = 0;
  if (*(_BYTE *)(v23 + 2553) || !*(_BYTE *)(v23 + 2552))
  {
    v27 = PhaseVocoderTwo::RenderBypass((PhaseVocoderTwo *)v23, a4, BufferList, v24);
LABEL_15:
    v28 = v27;
  }
  else
  {
    v52 = v24;
    if (*(_BYTE *)(v23 + 2557))
      PhaseVocoderTwo::ResetPhases((PhaseVocoderTwo *)v23);
    v51 = a4;
    *(_DWORD *)(v23 + 2440) = 0;
    PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v23, &v51, BufferList, &v52);
    v33 = v51;
    if (v51)
    {
      v34 = PhaseVocoderTwo::InputFramesForOutputFrames((PhaseVocoderTwo *)v23, v51, v52, v32);
      v50 = v34;
      v36 = *(unsigned __int8 *)(v23 + 2554);
      if (!*(_BYTE *)(v23 + 2554))
        PhaseVocoderTwo::MakeBinMap(v23, v35);
      do
      {
        if (v33)
        {
          v37 = *(_DWORD *)(v23 + 2384) - *(_DWORD *)(v23 + 2392);
          v38 = *(_DWORD *)(v23 + 2192);
          v39 = __OFSUB__(v38, v37);
          v40 = v38 - v37;
          if ((v40 < 0) ^ v39 | (v40 == 0))
            v41 = 0;
          else
            v41 = v34 == 0;
          if (v41)
            v50 = v40;
          v27 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v23, &v50);
          if ((_DWORD)v27)
            goto LABEL_15;
          do
          {
            if (*(_DWORD *)(v23 + 2192) > *(_DWORD *)(v23 + 2384) - *(_DWORD *)(v23 + 2392))
              break;
            PhaseVocoderTwo::ProcessBlock((PhaseVocoderTwo *)v23, v36 != 0, v42);
            v42 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v23, &v51, BufferList, &v52);
            v33 = v51;
          }
          while (v51);
        }
        else
        {
          v27 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v23, &v50);
          if ((_DWORD)v27)
            goto LABEL_15;
          v33 = 0;
        }
        v34 = v50;
      }
      while (v33 | v50);
    }
    v28 = 0;
  }
  if (*((_QWORD *)this + 105))
  {
    if (**((_QWORD **)this + 121))
    {
      v29 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime);
      v30 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime + v19 + -1.0);
      v31 = fmax(v29, 0.0);
      (*((void (**)(_QWORD, AudioTimeStamp *, double, double))this + 105))(*((_QWORD *)this + 106), a3, v31, fmax(v30 - v31, 0.0));
    }
    else
    {
      if (*((_BYTE *)this + 829))
      {
        *((_BYTE *)this + 829) = 0;
        *((double *)this + 104) = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime);
      }
      v43 = PhaseVocoderTwo::InputTimeForOutputTime(*((PhaseVocoderTwo **)this + 67), a3->mSampleTime + v19 + -1.0);
      v44 = *((double *)this + 104);
      v45.n128_f64[0] = v43 - v44;
      v46.n128_u64[0] = 0;
      v47.n128_u64[0] = 0;
      if (v43 - v44 >= 0.0)
      {
        v47.n128_f64[0] = v44 + 1.0;
        if (v44 + 1.0 >= 0.0)
        {
          v46.n128_f64[0] = v43 - v44;
        }
        else
        {
          v48 = v45.n128_f64[0] + v47.n128_f64[0];
          v47.n128_u64[0] = 0;
          v46.n128_f64[0] = fmax(v48, 0.0);
        }
      }
      (*((void (**)(_QWORD, AudioTimeStamp *, __n128, __n128, __n128))this + 105))(*((_QWORD *)this + 106), a3, v47, v46, v45);
      *((double *)this + 104) = v43;
    }
  }
  return v28;
}

uint64_t AUNewTimePitch::GetParameterInfo(AUNewTimePitch *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v6;
  AudioUnitParameterUnit v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterValue v9;
  AudioUnitParameterValue v10;
  int v11;

  buffer->flags = -1073741824;
  result = 4294956418;
  if (!a2 && a3 <= 7 && ((0xD3u >> a3) & 1) != 0)
  {
    v6 = off_24CA96790[a3];
    v7 = dword_210B05520[a3];
    v8 = flt_210B05540[a3];
    v9 = flt_210B05560[a3];
    v10 = flt_210B05580[a3];
    v11 = dword_210B055A0[a3];
    buffer->cfNameString = v6;
    buffer->flags = -939524096;
    CFStringGetCString(v6, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = v7;
    buffer->minValue = v8;
    buffer->maxValue = v9;
    buffer->defaultValue = v10;
    buffer->flags += v11;
  }
  return result;
}

double AUNewTimePitch::GetLatency(AUNewTimePitch *this)
{
  double v1;
  uint64_t v3;

  v1 = 0.0;
  if (*((_QWORD *)this + 67))
  {
    AUNewTimePitch::UpdatePhaseVocoderState(this);
    v3 = *((_QWORD *)this + 67);
    if (!*(_BYTE *)(v3 + 2777))
      return (1.0 / *(double *)(v3 + 2216) + 1.0) * (double)*(int *)(v3 + 2196) / *(double *)(v3 + 2176);
  }
  return v1;
}

uint64_t AUNewTimePitch::SupportedNumChannels(AUNewTimePitch *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNewTimePitch_sChannels;
  return 1;
}

uint64_t AUNewTimePitch::GetAudioChannelLayout(AUNewTimePitch *this, const AudioChannelLayout *a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  *a5 = 1;
  v5 = *((_QWORD *)this + 102);
  if (!v5)
    return 0;
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), a2))
    return 0;
  v8 = *((_QWORD *)this + 102);
  if (!v8)
    return 0;
  v9 = *(unsigned int *)(v8 + 12);
  if (a4 && (_DWORD)v9)
    memcpy(a4, (const void *)(v8 + 16), *(unsigned int *)(v8 + 12));
  return v9;
}

uint64_t AUNewTimePitch::SetAudioChannelLayout(AUNewTimePitch *this, int a2, int a3, AudioChannelLayout *a4)
{
  uint64_t Property;
  int v7;
  const AudioChannelLayout *v8;
  uint64_t PropertyInfo;
  AudioChannelLayout *v11;
  UInt32 outPropertyDataSize;
  void *outPropertyData[3];
  int v14;

  if ((a2 - 3) < 0xFFFFFFFE)
    return 4294956430;
  if (a3)
    return 4294956419;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 392))(outPropertyData);
  v7 = v14;
  if (v7 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v8)
    || a4->mChannelLayoutTag == 0x10000)
  {
    return 4294956445;
  }
  if (!a4->mChannelLayoutTag)
  {
    CAAudioChannelLayout::operator=();
    return 0;
  }
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a4, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  outPropertyData[0] = 0;
  CADeprecated::CAAutoFree<AudioChannelLayout>::allocBytes(outPropertyData, outPropertyDataSize, 1);
  v11 = (AudioChannelLayout *)outPropertyData[0];
  Property = AudioFormatGetProperty(0x636D706Cu, 4u, a4, &outPropertyDataSize, outPropertyData[0]);
  if (!(_DWORD)Property)
    CAAudioChannelLayout::Set((AUNewTimePitch *)((char *)this + 816), v11);
  if (v11)
    free(v11);
  if (!(_DWORD)Property)
    return 0;
  return Property;
}

void sub_210AAB978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AUNewTimePitch::RemoveAudioChannelLayout(AUNewTimePitch *this, int a2, int a3)
{
  if ((a2 - 3) < 0xFFFFFFFE)
    return 4294956430;
  if (a3)
    return 4294956419;
  CAAudioChannelLayout::Clear((AUNewTimePitch *)((char *)this + 816));
  return 0;
}

double AUNewTimePitch::GetChannelLayoutTags@<D0>(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  double result;

  if ((a1 - 3) <= 0xFFFFFFFD)
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  if (a2)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x30uLL);
  a3[1] = v5 + 3;
  a3[2] = v5 + 3;
  *v5 = xmmword_210B09A40;
  v5[1] = unk_210B09A50;
  result = 4.98418446e-306;
  v5[2] = xmmword_210B09A60;
  *a3 = v5;
  return result;
}

uint64_t AUNewTimePitch::UpdatePhaseVocoderState(AUNewTimePitch *this)
{
  float v2;
  float v3;
  float v4;
  int v5;
  float v6;
  __n128 v7;
  uint64_t result;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v15 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v15))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 248, "noErr == GetParameter(kNewTimePitchParam_Smoothness, kAudioUnitScope_Global, 0, smoothness)");
  }
  v2 = v15;
  if (v15 >= 3.0)
  {
    if (v15 > 32.0)
    {
      v15 = 32.0;
      v2 = 32.0;
    }
  }
  else
  {
    v15 = 3.0;
    v2 = 3.0;
  }
  *(float *)(*((_QWORD *)this + 67) + 2224) = v2;
  v14 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v14))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 254, "noErr == GetParameter(kNewTimePitchParam_Rate, kAudioUnitScope_Global, 0, rate)");
  }
  v3 = v14;
  if (v14 >= 0.03125)
  {
    if (v14 > 32.0)
    {
      v14 = 32.0;
      v3 = 32.0;
    }
  }
  else
  {
    v14 = 0.03125;
    v3 = 0.03125;
  }
  *(double *)(*((_QWORD *)this + 67) + 2216) = v3;
  v13 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 1, 0, 0, &v13))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 260, "noErr == GetParameter(kNewTimePitchParam_Pitch, kAudioUnitScope_Global, 0, pitchCents)");
  }
  v4 = v13;
  *(float *)&v5 = -2400.0;
  if (v13 < -2400.0 || (*(float *)&v5 = 2400.0, v13 > 2400.0))
  {
    v13 = *(float *)&v5;
    v4 = *(float *)&v5;
  }
  v6 = exp2(v4 / 1200.0);
  *(float *)(*((_QWORD *)this + 67) + 2184) = v6;
  v12 = 0.0;
  if ((*(unsigned int (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 6, 0, 0, &v12))
  {
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 269, "noErr == GetParameter( kNewTimePitchParam_EnableSpectralCoherence, kAudioUnitScope_Global, 0, spectralCoherence)");
  }
  v7.n128_f32[0] = v12;
  *(_BYTE *)(*((_QWORD *)this + 67) + 2554) = v12 != 0.0;
  v11 = 0.0;
  result = (*(uint64_t (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this
                                                                                                 + 144))(this, 7, 0, 0, &v11, v7);
  if ((_DWORD)result)
    __assert_rtn("UpdatePhaseVocoderState", "AUNewTimePitch.cpp", 274, "noErr == GetParameter( kNewTimePitchParam_EnableTransientPreservation, kAudioUnitScope_Global, 0, keepTransients)");
  v9 = v11;
  if (v12 == 0.0 && v11 != 0.0)
  {
    v9 = 0.0;
    result = (*(uint64_t (**)(AUNewTimePitch *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 7, 0, 0, 0, 0.0);
  }
  v10 = *((_QWORD *)this + 67);
  *(_BYTE *)(v10 + 2555) = v9 != 0.0;
  *(_BYTE *)(v10 + 2553) = *((_BYTE *)this + 828);
  *(_DWORD *)(v10 + 2236) = *((_DWORD *)this + 206);
  return result;
}

uint64_t AUNewTimePitch::PullForInputCallback(AUNewTimePitch *this, _QWORD *a2, const AudioBufferList **a3, _QWORD *a4, double *a5)
{
  ausdk::AUScope *v9;
  uint64_t Element;
  __n128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  ausdk::AUInputElement *v16;
  uint64_t v17;
  uint64_t v18;
  AudioTimeStamp v20;

  v9 = (ausdk::AUScope *)(a3 + 10);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 10), 0);
  v11.n128_f64[0] = (double)this;
  AUTimestampGenerator::State::GenerateInputTime((__n128 *)(a3 + 69), 1, v11, *(double *)(Element + 80));
  v13 = v12[3];
  v15 = *v12;
  v14 = v12[1];
  *(_OWORD *)&v20.mSMPTETime.mSubframes = v12[2];
  *(_OWORD *)&v20.mSMPTETime.mHours = v13;
  *(_OWORD *)&v20.mSampleTime = v15;
  *(_OWORD *)&v20.mRateScalar = v14;
  *a4 = v15;
  v16 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v9, 0);
  v17 = ausdk::AUInputElement::PullInput(v16, (unsigned int *)a3 + 136, &v20, 0, (uint64_t)this);
  if (!(_DWORD)v17)
  {
    v18 = ausdk::AUScope::SafeGetElement(v9, 0);
    *a2 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v18 + 144));
  }
  return v17;
}

_QWORD *AUNewTimePitchFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x418uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUNewTimePitch>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUNewTimePitch>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t AmplifierState::ResetToDefaults(uint64_t this)
{
  *(_BYTE *)(this + 48) = 1;
  *(_QWORD *)(this + 92) = 0;
  *(_BYTE *)(this + 100) = 0;
  return this;
}

uint64_t AmplifierState::GetProperty(AmplifierState *this, int a2, float *a3)
{
  float v3;

  if (a2 == 4126)
  {
    v3 = *((float *)this + 24) * 200.0;
    goto LABEL_5;
  }
  if (a2 == 4125)
  {
    v3 = *((float *)this + 23);
LABEL_5:
    *a3 = v3;
    return 1;
  }
  return ComponentState::GetProperty(this, a2, a3);
}

uint64_t AmplifierState::SetProperty(AmplifierState *this, int a2, float *a3)
{
  int v4;
  CAXException *exception;
  _BYTE v7[16];
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  AmplifierState *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v7, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      v9 = "AmplifierState.cpp";
      v10 = 1024;
      v11 = 75;
      v12 = 2080;
      v13 = (AmplifierState *)v7;
      v14 = 2080;
      v15 = "AmplifierState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "AmplifierState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4190:
      v4 = *(_DWORD *)a3 != 0;
      if (*((unsigned __int8 *)this + 100) != v4)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(float *)buf = 4.8153e-34;
          v9 = "AmplifierState.cpp";
          v10 = 1024;
          v11 = 140;
          v12 = 2048;
          v13 = this;
          v14 = 1024;
          LODWORD(v15) = v4;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d AmplifierState::SetRampMode(this=%p, mode=%d)", buf, 0x22u);
        }
        *((_BYTE *)this + 100) = v4;
      }
      return 1;
    case 4126:
      *(float *)buf = *a3 * 0.005;
      if (*((float *)this + 24) != *(float *)buf)
      {
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pan", -0.5, 0.5);
        *((float *)this + 24) = *(float *)buf;
        (*(void (**)(AmplifierState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4126, 0);
      }
      return 1;
    case 4125:
      *(float *)buf = *a3;
      if (*((float *)this + 23) != *(float *)buf)
      {
        CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid gain", -96.0, 12.0);
        *((float *)this + 23) = *(float *)buf;
        (*(void (**)(AmplifierState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4125, 0);
      }
      return 1;
  }
  return ComponentState::SetProperty(this, a2, a3);
}

void sub_210AAC120(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AmplifierState::Save(const __CFString **this, CACFDictionary *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const __CFString **v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315650;
    v6 = "AmplifierState.cpp";
    v7 = 1024;
    v8 = 95;
    v9 = 2048;
    v10 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d AmplifierState::Save(this=%p)", (uint8_t *)&v5, 0x1Cu);
  }
  ComponentState::Save(this, a2);
  return 0;
}

uint64_t AmplifierState::Restore(AmplifierState *this, const CACFDictionary *a2)
{
  uint64_t result;

  LODWORD(result) = ComponentState::Restore(this, a2);
  if (*(_QWORD *)a2)
    return result;
  else
    return 4294956445;
}

void AmplifierState::~AmplifierState(AmplifierState *this)
{
  *(_QWORD *)this = &off_24CA8DDB0;
  SamplerState::~SamplerState(this);
}

{
  *(_QWORD *)this = &off_24CA8DDB0;
  SamplerState::~SamplerState(this);
  JUMPOUT(0x212BCDF50);
}

double TRandom::Seed(TRandom *this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int i;
  unint64_t j;
  uint64_t v7;
  double result;

  v2 = 0;
  *((_DWORD *)this + 54) = a2;
  v3 = 1;
  do
  {
    *((_DWORD *)this
    + (unsigned __int16)(21 * v2
                       - 55
                       * ((((unsigned __int16)(21 * v2 - ((10725 * (unsigned __int16)(21 * v2)) >> 16)) >> 1)
                         + ((10725 * (unsigned __int16)(21 * v2)) >> 16)) >> 5))) = v3;
    v4 = a2 - v3;
    ++v2;
    a2 = v3;
    v3 = v4;
  }
  while (v2 != 54);
  for (i = 0; i != 4; ++i)
  {
    for (j = 0; j != 55; ++j)
    {
      if (j >= 0x18)
        v7 = -24;
      else
        v7 = 31;
      *((_DWORD *)this + j) -= *((_DWORD *)this + v7 + j);
    }
  }
  result = 0.0;
  *((_OWORD *)this + 14) = xmmword_210B0A150;
  return result;
}

uint64_t InstrumentState::LoadEXS24Instrument(InstrumentState *this, CFURLRef url)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD **v5;
  _DWORD **v6;
  InstrumentState *v7;
  _DWORD **v8;
  _DWORD **v9;
  InstrumentState *v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  unsigned int v22;
  signed int v23;
  size_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  LayerState *v31;
  unsigned int v32;
  size_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  unsigned int v40;
  uint8_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  float v46;
  int v47;
  float v48;
  float v49;
  _QWORD *v50;
  _QWORD *v51;
  _DWORD *v52;
  _QWORD *k;
  unsigned int (***v54)(_QWORD);
  _QWORD *j;
  unsigned int (***v56)(_QWORD);
  float **v57;
  float **v58;
  float *v59;
  float **v60;
  float **v61;
  float *v62;
  char **v63;
  char *v64;
  uint64_t v65;
  _BOOL4 v67;
  CFStringRef v68;
  unsigned int *v69;
  CFIndex v70;
  uint64_t v71;
  NSObject *v72;
  _BOOL4 v73;
  int v74;
  char ***v75;
  char ***v76;
  ZoneState *v77;
  uint8_t v78;
  int v79;
  NSObject *v80;
  char v81;
  NSObject *v82;
  char v83;
  int v84;
  int v85;
  int v86;
  int v87;
  NSObject *v88;
  LayerState **v89;
  LayerState **v90;
  LayerState *v91;
  LayerState **v92;
  LayerState *v93;
  LayerState *v94;
  LayerState **v95;
  uint64_t v96;
  uint64_t *v97;
  char v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t (***v105)(_QWORD);
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  const char *v113;
  unint64_t v114;
  _QWORD *v115;
  CAXException *v117;
  CAXException *v118;
  CAXException *v119;
  CAXException *v121;
  CAXException *v123;
  CAXException *v124;
  CAXException *v125;
  CAXException *v126;
  NSObject *v127;
  const char *v128;
  uint8_t *i;
  NSObject *v130;
  const char *v131;
  CAXException *exception;
  uint32_t v133;
  CAXException *v134;
  CAXException *v135;
  const __CFURL *urla;
  int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  char v141;
  char v142;
  char v143;
  int v144;
  const __CFAllocator *alloc;
  unsigned int v146;
  int v147;
  int v148;
  int st_size;
  int __fd;
  glob_t *v152;
  BOOL v153[8];
  int v154;
  stat v155;
  uint8_t buf[4];
  const char *v157;
  unint64_t v158;
  _BYTE v159[20];
  __int16 v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  __int16 v165;
  __int16 v166;
  unsigned int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE v172[12];
  _BYTE v173[6];
  __int16 v174;
  _BYTE v175[10];
  _BYTE v176[10];
  const __CFString *__buf;
  unsigned int v178;
  int v179;
  char v180[68];
  int v181[78];
  UInt8 buffer[1024];
  uint64_t v183;

  v2 = (uint64_t)url;
  v183 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t)buf;
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x8200000005B0400;
      *(_QWORD *)v159 = buffer;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad path: \"%s\"", buf, 0x1Cu);
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v181, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x8200000005C0400;
      *(_QWORD *)v159 = v181;
      *(_WORD *)&v159[8] = 2080;
      *(_QWORD *)&v159[10] = "Bad EXS file path";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "Bad EXS file path", -10851);
  }
  v4 = AccessURLAsset((const __CFURL *)v2);
  if (v4)
  {
    if (v4 == -43)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_414;
      *(_DWORD *)buf = 136315650;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x820000000650400;
      *(_QWORD *)v159 = buffer;
      v130 = MEMORY[0x24BDACB70];
      v131 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: EXS file \"%s\" not found";
    }
    else
    {
      if (v4 != -54)
      {
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          goto LABEL_414;
        *(_DWORD *)buf = 136315906;
        v157 = "InstrumentState_EXS24.cpp";
        v158 = 0x400000000680400;
        *(_DWORD *)v159 = v4;
        *(_WORD *)&v159[4] = 2080;
        *(_QWORD *)&v159[6] = buffer;
        v130 = MEMORY[0x24BDACB70];
        v131 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: error %d while trying to read EXS file \"%s\"";
        v133 = 34;
LABEL_413:
        _os_log_impl(&dword_210A23000, v130, OS_LOG_TYPE_ERROR, v131, buf, v133);
LABEL_414:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v181, v4);
          *(_DWORD *)buf = 136315906;
          v157 = "InstrumentState_EXS24.cpp";
          v158 = 0x8200000006B0400;
          *(_QWORD *)v159 = v181;
          *(_WORD *)&v159[8] = 2080;
          *(_QWORD *)&v159[10] = "Unable to read EXS file";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v134 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v134, "Unable to read EXS file", v4);
      }
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_414;
      *(_DWORD *)buf = 136315650;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x820000000620400;
      *(_QWORD *)v159 = buffer;
      v130 = MEMORY[0x24BDACB70];
      v131 = "%25s:%-5d InstrumentState::LoadEXS24Instrument: permission denied for EXS file \"%s\"";
    }
    v133 = 28;
    goto LABEL_413;
  }
  __fd = open((const char *)buffer, 0);
  if (__fd < 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x820000000700400;
      *(_QWORD *)v159 = buffer;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: EXS file \"%s\" not found", buf, 0x1Cu);
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v181, 0xFFFFFFD5);
      *(_DWORD *)buf = 136315906;
      v157 = "InstrumentState_EXS24.cpp";
      v158 = 0x820000000710400;
      *(_QWORD *)v159 = v181;
      *(_WORD *)&v159[8] = 2080;
      *(_QWORD *)&v159[10] = "EXS file not found";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v135 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v135, "EXS file not found", -43);
  }
  (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)this + 8))(this, 0);
  (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  v5 = (_DWORD **)*((_QWORD *)this + 26);
  v6 = (_DWORD **)*((_QWORD *)this + 27);
  if (v5 == v6)
  {
    v7 = this;
  }
  else
  {
    do
    {
      if (*v5)
        SamplerState::Unref(*v5);
      ++v5;
    }
    while (v5 != v6);
    v7 = this;
    v5 = (_DWORD **)*((_QWORD *)this + 26);
  }
  *((_QWORD *)v7 + 27) = v5;
  v8 = (_DWORD **)*((_QWORD *)v7 + 29);
  v9 = (_DWORD **)*((_QWORD *)v7 + 30);
  if (v8 == v9)
  {
    v10 = this;
  }
  else
  {
    do
    {
      if (*v8)
        SamplerState::Unref(*v8);
      ++v8;
    }
    while (v8 != v9);
    v10 = this;
    v8 = (_DWORD **)*((_QWORD *)this + 29);
  }
  *((_QWORD *)v10 + 30) = v8;
  if ((v11 & 1) == 0)
  {
LABEL_423:
    {
      byte_254A76BEB = 1;
      word_254A76BED = 32512;
      unk_254A76C40 = 32512;
    }
  }
  urla = (const __CFURL *)v2;
  v155.st_size = 0;
  fstat(__fd, &v155);
  v146 = 0;
  v147 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v154 = 0;
  memset(v181, 0, 304);
  alloc = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  st_size = v155.st_size;
  v137 = 1;
  v16 = 0;
  do
  {
    v148 = v16;
    v143 = v13;
    v144 = v12;
    v140 = v15;
    v141 = v15 | v14 ^ 1 | v13 ^ 1;
    v142 = v14;
    v17 = v146;
    v2 = v13;
    while (2)
    {
      if (st_size - v17 >= 0x54)
      {
        if (pread(__fd, &__buf, 0x54uLL, (int)v17) != 84)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
            LOWORD(v158) = 1024;
            *(_DWORD *)(v3 + 14) = 168;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad read on file\n", buf, 0x12u);
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
            LOWORD(v158) = 1024;
            *(_DWORD *)(v3 + 14) = 169;
            HIWORD(v158) = 2080;
            *(_QWORD *)(v3 + 20) = v172;
            *(_WORD *)&v159[8] = 2080;
            *(_QWORD *)(v3 + 30) = "Invalid EXS file";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v117 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v117, "Invalid EXS file", -10871);
        }
        v18 = v179;
        if (v179 > 1397703251)
        {
          if (v179 == 1397703252)
          {
            v19 = 0;
LABEL_31:
            v20 = BYTE1(__buf);
            if (SBYTE1(__buf) >= 2)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 203;
                HIWORD(v158) = 1024;
                *(_DWORD *)v159 = v20;
                *(_WORD *)&v159[4] = 1024;
                *(_DWORD *)(v3 + 26) = 1;
                _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: header.version > SAMPLER_FILE_VERSION (%d > %d)\n", buf, 0x1Eu);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 204;
                HIWORD(v158) = 2080;
                *(_QWORD *)(v3 + 20) = v172;
                *(_WORD *)&v159[8] = 2080;
                *(_QWORD *)(v3 + 30) = "Invalid EXS file";
                _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v118 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v118, "Invalid EXS file", -10871);
            }
            v21 = BYTE3(__buf) & 0x3F;
            BYTE3(__buf) &= 0x3Fu;
            if (v21)
            {
              if (!v17)
              {
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                  LOWORD(v158) = 1024;
                  *(_DWORD *)(v3 + 14) = 223;
                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: missing instrument chunk!", buf, 0x12u);
                }
                if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                {
                  CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                  LOWORD(v158) = 1024;
                  *(_DWORD *)(v3 + 14) = 224;
                  HIWORD(v158) = 2080;
                  *(_QWORD *)(v3 + 20) = v172;
                  *(_WORD *)&v159[8] = 2080;
                  *(_QWORD *)(v3 + 30) = "Invalid EXS file";
                  _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                }
                v123 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                CAXException::CAXException(v123, "Invalid EXS file", -10871);
              }
            }
            else if (v17)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 217;
                _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: multiple instrument chunks not allowed!\n", buf, 0x12u);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 218;
                HIWORD(v158) = 2080;
                *(_QWORD *)(v3 + 20) = v172;
                *(_WORD *)&v159[8] = 2080;
                *(_QWORD *)(v3 + 30) = "Invalid EXS file";
                _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v125 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v125, "Invalid EXS file", -10871);
            }
            v22 = HIDWORD(__buf);
            if ((uint64_t)__buf <= 0)
            {
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 231;
                _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: bad chunk size!", buf, 0x12u);
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)(v3 + 14) = 232;
                HIWORD(v158) = 2080;
                *(_QWORD *)(v3 + 20) = v172;
                *(_WORD *)&v159[8] = 2080;
                *(_QWORD *)(v3 + 30) = "Invalid EXS file";
                _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
              }
              v119 = (CAXException *)__cxa_allocate_exception(0x110uLL);
              CAXException::CAXException(v119, "Invalid EXS file", -10871);
            }
            v23 = v17 + 84;
            switch(v21)
            {
              case 0:
                *(_QWORD *)&v176[2] = 0;
                *(_OWORD *)(v3 + 592) = 0u;
                *(_OWORD *)(v3 + 608) = 0u;
                if (v22 >= 0x28)
                  v24 = 40;
                else
                  v24 = v22;
                v25 = pread(__fd, v172, v24, v23);
                if (v19)
                  swapChunk((unsigned int *)v172, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x28u);
                v147 = *(_DWORD *)&v172[8];
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                {
                  v26 = *(_DWORD *)v173;
                  v27 = *(_DWORD *)&v172[4];
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                  LOWORD(v158) = 1024;
                  *(_DWORD *)(v3 + 14) = 252;
                  HIWORD(v158) = 2080;
                  *(_QWORD *)(v3 + 20) = v180;
                  *(_WORD *)&v159[8] = 1024;
                  *(_DWORD *)(v3 + 30) = v27;
                  *(_WORD *)&v159[14] = 1024;
                  *(_DWORD *)&v159[16] = v147;
                  v160 = 1024;
                  *(_DWORD *)(v3 + 42) = v26;
                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: inst: '%s', %d zones, %d groups, %d files\n", buf, 0x2Eu);
                }
                *(_QWORD *)v153 = CFStringCreateWithCString(alloc, v180, 0x600u);
                if (*(_QWORD *)v153)
                {
                  v148 |= v147 == 0;
                  Smart<__CFString const*>::~Smart((const void **)v153);
                  v28 = 0;
                  goto LABEL_288;
                }
                if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  goto LABEL_422;
                *(_DWORD *)buf = 136315394;
                v157 = "InstrumentState_EXS24.cpp";
                LOWORD(v158) = 1024;
                *(_DWORD *)((char *)&v158 + 2) = 254;
                v127 = MEMORY[0x24BDACB70];
                v128 = "%25s:%-5d  ASSERTION FAILED: unable to create name string from header name";
                goto LABEL_394;
              case 1:
                if ((v141 & 1) != 0)
                  goto LABEL_58;
                v171 = 0;
                *(_OWORD *)(v3 + 96) = 0u;
                *(_OWORD *)(v3 + 112) = 0u;
                *(_OWORD *)(v3 + 64) = 0u;
                *(_OWORD *)(v3 + 80) = 0u;
                *(_OWORD *)(v3 + 32) = 0u;
                *(_OWORD *)(v3 + 48) = 0u;
                if (v22 >= 0x88)
                  v24 = 136;
                else
                  v24 = v22;
                *(_OWORD *)v3 = 0uLL;
                *(_OWORD *)(v3 + 16) = 0uLL;
                v25 = pread(__fd, buf, v24, v23);
                if (v19)
                  swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x88u);
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v172 = 136315906;
                  *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)v173 = 1024;
                  *(_DWORD *)&v173[2] = 278;
                  v174 = 2080;
                  *(_QWORD *)v175 = v180;
                  *(_WORD *)&v175[8] = 1024;
                  *(_DWORD *)v176 = v167;
                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone '%s': group index %d\n", v172, 0x22u);
                }
                if (v168 != -1)
                {
                  v139 = v2;
                  if (v167 != -1)
                  {
                    v63 = *(char ***)(*((_QWORD *)this + 29) + 8 * v167);
                    if (!v63)
                      goto LABEL_396;
                    goto LABEL_219;
                  }
                  v73 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
                  if (v147 < 1)
                  {
                    if (v73)
                    {
                      *(_DWORD *)v172 = 136315394;
                      *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 297;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone is ungrouped and no groups defined -- using default layer", v172, 0x12u);
                    }
                    v74 = 0;
                  }
                  else
                  {
                    if (v73)
                    {
                      *(_DWORD *)v172 = 136315394;
                      *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 290;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone is ungrouped -- creating its own layer", v172, 0x12u);
                    }
                    v74 = -1;
                  }
                  v75 = (char ***)*((_QWORD *)this + 29);
                  v76 = (char ***)*((_QWORD *)this + 30);
                  while (v75 != v76)
                  {
                    v63 = *v75;
                    if ((*(unsigned int (**)(char **))**v75)(*v75) == v74)
                    {
                      v3 = (uint64_t)buf;
                      goto LABEL_219;
                    }
                    ++v75;
                  }
                  v3 = (uint64_t)buf;
                  v63 = (char **)InstrumentState::AddLayer((char **)this, v74, 0);
                  LayerState::LoadFromEXS24GroupAndDefaults((uint64_t)v63, InstrumentState::LoadEXS24Instrument(__CFURL const*)::defaultGroup, v181, &v154);
LABEL_219:
                  v77 = LayerState::AddZone(v63, 0xFFFFFFFF);
                  *(_QWORD *)v153 = CFStringCreateWithCString(alloc, v180, 0x600u);
                  (*(void (**)(ZoneState *))(*(_QWORD *)v77 + 72))(v77);
                  if (v170)
                  {
                    v82 = MEMORY[0x24BDACB70];
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v172 = 136315394;
                      *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 21;
                      _os_log_impl(&dword_210A23000, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot play instruments with Audio File Tails", v172, 0x12u);
                    }
                    v28 = -10868;
                  }
                  else
                  {
                    ZoneState::LoadSample((uint64_t)v77, v168 | 0x10000000);
                    if ((buf[0] & 1) != 0)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v172 = 136315394;
                        *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                        *(_WORD *)v173 = 1024;
                        *(_DWORD *)&v173[2] = 28;
                        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d Zone-level one-shot gate mode set", v172, 0x12u);
                      }
                      ZoneState::SetGateMode(v77, 11);
                      if ((v169 & 0x80000000) == 0)
                        *((_DWORD *)v77 + 56) = v169;
                    }
                    v78 = buf[0];
                    if ((buf[0] & 2) != 0)
                    {
                      ZoneState::SetPitchTracking(v77, 0);
                      v78 = buf[0];
                    }
                    if ((v78 & 4) != 0)
                    {
                      ZoneState::SetSampleDirection(v77, 61);
                      ZoneState::SetLoopType(v77, 72);
                      v78 = buf[0];
                    }
                    if ((v78 & 0x40) != 0)
                    {
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v172 = 136315650;
                        *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                        *(_WORD *)v173 = 1024;
                        *(_DWORD *)&v173[2] = 45;
                        v174 = 1024;
                        *(_DWORD *)v175 = BYTE2(v164);
                        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadFromEXS24SamplerZone: zone output pair %d", v172, 0x18u);
                      }
                      ZoneState::SetOutputScope(v77, BYTE2(v164));
                    }
                    ZoneState::SetRootKey(v77, (char)buf[1]);
                    if (buf[2])
                      ZoneState::SetFineTuning((float *)v77, (float)(char)buf[2]);
                    if (buf[3])
                      ZoneState::SetPan((float *)v77, (float)(char)buf[3] / 200.0);
                    if ((_BYTE)v157)
                      ZoneState::SetGain((float *)v77, (float)(char)v157);
                    v79 = SBYTE1(v157);
                    if (BYTE1(v157))
                    {
                      v80 = MEMORY[0x24BDACB70];
                      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v172 = 136315650;
                        *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                        *(_WORD *)v173 = 1024;
                        *(_DWORD *)&v173[2] = 55;
                        v174 = 1024;
                        *(_DWORD *)v175 = v79;
                        _os_log_impl(&dword_210A23000, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadFromEXS24SamplerZone: zone volume scaling %d", v172, 0x18u);
                        v81 = BYTE1(v157);
                      }
                      else
                      {
                        v81 = v79;
                      }
                      *(_DWORD *)v172 = v81;
                      CHECK_RANGE<int>((int *)v172, -90, 90, (uint64_t)"ZoneState::SetVolumeScale: Invalid scale");
                      *((_WORD *)v77 + 110) = *(_WORD *)v172;
                    }
                    ZoneState::SetKeyRange(v77, SBYTE2(v157), SBYTE3(v157));
                    if (BYTE4(v157) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v172 = 136315394;
                      *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 61;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot handle zone velocity xfades", v172, 0x12u);
                    }
                    if ((v78 & 8) != 0)
                      ZoneState::SetVelRange(v77, SBYTE5(v157), SBYTE6(v157));
                    if (HIBYTE(v157) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v172 = 136315394;
                      *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 68;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Cannot handle zone velocity xfades", v172, 0x12u);
                    }
                    if ((v159[13] & 1) != 0)
                    {
                      ZoneState::SetLoopEnabled(v77, 1);
                      v83 = v159[13];
                      if ((v159[13] & 2) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v172 = 136315394;
                        *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                        *(_WORD *)v173 = 1024;
                        *(_DWORD *)&v173[2] = 75;
                        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Zone equal power loop xfade not supported", v172, 0x12u);
                        v83 = v159[13];
                      }
                      if ((v83 & 4) != 0)
                        ZoneState::SetLoopingMode(v77, 51);
                      if (*(int *)&v159[4] <= *(int *)v159)
                      {
                        ZoneState::SetLoopEnabled(v77, 0);
                      }
                      else
                      {
                        ZoneState::SetLoopStart(v77, *(int *)v159);
                        ZoneState::SetLoopEnd(v77, *(int *)&v159[4] - 1);
                        if (*(_DWORD *)&v159[8] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)v172 = 136315394;
                          *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                          *(_WORD *)v173 = 1024;
                          *(_DWORD *)&v173[2] = 87;
                          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Zone loop xfade not supported", v172, 0x12u);
                        }
                      }
                      ZoneState::SetLoopTune((float *)v77, (float)v159[12]);
                    }
                    v84 = HIDWORD(v158);
                    if (SHIDWORD(v158) > (int)v158)
                    {
                      if ((_DWORD)v158)
                      {
                        ZoneState::SetSampleStart(v77, (int)v158);
                        v84 = HIDWORD(v158);
                      }
                      if (*(_QWORD *)(*((_QWORD *)v77 + 13) + 184) - 1 > (unint64_t)v84)
                        ZoneState::SetSampleEnd(v77, v84 - 1);
                    }
                    v85 = v161;
                    v86 = v162;
                    v87 = v163;
                    if ((v161 || v162 || v163) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)v172 = 136316162;
                      *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                      *(_WORD *)v173 = 1024;
                      *(_DWORD *)&v173[2] = 108;
                      v174 = 1024;
                      *(_DWORD *)v175 = v85;
                      *(_WORD *)&v175[4] = 1024;
                      *(_DWORD *)&v175[6] = v86;
                      *(_WORD *)v176 = 1024;
                      *(_DWORD *)&v176[2] = v87;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadFromEXS24SamplerZone: adsr attack: %u decay: %u release: %u", v172, 0x24u);
                    }
                    v3 = (uint64_t)buf;
                    if ((_BYTE)v164)
                      ZoneState::SetCoarseTuning(v77, (char)v164);
                    v28 = SBYTE1(v164);
                    if (BYTE1(v164))
                    {
                      if (SBYTE1(v164) == 1)
                      {
                        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                        {
                          *(_DWORD *)v172 = 136315394;
                          *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                          *(_WORD *)v173 = 1024;
                          *(_DWORD *)&v173[2] = 116;
                          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d Zone specifies gate mode trigger on key up", v172, 0x12u);
                        }
                        ZoneState::SetGateMode(v77, 12);
                      }
                      else
                      {
                        v88 = MEMORY[0x24BDACB70];
                        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v172 = 136315650;
                          *(_QWORD *)&v172[4] = "ZoneState_EXS24.cpp";
                          *(_WORD *)v173 = 1024;
                          *(_DWORD *)&v173[2] = 121;
                          v174 = 1024;
                          *(_DWORD *)v175 = v28;
                          _os_log_impl(&dword_210A23000, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported zone trigger type: %u", v172, 0x18u);
                        }
                      }
                      v28 = 0;
                    }
                  }
                  v2 = v139;
                  Smart<__CFString const*>::~Smart((const void **)v153);
                  v140 = 1;
                  goto LABEL_288;
                }
                v71 = v2;
                v72 = MEMORY[0x24BDACB70];
                if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v172 = 136315394;
                  *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                  *(_WORD *)v173 = 1024;
                  *(_DWORD *)&v173[2] = 282;
                  _os_log_impl(&dword_210A23000, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: zone has no sample -- ignoring", v172, 0x12u);
                }
                v28 = 0;
                v2 = v71;
                goto LABEL_288;
              case 2:
                if (v142 & 1 | ((v2 & 1) == 0))
                {
LABEL_58:
                  v28 = 0;
                  v32 = v146;
                  if (v146 - 1 >= v17)
                    v32 = v17;
                  v146 = v32;
                }
                else
                {
                  LODWORD(v171) = 0;
                  *(_OWORD *)(v3 + 96) = 0u;
                  *(_OWORD *)(v3 + 112) = 0u;
                  *(_OWORD *)(v3 + 64) = 0u;
                  *(_OWORD *)(v3 + 80) = 0u;
                  *(_OWORD *)(v3 + 32) = 0u;
                  *(_OWORD *)(v3 + 48) = 0u;
                  if (v22 >= 0x84)
                    v24 = 132;
                  else
                    v24 = v22;
                  *(_OWORD *)v3 = 0uLL;
                  *(_OWORD *)(v3 + 16) = 0uLL;
                  v25 = pread(__fd, buf, v24, v23);
                  v29 = v2;
                  if (v19)
                    swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x84u);
                  v30 = v178;
                  if (v178 < 0x1000)
                  {
                    v31 = InstrumentState::AddLayer((char **)this, -1, 0);
                    v2 = v29;
                    *(_QWORD *)v172 = CFStringCreateWithCString(alloc, v180, 0x600u);
                    (*(void (**)(LayerState *))(*(_QWORD *)v31 + 72))(v31);
                    LayerState::LoadFromEXS24GroupAndDefaults((uint64_t)v31, (char *)buf, v181, &v154);
                    Smart<__CFString const*>::~Smart((const void **)v172);
                    v28 = 0;
                    v148 = 1;
                    goto LABEL_288;
                  }
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v172 = 136315906;
                    *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                    *(_WORD *)v173 = 1024;
                    *(_DWORD *)&v173[2] = 343;
                    v174 = 1024;
                    *(_DWORD *)v175 = v30;
                    *(_WORD *)&v175[4] = 1024;
                    *(_DWORD *)&v175[6] = 4095;
                    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d EXS24 group index (%d) > max (%u) -- skipping", v172, 0x1Eu);
                  }
                  v28 = 0;
                  v22 = HIDWORD(__buf);
                  v2 = v29;
                }
                goto LABEL_290;
              case 3:
                if ((v143 & 1) != 0)
                  goto LABEL_62;
                bzero(buf, 0x250uLL);
                if (v22 >= 0x250)
                  v24 = 592;
                else
                  v24 = v22;
                v25 = pread(__fd, buf, v24, v23);
                if ((v19 & 1) != 0)
                  swapChunk((unsigned int *)buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::s, 0x250u);
                while (1)
                {
                  v64 = strchr((char *)&v164, 58);
                  if (!v64)
                    break;
                  *v64 = 47;
                }
                v65 = v2;
                v67 = v164 != 1414748499 || v165 != 19781;
                v68 = CFStringCreateWithCString(alloc, v180, 0x600u);
                if (v67)
                  v69 = &v164;
                else
                  v69 = (unsigned int *)&v166;
                *(_QWORD *)v172 = v68;
                v70 = strlen((const char *)v69);
                *(_QWORD *)v153 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v69, v70, 1u);
                v152 = (glob_t *)MEMORY[0x212BCD248](0, *(_QWORD *)v172, 0, 0, *(_QWORD *)v153);
                InstrumentManager::AddSample(*((InstrumentManager **)this + 14), v152, *(unsigned __int8 *)(*((_QWORD *)this + 3) + 176), v144++ | 0x10000000u, 1);
                Smart<__CFURL const*>::~Smart((const void **)&v152);
                Smart<__CFURL const*>::~Smart((const void **)v153);
                Smart<__CFString const*>::~Smart((const void **)v172);
                v28 = 0;
                v2 = v65;
                goto LABEL_288;
              case 4:
                if ((v2 & 1) != 0)
                {
                  v28 = 0;
                  v2 = 1;
                  goto LABEL_290;
                }
                if (HIDWORD(__buf) >= 0x130)
                  v33 = 304;
                else
                  v33 = HIDWORD(__buf);
                v25 = pread(__fd, v181, v33, v23);
                v35 = v181[0];
                if (v19)
                {
                  v36 = 0;
                  v35 = bswap32(v181[0]);
                  v181[0] = v35;
                  do
                  {
                    *(_WORD *)((char *)&v181[26] + v36) = bswap32(*(unsigned __int16 *)((char *)&v181[26] + v36)) >> 16;
                    v36 += 2;
                  }
                  while (v36 != 200);
                }
                if (v35 < 1)
                {
                  v28 = 0;
                  v2 = 1;
                  LODWORD(v24) = v33;
LABEL_288:
                  if ((_DWORD)v24 != v25)
                  {
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                      LOWORD(v158) = 1024;
                      *(_DWORD *)(v3 + 14) = 412;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: Error reading from file", buf, 0x12u);
                    }
                    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                    {
                      CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
                      *(_DWORD *)buf = 136315906;
                      *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                      LOWORD(v158) = 1024;
                      *(_DWORD *)(v3 + 14) = 413;
                      HIWORD(v158) = 2080;
                      *(_QWORD *)(v3 + 20) = v172;
                      *(_WORD *)&v159[8] = 2080;
                      *(_QWORD *)(v3 + 30) = "Invalid EXS file";
                      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                    }
                    v124 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                    CAXException::CAXException(v124, "Invalid EXS file", -10871);
                  }
                  v22 = HIDWORD(__buf);
LABEL_290:
                  v17 = v22 + v23;
                  if (v28)
                  {
                    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                    {
                      CAX4CCString::CAX4CCString((CAX4CCString *)&__buf, v28);
                      *(_DWORD *)buf = 136315906;
                      *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
                      LOWORD(v158) = 1024;
                      *(_DWORD *)(v3 + 14) = 448;
                      HIWORD(v158) = 2080;
                      *(_QWORD *)(v3 + 20) = &__buf;
                      *(_WORD *)&v159[8] = 2080;
                      *(_QWORD *)(v3 + 30) = "Invalid or unsupported EXS file format";
                      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                    }
                    v121 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                    CAXException::CAXException(v121, "Invalid or unsupported EXS file format", v28);
                  }
                  continue;
                }
                v37 = 0;
                v38 = 0;
                v3 = 0;
                break;
              default:
LABEL_62:
                v28 = 0;
                goto LABEL_290;
            }
            while (1)
            {
              v39 = *((__int16 *)&v181[26] + v37);
              v40 = *((unsigned __int8 *)&v181[1] + v37);
              if (v40 > 0xB9)
              {
                v42 = v40 - 186;
                v43 = v42 > 0x2B;
                v44 = (1 << v42) & 0xC30C30C30C3;
                v45 = v43 || v44 == 0;
                if (v45)
                  goto LABEL_94;
LABEL_82:
                if (!((v39 != -11) | v38 & 1))
                {
LABEL_92:
                  InstrumentState::AddLFO(this, 240);
LABEL_93:
                  v38 = 1;
                  goto LABEL_94;
                }
                if (!((v39 != -10) | v3 & 1))
                {
                  InstrumentState::AddLFO(this, 241);
LABEL_85:
                  v3 = 1;
                }
              }
              else
              {
                v2 = *((__int16 *)&v181[26] + v37);
                if (*((unsigned __int8 *)&v181[1] + v37) <= 0x3Eu)
                {
                  if (*((unsigned __int8 *)&v181[1] + v37) > 0x13u)
                  {
                    if (v40 - 47 >= 3)
                    {
                      if (v40 == 20)
                      {
                        if (v39 >= 0x80)
                        {
                          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315394;
                            v157 = "EXS24_Utils.h";
                            LOWORD(v158) = 1024;
                            *(_DWORD *)((char *)&v158 + 2) = 86;
                            v127 = MEMORY[0x24BDACB70];
                            v128 = "%25s:%-5d  Exp4SmallParamToFactor called with large param!";
LABEL_394:
                            for (i = buf; ; i = v172)
                            {
                              _os_log_impl(&dword_210A23000, v127, OS_LOG_TYPE_ERROR, v128, i, 0x12u);
                              __break(1u);
LABEL_396:
                              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                                break;
                              *(_DWORD *)v172 = 136315394;
                              *(_QWORD *)&v172[4] = "InstrumentState_EXS24.cpp";
                              *(_WORD *)v173 = 1024;
                              *(_DWORD *)&v173[2] = 308;
                              v127 = MEMORY[0x24BDACB70];
                              v128 = "%25s:%-5d  ASSERTION FAILED:  NULL parent for zone with valid group index";
                            }
                          }
LABEL_422:
                          __break(1u);
                          goto LABEL_423;
                        }
                        if (*((_WORD *)&v181[26] + v37))
                          v48 = powf((float)v39 / 127.0, 4.0);
                        else
                          v48 = 0.0;
                        InstrumentState::SetPortamentoTime(this, v48 * 5.0);
                      }
                      else if (v40 == 45)
                      {
                        InstrumentState::SetKeyOffset(this, *((__int16 *)&v181[26] + v37));
                      }
                      goto LABEL_94;
                    }
                    if (!(((_DWORD)v2 != 1) | v38 & 1))
                      goto LABEL_92;
                  }
                  else
                  {
                    switch(*((_BYTE *)&v181[1] + v37))
                    {
                      case 5:
                        if (*((_WORD *)&v181[26] + v37))
                          InstrumentState::SetVoiceCount(this, *((__int16 *)&v181[26] + v37));
                        break;
                      case 7:
                        InstrumentState::SetGain((float *)this, (float)v39);
                        break;
                      case 0xA:
                        if (v39 != 2)
                        {
                          if (v39 != 1 || *((_DWORD *)this + 31) == 76)
                            break;
                          v47 = 76;
                          goto LABEL_144;
                        }
                        if (*((_DWORD *)this + 31) != 77)
                        {
                          v47 = 77;
LABEL_144:
                          *((_DWORD *)this + 31) = v47;
                          (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4142, 0);
                          break;
                        }
                        break;
                      case 0xE:
                        InstrumentState::SetCoarseTuning(this, *((__int16 *)&v181[26] + v37));
                        break;
                      case 0xF:
                        InstrumentState::SetFineTuning((float *)this, (float)v39);
                        break;
                      default:
                        break;
                    }
                  }
                }
                else
                {
                  if (*((unsigned __int8 *)&v181[1] + v37) > 0x64u)
                  {
                    switch(*((_BYTE *)&v181[1] + v37))
                    {
                      case 0xA6:
                        *(_DWORD *)buf = *((__int16 *)&v181[26] + v37);
                        if (v39 == -1)
                        {
                          v41 = -1;
                        }
                        else
                        {
                          CHECK_RANGE<unsigned int>((unsigned int *)buf, 0, 0x7Fu, (uint64_t)"InstrumentState::SetRemoteReferenceKey: Invalid key");
                          v41 = buf[0];
                          if (*(_DWORD *)buf == *((unsigned __int8 *)this + 200))
                            goto LABEL_94;
                        }
                        *((_BYTE *)this + 200) = v41;
                        goto LABEL_94;
                      case 0xA7:
                        if (!((v39 != 34) | v3 & 1))
                        {
                          v3 = 0;
                          goto LABEL_94;
                        }
                        if ((v3 & 1) == 0)
                          InstrumentState::AddLFO(this, 241);
                        if ((_DWORD)v2 != 34)
                        {
                          if (v39 > 33)
                          {
                            LOWORD(v34) = lfoHzTab[v39 - 34];
                            v49 = (double)v34 * 0.001;
                          }
                          else
                          {
                            v49 = 768.0 / (float)((float)tabBeatRate[v39] * 4.0);
                          }
                          v60 = (float **)*((_QWORD *)this + 26);
                          v61 = (float **)*((_QWORD *)this + 27);
                          while (v60 != v61)
                          {
                            v62 = *v60;
                            if ((**(unsigned int (***)(float *))*v60)(*v60) == 268435697)
                              goto LABEL_170;
                            ++v60;
                          }
                          v62 = 0;
LABEL_170:
                          LFOState::SetRate(v62, v49);
                          goto LABEL_85;
                        }
                        for (j = (_QWORD *)*((_QWORD *)this + 26); ; ++j)
                        {
                          v56 = (unsigned int (***)(_QWORD))*j;
                          if ((**(unsigned int (***)(_QWORD))*j)(*j) == 268435697)
                            break;
                        }
                        ((void (*)(unsigned int (***)(_QWORD), _QWORD))(*v56)[8])(v56, 0);
                        break;
                      case 0xA8:
                      case 0xA9:
                      case 0xAA:
                      case 0xAC:
                      case 0xAD:
                      case 0xB0:
                      case 0xB1:
                      case 0xB2:
                      case 0xB3:
                        goto LABEL_94;
                      case 0xAB:
                        *((_BYTE *)this + 185) = v39 == 1;
                        goto LABEL_94;
                      case 0xAE:
                      case 0xAF:
                      case 0xB4:
                      case 0xB5:
                        goto LABEL_82;
                      default:
                        if (v40 == 101)
                          InstrumentState::SetOutputScope(this, *((__int16 *)&v181[26] + v37));
                        goto LABEL_94;
                    }
                    goto LABEL_85;
                  }
                  if (v40 == 63)
                  {
                    if (!(((_DWORD)v2 != 34) | v38 & 1))
                    {
                      v38 = 0;
                      goto LABEL_94;
                    }
                    if ((v38 & 1) == 0)
                      InstrumentState::AddLFO(this, 240);
                    if ((_DWORD)v2 == 34)
                    {
                      for (k = (_QWORD *)*((_QWORD *)this + 26); ; ++k)
                      {
                        v54 = (unsigned int (***)(_QWORD))*k;
                        if ((**(unsigned int (***)(_QWORD))*k)(*k) == 268435696)
                          break;
                      }
                      ((void (*)(unsigned int (***)(_QWORD), _QWORD))(*v54)[8])(v54, 0);
                    }
                    else
                    {
                      if (v39 > 33)
                      {
                        LOWORD(v34) = lfoHzTab[v39 - 34];
                        v46 = (double)v34 * 0.001;
                      }
                      else
                      {
                        v46 = 768.0 / (float)((float)tabBeatRate[v39] * 4.0);
                      }
                      v57 = (float **)*((_QWORD *)this + 26);
                      v58 = (float **)*((_QWORD *)this + 27);
                      while (v57 != v58)
                      {
                        v59 = *v57;
                        if ((**(unsigned int (***)(float *))*v57)(*v57) == 268435696)
                          goto LABEL_163;
                        ++v57;
                      }
                      v59 = 0;
LABEL_163:
                      LFOState::SetRate(v59, v46);
                    }
                    goto LABEL_93;
                  }
                  if (v40 != 64)
                  {
                    if (v40 == 95)
                      InstrumentState::SetVelocityOffset(this, *((__int16 *)&v181[26] + v37));
                    goto LABEL_94;
                  }
                  if (*((_WORD *)&v181[26] + v37))
                  {
                    if ((v38 & 1) == 0)
                      InstrumentState::AddLFO(this, 240);
                    v172[0] = 0;
                    v153[0] = 0;
                    if (v39 > 2)
                    {
                      v138 = ParamToLFOWaveform(v39, v172, v153);
                      v50 = (_QWORD *)*((_QWORD *)this + 26);
                      v51 = (_QWORD *)*((_QWORD *)this + 27);
                      while (v50 != v51)
                      {
                        v52 = (_DWORD *)*v50;
                        if ((**(unsigned int (***)(_QWORD))*v50)(*v50) == 268435696)
                          goto LABEL_152;
                        ++v50;
                      }
                      v52 = 0;
LABEL_152:
                      LFOState::SetWaveform(v52, v138);
                    }
                    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315394;
                      v157 = "InstrumentState_EXS24.cpp";
                      LOWORD(v158) = 1024;
                      *(_DWORD *)((char *)&v158 + 2) = 647;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Saw waveforms not supported on global LFO", buf, 0x12u);
                    }
                    goto LABEL_93;
                  }
                }
              }
LABEL_94:
              if (++v37 >= v181[0])
              {
                v28 = 0;
                v2 = 1;
                LODWORD(v24) = v33;
                v3 = (uint64_t)buf;
                goto LABEL_288;
              }
            }
          }
          if (v179 != 1413631827)
            goto LABEL_385;
          swapChunk((unsigned int *)&__buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::swap, 0x54u);
        }
        else
        {
          if (v179 != 1245859667)
          {
            if (v179 == 1397703242)
            {
              v19 = 0;
              BYTE3(__buf) &= ~0x80u;
              HIDWORD(__buf) = WORD2(__buf) & 0x7FFF;
              goto LABEL_31;
            }
LABEL_385:
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
              LOWORD(v158) = 1024;
              *(_DWORD *)(v3 + 14) = 195;
              HIWORD(v158) = 1024;
              *(_DWORD *)v159 = v18;
              *(_WORD *)&v159[4] = 1040;
              *(_DWORD *)(v3 + 26) = 4;
              *(_WORD *)&v159[10] = 2080;
              *(_QWORD *)&v159[12] = &v179;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentState::LoadEXS24Instrument: unknown magic number 0x%x ('%.4s')", buf, 0x28u);
            }
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v172, 0xFFFFD589);
              *(_DWORD *)buf = 136315906;
              v157 = "InstrumentState_EXS24.cpp";
              v158 = 0x820000000C40400;
              *(_QWORD *)v159 = v172;
              *(_WORD *)&v159[8] = 2080;
              *(_QWORD *)&v159[10] = "Invalid EXS file";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v126 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v126, "Invalid EXS file", -10871);
          }
          swapChunk((unsigned int *)&__buf, InstrumentState::LoadEXS24Instrument(__CFURL const*)::swap, 0x54u);
          BYTE3(__buf) &= ~0x80u;
          HIDWORD(__buf) = WORD2(__buf) & 0x7FFF;
        }
        v19 = 1;
        goto LABEL_31;
      }
      break;
    }
    v16 = v148;
    if ((v2 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
      LOWORD(v158) = 1024;
      *(_DWORD *)(v3 + 14) = 429;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: no default settings present", buf, 0x12u);
    }
    v15 = v140;
    v12 = v144;
    if ((v140 & v148 & 1) != 0)
      goto LABEL_300;
    v13 = 1;
    v14 = v148;
    v45 = v137++ == 3;
  }
  while (!v45);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
    LOWORD(v158) = 1024;
    *(_DWORD *)(v3 + 14) = 438;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: no zones and/or groups present!", buf, 0x12u);
  }
LABEL_300:
  __buf = CFURLCopyLastPathComponent(urla);
  *(_QWORD *)v172 = CFURLCreateStringByReplacingPercentEscapes(0, __buf, &stru_24CA985C0);
  (*(void (**)(InstrumentState *))(*(_QWORD *)this + 72))(this);
  v89 = (LayerState **)*((_QWORD *)this + 29);
  v90 = (LayerState **)*((_QWORD *)this + 30);
  if (v89 != v90)
  {
    while (1)
    {
      v91 = *v89;
      if (!HasZones(*v89))
        break;
      ++v89;
LABEL_303:
      if (v89 == v90)
        goto LABEL_310;
    }
    v92 = v90 - 1;
    while (v92 != v89)
    {
      v90 = v92;
      v94 = *v92--;
      v93 = v94;
      if (HasZones(v94))
      {
        *v89++ = v93;
        *v90 = v91;
        goto LABEL_303;
      }
    }
  }
  v90 = v89;
LABEL_310:
  if (*((LayerState ***)this + 30) != v90)
  {
    v95 = v90;
    do
      SamplerState::Unref(*v95++);
    while (v95 != *((LayerState ***)this + 30));
    if (v95 != v90)
      *((_QWORD *)this + 30) = v90;
  }
  if ((v154 & 1) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
      LOWORD(v158) = 1024;
      *(_DWORD *)(v3 + 14) = 466;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: portamento replaced by pitcher", buf, 0x12u);
    }
    InstrumentState::SetPortamentoTime(this, 0.0);
  }
  v96 = *((_QWORD *)this + 24);
  if (v96)
    MEMORY[0x212BCDF50](v96, 0x1000C40451B5BE8);
  *((_QWORD *)this + 24) = 0;
  v97 = (uint64_t *)*((_QWORD *)this + 29);
  if (v97 == *((uint64_t **)this + 30))
  {
    v98 = 0;
  }
  else
  {
    v98 = 0;
    v99 = MEMORY[0x24BDACB70];
    do
    {
      v100 = *v97;
      v101 = *(unsigned int *)(*v97 + 116);
      if ((_DWORD)v101 == -1)
      {
        *(_BYTE *)(v100 + 128) = 1;
      }
      else
      {
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
        {
          v102 = (**(uint64_t (***)(uint64_t))v100)(v100);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
          LOWORD(v158) = 1024;
          *(_DWORD *)(v3 + 14) = 481;
          HIWORD(v158) = 1024;
          *(_DWORD *)v159 = v102;
          *(_WORD *)&v159[4] = 1024;
          *(_DWORD *)(v3 + 26) = v101;
          _os_log_impl(&dword_210A23000, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: layer %u is selected by layer at index %u", buf, 0x1Eu);
        }
        v103 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v101);
        v104 = -10;
        v105 = (uint64_t (***)(_QWORD))v100;
        do
        {
          v106 = v103;
          *(_QWORD *)(v103 + 120) = v105;
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
          {
            v107 = (**(uint64_t (***)(uint64_t))v106)(v106);
            v108 = (**v105)(v105);
            *(_DWORD *)buf = 136315906;
            v157 = "InstrumentState_EXS24.cpp";
            v158 = 0x400000001E90400;
            *(_DWORD *)v159 = v107;
            *(_WORD *)&v159[4] = 1024;
            *(_DWORD *)&v159[6] = v108;
            _os_log_impl(&dword_210A23000, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: recursing: layer %u selects layer %u", buf, 0x1Eu);
          }
          v109 = *(unsigned int *)(v106 + 116);
          if ((_DWORD)v109 == -1)
            break;
          if (!v104)
            break;
          v103 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v109);
          ++v104;
          v105 = (uint64_t (***)(_QWORD))v106;
        }
        while (v103);
        *(_QWORD *)(v100 + 120) = v106;
        v3 = (uint64_t)buf;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
        {
          v110 = (**(uint64_t (***)(uint64_t))v100)(v100);
          v111 = (**(uint64_t (***)(uint64_t))v106)(v106);
          *(_DWORD *)buf = 136315906;
          v157 = "InstrumentState_EXS24.cpp";
          v158 = 0x400000001F20400;
          *(_DWORD *)v159 = v110;
          *(_WORD *)&v159[4] = 1024;
          *(_DWORD *)&v159[6] = v111;
          _os_log_impl(&dword_210A23000, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: chain end: layer %u selects layer %u", buf, 0x1Eu);
        }
        *(_BYTE *)(v100 + 128) = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * *(unsigned int *)(v100 + 116)) == v100;
        v98 = 1;
      }
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        v112 = (**(uint64_t (***)(uint64_t))v100)(v100);
        v113 = " ";
        if (!*(_BYTE *)(v100 + 128))
          v113 = " not ";
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
        LOWORD(v158) = 1024;
        *(_DWORD *)(v3 + 14) = 505;
        HIWORD(v158) = 1024;
        *(_DWORD *)v159 = v112;
        *(_WORD *)&v159[4] = 2080;
        *(_QWORD *)(v3 + 26) = v113;
        _os_log_impl(&dword_210A23000, v99, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: layer %u is%senabled\n", buf, 0x22u);
      }
      v114 = *(unsigned __int8 *)(v100 + 130);
      if (v114 != 255)
      {
        v115 = (_QWORD *)*((_QWORD *)this + 24);
        if (!v115)
        {
          v115 = (_QWORD *)operator new();
          *v115 = 0;
          v115[1] = 0;
          *((_QWORD *)this + 24) = v115;
        }
        if ((v114 & 0x80) != 0)
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        *(_QWORD *)((char *)v115 + ((v114 >> 3) & 0x18)) |= 1 << v114;
      }
      ++v97;
    }
    while (v97 != *((uint64_t **)this + 30));
  }
  *((_BYTE *)this + 184) = v98 & 1;
  if (st_size != v17 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)(v3 + 4) = "InstrumentState_EXS24.cpp";
    LOWORD(v158) = 1024;
    *(_DWORD *)(v3 + 14) = 534;
    HIWORD(v158) = 1024;
    *(_DWORD *)v159 = v17;
    *(_WORD *)&v159[4] = 1024;
    *(_DWORD *)(v3 + 26) = st_size;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::LoadEXS24Instrument: fileOffset != fileSize (%d != %d)\n", buf, 0x1Eu);
  }
  (*(void (**)(InstrumentState *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  Smart<__CFString const*>::~Smart((const void **)v172);
  Smart<__CFString const*>::~Smart((const void **)&__buf);
  return close(__fd);
}

void sub_210AAF0B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *swapChunk(unsigned int *result, const int *a2, unsigned int a3)
{
  int v3;
  const int *v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = *a2;
  if (*a2)
  {
    v4 = a2 + 1;
    v5 = result;
    do
    {
      if (v3 == 4)
      {
        *v5 = bswap32(*v5);
        v6 = 4;
      }
      else if (v3 == 2)
      {
        *(_WORD *)v5 = bswap32(*(unsigned __int16 *)v5) >> 16;
        v6 = 2;
      }
      else
      {
        if ((v3 & 0x80000000) == 0)
          return result;
        v6 = -v3;
      }
      v5 = (unsigned int *)((char *)v5 + v6);
      v7 = *v4++;
      v3 = v7;
      if (v7)
        v8 = (int)v5 - (int)result >= a3;
      else
        v8 = 1;
    }
    while (!v8);
  }
  return result;
}

BOOL HasZones(LayerState *a1)
{
  return ((*((_QWORD *)a1 + 57) - *((_QWORD *)a1 + 56)) & 0x7FFFFFFF8) != 0;
}

void InstrumentState::UpdateLayers(InstrumentState *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 184))
  {
    v2 = (uint64_t *)*((_QWORD *)this + 29);
    v3 = (uint64_t *)*((_QWORD *)this + 30);
    if (v2 != v3)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 29);
      do
      {
        v5 = *v4++;
        *(_BYTE *)(v5 + 129) = 0;
      }
      while (v4 != v3);
      v6 = MEMORY[0x24BDACB70];
      do
      {
        v7 = *v2;
        v8 = *(_QWORD *)(*v2 + 120);
        if (*(_BYTE *)(*v2 + 128))
          v9 = v8 == 0;
        else
          v9 = 1;
        if (!v9 && !*(_BYTE *)(v7 + 129))
        {
          *(_BYTE *)(v7 + 128) = 0;
          *(_BYTE *)(v8 + 128) ^= 1u;
          *(_BYTE *)(v8 + 129) = 1;
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            v10 = (**(uint64_t (***)(uint64_t))v7)(v7);
            v11 = (**(uint64_t (***)(uint64_t))v8)(v8);
            v12 = "enabled";
            if (!*(_BYTE *)(v8 + 128))
              v12 = "disabled";
            *(_DWORD *)buf = 136316162;
            v14 = "InstrumentState_EXS24.cpp";
            v15 = 1024;
            v16 = 558;
            v17 = 1024;
            v18 = v10;
            v19 = 1024;
            v20 = v11;
            v21 = 2080;
            v22 = v12;
            _os_log_impl(&dword_210A23000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::UpdateLayers: layer %u now disabled, next layer %u now %s\n", buf, 0x28u);
            v3 = (uint64_t *)*((_QWORD *)this + 30);
          }
        }
        ++v2;
      }
      while (v2 != v3);
    }
  }
}

void MidiControls::~MidiControls(MidiControls *this)
{
  JUMPOUT(0x212BCDF50);
}

double MidiControls::Reset(MidiControls *this)
{
  char *v1;
  double result;

  *(_OWORD *)((char *)this + 8) = 0u;
  v1 = (char *)this + 8;
  *(_OWORD *)(v1 + 252) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_WORD *)v1 + 5) = 32576;
  *((_WORD *)v1 + 134) = 3072;
  *(_QWORD *)&result = 1103101952;
  *((_QWORD *)v1 + 34) = 1103101952;
  return result;
}

uint64_t MidiControls::SetProgramChange(MidiControls *this, char a2)
{
  *((_BYTE *)this + 265) = a2;
  return 1;
}

uint64_t MidiControls::SetPitchWheel(MidiControls *this, __int16 a2)
{
  float v2;

  *((_WORD *)this + 133) = a2;
  v2 = (double)(a2 - 0x2000) * 0.000122070312;
  *((float *)this + 71) = v2;
  return 1;
}

uint64_t MidiControls::SetChannelPressure(MidiControls *this, char a2)
{
  *((_BYTE *)this + 264) = a2;
  return 1;
}

uint64_t MidiControls::SetPolyPressure(MidiControls *this, unsigned int a2, char a3)
{
  *((_BYTE *)this + a2 + 136) = a3;
  return 1;
}

uint64_t MidiControls::SetController(MidiControls *this, unsigned int a2, char a3)
{
  if ((a2 & 0x80) == 0)
    *((_BYTE *)this + a2 + 8) = a3;
  return (a2 >> 7) ^ 1;
}

uint64_t MidiControls::SetSysex(MidiControls *this, void *a2)
{
  return 0;
}

float MidiControls::GetPitchBend(MidiControls *this)
{
  return *((float *)this + 71) * *((float *)this + 70);
}

void SynthGroupElement::~SynthGroupElement(SynthGroupElement *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24CA8F9E8;
  v2 = *((_QWORD *)this + 29);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  ausdk::AUElement::~AUElement((const void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24CA8F9E8;
  v2 = *((_QWORD *)this + 29);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  ausdk::AUElement::~AUElement((const void **)this);
  JUMPOUT(0x212BCDF50);
}

uint64_t SynthGroupElement::NoteOff(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = this;
  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(this + 24 * v4 + 96);
    if (v5)
      break;
LABEL_5:
    if (++v4 == *(unsigned __int8 *)(this + 241) + 1)
      return this;
  }
  while (*(_DWORD *)(v5 + 40) != a2)
  {
    v5 = *(_QWORD *)(v5 + 16);
    if (!v5)
      goto LABEL_5;
  }
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  v6 = (_QWORD *)(v5 + 8);
  if ((_DWORD)v4)
  {
    if (v7)
    {
      *(_QWORD *)(v7 + 16) = v8;
      v8 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      *(_QWORD *)(this + 120) = v8;
    }
    v9 = (_QWORD *)(this + 128);
    if (v8)
      v9 = (_QWORD *)(v8 + 8);
    *v9 = v7;
    *v6 = 0;
    *(_QWORD *)(v5 + 16) = 0;
    v11 = (_QWORD *)(this + 144);
    v10 = *(_QWORD *)(this + 144);
    *(_DWORD *)(v5 + 44) = *(_DWORD *)(this + 136);
    *(_QWORD *)(v5 + 16) = v10;
  }
  else
  {
    if (v7)
    {
      *(_QWORD *)(v7 + 16) = v8;
      v8 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      *(_QWORD *)(this + 96) = v8;
    }
    v12 = (_QWORD *)(this + 104);
    if (v8)
      v12 = (_QWORD *)(v8 + 8);
    *v12 = v7;
    *v6 = 0;
    *(_QWORD *)(v5 + 16) = 0;
    if (*(_BYTE *)(this + 240))
    {
      v11 = (_QWORD *)(this + 168);
      v10 = *(_QWORD *)(this + 168);
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a3);
      v13 = *(_QWORD *)(v3 + 192);
      v11 = (_QWORD *)(v3 + 192);
      v10 = v13;
    }
    *(_DWORD *)(v5 + 44) = *((_DWORD *)v11 - 2);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = v10;
  }
  if (v10)
    v14 = (_QWORD *)(v10 + 8);
  else
    v14 = v11 + 1;
  *v14 = v5;
  *v11 = v5;
  return this;
}

uint64_t SynthGroupElement::ChannelMessage(SynthGroupElement *this, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v4;
  uint64_t (*v5)(void);

  if (a2 <= 0x65 && (a2 & 0xFFFD) != 0x40)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 29) + 56))(*((_QWORD *)this + 29), a2, a3);
  HIDWORD(v4) = a2;
  LODWORD(v4) = a2 - 160;
  switch((v4 >> 4))
  {
    case 0u:
      result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 29) + 48))(*((_QWORD *)this + 29), (a3 >> 7), a3 & 0x7F);
      break;
    case 2u:
      v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 29) + 24);
      goto LABEL_10;
    case 3u:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29), a3);
      break;
    case 4u:
      v5 = *(uint64_t (**)(void))(**((_QWORD **)this + 29) + 32);
LABEL_10:
      result = v5();
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t SynthGroupElement::AllNotesOff(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v20 = this;
  v3 = 0;
  v4 = 1;
  v5 = 4;
  do
  {
    v6 = v4;
    v7 = v20 + 24 * v3;
    v10 = *(_QWORD *)(v7 + 96);
    v9 = (_QWORD *)(v7 + 96);
    v8 = v10;
    if (v10)
    {
      v11 = v20 + 88 + 24 * v3 + 16;
      v12 = (_DWORD *)(v20 + 88 + 24 * v5);
      v13 = (uint64_t *)(v12 + 2);
      do
      {
        v14 = *(_QWORD *)(v8 + 8);
        v15 = *(_QWORD *)(v8 + 16);
        if (v14)
        {
          *(_QWORD *)(v14 + 16) = v15;
          v16 = *(_QWORD *)(v8 + 16);
        }
        else
        {
          *v9 = v15;
          v16 = v15;
        }
        if (v16)
          v17 = (_QWORD *)(v16 + 8);
        else
          v17 = (_QWORD *)v11;
        *v17 = v14;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 56))(v8, a2);
        *(_DWORD *)(v8 + 44) = *v12;
        v18 = *v13;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = v18;
        if (v18)
          v19 = (_QWORD *)(v18 + 8);
        else
          v19 = v12 + 4;
        *v19 = v8;
        *v13 = v8;
        v8 = v15;
      }
      while (v15);
    }
    v4 = 0;
    v5 = 2;
    v3 = 1;
  }
  while ((v6 & 1) != 0);
  return this;
}

uint64_t SynthGroupElement::ResetAllControllers(SynthGroupElement *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 29) + 16))(*((_QWORD *)this + 29));
}

uint64_t SynthGroupElement::Reset(SynthGroupElement *this)
{
  uint64_t result;
  uint64_t i;
  _QWORD *v4;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 29) + 16))(*((_QWORD *)this + 29));
  for (i = 96; i != 240; i += 24)
  {
    v4 = (_QWORD *)((char *)this + i);
    *v4 = 0;
    v4[1] = 0;
  }
  return result;
}

uint64_t SynthGroupElement::SetGroupID(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 248) != -1)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *(_DWORD *)(this + 248) = a2;
  return this;
}

void SynthPartElement::~SynthPartElement(const void **this)
{
  ausdk::AUElement::~AUElement(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t SynthGroupElement::NoteFastReleased(uint64_t this, SynthNote *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)a2 + 11);
  if (v2 > 4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v8 = 136315394;
      v9 = "SynthElement.cpp";
      v10 = 1024;
      v11 = 199;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  Attempting to fast-release non-active note", (uint8_t *)&v8, 0x12u);
    }
    __break(1u);
  }
  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  if (v3)
  {
    *(_QWORD *)(v3 + 16) = v4;
    v4 = *((_QWORD *)a2 + 2);
  }
  else
  {
    *(_QWORD *)(this + 24 * v2 + 96) = v4;
  }
  v5 = (_QWORD *)(this + 24 * v2 + 104);
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  *v5 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  --*(_DWORD *)(*(_QWORD *)(this + 8) + 580);
  *((_DWORD *)a2 + 11) = *(_DWORD *)(this + 208);
  v6 = *(_QWORD *)(this + 216);
  *((_QWORD *)a2 + 2) = v6;
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = (_QWORD *)(this + 224);
  *v7 = a2;
  *(_QWORD *)(this + 216) = a2;
  return this;
}

_DWORD *SynthGroupElement::SostenutoOn(_DWORD *this, uint64_t a2)
{
  uint64_t v3;

  if (!*((_BYTE *)this + 241))
  {
    v3 = (uint64_t)this;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 29) + 56))(*((_QWORD *)this + 29), 66, 127);
    *(_BYTE *)(v3 + 241) = 1;
    return SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 112), v3 + 88, a2);
  }
  return this;
}

_DWORD *SynthNoteList::TransferAllFrom(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v5 = result;
    v6 = *result;
    v8 = (_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 8);
    if (*result == 4)
    {
      if (v7)
      {
        do
        {
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a3);
          *(_DWORD *)(v7 + 44) = *v5;
          v7 = *(_QWORD *)(v7 + 16);
        }
        while (v7);
        v3 = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
      for (; v7; v7 = *(_QWORD *)(v7 + 16))
        *(_DWORD *)(v7 + 44) = v6;
    }
    v10 = *((_QWORD *)v5 + 1);
    *(_QWORD *)(v3 + 16) = v10;
    if (v10)
      v11 = (_QWORD *)(v10 + 8);
    else
      v11 = v5 + 4;
    *v11 = v3;
    *((_QWORD *)v5 + 1) = *v8;
    *v8 = 0;
    v8[1] = 0;
  }
  return result;
}

_DWORD *SynthGroupElement::SostenutoOff(_DWORD *this, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;

  if (*((_BYTE *)this + 241))
  {
    v3 = (uint64_t)this;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 29) + 56))(*((_QWORD *)this + 29), 66, 0);
    *(_BYTE *)(v3 + 241) = 0;
    SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 88), v3 + 112, a2);
    if (*(_BYTE *)(v3 + 240))
      v4 = (_DWORD *)(v3 + 160);
    else
      v4 = (_DWORD *)(v3 + 184);
    return SynthNoteList::TransferAllFrom(v4, v3 + 136, a2);
  }
  return this;
}

_DWORD *SynthGroupElement::SustainOff(_DWORD *this, uint64_t a2)
{
  uint64_t v3;

  if (*((_BYTE *)this + 240))
  {
    v3 = (uint64_t)this;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 29) + 56))(*((_QWORD *)this + 29), 64, 0);
    *(_BYTE *)(v3 + 240) = 0;
    return SynthNoteList::TransferAllFrom((_DWORD *)(v3 + 184), v3 + 160, a2);
  }
  return this;
}

void IPCAUServer::~IPCAUServer(IPCAUServer *this)
{
  IPCAUServer::~IPCAUServer(this);
  JUMPOUT(0x212BCDF50);
}

{
  CADeprecated::XMachPortDeathListener *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_24CA8B180;
  *((_QWORD *)this + 10) = &unk_24CA8B1C8;
  v2 = (IPCAUServer *)((char *)this + 80);
  {
    CASIsDarwinOS(void)::global = os_variant_is_darwinos();
  }
  if (!CASIsDarwinOS(void)::global)
  {
    AudioSessionCreatePrimarySession_Priv();
    AudioSessionRemovePropertyListener_Priv();
  }
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 37) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 33);
  if (v5)
  {
    *((_QWORD *)this + 34) = v5;
    operator delete(v5);
  }
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector((uint64_t)this + 232);
  v6 = *((_QWORD *)this + 28);
  if (v6)
    dispatch_release(v6);
  v7 = MEMORY[0x24BED33F8];
  *(_QWORD *)this = MEMORY[0x24BED33F8] + 16;
  *((_QWORD *)this + 10) = v7 + 88;
  v8 = (void *)*((_QWORD *)this + 25);
  if (v8)
  {
    *((_QWORD *)this + 26) = v8;
    operator delete(v8);
  }
  CADeprecated::CAMutex::~CAMutex((IPCAUServer *)((char *)this + 112));
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
}

uint64_t IPCAUServer::ClientDied(char **this, CADeprecated::XMachServer::Client *a2)
{
  NSObject *v4;
  uint64_t result;
  CADeprecated::XMachServer::Client **v6;
  CADeprecated::XMachServer::Client **v7;
  int64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  CADeprecated::XMachServer::Client *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (kLocalInterAppAudioScope)
  {
    v4 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v9 = 136315650;
    v10 = "IPCAUServer.cpp";
    v11 = 1024;
    v12 = 195;
    v13 = 2048;
    v14 = a2;
    _os_log_impl(&dword_210A23000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: client %p died", (uint8_t *)&v9, 0x1Cu);
  }
LABEL_7:
  result = SearchableVector<AUServerInstanceBase *>::remove(this + 33, (uint64_t)a2);
  if ((_DWORD)result)
  {
LABEL_16:
    if (a2)
      return (*(uint64_t (**)(CADeprecated::XMachServer::Client *))(*(_QWORD *)a2 + 8))(a2);
    return result;
  }
  v7 = (CADeprecated::XMachServer::Client **)this[36];
  v6 = (CADeprecated::XMachServer::Client **)this[37];
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
        return result;
    }
  }
  if (v7 != v6)
  {
    v8 = (char *)v6 - (char *)(v7 + 1);
    if (v6 != v7 + 1)
      result = (uint64_t)memmove(v7, v7 + 1, (char *)v6 - (char *)(v7 + 1));
    this[37] = (char *)v7 + v8;
    goto LABEL_16;
  }
  return result;
}

uint64_t CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((_QWORD *)this + 1);
}

void `non-virtual thunk to'IPCAUServer::~IPCAUServer(IPCAUServer *this)
{
  IPCAUServer::~IPCAUServer((IPCAUServer *)((char *)this - 80));
}

{
  IPCAUServer::~IPCAUServer((IPCAUServer *)((char *)this - 80));
  JUMPOUT(0x212BCDF50);
}

uint64_t `non-virtual thunk to'CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((_QWORD *)this - 9);
}

void sub_210AAFF94(void *a1)
{
  __clang_call_terminate(a1);
}

void ServerDiedCallback(_QWORD *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  NSObject *v4;
  _QWORD block[5];

  if (a1)
  {
    v4 = a1[28];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN11IPCAUServer10ServerDiedEv_block_invoke;
    block[3] = &__block_descriptor_tmp_1962;
    block[4] = a1;
    dispatch_sync(v4, block);
  }
}

uint64_t OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24CA8DEB8;
  OwnedPtrVector<PublishedAU_Host *>::erase((_QWORD *)a1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void CADeprecated::XBasicMIGServer::~XBasicMIGServer(CADeprecated::XBasicMIGServer *this)
{
  const void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  *(_QWORD *)this = &off_24CA948E8;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
  JUMPOUT(0x212BCDF50);
}

_QWORD *OwnedPtrVector<PublishedAU_Host *>::erase(_QWORD *result, uint64_t *__dst, uint64_t *__src)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int64_t v8;

  if (__dst != __src)
  {
    v5 = result;
    v6 = __dst;
    do
    {
      result = (_QWORD *)*v6;
      if (*v6)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      ++v6;
    }
    while (v6 != __src);
    v7 = (uint64_t *)v5[2];
    v8 = (char *)v7 - (char *)__src;
    if (v7 != __src)
      result = memmove(__dst, __src, (char *)v7 - (char *)__src);
    v5[2] = (char *)__dst + v8;
  }
  return result;
}

void OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(uint64_t a1)
{
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t SearchableVector<AUServerInstanceBase *>::remove(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  int64_t v5;

  v4 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    while (*(_QWORD *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3)
        return 0;
    }
  }
  if (v4 == v3)
    return 0;
  v5 = v3 - (v4 + 8);
  if (v3 != v4 + 8)
    memmove(v4, v4 + 8, v3 - (v4 + 8));
  a1[1] = &v4[v5];
  return 1;
}

void AUWrappedOutputUnit::~AUWrappedOutputUnit(AUWrappedOutputUnit *this)
{
  AUWrappedOutputUnit::~AUWrappedOutputUnit(this);
  JUMPOUT(0x212BCDF50);
}

{
  *(_QWORD *)this = &off_24CA90920;
  AUWrappedOutputUnit::AUUninitialize(this);
  AUServerInstanceBase::~AUServerInstanceBase(this);
}

uint64_t TOpaqueObject<AUServerInstanceBase,unsigned int,CADeprecated::XMachServer::Client>::isa(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x24BED31B8];
  return a2 == &TOpaqueRTTI<AUServerInstanceBase>::sRTTI || v3;
}

uint64_t AUWrappedOutputUnit::GetAudioUnit(AUWrappedOutputUnit *this)
{
  return *((_QWORD *)this + 29);
}

uint64_t AUWrappedOutputUnit::AUInitialize(AUWrappedOutputUnit *this, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, AudioStreamBasicDescription *a6, unsigned int *a7, SharableMemoryBlock::MachServerToken *a8, unsigned int *a9)
{
  uint64_t MachPort;
  const __CFUUID *v17;
  const __CFUUID *v18;
  CFStringRef v19;
  CFStringRef v20;
  const __CFString *v21;
  const __CFString *v22;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  int v34;
  AudioStreamBasicDescription *v35;
  AudioStreamBasicDescription *v36;
  NSObject *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  AudioStreamBasicDescription *v45;
  __int128 v46;
  __int128 v47;
  unsigned int v48;
  AudioStreamBasicDescription *v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  mach_port_t v54;
  mach_port_t reply_port;
  uint64_t v56;
  CADeprecated::RealtimeMessenger *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  NSObject *v63;
  double mSampleRate;
  CADeprecated::CAPThread *v65;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  CFURLRef cf;
  _QWORD aBlock[5];
  _QWORD v75[2];
  int v76;
  char v77;
  _QWORD v78[2];
  int v79;
  char v80;
  int v81;
  _BYTE buf[38];
  mach_msg_header_t msg;
  int v84;
  _BYTE v85[12];
  int v86;
  _BYTE v87[12];
  unsigned int v88;
  AUWrappedOutputUnit *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 57))
    return 4294956447;
  *a7 = 0;
  if ((*((_DWORD *)this + 15) == 0) == (*((_DWORD *)this + 73) != 0)
    || (*((_DWORD *)this + 16) == 0) == (*((_DWORD *)this + 83) != 0))
  {
    return 4294956421;
  }
  v17 = CFUUIDCreateFromUUIDBytes(0, *((CFUUIDBytes *)this + 15));
  if (v17)
  {
    v18 = v17;
    v19 = CFUUIDCreateString(0, v17);
    if (v19)
    {
      v20 = v19;
      v21 = CFStringCreateWithFormat(0, 0, CFSTR("com-apple-audiounit:%@/%c"), v19, 72);
      if (v21)
      {
        v22 = v21;
        cf = CFURLCreateWithString(0, v21, 0);
        CFRelease(v22);
      }
      else
      {
        cf = 0;
      }
      CFRelease(v20);
    }
    else
    {
      cf = 0;
    }
    CFRelease(v18);
  }
  else
  {
    cf = 0;
  }
  *a3 = 0;
  v24 = *((_DWORD *)this + 64);
  MachPort = *((_QWORD *)this + 2);
  v25 = *((_QWORD *)this + 4);
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN19AUWrappedOutputUnit12AUInitializeEjRjS0_S0_P27AudioStreamBasicDescriptionS0_RN19SharableMemoryBlock15MachServerTokenES0__block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6;
  aBlock[4] = this;
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)&msg, v24);
  v26 = (char *)this + 304;
  v27 = *(_QWORD *)&v87[4];
  if (*(_QWORD *)&v87[4])
  {
    v69 = v25;
    v70 = MachPort;
    v72 = *(_QWORD *)&v87[4];
    v28 = *(_QWORD *)(*(_QWORD *)&v87[4] + 16);
    v29 = *(_QWORD *)(v28 + 472);
    if (v29)
    {
      v30 = *(_QWORD *)(v28 + 472);
      (*(void (**)(void))(*(_QWORD *)v29 + 16))();
      v29 = v30;
    }
    v31 = (*((_DWORD *)this + 73) != 0) | (2 * (*((_DWORD *)this + 83) != 0));
    v32 = *(_DWORD *)(v28 + 612);
    if ((v31 & ~v32) == 0)
    {
      v68 = v29;
      *a3 = *(_DWORD *)(v28 + 336);
      if (*(_BYTE *)(v28 + 558))
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 448))(v28);
      if (*(_BYTE *)(v28 + 17))
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 64))(v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 504))(v28);
      *(_QWORD *)(v28 + 328) = 0;
      *(_OWORD *)(v28 + 312) = 0u;
      *(_OWORD *)(v28 + 296) = 0u;
      *(_OWORD *)(v28 + 280) = 0u;
      *(_QWORD *)(v28 + 272) = 0xFFEFFFFFFFFFFFFFLL;
      *(_WORD *)(v28 + 17) = 0;
      *(_DWORD *)(v28 + 1012) = v31;
      v33 = *(_OWORD *)(v70 + 80);
      *(_DWORD *)(v28 + 1032) = *(_DWORD *)(v70 + 96);
      *(_OWORD *)(v28 + 1016) = v33;
      *(_QWORD *)(v28 + 1040) = cf;
      CFRetain(cf);
      v81 = 0;
      v78[1] = 0;
      v78[0] = &off_24CA949A0;
      v79 = 0;
      v80 = 1;
      v75[1] = 0;
      v75[0] = &off_24CA949A0;
      v76 = 0;
      v77 = 1;
      v34 = *(_DWORD *)(v28 + 1012);
      v26 = (char *)this + 304;
      if ((v34 & 2) != 0)
        v35 = (AudioStreamBasicDescription *)((char *)this + 304);
      else
        v35 = 0;
      if ((v34 & 1) != 0)
        v36 = (AudioStreamBasicDescription *)((char *)this + 264);
      else
        v36 = 0;
      MachPort = AURemoteIO::ChangeHardwareFormats((_BYTE *)v28, v35, v36, 0, 0, &v81, (uint64_t)v78, (uint64_t)v75);
      if ((_DWORD)MachPort || (MachPort = ausdk::AUBase::DoInitialize((ausdk::AUBase *)v28), (_DWORD)MachPort))
      {
        AURemoteIO::IPC_Uninitialize((AURemoteIO *)v28);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v28 + 432))(v28, 101, 0, 0);
      }
      else
      {
        *(_QWORD *)(v28 + 1248) = v69;
        *(_DWORD *)(v28 + 1256) = a2;
        *(_QWORD *)(v28 + 1264) = _Block_copy(aBlock);
        *(_DWORD *)(v28 + 1240) = 0;
        v57 = (CADeprecated::RealtimeMessenger *)operator new();
        CADeprecated::RealtimeMessenger::RealtimeMessenger(v57);
        CADeprecated::CAAutoDelete<CADeprecated::RealtimeMessenger>::set((uint64_t *)(v28 + 1272), (uint64_t)v57);
        v58 = operator new();
        v59 = *(_DWORD *)(v28 + 576);
        *(_BYTE *)(v58 + 16) = 0;
        *(_QWORD *)v58 = &off_24CA94890;
        *(_QWORD *)(v58 + 8) = 0;
        *(_DWORD *)(v58 + 20) = v59;
        v60 = *(_QWORD *)(v28 + 1280);
        if (v60 != v58)
        {
          if (v60)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
            v59 = *(_DWORD *)(v28 + 576);
          }
          *(_QWORD *)(v28 + 1280) = v58;
        }
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = ___ZL20IPCPropertiesChangedj_block_invoke;
        *(_QWORD *)&buf[24] = &__block_descriptor_tmp_84;
        *(_DWORD *)&buf[32] = v59;
        dispatch_async(MEMORY[0x24BDAC9B8], buf);
        MachPort = 0;
      }
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)v75);
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)v78);
      v29 = v68;
      goto LABEL_42;
    }
    if (kRIOClientSubsystem)
    {
      v37 = *(NSObject **)kRIOClientSubsystem;
      if (!*(_QWORD *)kRIOClientSubsystem)
      {
        MachPort = 4294956421;
        v26 = (char *)this + 304;
LABEL_42:
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
        v27 = v72;
        goto LABEL_45;
      }
    }
    else
    {
      v37 = MEMORY[0x24BDACB70];
    }
    v38 = v29;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      v39 = gIOEnableStrings[v31];
      v40 = gIOEnableStrings[v32 & 3];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2103;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v39;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v40;
      _os_log_impl(&dword_210A23000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d remote requires %s, local has %s", buf, 0x26u);
    }
    MachPort = 4294956421;
    v26 = (char *)this + 304;
    v29 = v38;
    goto LABEL_42;
  }
LABEL_45:
  if ((_BYTE)v86)
  {
    v41 = *(unsigned int **)&v85[4];
    if (*(_QWORD *)&v85[4])
    {
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
    }
  }
  if (!v27)
  {
    CFRelease(cf);
    return 4294967246;
  }
  CFRelease(cf);
  if (!(_DWORD)MachPort)
  {
    *a4 = *((_DWORD *)this + 15);
    v43 = *((_DWORD *)this + 16);
    *a5 = v43;
    if (*a4)
    {
      v44 = (*a7)++;
      v45 = &a6[v44];
      v46 = *(_OWORD *)((char *)this + 264);
      v47 = *(_OWORD *)((char *)this + 280);
      *(_QWORD *)&v45->mBitsPerChannel = *((_QWORD *)this + 37);
      *(_OWORD *)&v45->mSampleRate = v46;
      *(_OWORD *)&v45->mBytesPerPacket = v47;
      v43 = *a5;
    }
    if (v43)
    {
      v48 = (*a7)++;
      v49 = &a6[v48];
      v50 = *(_OWORD *)v26;
      v51 = *((_OWORD *)v26 + 1);
      *(_QWORD *)&v49->mBitsPerChannel = *((_QWORD *)v26 + 4);
      *(_OWORD *)&v49->mSampleRate = v50;
      *(_OWORD *)&v49->mBytesPerPacket = v51;
    }
    v52 = *a3;
    v53 = *a7;
    MachPort = CADeprecated::XMachReceivePort::CreateMachPort((AUWrappedOutputUnit *)((char *)this + 40));
    if ((_DWORD)MachPort)
      goto LABEL_99;
    *(_QWORD *)buf = &off_24CA949A0;
    *(_QWORD *)&buf[8] = 0;
    *(_DWORD *)&buf[16] = 0;
    buf[20] = 1;
    v54 = AURegistrationServerConnection_ServerPort();
    *(_QWORD *)v85 = a6;
    v84 = 1;
    *(_DWORD *)&v85[8] = 16777472;
    *(_QWORD *)v87 = *MEMORY[0x24BDAC470];
    v86 = 40 * v53;
    *(_DWORD *)&v87[8] = v53;
    v88 = v52;
    v89 = this;
    reply_port = mig_get_reply_port();
    *(_QWORD *)&msg.msgh_bits = 2147489043;
    msg.msgh_remote_port = v54;
    msg.msgh_local_port = reply_port;
    *(_QWORD *)&msg.msgh_voucher_port = 0x15F9400000000;
    if (MEMORY[0x24BDB0418])
    {
      voucher_mach_msg_set(&msg);
      reply_port = msg.msgh_local_port;
    }
    v56 = mach_msg(&msg, 275, 0x44u, 0x30u, reply_port, *MEMORY[0x24BDB6D08], 0);
    MachPort = v56;
    if ((v56 - 268435458) <= 0xE && ((1 << (v56 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg.msgh_local_port);
    }
    else
    {
      if (!(_DWORD)v56)
      {
        if (msg.msgh_id == 71)
        {
          v61 = 4294966988;
        }
        else if (msg.msgh_id == 90104)
        {
          if ((msg.msgh_bits & 0x80000000) == 0)
          {
            if (msg.msgh_size == 36)
            {
              v61 = 4294966996;
              if (*(_DWORD *)&v85[4])
              {
                if (msg.msgh_remote_port)
                  v61 = 4294966996;
                else
                  v61 = *(unsigned int *)&v85[4];
              }
            }
            else
            {
              v61 = 4294966996;
            }
            goto LABEL_97;
          }
          v61 = 4294966996;
          if (v84 == 1
            && msg.msgh_size == 40
            && !msg.msgh_remote_port
            && *(unsigned __int16 *)&v85[10] << 16 == 1114112)
          {
            v62 = *(_DWORD *)v85;
            *(_DWORD *)&buf[16] = *(_DWORD *)v85;
            goto LABEL_80;
          }
        }
        else
        {
          v61 = 4294966995;
        }
LABEL_97:
        mach_msg_destroy(&msg);
        MachPort = v61;
        goto LABEL_98;
      }
      mig_dealloc_reply_port(msg.msgh_local_port);
    }
    v61 = 268435460;
    if ((_DWORD)MachPort == 268435460)
    {
      if ((msg.msgh_bits & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x24BDAEC58], msg.msgh_local_port);
      goto LABEL_97;
    }
    if ((_DWORD)MachPort)
    {
LABEL_98:
      CADeprecated::XMachReceivePort::SetMachPort((AUWrappedOutputUnit *)((char *)this + 40));
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)buf);
      goto LABEL_99;
    }
    v62 = *(_DWORD *)&buf[16];
LABEL_80:
    MachPort = IPCAUSharedMemoryBase::InitClient((uint64_t)this + 72, (__int128 *)a6, v53, v52, (uint64_t)buf);
    if (!(_DWORD)MachPort)
    {
      mSampleRate = a6->mSampleRate;
      *((_BYTE *)this + 56) = 0;
      v65 = (CADeprecated::CAPThread *)operator new();
      *(_QWORD *)v65 = &off_24CA949E8;
      CADeprecated::CAPThread::CAPThread(v65, (void *(*)(void *))AUServerInstanceBase::IOThread::Entry, v65, ((double)v52 / mSampleRate * 24000000.0), 0x2EE0u, ((double)v52 / mSampleRate * 24000000.0), 1, 1, "com.apple.coreaudio.auserver.io");
      *(_QWORD *)v65 = &off_24CA949E8;
      *((_QWORD *)v65 + 16) = this;
      *((_QWORD *)this + 6) = v65;
      CADeprecated::CAPThread::Start(v65);
      v67 = atomic_load((unsigned int *)this + 10);
      *a9 = v67;
      *((_DWORD *)a8 + 3) = *(_DWORD *)&buf[12];
      *((_DWORD *)a8 + 4) = v62;
      SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)buf);
      MachPort = 0;
      *((_BYTE *)this + 57) = 1;
      return MachPort;
    }
    CADeprecated::XMachReceivePort::SetMachPort((AUWrappedOutputUnit *)((char *)this + 40));
    if (kLocalInterAppAudioScope)
    {
      v63 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(_QWORD *)kLocalInterAppAudioScope)
      {
LABEL_90:
        SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)buf);
LABEL_99:
        AURemoteIO::IPC_Uninitialize((AURemoteIO *)*((unsigned int *)this + 64));
        return MachPort;
      }
    }
    else
    {
      v63 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      msg.msgh_bits = 136315394;
      *(_QWORD *)&msg.msgh_size = "IPCAUServer.cpp";
      LOWORD(msg.msgh_local_port) = 1024;
      *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 462;
      _os_log_impl(&dword_210A23000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't connect to shared buffer", (uint8_t *)&msg, 0x12u);
    }
    goto LABEL_90;
  }
  return MachPort;
}

uint64_t AUWrappedOutputUnit::AUUninitialize(AUWrappedOutputUnit *this)
{
  CADeprecated::XMachReceivePort *v2;
  unsigned int v3;
  int v4;
  _QWORD *v5;
  mach_port_t reply_port;
  uint64_t (*v7)(_QWORD);
  mach_msg_return_t v8;
  mach_msg_return_t v9;
  int v10;
  mach_port_t v11;
  mach_msg_return_t v12;
  mach_msg_return_t v13;
  _DWORD msg[11];

  if (*((_BYTE *)this + 57))
  {
    v2 = (AUWrappedOutputUnit *)((char *)this + 40);
    v3 = atomic_load((unsigned int *)this + 10);
    v4 = *((_DWORD *)this + 2);
    memset(&msg[5], 0, 24);
    *(_OWORD *)&msg[1] = 0u;
    v5 = (_QWORD *)MEMORY[0x24BDAC470];
    *(_QWORD *)&msg[6] = *MEMORY[0x24BDAC470];
    msg[8] = v4;
    reply_port = mig_get_reply_port();
    msg[2] = v3;
    msg[3] = reply_port;
    msg[0] = 5395;
    *(_QWORD *)&msg[4] = 0x1606900000000;
    v7 = MEMORY[0x24BDB0418];
    if (MEMORY[0x24BDB0418])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      reply_port = msg[3];
    }
    v8 = mach_msg((mach_msg_header_t *)msg, 275, 0x24u, 0x2Cu, reply_port, 0x7FFFFFFFu, 0);
    v9 = v8;
    if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg[3]);
    }
    else
    {
      if (!v8)
      {
        if (msg[5] == 90317 && (msg[0] & 0x80000000) == 0 && msg[1] == 36 && !msg[2] && !msg[8])
        {
LABEL_19:
          *((_QWORD *)this + 6) = 0;
          CADeprecated::XMachReceivePort::SetMachPort(v2);
          IPCAUSharedMemoryBase::Free((AUWrappedOutputUnit *)((char *)this + 72));
          v10 = AURegistrationServerConnection_ServerPort();
          memset(&msg[1], 0, 40);
          *(_QWORD *)&msg[6] = *v5;
          *(_QWORD *)&msg[8] = this;
          v11 = mig_get_reply_port();
          msg[2] = v10;
          msg[3] = v11;
          msg[0] = 5395;
          *(_QWORD *)&msg[4] = 0x15F9500000000;
          if (v7)
          {
            voucher_mach_msg_set((mach_msg_header_t *)msg);
            v11 = msg[3];
          }
          v12 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, v11, *MEMORY[0x24BDB6D08], 0);
          v13 = v12;
          if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
          {
            mig_put_reply_port(msg[3]);
          }
          else
          {
            if (!v12)
            {
              if (msg[5] == 90105 && (msg[0] & 0x80000000) == 0 && msg[1] == 36 && !msg[2] && !msg[8])
                goto LABEL_36;
              goto LABEL_35;
            }
            mig_dealloc_reply_port(msg[3]);
          }
          if (v13 != 268435460)
          {
LABEL_36:
            AURemoteIO::IPC_Uninitialize((AURemoteIO *)*((unsigned int *)this + 64));
            *((_BYTE *)this + 57) = 0;
            return 0;
          }
          if ((msg[0] & 0x1F00) == 0x1100)
            mach_port_deallocate(*MEMORY[0x24BDAEC58], msg[3]);
LABEL_35:
          mach_msg_destroy((mach_msg_header_t *)msg);
          goto LABEL_36;
        }
LABEL_18:
        mach_msg_destroy((mach_msg_header_t *)msg);
        goto LABEL_19;
      }
      mig_dealloc_reply_port(msg[3]);
    }
    if (v9 != 268435460)
      goto LABEL_19;
    if ((msg[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], msg[3]);
    goto LABEL_18;
  }
  return 0;
}

uint64_t AUWrappedOutputUnit::AUReset(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUWrappedOutputUnit::AUGetPropertyInfo(AUWrappedOutputUnit *this, int a2, int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t result;
  unsigned int v7;

  if (a2 == 14)
  {
    v7 = 4;
  }
  else
  {
    if (a2 != 8)
      return 4294956417;
    if (a4)
      return 4294956419;
    if (a3 == 2)
    {
      if (!*((_DWORD *)this + 16))
        return 4294956430;
    }
    else if (a3 == 1 && !*((_DWORD *)this + 15))
    {
      return 4294956430;
    }
    v7 = 40;
  }
  result = 0;
  *a5 = v7;
  *a6 = 1;
  return result;
}

uint64_t AUWrappedOutputUnit::AUGetProperty(AUWrappedOutputUnit *this, int a2, int a3, int a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a2 == 14)
  {
    result = 0;
    *(_DWORD *)a5 = 4096;
    return result;
  }
  if (a2 != 8)
    return 4294956417;
  if (a4)
    return 4294956419;
  if (a3 == 2)
  {
    if (!*((_DWORD *)this + 16))
      return 4294956430;
LABEL_12:
    result = 0;
    v8 = *((_OWORD *)this + 19);
    v9 = *((_OWORD *)this + 20);
    v10 = *((_QWORD *)this + 42);
    goto LABEL_13;
  }
  if (a3 != 1)
    goto LABEL_12;
  if (*((_DWORD *)this + 15))
  {
    result = 0;
    v8 = *(_OWORD *)((char *)this + 264);
    v9 = *(_OWORD *)((char *)this + 280);
    v10 = *((_QWORD *)this + 37);
LABEL_13:
    a5[4] = v10;
    *(_OWORD *)a5 = v8;
    *((_OWORD *)a5 + 1) = v9;
    return result;
  }
  return 4294956430;
}

uint64_t AUWrappedOutputUnit::AUSetProperty(AUWrappedOutputUnit *this, int a2, int a3, int a4, _OWORD *a5)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a2 == 14)
    return 0;
  if (a2 != 8)
    return 4294956417;
  if (a4)
    return 4294956419;
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if (*((_DWORD *)this + 15))
      {
        result = 0;
        v7 = *a5;
        v8 = a5[1];
        *((_QWORD *)this + 37) = *((_QWORD *)a5 + 4);
        *(_OWORD *)((char *)this + 264) = v7;
        *(_OWORD *)((char *)this + 280) = v8;
        return result;
      }
      return 4294956430;
    }
LABEL_12:
    result = 0;
    v9 = *a5;
    v10 = a5[1];
    *((_QWORD *)this + 42) = *((_QWORD *)a5 + 4);
    *((_OWORD *)this + 19) = v9;
    *((_OWORD *)this + 20) = v10;
    return result;
  }
  if (*((_DWORD *)this + 16))
    goto LABEL_12;
  return 4294956430;
}

uint64_t AUWrappedOutputUnit::AUGetParameter(AUWrappedOutputUnit *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  return 4294956418;
}

uint64_t AUWrappedOutputUnit::AUSetParameter(AUWrappedOutputUnit *this, float a2)
{
  return 4294956418;
}

uint64_t AUWrappedOutputUnit::AUMIDISysEx(AUWrappedOutputUnit *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(_QWORD, const unsigned __int8 *, uint64_t);
  char v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v11[32];
  unsigned int *v12;
  char v13;
  uint64_t v14;

  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v11, *((_DWORD *)this + 64));
  if (v14
    && (v5 = *(_QWORD *)(v14 + 16),
        (v6 = *(void (**)(_QWORD, const unsigned __int8 *, uint64_t))(v5 + 1064)) != 0))
  {
    v6(*(_QWORD *)(v5 + 1048), a2, a3);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  if (v13)
  {
    v8 = v12;
    if (v12)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
    }
  }
  if ((v7 & 1) != 0)
    return 4294967246;
  else
    return 0;
}

void sub_210AB1214(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210AB11F8);
}

uint64_t AUWrappedOutputUnit::AUMIDIEvent(AUWrappedOutputUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  char v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v15[32];
  unsigned int *v16;
  char v17;
  uint64_t v18;

  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v15, *((_DWORD *)this + 64));
  if (v18
    && (v9 = *(_QWORD *)(v18 + 16),
        (v10 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 1056)) != 0))
  {
    v10(*(_QWORD *)(v9 + 1048), a2, a3, a4, a5);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  if (v17)
  {
    v12 = v16;
    if (v16)
    {
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
    }
  }
  if ((v11 & 1) != 0)
    return 4294967246;
  else
    return 0;
}

void sub_210AB12F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210AB12D0);
}

uint64_t AUWrappedOutputUnit::ConnectInput(AUWrappedOutputUnit *this, unsigned int a2, unsigned __int8 a3, const AudioStreamBasicDescription *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4->mFormatID)
  {
    v4 = *(_OWORD *)&a4->mSampleRate;
    v5 = *(_OWORD *)&a4->mBytesPerPacket;
    *((_QWORD *)this + 37) = *(_QWORD *)&a4->mBitsPerChannel;
    *(_OWORD *)((char *)this + 264) = v4;
    *(_OWORD *)((char *)this + 280) = v5;
  }
  return 0;
}

uint64_t AUWrappedOutputUnit::AURender(uint64_t a1, mach_port_name_t name, _DWORD *a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  AudioBufferList *v15;
  AudioBufferList *v16;
  const AudioBufferList *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  int v23;
  int v24;
  const char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  IPCAUSharedMemoryBase *v33;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  int v38;
  void *__p[2];
  char v40;
  unsigned int *v41;
  char v42;
  uint64_t v43;
  AudioTimeStamp v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (name)
  {
    v11 = atomic_load((unint64_t *)(a1 + 224));
    if (v11)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      caulk::mach::os_workgroup_managed::make();
      if (v40 < 0)
        operator delete(__p[0]);
      if (*(_BYTE *)(v11 + 72))
      {
        audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v11);
        *(_BYTE *)(v11 + 72) = 0;
      }
      *(_QWORD *)v11 = MEMORY[0x24BEC6F58] + 16;
      *(_QWORD *)(v11 + 8) = caulk::mach::details::retain_os_object((caulk::mach::details *)v44.mHostTime, v12);
      v13 = *(_OWORD *)((char *)&v44.mSMPTETime.mType + 1);
      v14 = *(_OWORD *)&v44.mSMPTETime.mSubframes;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&v44.mRateScalar;
      *(_OWORD *)(v11 + 32) = v14;
      *(_OWORD *)(v11 + 41) = v13;
      *(_DWORD *)(v11 + 64) = caulk::mach::os_workgroup_managed::join((caulk::mach::os_workgroup_managed *)v11);
      *(_BYTE *)(v11 + 72) = 1;
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v44);
    }
    mach_port_deallocate(*MEMORY[0x24BDAEC58], name);
  }
  if (!*(_DWORD *)(a1 + 64))
    return 4294956421;
  v15 = (AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUSharedMemoryBase *)(a1 + 72), *(_DWORD *)(a1 + 60), a6);
  if (!v15)
    return 4294956421;
  v16 = v15;
  if (*(_DWORD *)(a1 + 60))
    v17 = (const AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUSharedMemoryBase *)(a1 + 72), 0, a6);
  else
    v17 = 0;
  *(_QWORD *)&v44.mFlags = 0;
  memset(&v44.mWordClockTime, 0, 32);
  v44.mSampleTime = (double)*(uint64_t *)a4;
  v44.mHostTime = *(_QWORD *)(a4 + 8);
  v44.mRateScalar = *(Float64 *)(a4 + 16);
  v44.mFlags = *(_DWORD *)(a4 + 24);
  v18 = AUServerInstanceBase::DoControlMessages((AUServerInstanceBase *)a1);
  if (!(_DWORD)v18)
  {
    v19 = *(_DWORD *)(a1 + 256);
    v20 = *(_QWORD *)(a1 + 96);
    if (v20)
      v21 = (_OWORD *)(v20 + *(unsigned int *)(a1 + 168) + 2104);
    else
      v21 = 0;
    ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)__p, v19);
    if (v43)
    {
      v22 = *(_QWORD *)(v43 + 16);
      v23 = 1;
      if (*(_BYTE *)(v22 + 558))
      {
        v24 = *(_DWORD *)(v22 + 616);
        v25 = (const char *)*(unsigned int *)(v22 + 1012);
        v38 = 0;
        v26 = v21[1];
        *(_OWORD *)(v22 + 1080) = *v21;
        *(_OWORD *)(v22 + 1096) = v26;
        v27 = v21[2];
        v28 = v21[3];
        v29 = v21[5];
        *(_OWORD *)(v22 + 1144) = v21[4];
        *(_OWORD *)(v22 + 1160) = v29;
        *(_OWORD *)(v22 + 1112) = v27;
        *(_OWORD *)(v22 + 1128) = v28;
        v30 = v21[6];
        v31 = v21[7];
        v32 = v21[9];
        *(_OWORD *)(v22 + 1208) = v21[8];
        *(_OWORD *)(v22 + 1224) = v32;
        *(_OWORD *)(v22 + 1176) = v30;
        *(_OWORD *)(v22 + 1192) = v31;
        *(_BYTE *)(v22 + 1072) = 1;
        AUConverterRTMutex::lock((AUConverterRTMutex *)(v22 + 528));
        if ((v25 & 1) == 0 && (v24 & 1) != 0)
        {
          v33 = *(IPCAUSharedMemoryBase **)(v22 + 760);
          if (v33)
            v17 = (const AudioBufferList *)IPCAUSharedMemoryBase::immutableAudioBufferList(v33, 0, *(_DWORD *)(v22 + 1296));
          else
            v17 = 0;
          v25 = (const char *)(v25 | 1);
        }
        AURemoteIO::PerformIO((AURemoteIO *)v22, v25, a6, a6, &v44, &v44, v17, v16, &v38);
        v23 = v38;
        v34 = *(_DWORD *)(v22 + 1096);
        if (((*(_DWORD *)(v22 + 1240) ^ v34) & 0xF) != 0)
        {
          *(_DWORD *)(v22 + 1240) = v34;
          CADeprecated::RealtimeMessenger::PerformAsync();
        }
        AUConverterRTMutex::unlock((AUConverterRTMutex *)(v22 + 528));
      }
    }
    else
    {
      v23 = 1;
    }
    if (v42)
    {
      v35 = v41;
      if (v41)
      {
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
      }
    }
    if (v23)
      *a3 |= 0x10u;
  }
  return v18;
}

void sub_210AB1654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, char a16)
{
  AUConverterRTMutex *v16;
  unsigned int v18;

  if (a2)
  {
    AUConverterRTMutex::unlock(v16);
    if (a16 && a15)
    {
      do
        v18 = __ldaxr(a15);
      while (__stlxr(v18 - 1, a15));
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x210AB1604);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUWrappedOutputUnit::AUAddPropertyListener(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUWrappedOutputUnit::AURemovePropertyListener(AUWrappedOutputUnit *this)
{
  return 0;
}

uint64_t AUServerInstanceBase::DoControlMessages(AUServerInstanceBase *this)
{
  _DWORD *v1;
  uint64_t v2;
  float *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;

  v1 = (_DWORD *)*((_QWORD *)this + 12);
  if (!v1)
    return 0;
  v2 = *v1;
  if (!(_DWORD)v2)
    return 0;
  *v1 = 0;
  v4 = (float *)(v1 + 1);
  v5 = (unsigned __int8 *)v4 + v2;
  while (1)
  {
    v6 = *(unsigned __int8 *)v4;
    if (v6 == 2)
    {
      v7 = (unsigned __int8 *)(v4 + 4);
      (*(void (**)(AUServerInstanceBase *, _QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 96))(this, *((unsigned int *)v4 + 1), *((unsigned __int8 *)v4 + 1), *((unsigned __int16 *)v4 + 1), *((unsigned int *)v4 + 3), v4[2]);
      goto LABEL_10;
    }
    if (v6 == 1)
    {
      v7 = (unsigned __int8 *)(v4 + 1);
      (*(void (**)(AUServerInstanceBase *, unsigned __int8 *, _QWORD))(*(_QWORD *)this + 104))(this, (unsigned __int8 *)v4 + 4, *((unsigned __int16 *)v4 + 1));
      goto LABEL_10;
    }
    if (*(_BYTE *)v4)
      return 4294967246;
    v7 = (unsigned __int8 *)(v4 + 2);
    (*(void (**)(AUServerInstanceBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 112))(this, *((unsigned __int8 *)v4 + 1), *((unsigned __int8 *)v4 + 2), *((unsigned __int8 *)v4 + 3), *((unsigned int *)v4 + 1));
LABEL_10:
    v4 = (float *)v7;
    if (v7 >= v5)
      return 0;
  }
}

void audioipc::os_workgroup_joiner::~os_workgroup_joiner(audioipc::os_workgroup_joiner *this)
{
  if (!*((_DWORD *)this + 16))
    caulk::mach::os_workgroup_managed::leave(this);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed(this);
}

void std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v2);
  v3 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v3);
}

void ___ZN19AUWrappedOutputUnit12AUInitializeEjRjS0_S0_P27AudioStreamBasicDescriptionS0_RN19SharableMemoryBlock15MachServerTokenES0__block_invoke(uint64_t a1, int a2)
{
  _DWORD *v3;
  int v4;
  mach_port_t v5;
  int v6;
  int v7;
  int v8;
  mach_msg_header_t msg;
  uint64_t v10;
  int v11;
  int v12;

  v3 = *(_DWORD **)(a1 + 32);
  v4 = AURegistrationServerConnection_ServerPort();
  IPCAURegClient_SetProcessWakeState(v4, v3[6], 0, &v8);
  v5 = v3[3];
  v6 = v3[7];
  v10 = *MEMORY[0x24BDAC470];
  v11 = v6;
  v12 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 90102;
  msg.msgh_remote_port = v5;
  msg.msgh_local_port = 0;
  if (MEMORY[0x24BDB0418])
    voucher_mach_msg_set(&msg);
  if (mach_msg(&msg, 17, 0x28u, 0, 0, *MEMORY[0x24BDB6D08], 0) == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], msg.msgh_local_port);
    mach_msg_destroy(&msg);
  }
  v7 = AURegistrationServerConnection_ServerPort();
  IPCAURegClient_SetProcessWakeState(v7, v3[6], 1, &v8);
}

uint64_t AUServerInstanceBase::IOThread::Entry(AUServerInstanceBase::IOThread *this, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  mach_port_name_t v5;
  mach_msg_return_t v6;
  mach_msg_return_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  mach_msg_return_t v24;
  uint8_t buf[4];
  const char *v26;
  __int128 v27;
  _BYTE v28[72];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v28[0] = 0;
  v29 = 0;
  atomic_store((unint64_t)v28, (unint64_t *)(*((_QWORD *)this + 16) + 224));
  if (!kLocalInterAppAudioScope)
  {
    v3 = MEMORY[0x24BDACB70];
LABEL_5:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *((_QWORD *)this + 16);
      *(_DWORD *)buf = 136315650;
      v26 = "IPCAUServer.cpp";
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = 505;
      WORD3(v27) = 2048;
      *((_QWORD *)&v27 + 1) = v4;
      _os_log_impl(&dword_210A23000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUServerInstanceBase@%p: IOThread starting", buf, 0x1Cu);
    }
    goto LABEL_7;
  }
  v3 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(_QWORD *)kLocalInterAppAudioScope)
    goto LABEL_5;
LABEL_7:
  v5 = atomic_load((unsigned int *)(*((_QWORD *)this + 16) + 40));
  while (1)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 16) + 56))
      goto LABEL_13;
    *(_DWORD *)buf = 0;
    HIDWORD(v26) = 0;
    LODWORD(v27) = v5;
    *(_QWORD *)((char *)&v27 + 4) = 0;
    v6 = mach_msg((mach_msg_header_t *)buf, 117440514, 0, 0x154u, v5, 0, 0);
    v7 = v6;
    if (v6)
      break;
    MSHMIGDispatchMessage();
  }
  if (v6 == 268451846 || (v8 = *((_QWORD *)this + 16), *(_BYTE *)(v8 + 56)))
  {
LABEL_13:
    if (kLocalInterAppAudioScope)
    {
      v9 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(_QWORD *)kLocalInterAppAudioScope)
        goto LABEL_20;
    }
    else
    {
      v9 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = *((_QWORD *)this + 16);
      v17 = 136315650;
      v18 = "IPCAUServer.cpp";
      v19 = 1024;
      v20 = 530;
      v21 = 2048;
      v22 = v10;
      v11 = "%25s:%-5d AUServerInstanceBase@%p: IOThread exiting";
      v12 = v9;
      v13 = OS_LOG_TYPE_DEBUG;
      v14 = 28;
LABEL_19:
      _os_log_impl(&dword_210A23000, v12, v13, v11, (uint8_t *)&v17, v14);
    }
  }
  else
  {
    if (kLocalInterAppAudioScope)
    {
      v16 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(_QWORD *)kLocalInterAppAudioScope)
        goto LABEL_20;
    }
    else
    {
      v16 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = 136315906;
      v18 = "IPCAUServer.cpp";
      v19 = 1024;
      v20 = 528;
      v21 = 2048;
      v22 = v8;
      v23 = 1024;
      v24 = v7;
      v11 = "%25s:%-5d AUServerInstanceBase@%p: IOThread exiting with error 0x%x";
      v12 = v16;
      v13 = OS_LOG_TYPE_ERROR;
      v14 = 34;
      goto LABEL_19;
    }
  }
LABEL_20:
  atomic_store(0, (unint64_t *)(*((_QWORD *)this + 16) + 224));
  if (v29)
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v28);
  return 0;
}

void sub_210AB1C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 64))
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void AUServerInstanceBase::IOThread::~IOThread(AUServerInstanceBase::IOThread *this)
{
  CADeprecated::CAPThread::~CAPThread(this);
  JUMPOUT(0x212BCDF50);
}

BOOL SharableMemoryBlock::MachClientToken::IsValid(SharableMemoryBlock::MachClientToken *this)
{
  return *((_DWORD *)this + 4) != 0;
}

void AUServerInstanceBase::~AUServerInstanceBase(AUServerInstanceBase *this)
{
  const void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = off_24CA90A28;
  --*(_DWORD *)(*((_QWORD *)this + 2) + 112);
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  v3 = (void *)*((_QWORD *)this + 25);
  if (v3)
  {
    *((_QWORD *)this + 26) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {
    *((_QWORD *)this + 23) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 9) = &off_24CA90EB8;
  v5 = (void **)((char *)this + 136);
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v5);
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this + 9);
  MEMORY[0x212BCD560]((char *)this + 40);
  *(_QWORD *)this = &off_24CA948B8;
  MEMORY[0x212BCD5CC]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void SharableMemoryBlock::~SharableMemoryBlock(xpc_object_t *this)
{
  uint64_t v2;

  v2 = MEMORY[0x24BED33F0];
  *this = (xpc_object_t)(MEMORY[0x24BED33F0] + 16);
  (*(void (**)(void))(v2 + 32))();
  xpc_release(this[6]);
  this[6] = 0;
}

void CADeprecated::XMachServer::Client::~Client(CADeprecated::XMachServer::Client *this)
{
  *(_QWORD *)this = &off_24CA948B8;
  MEMORY[0x212BCD5CC]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

{
  *(_QWORD *)this = &off_24CA948B8;
  MEMORY[0x212BCD5CC]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x212BCDF50);
}

BOOL TOpaqueObject<CADeprecated::XMachServer::Client,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x24BED31B8];
}

void IPCAUSharedMemoryBase::~IPCAUSharedMemoryBase(xpc_object_t *this)
{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x212BCDF50);
}

void PublishedAU_Host::~PublishedAU_Host(CFTypeRef *this)
{
  PublishedAU::~PublishedAU(this);
  JUMPOUT(0x212BCDF50);
}

void PublishedAU::~PublishedAU(CFTypeRef *this)
{
  *this = &off_24CA8B1F8;
  CFRelease(this[6]);
  CFRelease(this[2]);
}

{
  PublishedAU::~PublishedAU(this);
  JUMPOUT(0x212BCDF50);
}

void IPCAUSharedMemory::~IPCAUSharedMemory(xpc_object_t *this)
{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t IPCAUSharedMemory::RecomputeHeaderSize(uint64_t this, int a2)
{
  int v2;

  v2 = 4 * a2 + 2275;
  if (!a2)
    v2 = 2279;
  *(_DWORD *)(this + 56) = (v2 + *(_DWORD *)(this + 96)) & 0xFFFFFFF0;
  return this;
}

uint64_t IPCAUServer::FindAU(IPCAUServer *this, const audit_token_t *a2)
{
  int v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  audit_token_t atoken;
  pid_t pidp;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = (int)a2;
  v21 = *MEMORY[0x24BDAC8D0];
  pidp = 0;
  v3 = *((_OWORD *)this + 1);
  *(_OWORD *)atoken.val = *(_OWORD *)this;
  *(_OWORD *)&atoken.val[4] = v3;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  v4 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == pidp)
      v5 = v4;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }
  if (kLocalInterAppAudioScope)
  {
    if ((*(_BYTE *)(kLocalInterAppAudioScope + 8) & 1) != 0)
    {
      v6 = *(NSObject **)kLocalInterAppAudioScope;
      if (*(_QWORD *)kLocalInterAppAudioScope)
      {
        if (os_log_type_enabled(*(os_log_t *)kLocalInterAppAudioScope, OS_LOG_TYPE_DEBUG))
        {
          if (v5)
            v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
          else
            v7 = 0;
          *(_DWORD *)buf = 136316162;
          v12 = "IPCAUServer.cpp";
          v13 = 1024;
          v14 = 399;
          v15 = 1024;
          v16 = v2;
          v17 = 2048;
          v18 = v5;
          v19 = 2048;
          v20 = v7;
          _os_log_impl(&dword_210A23000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::FindAU: 0x%x -> ausi %p, AU %p", buf, 0x2Cu);
        }
      }
    }
  }
  return v5;
}

uint64_t CADeprecated::TSingleton<IPCAUServer>::instance()
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&CADeprecated::TSingleton<IPCAUServer>::sOnce);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&CADeprecated::TSingleton<IPCAUServer>::sOnce, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUServer>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAUServer>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUServer>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0;
  NSObject **inited;
  NSObject *v2;
  unsigned __int8 v3;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v0 = operator new();
  *(_QWORD *)v4 = "IPCAUServer";
  *(_QWORD *)&v4[8] = IPCAUServer_IPCAudioUnit_subsystem;
  *(_QWORD *)&v4[16] = IPCAudioUnit_server;
  v5 = 332;
  CADeprecated::XMachServer::XMachServer();
  *(_QWORD *)v0 = &off_24CA8B180;
  *(_QWORD *)(v0 + 80) = &unk_24CA8B1C8;
  *(_QWORD *)(v0 + 224) = dispatch_queue_create("IPCAUServer", 0);
  *(_QWORD *)(v0 + 232) = &off_24CA8DEB8;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  inited = (NSObject **)initInterAppAudioLogging();
  kLocalInterAppAudioScope = (uint64_t)inited;
  if (inited)
  {
    v2 = *inited;
    if (!*inited)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v4 = 136315394;
    *(_QWORD *)&v4[4] = "IPCAUServer.cpp";
    *(_WORD *)&v4[12] = 1024;
    *(_DWORD *)&v4[14] = 160;
    _os_log_impl(&dword_210A23000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: created", v4, 0x12u);
  }
LABEL_7:
  CADeprecated::XBasicMIGServer::SetServerDispatchQueue();
  CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue();
  CADeprecated::XMachPortDeathListener::SetDeathNotificationDispatchQueue();
  {
    CASIsDarwinOS(void)::global = os_variant_is_darwinos();
  }
  if (!CASIsDarwinOS(void)::global)
  {
    *(_DWORD *)v4 = 0;
    AudioSessionCreatePrimarySession_Priv();
    AudioSessionAddPropertyListener_Priv();
  }
  __dmb(0xBu);
  CADeprecated::TSingleton<IPCAUServer>::sInstance = v0;
}

void sub_210AB24B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  CADeprecated::XMachPortDeathListener *v2;
  dispatch_object_t *v3;
  uint64_t v4;
  void **v5;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v7 = (void *)v1[36];
  if (v7)
  {
    v1[37] = v7;
    operator delete(v7);
  }
  v8 = *v5;
  if (*v5)
  {
    v1[34] = v8;
    operator delete(v8);
  }
  OwnedPtrVector<PublishedAU_Host *>::~OwnedPtrVector(v4);
  if (*v3)
    dispatch_release(*v3);
  v9 = MEMORY[0x24BED33F8];
  *v1 = MEMORY[0x24BED33F8] + 16;
  v1[10] = v9 + 88;
  v10 = (void *)v1[25];
  if (v10)
  {
    v1[26] = v10;
    operator delete(v10);
  }
  CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(v1 + 14));
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer((CADeprecated::XBasicMIGServer *)v1);
  MEMORY[0x212BCDF50](v1, 0x10F1C40A72BA4E9);
  _Unwind_Resume(a1);
}

uint64_t AudioOutputUnitPublish_Impl(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v9;
  _QWORD v11[7];
  int v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = 4294967246;
  if (a2 && a1 && a4)
  {
    if (_CFMZEnabled())
    {
      if (kLocalInterAppAudioScope)
      {
        v4 = *(_QWORD *)kLocalInterAppAudioScope;
        if (!*(_QWORD *)kLocalInterAppAudioScope)
          return v4;
      }
      else
      {
        v4 = MEMORY[0x24BDACB70];
      }
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        v14 = "IPCAUServer.cpp";
        v15 = 1024;
        v16 = 982;
        _os_log_impl(&dword_210A23000, (os_log_t)v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioOutputUnitPublish: returning noErr without publishing.", buf, 0x12u);
      }
      return 0;
    }
    else
    {
      v11[0] = MEMORY[0x24BDAC760];
      v11[1] = 0x40000000;
      v11[2] = __AudioOutputUnitPublish_Impl_block_invoke;
      v11[3] = &__block_descriptor_tmp_9;
      v11[4] = a1;
      v11[5] = a2;
      v12 = a3;
      v11[6] = a4;
      v4 = IPCAUServer::PerformBlockOnServerQueue((uint64_t)v11);
      if ((_DWORD)v4)
      {
        if (kLocalInterAppAudioScope)
        {
          v9 = *(NSObject **)kLocalInterAppAudioScope;
          if (!*(_QWORD *)kLocalInterAppAudioScope)
            return v4;
        }
        else
        {
          v9 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          v14 = "IPCAUServer.cpp";
          v15 = 1024;
          v16 = 990;
          v17 = 1024;
          v18 = v4;
          _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioOutputUnitPublish: error %d", buf, 0x18u);
        }
      }
    }
  }
  return v4;
}

void sub_210AB2D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BCD6E0](va);
  _Unwind_Resume(a1);
}

uint64_t IPCAUServer::PerformBlockOnServerQueue(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(CADeprecated::TSingleton<IPCAUServer>::instance() + 224);
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11IPCAUServer25PerformBlockOnServerQueueEU13block_pointerFivE_block_invoke;
  v5[3] = &unk_24CA96838;
  v5[4] = a1;
  v5[5] = &v6;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_210AB2E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11IPCAUServer25PerformBlockOnServerQueueEU13block_pointerFivE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t IPCAUServer_Open(_OWORD *a1, int a2, int a3, const AudioComponentDescription *a4, const void *a5, int a6, uint64_t a7, uint64_t a8, int *a9)
{
  __int128 v14;
  _QWORD *v15;
  pid_t v16;
  CFTypeRef v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t Property;
  uint64_t v24;
  uint64_t v25;
  OpaqueAudioComponentInstance *v26;
  const void *v27;
  NSObject *v28;
  NSObject *v29;
  int v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  int v48;
  _BYTE v50[40];
  CFTypeRef cf;
  _QWORD v52[2];
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const void **v56;
  int *v57;
  audit_token_t atoken;
  pid_t pidp;
  int v60;
  const void *v61;
  void *outData;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  _BYTE v70[10];
  _DWORD v71[4];
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v61 = a5;
  pidp = 0;
  v60 = a6;
  v14 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v14;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  v52[0] = &off_24CA90EE8;
  v52[1] = 0;
  v53 = a5 != 0;
  v54 = 0;
  v55 = 0;
  v56 = &v61;
  v57 = &v60;
  cf = 0;
  CADeserializer::CADeserializer((CADeserializer *)v50, a5);
  operator>>();
  v15 = (_QWORD *)CADeprecated::TSingleton<IPCAUServer>::instance();
  v16 = pidp;
  v17 = cf;
  if (!kLocalInterAppAudioScope)
  {
    v18 = MEMORY[0x24BDACB70];
    goto LABEL_5;
  }
  v18 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(_QWORD *)kLocalInterAppAudioScope)
  {
LABEL_5:
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      MEMORY[0x212BCD50C](&outData, a4);
      *(_DWORD *)buf = 136316418;
      v64 = "IPCAUServer.cpp";
      v65 = 1024;
      v66 = 325;
      v67 = 2080;
      v68 = (uint64_t)outData;
      v69 = 1024;
      *(_DWORD *)v70 = v16;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = a2;
      LOWORD(v71[0]) = 1024;
      *(_DWORD *)((char *)v71 + 2) = a3;
      _os_log_impl(&dword_210A23000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::AUOpen: desc %s from pid %d, port 0x%x, clientRef 0x%x", buf, 0x2Eu);
      if (outData)
        free(outData);
    }
  }
  v19 = a8;
  *a9 = 0;
  v21 = (uint64_t *)v15[30];
  v20 = (uint64_t *)v15[31];
  if (v21 == v20)
    goto LABEL_11;
  while (1)
  {
    v22 = *v21;
    if (CAComponentDescription::Matches((CAComponentDescription *)(*v21 + 24), a4))
      break;
    if (++v21 == v20)
      goto LABEL_11;
  }
  Property = 4294900546;
  if (*(int *)(v22 + 112) > 0)
  {
LABEL_28:
    if (kLocalInterAppAudioScope)
    {
      v29 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(_QWORD *)kLocalInterAppAudioScope)
      {
LABEL_34:
        v53 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      v29 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v64 = "IPCAUServer.cpp";
      v65 = 1024;
      v66 = 1031;
      v67 = 1024;
      LODWORD(v68) = Property;
      _os_log_impl(&dword_210A23000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IPCAUServer_Open: error %d", buf, 0x18u);
    }
    goto LABEL_34;
  }
  if (*(_QWORD *)(v22 + 72))
  {
    Property = 4294967292;
    goto LABEL_28;
  }
  if (!*(_QWORD *)(v22 + 104))
  {
LABEL_11:
    Property = 4294967246;
    goto LABEL_28;
  }
  v24 = operator new();
  v25 = v19;
  v26 = *(OpaqueAudioComponentInstance **)(v22 + 104);
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)v24);
  *(_DWORD *)(v24 + 12) = a2;
  *(_QWORD *)v24 = off_24CA90A28;
  *(_QWORD *)(v24 + 16) = v22;
  *(_DWORD *)(v24 + 24) = v16;
  *(_DWORD *)(v24 + 28) = a3;
  *(_QWORD *)(v24 + 32) = v17;
  *(_DWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 48) = 0;
  *(_WORD *)(v24 + 56) = 0;
  SharableMemoryBlock::SharableMemoryBlock((SharableMemoryBlock *)(v24 + 72));
  *(_OWORD *)(v24 + 176) = 0u;
  *(_DWORD *)(v24 + 128) = 0;
  *(_QWORD *)(v24 + 144) = 0;
  *(_QWORD *)(v24 + 152) = 0;
  *(_QWORD *)(v24 + 136) = 0;
  *(_BYTE *)(v24 + 164) = 0;
  *(_QWORD *)(v24 + 72) = &off_24CA8F848;
  *(_DWORD *)(v24 + 168) = 2048;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_QWORD *)(v24 + 224) = 0;
  ++*(_DWORD *)(*(_QWORD *)(v24 + 16) + 112);
  v27 = *(const void **)(v24 + 32);
  if (v27)
    CFRetain(v27);
  *(_QWORD *)v24 = &off_24CA90920;
  *(_QWORD *)(v24 + 232) = v26;
  *(_QWORD *)(v24 + 240) = a7;
  *(_QWORD *)(v24 + 248) = v25;
  *(_DWORD *)(v24 + 256) = 0;
  *(_OWORD *)(v24 + 264) = 0u;
  *(_OWORD *)(v24 + 280) = 0u;
  *(_OWORD *)(v24 + 296) = 0u;
  *(_OWORD *)(v24 + 312) = 0u;
  *(_OWORD *)(v24 + 328) = 0u;
  if (kLocalInterAppAudioScope)
  {
    v28 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_24;
  }
  else
  {
    v28 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v64 = "IPCAUServer.cpp";
    v65 = 1024;
    v66 = 734;
    v67 = 2048;
    v68 = v24;
    _os_log_impl(&dword_210A23000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
  }
LABEL_24:
  LODWORD(outData) = 0;
  *(_DWORD *)buf = 4;
  Property = AudioUnitGetProperty(v26, 0x65u, 0, 0, &outData, (UInt32 *)buf);
  if ((_DWORD)Property
    || (Property = 4294900546, (_DWORD)outData)
    || (*(_DWORD *)buf = 4,
        Property = AudioUnitGetProperty(v26, 0x763u, 0, 0, (void *)(v24 + 256), (UInt32 *)buf),
        (_DWORD)Property))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    goto LABEL_28;
  }
  v31 = *(_DWORD *)(*(_QWORD *)(v24 + 16) + 24);
  if (v31 > 1635086956)
  {
    if (v31 == 1635086957 || v31 == 1635086968)
    {
      *(_QWORD *)(v24 + 60) = 0x100000001;
      *(_QWORD *)(v24 + 264) = 0x40E5888000000000;
      *(_OWORD *)(v24 + 272) = xmmword_210B09F40;
      *(_OWORD *)(v24 + 288) = xmmword_210B09F50;
      goto LABEL_45;
    }
  }
  else if (v31 == 1635086951 || v31 == 1635086953)
  {
    *(_QWORD *)(v24 + 60) = 0x100000000;
LABEL_45:
    *(_QWORD *)(v24 + 304) = 0x40E5888000000000;
    *(_OWORD *)(v24 + 312) = xmmword_210B09F40;
    *(_OWORD *)(v24 + 328) = xmmword_210B09F50;
    goto LABEL_46;
  }
  *(_DWORD *)(v24 + 60) = 0;
  *(_DWORD *)(v24 + 64) = 0;
LABEL_46:
  v33 = (uint64_t *)v15[34];
  v32 = v15[35];
  if ((unint64_t)v33 >= v32)
  {
    v35 = v15[33];
    v36 = ((uint64_t)v33 - v35) >> 3;
    if ((unint64_t)(v36 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v37 = v32 - v35;
    v38 = v37 >> 2;
    if (v37 >> 2 <= (unint64_t)(v36 + 1))
      v38 = v36 + 1;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v39 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    if (v39)
      v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v39);
    else
      v40 = 0;
    v41 = (uint64_t *)(v39 + 8 * v36);
    v42 = v39 + 8 * v40;
    *v41 = v24;
    v34 = v41 + 1;
    v44 = (char *)v15[33];
    v43 = (char *)v15[34];
    if (v43 != v44)
    {
      do
      {
        v45 = *((_QWORD *)v43 - 1);
        v43 -= 8;
        *--v41 = v45;
      }
      while (v43 != v44);
      v43 = (char *)v15[33];
    }
    v15[33] = v41;
    v15[34] = v34;
    v15[35] = v42;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *v33 = v24;
    v34 = v33 + 1;
  }
  v15[34] = v34;
  (*(void (**)(_QWORD *, uint64_t))(*v15 + 16))(v15, v24);
  *a9 = *(_DWORD *)(v24 + 8);
  if (!kLocalInterAppAudioScope)
  {
    v46 = MEMORY[0x24BDACB70];
LABEL_67:
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      v48 = *a9;
      *(_DWORD *)buf = 136316162;
      v64 = "IPCAUServer.cpp";
      v65 = 1024;
      v66 = 365;
      v67 = 2048;
      v68 = v24;
      v69 = 2048;
      *(_QWORD *)v70 = v47;
      *(_WORD *)&v70[8] = 1024;
      v71[0] = v48;
      _os_log_impl(&dword_210A23000, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::AUOpen: ausi %p, AU %p, remoteAU 0x%x", buf, 0x2Cu);
    }
    goto LABEL_69;
  }
  v46 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(_QWORD *)kLocalInterAppAudioScope)
    goto LABEL_67;
LABEL_69:
  Property = 0;
LABEL_35:
  if (cf)
    CFRelease(cf);
  MEMORY[0x212BCD7B8](v50);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v52);
  return Property;
}

void sub_210AB35B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  BaseOpaqueObject *v18;
  void **v19;
  uint64_t v20;
  xpc_object_t *v21;
  uint64_t v22;
  void *v24;
  void *v25;

  v24 = (void *)*((_QWORD *)v18 + 25);
  if (v24)
  {
    *((_QWORD *)v18 + 26) = v24;
    operator delete(v24);
  }
  v25 = *v19;
  if (*v19)
  {
    *((_QWORD *)v18 + 23) = v25;
    operator delete(v25);
  }
  IPCAUSharedMemory::~IPCAUSharedMemory(v21);
  MEMORY[0x212BCD560](v20);
  *(_QWORD *)v18 = &off_24CA948B8;
  MEMORY[0x212BCD5CC](v22);
  BaseOpaqueObject::~BaseOpaqueObject(v18);
  MEMORY[0x212BCDF50](v18, 0x10E1C407F57F55ELL);
  MEMORY[0x212BCD7B8](&a12);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a18);
  _Unwind_Resume(a1);
}

void SharableMemoryBlock::MachServerToken::~MachServerToken(SharableMemoryBlock::MachServerToken *this)
{
  JUMPOUT(0x212BCDF50);
}

uint64_t MIGVariableLengthRefs::Write(MIGVariableLengthRefs *this, const void *a2, vm_size_t size)
{
  _DWORD *v6;
  vm_address_t *v7;
  uint64_t result;
  vm_address_t v9;
  void **v10;
  vm_address_t address;

  v6 = (_DWORD *)*((_QWORD *)this + 4);
  if (v6 && *((_QWORD *)this + 1) >= size)
  {
    *v6 = size;
    goto LABEL_8;
  }
  v7 = (vm_address_t *)*((_QWORD *)this + 5);
  address = 0;
  result = vm_allocate(*MEMORY[0x24BDAEC58], &address, size, 1);
  v9 = address;
  if ((_DWORD)result)
    v9 = 0;
  *v7 = v9;
  if (!(_DWORD)result)
  {
    **((_DWORD **)this + 6) = size;
    *((_BYTE *)this + 16) = 1;
LABEL_8:
    v10 = (void **)*((_QWORD *)this + 5);
    if (!*v10)
      v10 = (void **)((char *)this + 24);
    memcpy(*v10, a2, size);
    return 0;
  }
  return result;
}

uint64_t std::unique_ptr<CADeserializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x212BCD7B8]();
    JUMPOUT(0x212BCDF50);
  }
  return result;
}

uint64_t std::unique_ptr<CASerializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x212BCD6E0]();
    JUMPOUT(0x212BCDF50);
  }
  return result;
}

void AudioUnitPropertyMarshaller::~AudioUnitPropertyMarshaller(AudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AudioUnitPropertyMarshaller::GetMarshaller(AudioUnitPropertyMarshaller *this, AudioUnitPropertyMarshaller *a2)
{
  return AudioUnitPropertyMarshaller::CreateMarshaller(a2);
}

uint64_t AudioUnitPropertyMarshaller::UnknownPropertyError(AudioUnitPropertyMarshaller *this)
{
  return 4294956417;
}

uint64_t AudioUnitPropertyMarshaller::InvalidPropertySizeError(AudioUnitPropertyMarshaller *this)
{
  return 4294956445;
}

uint64_t IPCAUServer_SetProperty(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, const void *a8, int a9)
{
  uint64_t AU;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;
  _QWORD v23[2];
  BOOL v24;
  const void *v25;
  _DWORD *v26;
  const void **v27;
  int *v28;
  const void *v29;
  _DWORD v30[2];
  uint64_t v31;

  v30[0] = a7;
  v29 = a8;
  AU = IPCAUServer::FindAU(a1, a2);
  if (!AU)
    return 4294967246;
  v15 = AU;
  v23[0] = &off_24CA90EE8;
  v23[1] = 256;
  v24 = a8 != 0;
  v25 = a6;
  v26 = v30;
  if (a8)
    v16 = a8;
  else
    v16 = a6;
  v27 = &v29;
  v28 = &a9;
  PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v21, v16);
  v21[0] = &off_24CA91EE0;
  v31 = 0;
  v30[1] = 0;
  v17 = PropertyMarshaller::Deserialize();
  if (!(_DWORD)v17)
  {
    if (v22)
    {
      v18 = *(_QWORD *)(v22 + 40);
      v19 = (*(_DWORD *)(v22 + 48) - v18);
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 80))(v15, a3, a4, a5, v18, v19);
    if ((_DWORD)v17)
      v24 = 0;
  }
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v21);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v23);
  return v17;
}

void sub_210AB396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

uint64_t IPCAUServer_Render(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _opaque_pthread_t *a7, uint64_t a8)
{
  uint64_t AU;
  uint64_t v15;
  CADeprecated::CAPThread *v16;

  AU = IPCAUServer::FindAU(a1, a2);
  if (!AU)
    return 4294967246;
  v15 = AU;
  if (((_DWORD)a7 - 1) <= 0x5E)
  {
    v16 = (CADeprecated::CAPThread *)pthread_self();
    CADeprecated::CAPThread::SetPriority(v16, a7);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 128))(v15, a8, a3, a4, a5, a6);
}

uint64_t IPCAUServer_SysEx(IPCAUServer *a1, const audit_token_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AU;
  uint64_t v7;
  _QWORD v9[2];
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int *v14;
  int v15;
  uint64_t v16;

  v16 = a3;
  v15 = a4;
  AU = IPCAUServer::FindAU(a1, a2);
  if (!AU)
    return 4294967246;
  v9[0] = &off_24CA90EE8;
  v9[1] = 0;
  v10 = a3 != 0;
  v11 = 0;
  v12 = 0;
  v13 = &v16;
  v14 = &v15;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)AU + 104))(AU, a3, a4);
  if ((_DWORD)v7)
    v10 = 0;
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v9);
  return v7;
}

void sub_210AB3AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

void FileSample::~FileSample(OpaqueExtAudioFile **this)
{
  FileSample::~FileSample(this);
  JUMPOUT(0x212BCDF50);
}

{
  *this = (OpaqueExtAudioFile *)&off_24CA8A908;
  FileSample::Unload(this);
  CADeprecated::CAMutex::~CAMutex((CADeprecated::CAMutex *)(this + 26));
  Sample::~Sample((Sample *)this);
}

void FileSample::SetFrameOffsetHint(FileSample *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(FileSample *))(*(_QWORD *)this + 24))(this))
  {
    if (*((_BYTE *)this + 196))
    {
      if (*((_QWORD *)this + 14) != a2)
      {
        v4 = *((_QWORD *)this + 23);
        if (v4 > a2 && *((_QWORD *)this + 15) < v4 - 1)
        {
          *((_QWORD *)this + 14) = a2;
          if (*((_QWORD *)this + 16) >= v4 - a2)
            v5 = v4 - a2;
          else
            v5 = *((_QWORD *)this + 16);
          FileSample::ReadFromFile(this, a2, v5, *((void **)this + 17));
          v7 = v6;
          if (v6 < v5 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v8 = 136315394;
            v9 = "FileSample.cpp";
            v10 = 1024;
            v11 = 311;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::FillCache:  Incomplete read from sample file", (uint8_t *)&v8, 0x12u);
          }
          *((_QWORD *)this + 15) = v7 + *((_QWORD *)this + 14) - 1;
        }
      }
    }
  }
}

void sub_210AB3C48(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x210AB3C08);
  }
  _Unwind_Resume(a1);
}

void FileSample::Unload(OpaqueExtAudioFile **this)
{
  OpaqueExtAudioFile *v2;
  OpaqueExtAudioFile *v3;
  OpaqueExtAudioFile *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  FileSample *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315650;
    v6 = "FileSample.cpp";
    v7 = 1024;
    v8 = 354;
    v9 = 2048;
    v10 = (FileSample *)this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::Unload(this=%p):  Freeing stream cache", (uint8_t *)&v5, 0x1Cu);
  }
  v2 = this[17];
  if (v2)
    MEMORY[0x212BCDF2C](v2, 0x1000C8077774924);
  this[17] = 0;
  v3 = this[25];
  if (v3)
  {
    ExtAudioFileDispose(v3);
    this[25] = 0;
  }
  v4 = this[4];
  if (v4)
    CFRelease(v4);
  this[4] = 0;
}

void FileSample::GetMoreFrames(FileSample *this, SInt64 a2, uint64_t a3, void *a4)
{
  FileSample::ReadFromFile(this, a2, a3 - a2 + 1, a4);
}

void FileSample::ReadFromFile(FileSample *this, SInt64 a2, unint64_t a3, void *a4)
{
  unsigned int v8;
  UInt32 v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  const char *v13;
  UInt32 ioNumberFrames;
  AudioBufferList ioData;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(FileSample *))(*(_QWORD *)this + 24))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ioData.mNumberBuffers = 136315394;
      *(_QWORD *)(&ioData.mNumberBuffers + 1) = "FileSample.cpp";
      LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 332;
      v12 = MEMORY[0x24BDACB70];
      v13 = "%25s:%-5d  ASSERTION FAILED: attempt to read from unloaded FileSample";
LABEL_19:
      _os_log_impl(&dword_210A23000, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&ioData, 0x12u);
    }
LABEL_20:
    __break(1u);
    return;
  }
  v8 = *((_DWORD *)this + 42);
  if (!v8)
  {
    v9 = *((_DWORD *)this + 43);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = v9;
    goto LABEL_11;
  }
  v9 = *((_DWORD *)this + 43);
  if ((*((_BYTE *)this + 156) & 0x20) != 0)
  {
    if (0x7FFFFFFF / (v9 * v8) > a3)
    {
      v10 = 1;
      goto LABEL_10;
    }
LABEL_17:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      ioData.mNumberBuffers = 136315394;
      *(_QWORD *)(&ioData.mNumberBuffers + 1) = "FileSample.cpp";
      LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 333;
      v12 = MEMORY[0x24BDACB70];
      v13 = "%25s:%-5d  ASSERTION FAILED: attempt to read more than INT_MAX bytes";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v9)
  {
    if (0x7FFFFFFF / (v8 / v9 * v9) > a3)
    {
      v10 = *((_DWORD *)this + 43);
LABEL_10:
      ioData.mNumberBuffers = 1;
      ioData.mBuffers[0].mNumberChannels = v9;
      v8 /= v10;
      goto LABEL_11;
    }
    goto LABEL_17;
  }
  v8 = 0;
  ioData.mNumberBuffers = 1;
  ioData.mBuffers[0].mNumberChannels = 0;
LABEL_11:
  ioData.mBuffers[0].mDataByteSize = v9 * a3 * v8;
  ioData.mBuffers[0].mData = a4;
  ioNumberFrames = a3;
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 26) + 16))((char *)this + 208);
  ExtAudioFileSeek(*((ExtAudioFileRef *)this + 25), a2);
  ExtAudioFileRead(*((ExtAudioFileRef *)this + 25), &ioNumberFrames, &ioData);
  if (v11)
    (*(void (**)(char *))(*((_QWORD *)this + 26) + 24))((char *)this + 208);
}

void sub_210AB3FA4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL FileSample::LoadFromURL(FileSample *this, const __CFURL *a2, int a3)
{
  ExtAudioFileRef *v6;
  OSStatus v7;
  int *v8;
  const void *Value;
  const __CFString *PathComponent;
  CFStringRef v11;
  const void *v12;
  int v13;
  OSStatus Property;
  OSStatus v15;
  int v16;
  OSStatus v17;
  OSStatus v18;
  unsigned int v19;
  unsigned int v20;
  OSStatus v21;
  BOOL v22;
  uint64_t UserData;
  OpaqueAudioFileID *v24;
  uint8x8_t v25;
  int v26;
  int v27;
  unsigned __int32 v28;
  int v29;
  OpaqueAudioFileID *v30;
  uint8x8_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint64_t v35;
  const char *v36;
  int v37;
  OpaqueAudioFileID *v38;
  int *v39;
  int v40;
  int v41;
  unsigned int v42;
  _DWORD *v43;
  NSObject *v44;
  const __CFString *v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  CFTypeRef *v50;
  int *v51;
  double *v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  int8x16_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  float v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  double *v69;
  double *v70;
  int v71;
  int v72;
  NSObject *v73;
  const char *v74;
  double v75;
  double v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned __int32 v81;
  int v82;
  int *v83;
  int v84;
  int v85;
  unint64_t v86;
  CFTypeRef *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  NSObject *v92;
  uint64_t v93;
  int v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint32_t v98;
  const __CFUUID *v99;
  UInt32 v100;
  char *v101;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  void *v110;
  SInt64 v111;
  unint64_t v112;
  unint64_t v113;
  _BOOL8 result;
  const __CFString *v115;
  const __CFString *v116;
  char *CStringPtr;
  UInt32 *v118;
  uint64_t v119;
  const char *v120;
  int v121;
  char *v122;
  _BYTE *v123;
  BOOL v124;
  UInt32 **v125;
  UInt32 *v126;
  UInt32 *v127;
  _QWORD *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  UInt32 **v133;
  UInt32 **v134;
  UInt32 *v135;
  _QWORD *v136;
  UInt32 *v137;
  int64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  _BYTE *v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  _BOOL4 v155;
  NSObject *v156;
  const char *v157;
  uint32_t v158;
  int v159;
  char v160;
  int v161;
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  _BYTE *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  char v171;
  _BYTE *v172;
  _BYTE *v173;
  char *v174;
  int v175;
  int v176;
  unsigned __int8 *v177;
  int v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  int *v183;
  double *v184;
  int v185;
  int v186;
  double *v187;
  int v188;
  UInt32 v189;
  int v190;
  unsigned int v191;
  const char *v192;
  int v193;
  size_t v194;
  const char *v195;
  char v196;
  int v197;
  char v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  const char *v203;
  int v204;
  unsigned int v205;
  unsigned int v206;
  double *v207;
  double *v208;
  int v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  CAXException *v216;
  unsigned int v217;
  CAXException *exception;
  CAXException *v219;
  CAXException *v220;
  CAXException *v221;
  CAXException *v222;
  uint64_t v223;
  CAXException *v224;
  CAXException *v225;
  CAXException *v226;
  int v227;
  unsigned int v228;
  int *v229;
  uint8x8_t v230;
  float v231;
  uint8x8_t v232;
  int v233;
  int v234;
  unint64_t *v235;
  ExtAudioFileRef *v236;
  int v237;
  _QWORD inPropertyData[2];
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244[3];
  unsigned int v245;
  UInt32 ioDataSize;
  AudioFileID outPropertyData;
  UInt32 ioPropertyDataSize;
  UInt32 outDataSize[2];
  uint64_t v250;
  unsigned __int8 v251;
  std::regex_traits<char> outUserDataSize;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  _BYTE buf[18];
  __int16 v257;
  _BYTE v258[10];
  _BYTE v259[18];
  uint64_t v260;
  _BYTE outUserData[42];
  __int16 v262;
  int v263;
  UInt32 *v264;
  UInt32 *v265;
  BOOL v266;
  __int128 v267;
  char v268;
  char v269;
  UInt32 *v270;
  uint64_t v271;

  v271 = *MEMORY[0x24BDAC8D0];
  ioPropertyDataSize = 0;
  outPropertyData = 0;
  v6 = (ExtAudioFileRef *)((char *)this + 200);
  (*(void (**)(FileSample *))(*(_QWORD *)this + 40))(this);
  v236 = v6;
  v7 = ExtAudioFileOpenURL(a2, v6);
  if (v7)
  {
    v217 = v7;
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v217);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 52;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "FileSample::LoadFromURL: ExtAudioFileOpenURL";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FileSample::LoadFromURL: ExtAudioFileOpenURL", v217);
  }
  Sample::SetURL(this, a2);
  ioPropertyDataSize = 8;
  ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x6166696Cu, &ioPropertyDataSize, &outPropertyData);
  ioDataSize = 4;
  v8 = (int *)((char *)this + 192);
  if (AudioFileGetProperty(outPropertyData, 0x61746374u, &ioDataSize, (char *)this + 192))
    *v8 = 1;
  if (!AudioFileGetPropertyInfo(outPropertyData, 0x696E666Fu, &ioPropertyDataSize, 0))
  {
    *(_QWORD *)buf = 0;
    if (!AudioFileGetProperty(outPropertyData, 0x696E666Fu, &ioPropertyDataSize, buf))
    {
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)buf, CFSTR("title"));
      if (Value)
      {
        CACFString::operator=((uint64_t)this + 40, Value);
      }
      else
      {
        PathComponent = CFURLCopyLastPathComponent(a2);
        v11 = CFURLCreateStringByReplacingPercentEscapes(0, PathComponent, &stru_24CA985C0);
        CACFString::operator=((uint64_t)this + 40, v11);
        CFRelease(PathComponent);
        CFRelease(v11);
      }
      v12 = CFDictionaryGetValue(*(CFDictionaryRef *)buf, CFSTR("copyright"));
      CACFString::operator=((uint64_t)this + 56, v12);
      CFRelease(*(CFTypeRef *)buf);
    }
  }
  v13 = *v8;
  if (*v8 >= 2)
  {
    LODWORD(outUserDataSize.__loc_.__locale_) = 0;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      v257 = 1024;
      *(_DWORD *)v258 = v13;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::LoadFromURL:  File has %d tracks -- using first for now", buf, 0x18u);
    }
    ioPropertyDataSize = 4;
    Property = AudioFileGetProperty(outPropertyData, 0x7561746Bu, &ioPropertyDataSize, &outUserDataSize);
    if (Property)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, Property);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 94;
        v257 = 2080;
        *(_QWORD *)v258 = outUserData;
        *(_WORD *)&v258[8] = 2080;
        *(_QWORD *)v259 = "FileSample::LoadFromURL: AudioFileSetProperty for kAudioFilePropertyUseAudioTrack failed";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v225 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v225, "FileSample::LoadFromURL: AudioFileSetProperty for kAudioFilePropertyUseAudioTrack failed", Property);
    }
  }
  ioPropertyDataSize = 40;
  v15 = ExtAudioFileGetProperty(*v236, 0x66666D74u, &ioPropertyDataSize, v244);
  if (v15)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v15);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 100;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v219 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v219, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v15);
  }
  v16 = v245;
  if (v245 >= 2)
    v16 = 2;
  inPropertyData[0] = v244[0];
  inPropertyData[1] = 0x96C70636DLL;
  v239 = 4 * v16;
  v240 = 1;
  v241 = 4 * v16;
  v242 = v16;
  v243 = 32;
  v17 = ExtAudioFileSetProperty(*v236, 0x63666D74u, 0x28u, inPropertyData);
  if (v17)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v17);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 108;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "FileSample::LoadFromURL: ExtAudioFileSetProperty failed";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v220 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v220, "FileSample::LoadFromURL: ExtAudioFileSetProperty failed", v17);
  }
  ioPropertyDataSize = 40;
  v18 = ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x63666D74u, &ioPropertyDataSize, (char *)this + 144);
  if (v18)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v18);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v221 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v221, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v18);
  }
  v19 = *((_DWORD *)this + 42);
  if (!v19)
  {
LABEL_423:
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, 0xFFFFD589);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "Illegal audio format";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v216 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v216, "Illegal audio format", -10871);
  }
  if ((*((_BYTE *)this + 156) & 0x20) != 0)
  {
    v20 = 1;
  }
  else
  {
    v20 = *((_DWORD *)this + 43);
    if (!v20)
      goto LABEL_423;
  }
  if (v20 > v19 || !*((_DWORD *)this + 43))
    goto LABEL_423;
  ioPropertyDataSize = 8;
  v235 = (unint64_t *)((char *)this + 184);
  v21 = ExtAudioFileGetProperty(*((ExtAudioFileRef *)this + 25), 0x2366726Du, &ioPropertyDataSize, (char *)this + 184);
  if (v21)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, v21);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 119;
      v257 = 2080;
      *(_QWORD *)v258 = outUserData;
      *(_WORD *)&v258[8] = 2080;
      *(_QWORD *)v259 = "FileSample::LoadFromURL: ExtAudioFileGetProperty failed";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    v222 = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(v222, "FileSample::LoadFromURL: ExtAudioFileGetProperty failed", v21);
  }
  if (a3)
    v22 = *v235 > 0x8000;
  else
    v22 = 0;
  *((_BYTE *)this + 196) = v22;
  v237 = 0;
  ioPropertyDataSize = 4;
  UserData = AudioFileGetProperty(outPropertyData, 0x66666D74u, &ioPropertyDataSize, &v237);
  if ((_DWORD)UserData)
    goto LABEL_209;
  *((_BYTE *)this + 72) = -1;
  if (v237 != 1095321155 && v237 != 1095321158)
  {
    if (v237 == 1463899717)
    {
      v24 = outPropertyData;
      LODWORD(outUserDataSize.__loc_.__locale_) = 0;
      if (!AudioFileGetUserDataSize(outPropertyData, 0x696E7374u, 0, (UInt32 *)&outUserDataSize)
        && LODWORD(outUserDataSize.__loc_.__locale_) == 16)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 735;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: Found inst chunk", buf, 0x12u);
        }
        if (!AudioFileGetUserData(v24, 0x696E7374u, 0, (UInt32 *)&outUserDataSize, outUserData))
        {
          v26 = outUserData[8];
          *((_BYTE *)this + 72) = outUserData[8];
          v27 = outUserData[10];
          *((float *)this + 20) = (float)outUserData[9];
          *((float *)this + 21) = (float)v27;
          v25.i32[0] = *(_DWORD *)&outUserData[11];
          v230 = v25;
          *(_DWORD *)((char *)this + 73) = *(_DWORD *)&outUserData[11];
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v28 = vmovl_u8(v230).u32[0];
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "FileSample.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 747;
            v257 = 1024;
            *(_DWORD *)v258 = (unsigned __int16)v28;
            *(_WORD *)&v258[4] = 1024;
            *(_DWORD *)&v258[6] = HIWORD(v28);
            *(_WORD *)v259 = 1024;
            *(_DWORD *)&v259[2] = v26;
            *(_WORD *)&v259[6] = 2048;
            *(double *)&v259[8] = (double)v27;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
          }
        }
      }
      if (!AudioFileGetUserDataSize(v24, 0x736D706Cu, 0, (UInt32 *)&outUserDataSize)
        && LODWORD(outUserDataSize.__loc_.__locale_) >= 0x2C)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 780;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: Found smpl chunk", buf, 0x12u);
        }
        if (!AudioFileGetUserData(v24, 0x736D706Cu, 0, (UInt32 *)&outUserDataSize, buf))
        {
          v29 = *(_DWORD *)&buf[4];
          if (*(int *)&buf[4] >= SLODWORD(outUserDataSize.__loc_.__locale_))
          {
            *((_BYTE *)this + 72) = v258[0];
            *((float *)this + 20) = (float)((float)*(int *)&v258[4] * 4.6566e-10) * 100.0;
            *((_DWORD *)this + 21) = 0;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)outUserData = 136315650;
              *(_QWORD *)&outUserData[4] = "FileSample.cpp";
              *(_WORD *)&outUserData[12] = 1024;
              *(_DWORD *)&outUserData[14] = 793;
              *(_WORD *)&outUserData[18] = 1024;
              *(_DWORD *)&outUserData[20] = *(_DWORD *)&v259[6];
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: %d sample loop(s)", outUserData, 0x18u);
            }
            v90 = *(unsigned int *)&v259[6];
            if (*(int *)&v259[6] >= 1)
            {
              v91 = &v260;
              v92 = MEMORY[0x24BDACB70];
              do
              {
                v93 = *((unsigned int *)v91 - 2);
                if (v93 >= 3)
                {
                  v95 = os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT);
                  v94 = 0;
                  if (v95)
                  {
                    *(_DWORD *)outUserData = 136315650;
                    *(_QWORD *)&outUserData[4] = "FileSample.cpp";
                    *(_WORD *)&outUserData[12] = 1024;
                    *(_DWORD *)&outUserData[14] = 809;
                    *(_WORD *)&outUserData[18] = 1024;
                    *(_DWORD *)&outUserData[20] = v93;
                    _os_log_impl(&dword_210A23000, v92, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FileSample::ReadWAVSampleInfo: Unsupported WAV loop type: %d\n", outUserData, 0x18u);
                    v94 = 0;
                  }
                }
                else
                {
                  v94 = *(_DWORD *)&aG[4 * v93];
                }
                *((_DWORD *)this + 22) = v94;
                v97 = *((int *)v91 - 1);
                v96 = *(int *)v91;
                *((_QWORD *)this + 12) = v97;
                *((_QWORD *)this + 13) = v96;
                if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)outUserData = 136315906;
                  *(_QWORD *)&outUserData[4] = "FileSample.cpp";
                  *(_WORD *)&outUserData[12] = 1024;
                  *(_DWORD *)&outUserData[14] = 816;
                  *(_WORD *)&outUserData[18] = 2048;
                  *(_QWORD *)&outUserData[20] = v97;
                  *(_WORD *)&outUserData[28] = 2048;
                  *(_QWORD *)&outUserData[30] = v96;
                  _os_log_impl(&dword_210A23000, v92, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo: loop start %llu, loop end %llu", outUserData, 0x26u);
                }
                v91 += 3;
                --v90;
              }
              while (v90);
            }
          }
          else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)outUserData = 136315650;
            *(_QWORD *)&outUserData[4] = "FileSample.cpp";
            *(_WORD *)&outUserData[12] = 1024;
            *(_DWORD *)&outUserData[14] = 786;
            *(_WORD *)&outUserData[18] = 1024;
            *(_DWORD *)&outUserData[20] = v29;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadWAVSampleInfo:  bad internal smpl chunk size: %d -- ignoring chunk\n", outUserData, 0x18u);
          }
        }
      }
LABEL_207:
      UserData = 0;
      goto LABEL_208;
    }
    v38 = outPropertyData;
    outDataSize[0] = 0;
    if (AudioFileGetPropertyInfo(outPropertyData, 0x72676C73u, outDataSize, 0) || !outDataSize[0])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 444;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: File has no region list", buf, 0x12u);
      }
      v51 = 0;
    }
    else
    {
      v39 = (int *)malloc_type_malloc(outDataSize[0], 0x481F3FA8uLL);
      if (!AudioFileGetProperty(v38, 0x72676C73u, outDataSize, v39))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v41 = *v39;
          v40 = v39[1];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 418;
          v257 = 1024;
          *(_DWORD *)v258 = v40;
          *(_WORD *)&v258[4] = 1024;
          *(_DWORD *)&v258[6] = v41;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: %d regions; SMPTE time type %d",
            buf,
            0x1Eu);
        }
        if (v39[1])
        {
          v42 = 0;
          v43 = v39 + 2;
          v44 = MEMORY[0x24BDACB70];
          do
          {
            v45 = (const __CFString *)*((_QWORD *)v43 + 1);
            if (v45)
            {
              CFStringGetCString(v45, buf, 512, 0x8000100u);
              CFRelease(*((CFTypeRef *)v43 + 1));
              *((_QWORD *)v43 + 1) = 0;
            }
            else
            {
              buf[0] = 0;
            }
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v46 = *v43;
              v47 = v43[4];
              *(_DWORD *)outUserData = 136316162;
              *(_QWORD *)&outUserData[4] = "FileSample.cpp";
              *(_WORD *)&outUserData[12] = 1024;
              *(_DWORD *)&outUserData[14] = 431;
              *(_WORD *)&outUserData[18] = 1024;
              *(_DWORD *)&outUserData[20] = v46;
              *(_WORD *)&outUserData[24] = 2080;
              *(_QWORD *)&outUserData[26] = buf;
              *(_WORD *)&outUserData[34] = 1024;
              *(_DWORD *)&outUserData[36] = v47;
              _os_log_impl(&dword_210A23000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: region %d, \"%s\", flags %08X\n", outUserData, 0x28u);
            }
            v48 = v43[5];
            if ((_DWORD)v48)
            {
              v49 = 0;
              v50 = (CFTypeRef *)(v43 + 8);
              do
              {
                if (*v50)
                {
                  CFRelease(*v50);
                  *v50 = 0;
                  v48 = v43[5];
                }
                ++v49;
                v50 += 5;
              }
              while (v49 < v48);
            }
            else
            {
              v48 = 0;
            }
            v43 += 10 * v48 + 6;
            ++v42;
          }
          while (v42 < v39[1]);
        }
      }
      v51 = v39;
    }
    if (AudioFileGetPropertyInfo(v38, 0x6D6B6C73u, outDataSize, 0) || !outDataSize[0])
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 461;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: No markers", buf, 0x12u);
      }
      v52 = 0;
    }
    else
    {
      v52 = (double *)malloc_type_malloc(outDataSize[0], 0xAF099459uLL);
      if (!AudioFileGetProperty(v38, 0x6D6B6C73u, outDataSize, v52)
        && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v54 = *(_DWORD *)v52;
        v53 = *((_DWORD *)v52 + 1);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 452;
        v257 = 1024;
        *(_DWORD *)v258 = v53;
        *(_WORD *)&v258[4] = 1024;
        *(_DWORD *)&v258[6] = v54;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: %d markers; SMPTE time type %d\n",
          buf,
          0x1Eu);
      }
      if (*((_DWORD *)v52 + 1))
      {
        v55 = 0;
        v56 = 2;
        do
        {
          CFRelease(*(CFTypeRef *)&v52[v56]);
          v52[v56] = 0.0;
          ++v55;
          v56 += 5;
        }
        while (v55 < *((unsigned int *)v52 + 1));
      }
    }
    outDataSize[0] = 28;
    if (AudioFileGetUserData(v38, 0x696E7374u, 0, outDataSize, outUserData) || outDataSize[0] < 0x1C)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 558;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: No instrument chunk found in sample file", buf, 0x12u);
      }
      if (v52)
      {
        if (*((_DWORD *)v52 + 1) == 2)
        {
          v75 = v52[6];
          v76 = v52[1];
          if (v75 > v76)
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "FileSample.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 561;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Using marker list to set loop points", buf, 0x12u);
              v76 = v52[1];
              v75 = v52[6];
            }
            *((_DWORD *)this + 22) = 71;
            v77 = *((_QWORD *)this + 23) - 1;
            if (v77 >= (unint64_t)v75)
              v77 = (unint64_t)v75;
            *((_QWORD *)this + 12) = (unint64_t)v76;
            *((_QWORD *)this + 13) = v77;
          }
        }
      }
      goto LABEL_192;
    }
    v57 = *(float *)outUserData;
    v58 = COERCE_FLOAT(bswap32(*(unsigned int *)outUserData));
    v59 = vrev32q_s8(*(int8x16_t *)&outUserData[8]);
    *(int8x16_t *)&outUserData[8] = v59;
    *(float *)outUserData = v58;
    *(_DWORD *)&outUserData[24] = bswap32(*(unsigned int *)&outUserData[24]);
    v60 = outUserData[4];
    *((_BYTE *)this + 73) = outUserData[4];
    v61 = outUserData[5];
    *((_BYTE *)this + 74) = outUserData[5];
    v62 = outUserData[6];
    *((_BYTE *)this + 75) = outUserData[6];
    v63 = outUserData[7];
    *((_BYTE *)this + 76) = outUserData[7];
    if (v61 < v60)
      *((_BYTE *)this + 74) = v60;
    v64 = v58;
    if (v63 < v62)
      *((_BYTE *)this + 76) = v62;
    if (v58 < 0.0 || v58 > 127.0 || v58 > 0.0 && v58 < 1.0)
    {
      *(float *)outUserData = v57;
      v64 = v57;
    }
    if (v64 >= 0.0 && v64 <= 127.0)
    {
      *((_BYTE *)this + 72) = (int)v64;
      *((float *)this + 20) = (float)(v64 - (float)(int)v64) * 100.0;
    }
    *((float *)this + 21) = fminf(fmaxf(*(float *)v59.i32, -96.0), 12.0);
    v231 = *(float *)v59.i32;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 484;
      v257 = 1024;
      *(_DWORD *)v258 = v60;
      *(_WORD *)&v258[4] = 1024;
      *(_DWORD *)&v258[6] = v61;
      *(_WORD *)v259 = 1024;
      *(_DWORD *)&v259[2] = v64;
      *(_WORD *)&v259[6] = 2048;
      *(double *)&v259[8] = v231;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
    }
    if (!v51)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 554;
        v73 = MEMORY[0x24BDACB70];
        v74 = "%25s:%-5d FileSample::ReadCAFSampleInfo: No region list found in sample file";
        goto LABEL_190;
      }
LABEL_192:
      LODWORD(outUserDataSize.__loc_.__locale_) = 0;
      if (!AudioFileCountUserData(v38, 0x75756964u, (UInt32 *)&outUserDataSize)
        || LODWORD(outUserDataSize.__loc_.__locale_))
      {
        v99 = CFUUIDGetConstantUUIDWithBytes(0, 0x29u, 0x81u, 0x92u, 0x73u, 0xB5u, 0xBFu, 0x4Au, 0xEFu, 0xB7u, 0x8Du, 0x62u, 0xD1u, 0xEFu, 0x90u, 0xBBu, 0x2Cu);
        *(CFUUIDBytes *)outUserData = CFUUIDGetUUIDBytes(v99);
        if (LODWORD(outUserDataSize.__loc_.__locale_))
        {
          v100 = 0;
          while (!AudioFileGetUserDataSize(v38, 0x75756964u, v100, outDataSize))
          {
            v101 = (char *)operator new[]();
            if (!AudioFileGetUserData(v38, 0x75756964u, v100, outDataSize, v101)
              && *(_QWORD *)outUserData == *(_QWORD *)v101
              && *(_QWORD *)&outUserData[8] == *((_QWORD *)v101 + 1))
            {
              v189 = outDataSize[0];
              if (outDataSize[0] <= 0x14)
              {
                MEMORY[0x212BCDF2C](v101, 0x1000C8077774924);
              }
              else
              {
                v229 = v51;
                v234 = 0;
                v190 = 0;
                v191 = 20;
                do
                {
                  v192 = &v101[v191];
                  v193 = strlen(v192);
                  v194 = (v193 + 1);
                  v195 = &v192[v194];
                  if (!strncmp(v192, "key signature", v194))
                  {
                    if ((*v195 - 65) >= 7)
                      v196 = 48;
                    else
                      v196 = 0x37353432303B39uLL >> (8 * (*v195 - 65));
                    v197 = *((unsigned __int8 *)v195 + 1);
                    v198 = v196 - 1;
                    if (v197 == 35)
                      ++v196;
                    if (v197 == 98)
                      v196 = v198;
                    *((_BYTE *)this + 72) = v196;
                    *((_BYTE *)this + 73) = v196 - 6;
                    *((_BYTE *)this + 74) = v196 + 5;
                  }
                  else if (!strncmp(&v101[v191], "time signature", v194))
                  {
                    v234 = 1;
                  }
                  else
                  {
                    v190 |= strncmp(&v101[v191], "beat count", v194) == 0;
                  }
                  v191 += v193 + strlen(&v192[v194]) + 2;
                }
                while (v191 < v189);
                MEMORY[0x212BCDF2C](v101, 0x1000C8077774924);
                v51 = v229;
                if ((v234 & v190 & 1) != 0)
                {
                  *((_DWORD *)this + 22) = 71;
                  v199 = *((_QWORD *)this + 23) - 1;
                  *((_QWORD *)this + 12) = 0;
                  *((_QWORD *)this + 13) = v199;
                }
              }
              if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
              {
                v200 = *((unsigned __int8 *)this + 73);
                v201 = *((unsigned __int8 *)this + 74);
                v202 = *((unsigned __int8 *)this + 72);
                v203 = "off";
                if (*((_DWORD *)this + 22) == 71)
                  v203 = "on";
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "FileSample.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 658;
                v257 = 1024;
                *(_DWORD *)v258 = v200;
                *(_WORD *)&v258[4] = 1024;
                *(_DWORD *)&v258[6] = v201;
                *(_WORD *)v259 = 1024;
                *(_DWORD *)&v259[2] = v202;
                *(_WORD *)&v259[6] = 2080;
                *(_QWORD *)&v259[8] = v203;
                _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Apple Loop keyrange %u-%u, unity %u, looping %s", buf, 0x2Eu);
              }
              break;
            }
            MEMORY[0x212BCDF2C](v101, 0x1000C8077774924);
            if (++v100 >= LODWORD(outUserDataSize.__loc_.__locale_))
              break;
          }
        }
      }
      if (v51)
        free(v51);
      if (v52)
        free(v52);
      goto LABEL_207;
    }
    v65 = *(_DWORD *)&outUserData[12];
    if (*(_DWORD *)&outUserData[12] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 492;
      v257 = 1024;
      *(_DWORD *)v258 = v65;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has start region id %u", buf, 0x18u);
    }
    v66 = *(_DWORD *)&outUserData[16];
    if (!*(_DWORD *)&outUserData[16])
      goto LABEL_131;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 496;
      v257 = 1024;
      *(_DWORD *)v258 = v66;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has sustain region id %u", buf, 0x18u);
      v66 = *(_DWORD *)&outUserData[16];
    }
    v67 = v51[1];
    if (v67)
    {
      v68 = v51 + 2;
      while (*v68 != v66)
      {
        v68 += 10 * v68[5] + 6;
        if (!--v67)
          goto LABEL_131;
      }
      v182 = v68[5];
      if ((_DWORD)v182)
      {
        v70 = 0;
        v69 = 0;
        v183 = v68 + 13;
        do
        {
          v184 = (double *)(v183 - 7);
          v186 = *v183;
          v183 += 10;
          v185 = v186;
          if (v186 == 1936482919)
            v187 = v184;
          else
            v187 = v69;
          if (v185 == 1936483694)
            v70 = v184;
          else
            v69 = v187;
          --v182;
        }
        while (v182);
LABEL_133:
        v71 = *(_DWORD *)&outUserData[20];
        if (*(_DWORD *)&outUserData[20] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 514;
          v257 = 1024;
          *(_DWORD *)v258 = v71;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadCAFSampleInfo: Inst chunk has release region id %u", buf, 0x18u);
        }
        if (v68)
        {
          v72 = v68[4];
          if (v72)
          {
            if ((v72 & 1) != 0)
            {
              if ((~v72 & 6) != 0)
              {
                if ((v72 & 2) != 0)
                {
                  v188 = 71;
                }
                else
                {
                  if ((v72 & 4) == 0)
                  {
                    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                    {
                      CAX4CCString::CAX4CCString((CAX4CCString *)&outUserDataSize, 0xFFFFD589);
                      *(_DWORD *)buf = 136315906;
                      *(_QWORD *)&buf[4] = "FileSample.cpp";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 536;
                      v257 = 2080;
                      *(_QWORD *)v258 = &outUserDataSize;
                      *(_WORD *)&v258[8] = 2080;
                      *(_QWORD *)v259 = "FileSample::ReadCAFSampleInfo: Unsupported loop type";
                      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                    }
                    v226 = (CAXException *)__cxa_allocate_exception(0x110uLL);
                    CAXException::CAXException(v226, "FileSample::ReadCAFSampleInfo: Unsupported loop type", -10871);
                  }
                  v188 = 72;
                }
              }
              else
              {
                v188 = 73;
              }
              *((_DWORD *)this + 22) = v188;
              if (v69)
                v214 = (unint64_t)*v69;
              else
                v214 = 0;
              *((_QWORD *)this + 12) = v214;
              v215 = *((_QWORD *)this + 23) - 1;
              if (v70 && v215 >= (unint64_t)*v70)
                v215 = (unint64_t)*v70;
              *((_QWORD *)this + 13) = v215;
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
                goto LABEL_192;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "FileSample.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 543;
              v257 = 2048;
              *(_QWORD *)v258 = v214;
              *(_WORD *)&v258[8] = 2048;
              *(_QWORD *)v259 = v215;
              v73 = MEMORY[0x24BDACB70];
              v74 = "%25s:%-5d FileSample::ReadCAFSampleInfo: found loop start %llu, loop end %llu";
              v98 = 38;
              goto LABEL_191;
            }
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "FileSample.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 546;
              v73 = MEMORY[0x24BDACB70];
              v74 = "%25s:%-5d FileSample::ReadCAFSampleInfo: Region's loop not enabled";
LABEL_190:
              v98 = 18;
LABEL_191:
              _os_log_impl(&dword_210A23000, v73, OS_LOG_TYPE_DEBUG, v74, buf, v98);
              goto LABEL_192;
            }
          }
          else
          {
            *((_DWORD *)this + 22) = 0;
            *((_QWORD *)this + 12) = 0;
            *((_QWORD *)this + 13) = 0;
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "FileSample.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 523;
              v73 = MEMORY[0x24BDACB70];
              v74 = "%25s:%-5d FileSample::ReadCAFSampleInfo: Region has no loop";
              goto LABEL_190;
            }
          }
        }
        else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 550;
          v73 = MEMORY[0x24BDACB70];
          v74 = "%25s:%-5d FileSample::ReadCAFSampleInfo: No sustain region found in inst chunk";
          goto LABEL_190;
        }
        goto LABEL_192;
      }
    }
    else
    {
LABEL_131:
      v68 = 0;
    }
    v69 = 0;
    v70 = 0;
    goto LABEL_133;
  }
  v30 = outPropertyData;
  LODWORD(outUserDataSize.__loc_.__locale_) = 0;
  UserData = 0;
  if (!AudioFileGetUserDataSize(outPropertyData, 0x494E5354u, 0, (UInt32 *)&outUserDataSize)
    && LODWORD(outUserDataSize.__loc_.__locale_) == 20)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 884;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Found INST chunk", buf, 0x12u);
    }
    UserData = AudioFileGetUserData(v30, 0x494E5354u, 0, (UInt32 *)&outUserDataSize, outUserData);
    if (!(_DWORD)UserData)
    {
      v78 = outUserData[0];
      *((_BYTE *)this + 72) = outUserData[0];
      v31.i8[0] = outUserData[1];
      v79 = *(unsigned __int16 *)&outUserData[6];
      v80 = __rev16(*(unsigned __int16 *)&outUserData[6]);
      *((float *)this + 20) = (float)v31.u32[0];
      *((float *)this + 21) = (float)v80;
      v31.i32[0] = *(_DWORD *)&outUserData[2];
      v232 = v31;
      *(_DWORD *)((char *)this + 73) = *(_DWORD *)&outUserData[2];
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v81 = vmovl_u8(v232).u32[0];
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 896;
        v257 = 1024;
        *(_DWORD *)v258 = (unsigned __int16)v81;
        *(_WORD *)&v258[4] = 1024;
        *(_DWORD *)&v258[6] = HIWORD(v81);
        *(_WORD *)v259 = 1024;
        *(_DWORD *)&v259[2] = v78;
        *(_WORD *)&v259[6] = 2048;
        *(double *)&v259[8] = (double)v79;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: keyrange %u-%u, unity %u, gain %f", buf, 0x2Eu);
      }
      v82 = *(unsigned __int16 *)&outUserData[8];
      if (!*(_WORD *)&outUserData[8])
      {
        UserData = 0;
        *((_DWORD *)this + 22) = 0;
        goto LABEL_54;
      }
      UserData = AudioFileGetPropertyInfo(v30, 0x6D6B6C73u, (UInt32 *)&outUserDataSize, 0);
      if ((_DWORD)UserData || !LODWORD(outUserDataSize.__loc_.__locale_))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 938;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: No markers", buf, 0x12u);
        }
        goto LABEL_54;
      }
      v83 = (int *)malloc_type_malloc(LODWORD(outUserDataSize.__loc_.__locale_), 0x9E20023AuLL);
      UserData = AudioFileGetProperty(v30, 0x6D6B6C73u, (UInt32 *)&outUserDataSize, v83);
      if (!(_DWORD)UserData && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v85 = *v83;
        v84 = v83[1];
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        v257 = 1024;
        *(_DWORD *)v258 = v84;
        *(_WORD *)&v258[4] = 1024;
        *(_DWORD *)&v258[6] = v85;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: %d markers; SMPTE time type %d\n",
          buf,
          0x1Eu);
      }
      if (!v83[1])
        goto LABEL_413;
      v86 = 0;
      v87 = (CFTypeRef *)(v83 + 4);
      do
      {
        CFRelease(*v87);
        *v87 = 0;
        v87 += 5;
        ++v86;
        v88 = v83[1];
      }
      while (v86 < v88);
      if (v88 <= 1)
      {
LABEL_413:
        free(v83);
        goto LABEL_54;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "FileSample.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 920;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Using marker list to set loop points", buf, 0x12u);
        v88 = v83[1];
        if (v82 == 256)
          v89 = 71;
        else
          v89 = 73;
        *((_DWORD *)this + 22) = v89;
        if (!(_DWORD)v88)
        {
LABEL_411:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v212 = *((_QWORD *)this + 12);
            v213 = *((_QWORD *)this + 13);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "FileSample.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 933;
            v257 = 2048;
            *(_QWORD *)v258 = v212;
            *(_WORD *)&v258[8] = 2048;
            *(_QWORD *)v259 = v213;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: loop start %llu, loop end %llu", buf, 0x26u);
          }
          goto LABEL_413;
        }
      }
      else
      {
        if (v82 == 256)
          v204 = 71;
        else
          v204 = 73;
        *((_DWORD *)this + 22) = v204;
      }
      v205 = bswap32(*(unsigned __int16 *)&outUserData[10]) >> 16;
      v206 = bswap32(*(unsigned __int16 *)&outUserData[12]) >> 16;
      v207 = (double *)(v83 + 6);
      v208 = (double *)(v83 + 6);
      do
      {
        v210 = *(_DWORD *)v208;
        v208 += 5;
        v209 = v210;
        if (v210 == v205)
        {
          *((_QWORD *)this + 12) = (unint64_t)*(v207 - 2);
        }
        else if (v209 == v206)
        {
          v211 = (unint64_t)*(v207 - 2);
          if (*((_QWORD *)this + 23) - 1 < v211)
            v211 = *((_QWORD *)this + 23) - 1;
          *((_QWORD *)this + 13) = v211;
        }
        v207 = v208;
        --v88;
      }
      while (v88);
      goto LABEL_411;
    }
  }
LABEL_54:
  if (!AudioFileGetUserDataSize(v30, 0x62617363u, 0, (UInt32 *)&outUserDataSize)
    && LODWORD(outUserDataSize.__loc_.__locale_) >= 0x54)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "FileSample.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 945;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Found Apple Loops Tagging chunk", buf, 0x12u);
    }
    if (!AudioFileGetUserData(v30, 0x62617363u, 0, (UInt32 *)&outUserDataSize, buf))
    {
      *(int8x8_t *)buf = vrev32_s8(*(int8x8_t *)buf);
      *(int8x8_t *)&buf[8] = vrev16_s8(*(int8x8_t *)&buf[8]);
      v32 = bswap32(*(unsigned __int16 *)&buf[16]);
      v33 = HIWORD(v32);
      *(_WORD *)&buf[16] = HIWORD(v32);
      v34 = *(_WORD *)&buf[8];
      if ((unsigned __int16)(*(_WORD *)&buf[8] - 48) <= 0xBu)
      {
        *((_BYTE *)this + 72) = buf[8];
        *((_BYTE *)this + 73) = v34 - 6;
        *((_BYTE *)this + 74) = v34 + 5;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)outUserData = 136316162;
          *(_QWORD *)&outUserData[4] = "FileSample.cpp";
          *(_WORD *)&outUserData[12] = 1024;
          *(_DWORD *)&outUserData[14] = 956;
          *(_WORD *)&outUserData[18] = 1024;
          *(_DWORD *)&outUserData[20] = (v34 - 6);
          *(_WORD *)&outUserData[24] = 1024;
          *(_DWORD *)&outUserData[26] = (v34 + 5);
          *(_WORD *)&outUserData[30] = 1024;
          *(_DWORD *)&outUserData[32] = v34;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Apple Loop keyrange %u-%u, unity %u", outUserData, 0x24u);
          v33 = *(unsigned __int16 *)&buf[16];
        }
      }
      if (v33 == 1)
      {
        *((_DWORD *)this + 22) = 71;
        v35 = *((_QWORD *)this + 23) - 1;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = v35;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v36 = "off";
        v37 = *((_DWORD *)this + 22);
        *(_QWORD *)&outUserData[4] = "FileSample.cpp";
        *(_DWORD *)outUserData = 136315650;
        if (v37 == 71)
          v36 = "on";
        *(_WORD *)&outUserData[12] = 1024;
        *(_DWORD *)&outUserData[14] = 964;
        *(_WORD *)&outUserData[18] = 2080;
        *(_QWORD *)&outUserData[20] = v36;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::ReadAIFSampleInfo: Apple Loop looping is %s", outUserData, 0x1Cu);
      }
    }
  }
LABEL_208:
  if (*((unsigned __int8 *)this + 72) != 255)
    goto LABEL_209;
  v115 = CFURLCopyLastPathComponent(*((CFURLRef *)this + 4));
  v116 = v115;
  if (!v115)
    goto LABEL_209;
  CStringPtr = (char *)CFStringGetCStringPtr(v115, 0x600u);
  if (!CStringPtr)
  {
    if (!CFStringGetCString(v116, buf, 1024, 0x600u))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)outUserData = 136315394;
        *(_QWORD *)&outUserData[4] = "FileSample.cpp";
        *(_WORD *)&outUserData[12] = 1024;
        *(_DWORD *)&outUserData[14] = 236;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GetUnityNoteFromFilename: could not get filename as string", outUserData, 0x12u);
      }
      goto LABEL_209;
    }
    CStringPtr = buf;
  }
  std::string::basic_string[abi:ne180100]<0>(outDataSize, CStringPtr);
  CFRelease(v116);
  std::regex_traits<char>::regex_traits(&outUserDataSize);
  v255 = 0;
  v254 = 0u;
  v253 = 0u;
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)&outUserDataSize, "([A-G]{1})([#Sb]?)([-]?)([0-9]{1})", "") != "")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  v264 = 0;
  v265 = 0;
  v266 = 0;
  v267 = 0uLL;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  *(_QWORD *)outUserData = 0;
  *(_QWORD *)&outUserData[8] = 0;
  if ((v251 & 0x80u) == 0)
    v118 = outDataSize;
  else
    v118 = *(UInt32 **)outDataSize;
  if ((v251 & 0x80u) == 0)
    v119 = v251;
  else
    v119 = v250;
  v120 = (char *)v118 + v119;
  *(_QWORD *)&outUserData[16] = 0;
  *(_QWORD *)&outUserData[24] = (char *)v118 + v119;
  *(_QWORD *)&outUserData[32] = (char *)v118 + v119;
  outUserData[40] = 0;
  std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)outUserData, (DWORD1(v253) + 1), (std::vector<std::csub_match>::const_reference)&outUserData[24]);
  v264 = v118;
  v265 = v118;
  v266 = 0;
  v267 = *(_OWORD *)&outUserData[24];
  v268 = outUserData[40];
  v270 = v118;
  v269 = 1;
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)&outUserDataSize, (uint64_t)v118, (const char *)v118 + v119, (uint64_t *)outUserData, 0, 1))
  {
    v121 = 0;
    v122 = *(char **)outUserData;
    v123 = *(_BYTE **)&outUserData[8];
    v124 = *(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData;
    if (*(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData)
      v125 = (UInt32 **)&outUserData[24];
    else
      v125 = *(UInt32 ***)outUserData;
    v126 = *v125;
    v265 = v126;
    v127 = v264;
    v128 = (_QWORD *)(*(_QWORD *)outUserData + 8);
LABEL_252:
    if (v124)
      v128 = &outUserData[32];
    v266 = v127 != v126;
    *(_QWORD *)&v267 = *v128;
    v268 = (_QWORD)v267 != *((_QWORD *)&v267 + 1);
    goto LABEL_274;
  }
  if (!v119)
  {
LABEL_265:
    v122 = *(char **)outUserData;
    *(_QWORD *)&outUserData[8] = *(_QWORD *)outUserData;
    v121 = 1;
    v127 = v264;
    v123 = *(_BYTE **)outUserData;
    goto LABEL_274;
  }
  v129 = UserData;
  v130 = v119 - 1;
  if (!v130)
  {
LABEL_260:
    std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)outUserData, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&outUserData[8] - *(_QWORD *)outUserData) >> 3), (std::vector<std::csub_match>::const_reference)&outUserData[24]);
    LODWORD(UserData) = v129;
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)&outUserDataSize, (uint64_t)v120, v120, (uint64_t *)outUserData, 128, 0))
    {
      v121 = 0;
      v122 = *(char **)outUserData;
      v123 = *(_BYTE **)&outUserData[8];
      v124 = *(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData;
      if (*(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData)
        v133 = (UInt32 **)&outUserData[24];
      else
        v133 = *(UInt32 ***)outUserData;
      v126 = *v133;
      v265 = v126;
      v127 = v264;
      v128 = (_QWORD *)(*(_QWORD *)outUserData + 8);
      goto LABEL_252;
    }
    goto LABEL_265;
  }
  v131 = (uint64_t)v118 + 1;
  while (1)
  {
    std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)outUserData, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&outUserData[8] - *(_QWORD *)outUserData) >> 3), (std::vector<std::csub_match>::const_reference)&outUserData[24]);
    v132 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)&outUserDataSize, v131, v120, (uint64_t *)outUserData, 128, 0);
    v122 = *(char **)outUserData;
    v123 = *(_BYTE **)&outUserData[8];
    if (v132)
      break;
    std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)outUserData, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&outUserData[8] - *(_QWORD *)outUserData) >> 3), (std::vector<std::csub_match>::const_reference)&outUserData[24]);
    ++v131;
    if (!--v130)
      goto LABEL_260;
  }
  if (*(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData)
    v134 = (UInt32 **)&outUserData[24];
  else
    v134 = *(UInt32 ***)outUserData;
  v135 = *v134;
  v265 = v135;
  v127 = v264;
  v136 = (_QWORD *)(*(_QWORD *)outUserData + 8);
  if (*(_QWORD *)&outUserData[8] == *(_QWORD *)outUserData)
    v136 = &outUserData[32];
  v266 = v264 != v135;
  *(_QWORD *)&v267 = *v136;
  v268 = (_QWORD)v267 != *((_QWORD *)&v267 + 1);
  LODWORD(UserData) = v129;
  v121 = 0;
LABEL_274:
  if ((v251 & 0x80u) == 0)
    v137 = outDataSize;
  else
    v137 = *(UInt32 **)outDataSize;
  v138 = v123 - v122;
  v228 = UserData;
  if (v123 == v122)
  {
    v141 = 0;
    v142 = 0;
    v155 = 1;
    if (v122)
    {
LABEL_296:
      *(_QWORD *)&outUserData[8] = v122;
      operator delete(v122);
    }
  }
  else
  {
    v227 = v121;
    v139 = v138 / 24;
    if ((unint64_t)(v138 / 24) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v140 = (char *)operator new(v138);
    v141 = v140;
    v142 = &v140[24 * v139];
    v143 = 24 * v139;
    v144 = v140;
    do
    {
      *(_QWORD *)v144 = 0;
      *((_QWORD *)v144 + 1) = 0;
      v144[16] = 0;
      v144 += 24;
      v143 -= 24;
    }
    while (v143);
    v121 = v227;
    if (v142 != v140)
    {
      v145 = 0;
      v146 = 0;
      if ((unint64_t)((v142 - v140) / 24) <= 1)
        v147 = 1;
      else
        v147 = (v142 - v140) / 24;
      v148 = *(char **)outUserData;
      v149 = *(_BYTE **)&outUserData[8];
      v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&outUserData[8] - *(_QWORD *)outUserData) >> 3);
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 3) <= v146)
          v151 = &outUserData[24];
        else
          v151 = &v122[v145];
        v152 = &v141[v145];
        *(_QWORD *)&v141[v145] = (char *)v137 + *(_QWORD *)v151 - (_QWORD)v127;
        v153 = &v148[v145 + 8];
        if (v150 <= v146)
          v153 = &outUserData[32];
        *((_QWORD *)v152 + 1) = (char *)v137 + *(_QWORD *)v153 - (_QWORD)v127;
        v154 = &v148[v145 + 16];
        if (v150 <= v146)
          v154 = &outUserData[40];
        v152[16] = *v154;
        ++v146;
        v145 += 24;
        v122 = v148;
        v123 = v149;
      }
      while (v147 != v146);
      v122 = v148;
    }
    v155 = v142 == v141;
    if (v122)
      goto LABEL_296;
  }
  if (((v121 | v155) & 1) != 0)
    goto LABEL_298;
  v159 = 0;
  v160 = 0;
  v161 = -1;
  v233 = -1;
  v162 = v141;
  while (2)
  {
    if (v162[16])
    {
      v164 = *(char **)v162;
      v163 = (char *)*((_QWORD *)v162 + 1);
      v165 = (unint64_t)&v163[-*(_QWORD *)v162];
      if (v165 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v165 > 0x16)
      {
        v167 = (v165 & 0xFFFFFFFFFFFFFFF8) + 8;
        v168 = v165 | 7;
        if (v168 == 23)
          v168 = v167;
        v169 = v168 + 1;
        v166 = operator new(v168 + 1);
        *(_QWORD *)outUserData = v166;
        *(_QWORD *)&outUserData[16] = v169 | 0x8000000000000000;
      }
      else
      {
        outUserData[23] = (_BYTE)v163 - *v162;
        v166 = outUserData;
      }
      while (v164 != v163)
      {
        v170 = *v164++;
        *v166++ = v170;
      }
      *v166 = 0;
    }
    else
    {
      memset(outUserData, 0, 24);
    }
    switch(v159)
    {
      case 1:
        v171 = outUserData[23];
        v172 = *(_BYTE **)outUserData;
        if (outUserData[23] >= 0)
          v172 = outUserData;
        switch(*v172)
        {
          case 'A':
            v161 = 9;
            break;
          case 'B':
            v161 = 11;
            break;
          case 'C':
            v161 = 0;
            break;
          case 'D':
            v161 = 2;
            break;
          case 'E':
            v161 = 4;
            break;
          case 'F':
            v161 = 5;
            break;
          case 'G':
            v161 = 7;
            break;
          default:
            v161 = -1;
            break;
        }
        goto LABEL_343;
      case 2:
        v171 = outUserData[23];
        v177 = *(unsigned __int8 **)outUserData;
        if (outUserData[23] >= 0)
          v177 = outUserData;
        v178 = *v177;
        if (v178 == 35)
          goto LABEL_333;
        if (v178 != 98)
        {
          if (v178 != 83)
            goto LABEL_343;
LABEL_333:
          ++v161;
          goto LABEL_343;
        }
        --v161;
LABEL_343:
        if (v171 < 0)
          operator delete(*(void **)outUserData);
        ++v159;
        v162 += 24;
        if (v162 != v142)
          continue;
        if (v233 < 0 || v161 < 0)
        {
LABEL_298:
          *((_BYTE *)this + 72) = 60;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)outUserData = 136315650;
            *(_QWORD *)&outUserData[4] = "FileSample.cpp";
            *(_WORD *)&outUserData[12] = 1024;
            *(_DWORD *)&outUserData[14] = 288;
            *(_WORD *)&outUserData[18] = 1024;
            *(_DWORD *)&outUserData[20] = 60;
            v156 = MEMORY[0x24BDACB70];
            v157 = "%25s:%-5d GetUnityNoteFromFilename: unity note not found in name - defaulting to %d";
            v158 = 24;
            goto LABEL_350;
          }
          goto LABEL_351;
        }
        *((_BYTE *)this + 72) = v161 + 12 * v233;
        *((_BYTE *)this + 74) = v161 + 12 * v233;
        *((_BYTE *)this + 73) = v161 + 12 * v233;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)outUserData = 136316674;
          *(_QWORD *)&outUserData[4] = "FileSample.cpp";
          *(_WORD *)&outUserData[12] = 1024;
          *(_DWORD *)&outUserData[14] = 284;
          *(_WORD *)&outUserData[18] = 1024;
          *(_DWORD *)&outUserData[20] = v161;
          *(_WORD *)&outUserData[24] = 1024;
          *(_DWORD *)&outUserData[26] = v233;
          *(_WORD *)&outUserData[30] = 1024;
          *(_DWORD *)&outUserData[32] = (v161 + 12 * v233);
          *(_WORD *)&outUserData[36] = 1024;
          *(_DWORD *)&outUserData[38] = *(_DWORD *)&outUserData[32];
          v262 = 1024;
          v263 = *(_DWORD *)&outUserData[32];
          v156 = MEMORY[0x24BDACB70];
          v157 = "%25s:%-5d GetUnityNoteFromFilename: keynum = %d, octave %d => unity note %d (key range %d-%d)";
          v158 = 48;
LABEL_350:
          _os_log_impl(&dword_210A23000, v156, OS_LOG_TYPE_DEBUG, v157, outUserData, v158);
        }
LABEL_351:
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
        UserData = v228;
        if (*((_QWORD *)&v254 + 1))
        {
          v180 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        std::locale::~locale(&outUserDataSize.__loc_);
        if (v141)
          operator delete(v141);
        if ((char)v251 < 0)
          operator delete(*(void **)outDataSize);
LABEL_209:
        if (*((_QWORD *)this + 17))
        {
          result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          if (!result)
          {
            __break(1u);
            return result;
          }
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 144;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: stream cache should be nullptr at start of load", buf, 0x12u);
          __break(1u);
LABEL_443:
          v223 = *((_QWORD *)this + 17);
          if (v223)
            MEMORY[0x212BCDF2C](v223, 0x1000C8077774924);
          *((_QWORD *)this + 17) = 0;
          ExtAudioFileDispose(*((ExtAudioFileRef *)this + 25));
          *v236 = 0;
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)outUserData, 0xFFFFD589);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "FileSample.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 170;
            v257 = 2080;
            *(_QWORD *)v258 = outUserData;
            *(_WORD *)&v258[8] = 2080;
            *(_QWORD *)v259 = "File read returned zero frames";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v224 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v224, "File read returned zero frames", -10871);
        }
        *((_QWORD *)this + 14) = 0;
        v103 = *((_QWORD *)this + 23);
        v104 = 20000;
        if (v103 < 0x4E20)
          v104 = *((_QWORD *)this + 23);
        if (*((_BYTE *)this + 196))
          v105 = v104;
        else
          v105 = v103 + 1;
        if (*((_BYTE *)this + 196))
          v106 = v104;
        else
          v106 = *((_QWORD *)this + 23);
        *((_QWORD *)this + 16) = v105;
        v107 = *((_DWORD *)this + 42);
        if (v107)
        {
          if ((*((_BYTE *)this + 156) & 0x20) != 0)
          {
            v108 = 1;
          }
          else
          {
            v108 = *((_DWORD *)this + 43);
            if (!v108)
            {
              v107 = 0;
              goto LABEL_224;
            }
          }
          v107 /= v108;
        }
LABEL_224:
        v109 = v105 * *((_DWORD *)this + 43) * v107;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 160;
          v257 = 2048;
          *(_QWORD *)v258 = this;
          *(_WORD *)&v258[8] = 2048;
          *(_QWORD *)v259 = v105;
          *(_WORD *)&v259[8] = 2048;
          *(_QWORD *)&v259[10] = v109;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::LoadFromURL(this=%p):  Creating waveform cache for %llu frames, size %llu bytes", buf, 0x30u);
        }
        v110 = (void *)operator new[]();
        *((_QWORD *)this + 17) = v110;
        v111 = *((_QWORD *)this + 14);
        *((_QWORD *)this + 15) = v106 + v111 - 1;
        FileSample::ReadFromFile(this, v111, v106, v110);
        v113 = v112;
        if (v112 < v106 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "FileSample.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 164;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FileSample::LoadFromURL:  Incomplete read from sample file", buf, 0x12u);
        }
        if (!v113)
          goto LABEL_443;
        if (*((_BYTE *)this + 196))
        {
          v113 = *v235;
        }
        else
        {
          ExtAudioFileDispose(*v236);
          *v236 = 0;
          *v235 = v113;
        }
        if (*((_QWORD *)this + 16) > v113)
          *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v113) = *(_DWORD *)(*((_QWORD *)this + 17)
                                                                     + 4 * *((_QWORD *)this + 12));
        return UserData;
      case 3:
        v171 = outUserData[23];
        v173 = *(_BYTE **)outUserData;
        if (outUserData[23] >= 0)
          v173 = outUserData;
        v160 |= *v173 == 45;
        goto LABEL_343;
      case 4:
        v171 = outUserData[23];
        v174 = *(char **)outUserData;
        if (outUserData[23] >= 0)
          v174 = outUserData;
        v175 = *v174 - 47;
        if ((v160 & 1) != 0)
          v176 = -1;
        else
          v176 = 1;
        if (v175 == 1)
          v175 = v176;
        v233 = v175;
        goto LABEL_343;
      default:
        v171 = outUserData[23];
        goto LABEL_343;
    }
  }
}

void sub_210AB7214(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_210AB7220(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  char v15;
  unsigned int v16;
  _DWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  const char *v29;
  __int128 *v30;
  __int128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  __int128 v37;
  __int128 *v38;
  char *v39;
  _BYTE *v40;
  __int128 v41;
  _BYTE *v42;
  char *v43;
  _BYTE *v44;
  __int128 *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _BYTE *v53;
  __int128 v54;
  unint64_t v55;
  __int128 *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  void **v98;
  _BYTE *v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  char *i;
  char *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v120;
  void *v121;
  char *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  int v156;
  _BYTE *v157;
  char v158;
  const char *v159;
  void *v160[2];
  __int128 v161;
  int64x2_t v162;
  _BYTE v163[56];
  void *__p[2];
  _QWORD v165[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v159 = &a3[-a2];
  if (!*(_DWORD *)(a1 + 28))
  {
    v161 = 0u;
    v162 = 0u;
    *(_OWORD *)v160 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v163 = 0;
      memset(&v163[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v165, 0, 21);
      std::deque<std::__state<char>>::push_back(v160, (uint64_t)v163);
      if (__p[0])
        operator delete(__p[0]);
      v145 = a4;
      if (*(_QWORD *)&v163[32])
        operator delete(*(void **)&v163[32]);
      v75 = v160[1];
      v76 = v162.i64[1] + v162.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v160[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = a3;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v158 = 0;
      v81 = 0;
      v82 = v162.i64[1];
      v83 = v160[1];
      v84 = v162.i64[1] + v162.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v160[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v152 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v159)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v162.i64[0] - 1;
        v90 = *((_QWORD *)v160[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(_QWORD *)(v90 + 96 * v91 + 16);
            if ((v7 & 0x20) != 0 && v95 == v10)
              goto LABEL_192;
            v96 = v95 - *(_QWORD *)(v90 + 96 * v91 + 8);
            v97 = v152;
            if ((v158 & ((uint64_t)v152 >= v96)) == 0)
              v97 = (const char *)v96;
            if (v97 != v159)
            {
              v152 = v97;
              std::deque<std::__state<char>>::pop_back(v160);
              v158 = 1;
              goto LABEL_193;
            }
            v98 = (void **)v160[1];
            v99 = (_BYTE *)v161;
            if ((void *)v161 == v160[1])
            {
              v99 = v160[1];
            }
            else
            {
              v100 = (char *)v160[1] + 8 * (v162.i64[0] / 0x2AuLL);
              v101 = (_QWORD *)(*v100 + 96 * (v162.i64[0] % 0x2AuLL));
              v102 = *((_QWORD *)v160[1] + (v162.i64[1] + v162.i64[0]) / 0x2AuLL)
                   + 96 * ((v162.i64[1] + v162.i64[0]) % 0x2AuLL);
              if (v101 != (_QWORD *)v102)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v101);
                  v101 += 12;
                  if ((_QWORD *)((char *)v101 - *v100) == (_QWORD *)4032)
                  {
                    v103 = (_QWORD *)v100[1];
                    ++v100;
                    v101 = v103;
                  }
                }
                while (v101 != (_QWORD *)v102);
                v98 = (void **)v160[1];
                v99 = (_BYTE *)v161;
              }
            }
            v162.i64[1] = 0;
            v134 = v99 - (_BYTE *)v98;
            if (v134 >= 0x11)
            {
              do
              {
                operator delete(*v98);
                v98 = (void **)((char *)v160[1] + 8);
                v160[1] = v98;
                v134 = v161 - (_QWORD)v98;
              }
              while ((_QWORD)v161 - (_QWORD)v98 > 0x10uLL);
            }
            if (v134 >> 3 == 1)
            {
              v135 = 21;
            }
            else
            {
              if (v134 >> 3 != 2)
                goto LABEL_180;
              v135 = 42;
            }
            v162.i64[0] = v135;
LABEL_180:
            v158 = 1;
            v152 = v159;
LABEL_193:
            v82 = v162.i64[1];
            if (v162.i64[1])
              continue;
            if ((v158 & 1) == 0)
              goto LABEL_196;
            v143 = *v145;
            *(_QWORD *)v143 = v10;
            *(_QWORD *)(v143 + 8) = &v152[v10];
            v12 = 1;
            *(_BYTE *)(v143 + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_193;
          case 0xFFFFFC1D:
            v104 = v162.i64[0];
            v105 = (char *)v160[1];
            v106 = (char *)v161;
            if (!v162.i64[0])
            {
              v109 = (uint64_t)(v161 - (unint64_t)v160[1]) >> 3;
              v110 = 42 * v109 - 1;
              if ((void *)v161 == v160[1])
                v110 = 0;
              if ((unint64_t)(v110 - v162.i64[1]) < 0x2A)
              {
                if (v109 >= (uint64_t)(*((_QWORD *)&v161 + 1) - (unint64_t)v160[0]) >> 3)
                {
                  if (*((void **)&v161 + 1) == v160[0])
                    v111 = 1;
                  else
                    v111 = (uint64_t)(*((_QWORD *)&v161 + 1) - (unint64_t)v160[0]) >> 2;
                  *(_QWORD *)&v163[32] = (char *)&v161 + 8;
                  *(_QWORD *)v163 = std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v111);
                  *(_QWORD *)&v163[8] = *(_QWORD *)v163;
                  *(_QWORD *)&v163[16] = *(_QWORD *)v163;
                  *(_QWORD *)&v163[24] = *(_QWORD *)v163 + 8 * v112;
                  v156 = v7;
                  v154 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v163, &__x);
                  v113 = (uint64_t *)v160[1];
                  for (i = *(char **)&v163[16]; v113 != (uint64_t *)v161; *(_QWORD *)&v163[16] += 8)
                  {
                    if (i == *(char **)&v163[24])
                    {
                      v115 = *(char **)&v163[8];
                      v116 = *(void **)v163;
                      if (*(_QWORD *)&v163[8] <= *(_QWORD *)v163)
                      {
                        if (i == *(char **)v163)
                          v123 = 1;
                        else
                          v123 = (uint64_t)&i[-*(_QWORD *)v163] >> 2;
                        v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v123);
                        v127 = i - v115;
                        v126 = i == v115;
                        i = &v124[8 * (v123 >> 2)];
                        if (!v126)
                        {
                          i = &v124[8 * (v123 >> 2) + (v127 & 0xFFFFFFFFFFFFFFF8)];
                          v128 = 8 * (v127 >> 3);
                          v129 = &v124[8 * (v123 >> 2)];
                          do
                          {
                            v130 = *(_QWORD *)v115;
                            v115 += 8;
                            *(_QWORD *)v129 = v130;
                            v129 += 8;
                            v128 -= 8;
                          }
                          while (v128);
                        }
                        *(_QWORD *)v163 = v124;
                        *(_QWORD *)&v163[8] = &v124[8 * (v123 >> 2)];
                        *(_QWORD *)&v163[16] = i;
                        *(_QWORD *)&v163[24] = &v124[8 * v125];
                        if (v116)
                          operator delete(v116);
                      }
                      else
                      {
                        v117 = (uint64_t)(*(_QWORD *)&v163[8] - *(_QWORD *)v163) >> 3;
                        if (v117 >= -1)
                          v118 = v117 + 1;
                        else
                          v118 = v117 + 2;
                        v119 = *(_QWORD *)&v163[8] - 8 * (v118 >> 1);
                        v120 = (size_t)&i[-*(_QWORD *)&v163[8]];
                        if (i != *(char **)&v163[8])
                        {
                          v121 = (void *)(*(_QWORD *)&v163[8] - 8 * (v118 >> 1));
                          memmove(v121, *(const void **)&v163[8], v120);
                          v119 = (uint64_t)v121;
                          i = v115;
                        }
                        v122 = &i[-8 * (v118 >> 1)];
                        i = (char *)(v119 + v120);
                        *(_QWORD *)&v163[8] = v122;
                        *(_QWORD *)&v163[16] = v119 + v120;
                      }
                    }
                    v131 = *v113++;
                    *(_QWORD *)i = v131;
                    i = (char *)(*(_QWORD *)&v163[16] + 8);
                  }
                  v132 = v160[0];
                  *(_OWORD *)v160 = *(_OWORD *)v163;
                  *(_QWORD *)&v161 = i;
                  *((_QWORD *)&v161 + 1) = *(_QWORD *)&v163[24];
                  v133 = 21;
                  if (&i[-*(_QWORD *)&v163[8]] != (char *)8)
                    v133 = v162.i64[0] + 42;
                  v162.i64[0] = v133;
                  v10 = v154;
                  v7 = v156;
                  if (v132)
                    operator delete(v132);
                }
                else
                {
                  if (v160[1] == v160[0])
                  {
                    *(_QWORD *)v163 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v160, v163);
                    *(_QWORD *)v163 = *(_QWORD *)(v161 - 8);
                    *(_QWORD *)&v161 = v161 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v163 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v160, v163);
                  v136 = 21;
                  if ((_QWORD)v161 - (unint64_t)v160[1] != 8)
                    v136 = v162.i64[0] + 42;
                  v162.i64[0] = v136;
                }
              }
              else
              {
                v162.i64[0] = 42;
                *(_QWORD *)v163 = *(_QWORD *)(v161 - 8);
                *(_QWORD *)&v161 = v161 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v160, v163);
              }
              v104 = v162.i64[0];
              v105 = (char *)v160[1];
              v106 = (char *)v161;
            }
            v137 = &v105[8 * (v104 / 0x2A)];
            v138 = *(_QWORD *)v137 + 96 * (v104 % 0x2A);
            if (v106 == v105)
              v139 = 0;
            else
              v139 = v138;
            if (v139 == *(_QWORD *)v137)
              v139 = *((_QWORD *)v137 - 1) + 4032;
            v140 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v139 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v139 - 80) = v140;
            v141 = v90 + 96 * v91;
            *(_QWORD *)(v139 - 56) = 0;
            *(_QWORD *)(v139 - 48) = 0;
            *(_QWORD *)(v139 - 64) = 0;
            *(_OWORD *)(v139 - 64) = *(_OWORD *)(v141 + 32);
            *(_QWORD *)(v139 - 48) = *(_QWORD *)(v141 + 48);
            *(_QWORD *)(v141 + 32) = 0;
            *(_QWORD *)(v141 + 40) = 0;
            *(_QWORD *)(v141 + 48) = 0;
            *(_QWORD *)(v139 - 40) = 0;
            *(_QWORD *)(v139 - 32) = 0;
            *(_QWORD *)(v139 - 24) = 0;
            *(_OWORD *)(v139 - 40) = *(_OWORD *)(v141 + 56);
            *(_QWORD *)(v139 - 24) = *(_QWORD *)(v141 + 72);
            *(_QWORD *)(v141 + 56) = 0;
            *(_QWORD *)(v141 + 64) = 0;
            *(_QWORD *)(v141 + 72) = 0;
            v142 = *v94;
            *(_QWORD *)(v139 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v139 - 16) = v142;
            v162 = vaddq_s64(v162, (int64x2_t)xmmword_210B0A160);
            goto LABEL_192;
          case 0xFFFFFC1F:
LABEL_192:
            std::deque<std::__state<char>>::pop_back(v160);
            goto LABEL_193;
          case 0xFFFFFC20:
            v107 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v163 = *(_OWORD *)v92;
            *(_OWORD *)&v163[16] = v107;
            memset(&v163[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v163[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v165[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v108 = *v94;
            *(_QWORD *)((char *)&v165[1] + 5) = *(_QWORD *)(v92 + 85);
            v165[1] = v108;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v165[1] + 24))(v165[1], 0, v163);
            std::deque<std::__state<char>>::push_back(v160, (uint64_t)v163);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v163[32])
            {
              *(_QWORD *)&v163[40] = *(_QWORD *)&v163[32];
              operator delete(*(void **)&v163[32]);
            }
            goto LABEL_193;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    else
    {
LABEL_196:
      v12 = 0;
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v160);
    return v12;
  }
  v160[0] = 0;
  v160[1] = 0;
  *(_QWORD *)&v161 = 0;
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
    goto LABEL_203;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v163 = 0;
  memset(&v163[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v165, 0, 21);
  v160[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v160, (uint64_t)v163);
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v163[32])
    operator delete(*(void **)&v163[32]);
  v144 = a4;
  v13 = v160[1];
  *((_DWORD *)v160[1] - 24) = 0;
  *(v13 - 11) = v10;
  *(v13 - 10) = v10;
  v153 = v10;
  *(v13 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v160[1] - 40), *(unsigned int *)(a1 + 32));
  v157 = 0;
  v149 = 0;
  v150 = 0;
  v147 = 0;
  v148 = 0;
  v151 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v160[1];
  *((_QWORD *)v160[1] - 2) = v12;
  v155 = v7;
  *(v17 - 2) = v7;
  *((_BYTE *)v17 - 4) = a6;
  while (2)
  {
    v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v159;
    if (!v18)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v20 = v17 - 4;
    v19 = *((_QWORD *)v17 - 2);
    v21 = v17 - 24;
    if (v19)
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v19 + 16))(v19, v17 - 24);
    switch(*(_DWORD *)v21)
    {
      case 0xFFFFFC18:
        v22 = *((_QWORD *)v17 - 10);
        if ((v155 & 0x20) != 0 && v22 == v153)
          goto LABEL_19;
        v29 = (const char *)(v22 - *((_QWORD *)v17 - 11));
        if ((v15 & ((uint64_t)v14 >= (uint64_t)v29)) != 0)
          goto LABEL_93;
        v30 = (__int128 *)*((_QWORD *)v17 - 8);
        v31 = (__int128 *)*((_QWORD *)v17 - 7);
        v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v149 - (uint64_t)v151) >> 3) >= v32)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((v157 - v151) >> 3) >= v32)
          {
            if (v30 == v31)
            {
              v44 = v151;
              v43 = v151;
            }
            else
            {
              v43 = v151;
              do
              {
                *(_OWORD *)v43 = *v30;
                v43[16] = *((_BYTE *)v30 + 16);
                v43 += 24;
                v30 = (__int128 *)((char *)v30 + 24);
              }
              while (v30 != v31);
              v44 = v151;
            }
            v146 = v43 - v44;
            v157 = v44;
          }
          else
          {
            v38 = (__int128 *)((char *)v30 + 8 * ((v157 - v151) >> 3));
            if (v157 != v151)
            {
              v39 = v151;
              do
              {
                *(_OWORD *)v39 = *v30;
                v39[16] = *((_BYTE *)v30 + 16);
                v30 = (__int128 *)((char *)v30 + 24);
                v39 += 24;
              }
              while (v30 != v38);
            }
            if (v38 == v31)
            {
              v42 = v157;
              v40 = v157;
            }
            else
            {
              v40 = v157;
              do
              {
                v41 = *v38;
                *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
                *(_OWORD *)v40 = v41;
                v40 += 24;
                v38 = (__int128 *)((char *)v38 + 24);
              }
              while (v38 != v31);
              v42 = v157;
            }
            v146 = v40 - v42;
          }
        }
        else
        {
          if (v151)
          {
            operator delete(v151);
            v149 = 0;
          }
          if (v32 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_208;
          v33 = 0x5555555555555556 * (v149 >> 3);
          if (v33 <= v32)
            v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3);
          v34 = 0xAAAAAAAAAAAAAAABLL * (v149 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v33;
          if (v34 > 0xAAAAAAAAAAAAAAALL)
LABEL_208:
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          v157 = std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v34);
          if (v30 == v31)
          {
            v36 = v157;
          }
          else
          {
            v36 = v157;
            do
            {
              v37 = *v30;
              *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
              *(_OWORD *)v36 = v37;
              v36 += 24;
              v30 = (__int128 *)((char *)v30 + 24);
            }
            while (v30 != v31);
          }
          v149 = (uint64_t)&v157[24 * v35];
          v146 = v36 - v157;
          v151 = v157;
        }
        v45 = (__int128 *)*((_QWORD *)v17 - 5);
        v46 = (char *)*((_QWORD *)v17 - 4);
        v47 = (v46 - (char *)v45) >> 4;
        if (v47 > (v148 - (uint64_t)v150) >> 4)
        {
          if (v150)
          {
            operator delete(v150);
            v148 = 0;
          }
          if (v46 - (char *)v45 < 0)
            goto LABEL_207;
          v48 = v148 >> 3;
          if (v148 >> 3 <= v47)
            v48 = (v46 - (char *)v45) >> 4;
          v49 = (unint64_t)v148 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v48;
          if (v49 >> 60)
LABEL_207:
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v49);
          v52 = v50;
          if (v45 == (__int128 *)v46)
          {
            v53 = v157;
          }
          else
          {
            v53 = v157;
            do
            {
              v54 = *v45++;
              *(_OWORD *)v52 = v54;
              v52 += 16;
            }
            while (v45 != (__int128 *)v46);
          }
          v148 = (uint64_t)&v50[16 * v51];
          v63 = (char *)(v52 - v50);
          v150 = v50;
          goto LABEL_91;
        }
        v55 = (v147 - v150) >> 4;
        if (v55 >= v47)
        {
          v53 = v157;
          if (v45 == (__int128 *)v46)
          {
            v62 = v150;
            v61 = v150;
          }
          else
          {
            v61 = v150;
            do
            {
              *(_QWORD *)v61 = *(_QWORD *)v45;
              *((_QWORD *)v61 + 1) = *((_QWORD *)v45 + 1);
              v61 += 16;
              ++v45;
            }
            while (v45 != (__int128 *)v46);
            v62 = v150;
          }
          v63 = (char *)(v61 - v62);
          v50 = v62;
LABEL_91:
          v58 = v146;
          goto LABEL_92;
        }
        v56 = &v45[v55];
        v53 = v157;
        if (v147 != v150)
        {
          v57 = v150;
          do
          {
            *(_QWORD *)v57 = *(_QWORD *)v45;
            *((_QWORD *)v57 + 1) = *((_QWORD *)v45++ + 1);
            v57 += 16;
          }
          while (v45 != v56);
        }
        if (v56 == (__int128 *)v46)
        {
          v58 = v146;
          v50 = v147;
          v59 = v147;
        }
        else
        {
          v58 = v146;
          v50 = v147;
          v59 = v147;
          do
          {
            v60 = *v56++;
            *(_OWORD *)v59 = v60;
            v59 += 16;
          }
          while (v56 != (__int128 *)v46);
        }
        v63 = (char *)(v59 - v50);
LABEL_92:
        v157 = &v53[v58];
        v147 = &v63[(_QWORD)v50];
        v14 = v29;
LABEL_93:
        v64 = v160[1];
        if (v14 == v159)
        {
          v65 = v160[0];
          while (v64 != v65)
          {
            v64 -= 12;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v64);
          }
          v160[1] = v65;
          v15 = 1;
          v14 = v159;
        }
        else
        {
          v66 = (char *)v160[1] - 96;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v160[1] - 12);
          v160[1] = v66;
          v15 = 1;
        }
LABEL_99:
        v17 = v160[1];
        if (v160[0] != v160[1])
          continue;
        if ((v15 & 1) != 0)
        {
          v67 = *v144;
          v68 = v151;
          *(_QWORD *)v67 = v153;
          *(_QWORD *)(v67 + 8) = &v14[v153];
          *(_BYTE *)(v67 + 16) = 1;
          if (v157 != v151)
          {
            v69 = v151 + 16;
            v70 = 1;
            do
            {
              v71 = v67 + 24 * v70;
              *(_OWORD *)v71 = *((_OWORD *)v69 - 1);
              v72 = *v69;
              v69 += 24;
              *(_BYTE *)(v71 + 16) = v72;
              v18 = 0xAAAAAAAAAAAAAAABLL * ((v157 - v151) >> 3) > v70++;
            }
            while (v18);
          }
          v12 = 1;
        }
        else
        {
          v12 = 0;
          v68 = v151;
        }
        if (v150)
          operator delete(v150);
        if (v68)
          operator delete(v68);
LABEL_203:
        *(_QWORD *)v163 = v160;
        std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
        return v12;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_99;
      case 0xFFFFFC1F:
LABEL_19:
        v23 = (char *)v160[1] - 96;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v160[1] - 12);
        v160[1] = v23;
        goto LABEL_99;
      case 0xFFFFFC20:
        v24 = *((_OWORD *)v17 - 5);
        *(_OWORD *)v163 = *v21;
        *(_OWORD *)&v163[16] = v24;
        memset(&v163[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v163[32], *((__int128 **)v17 - 8), *((__int128 **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v17 - 7) - *((_QWORD *)v17 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v165[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v17 - 5), *((__int128 **)v17 - 4), (uint64_t)(*((_QWORD *)v17 - 4) - *((_QWORD *)v17 - 5)) >> 4);
        v25 = *v20;
        *(_QWORD *)((char *)&v165[1] + 5) = *(_QWORD *)((char *)v17 - 11);
        v165[1] = v25;
        (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v20 + 24))(*v20, 1, v17 - 24);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v165[1] + 24))(v165[1], 0, v163);
        v26 = (char *)v160[1];
        if (v160[1] >= (void *)v161)
        {
          v160[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v160, (uint64_t)v163);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v27 = *(_OWORD *)&v163[16];
          *(_OWORD *)v160[1] = *(_OWORD *)v163;
          *((_OWORD *)v26 + 1) = v27;
          *((_QWORD *)v26 + 4) = 0;
          *((_QWORD *)v26 + 5) = 0;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 7) = 0;
          *((_OWORD *)v26 + 2) = *(_OWORD *)&v163[32];
          *((_QWORD *)v26 + 6) = *(_QWORD *)&v163[48];
          memset(&v163[32], 0, 24);
          *((_QWORD *)v26 + 8) = 0;
          *((_QWORD *)v26 + 9) = 0;
          *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v26 + 9) = v165[0];
          __p[0] = 0;
          __p[1] = 0;
          v165[0] = 0;
          v28 = v165[1];
          *(_QWORD *)(v26 + 85) = *(_QWORD *)((char *)&v165[1] + 5);
          *((_QWORD *)v26 + 10) = v28;
          v160[1] = v26 + 96;
        }
        if (*(_QWORD *)&v163[32])
        {
          *(_QWORD *)&v163[40] = *(_QWORD *)&v163[32];
          operator delete(*(void **)&v163[32]);
        }
        goto LABEL_99;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_210AB81AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  _BYTE v38[56];
  void *__p[2];
  _QWORD v40[4];
  std::vector<std::csub_match>::value_type __x;
  char *v42;
  char *v43;
  unint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v38 = 0;
    memset(&v38[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v40, 0, 21);
    v43 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v38[32])
      operator delete(*(void **)&v38[32]);
    v36 = a4;
    v12 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v43 - 40), *(unsigned int *)(a1 + 32));
    v13 = v43;
    *((_QWORD *)v43 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) != 0 || (int)(v14 >> 12) < (int)a3 - (int)a2)
      {
        v16 = v13 - 16;
        v15 = *((_QWORD *)v13 - 2);
        v17 = v13 - 96;
        if (v15)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 16))(v15, v13 - 96);
        switch(*(_DWORD *)v17)
        {
          case 0xFFFFFC18:
            v18 = *((_QWORD *)v13 - 10);
            if ((a5 & 0x20) != 0 && v18 == a2)
              goto LABEL_14;
            v27 = *v36;
            *(_QWORD *)v27 = a2;
            *(_QWORD *)(v27 + 8) = v18;
            *(_BYTE *)(v27 + 16) = 1;
            v28 = *((_QWORD *)v13 - 8);
            v29 = *((_QWORD *)v13 - 7) - v28;
            if (v29)
            {
              v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
              v31 = (_BYTE *)(v28 + 16);
              v32 = 1;
              do
              {
                v33 = v27 + 24 * v32;
                *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
                v34 = *v31;
                v31 += 24;
                *(_BYTE *)(v33 + 16) = v34;
              }
              while (v30 > v32++);
            }
            v25 = 1;
            goto LABEL_23;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_21;
          case 0xFFFFFC1F:
LABEL_14:
            v19 = v43 - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v43 - 12);
            v43 = v19;
            goto LABEL_21;
          case 0xFFFFFC20:
            v20 = *((_OWORD *)v13 - 5);
            *(_OWORD *)v38 = *(_OWORD *)v17;
            *(_OWORD *)&v38[16] = v20;
            memset(&v38[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v38[32], *((__int128 **)v13 - 8), *((__int128 **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 - 7) - *((_QWORD *)v13 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v40[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v13 - 5), *((__int128 **)v13 - 4), (uint64_t)(*((_QWORD *)v13 - 4) - *((_QWORD *)v13 - 5)) >> 4);
            v21 = *(_QWORD *)v16;
            *(_QWORD *)((char *)&v40[1] + 5) = *(_QWORD *)(v13 - 11);
            v40[1] = v21;
            (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v16 + 24))(*(_QWORD *)v16, 1, v13 - 96);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v40[1] + 24))(v40[1], 0, v38);
            v22 = v43;
            if ((unint64_t)v43 >= v44)
            {
              v43 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v42, (uint64_t)v38);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v23 = *(_OWORD *)&v38[16];
              *(_OWORD *)v43 = *(_OWORD *)v38;
              *((_OWORD *)v22 + 1) = v23;
              *((_QWORD *)v22 + 4) = 0;
              *((_QWORD *)v22 + 5) = 0;
              *((_QWORD *)v22 + 6) = 0;
              *((_QWORD *)v22 + 7) = 0;
              *((_OWORD *)v22 + 2) = *(_OWORD *)&v38[32];
              *((_QWORD *)v22 + 6) = *(_QWORD *)&v38[48];
              memset(&v38[32], 0, 24);
              *((_QWORD *)v22 + 8) = 0;
              *((_QWORD *)v22 + 9) = 0;
              *(_OWORD *)(v22 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v22 + 9) = v40[0];
              __p[0] = 0;
              __p[1] = 0;
              v40[0] = 0;
              v24 = v40[1];
              *(_QWORD *)(v22 + 85) = *(_QWORD *)((char *)&v40[1] + 5);
              *((_QWORD *)v22 + 10) = v24;
              v43 = v22 + 96;
            }
            if (*(_QWORD *)&v38[32])
            {
              *(_QWORD *)&v38[40] = *(_QWORD *)&v38[32];
              operator delete(*(void **)&v38[32]);
            }
LABEL_21:
            v13 = v43;
            ++v14;
            if (v42 == v43)
              goto LABEL_22;
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_22:
  v25 = 0;
LABEL_23:
  *(_QWORD *)v38 = &v42;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  return v25;
}

void sub_210AB8804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 12);
}

void sub_210AB8CC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_210AB8DB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_210AB8E28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 16);
}

void sub_210AB8E7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_210AB93A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x212BCDED8]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

void sub_210AB9870(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__owns_one_state<char> *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  std::__owns_one_state<char> *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  std::__owns_one_state<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24CA95478;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24CA95AE8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v14 > 0x3F)
  {
    switch(v14)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v18 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v18)
          v19 = v18;
        else
          v19 = (unsigned __int8 *)a3;
        if (v19 == (unsigned __int8 *)a2)
        {
          v29 = (_QWORD *)operator new();
          v30 = *(_QWORD *)(a1 + 56);
          v31 = *(_QWORD *)(v30 + 8);
          v29[1] = v31;
          *(_QWORD *)(v30 + 8) = v29;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v19);
        }
        if (v19 != (unsigned __int8 *)a3)
          ++v19;
        while (v19 != (unsigned __int8 *)a3)
        {
          v32 = (unsigned __int8 *)memchr(v19, 10, a3 - (char *)v19);
          if (v32)
            v33 = v32;
          else
            v33 = (unsigned __int8 *)a3;
          v34 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v33 == v19)
          {
            v35 = (_QWORD *)operator new();
            v36 = *(_QWORD *)(a1 + 56);
            v37 = *(_QWORD *)(v36 + 8);
            v35[1] = v37;
            *(_QWORD *)(v36 + 8) = v35;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v19, v33);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v34);
          if (v33 == (unsigned __int8 *)a3)
            v19 = v33;
          else
            v19 = v33 + 1;
        }
        break;
      case 0x100u:
        v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15)
          v16 = v15;
        else
          v16 = a3;
        if (v16 == a2)
        {
          v20 = (_QWORD *)operator new();
          v21 = *(_QWORD *)(a1 + 56);
          v22 = *(_QWORD *)(v21 + 8);
          v20[1] = v22;
          *(_QWORD *)(v21 + 8) = v20;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v16);
        }
        if (v16 != a3)
          ++v16;
        while (v16 != a3)
        {
          v23 = (char *)memchr(v16, 10, a3 - v16);
          if (v23)
            v24 = v23;
          else
            v24 = a3;
          v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v24 == v16)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 56);
            v28 = *(_QWORD *)(v27 + 8);
            v26[1] = v28;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v16, v24);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v13, v25);
          if (v24 == a3)
            v16 = v24;
          else
            v16 = v24 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return a3;
  }
  else if (v14)
  {
    if (v14 != 16)
    {
      if (v14 != 32)
LABEL_54:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_210AB9C38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 17);
}

void sub_210AB9CA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_24CA95710;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_24CA95770;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 14);
}

void sub_210ABA010(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_24CA95448;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_24CA95B20;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x212BCDF50);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x212BCDF50);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x212BCDF50);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 15);
}

void sub_210ABA420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *first;
  int v20;
  uint64_t v21;
  BOOL v22;
  std::__owns_one_state<char> *v23;
  std::__node<char> *v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (this->__open_count_)
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (std::__node<char> *)operator new();
      v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_24CA954D8;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_24CA95770;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      v26 = this->__marked_count_;
      ++this->__open_count_;
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v10, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_24CA95710;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      v23->__first_ = (std::__node<char> *)v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_24CA95BB0;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 6);
}

void sub_210ABA804(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_24CA95B80;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_24CA95BE0;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_24CA95628;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_210ABAC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 8);
}

void sub_210ABAD84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 7);
}

void sub_210ABADD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA955F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x212BCDF50);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  char *j;
  char *v15;
  unint64_t i;
  int v17;
  char *v18;
  char *v19;
  int v20;
  std::__split_buffer<std::string>::pointer end_high;
  void *first;
  const char *v23;
  std::regex_traits<char>::char_class_type classname;
  char v25;
  unint64_t v26;
  char *v27;
  void **v28;
  std::__split_buffer<std::string>::pointer begin;
  void *v30;
  std::string::size_type v31;
  std::string::size_type *v32;
  int v33;
  void **v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  std::string::size_type v38;
  int v39;
  std::string::size_type v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  std::string *v51;
  char *v52;
  std::__split_buffer<std::string>::pointer v53;
  std::__split_buffer<std::string>::pointer v54;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  int64x2_t v59;
  std::string *v60;
  char *k;
  void **v62;
  char v63;
  void **v64;
  char *m;
  void **v66;
  char v67;
  void **v68;
  void *v69;
  void *v70;
  void **v71;
  char v72;
  void **v73;
  void **v74;
  char v75;
  void **v76;
  std::__split_buffer<std::string>::pointer v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char **v85;
  uint64_t v86;
  char *v87;
  void *v88[2];
  int64_t v89;
  void *v90[2];
  std::string *v91;
  void *v92[2];
  uint64_t v93;
  void *__p[2];
  std::string *v95;
  std::string::size_type __sz[2];
  int64_t v97;
  __int128 v98;
  std::string *v99;
  std::__split_buffer<std::string> v100;
  int64_t v101;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_254;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_254;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_254;
    v85 = (char **)(v7 + 88);
    v86 = v7 + 16;
    v87 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      v9 = a3;
      if ((char *)v5 == a3)
        goto LABEL_157;
      v10 = *(unsigned __int8 *)v5;
      v9 = (char *)v5;
      if (v10 == 93)
        goto LABEL_157;
      v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v95 = 0;
      v12 = 0;
      v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            v12 = (void *)HIBYTE(v95);
            v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_253;
            for (i = 0; ; ++i)
            {
              v15 = (char *)(v5 + i + 2);
              if (*v15 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v87[-v5] == (char *)i)
                goto LABEL_253;
            }
            if (v15 == a3)
LABEL_253:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v20 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v100, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v100.__end_);
            if (SHIBYTE(v100.__end_) >= 0)
              first = &v100;
            else
              first = v100.__first_;
            if (SHIBYTE(v100.__end_) < 0)
              end_high = v100.__begin_;
            (*(void (**)(_QWORD, void *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), first, (char *)end_high + (_QWORD)first);
            if (SHIBYTE(v100.__end_) >= 0)
              v23 = (const char *)&v100;
            else
              v23 = (const char *)v100.__first_;
            classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v100.__end_) < 0)
              operator delete(v100.__first_);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_153;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_253;
            for (j = 0; ; ++j)
            {
              v15 = &j[v5 + 2];
              if (*v15 == 61 && j[v5 + 3] == 93)
                break;
              if (&v87[-v5] == j)
                goto LABEL_253;
            }
            if (v15 == a3)
              goto LABEL_253;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v98, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(v99) < 0)
            {
              v26 = *((_QWORD *)&v98 + 1);
              if (!*((_QWORD *)&v98 + 1))
LABEL_255:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v27 = (char *)v98;
            }
            else
            {
              v26 = HIBYTE(v99);
              if (!HIBYTE(v99))
                goto LABEL_255;
              v27 = (char *)&v98;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v100, v27, &v27[v26], v26);
            begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v100.__end_);
            if (SHIBYTE(v100.__end_) >= 0)
              v30 = &v100;
            else
              v30 = v100.__first_;
            if (SHIBYTE(v100.__end_) < 0)
              begin = v100.__begin_;
            (*(void (**)(std::string::size_type *__return_ptr, _QWORD, void *, char *))(**(_QWORD **)(a1 + 16)
                                                                                                 + 32))(__sz, *(_QWORD *)(a1 + 16), v30, (char *)begin + (_QWORD)v30);
            v31 = HIBYTE(v97);
            if (v97 < 0)
              v31 = __sz[1];
            if (v31 != 1)
            {
              if (v31 == 12)
              {
                v32 = __sz;
                if (v97 < 0)
                  v32 = (std::string::size_type *)__sz[0];
                *((_BYTE *)v32 + 11) = *((_BYTE *)v32 + 3);
              }
              else if (SHIBYTE(v97) < 0)
              {
                *(_BYTE *)__sz[0] = 0;
                __sz[1] = 0;
              }
              else
              {
                LOBYTE(__sz[0]) = 0;
                HIBYTE(v97) = 0;
              }
            }
            if (SHIBYTE(v100.__end_) < 0)
              operator delete(v100.__first_);
            v38 = HIBYTE(v97);
            v39 = SHIBYTE(v97);
            v40 = __sz[1];
            if (v97 < 0)
              v38 = __sz[1];
            if (v38)
            {
              v42 = *(_QWORD *)(v7 + 144);
              v41 = *(_QWORD *)(v7 + 152);
              if (v42 >= v41)
              {
                v46 = *(_QWORD *)(v7 + 136);
                v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v46) >> 3);
                v48 = v47 + 1;
                if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<void const*>::__throw_length_error[abi:ne180100]();
                v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v46) >> 3);
                if (2 * v49 > v48)
                  v48 = 2 * v49;
                if (v49 >= 0x555555555555555)
                  v50 = 0xAAAAAAAAAAAAAAALL;
                else
                  v50 = v48;
                v100.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
                if (v50)
                {
                  if (v50 > 0xAAAAAAAAAAAAAAALL)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v51 = (std::string *)operator new(24 * v50);
                }
                else
                {
                  v51 = 0;
                }
                v54 = v51 + v47;
                v100.__first_ = v51;
                v100.__begin_ = v54;
                v100.__end_ = v54;
                v100.__end_cap_.__value_ = &v51[v50];
                if (v39 < 0)
                {
                  std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)__sz[0], v40);
                  v54 = v100.__begin_;
                  end = v100.__end_;
                }
                else
                {
                  *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                  v54->__r_.__value_.__r.__words[2] = v97;
                  end = v51 + v47;
                }
                v53 = end + 1;
                v100.__end_ = end + 1;
                v57 = *(_QWORD *)(v7 + 136);
                v56 = *(_QWORD *)(v7 + 144);
                if (v56 == v57)
                {
                  v59 = vdupq_n_s64(v56);
                }
                else
                {
                  do
                  {
                    v58 = *(_OWORD *)(v56 - 24);
                    v54[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v56 - 8);
                    *(_OWORD *)&v54[-1].__r_.__value_.__l.__data_ = v58;
                    --v54;
                    *(_QWORD *)(v56 - 16) = 0;
                    *(_QWORD *)(v56 - 8) = 0;
                    *(_QWORD *)(v56 - 24) = 0;
                    v56 -= 24;
                  }
                  while (v56 != v57);
                  v59 = *(int64x2_t *)(v7 + 136);
                  v53 = v100.__end_;
                }
                *(_QWORD *)(v7 + 136) = v54;
                *(_QWORD *)(v7 + 144) = v53;
                *(int64x2_t *)&v100.__begin_ = v59;
                v60 = *(std::string **)(v7 + 152);
                *(_QWORD *)(v7 + 152) = v100.__end_cap_.__value_;
                v100.__end_cap_.__value_ = v60;
                v100.__first_ = (std::__split_buffer<std::string>::pointer)v59.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v100);
              }
              else
              {
                if (SHIBYTE(v97) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), (const std::string::value_type *)__sz[0], __sz[1]);
                }
                else
                {
                  v43 = *(_OWORD *)__sz;
                  *(_QWORD *)(v42 + 16) = v97;
                  *(_OWORD *)v42 = v43;
                }
                v53 = (std::__split_buffer<std::string>::pointer)(v42 + 24);
                *(_QWORD *)(v7 + 144) = v42 + 24;
              }
              *(_QWORD *)(v7 + 144) = v53;
            }
            else
            {
              v44 = HIBYTE(v99);
              if (SHIBYTE(v99) < 0)
                v44 = *((_QWORD *)&v98 + 1);
              if (v44 == 2)
              {
                v52 = (char *)&v98;
                if (SHIBYTE(v99) < 0)
                  v52 = (char *)v98;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *v52, v52[1]);
              }
              else
              {
                if (v44 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                v45 = (char *)&v98;
                if (SHIBYTE(v99) < 0)
                  v45 = (char *)v98;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *v45);
              }
            }
            if (SHIBYTE(v97) < 0)
              operator delete((void *)__sz[0]);
            if (SHIBYTE(v99) < 0)
              operator delete((void *)v98);
            v25 = 0;
LABEL_153:
            v5 = (uint64_t)(v15 + 2);
            v36 = v8;
            goto LABEL_154;
          default:
            v11 = 0;
            v12 = 0;
            v9 = (char *)v5;
            break;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0)
        v11 = v12;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          v17 = *v9;
          if (v17 == 92)
          {
            v18 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
              v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v18, a3, (uint64_t *)__p);
            else
              v19 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v18, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            v9 = v19;
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v17) = *v9;
        }
        if ((char)v12 < 0)
        {
          v28 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v95) = 1;
          v28 = __p;
        }
        *(_BYTE *)v28 = v17;
        *((_BYTE *)v28 + 1) = 0;
        ++v9;
      }
LABEL_81:
      if (v9 != a3)
      {
        v33 = *v9;
        if (v33 != 93)
        {
          v35 = v9 + 1;
          if (v9 + 1 != a3 && v33 == 45 && *v35 != 93)
          {
            v92[0] = 0;
            v92[1] = 0;
            v93 = 0;
            v36 = v9 + 2;
            if (v9 + 2 != a3 && *v35 == 91 && *v36 == 46)
            {
              v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v92);
              goto LABEL_161;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v35) = *v35;
              if ((_DWORD)v35 == 92)
              {
                if ((_DWORD)v5)
                  v37 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v92);
                else
                  v37 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v92, v7);
LABEL_161:
                v36 = v37;
LABEL_162:
                *(_OWORD *)v90 = *(_OWORD *)__p;
                v91 = v95;
                __p[1] = 0;
                v95 = 0;
                *(_OWORD *)v88 = *(_OWORD *)v92;
                v89 = v93;
                v92[0] = 0;
                v92[1] = 0;
                v93 = 0;
                __p[0] = 0;
                if (*(_BYTE *)(v7 + 170))
                {
                  if (*(_BYTE *)(v7 + 169))
                  {
                    for (k = 0; ; ++k)
                    {
                      if (SHIBYTE(v91) < 0)
                      {
                        if (k >= v90[1])
                        {
LABEL_174:
                          for (m = 0; ; ++m)
                          {
                            if (SHIBYTE(v89) < 0)
                            {
                              if (m >= v88[1])
                                goto LABEL_220;
                              v66 = (void **)v88[0];
                            }
                            else
                            {
                              if ((unint64_t)m >= HIBYTE(v89))
                                goto LABEL_220;
                              v66 = v88;
                            }
                            v67 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), m[(_QWORD)v66]);
                            if (v89 >= 0)
                              v68 = v88;
                            else
                              v68 = (void **)v88[0];
                            m[(_QWORD)v68] = v67;
                          }
                        }
                        v62 = (void **)v90[0];
                      }
                      else
                      {
                        if ((unint64_t)k >= HIBYTE(v91))
                          goto LABEL_174;
                        v62 = v90;
                      }
                      v63 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), k[(_QWORD)v62]);
                      if (SHIBYTE(v91) >= 0)
                        v64 = v90;
                      else
                        v64 = (void **)v90[0];
                      k[(_QWORD)v64] = v63;
                    }
                  }
                  v78 = 0;
                  if ((HIBYTE(v91) & 0x80) != 0)
                    goto LABEL_211;
                  while ((unint64_t)v78 < HIBYTE(v91))
                  {
                    while (1)
                    {
                      ++v78;
                      if ((HIBYTE(v91) & 0x80) == 0)
                        break;
LABEL_211:
                      if (v78 >= v90[1])
                        goto LABEL_214;
                    }
                  }
LABEL_214:
                  v79 = 0;
                  if (v89 < 0)
                    goto LABEL_217;
                  while ((unint64_t)v79 < HIBYTE(v89))
                  {
                    while (1)
                    {
                      ++v79;
                      if ((v89 & 0x8000000000000000) == 0)
                        break;
LABEL_217:
                      if (v79 >= v88[1])
                        goto LABEL_220;
                    }
                  }
LABEL_220:
                  v80 = (char *)HIBYTE(v91);
                  if (SHIBYTE(v91) >= 0)
                    v81 = (char *)v90;
                  else
                    v81 = (char *)v90[0];
                  if (SHIBYTE(v91) < 0)
                    v80 = (char *)v90[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v98, v86, v81, &v80[(_QWORD)v81]);
                  v82 = (char *)HIBYTE(v89);
                  if (v89 >= 0)
                    v83 = (char *)v88;
                  else
                    v83 = (char *)v88[0];
                  if (v89 < 0)
                    v82 = (char *)v88[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__sz, v86, v83, &v82[(_QWORD)v83]);
                  *(_OWORD *)&v100.__first_ = v98;
                  v100.__end_ = v99;
                  v99 = 0;
                  v98 = 0uLL;
                  v100.__end_cap_ = *(std::__compressed_pair<std::string *> *)__sz;
                  v101 = v97;
                  __sz[0] = 0;
                  __sz[1] = 0;
                  v97 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v85, (__int128 *)&v100);
                  if (SHIBYTE(v101) < 0)
                    operator delete(v100.__end_cap_.__value_);
                  if (SHIBYTE(v100.__end_) < 0)
                    operator delete(v100.__first_);
                  if (SHIBYTE(v97) < 0)
                    operator delete((void *)__sz[0]);
                  if (SHIBYTE(v99) < 0)
                  {
                    v77 = (std::__split_buffer<std::string>::pointer)v98;
LABEL_238:
                    operator delete(v77);
                  }
                }
                else
                {
                  v69 = (void *)HIBYTE(v91);
                  if (SHIBYTE(v91) < 0)
                    v69 = v90[1];
                  if (v69 != (void *)1)
                    goto LABEL_257;
                  v70 = (void *)HIBYTE(v89);
                  if (v89 < 0)
                    v70 = v88[1];
                  if (v70 != (void *)1)
LABEL_257:
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(_BYTE *)(v7 + 169))
                  {
                    if (SHIBYTE(v91) >= 0)
                      v71 = v90;
                    else
                      v71 = (void **)v90[0];
                    v72 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v71);
                    if (SHIBYTE(v91) >= 0)
                      v73 = v90;
                    else
                      v73 = (void **)v90[0];
                    *(_BYTE *)v73 = v72;
                    if (v89 >= 0)
                      v74 = v88;
                    else
                      v74 = (void **)v88[0];
                    v75 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v74);
                    if (v89 >= 0)
                      v76 = v88;
                    else
                      v76 = (void **)v88[0];
                    *(_BYTE *)v76 = v75;
                  }
                  *(_OWORD *)&v100.__first_ = *(_OWORD *)v90;
                  v100.__end_ = v91;
                  v90[0] = 0;
                  v90[1] = 0;
                  v91 = 0;
                  v100.__end_cap_ = *(std::__compressed_pair<std::string *> *)v88;
                  v101 = v89;
                  v88[0] = 0;
                  v88[1] = 0;
                  v89 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v85, (__int128 *)&v100);
                  if (SHIBYTE(v101) < 0)
                    operator delete(v100.__end_cap_.__value_);
                  if (SHIBYTE(v100.__end_) < 0)
                  {
                    v77 = v100.__first_;
                    goto LABEL_238;
                  }
                }
                if (SHIBYTE(v89) < 0)
                  operator delete(v88[0]);
                if (SHIBYTE(v91) < 0)
                  operator delete(v90[0]);
                if (SHIBYTE(v93) < 0)
                  operator delete(v92[0]);
                v25 = 1;
LABEL_154:
                if (SHIBYTE(v95) < 0)
                  operator delete(__p[0]);
                v9 = v36;
                if ((v25 & 1) == 0)
                  goto LABEL_158;
                goto LABEL_157;
              }
            }
            else
            {
              LOBYTE(v35) = *v35;
            }
            HIBYTE(v93) = 1;
            LOWORD(v92[0]) = v35;
            goto LABEL_162;
          }
        }
      }
      if (SHIBYTE(v95) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v34 = (void **)__p[0];
LABEL_90:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v34);
LABEL_101:
            v25 = 1;
            v36 = v9;
            goto LABEL_154;
          }
          v34 = (void **)__p[0];
LABEL_100:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v34, *((char *)v34 + 1));
          goto LABEL_101;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v95))
      {
        v34 = __p;
        if (HIBYTE(v95) == 1)
          goto LABEL_90;
        goto LABEL_100;
      }
LABEL_157:
      v5 = (uint64_t)v9;
LABEL_158:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_254:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_210ABBF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v46 + 144) = v47;
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 145) < 0)
    operator delete(*(void **)(v48 - 168));
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 5);
}

void sub_210ABC088(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  std::string::size_type size;
  std::string *v10;
  BOOL v11;
  std::locale v13;
  std::string v14;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v13, (const std::locale *)(v4 + 16));
  std::locale::name(&v14, &v13);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  *(_BYTE *)(v4 + 171) = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_210ABC1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x212BCDF50](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  char v42;
  _BYTE *v43;
  char v44;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (!*a2)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        return a2 + 1;
      }
      if (v7 == 68)
      {
        v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
        *(_DWORD *)(a5 + 164) = v8;
        return a2 + 1;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    }
    if (v7 == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_24;
    }
    if (v7 != 87)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_60:
        *(_QWORD *)(a5 + 72) = v14;
        return a2 + 1;
      }
      v24 = *(_QWORD *)(a5 + 64);
      v25 = &v13[-v24];
      v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        v27 = v12 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = operator new(v28);
        else
          v29 = 0;
        v31 = &v29[v28];
        v25[(_QWORD)v29] = v11;
        v14 = (uint64_t)&v25[(_QWORD)v29 + 1];
        if (v13 == (_BYTE *)v24)
        {
          v29 = &v25[(_QWORD)v29];
        }
        else
        {
          v32 = &v13[~v24];
          do
          {
            v33 = *--v13;
            (v32--)[(_QWORD)v29] = v33;
          }
          while (v13 != (_BYTE *)v24);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v29;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v31;
        if (v13)
          operator delete(v13);
        goto LABEL_60;
      }
LABEL_85:
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    }
    v17 = *(_BYTE **)(a5 + 72);
    v16 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        v18 = *(_QWORD *)(a5 + 64);
        v19 = &v17[-v18];
        v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0)
          goto LABEL_85;
        v21 = v16 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = operator new(v22);
        else
          v23 = 0;
        v39 = &v19[(_QWORD)v23];
        v40 = (char *)v23 + v22;
        v19[(_QWORD)v23] = 95;
        v30 = (uint64_t)&v19[(_QWORD)v23 + 1];
        if (v17 != (_BYTE *)v18)
        {
          v41 = &v17[~v18];
          do
          {
            v42 = *--v17;
            (v41--)[(_QWORD)v23] = v42;
          }
          while (v17 != (_BYTE *)v18);
LABEL_78:
          v17 = *(_BYTE **)(a5 + 64);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      v34 = *(_QWORD *)(a5 + 64);
      v35 = &v17[-v34];
      v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0)
        goto LABEL_85;
      v37 = v16 - v34;
      if (2 * v37 > v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v23 = operator new(v38);
      else
        v23 = 0;
      v39 = &v35[(_QWORD)v23];
      v40 = (char *)v23 + v38;
      v35[(_QWORD)v23] = 95;
      v30 = (uint64_t)&v35[(_QWORD)v23 + 1];
      if (v17 != (_BYTE *)v34)
      {
        v43 = &v17[~v34];
        do
        {
          v44 = *--v17;
          (v43--)[(_QWORD)v23] = v44;
        }
        while (v17 != (_BYTE *)v34);
        goto LABEL_78;
      }
LABEL_79:
      v23 = v39;
LABEL_80:
      *(_QWORD *)(a5 + 64) = v23;
      *(_QWORD *)(a5 + 72) = v30;
      *(_QWORD *)(a5 + 80) = v40;
      if (v17)
        operator delete(v17);
      goto LABEL_82;
    }
    *v17 = 95;
    v30 = (uint64_t)(v17 + 1);
LABEL_82:
    *(_QWORD *)(a5 + 72) = v30;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    }
    if (v7 != 100)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_26:
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_26;
  }
  if (v7 != 119)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_210ABCED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  void *v22;
  uint64_t v23;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v17 = *a1;
    v16 = (unint64_t)a1[1];
    if ((char *)v16 == *a1)
    {
      v21 = vdupq_n_s64(v16);
      v18 = &v13[48 * v9];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *(_OWORD *)(v16 - 48);
        *((_QWORD *)v18 - 4) = *(_QWORD *)(v16 - 32);
        *((_OWORD *)v18 - 3) = v19;
        *(_QWORD *)(v16 - 40) = 0;
        *(_QWORD *)(v16 - 32) = 0;
        *(_QWORD *)(v16 - 48) = 0;
        v20 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 8) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        v16 -= 48;
      }
      while ((char *)v16 != v17);
      v21 = *(int64x2_t *)a1;
    }
    v8 = v14 + 48;
    *a1 = v18;
    a1[1] = v14 + 48;
    a1[2] = &v13[48 * v12];
    v23 = v21.i64[1];
    v22 = (void *)v21.i64[0];
    while ((void *)v23 != v22)
    {
      v23 -= 48;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v23);
    }
    if (v22)
      operator delete(v22);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = (char *)(v4 + 48);
  }
  a1[1] = v8;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 9);
}

void sub_210ABD12C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 3);
}

void sub_210ABD25C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24CA956B0;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_24CA95740;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24CA95508;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_210ABD398(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x212BCDF50](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95740;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95740;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA956B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA956B0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 v14;
  std::basic_regex<char>::value_type v15;
  __int16 v16;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_89;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_89;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_89;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_89;
          v12 = -87;
LABEL_37:
          v13 = v12 + v11 + 16 * (v10 + v9);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_89;
    v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u)
      goto LABEL_89;
    v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_210ABDBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 1);
}

void sub_210ABDC68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 2);
}

void sub_210ABDCB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  v6 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x212BCDF50);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  std::vector<char>::pointer v26;
  unint64_t v27;
  int v28;
  std::regex_traits<char>::char_class_type v29;
  int v30;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v32;
  char *v33;
  std::vector<std::pair<std::string, std::string>>::pointer v34;
  std::vector<std::pair<std::string, std::string>>::pointer v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  std::vector<std::string>::pointer v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  std::string::size_type v46;
  uint64_t v47;
  BOOL v48;
  std::string *v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  std::string *v53;
  uint64_t v54;
  std::string::size_type v55;
  int v56;
  std::regex_traits<char>::char_class_type v57;
  int v58;
  std::vector<std::string>::pointer v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  __int128 v64;
  std::string::size_type v65;
  uint64_t v66;
  BOOL v67;
  std::string *v68;
  std::string::size_type v69;
  int v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  int v74;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v77;
  std::regex_traits<char>::char_class_type neg_mask;
  int v79;
  std::__node<char> *first;
  int v81;
  std::string *v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t v85;
  std::string __p;
  __int16 v87;
  std::string v88;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_172;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_36;
  v6 = *current;
  LOBYTE(v87) = *current;
  v7 = current[1];
  HIBYTE(v87) = v7;
  if (this->__icase_)
  {
    LOBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v87) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v87;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v88, (const char *)&__s);
  __p = v88;
  size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v88.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v88, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v88;
  if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v88.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v88.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_115;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_115:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v24)
      goto LABEL_18;
LABEL_36:
    negate = 0;
    v8 = 1;
    goto LABEL_37;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_36;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v87 != *(p_second - 1) || HIBYTE(v87) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_169;
  }
LABEL_27:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
    v19 = this->__ranges_.__begin_;
    v20 = (char *)this->__ranges_.__end_ - (char *)v19;
    if (v20)
    {
      v21 = 0;
      v22 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v19->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v21;
        ++v19;
        if (v21 >= v22)
          goto LABEL_34;
      }
      negate = 1;
      v23 = 5;
    }
    else
    {
LABEL_34:
      negate = 0;
      v23 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (negate)
      goto LABEL_147;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_151:
    if ((char)v87 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v77 = tab[v87];
      if (((v77 & mask) != 0 || v87 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v87) & 0x80000000) == 0
        && ((tab[HIBYTE(v87)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v87) == 95))
      {
        goto LABEL_169;
      }
      neg_mask = this->__neg_mask_;
      if ((v77 & neg_mask) != 0 || v87 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_168:
        v79 = negate;
LABEL_170:
        negate = v79;
        goto LABEL_171;
      }
    }
    if ((SHIBYTE(v87) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v87)] & neg_mask) == 0)
      {
        v79 = 1;
        if (HIBYTE(v87) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_170;
      }
      goto LABEL_168;
    }
LABEL_169:
    v79 = 1;
    goto LABEL_170;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v87, (char *)&v88);
  v59 = this->__equivalences_.__begin_;
  v60 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v61 = (char *)this->__equivalences_.__end_ - (char *)v59;
  if (!v61)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_151;
  }
  v62 = 0;
  v63 = v61 / 24;
  v64 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v65 = __s.__r_.__value_.__l.__size_;
  if (v63 <= 1)
    v66 = 1;
  else
    v66 = v61 / 24;
  v67 = 1;
  while (1)
  {
    v68 = &v59[v62];
    v69 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
    v70 = (char)v69;
    if ((v69 & 0x80u) != 0)
      v69 = v68->__r_.__value_.__l.__size_;
    if (v65 != v69)
      goto LABEL_142;
    v71 = v70 >= 0 ? &v59[v62] : (std::string *)v68->__r_.__value_.__r.__words[0];
    if ((v60 & 0x80) == 0)
      break;
    v84 = v63;
    v85 = v60;
    v74 = memcmp((const void *)v64, v71, *((size_t *)&v64 + 1));
    v63 = v84;
    v60 = v85;
    if (!v74)
    {
      v23 = 5;
      negate = 1;
      goto LABEL_145;
    }
LABEL_142:
    v67 = ++v62 < v63;
    if (v62 == v66)
    {
      v23 = 0;
      goto LABEL_144;
    }
  }
  if (!(_DWORD)v60)
  {
    negate = 1;
    if (v67)
      goto LABEL_171;
    goto LABEL_151;
  }
  v72 = &__s;
  v73 = v60;
  do
  {
    if (v72->__r_.__value_.__s.__data_[0] != v71->__r_.__value_.__s.__data_[0])
      goto LABEL_142;
    v72 = (std::string *)((char *)v72 + 1);
    v71 = (std::string *)((char *)v71 + 1);
    --v73;
  }
  while (v73);
  negate = 1;
  v23 = 5;
LABEL_144:
  if ((v60 & 0x80) != 0)
LABEL_145:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v67)
    goto LABEL_151;
LABEL_147:
  if (v23)
  {
LABEL_171:
    v8 = 2;
    goto LABEL_172;
  }
  v8 = 2;
LABEL_37:
  v25 = *a2->__current_;
  v88.__r_.__value_.__s.__data_[0] = v25;
  if (this->__icase_)
  {
    v25 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v25);
    v88.__r_.__value_.__s.__data_[0] = v25;
  }
  v26 = this->__chars_.__begin_;
  v27 = this->__chars_.__end_ - v26;
  if (v27)
  {
    if (v27 <= 1)
      v27 = 1;
    while (1)
    {
      v28 = *v26++;
      if (v28 == v25)
        break;
      if (!--v27)
        goto LABEL_44;
    }
LABEL_104:
    negate = 1;
    goto LABEL_172;
  }
LABEL_44:
  v29 = this->__neg_mask_;
  if (v29 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v25 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v25] & v29) == 0)
      v30 = (v25 == 95) & (v29 >> 7);
    else
      LOBYTE(v30) = 1;
    end = this->__neg_chars_.__end_;
    v32 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v25, end - this->__neg_chars_.__begin_);
    v33 = v32 ? v32 : end;
    if ((v30 & 1) == 0 && v33 == end)
      goto LABEL_104;
  }
  v35 = this->__ranges_.__begin_;
  v34 = this->__ranges_.__end_;
  if (v35 != v34)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
      v35 = this->__ranges_.__begin_;
      v34 = this->__ranges_.__end_;
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v25;
    }
    v36 = (char *)v34 - (char *)v35;
    if (v36)
    {
      v37 = 0;
      v38 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 4);
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, &__s) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, v35->second.__r_.__value_.__r.__words) << 24) >= 0x1000000)
      {
        ++v37;
        ++v35;
        if (v37 >= v38)
          goto LABEL_65;
      }
      v39 = 1;
      negate = 1;
    }
    else
    {
LABEL_65:
      v39 = 0;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if ((v39 & 1) != 0)
      goto LABEL_172;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_99;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, &v88.__r_.__value_.__s.__data_[1]);
  v40 = this->__equivalences_.__begin_;
  v41 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v42 = (char *)this->__equivalences_.__end_ - (char *)v40;
  if (!v42)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  v43 = 0;
  v44 = v42 / 24;
  v45 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v46 = __s.__r_.__value_.__l.__size_;
  if (v44 <= 1)
    v47 = 1;
  else
    v47 = v42 / 24;
  v48 = 1;
  while (2)
  {
    v49 = &v40[v43];
    v50 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v51 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = v49->__r_.__value_.__l.__size_;
    if (v46 != v50)
    {
LABEL_92:
      v48 = ++v43 < v44;
      if (v43 == v47)
      {
LABEL_93:
        if ((v41 & 0x80) == 0)
          goto LABEL_95;
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
  if (v51 >= 0)
    v52 = &v40[v43];
  else
    v52 = (std::string *)v49->__r_.__value_.__r.__words[0];
  if ((v41 & 0x80) != 0)
  {
    v83 = negate;
    v55 = v46;
    v82 = v40;
    v56 = memcmp((const void *)v45, v52, *((size_t *)&v45 + 1));
    v40 = v82;
    v46 = v55;
    negate = v83;
    if (!v56)
    {
      negate = 1;
LABEL_94:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_95;
    }
    goto LABEL_92;
  }
  if ((_DWORD)v41)
  {
    v53 = &__s;
    v54 = v41;
    while (v53->__r_.__value_.__s.__data_[0] == v52->__r_.__value_.__s.__data_[0])
    {
      v53 = (std::string *)((char *)v53 + 1);
      v52 = (std::string *)((char *)v52 + 1);
      if (!--v54)
      {
        negate = 1;
        goto LABEL_93;
      }
    }
    goto LABEL_92;
  }
  negate = 1;
LABEL_95:
  if (!v48)
  {
LABEL_99:
    if (v88.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_172;
    v57 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v88.__r_.__value_.__s.__data_[0]] & v57) == 0)
    {
      v58 = (v57 >> 7) & 1;
      if (v88.__r_.__value_.__s.__data_[0] != 95)
        v58 = 0;
      if (v58 != 1)
        goto LABEL_172;
    }
    goto LABEL_104;
  }
LABEL_172:
  if (negate == this->__negate_)
  {
    first = 0;
    v81 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v81 = -995;
  }
  a2->__do_ = v81;
  a2->__node_ = first;
}

void sub_210ABE7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_210ABE8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_210ABEA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 4);
}

void sub_210ABEBB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24CA95598;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_24CA95680;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_24CA952B0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95680;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95680;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95598;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95598;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  std::basic_regex<char> *v29;
  int v31;
  int v32;

  v3 = (char *)a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = a2 + 1;
    v8 = *a2;
    if ((a2 + 1 != a3 || v8 != 36)
      && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
      goto LABEL_29;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
    if (v11 == v3)
    {
      if (*v3 == 46)
      {
        v12 = (std::__node<char> *)operator new();
        v13 = a1->__end_;
        first = v13->__first_;
        v12->__vftable = (std::__node<char>_vtbl *)&off_24CA954D8;
        v12[1].__vftable = (std::__node<char>_vtbl *)first;
        v13->__first_ = v12;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        goto LABEL_29;
      }
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, v3, (char *)a3);
    }
    if (v11 == v3 && v11 != (char *)a3)
    {
      if (v9 == a3 || *v3 != 92)
        return v3;
      v15 = *v9;
      if (v15 == 40)
      {
        v16 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v17 = a1->__marked_count_;
        do
        {
          v18 = (unsigned __int8 *)v16;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v16, a3);
        }
        while ((unsigned __int8 *)v16 != v18);
        if (v18 == a3 || v18 + 1 == a3 || *v18 != 92 || v18[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = (char *)(v18 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v17);
      }
      else
      {
        v19 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v15);
        v20 = 2;
        if (!v19)
          v20 = 0;
        v11 = &v3[v20];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_29:
      if (v9 == a3)
        return (char *)a3;
      v21 = a1->__marked_count_ + 1;
      v22 = *v9;
      if (v22 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == a3 || v22 != 92 || v9[1] != 123)
        return (char *)v9;
      v32 = 0;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, a3, &v32);
      if (v23 == v9 + 2)
LABEL_45:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v23 != a3)
      {
        v24 = v23 + 1;
        v25 = *v23;
        if (v25 == 44)
        {
          v31 = -1;
          v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23 + 1, a3, &v31);
          if (v26 != a3 && v26 + 1 != a3 && *v26 == 92 && v26[1] == 125)
          {
            v28 = v31;
            v27 = v32;
            if (v31 == -1)
            {
              v28 = -1;
            }
            else if (v31 < v32)
            {
              goto LABEL_45;
            }
            v3 = (char *)&v26[2 * (v26[1] == 125)];
            v29 = a1;
LABEL_53:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v29, v27, v28, end, marked_count + 1, v21, 1);
            return v3;
          }
        }
        else if (v24 != a3 && v25 == 92 && *v24 == 125)
        {
          v3 = (char *)(v23 + 2);
          v27 = v32;
          v29 = a1;
          v28 = v32;
          goto LABEL_53;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  int v40;
  std::basic_regex<char> *v41;
  BOOL v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v46;
  std::__bracket_expression<char, std::regex_traits<char>> *v47;
  unsigned __int8 *v48;
  std::basic_regex<char> *v49;
  BOOL v50;
  std::basic_regex<char> v51;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_31;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_24CA95710;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_24CA95770;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v10 = (char *)(a2 + 2);
    if (*v8 == 63 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        marked_count = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_30:
        std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&v51.__start_);
        std::locale::~locale(&v51.__traits_.__loc_);
        result = (unsigned __int8 *)(v13 + 1);
        if (v13 + 1 != (char *)a2)
          return result;
        goto LABEL_31;
      }
      if (v12 == 61)
      {
        std::regex_traits<char>::regex_traits(&v51.__traits_);
        memset(&v51.__flags_, 0, 40);
        v51.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v51, a2 + 3, a3);
        v14 = v51.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v51, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        goto LABEL_30;
      }
    }
LABEL_31:
    v7 = *a2;
  }
LABEL_32:
  v24 = this->__end_;
  v25 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_97;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_97;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_97;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          v37 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_97:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = this->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_24CA95B50;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v33);
LABEL_96:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
    goto LABEL_76;
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_98;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_98:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_98;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v33);
  if (v30 == v31)
  {
LABEL_76:
    v40 = (char)*v31;
    if (v40 > 99)
    {
      if (v40 == 119)
      {
        v41 = this;
        v42 = 0;
        goto LABEL_88;
      }
      if (v40 == 115)
      {
        v49 = this;
        v50 = 0;
LABEL_94:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v49, v50);
        v46 = started->__mask_ | 0x4000;
        goto LABEL_95;
      }
      if (v40 != 100)
      {
LABEL_89:
        v48 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v48 == v31)
          v30 = a2;
        else
          v30 = v48;
        goto LABEL_57;
      }
      v43 = this;
      v44 = 0;
    }
    else
    {
      if (v40 != 68)
      {
        if (v40 != 83)
        {
          if (v40 == 87)
          {
            v41 = this;
            v42 = 1;
LABEL_88:
            v47 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            v47->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v47, 95);
            goto LABEL_96;
          }
          goto LABEL_89;
        }
        v49 = this;
        v50 = 1;
        goto LABEL_94;
      }
      v43 = this;
      v44 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
    v46 = started->__mask_ | 0x400;
LABEL_95:
    started->__mask_ = v46;
    goto LABEL_96;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  return result;
}

void sub_210ABFAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212BCDDC4](exception, 11);
}

void sub_210ABFB28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_24CA95568;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_24CA954A8;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA954A8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_24CA954A8;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x212BCDF50);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::vector<std::csub_match>::value_type v23;
  char v24;
  uint64_t v25;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v23, 0, 17);
  v24 = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v19.first = *(const char **)(a2 + 24);
  v19.second = v19.first;
  v19.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v19);
  v20 = v5;
  v21 = v5;
  v22 = 0;
  v23 = v19;
  v25 = v5;
  v24 = 1;
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(_QWORD *)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = 2;
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = v13;
  }
  while (v10 > v13++);
LABEL_14:
  operator delete(begin);
}

void sub_210ABFF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95568;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_24CA95568;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x212BCDF50);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x212BCDF50);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void PoolTable::~PoolTable(PoolTable *this)
{
  unint64_t v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  void *v9;

  v3 = (unsigned int **)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  while ((unint64_t)v3 < v2)
  {
    v4 = *v3;
    if (*v3)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      *v3 = 0;
      v2 = *((_QWORD *)this + 3);
    }
    v3 += 3;
  }
  v8 = (void *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 6) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 3) = v9;
    operator delete(v9);
  }
}

uint64_t PoolTable::GetWave(PoolTable *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  PoolCue *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL4 v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  RIFFChunkHeader *v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int Offset;
  uint64_t *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  char v51;
  double v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  TStream *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned int v80;
  BOOL v81;
  int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  TStream *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  int v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  void *v137;
  void *v138;
  float *v139;
  _WORD *v140;
  float v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  unsigned int v161;
  unsigned int v162;
  void *v163;
  size_t v164;
  char *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t j;
  uint64_t v173;
  uint64_t v174;
  BOOL v176;
  unint64_t v177;
  int v179;
  unint64_t v180;
  unsigned int v181;
  uint64_t i;
  BOOL v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  std::bad_alloc *exception;
  std::bad_alloc *v203;
  _DWORD *v204;
  _DWORD *v205;
  uint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  PoolCue *v209;
  PoolCue *v210;
  int v211;
  char v212;
  RIFFChunkHeader *v213;
  std::__shared_weak_count *v214;
  _BYTE v215[28];
  RIFFChunkHeader *v216;
  uint64_t v217;
  _BYTE v218[28];
  char v219[8];
  std::__shared_weak_count *v220;
  char __s[16];
  int v222;
  char v223;
  _BYTE v224[18];
  _BYTE v225[10];
  __int16 v226;
  int v227;
  __int16 v228;
  const char *v229;
  uint8_t buf[4];
  uint64_t v231;
  __int128 v232;
  __int16 v233;
  int v234;
  __int16 v235;
  const char *v236;
  char v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  int v240;
  unsigned int v241;
  char v242;
  _BYTE v243[28];
  __int16 v244;
  int v245;
  __int16 v246;
  const char *v247;
  uint64_t v248;

  v248 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  v4 = v3 - v2;
  if (v3 == v2)
    return 0;
  v5 = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
  v7 = 1;
  while (*(_DWORD *)(v2 + 24 * v5 + 16) != a2)
  {
    v5 = v7;
    v32 = v6 > v7++;
    if (!v32)
      return 0;
  }
  v10 = (PoolCue *)(v2 + 24 * v5);
  v11 = (uint64_t *)*((_QWORD *)this + 1);
  if (v11)
  {
    v8 = *(_QWORD *)v10;
    if (!*(_QWORD *)v10)
    {
      v238 = 0;
      v239 = 0;
      v231 = 0x2B1100000AC44;
      *(_DWORD *)buf = 65537;
      v232 = 0x200001uLL;
      v12 = a2;
      v13 = v11[29];
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v11[30] - v13) >> 4);
      if (v14 <= a2)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v224 = 136316162;
          *(_QWORD *)&v224[4] = "SoundFontsFile.cpp";
          *(_WORD *)&v224[12] = 1024;
          *(_DWORD *)&v224[14] = 1123;
          *(_WORD *)v225 = 2080;
          *(_QWORD *)&v225[2] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/SoundFontsFile.cpp";
          v226 = 1024;
          v227 = 1123;
          v228 = 2080;
          v229 = "isIDGood";
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v224, 0x2Cu);
        }
        v160 = 0;
      }
      else
      {
        v15 = v13 + 48 * a2;
        v18 = *(_DWORD *)(v15 + 32);
        v16 = *(_DWORD *)(v15 + 36);
        v17 = (unsigned int *)(v15 + 32);
        LODWORD(v231) = v16;
        HIDWORD(v231) = 4 * v16;
        v19 = *(v17 - 2);
        if (v18 > v19)
        {
          *v17 = v19;
          v18 = v19;
        }
        v209 = v10;
        v20 = v13 + 48 * a2;
        v22 = *(_DWORD *)(v20 + 20);
        v21 = (unsigned int *)(v20 + 20);
        v23 = v19 - v22;
        v24 = v21[2];
        v25 = v24 - v22;
        v26 = v18 - v22;
        v27 = v24 | v18;
        v29 = ((v25 | v26) & 0x80000000) != 0 || v27 == 0;
        v30 = *v11;
        if (*(_BYTE *)(v11[4] + 200))
          v31 = v30 == 0;
        else
          v31 = 1;
        v32 = !v31 && v23 > 0x6000;
        v33 = v32;
        v211 = v33;
        v237 = v33;
        v34 = (std::__shared_weak_count *)v11[1];
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        v238 = v30;
        v239 = v34;
        v37 = (RIFFChunkHeader *)v11[35];
        v38 = *v21;
        v242 = 0;
        v39 = !v29;
        if (v29)
          v40 = 0;
        else
          v40 = v25;
        if (v39)
          v41 = v26;
        else
          v41 = 0;
        v207 = v41;
        v208 = v40;
        RIFFChunkHeader::SeekToOffset(v37, 2 * v38);
        if (v30)
        {
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 56))(v30);
          v240 = v42;
        }
        if (v211)
        {
          v161 = (-v42 | 0xFFFFF000) + 49152;
          v241 = v161 >> 1;
          v162 = v161;
        }
        else
        {
          v161 = 4 * v23 + 192;
          v162 = 2 * v23 + 64;
        }
        v163 = malloc_type_malloc((int)(2 * v23 + 64), 0x450E6B75uLL);
        if (!v163)
          goto LABEL_363;
        v164 = v161;
        v160 = malloc_type_malloc(v161, 0x113DC8D1uLL);
        v165 = (char *)(((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF0);
        if (v165)
        {
          v166 = *(_QWORD *)v37;
          v167 = (std::__shared_weak_count *)*((_QWORD *)v37 + 1);
          if (v167)
          {
            v168 = (unint64_t *)&v167->__shared_owners_;
            do
              v169 = __ldxr(v168);
            while (__stxr(v169 + 1, v168));
          }
          (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v166 + 16))(v166, v163, v162);
          if (v167)
          {
            v170 = (unint64_t *)&v167->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          if ((v211 & 1) != 0)
          {
            memcpy(v165, v163, v164);
          }
          else
          {
            NativeInt16ToFloat32Scaled_ARM();
            if (v207 <= v208)
            {
              for (i = 0; i != 32; ++i)
                *(_DWORD *)&v165[4 * v23 + 4 * i] = 0;
            }
            else
            {
              for (j = 0; j != 128; j += 4)
                *(_DWORD *)&v165[4 * v207 + j] = *(_DWORD *)&v165[4 * v208 + j];
            }
          }
        }
        free(v163);
        if (!v160)
        {
LABEL_363:
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v224 = 136316162;
            *(_QWORD *)&v224[4] = "SoundFontsFile.cpp";
            *(_WORD *)&v224[12] = 1024;
            *(_DWORD *)&v224[14] = 732;
            *(_WORD *)v225 = 2080;
            *(_QWORD *)&v225[2] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/SoundFontsFile.cpp";
            v226 = 1024;
            v227 = 732;
            v228 = 2080;
            v229 = "fpStorage";
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v224, 0x2Cu);
          }
          v160 = 0;
        }
        *(_QWORD *)((char *)&v232 + 4) = v160;
        if (v211)
        {
          HIDWORD(v232) = 2 * v23;
          WORD1(v232) = 16;
        }
        else
        {
          HIDWORD(v232) = 4 * v23;
        }
        v10 = v209;
      }
      v8 = operator new();
      *(_OWORD *)(v8 + 41) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)v8 = &off_24CA927A0;
      *(_WORD *)(v8 + 57) = 256;
      *(_QWORD *)(v8 + 120) = 0;
      *(_QWORD *)(v8 + 128) = 0;
      *(_BYTE *)(v8 + 152) = 0;
      *(_QWORD *)(v8 + 80) = 0;
      *(_DWORD *)(v8 + 88) = 0;
      WaveInfo::operator=(v8 + 64, (uint64_t)buf);
      if (v160)
        v183 = v14 > v12;
      else
        v183 = 0;
      *(_BYTE *)(v8 + 57) = v183;
      if (v14 > v12)
      {
        v184 = v11[29] + 48 * v12;
        *(_OWORD *)__s = *(_OWORD *)v184;
        v222 = *(_DWORD *)(v184 + 16);
        v223 = 0;
        TString::TString((TString *)v224, __s);
        InfoList::AddInfo((uint64_t *)(v8 + 16), 1296125513, (TString *)v224);
        if (*(_QWORD *)v224)
          free(*(void **)v224);
      }
      v185 = v239;
      if (v239)
      {
        v186 = (unint64_t *)&v239->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
LABEL_316:
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      goto LABEL_318;
    }
    return v8;
  }
  v8 = *(_QWORD *)v10;
  if (*(_QWORD *)v10)
    return v8;
  v43 = *(_QWORD *)this;
  if (!*(_QWORD *)this || !*(_BYTE *)(v2 + 24 * v5 + 8))
    return 0;
  Offset = PoolCue::GetOffset(v10);
  if (*(_DWORD *)(v43 + 24) <= Offset)
  {
    v8 = 0;
    goto LABEL_318;
  }
  v210 = v10;
  RIFFChunkHeader::SeekToOffset((RIFFChunkHeader *)v43, Offset + 4);
  v8 = operator new();
  *(_OWORD *)(v8 + 16) = 0u;
  v45 = (uint64_t *)(v8 + 16);
  *(_DWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 41) = 0u;
  *(_QWORD *)v8 = &off_24CA927A0;
  *(_WORD *)(v8 + 57) = 256;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_BYTE *)(v8 + 152) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_DWORD *)(v8 + 88) = 0;
  v216 = 0;
  v217 = 0;
  *(_DWORD *)&v218[2] = 1061109567;
  *(_DWORD *)&v218[24] = 1061109567;
  RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)&v216, *(RIFFChunkHeader **)v43, *(_QWORD *)(v43 + 8));
  v46 = *(_QWORD *)(v43 + 48);
  v47 = (std::__shared_weak_count *)v217;
  v213 = v216;
  v214 = (std::__shared_weak_count *)v217;
  if (v217)
  {
    v48 = (unint64_t *)(v217 + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  *(_OWORD *)v215 = *(_OWORD *)v218;
  *(_OWORD *)&v215[12] = *(_OWORD *)&v218[12];
  if (!v218[1] && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v231 = (uint64_t)"DlsFile.cpp";
    LOWORD(v232) = 1024;
    *(_DWORD *)((char *)&v232 + 2) = 456;
    WORD3(v232) = 2080;
    *((_QWORD *)&v232 + 1) = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v233 = 1024;
    v234 = 456;
    v235 = 2080;
    v236 = "GetHeader().IsListType()";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (*(_DWORD *)&v215[24] != 1702257015 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    v231 = (uint64_t)"DlsFile.cpp";
    LOWORD(v232) = 1024;
    *(_DWORD *)((char *)&v232 + 2) = 457;
    WORD3(v232) = 2080;
    *((_QWORD *)&v232 + 1) = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
    v233 = 1024;
    v234 = 457;
    v235 = 2080;
    v236 = "GetHeader().GetSubType() == ChunkType(kChunkType_WaveFileChunk)";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
  }
  if (!v215[0])
    goto LABEL_345;
  v50 = 0;
  v51 = 0;
  v212 = 0;
  v238 = 0;
  v239 = 0;
  *(_QWORD *)((char *)&v232 + 4) = 0;
  v237 = *(_BYTE *)(v46 + 200);
  while (!RIFFChunkHeader::IsDone((RIFFChunkHeader *)&v213))
  {
    *(_QWORD *)v224 = 0;
    *(_QWORD *)&v224[8] = 0;
    *(_DWORD *)v225 = 1061109567;
    HIDWORD(v229) = 1061109567;
    RIFFChunkHeader::ReadFrom((RIFFChunkHeader *)v224, v213, (uint64_t)v214);
    if (v224[17])
    {
      if (HIDWORD(v229) != 1330007625)
        goto LABEL_81;
      InfoListChunk::InfoListChunk((InfoListChunk *)__s, (uint64_t)v224, v45);
      v53 = *(std::__shared_weak_count **)&__s[8];
      if (*(_QWORD *)&__s[8])
      {
        v54 = (unint64_t *)(*(_QWORD *)&__s[8] + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      goto LABEL_82;
    }
    v56 = *(_DWORD *)v225;
    v57 = bswap32(*(unsigned int *)v225);
    if (v57 > 1718449183)
    {
      if (v57 != 1718449184)
      {
        if (v57 != 2004053360)
          goto LABEL_81;
        WaveSampleChunk::WaveSampleChunk((uint64_t)v219, (uint64_t)v224, (uint64_t)v243);
        v65 = v220;
        if (v220)
        {
          v66 = (unint64_t *)&v220->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v212 = 1;
        *(_BYTE *)(v8 + 152) = 1;
        v52 = *(double *)v243;
        *(_OWORD *)(v8 + 156) = *(_OWORD *)v243;
        *(_QWORD *)(v8 + 172) = *(_QWORD *)&v243[16];
LABEL_82:
        v64 = 1;
        goto LABEL_83;
      }
      v90 = v45;
      v91 = *(TStream **)v224;
      v92 = *(std::__shared_weak_count **)&v224[8];
      if (*(_QWORD *)&v224[8])
      {
        v93 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v95 = v224[16];
      if (v56 != 544501094 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v243 = 136316162;
        *(_QWORD *)&v243[4] = "DlsFile.h";
        *(_WORD *)&v243[12] = 1024;
        *(_DWORD *)&v243[14] = 140;
        *(_WORD *)&v243[18] = 2080;
        *(_QWORD *)&v243[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.h";
        v244 = 1024;
        v245 = 140;
        v246 = 2080;
        v247 = "GetHeader().GetType() == ChunkType(kChunkType_FormatChunk)";
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v243, 0x2Cu);
      }
      if (v95)
      {
        if (v92)
        {
          v96 = (unint64_t *)&v92->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        *(_WORD *)buf = TStream::ReadLittle16(v91);
        if (v92)
        {
          v98 = (unint64_t *)&v92->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v100 = __ldxr(v98);
          while (__stxr(v100 + 1, v98));
        }
        *(_WORD *)&buf[2] = TStream::ReadLittle16(v91);
        if (v92)
        {
          v101 = (unint64_t *)&v92->__shared_owners_;
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v103 = __ldxr(v101);
          while (__stxr(v103 + 1, v101));
        }
        LODWORD(v231) = TStream::ReadLittle32(v91);
        if (v92)
        {
          v104 = (unint64_t *)&v92->__shared_owners_;
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v106 = __ldxr(v104);
          while (__stxr(v106 + 1, v104));
        }
        HIDWORD(v231) = TStream::ReadLittle32(v91);
        if (v92)
        {
          v107 = (unint64_t *)&v92->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v109 = __ldxr(v107);
          while (__stxr(v109 + 1, v107));
        }
        LOWORD(v232) = TStream::ReadLittle16(v91);
        if (v92)
        {
          v110 = (unint64_t *)&v92->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v112 = __ldxr(v110);
          while (__stxr(v112 + 1, v110));
        }
        WORD1(v232) = TStream::ReadLittle16(v91);
        if (v92)
        {
          v113 = (unint64_t *)&v92->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          goto LABEL_201;
        }
      }
      else
      {
        if (v92)
        {
          v115 = (unint64_t *)&v92->__shared_owners_;
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        TStream::WriteLittle16(v91);
        if (v92)
        {
          v117 = (unint64_t *)&v92->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v119 = __ldxr(v117);
          while (__stxr(v119 + 1, v117));
        }
        TStream::WriteLittle16(v91);
        if (v92)
        {
          v120 = (unint64_t *)&v92->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v122 = __ldxr(v120);
          while (__stxr(v122 + 1, v120));
        }
        TStream::WriteLittle32(v91);
        if (v92)
        {
          v123 = (unint64_t *)&v92->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v125 = __ldxr(v123);
          while (__stxr(v125 + 1, v123));
        }
        TStream::WriteLittle32(v91);
        if (v92)
        {
          v126 = (unint64_t *)&v92->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v128 = __ldxr(v126);
          while (__stxr(v128 + 1, v126));
        }
        TStream::WriteLittle16(v91);
        if (v92)
        {
          v129 = (unint64_t *)&v92->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          do
            v131 = __ldxr(v129);
          while (__stxr(v131 + 1, v129));
        }
        TStream::WriteLittle16(v91);
        if (v92)
        {
          v132 = (unint64_t *)&v92->__shared_owners_;
          do
            v114 = __ldaxr(v132);
          while (__stlxr(v114 - 1, v132));
LABEL_201:
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          v133 = (unint64_t *)&v92->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)v224);
      v45 = v90;
      v50 = 1;
      goto LABEL_82;
    }
    if (v57 != 1684108385)
    {
      if (v57 == 1684826468)
      {
        v58 = *(TStream **)v224;
        v59 = *(std::__shared_weak_count **)&v224[8];
        if (*(_QWORD *)&v224[8])
        {
          v60 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        DLSID::DLSID((DLSID *)v243, v58);
        if (v59)
        {
          v62 = (unint64_t *)&v59->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v64 = 1;
        *(_BYTE *)(v8 + 56) = 1;
        v52 = *(double *)v243;
        *(_OWORD *)(v8 + 40) = *(_OWORD *)v243;
        goto LABEL_83;
      }
LABEL_81:
      RIFFChunkHeader::SeekToEnd((RIFFChunkHeader *)v224);
      goto LABEL_82;
    }
    if ((v50 & 1) == 0)
    {
      v50 = 0;
      v64 = 0;
      goto LABEL_83;
    }
    v206 = v45;
    v71 = *(_QWORD *)v224;
    v72 = *(std::__shared_weak_count **)&v224[8];
    if (*(_QWORD *)&v224[8])
    {
      v73 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
      do
        v74 = __ldxr(v73);
      while (__stxr(v74 + 1, v73));
    }
    v75 = v224[16];
    v76 = *(_DWORD *)&v225[6];
    if (v56 != 1635017060 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v243 = 136316162;
      *(_QWORD *)&v243[4] = "DlsFile.cpp";
      *(_WORD *)&v243[12] = 1024;
      *(_DWORD *)&v243[14] = 740;
      *(_WORD *)&v243[18] = 2080;
      *(_QWORD *)&v243[20] = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsFile.cpp";
      v244 = 1024;
      v245 = 740;
      v246 = 2080;
      v247 = "GetHeader().GetType() == ChunkType(kChunkType_Data)";
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", v243, 0x2Cu);
    }
    if (v75)
    {
      v77 = WORD1(v232);
      if (v72)
      {
        v78 = (unint64_t *)&v72->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      v80 = v76 / (v77 >> 3);
      if (v237)
        v81 = v71 == 0;
      else
        v81 = 1;
      v83 = !v81 && v80 > 0x6000;
      v237 = v83;
      if (v72)
      {
        v84 = (unint64_t *)&v72->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 56))(v71);
      if (v72)
      {
        v86 = (unint64_t *)&v72->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      std::shared_ptr<MultiRamp>::operator=[abi:ne180100](&v238, v71, (uint64_t)v72);
      v242 = 0;
      if (v83)
      {
        v88 = (-v240 | 0xFFFFF000) + 49152;
        v241 = v88 >> 1;
        v89 = v88;
      }
      else
      {
        v88 = 4 * v80 + 192;
        v89 = v76;
      }
      v146 = malloc_type_malloc(v88, 0x494262FuLL);
      if (v146)
      {
        if (v72)
        {
          v147 = (unint64_t *)&v72->__shared_owners_;
          do
            v148 = __ldxr(v147);
          while (__stxr(v148 + 1, v147));
        }
        v149 = (*(uint64_t (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v71 + 16))(v71, v146, v89);
        if (v72)
        {
          v150 = (unint64_t *)&v72->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v89 != v149)
        {
          free(v146);
          v146 = 0;
        }
      }
      if (v83)
      {
        if (v72)
        {
          v152 = (unint64_t *)&v72->__shared_owners_;
          do
            v153 = __ldxr(v152);
          while (__stxr(v153 + 1, v152));
        }
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 40))(v71, v240 + v76);
        if (v72)
        {
          v154 = (unint64_t *)&v72->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          *(_QWORD *)((char *)&v232 + 4) = v146;
          HIDWORD(v232) = v76;
LABEL_245:
          v156 = (unint64_t *)&v72->__shared_owners_;
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
LABEL_249:
          v158 = (unint64_t *)&v72->__shared_owners_;
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
          goto LABEL_255;
        }
        *(_QWORD *)((char *)&v232 + 4) = v146;
        HIDWORD(v232) = v76;
      }
      else
      {
        *(_QWORD *)((char *)&v232 + 4) = v146;
        HIDWORD(v232) = v76;
        if (v72)
          goto LABEL_245;
      }
    }
    else
    {
      v135 = HIDWORD(v232);
      v136 = (unint64_t)HIDWORD(v232) >> 2;
      v137 = malloc_type_malloc(2 * v136, 0x7C51E058uLL);
      v138 = v137;
      if (v135 >= 4 && !v137)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v203 = std::bad_alloc::bad_alloc(exception);
      }
      if (v135 >= 4)
      {
        v139 = *(float **)((char *)&v232 + 4);
        v140 = v137;
        do
        {
          v141 = *v139++;
          *v140++ = vcvts_n_s32_f32(v141, 0xFuLL);
          LODWORD(v136) = v136 - 1;
        }
        while ((_DWORD)v136);
      }
      if (v72)
      {
        v142 = (unint64_t *)&v72->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      (*(void (**)(uint64_t, void *, unint64_t))(*(_QWORD *)v71 + 24))(v71, v137, 2 * (v135 >> 2));
      if (v72)
      {
        v144 = (unint64_t *)&v72->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        free(v138);
        goto LABEL_249;
      }
      free(v138);
    }
LABEL_255:
    v50 = 1;
    v51 = 1;
    v64 = 1;
    v45 = v206;
LABEL_83:
    v68 = *(std::__shared_weak_count **)&v224[8];
    if (*(_QWORD *)&v224[8])
    {
      v69 = (unint64_t *)(*(_QWORD *)&v224[8] + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if ((v64 & 1) == 0)
      break;
  }
  if ((v50 & 1) == 0 || (v51 & 1) == 0)
    goto LABEL_339;
  v173 = HIDWORD(v232) / (WORD1(v232) >> 3);
  v174 = *(_QWORD *)((char *)&v232 + 4);
  v176 = (int)v173 >= 1 && *(_QWORD *)((char *)&v232 + 4) != 0 && v237 == 0;
  v177 = (*(_QWORD *)((char *)&v232 + 4) + 15) & 0xFFFFFFFFFFFFFFF0;
  if (!v176 || v177 == 0)
    goto LABEL_338;
  v179 = 4 * v173;
  switch(WORD1(v232))
  {
    case 0x18u:
      v177 = (unint64_t)malloc_type_malloc((v179 + 192), 0x86DE1735uLL);
      if (!v177)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v224 = 136315394;
          *(_QWORD *)&v224[4] = "DlsFile.cpp";
          *(_WORD *)&v224[12] = 1024;
          *(_DWORD *)&v224[14] = 584;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to allocate data for wave", v224, 0x12u);
        }
        v205 = __cxa_allocate_exception(4uLL);
        *v205 = -108;
      }
      NativeInt24ToFloat32_Portable();
      goto LABEL_324;
    case 0x10u:
      v177 = (unint64_t)malloc_type_malloc((v179 + 192), 0xFF777769uLL);
      if (!v177)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v224 = 136315394;
          *(_QWORD *)&v224[4] = "DlsFile.cpp";
          *(_WORD *)&v224[12] = 1024;
          *(_DWORD *)&v224[14] = 566;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to allocate data for wave", v224, 0x12u);
        }
        v204 = __cxa_allocate_exception(4uLL);
        *v204 = -108;
      }
      NativeInt16ToFloat32Scaled_ARM();
LABEL_324:
      free(*(void **)((char *)&v232 + 4));
      *(_QWORD *)((char *)&v232 + 4) = v177;
      break;
    case 8u:
      v180 = HIDWORD(v232) + 1;
      v181 = HIDWORD(v232) / (WORD1(v232) >> 3);
      do
      {
        LOBYTE(v52) = *(_BYTE *)(v174 + --v181);
        v52 = ((double)*(unint64_t *)&v52 + -128.0) * 0.0078125;
        *(float *)&v52 = v52;
        *(_DWORD *)(v177 + 4 * v181) = LODWORD(v52);
        --v180;
      }
      while (v180 > 1);
      break;
  }
  if ((v212 & 1) != 0)
  {
    v188 = *(_DWORD *)(v8 + 172);
    v189 = *(_DWORD *)(v8 + 176) + v188;
    if (v188 >= (int)v173)
      v190 = v173;
    else
      v190 = *(_DWORD *)(v8 + 172);
    if (v189 >= (int)v173)
      v189 = v173;
    if (v189 <= v190)
    {
      v193 = 0;
      v194 = 32;
      do
      {
        v195 = (_QWORD *)(v177 + 4 * (v193 + v173));
        *v195 = 0;
        v195[1] = 0;
        v193 += 4;
        v194 -= 4;
      }
      while (v194);
    }
    else
    {
      v191 = 0;
      v192 = 32;
      do
      {
        *(_DWORD *)(v177 + 4 * (v191 + v189)) = *(_DWORD *)(v177 + 4 * (v191 + v190));
        ++v191;
        --v192;
      }
      while (v192);
    }
  }
  HIDWORD(v232) = 4 * v173;
  WORD1(v232) = 32;
LABEL_338:
  WaveInfo::operator=(v8 + 64, (uint64_t)buf);
  *(_BYTE *)(v8 + 57) = 1;
LABEL_339:
  v196 = v239;
  v10 = v210;
  if (v239)
  {
    v197 = (unint64_t *)&v239->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v47 = v214;
LABEL_345:
  if (v47)
  {
    v199 = (unint64_t *)&v47->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v185 = (std::__shared_weak_count *)v217;
  if (v217)
  {
    v201 = (unint64_t *)(v217 + 8);
    do
      v187 = __ldaxr(v201);
    while (__stlxr(v187 - 1, v201));
    goto LABEL_316;
  }
LABEL_318:
  *(_QWORD *)v10 = v8;
  return v8;
}

void sub_210AC199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;

  if (a2)
  {
    v46 = *(std::__shared_weak_count **)(v44 - 192);
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (a18)
    {
      v49 = (unint64_t *)&a18->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
        std::__shared_weak_count::__release_weak(a18);
      }
    }
    if (a24)
    {
      v51 = (unint64_t *)&a24->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
        std::__shared_weak_count::__release_weak(a24);
      }
    }
    __cxa_begin_catch(exception_object);
    do
    {
      v53 = __ldaxr(v43);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v43));
    if (!v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_210AC1EF0()
{
  __cxa_end_catch();
  JUMPOUT(0x210AC1F04);
}

uint64_t std::vector<PoolCue>::__push_back_slow_path<PoolCue>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PoolCue>>(v7);
  else
    v8 = 0;
  __p = (void *)v7;
  v12 = v7 + 24 * v2;
  v14 = v7 + 24 * v8;
  PoolCue::PoolCue(v12, a2);
  v13 = v12 + 24;
  std::vector<PoolCue>::__swap_out_circular_buffer(a1, &__p);
  v9 = a1[1];
  if (__p)
    operator delete(__p);
  return v9;
}

void sub_210AC2004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PoolTable::AddSoundFontWave(PoolTable *this, uint64_t a2, SFCollection *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  int v13;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2;
  v13 = 0;
  v5 = *((_QWORD *)this + 3);
  if (v5 >= *((_QWORD *)this + 4))
  {
    v6 = std::vector<PoolCue>::__push_back_slow_path<PoolCue>((uint64_t *)this + 2, (uint64_t)&v9);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_BYTE *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 12) = 0;
    *(_DWORD *)(v5 + 16) = a2;
    v6 = v5 + 24;
    *(_DWORD *)(v5 + 20) = 0;
  }
  *((_QWORD *)this + 3) = v6;
  v7 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) - v7 > (unint64_t)a2)
    *(_BYTE *)(v7 + a2) = 0;
  return a2;
}

void SamplerPartElement::~SamplerPartElement(const void **this)
{
  ausdk::AUElement::~AUElement(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t VPEncoderWrapper::GetPropertyInfo(AudioCodec *this, AudioCodecPropertyID a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v11, (uint64_t)(this + 25), 0);
  if (*this)
    result = AudioCodecGetPropertyInfo(*this, a2, a3, a4);
  else
    result = 561214580;
  v9 = (unsigned int *)(v11 + 4);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  return result;
}

void sub_210AC2150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  v10 = (unsigned int *)(a10 + 4);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  _Unwind_Resume(a1);
}

uint64_t VPEncoderWrapper::GetProperty(AudioCodec *this, AudioCodecPropertyID a2, void *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;

  if (a3)
  {
    CADeprecated::CAAtomicSignaler::PersistentTryer::PersistentTryer(&v12, (uint64_t)(this + 25), 0);
    if (*this)
      result = AudioCodecGetProperty(*this, a2, a4, a3);
    else
      result = 561214580;
    v10 = (unsigned int *)(v12 + 4);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
  }
  else
  {
    v13 = 0;
    return VPEncoderWrapper::GetPropertyInfo(this, a2, a4, &v13);
  }
  return result;
}

void sub_210AC2210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v9;
  unsigned int v10;

  v9 = (unsigned int *)(a9 + 4);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  _Unwind_Resume(a1);
}

uint64_t VPEncoderWrapper::SetProperty(VPEncoderWrapper *this, AudioCodecPropertyID a2, const void *a3, UInt32 a4)
{
  unsigned int *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  OpaqueAudioComponentInstance *v12;
  uint64_t Property;
  NSObject *v14;
  const char *v15;
  unsigned int v16;
  UInt32 ioPropertyDataSize;
  int outPropertyData;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned int *)((char *)this + 112);
  v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 14) + 16))((char *)this + 112);
  v10 = v8 + 22;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  while (*((_DWORD *)this + 51))
    usleep(0x1F4u);
  v12 = *(OpaqueAudioComponentInstance **)this;
  if (!*(_QWORD *)this)
  {
    Property = 561214580;
    goto LABEL_20;
  }
  outPropertyData = 0;
  if (HIBYTE(a2) != 94)
  {
    ioPropertyDataSize = 4;
    Property = AudioCodecGetProperty(v12, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 136315394;
      v21 = "VPEncoderWrapper.cpp";
      v22 = 1024;
      v23 = 266;
      v14 = MEMORY[0x24BDACB70];
      v15 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not get codec property";
      goto LABEL_19;
    }
    v12 = *(OpaqueAudioComponentInstance **)this;
    if (outPropertyData)
    {
      AudioCodecUninitialize(v12);
      v12 = *(OpaqueAudioComponentInstance **)this;
    }
  }
  Property = AudioCodecSetProperty(v12, a2, a4, a3);
  if ((_DWORD)Property)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v21 = "VPEncoderWrapper.cpp";
    v22 = 1024;
    v23 = 274;
    v14 = MEMORY[0x24BDACB70];
    v15 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not set codec property";
    goto LABEL_19;
  }
  if (outPropertyData)
  {
    Property = AudioCodecInitialize(*(AudioCodec *)this, 0, 0, 0, 0);
    if (!(_DWORD)Property || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_DWORD *)buf = 136315394;
    v21 = "VPEncoderWrapper.cpp";
    v22 = 1024;
    v23 = 280;
    v14 = MEMORY[0x24BDACB70];
    v15 = "%25s:%-5d  vpencoderwrapper::setencoderproperty: could not intialize codec";
LABEL_19:
    _os_log_impl(&dword_210A23000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    goto LABEL_20;
  }
  Property = 0;
  do
LABEL_20:
    v16 = __ldaxr(v10);
  while (__stlxr(v16 - 1, v10));
  if (v9)
    (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
  return Property;
}

void sub_210AC24C4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

double FilterState::ResetToDefaults(FilterState *this)
{
  double result;

  *((_BYTE *)this + 48) = 1;
  *((_DWORD *)this + 23) = 40;
  result = -32.0000084;
  *((_QWORD *)this + 12) = 0xC0400000469C4000;
  return result;
}

uint64_t FilterState::GetProperty(FilterState *this, int a2, _DWORD *a3)
{
  int v3;

  switch(a2)
  {
    case 4162:
      v3 = *((_DWORD *)this + 25);
LABEL_7:
      *a3 = v3;
      return 1;
    case 4161:
      v3 = *((_DWORD *)this + 24);
      goto LABEL_7;
    case 4160:
      *a3 = *((_DWORD *)this + 23);
      return 1;
  }
  return ComponentState::GetProperty(this, a2, a3);
}

uint64_t FilterState::SetProperty(FilterState *this, int a2, float *a3)
{
  CAXException *exception;
  _BYTE v5[16];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  _BYTE *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v7 = "FilterState.cpp";
      v8 = 1024;
      v9 = 93;
      v10 = 2080;
      v11 = v5;
      v12 = 2080;
      v13 = "FilterState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FilterState::SetProperty: NULL property value", -10851);
  }
  switch(a2)
  {
    case 4162:
      FilterState::SetResonance((uint64_t)this, *a3);
      return 1;
    case 4161:
      FilterState::SetCutoffFreq((uint64_t)this, *a3);
      return 1;
    case 4160:
      FilterState::SetFilterType(this, *(_DWORD *)a3);
      return 1;
  }
  return ComponentState::SetProperty(this, a2, a3);
}

void sub_210AC2700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FilterState::Save(FilterState *this, CACFDictionary *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  FilterState *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v5 = 136315650;
    v6 = "FilterState.cpp";
    v7 = 1024;
    v8 = 113;
    v9 = 2048;
    v10 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::Save(this=%p)", (uint8_t *)&v5, 0x1Cu);
  }
  ComponentState::Save((const __CFString **)this, a2);
  if (*((_DWORD *)this + 23) != 40)
    CACFDictionary::AddUInt32(a2, CFSTR("type"));
  CACFDictionary::AddFloat32(a2, CFSTR("cutoff"), *((float *)this + 24));
  CACFDictionary::AddFloat32(a2, CFSTR("resonance"), *((float *)this + 25));
  return 0;
}

uint64_t FilterState::Restore(FilterState *this, const CACFDictionary *a2)
{
  uint64_t v4;
  int v6;

  v4 = ComponentState::Restore(this, a2);
  if (*(_QWORD *)a2)
  {
    if (CACFDictionary::GetUInt32(a2, CFSTR("type"), (unsigned int *)&v6))
      FilterState::SetFilterType(this, v6);
    if (CACFDictionary::GetFloat32(a2, CFSTR("cutoff"), (float *)&v6))
      FilterState::SetCutoffFreq((uint64_t)this, *(float *)&v6);
    if (CACFDictionary::GetFloat32(a2, CFSTR("resonance"), (float *)&v6))
      FilterState::SetResonance((uint64_t)this, *(float *)&v6);
  }
  return v4;
}

void FilterState::~FilterState(FilterState *this)
{
  *(_QWORD *)this = &off_24CA8B060;
  SamplerState::~SamplerState(this);
}

{
  *(_QWORD *)this = &off_24CA8B060;
  SamplerState::~SamplerState(this);
  JUMPOUT(0x212BCDF50);
}

_DWORD *FilterState::SetFilterType(_DWORD *this, int a2)
{
  CAXException *exception;
  _BYTE v3[16];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  _BYTE *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 47) <= 0xFFFFFFF8)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v3, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v5 = "FilterState.cpp";
      v6 = 1024;
      v7 = 171;
      v8 = 2080;
      v9 = v3;
      v10 = 2080;
      v11 = "FilterState::SetFilterType: Invalid filter type";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "FilterState::SetFilterType: Invalid filter type", -10851);
  }
  if (this[23] != a2)
  {
    this[23] = a2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4160, 0);
  }
  return this;
}

void sub_210AC2A84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t FilterState::SetCutoffFreq(uint64_t this, float a2)
{
  uint64_t v2;
  float v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(float *)(this + 96) != a2)
  {
    v2 = this;
    v3 = fminf(fmaxf(a2, 20.0), 20000.0);
    *(float *)(this + 96) = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315650;
      v5 = "FilterState.cpp";
      v6 = 1024;
      v7 = 182;
      v8 = 2048;
      v9 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::SetCutoffFreq: %f", (uint8_t *)&v4, 0x1Cu);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4161, 0);
  }
  return this;
}

uint64_t FilterState::SetResonance(uint64_t this, float a2)
{
  uint64_t v2;
  float v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(float *)(this + 100) != a2)
  {
    v2 = this;
    v3 = fminf(fmaxf(a2, -3.0), 40.0);
    *(float *)(this + 100) = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      v4 = 136315650;
      v5 = "FilterState.cpp";
      v6 = 1024;
      v7 = 191;
      v8 = 2048;
      v9 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d FilterState::SetResonance:  %f", (uint8_t *)&v4, 0x1Cu);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4162, 0);
  }
  return this;
}

void LayerState::LoadFromEXS24GroupAndDefaults(uint64_t a1, char *a2, int *a3, _DWORD *a4)
{
  EnvelopeState *v7;
  unint64_t v8;
  EnvelopeState **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  EnvelopeState **v17;
  unint64_t v18;
  char *v19;
  char *v20;
  EnvelopeState *v21;
  EnvelopeState *v22;
  unint64_t v23;
  EnvelopeState **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  EnvelopeState **v32;
  unint64_t v33;
  char *v34;
  char *v35;
  EnvelopeState *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  _BOOL4 v53;
  NSObject *v54;
  const char *v55;
  char v56;
  int v57;
  char *v58;
  LayerState *v59;
  int v60;
  NSObject *v61;
  const char *v62;
  uint32_t v63;
  NSObject *v64;
  const char *v65;
  uint32_t v66;
  int v67;
  int v68;
  NSObject *v69;
  const char *v70;
  uint32_t v71;
  uint64_t v72;
  unsigned int (****v73)(void);
  unsigned int (****v74)(void);
  unsigned int (****v75)(void);
  unsigned int (****v76)(void);
  EnvelopeState **v77;
  int *v78;
  uint64_t v79;
  int *v80;
  unint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  NSObject *v85;
  const char *v86;
  os_log_type_t v87;
  uint32_t v88;
  NSObject *v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  int v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  EnvelopeState *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  double v106;
  unsigned int v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  LayerState *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  LayerState *v124;
  __int16 v125;
  EnvelopeState *v126;
  float v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  __int16 v131;
  EnvelopeState *v132;
  int v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  int v142;
  int v143;
  int v144;
  float v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  EnvelopeState *v153;
  float v154;
  float v155;
  float v156;
  float v157;
  BOOL v158;
  float v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  float v168;
  _BOOL4 v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  _BOOL4 v182;
  float v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  float v188;
  _BOOL4 v189;
  float v190;
  int v191;
  int v192;
  float v193;
  float v194;
  float v195;
  int v196;
  int v197;
  int *v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  char v204;
  LayerState *v205;
  char v206;
  uint64_t *v207;
  uint64_t *v208;
  char *v209;
  char *v210;
  unint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  _BOOL4 v221;
  char *v222;
  float Level;
  float Time;
  float v225;
  float v226;
  float v227;
  float v228;
  int v229;
  int *v230;
  int *v231;
  char *v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  int v238;
  int v239;
  int *v240;
  int v241;
  unsigned __int16 *v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  unint64_t v247;
  int v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  _BOOL4 v254;
  uint64_t v255;
  _BOOL4 v256;
  BOOL v257;
  int v258;
  __int16 v259;
  int v260;
  signed __int16 v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  _BOOL4 v269;
  int v270;
  int v271;
  int v272;
  NSObject *v273;
  NSObject *v274;
  const char *v275;
  int v276;
  int v277;
  NSObject *v278;
  NSObject *v279;
  int v280;
  NSObject *v281;
  int v282;
  _BOOL4 v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  int v291;
  int v292;
  int v293;
  int v294;
  float v295;
  float v296;
  float v297;
  float v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  float v303;
  float v304;
  float v305;
  int v306;
  _BOOL4 v307;
  int v308;
  int v309;
  int v310;
  int v311;
  NSObject *v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  float v318;
  NSObject *v319;
  const char *i;
  uint8_t *v321;
  int v322;
  float *v323;
  unsigned int (***v325)(void);
  EnvelopeState *v326;
  EnvelopeState *v327;
  unsigned int (***v328)(void);
  int *v329;
  int *v330;
  int v331;
  char v332;
  int v333;
  LayerState *v334;
  BOOL v335[4];
  uint8_t v336[4];
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  _BYTE buf[40];
  uint64_t v344;
  _DWORD v345[2];
  uint64_t v346;

  v346 = *MEMORY[0x24BDAC8D0];
  v7 = (EnvelopeState *)operator new();
  EnvelopeState::EnvelopeState(v7, 0, (SamplerState *)a1, 1);
  v9 = *(EnvelopeState ***)(a1 + 480);
  v8 = *(_QWORD *)(a1 + 488);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD *)(a1 + 472);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      goto LABEL_611;
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
    else
      v16 = 0;
    v17 = (EnvelopeState **)(v15 + 8 * v12);
    v18 = v15 + 8 * v16;
    *v17 = v7;
    v10 = v17 + 1;
    v20 = *(char **)(a1 + 472);
    v19 = *(char **)(a1 + 480);
    if (v19 != v20)
    {
      do
      {
        v21 = (EnvelopeState *)*((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = *(char **)(a1 + 472);
    }
    *(_QWORD *)(a1 + 472) = v17;
    *(_QWORD *)(a1 + 480) = v10;
    *(_QWORD *)(a1 + 488) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v7;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a1 + 480) = v10;
  ++*((_DWORD *)v7 + 2);
  v22 = (EnvelopeState *)operator new();
  EnvelopeState::EnvelopeState(v22, 1, (SamplerState *)a1, 0);
  v24 = *(EnvelopeState ***)(a1 + 480);
  v23 = *(_QWORD *)(a1 + 488);
  if ((unint64_t)v24 < v23)
  {
    *v24 = v22;
    v25 = v24 + 1;
    goto LABEL_33;
  }
  v26 = *(_QWORD *)(a1 + 472);
  v27 = ((uint64_t)v24 - v26) >> 3;
  if ((unint64_t)(v27 + 1) >> 61)
LABEL_611:
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v28 = v23 - v26;
  v29 = v28 >> 2;
  if (v28 >> 2 <= (unint64_t)(v27 + 1))
    v29 = v27 + 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v30)
    v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v30);
  else
    v31 = 0;
  v32 = (EnvelopeState **)(v30 + 8 * v27);
  v33 = v30 + 8 * v31;
  *v32 = v22;
  v25 = v32 + 1;
  v35 = *(char **)(a1 + 472);
  v34 = *(char **)(a1 + 480);
  if (v34 != v35)
  {
    do
    {
      v36 = (EnvelopeState *)*((_QWORD *)v34 - 1);
      v34 -= 8;
      *--v32 = v36;
    }
    while (v34 != v35);
    v34 = *(char **)(a1 + 472);
  }
  *(_QWORD *)(a1 + 472) = v32;
  *(_QWORD *)(a1 + 480) = v25;
  *(_QWORD *)(a1 + 488) = v33;
  if (v34)
    operator delete(v34);
LABEL_33:
  *(_QWORD *)(a1 + 480) = v25;
  ++*((_DWORD *)v22 + 2);
  EnvelopeState::SetTime(**(EnvelopeState ***)(a1 + 472), 3u, 0.001);
  EnvelopeState::SetTime(**(EnvelopeState ***)(a1 + 472), 5u, 0.001);
  EnvelopeState::SetTime(*(EnvelopeState **)(*(_QWORD *)(a1 + 472) + 8), 3u, 0.001);
  EnvelopeState::SetTime(*(EnvelopeState **)(*(_QWORD *)(a1 + 472) + 8), 5u, 0.001);
  v37 = operator new();
  SamplerState::SamplerState((SamplerState *)v37, 7, 0, (SamplerState *)a1, 0x20u);
  *(_QWORD *)v37 = &off_24CA937A0;
  *(_QWORD *)(v37 + 88) = 0x1B10000000;
  *(_QWORD *)(v37 + 96) = 0x40A000003C23D70ALL;
  v39 = *(uint64_t **)(a1 + 504);
  v38 = *(_QWORD *)(a1 + 512);
  if ((unint64_t)v39 >= v38)
  {
    v41 = *(_QWORD *)(a1 + 496);
    v42 = ((uint64_t)v39 - v41) >> 3;
    if ((unint64_t)(v42 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v43 = v38 - v41;
    v44 = v43 >> 2;
    if (v43 >> 2 <= (unint64_t)(v42 + 1))
      v44 = v42 + 1;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    if (v45)
      v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v45);
    else
      v46 = 0;
    v47 = (uint64_t *)(v45 + 8 * v42);
    v48 = v45 + 8 * v46;
    *v47 = v37;
    v40 = v47 + 1;
    v50 = *(char **)(a1 + 496);
    v49 = *(char **)(a1 + 504);
    if (v49 != v50)
    {
      do
      {
        v51 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v47 = v51;
      }
      while (v49 != v50);
      v49 = *(char **)(a1 + 496);
    }
    *(_QWORD *)(a1 + 496) = v47;
    *(_QWORD *)(a1 + 504) = v40;
    *(_QWORD *)(a1 + 512) = v48;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *v39 = v37;
    v40 = v39 + 1;
  }
  *(_QWORD *)(a1 + 504) = v40;
  ++*(_DWORD *)(v37 + 8);
  LFOState::SetDelay(**(float ***)(a1 + 496), 0.0);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 184) + 64))(*(_QWORD *)(a1 + 184), 0);
  LayerState::CreateDefaultConnections(a1, sDefaultEXS24Connections);
  *(_DWORD *)v335 = 0;
  if (*a2)
    LayerState::SetGain((float *)a1, (float)*a2);
  if (a2[1])
    LayerState::SetPan((LayerState *)a1, (float)a2[1] / 200.0);
  if (a2[2])
    LayerState::SetVoiceCount((_DWORD *)a1, a2[2]);
  v52 = a2[3];
  v53 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
  if ((v52 & 1) != 0)
  {
    if (!v53)
      goto LABEL_61;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 216;
    v54 = MEMORY[0x24BDACB70];
    v55 = "%25s:%-5d LayerState::LoadFromEXS24Group: stereo output";
  }
  else
  {
    if (!v53)
      goto LABEL_61;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 219;
    v54 = MEMORY[0x24BDACB70];
    v55 = "%25s:%-5d LayerState::LoadFromEXS24Group: mono output";
  }
  _os_log_impl(&dword_210A23000, v54, OS_LOG_TYPE_DEBUG, v55, buf, 0x12u);
LABEL_61:
  v56 = a2[3];
  if ((v56 & 2) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 222;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: select by note", buf, 0x12u);
    v56 = a2[3];
  }
  if ((v56 & 4) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 225;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: select toggle", buf, 0x12u);
    v56 = a2[3];
  }
  if ((v56 & 8) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 228;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: (select?) from regions", buf, 0x12u);
    v56 = a2[3];
  }
  if ((v56 & 0x10) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 231;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: use ADSR", buf, 0x12u);
    v56 = a2[3];
  }
  if ((v56 & 0x20) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 234;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: muted", buf, 0x12u);
    v56 = a2[3];
  }
  if ((v56 & 0x40) != 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 237;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: decay start OFF", buf, 0x12u);
  }
  v330 = a3;
  v57 = a2[8];
  if (v57 != -1 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 242;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v57;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Group: singleOutput: %d", buf, 0x18u);
  }
  v329 = (int *)a2;
  v334 = (LayerState *)a1;
  if (a2[9])
    LayerState::SetCoarseTuning((_DWORD *)a1, a2[9]);
  if (a2[10])
    LayerState::SetFineTuning((float *)a1, (float)a2[10]);
  LayerState::SetKeyOffset((LayerState *)a1, a2[72]);
  v58 = a2;
  if (a2[74])
  {
    LayerState::SetOutputScope((_DWORD *)a1, a2[74]);
    v58 = a2;
  }
  v59 = (LayerState *)a1;
  switch(v58[84])
  {
    case 1:
      LayerState::SetSelectionKeyNum((LayerState *)a1, v58[75]);
      goto LABEL_93;
    case 2:
      LayerState::SetSelectionLayerIndex((LayerState *)a1, *((_DWORD *)v58 + 20));
      goto LABEL_93;
    case 3:
      LayerState::SetSelectionController(a1, v58[85]);
      LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 86), *((char *)v329 + 87));
      goto LABEL_93;
    case 4:
      LayerState::SetSelectionController(a1, 224);
      LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 94), *((char *)v329 + 95));
LABEL_93:
      v58 = (char *)v329;
      v59 = (LayerState *)a1;
      goto LABEL_99;
    case 5:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_99;
      v60 = v58[90];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 272;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v60;
      v61 = MEMORY[0x24BDACB70];
      v62 = "%25s:%-5d Select By MIDI Channel (%u) not supported";
      v63 = 24;
      break;
    case 8:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_99;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 275;
      v61 = MEMORY[0x24BDACB70];
      v62 = "%25s:%-5d Select By Number not supported";
      v63 = 18;
      break;
    default:
      goto LABEL_99;
  }
  _os_log_impl(&dword_210A23000, v61, OS_LOG_TYPE_DEFAULT, v62, buf, v63);
LABEL_99:
  switch(v58[92])
  {
    case 1:
      LayerState::SetSelectionKeyNum(v59, v58[75]);
      goto LABEL_108;
    case 2:
      LayerState::SetSelectionLayerIndex(v59, *((_DWORD *)v58 + 20));
      goto LABEL_108;
    case 3:
      if (*((_DWORD *)v59 + 28))
        goto LABEL_112;
      LayerState::SetSelectionController((uint64_t)v59, v58[85]);
      LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 86), *((char *)v329 + 87));
      goto LABEL_108;
    case 4:
      if (*((_DWORD *)v59 + 28))
        goto LABEL_112;
      LayerState::SetSelectionController((uint64_t)v59, 224);
      LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 94), *((char *)v329 + 95));
LABEL_108:
      v58 = (char *)v329;
      v59 = (LayerState *)a1;
      goto LABEL_112;
    case 5:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_112;
      v67 = v58[90];
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 300;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v67;
      v64 = MEMORY[0x24BDACB70];
      v65 = "%25s:%-5d Select By MIDI Channel (%u) not supported";
      v66 = 24;
      goto LABEL_111;
    case 8:
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_112;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 303;
      v64 = MEMORY[0x24BDACB70];
      v65 = "%25s:%-5d Select By Number not supported";
      v66 = 18;
LABEL_111:
      _os_log_impl(&dword_210A23000, v64, OS_LOG_TYPE_DEFAULT, v65, buf, v66);
LABEL_112:
      switch(v58[93])
      {
        case 1:
          LayerState::SetSelectionKeyNum(v59, v58[75]);
          goto LABEL_119;
        case 2:
          LayerState::SetSelectionLayerIndex(v59, *((_DWORD *)v58 + 20));
          goto LABEL_119;
        case 3:
          if (*((_DWORD *)v59 + 28))
            goto LABEL_125;
          LayerState::SetSelectionController((uint64_t)v59, v58[85]);
          LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 86), *((char *)v329 + 87));
          goto LABEL_119;
        case 4:
          if (*((_DWORD *)v59 + 28))
            goto LABEL_125;
          LayerState::SetSelectionController((uint64_t)v59, 224);
          LayerState::SetSelectionControllerRange((LayerState *)a1, *((char *)v329 + 94), *((char *)v329 + 95));
LABEL_119:
          v58 = (char *)v329;
          v59 = (LayerState *)a1;
          goto LABEL_125;
        case 5:
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_125;
          v68 = v58[90];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 328;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v68;
          v69 = MEMORY[0x24BDACB70];
          v70 = "%25s:%-5d Select By MIDI Channel (%u) not supported";
          v71 = 24;
          goto LABEL_124;
        case 8:
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_125;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 331;
          v69 = MEMORY[0x24BDACB70];
          v70 = "%25s:%-5d Select By Number not supported";
          v71 = 18;
LABEL_124:
          _os_log_impl(&dword_210A23000, v69, OS_LOG_TYPE_DEFAULT, v70, buf, v71);
LABEL_125:
          LayerState::SetKeyRange(v59, v58[88], v58[89]);
          v72 = *(_QWORD *)(a1 + 24);
          v323 = **(float ***)(a1 + 496);
          v73 = *(unsigned int (*****)(void))(v72 + 208);
          v74 = *(unsigned int (*****)(void))(v72 + 216);
          if (v73 == v74)
          {
            v328 = 0;
            goto LABEL_134;
          }
          break;
        default:
          goto LABEL_125;
      }
      break;
    default:
      goto LABEL_112;
  }
  while (1)
  {
    v328 = *v73;
    if ((***v73)() == 268435696)
      break;
    if (++v73 == v74)
    {
      v328 = 0;
      break;
    }
  }
  v75 = *(unsigned int (*****)(void))(v72 + 208);
  v76 = *(unsigned int (*****)(void))(v72 + 216);
  while (v75 != v76)
  {
    v325 = *v75;
    if ((***v75)() == 268435697)
      goto LABEL_135;
    ++v75;
  }
LABEL_134:
  v325 = 0;
LABEL_135:
  v345[0] = (**(uint64_t (***)(float *))v323)(v323);
  v345[1] = 320;
  v77 = (EnvelopeState **)*((_QWORD *)v334 + 59);
  v326 = v77[1];
  v327 = *v77;
  v78 = v330;
  if (*v330 >= 1)
  {
    v79 = 0;
    v322 = 0;
    v331 = 0;
    v80 = v330 + 1;
    v81 = 136315650;
    while (1)
    {
      v82 = *((unsigned __int8 *)v78 + v79 + 4);
      v83 = *((__int16 *)v78 + v79 + 52);
      v84 = *((__int16 *)v78 + v79 + 52);
      switch(*((_BYTE *)v78 + v79 + 4))
      {
        case 1:
        case 5:
        case 7:
        case 0xA:
        case 0xE:
        case 0xF:
        case 0x14:
        case 0x2D:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x37:
        case 0x3F:
        case 0x5B:
        case 0x5E:
        case 0x5F:
        case 0x63:
        case 0x64:
        case 0x65:
        case 0xA7:
        case 0xAB:
          goto LABEL_371;
        case 2:
        case 6:
        case 0xC:
        case 0x15:
        case 0x16:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x38:
        case 0x39:
        case 0x41:
        case 0x42:
        case 0x43:
        case 0x44:
        case 0x45:
        case 0x4A:
        case 0x57:
        case 0x58:
        case 0x60:
        case 0x66:
        case 0x67:
        case 0x68:
        case 0x69:
        case 0x6A:
        case 0x6B:
        case 0x6C:
        case 0x6D:
        case 0x6E:
        case 0x6F:
        case 0x70:
        case 0x71:
        case 0x72:
        case 0x73:
        case 0x74:
        case 0x75:
        case 0x76:
        case 0x77:
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
        case 0x7E:
        case 0x7F:
        case 0x80:
        case 0x81:
        case 0x82:
        case 0x83:
        case 0x84:
        case 0x85:
        case 0x86:
        case 0x87:
        case 0x88:
        case 0x89:
        case 0x8A:
        case 0x8B:
        case 0x8C:
        case 0x8D:
        case 0x8E:
        case 0x8F:
        case 0x90:
        case 0x91:
        case 0x92:
        case 0x93:
        case 0x94:
        case 0x95:
        case 0x96:
        case 0x97:
        case 0x98:
        case 0x99:
        case 0x9A:
        case 0x9B:
        case 0x9C:
        case 0x9D:
        case 0x9E:
        case 0x9F:
        case 0xA0:
        case 0xA1:
        case 0xA2:
        case 0xA3:
        case 0xA4:
        case 0xA8:
        case 0xA9:
          goto LABEL_149;
        case 3:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v112 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          *(_DWORD *)buf = 224;
          *(_DWORD *)&buf[4] = v112 | 0xB00000;
          *(float *)&buf[8] = -(float)(100 * v83);
          *(float *)&buf[12] = (float)(100 * v83);
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 4:
          if (v83 == -1)
            goto LABEL_371;
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 373;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v83;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d LayerState::LoadFromEXS24Defaults: id_PitchBendDown = %d", buf, 0x18u);
          }
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 374;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d EXS24 Pitch Bend Down not supported";
          goto LABEL_311;
        case 8:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v113 = (***((uint64_t (****)(_QWORD))v334 + 24))(*((_QWORD *)v334 + 24));
          *(_DWORD *)buf = 300;
          *(_DWORD *)&buf[4] = v113 | 0x100000;
          *(float *)&buf[8] = -(float)v83;
          *(float *)&buf[12] = (float)v83;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 9:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 393;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d CHECK ME (id_VelocityCurve)";
          goto LABEL_217;
        case 0xB:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 396;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d CHECK ME (id_VelocityADSR)";
          goto LABEL_217;
        case 0xD:
        case 0x17:
        case 0x18:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 401;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d CHECK ME (id_ModXXX)";
          goto LABEL_217;
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_371;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 415;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v82;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d LayerState::LoadFromEXS24Defaults:IGNORED param %u";
          v87 = OS_LOG_TYPE_DEBUG;
          goto LABEL_141;
        case 0x1D:
          FilterState::SetResonance(*((_QWORD *)v334 + 23), fminf(fmaxf((float)((float)((float)(int)v84 * 0.001) * 40.0)+ (float)((float)((float)*((char *)v329 + 43) * 40.0) / 100.0), -3.0), 40.0));
          break;
        case 0x1E:
          v90 = exp2f((float)v83 / 100.0) * 20.0;
          v91 = exp2f((float)*((char *)v329 + 41) / 10.0);
          FilterState::SetCutoffFreq(*((_QWORD *)v334 + 23), fminf(fmaxf(v90 * v91, 20.0), 20000.0));
          break;
        case 0x2C:
          (*(void (**)(_QWORD, BOOL))(**((_QWORD **)v334 + 23) + 64))(*((_QWORD *)v334 + 23), v83 != 0);
          break;
        case 0x2E:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v114 = (***((uint64_t (****)(_QWORD))v334 + 23))(*((_QWORD *)v334 + 23));
          *(_DWORD *)buf = 300;
          *(_DWORD *)&buf[4] = v114 | 0x1500000;
          *(float *)&buf[8] = -(float)((float)((float)(int)v84 * 0.001) * 12000.0);
          *(float *)&buf[12] = (float)((float)(int)v84 * 0.001) * 12000.0;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x32:
        case 0x33:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 458;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d CHECK ME  (id_StartXXXLinear)";
LABEL_217:
          v87 = OS_LOG_TYPE_DEBUG;
          goto LABEL_312;
        case 0x34:
          if ((int)v84 < 1)
            goto LABEL_371;
          v115 = *v78;
          if ((int)v115 < 1)
          {
            v118 = 0;
            v117 = v334;
          }
          else
          {
            v116 = 0;
            v117 = v334;
            while (*((_BYTE *)v80 + v116) != 48)
            {
              if (v115 == ++v116)
              {
                v118 = 0;
                goto LABEL_349;
              }
            }
            v118 = *((_WORD *)v78 + v116 + 52);
          }
LABEL_349:
          v177 = v345[v118];
          v178 = (***((uint64_t (****)(_QWORD))v117 + 23))(*((_QWORD *)v117 + 23));
          *(_DWORD *)buf = v177;
          *(_DWORD *)&buf[4] = v178 | 0x1500000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = (float)((float)v83 * 12000.0) * 0.0078125;
          *(_OWORD *)&buf[16] = xmmword_210B0A120;
          *(_QWORD *)&buf[32] = 0;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x35:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v92 = *v78;
          if ((int)v92 < 1)
            goto LABEL_163;
          v93 = 0;
          while (*((_BYTE *)v80 + v93) != 48)
          {
            if (v92 == ++v93)
            {
LABEL_163:
              v94 = 0;
              goto LABEL_330;
            }
          }
          v94 = *((_WORD *)v78 + v93 + 52);
LABEL_330:
          v162 = v345[v94];
          v163 = (***((uint64_t (****)(_QWORD))v334 + 23))(*((_QWORD *)v334 + 23));
          *(_DWORD *)buf = v162;
          *(_DWORD *)&buf[4] = v163 | 0x1500000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = (float)((float)(int)v84 * 12000.0) * 0.0078125;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x36:
          v119 = *v78;
          if ((int)v119 < 1)
            goto LABEL_231;
          v120 = 0;
          while (*((_BYTE *)v80 + v120) != 55)
          {
            if (v119 == ++v120)
            {
LABEL_231:
              v121 = 0;
              goto LABEL_323;
            }
          }
          v121 = *((unsigned __int16 *)v78 + v120 + 52);
LABEL_323:
          if (!((unsigned __int16)v84 | (unsigned __int16)v121))
            goto LABEL_371;
          v160 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
          v161 = (***((uint64_t (****)(_QWORD))v334 + 23))(*((_QWORD *)v334 + 23));
          *(_DWORD *)buf = v160;
          *(_DWORD *)&buf[4] = v161 | 0x1500000;
          *(float32x2_t *)&buf[8] = vdiv_f32(vmul_f32(vcvt_f32_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v83, v121), 0x10uLL), 0x10uLL)), (float32x2_t)vdup_n_s32(0x463B8000u)), (float32x2_t)vdup_n_s32(0x42C80000u));
          *(_OWORD *)&buf[16] = xmmword_210B0A180;
          *(_QWORD *)&buf[32] = 0;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x3A:
          if (v83 < 1)
            goto LABEL_371;
          v95 = (**(uint64_t (***)(float *))v323)(v323);
          v96 = (***((uint64_t (****)(_QWORD))v334 + 24))(*((_QWORD *)v334 + 24)) | 0x100000;
          v97 = -(float)((float)((float)(int)v84 * 0.001) * -42.0);
          if (v335[0])
            v97 = 0.0;
          *(_DWORD *)buf = v95;
          *(_DWORD *)&buf[4] = v96;
          *(float *)&buf[8] = v97;
          *(float *)&buf[12] = (float)((float)(int)v84 * 0.001) * -42.0;
          *(_DWORD *)&buf[16] = 1;
          *(_DWORD *)&buf[20] = v335[2];
          *(_OWORD *)&buf[24] = xmmword_210B0A190;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x3B:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v122 = *v78;
          if ((int)v122 < 1)
          {
            v125 = 0;
            v124 = v334;
          }
          else
          {
            v123 = 0;
            v124 = v334;
            while (*((_BYTE *)v80 + v123) != 49)
            {
              if (v122 == ++v123)
              {
                v125 = 0;
                goto LABEL_351;
              }
            }
            v125 = *((_WORD *)v78 + v123 + 52);
          }
LABEL_351:
          v179 = v125;
          v180 = v345[v125];
          v181 = (***((uint64_t (****)(_QWORD))v124 + 24))(*((_QWORD *)v124 + 24)) | 0x200000;
          v182 = v335[v179 + 2];
          v183 = -(float)((float)((float)v83 * 0.5) / 100.0);
          if (v335[v179])
            v183 = 0.0;
          *(_DWORD *)buf = v180;
          *(_DWORD *)&buf[4] = v181;
          *(float *)&buf[8] = v183;
          *(float *)&buf[12] = (float)((float)v83 * 0.5) / 100.0;
          *(_DWORD *)&buf[16] = 1;
          *(_DWORD *)&buf[20] = v182;
          *(_OWORD *)&buf[24] = 0uLL;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x3C:
          if ((v84 & 0x80000000) != 0)
          {
            v153 = LayerState::AddEnvelope((char **)v334);
            EnvelopeState::SetLevel(v153, 4u, 0.0);
            v154 = (double)(v83 + 10000) * 0.001;
            EnvelopeState::SetTime(v153, 3u, v154);
            v322 = (**(uint64_t (***)(EnvelopeState *))v153)(v153);
          }
          else
          {
            if (!*((_WORD *)v78 + v79 + 52))
              goto LABEL_371;
            v126 = LayerState::AddEnvelope((char **)v334);
            v127 = (double)v83 * 0.001;
            EnvelopeState::SetTime(v126, 1u, v127);
            EnvelopeState::SetTime(v126, 5u, 60.0);
            v322 = (**(uint64_t (***)(EnvelopeState *))v126)(v126);
          }
          break;
        case 0x3D:
          if (v83 == 34)
          {
            (*(void (**)(float *, _QWORD))(*(_QWORD *)v323 + 64))(v323, 0);
          }
          else
          {
            if ((int)v84 > 33)
            {
              LOWORD(v81) = lfoHzTab[v84 - 34];
              *(float *)&v81 = (double)v81 * 0.001;
            }
            else
            {
              *(float *)&v81 = 768.0 / (float)((float)tabBeatRate[v84] * 4.0);
            }
            LFOState::SetRate(v323, *(float *)&v81);
          }
          break;
        case 0x3E:
          v128 = ParamToLFOWaveform(*((__int16 *)v78 + v79 + 52), v335, &v335[2]);
          LFOState::SetWaveform(v323, v128);
          break;
        case 0x40:
          if ((v83 - 1) < 3)
            goto LABEL_171;
          if (v83 == 4)
          {
            v335[3] = 1;
LABEL_171:
            v335[1] = 1;
          }
          goto LABEL_371;
        case 0x46:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v129 = *v78;
          if ((int)v129 < 1)
            goto LABEL_249;
          v130 = 0;
          while (*((_BYTE *)v80 + v130) != 47)
          {
            if (v129 == ++v130)
            {
LABEL_249:
              v131 = 0;
              goto LABEL_355;
            }
          }
          v131 = *((_WORD *)v78 + v130 + 52);
LABEL_355:
          v184 = v131;
          v185 = v345[v131];
          v186 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          if (v84 >= 0x80)
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              goto LABEL_619;
            *(_DWORD *)v336 = 136315394;
            v337 = "EXS24_Utils.h";
            LOWORD(v338) = 1024;
            *(_DWORD *)((char *)&v338 + 2) = 78;
            v319 = MEMORY[0x24BDACB70];
            for (i = "%25s:%-5d  Exp3SmallParamToFactor called with large param!";
                  ;
                  i = "%25s:%-5d  LinearSmallParamToFactor called with large param!")
            {
              v321 = v336;
LABEL_618:
              _os_log_impl(&dword_210A23000, v319, OS_LOG_TYPE_ERROR, i, v321, 0x12u);
              do
              {
LABEL_619:
                __break(1u);
LABEL_620:
                ;
              }
              while (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR));
              *(_DWORD *)v336 = 136315394;
              v337 = "EXS24_Utils.h";
              LOWORD(v338) = 1024;
              *(_DWORD *)((char *)&v338 + 2) = 34;
              v319 = MEMORY[0x24BDACB70];
            }
          }
          v187 = v186 | 0xB00000;
          v188 = powf((float)v83 / 127.0, 3.0) * 1200.0;
          v189 = v335[v184 + 2];
          v190 = -v188;
          if (v335[v184])
            v190 = 0.0;
          *(_DWORD *)buf = v185;
          *(_DWORD *)&buf[4] = v187;
          *(float *)&buf[8] = v190;
          *(float *)&buf[12] = v188;
          *(_DWORD *)&buf[16] = 1;
          *(_DWORD *)&buf[20] = v189;
          *(_OWORD *)&buf[24] = 0uLL;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x47:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v98 = *v78;
          if ((int)v98 < 1)
            goto LABEL_177;
          v99 = 0;
          while (*((_BYTE *)v80 + v99) != 47)
          {
            if (v98 == ++v99)
            {
LABEL_177:
              v100 = 0;
              goto LABEL_332;
            }
          }
          v100 = *((_WORD *)v78 + v99 + 52);
LABEL_332:
          v164 = v100;
          v165 = v345[v100];
          v166 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          if (v84 >= 0x80)
            goto LABEL_613;
          v167 = v166 | 0xB00000;
          v168 = powf((float)v83 / 127.0, 3.0) * 1200.0;
          v169 = v335[v164 + 2];
          v170 = -v168;
          if (v335[v164])
            v170 = 0.0;
          *(_DWORD *)buf = v165;
          *(_DWORD *)&buf[4] = v167;
          *(float *)&buf[8] = v170;
          *(float *)&buf[12] = v168;
          *(_DWORD *)&buf[16] = 1;
          *(_DWORD *)&buf[20] = v169;
          *(_OWORD *)&buf[24] = xmmword_210B0A190;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x48:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          if (!v331)
          {
            v101 = LayerState::AddEnvelope((char **)v334);
            EnvelopeState::SetLevel(v101, 4u, 0.0);
            EnvelopeState::SetTime(v101, 3u, *(float *)(v72 + 152));
            EnvelopeState::SetTime(v101, 5u, *(float *)(v72 + 152));
            v331 = (**(uint64_t (***)(EnvelopeState *))v101)(v101);
          }
          v102 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          *(_DWORD *)buf = v331;
          *(_DWORD *)&buf[4] = v102 | 0xB00000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = (float)(100 * v83);
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          goto LABEL_254;
        case 0x49:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          if (!v331)
          {
            v132 = LayerState::AddEnvelope((char **)v334);
            EnvelopeState::SetLevel(v132, 4u, 0.0);
            EnvelopeState::SetTime(v132, 3u, *(float *)(v72 + 152));
            EnvelopeState::SetTime(v132, 5u, *(float *)(v72 + 152));
            v331 = (**(uint64_t (***)(EnvelopeState *))v132)(v132);
          }
          v133 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          *(_DWORD *)buf = v331;
          *(_DWORD *)&buf[4] = v133 | 0xB00000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = (float)(100 * v83);
          *(_OWORD *)&buf[16] = xmmword_210B0A180;
          *(_QWORD *)&buf[32] = 0;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
LABEL_254:
          *a4 |= 1u;
          break;
        case 0x4B:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 706;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d EXS24 filter drive not supported";
          goto LABEL_311;
        case 0x4C:
          if (v83 >= 0x80)
            goto LABEL_609;
          v134 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v134 = powf((float)v83 / 127.0, 4.0);
          EnvelopeState::SetTime(v326, 1u, fminf(fmaxf((float)(v134 * 10.0) + (float)((float)((float)v329[25] * 10.0) / 10000.0), 0.0), 60.0));
          break;
        case 0x4D:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v103 = *v78;
          if ((int)v103 < 1)
            goto LABEL_187;
          v104 = 0;
          while (*((_BYTE *)v80 + v104) != 76)
          {
            if (v103 == ++v104)
            {
LABEL_187:
              v105 = 0;
              goto LABEL_337;
            }
          }
          v105 = *((unsigned __int16 *)v78 + v104 + 52);
LABEL_337:
          if (v105 == (unsigned __int16)v84)
            goto LABEL_371;
          if (v83 >= 0x80)
            goto LABEL_609;
          v171 = powf((float)(int)v84 / 127.0, 4.0) * 10.0;
          EnvelopeState::SetTime(v326, 1u, v171);
          if (v105)
          {
            if (v105 >= 0x80)
              goto LABEL_609;
            v172 = powf((float)(__int16)v105 / 127.0, 4.0);
            v173 = log2f((float)((float)((float)((float)v329[25] * 10.0) / 10000.0) + (float)(v172 * 10.0)) / v171);
          }
          else
          {
            v173 = -10.0;
          }
          v196 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
          *(_DWORD *)buf = 301;
          *(_DWORD *)&buf[4] = v196 | 0x2000000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = v173;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x4E:
          if (v83 >= 0x80)
            goto LABEL_609;
          v135 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v135 = powf((float)v83 / 127.0, 4.0);
          EnvelopeState::SetTime(v326, 3u, fminf(fmaxf((float)(v135 * 10.0) + (float)((float)((float)v329[26] * 32.0) / 10000.0), 0.0), 60.0));
          break;
        case 0x4F:
          if (v84 >= 0x80)
          {
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              goto LABEL_619;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "EXS24_Utils.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 34;
            v319 = MEMORY[0x24BDACB70];
            i = "%25s:%-5d  LinearSmallParamToFactor called with large param!";
LABEL_617:
            v321 = buf;
            goto LABEL_618;
          }
          v136 = (double)v83 / 127.0;
          v137 = (double)v329[27] / 100.0;
          EnvelopeState::SetLevel(v326, 4u, fminf(fmaxf(v136 + v137, 0.0), 1.0));
          break;
        case 0x50:
          if (v84 >= 0x80)
            goto LABEL_609;
          v138 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v138 = powf((float)v83 / 127.0, 4.0);
          EnvelopeState::SetTime(v326, 5u, fminf(fmaxf((float)(v138 * 10.0) + (float)((float)((float)v329[28] * 32.0) / 10000.0), 0.0), 60.0));
          break;
        case 0x51:
          v106 = (double)(127 * v329[16]) / 100.0;
          v107 = (__int16)(v83 + (int)v106) & ~((__int16)(v83 + (int)v106) >> 31);
          if (v107 >= 0x7F)
            v107 = 127;
          if (v107)
          {
            if (v107 == 127)
            {
              v108 = 1.0;
            }
            else
            {
              v155 = log10f((float)(__int16)v107 / 127.0);
              v156 = (float)(v155 * 20.0) + (float)(v155 * 20.0);
              v157 = (float)(v156 / 96.0) + 1.0;
              v158 = v156 < -66.0;
              v159 = 0.3125;
              if (!v158)
                v159 = v157;
              v108 = fminf(fmaxf(v159, 0.0), 1.0);
            }
          }
          else
          {
            v108 = 0.0;
          }
          EnvelopeState::SetLevel(v327, 4u, v108);
          break;
        case 0x52:
          if (v84 >= 0x80)
            goto LABEL_609;
          v139 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v139 = powf((float)v83 / 127.0, 4.0);
          EnvelopeState::SetTime(v327, 1u, fminf(fmaxf((float)(v139 * 10.0) + (float)((float)((float)v329[14] * 10.0) / 10000.0), 0.0), 60.0));
          break;
        case 0x53:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v109 = *v78;
          if ((int)v109 < 1)
            goto LABEL_198;
          v110 = 0;
          while (*((_BYTE *)v80 + v110) != 82)
          {
            if (v109 == ++v110)
            {
LABEL_198:
              v111 = 0;
              goto LABEL_343;
            }
          }
          v111 = *((unsigned __int16 *)v78 + v110 + 52);
LABEL_343:
          if (v111 == (unsigned __int16)v84)
            goto LABEL_371;
          if (v83 >= 0x80)
            goto LABEL_609;
          v174 = powf((float)(int)v84 / 127.0, 4.0) * 10.0;
          EnvelopeState::SetTime(v327, 1u, v174);
          if (v111)
          {
            if (v111 >= 0x80)
            {
LABEL_609:
              if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                goto LABEL_619;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "EXS24_Utils.h";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 86;
              v319 = MEMORY[0x24BDACB70];
              i = "%25s:%-5d  Exp4SmallParamToFactor called with large param!";
              goto LABEL_617;
            }
            v175 = powf((float)(__int16)v111 / 127.0, 4.0);
            v176 = log2f((float)((float)((float)((float)v329[14] * 10.0) / 10000.0) + (float)(v175 * 10.0)) / v174);
          }
          else
          {
            v176 = -10.0;
          }
          v197 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
          *(_DWORD *)buf = 301;
          *(_DWORD *)&buf[4] = v197 | 0x2000000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = v176;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x54:
          if (v83 >= 0x80)
            goto LABEL_609;
          v140 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v140 = powf((float)(int)v84 / 127.0, 4.0);
          EnvelopeState::SetTime(v327, 3u, fminf(fmaxf((float)((float)(v140 * 10.0) + (float)((float)((float)v329[15] * 32.0) / 10000.0)) * 4.0, 0.0), 60.0));
          break;
        case 0x55:
          if (v84 >= 0x80)
            goto LABEL_609;
          v141 = 0.0;
          if (*((_WORD *)v78 + v79 + 52))
            v141 = powf((float)(int)v84 / 127.0, 4.0);
          EnvelopeState::SetTime(v327, 5u, fminf(fmaxf((float)((float)(v141 * 10.0) + (float)((float)((float)v329[17] * 32.0) / 10000.0)) * 4.0, 0.0), 60.0));
          break;
        case 0x56:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v142 = (***((uint64_t (****)(_QWORD))v334 + 23))(*((_QWORD *)v334 + 23));
          *(_DWORD *)buf = 301;
          *(_DWORD *)&buf[4] = v142 | 0x1500000;
          *(_DWORD *)&buf[8] = 0;
          *(float *)&buf[12] = (float)((float)v83 * 0.001) * 12000.0;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x59:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          ConnectionState::SetMinValue(*(float **)(*((_QWORD *)v334 + 65) + 8), (float)v83);
          break;
        case 0x5A:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          ConnectionState::SetMaxValue(*(float **)(*((_QWORD *)v334 + 65) + 8), (float)(int)v84);
          break;
        case 0x5C:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v143 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
          if (v83 >= 0x80)
            goto LABEL_620;
          v144 = v143;
          v145 = (double)(int)v84 / 127.0;
          *(_DWORD *)buf = 300;
          *(_DWORD *)&buf[4] = v143 | 0x2000000;
          *(float *)&buf[8] = -(float)(v145 * -5.0);
          *(float *)&buf[12] = v145 * -5.0;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          *(_DWORD *)&buf[4] = v144 | 0x2200000;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          *(_DWORD *)&buf[4] = v144 | 0x2300000;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          v146 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
          *(_DWORD *)&buf[4] = v146 | 0x2000000;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          *(_DWORD *)&buf[4] = v146 | 0x2200000;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          *(_DWORD *)&buf[4] = v146 | 0x2300000;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x5D:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          v147 = *v78;
          if ((int)v147 < 1)
            goto LABEL_298;
          v148 = 0;
          while (*((_BYTE *)v80 + v148) != 94)
          {
            if (v147 == ++v148)
            {
LABEL_298:
              v149 = 0;
              goto LABEL_360;
            }
          }
          v149 = *((unsigned __int16 *)v78 + v148 + 52);
LABEL_360:
          v191 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          if (v149 >= 0x80
            || ((v192 = v191, !v149) ? (v193 = 0.0) : (v193 = powf((float)(__int16)v149 / 127.0, 3.0)),
                v83 >= 0x80))
          {
LABEL_613:
            if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
              goto LABEL_619;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "EXS24_Utils.h";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 78;
            v319 = MEMORY[0x24BDACB70];
            i = "%25s:%-5d  Exp3SmallParamToFactor called with large param!";
            goto LABEL_617;
          }
          v194 = v193 * 500.0;
          v195 = powf((float)(int)v84 / 127.0, 3.0);
          *(_DWORD *)buf = 301;
          *(_DWORD *)&buf[4] = v192 | 0xC00000;
          *(float *)&buf[8] = v194;
          *(float *)&buf[12] = v195 * 500.0;
          *(_OWORD *)&buf[16] = xmmword_210B0A170;
          *(_QWORD *)&buf[32] = 1;
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0x61:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          LayerState::SetZoneVelocityXFade(v334, *((__int16 *)v78 + v79 + 52));
          break;
        case 0x62:
          if (!*((_WORD *)v78 + v79 + 52))
            goto LABEL_371;
          if (*(_BYTE *)(v72 + 185))
            v150 = 312;
          else
            v150 = 311;
          v151 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          *(_DWORD *)buf = v150;
          *(_DWORD *)&buf[4] = v151 | 0xB00000;
          *(float *)&buf[8] = -(float)v83;
          *(float *)&buf[12] = (float)v83;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0xA5:
          if (v83 == 1 || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 939;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d Non-linear crossfade not supported";
          goto LABEL_311;
        case 0xA6:
          if ((_DWORD)v84 == -1)
            goto LABEL_371;
          v152 = (***((uint64_t (****)(_QWORD))v334 + 22))(*((_QWORD *)v334 + 22));
          *(_DWORD *)buf = 304;
          *(_DWORD *)&buf[4] = v152 | 0xB00000;
          *(_QWORD *)&buf[8] = 0x44960000C4960000;
          *(_DWORD *)&buf[16] = 1;
          memset(&buf[20], 0, 20);
          v344 = 1065353216;
          LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
          break;
        case 0xAA:
          if (!*((_WORD *)v78 + v79 + 52) || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 709;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d EXS24 filter fat not supported";
          goto LABEL_311;
        case 0xAC:
          if (v83 == 64 || !os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            goto LABEL_371;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 958;
          v85 = MEMORY[0x24BDACB70];
          v86 = "%25s:%-5d EXS24 alternate sustain controllers not supported";
LABEL_311:
          v87 = OS_LOG_TYPE_DEFAULT;
LABEL_312:
          v88 = 18;
          goto LABEL_313;
        default:
          if (v82 == 243)
            goto LABEL_371;
LABEL_149:
          if ((v82 + 2) <= 0xAEu && (unsigned __int16)(v84 - 1) <= 0xFFFDu)
          {
            v89 = MEMORY[0x24BDACB70];
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 994;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v82;
              v85 = v89;
              v87 = OS_LOG_TYPE_DEFAULT;
              v86 = "%25s:%-5d EXS24 instrument param %u IGNORED (not in switch)";
LABEL_141:
              v88 = 24;
LABEL_313:
              _os_log_impl(&dword_210A23000, v85, v87, v86, buf, v88);
            }
          }
          goto LABEL_371;
      }
      v78 = v330;
LABEL_371:
      if (++v79 >= *v78)
        goto LABEL_374;
    }
  }
  v322 = 0;
LABEL_374:
  v198 = v329;
  v199 = v329[24];
  if (v199)
  {
    v200 = v199 & ~(v199 >> 31);
    if (v200 >= 0x270F)
      v200 = 9999;
    EnvelopeState::SetTime(v327, 2u, (float)v200 / 1000.0);
    v198 = v329;
  }
  v201 = v198[29];
  if (v201)
  {
    v202 = v201 & ~(v201 >> 31);
    if (v202 >= 0x270F)
      v202 = 9999;
    EnvelopeState::SetTime(v326, 2u, (float)v202 / 1000.0);
  }
  v203 = 0;
  v204 = 1;
  v205 = v334;
  do
  {
    v206 = v204;
    if (v335[v203 + 2] || v335[v203])
    {
      v207 = (uint64_t *)*((_QWORD *)v205 + 65);
      v208 = (uint64_t *)*((_QWORD *)v205 + 66);
      if (v207 != v208)
      {
        v332 = v204;
        v209 = 0;
        v210 = 0;
        v211 = 0;
        v212 = v345[v203];
        do
        {
          v213 = *v207;
          if (!v212 || *(_DWORD *)(v213 + 92) == v212)
          {
            if ((unint64_t)v210 >= v211)
            {
              v214 = (v210 - v209) >> 3;
              v215 = v214 + 1;
              if ((unint64_t)(v214 + 1) >> 61)
                std::vector<void const*>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(v211 - (_QWORD)v209) >> 2 > v215)
                v215 = (uint64_t)(v211 - (_QWORD)v209) >> 2;
              if (v211 - (unint64_t)v209 >= 0x7FFFFFFFFFFFFFF8)
                v216 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v216 = v215;
              if (v216)
                v216 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v216);
              else
                v217 = 0;
              v218 = (char *)(v216 + 8 * v214);
              *(_QWORD *)v218 = v213;
              v219 = v218 + 8;
              while (v210 != v209)
              {
                v220 = *((_QWORD *)v210 - 1);
                v210 -= 8;
                *((_QWORD *)v218 - 1) = v220;
                v218 -= 8;
              }
              v211 = v216 + 8 * v217;
              if (v209)
                operator delete(v209);
              v209 = v218;
              v210 = v219;
            }
            else
            {
              *(_QWORD *)v210 = v213;
              v210 += 8;
            }
          }
          ++v207;
        }
        while (v207 != v208);
        v205 = v334;
        if (v209 != v210)
        {
          v221 = v335[v203 + 2];
          v222 = v209;
          do
          {
            ConnectionState::SetInverse(*(_BYTE **)v222, v221);
            if (!v335[v203])
              puts("STOP HERE");
            v222 += 8;
          }
          while (v222 != v210);
        }
        v206 = v332;
        if (v209)
          operator delete(v209);
      }
    }
    v204 = 0;
    v203 = 1;
  }
  while ((v206 & 1) != 0);
  Level = EnvelopeState::GetLevel(v326, 4u);
  if (Level != 1.0 && Level != 0.0)
  {
    Time = EnvelopeState::GetTime(v326, 3u);
    EnvelopeState::SetTime(v326, 3u, fminf(fmaxf(Time / (float)(1.0 - Level), 0.0), 60.0));
    v225 = EnvelopeState::GetTime(v326, 5u);
    EnvelopeState::SetTime(v326, 5u, fminf(fmaxf(v225 / Level, 0.0), 60.0));
  }
  v226 = EnvelopeState::GetLevel(v327, 4u);
  if (v226 != 1.0 && v226 != 0.0)
  {
    v227 = EnvelopeState::GetTime(v327, 3u);
    EnvelopeState::SetTime(v327, 3u, fminf(fmaxf(v227 / (float)(1.0 - v226), 0.0), 60.0));
    v228 = EnvelopeState::GetTime(v327, 5u);
    EnvelopeState::SetTime(v327, 5u, fminf(fmaxf(v228 / v226, 0.0), 60.0));
  }
  v229 = 0;
  v230 = v330;
  v231 = v330 + 26;
  v232 = (char *)v330 + 5;
  v233 = 173;
  v234 = (uint64_t)v334;
  do
  {
    v235 = *v230;
    if ((int)v235 >= 1)
    {
      v236 = *((unsigned __int8 *)v230 + 4);
      if (v233 == v236)
      {
        v237 = 0;
LABEL_429:
        v239 = *((unsigned __int16 *)v230 + v237 + 52);
        if (v239)
        {
          v240 = v231;
          if (v233 + 1 == v236)
          {
LABEL_431:
            v241 = *(__int16 *)v240;
            v242 = (unsigned __int16 *)v231;
            if (v233 + 3 == v236)
            {
LABEL_432:
              v243 = 0;
              v244 = (__int16)v239;
              v245 = (__int16)*v242;
              while (v233 + 2 != *((unsigned __int8 *)v230 + v243 + 4))
              {
                if (v235 == ++v243)
                {
                  v246 = 0xFFFF;
                  goto LABEL_447;
                }
              }
              v246 = *((unsigned __int16 *)v230 + v243 + 52);
LABEL_447:
              v251 = 0;
              v333 = v241;
              while (v233 + 4 != *((unsigned __int8 *)v230 + v251 + 4))
              {
                if (v235 == ++v251)
                {
                  v252 = 0;
                  goto LABEL_452;
                }
              }
              v252 = *((unsigned __int16 *)v230 + v251 + 52);
LABEL_452:
              v253 = 0;
              while ((v233 - 173) / 6u + 233 != *((unsigned __int8 *)v230 + v253 + 4))
              {
                if (v235 == ++v253)
                {
                  v254 = 0;
                  goto LABEL_457;
                }
              }
              v254 = *((unsigned __int16 *)v230 + v253 + 52) != 0;
LABEL_457:
              v255 = 0;
              while (v233 + 5 != *((unsigned __int8 *)v230 + v255 + 4))
              {
                if (v235 == ++v255)
                {
                  v256 = 0;
                  goto LABEL_462;
                }
              }
              v256 = *((_WORD *)v230 + v255 + 52) != 0;
LABEL_462:
              v257 = v246 == 0xFFFF || v252 == *v242;
              if (v257)
                v258 = 0;
              else
                v258 = v252;
              if (v257)
                v259 = -1;
              else
                v259 = v246;
              if (v258)
                v260 = (__int16)*v242;
              else
                v260 = 0;
              if (v258)
                v261 = v258;
              else
                v261 = *v242;
              ParamValueToScale(v244, v260);
              v263 = v262;
              ParamValueToScale(v244, v261);
              *(_QWORD *)buf = 0;
              *(_DWORD *)&buf[8] = v263;
              *(_DWORD *)&buf[12] = v264;
              *(_DWORD *)&buf[16] = 1;
              *(_DWORD *)&buf[20] = v254;
              *(_DWORD *)&buf[24] = 0;
              *(_DWORD *)&buf[28] = v256;
              *(_QWORD *)&buf[32] = 1;
              v344 = 1065353216;
              v265 = v333;
              if (v333 < 1)
              {
                v234 = (uint64_t)v334;
                v231 = v330 + 26;
                v266 = 0;
                switch(v333)
                {
                  case -17:
                    v269 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
                    v265 = v333;
                    v266 = 0;
                    if (v269)
                    {
                      *(_DWORD *)v336 = 136315394;
                      v337 = "LayerState_EXS24.cpp";
                      LOWORD(v338) = 1024;
                      *(_DWORD *)((char *)&v338 + 2) = 1148;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d EXS24 side chain modulation source not supported", v336, 0x12u);
                      v265 = v333;
                      goto LABEL_580;
                    }
                    break;
                  case -16:
                    v266 = 0;
                    v311 = 310;
                    goto LABEL_595;
                  case -14:
                    v313 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
                    goto LABEL_583;
                  case -13:
                    v313 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
LABEL_583:
                    v266 = 0;
                    *(_DWORD *)buf = v313;
                    goto LABEL_598;
                  case -12:
                    *(_DWORD *)buf = (**(uint64_t (***)(float *))v323)(v323);
                    *(_DWORD *)&buf[20] = v335[2] ^ v254;
                    v266 = !v335[0];
                    *(_DWORD *)&buf[24] = v322;
                    goto LABEL_598;
                  case -11:
                    if ((((uint64_t (*)(unsigned int (***)(void)))(*v328)[7])(v328) & 1) == 0)
                      goto LABEL_596;
                    *(_DWORD *)buf = 320;
                    *(_DWORD *)&buf[20] = v335[3] ^ v254;
                    v266 = !v335[1];
                    goto LABEL_598;
                  case -10:
                    if ((((uint64_t (*)(unsigned int (***)(void)))(*v325)[7])(v325) & 1) != 0)
                    {
                      v266 = 0;
                      v314 = 321;
                    }
                    else
                    {
LABEL_596:
                      v266 = 0;
                      v314 = 310;
                    }
                    *(_DWORD *)buf = v314;
LABEL_598:
                    v234 = (uint64_t)v334;
                    goto LABEL_599;
                  case -8:
                    v266 = 0;
                    v311 = 302;
                    goto LABEL_595;
                  case -7:
                    v266 = 0;
                    v311 = 208;
                    goto LABEL_595;
                  case -5:
                    v315 = 224;
                    goto LABEL_593;
                  case -4:
                    v315 = 300;
LABEL_593:
                    *(_DWORD *)buf = v315;
                    v266 = 1;
                    break;
                  case -3:
                    v266 = 0;
                    v311 = 301;
LABEL_595:
                    *(_DWORD *)buf = v311;
                    break;
                  case -1:
                    break;
                  default:
                    v312 = MEMORY[0x24BDACB70];
                    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v336 = 136315650;
                      v337 = "LayerState_EXS24.cpp";
                      v338 = 0x4000000047F0400;
                      LODWORD(v339) = v333;
                      _os_log_impl(&dword_210A23000, v312, OS_LOG_TYPE_ERROR, "%25s:%-5d Illegal EXS24 modulation source: %d", v336, 0x18u);
                      v265 = v333;
LABEL_580:
                      v266 = 0;
                    }
                    else
                    {
                      v266 = 0;
LABEL_599:
                      v265 = v333;
                    }
                    break;
                }
              }
              else
              {
                v266 = 0;
                *(_DWORD *)buf = v333;
                v234 = (uint64_t)v334;
                v231 = v330 + 26;
              }
              v267 = v259;
              if (v259 < 1)
              {
                switch(v259)
                {
                  case -16:
                    v267 = 310;
                    goto LABEL_480;
                  case -14:
                    v308 = v266;
                    v309 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
                    goto LABEL_564;
                  case -13:
                    v308 = v266;
                    v309 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
                    goto LABEL_564;
                  case -12:
                    v308 = v266;
                    v309 = (**(uint64_t (***)(float *))v323)(v323);
LABEL_564:
                    *(_DWORD *)&buf[24] = v309;
                    goto LABEL_576;
                  case -11:
                    v308 = v266;
                    if ((((uint64_t (*)(unsigned int (***)(void)))(*v328)[7])(v328) & 1) == 0)
                      goto LABEL_574;
                    v310 = 320;
                    goto LABEL_575;
                  case -10:
                    v308 = v266;
                    if ((((uint64_t (*)(unsigned int (***)(void)))(*v325)[7])(v325) & 1) != 0)
                      v310 = 321;
                    else
LABEL_574:
                      v310 = 310;
LABEL_575:
                    *(_DWORD *)&buf[24] = v310;
LABEL_576:
                    v234 = (uint64_t)v334;
                    v266 = v308;
                    v265 = v333;
                    break;
                  case -8:
                    v267 = 302;
                    goto LABEL_480;
                  case -7:
                    v267 = 208;
                    goto LABEL_480;
                  case -5:
                    v267 = 224;
                    goto LABEL_480;
                  case -4:
                    v267 = 300;
                    goto LABEL_480;
                  case -3:
                    v267 = 301;
                    goto LABEL_480;
                  case -1:
                    break;
                  default:
                    v306 = v266;
                    v307 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v265 = v333;
                    v266 = v306;
                    if (v307)
                    {
                      *(_DWORD *)v336 = 136315650;
                      v337 = "LayerState_EXS24.cpp";
                      v338 = 0x400000004C20400;
                      LODWORD(v339) = v333;
                      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d Illegal modulation via: %d", v336, 0x18u);
                      v265 = v333;
                      v266 = v306;
                    }
                    break;
                }
              }
              else
              {
LABEL_480:
                *(_DWORD *)&buf[24] = v267;
              }
              switch(v244)
              {
                case 4:
                  v270 = v266;
                  v271 = (***(uint64_t (****)(_QWORD))(v234 + 176))(*(_QWORD *)(v234 + 176)) | 0xC00000;
                  goto LABEL_506;
                case 5:
                  v272 = v266;
                  v273 = MEMORY[0x24BDACB70];
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_514;
                  *(_DWORD *)v336 = 136315394;
                  v337 = "LayerState_EXS24.cpp";
                  LOWORD(v338) = 1024;
                  *(_DWORD *)((char *)&v338 + 2) = 1231;
                  v274 = v273;
                  v275 = "%25s:%-5d EXS24 glide time modulation not supported";
                  goto LABEL_494;
                case 6:
                  v270 = v266;
                  v276 = (***(uint64_t (****)(_QWORD))(v234 + 176))(*(_QWORD *)(v234 + 176));
                  v277 = 11534336;
                  goto LABEL_505;
                case 7:
                  v272 = v266;
                  v278 = MEMORY[0x24BDACB70];
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_514;
                  *(_DWORD *)v336 = 136315394;
                  v337 = "LayerState_EXS24.cpp";
                  LOWORD(v338) = 1024;
                  *(_DWORD *)((char *)&v338 + 2) = 1239;
                  v274 = v278;
                  v275 = "%25s:%-5d EXS24 filter drive not supported";
LABEL_494:
                  _os_log_impl(&dword_210A23000, v274, OS_LOG_TYPE_DEFAULT, v275, v336, 0x12u);
                  goto LABEL_514;
                case 8:
                  v270 = v266;
                  v276 = (***(uint64_t (****)(_QWORD))(v234 + 184))(*(_QWORD *)(v234 + 184));
                  v277 = 22020096;
                  goto LABEL_505;
                case 9:
                  v270 = v266;
                  v276 = (***(uint64_t (****)(_QWORD))(v234 + 184))(*(_QWORD *)(v234 + 184));
                  v277 = 23068672;
                  goto LABEL_505;
                case 10:
                  *(_DWORD *)&buf[4] = (***(uint64_t (****)(_QWORD))(v234 + 192))(*(_QWORD *)(v234 + 192)) | 0x100000;
                  v234 = (uint64_t)v334;
                  v230 = v330;
                  if (!*(_DWORD *)buf)
                    goto LABEL_549;
                  goto LABEL_541;
                case 11:
                  v268 = (***(uint64_t (****)(_QWORD))(v234 + 192))(*(_QWORD *)(v234 + 192)) | 0x200000;
                  goto LABEL_500;
                case 12:
                case 13:
                  v268 = (***(uint64_t (****)(_QWORD))(v234 + 192))(*(_QWORD *)(v234 + 192)) | 0x100000;
LABEL_500:
                  *(_DWORD *)&buf[4] = v268;
                  v266 = 1;
                  goto LABEL_536;
                case 16:
                  if (v265 == -4)
                    v270 = 0;
                  else
                    v270 = v266;
                  v276 = (**(uint64_t (***)(float *))v323)(v323);
                  v277 = 44040192;
LABEL_505:
                  v271 = v276 | v277;
LABEL_506:
                  *(_DWORD *)&buf[4] = v271;
                  v234 = (uint64_t)v334;
                  v266 = v270;
                  break;
                case 17:
                  v272 = v266;
                  v279 = MEMORY[0x24BDACB70];
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v336 = 136315394;
                    v337 = "LayerState_EXS24.cpp";
                    LOWORD(v338) = 1024;
                    *(_DWORD *)((char *)&v338 + 2) = 1282;
                    _os_log_impl(&dword_210A23000, v279, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EXS24 monophonic LFO modulation not fully supported", v336, 0x12u);
                  }
                  v280 = ((uint64_t (*)(unsigned int (***)(void)))**v328)(v328);
                  goto LABEL_513;
                case 18:
                  v272 = v266;
                  v281 = MEMORY[0x24BDACB70];
                  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v336 = 136315394;
                    v337 = "LayerState_EXS24.cpp";
                    LOWORD(v338) = 1024;
                    *(_DWORD *)((char *)&v338 + 2) = 1286;
                    _os_log_impl(&dword_210A23000, v281, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EXS24 monophonic LFO modulation not fully supported", v336, 0x12u);
                  }
                  v280 = ((uint64_t (*)(unsigned int (***)(void)))**v325)(v325);
LABEL_513:
                  *(_DWORD *)&buf[4] = v280 | 0x2A00000;
                  v234 = (uint64_t)v334;
LABEL_514:
                  v266 = v272;
                  break;
                case 20:
                  v282 = v266;
                  v283 = v265 != -4;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v326)(v326) | 0x2000000;
                  v284 = EnvelopeState::GetTime(v326, 1u);
                  if (v284 < 0.001)
                    v284 = 0.001;
                  v285 = (float)(*(float *)&buf[8] + v284) / v284;
                  v286 = log2f(v285);
                  if (v285 <= 0.0)
                    v286 = -10.0;
                  *(float *)&buf[8] = v286;
                  v287 = EnvelopeState::GetTime(v326, 1u);
                  goto LABEL_529;
                case 21:
                  v282 = v266;
                  v283 = v265 != -4;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v326)(v326) | 0x2200000;
                  v288 = EnvelopeState::GetTime(v326, 3u);
                  if (v288 < 0.001)
                    v288 = 0.001;
                  v289 = (float)(*(float *)&buf[8] + v288) / v288;
                  v290 = log2f(v289);
                  if (v289 <= 0.0)
                    v290 = -10.0;
                  *(float *)&buf[8] = v290;
                  v287 = EnvelopeState::GetTime(v326, 3u);
                  goto LABEL_529;
                case 22:
                  v282 = v266;
                  v283 = v265 != -4;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v326)(v326) | 0x2300000;
                  *(_DWORD *)&buf[8] = 0;
                  v287 = EnvelopeState::GetTime(v326, 5u);
                  goto LABEL_529;
                case 23:
                  v291 = (**(uint64_t (***)(EnvelopeState *))v326)(v326);
                  v292 = v291;
                  v293 = (__int16)v258 - v245;
                  if (v293 < 1)
                  {
                    *(float *)&buf[12] = (float)v293 / 100.0;
                    *(_DWORD *)&buf[4] = v291 | 0x2000000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                    *(_DWORD *)&buf[4] = v292 | 0x2200000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                    *(_DWORD *)&buf[4] = v292 | 0x2300000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                    v316 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
                    *(_DWORD *)&buf[4] = v316 | 0x2000000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                    *(_DWORD *)&buf[4] = v316 | 0x2200000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                    *(_DWORD *)&buf[4] = v316 | 0x2300000;
                    LayerState::AddConnection((uint64_t)v334, (int *)buf, 0);
                  }
                  else
                  {
                    *(float *)&v338 = (float)((float)(__int16)v293 * 0.001) * 12.0;
                    HIDWORD(v338) = 1;
                    v339 = 0;
                    v340 = 0;
                    v341 = 0;
                    v342 = 1065353216;
                    *(_DWORD *)v336 = *(_DWORD *)buf;
                    LODWORD(v337) = v291 | 0x3E00000;
                    HIDWORD(v337) = 1065353216;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                    LODWORD(v337) = v292 | 0x4000000;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                    LODWORD(v337) = v292 | 0x4100000;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                    v294 = (**(uint64_t (***)(EnvelopeState *))v327)(v327);
                    LODWORD(v337) = v294 | 0x3E00000;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                    LODWORD(v337) = v294 | 0x4000000;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                    LODWORD(v337) = v294 | 0x4100000;
                    LayerState::AddConnection((uint64_t)v334, (int *)v336, 0);
                  }
                  goto LABEL_548;
                case 24:
                  v282 = v266;
                  v283 = v265 != -4;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v327)(v327) | 0x2000000;
                  *(_DWORD *)&buf[8] = 0;
                  v287 = EnvelopeState::GetTime(v327, 1u);
LABEL_529:
                  v295 = *(float *)&buf[12];
                  goto LABEL_531;
                case 25:
                  v282 = v266;
                  v283 = v265 != -4;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v327)(v327) | 0x2200000;
                  *(_DWORD *)&buf[8] = 0;
                  v296 = EnvelopeState::GetTime(v327, 3u);
                  v295 = *(float *)&buf[12];
                  v287 = v296 * 0.25;
LABEL_531:
                  if (v287 < 0.001)
                    v287 = 0.001;
                  v297 = (float)(v295 + v287) / v287;
                  v298 = log2f(v297);
                  if (v297 <= 0.0)
                    v298 = -10.0;
                  *(float *)&buf[12] = v298;
                  v266 = v283 & v282;
                  goto LABEL_536;
                case 26:
                  v302 = v266;
                  *(_DWORD *)&buf[4] = (**(uint64_t (***)(EnvelopeState *))v327)(v327) | 0x2300000;
                  *(_DWORD *)&buf[8] = 0;
                  v303 = EnvelopeState::GetTime(v327, 5u) * 0.25;
                  if (v303 < 0.001)
                    v303 = 0.001;
                  v304 = (float)(*(float *)&buf[12] + v303) / v303;
                  v305 = log2f(v304);
                  if (v304 <= 0.0)
                    v305 = -10.0;
                  if (v333 == -4)
                    v266 = 0;
                  else
                    v266 = v302;
                  *(float *)&buf[12] = v305;
LABEL_536:
                  v234 = (uint64_t)v334;
                  break;
                default:
                  break;
              }
              v230 = v330;
              if (*(_DWORD *)buf && *(_DWORD *)&buf[4])
              {
                if (v266)
                  *(_DWORD *)&buf[32] = 2;
LABEL_541:
                v299 = LayerState::AddConnection(v234, (int *)buf, 0);
                v230 = v330;
                v300 = *v330;
                v234 = (uint64_t)v334;
                if ((int)v300 >= 1)
                {
                  v301 = 0;
                  while ((v233 - 173) / 6u + 244 != *((unsigned __int8 *)v330 + v301 + 4))
                  {
                    if (v300 == ++v301)
                      goto LABEL_549;
                  }
                  if (*((_WORD *)v330 + v301 + 52))
                  {
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v299 + 64))(v299, 0);
LABEL_548:
                    v234 = (uint64_t)v334;
                    v230 = v330;
                  }
                }
              }
            }
            else
            {
              v249 = 0;
              while (v235 - 1 != v249)
              {
                v250 = v232[v249++];
                if (v233 + 3 == v250)
                {
                  if (v249 >= v235)
                    break;
                  v242 = (unsigned __int16 *)v230 + v249 + 52;
                  goto LABEL_432;
                }
              }
            }
          }
          else
          {
            v247 = 0;
            while (v235 - 1 != v247)
            {
              v248 = v232[v247++];
              if (v233 + 1 == v248)
              {
                if (v247 >= v235)
                  break;
                v240 = (int *)((char *)v230 + 2 * v247 + 104);
                goto LABEL_431;
              }
            }
          }
        }
      }
      else
      {
        v237 = 0;
        while (v235 - 1 != v237)
        {
          v238 = v232[v237++];
          if (v233 == v238)
          {
            if (v237 >= v235)
              break;
            goto LABEL_429;
          }
        }
      }
    }
LABEL_549:
    v233 += 6;
    ++v229;
  }
  while (v229 != 10);
  v317 = *((char *)v329 + 73);
  if (*((_BYTE *)v329 + 73))
  {
    if (v317 == 1)
    {
      LayerState::SetGateMode((_DWORD *)v234, 12);
      EnvelopeState::SetLevel(v327, 4u, 0.0);
      v318 = (double)v329[4] * 0.001;
      EnvelopeState::SetTime(v327, 3u, v318);
    }
    else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "LayerState_EXS24.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1441;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v317;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unsupported EXS24 trigger type: %u", buf, 0x18u);
    }
  }
}

void sub_210AC6798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C402E53C1ECLL);
  _Unwind_Resume(a1);
}

void ParamValueToScale(int a1, int a2)
{
  double v2;
  float v3;

  switch(a1)
  {
    case 4:
      if (a2 != -1000 && a2 && a2 != 1000)
        powf((float)a2 / 1000.0, 3.0);
      break;
    case 6:
      v2 = (double)-a2;
      if (a2 >= 0)
        v2 = (double)a2;
      v3 = v2 / 1000.0;
      powf(v3, 4.0);
      break;
    case 20:
    case 21:
    case 22:
    case 24:
    case 25:
    case 26:
      if (a2 != -1000 && a2 && a2 != 1000)
        powf((float)a2 / 1000.0, 4.0);
      break;
    default:
      return;
  }
}

void AURemoteIO::~AURemoteIO(AURemoteIO *this)
{
  AURemoteIO::~AURemoteIO(this);
  JUMPOUT(0x212BCDF50);
}

{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  AURemoteIO **v9;
  AURemoteIO **v10;
  int64_t v11;
  mach_port_t ServerPort;
  mach_port_t v13;
  mach_port_t reply_port;
  mach_msg_return_t v15;
  mach_msg_return_t v16;
  const void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  mach_msg_header_t v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24CA8A290;
  v2 = *((_QWORD *)this + 59);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*((_QWORD *)this + 59));
  if (!kRIOClientSubsystem)
  {
    v3 = MEMORY[0x24BDACB70];
LABEL_7:
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v27[0].msgh_bits = 136315650;
      *(_QWORD *)&v27[0].msgh_size = "AURemoteIO.cpp";
      LOWORD(v27[0].msgh_local_port) = 1024;
      *(mach_port_t *)((char *)&v27[0].msgh_local_port + 2) = 452;
      HIWORD(v27[0].msgh_voucher_port) = 2048;
      *(_QWORD *)&v27[0].msgh_id = this;
      _os_log_impl(&dword_210A23000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->AURemoteIO@%p destructor", (uint8_t *)v27, 0x1Cu);
    }
    goto LABEL_9;
  }
  v3 = *(NSObject **)kRIOClientSubsystem;
  if (*(_QWORD *)kRIOClientSubsystem)
    goto LABEL_7;
LABEL_9:
  (*(void (**)(AURemoteIO *))(*(_QWORD *)this + 448))(this);
  dispatch_release(*((dispatch_object_t *)this + 99));
  v4 = (const void *)*((_QWORD *)this + 161);
  if (v4)
  {
    _Block_release(v4);
    *((_QWORD *)this + 161) = 0;
  }
  v5 = *((_QWORD *)this + 125);
  if (v5)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1)
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
      AudioIssueDetectorLibraryLoader(void)::libSym(v5);
  }
  v6 = gRIOServer;
  v7 = gRIOServer + 80;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(gRIOServer + 80) + 16))(gRIOServer + 80);
  v10 = *(AURemoteIO ***)(v6 + 168);
  v9 = *(AURemoteIO ***)(v6 + 176);
  while (v10 != v9)
  {
    if (*v10 == this)
    {
      v11 = (char *)v9 - (char *)(v10 + 1);
      if (v9 != v10 + 1)
        memmove(v10, v10 + 1, (char *)v9 - (char *)(v10 + 1));
      *(_QWORD *)(v6 + 176) = (char *)v10 + v11;
      break;
    }
    ++v10;
  }
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  if (*((_DWORD *)this + 178))
  {
    RIOServer::GetServerPort((const char **)gRIOServer);
    ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
    v13 = *((_DWORD *)this + 178);
    memset(&v27[0].msgh_size, 0, 40);
    *(_QWORD *)&v27[1].msgh_bits = *MEMORY[0x24BDAC470];
    v27[1].msgh_remote_port = v13;
    reply_port = mig_get_reply_port();
    v27[0].msgh_remote_port = ServerPort;
    v27[0].msgh_local_port = reply_port;
    v27[0].msgh_bits = 5395;
    *(_QWORD *)&v27[0].msgh_voucher_port = 0x157C200000000;
    if (MEMORY[0x24BDB0418])
    {
      voucher_mach_msg_set(v27);
      reply_port = v27[0].msgh_local_port;
    }
    v15 = mach_msg(v27, 275, 0x24u, 0x2Cu, reply_port, *MEMORY[0x24BDB6D08], 0);
    v16 = v15;
    if ((v15 - 268435458) > 0xE || ((1 << (v15 - 2)) & 0x4003) == 0)
    {
      if (!v15)
      {
        if (v27[0].msgh_id == 88102
          && (v27[0].msgh_bits & 0x80000000) == 0
          && *(_QWORD *)&v27[0].msgh_size == 36
          && !v27[1].msgh_remote_port)
        {
          goto LABEL_44;
        }
        goto LABEL_43;
      }
      mig_dealloc_reply_port(v27[0].msgh_local_port);
    }
    else
    {
      mig_put_reply_port(v27[0].msgh_local_port);
    }
    if (v16 != 268435460)
    {
LABEL_44:
      _CheckRPCError("~AURemoteIO");
      goto LABEL_45;
    }
    if ((v27[0].msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], v27[0].msgh_local_port);
LABEL_43:
    mach_msg_destroy(v27);
    goto LABEL_44;
  }
LABEL_45:
  v18 = (const void *)*((_QWORD *)this + 130);
  if (v18)
  {
    CFRelease(v18);
    *((_QWORD *)this + 130) = 0;
  }
  if (CADeprecated::TSingleton<IPCAUServer>::sInstance)
  {
    v19 = *((_QWORD *)this + 1);
    *(_QWORD *)&v27[0].msgh_bits = MEMORY[0x24BDAC760];
    *(_QWORD *)&v27[0].msgh_remote_port = 0x40000000;
    *(_QWORD *)&v27[0].msgh_voucher_port = ___ZN11IPCAUServer19UnpublishOutputUnitEP28OpaqueAudioComponentInstance_block_invoke;
    *(_QWORD *)&v27[1].msgh_bits = &__block_descriptor_tmp_70;
    *(_QWORD *)&v27[1].msgh_remote_port = v19;
    IPCAUServer::PerformBlockOnServerQueue((uint64_t)v27);
  }
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (*((_BYTE *)this + 592))
  {
    BaseOpaqueObject::~BaseOpaqueObject((AURemoteIO *)((char *)this + 568));
    *((_BYTE *)this + 592) = 0;
  }
  if (kRIOClientSubsystem)
  {
    v20 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_59;
  }
  else
  {
    v20 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    v27[0].msgh_bits = 136315650;
    *(_QWORD *)&v27[0].msgh_size = "AURemoteIO.cpp";
    LOWORD(v27[0].msgh_local_port) = 1024;
    *(mach_port_t *)((char *)&v27[0].msgh_local_port + 2) = 484;
    HIWORD(v27[0].msgh_voucher_port) = 2048;
    *(_QWORD *)&v27[0].msgh_id = this;
    _os_log_impl(&dword_210A23000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-AURemoteIO@%p destructor", (uint8_t *)v27, 0x1Cu);
  }
LABEL_59:
  v21 = *((_QWORD *)this + 160);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    *((_QWORD *)this + 160) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::RealtimeMessenger>::set((uint64_t *)this + 159, 0);
  v22 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = (void *)*((_QWORD *)this + 121);
  if (v23)
  {
    *((_QWORD *)this + 122) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 118);
  if (v24)
  {
    *((_QWORD *)this + 119) = v24;
    operator delete(v24);
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((AURemoteIO *)((char *)this + 880));
  AUIOHelper::~AUIOHelper((AURemoteIO *)((char *)this + 800));
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 768);
  v25 = *((_QWORD *)this + 95);
  if (v25)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    *((_QWORD *)this + 95) = 0;
  }
  v26 = *((_QWORD *)this + 94);
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    *((_QWORD *)this + 94) = 0;
  }
  CADeprecated::XBasicMIGServer::~XBasicMIGServer((AURemoteIO *)((char *)this + 632));
  MEMORY[0x212BCD560]((char *)this + 628);
  if (*((_BYTE *)this + 592))
    BaseOpaqueObject::~BaseOpaqueObject((AURemoteIO *)((char *)this + 568));
  AUGenericOutput::~AUGenericOutput(this);
}

void AURemoteIO::Cleanup(AURemoteIO *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int ServerPort;
  int v6;
  mach_port_t reply_port;
  mach_msg_return_t v8;
  mach_msg_return_t v9;
  NSObject *v10;
  _QWORD v11[8];

  v11[7] = *MEMORY[0x24BDAC8D0];
  if (kRIOClientSubsystem)
  {
    v2 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v11[0]) = 136315650;
    *(_QWORD *)((char *)v11 + 4) = "AURemoteIO.cpp";
    WORD2(v11[1]) = 1024;
    *(_DWORD *)((char *)&v11[1] + 6) = 1254;
    WORD1(v11[2]) = 2048;
    *(_QWORD *)((char *)&v11[2] + 4) = this;
    _os_log_impl(&dword_210A23000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->AURemoteIO(%p)::Cleanup", (uint8_t *)v11, 0x1Cu);
  }
LABEL_7:
  (*(void (**)(AURemoteIO *))(*(_QWORD *)this + 448))(this);
  AUConverterBase::CloseConverters(this);
  v3 = *((_QWORD *)this + 94);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 94) = 0;
  }
  v4 = *((_QWORD *)this + 95);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 95) = 0;
  }
  RIOServer::GetServerPort((const char **)gRIOServer);
  ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
  v6 = *((_DWORD *)this + 178);
  *(_QWORD *)((char *)&v11[4] + 4) = 0;
  memset((char *)v11 + 4, 0, 32);
  v11[3] = *MEMORY[0x24BDAC470];
  LODWORD(v11[4]) = v6;
  reply_port = mig_get_reply_port();
  v11[1] = __PAIR64__(reply_port, ServerPort);
  LODWORD(v11[0]) = 5395;
  v11[2] = 0x157C400000000;
  if (MEMORY[0x24BDB0418])
  {
    voucher_mach_msg_set((mach_msg_header_t *)v11);
    reply_port = HIDWORD(v11[1]);
  }
  v8 = mach_msg((mach_msg_header_t *)v11, 275, 0x24u, 0x2Cu, reply_port, *MEMORY[0x24BDB6D08], 0);
  v9 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(HIDWORD(v11[1]));
LABEL_23:
    if (v9 != 268435460)
      goto LABEL_27;
    if ((v11[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], HIDWORD(v11[1]));
    goto LABEL_26;
  }
  if (v8)
  {
    mig_dealloc_reply_port(HIDWORD(v11[1]));
    goto LABEL_23;
  }
  if (HIDWORD(v11[2]) != 88104 || (v11[0] & 0x80000000) != 0 || *(_QWORD *)((char *)v11 + 4) != 36 || LODWORD(v11[4]))
LABEL_26:
    mach_msg_destroy((mach_msg_header_t *)v11);
LABEL_27:
  _CheckRPCError("Cleanup");
  if (kRIOClientSubsystem)
  {
    v10 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      return;
  }
  else
  {
    v10 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(v11[0]) = 136315394;
    *(_QWORD *)((char *)v11 + 4) = "AURemoteIO.cpp";
    WORD2(v11[1]) = 1024;
    *(_DWORD *)((char *)&v11[1] + 6) = 1262;
    _os_log_impl(&dword_210A23000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-AURemoteIO::Cleanup", (uint8_t *)v11, 0x12u);
  }
}

uint64_t AURemoteIO::Stop(AURemoteIO *this)
{
  NSObject *v2;
  int ServerPort;
  int v4;
  NSObject *global_queue;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;
  mach_port_t reply_port;
  uint64_t (*v15)(_QWORD);
  int v16;
  mach_msg_return_t v17;
  mach_msg_return_t v18;
  unsigned int v19;
  int v20;
  mach_port_t v21;
  mach_msg_return_t v22;
  mach_msg_return_t v23;
  NSObject *v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  _BYTE name[36];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (kRIOClientSubsystem)
  {
    v2 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_7;
  }
  else
  {
    v2 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)name = 136315650;
    *(_QWORD *)&name[4] = "AURemoteIO.cpp";
    *(_WORD *)&name[12] = 1024;
    *(_DWORD *)&name[14] = 1670;
    *(_WORD *)&name[18] = 2048;
    *(_QWORD *)&name[20] = this;
    _os_log_impl(&dword_210A23000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping AURemoteIO(%p)", name, 0x1Cu);
  }
LABEL_7:
  if (*((_BYTE *)this + 558))
  {
    *((_BYTE *)this + 558) = 0;
    (*(void (**)(AURemoteIO *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 2001, 0, 0);
  }
  if (AURemoteIO::OnIOThread(this))
  {
    RIOServer::GetServerPort((const char **)gRIOServer);
    ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
    v4 = *((_DWORD *)this + 178);
    *(_QWORD *)&name[24] = *MEMORY[0x24BDAC470];
    *(_DWORD *)&name[32] = v4;
    *(_QWORD *)name = 19;
    *(_DWORD *)&name[16] = 0;
    *(_DWORD *)&name[20] = 88010;
    *(_DWORD *)&name[8] = ServerPort;
    *(_DWORD *)&name[12] = 0;
    if (MEMORY[0x24BDB0418])
      voucher_mach_msg_set((mach_msg_header_t *)name);
    if (mach_msg((mach_msg_header_t *)name, 17, 0x24u, 0, 0, *MEMORY[0x24BDB6D08], 0) == 268435460)
    {
      if ((*(_WORD *)name & 0x1F00) == 0x1100)
        mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)&name[12]);
      mach_msg_destroy((mach_msg_header_t *)name);
    }
    _CheckRPCError("Stop");
    *((_BYTE *)this + 784) = 1;
    global_queue = dispatch_get_global_queue(0, 0);
    v6 = *((_QWORD *)this + 96);
    v7 = *((_QWORD *)this + 97);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (_QWORD *)operator new();
    *v10 = v6;
    v10[1] = v7;
    *(_QWORD *)name = 0;
    dispatch_async_f(global_queue, v10, (dispatch_function_t)applesauce::dispatch::v1::async<AURemoteIO::Stop(void)::$_0>(dispatch_queue_s *,AURemoteIO::Stop(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<AURemoteIO::Stop(void)::$_0,std::default_delete<AURemoteIO::Stop(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)name);
    goto LABEL_66;
  }
  if (!*((_QWORD *)this + 96))
    goto LABEL_66;
  RIOServer::GetServerPort((const char **)gRIOServer);
  v11 = RIOServer::GetServerPort((const char **)gRIOServer);
  v12 = *((_DWORD *)this + 178);
  v33 = 0;
  memset(&name[4], 0, 32);
  v13 = (_QWORD *)MEMORY[0x24BDAC470];
  *(_QWORD *)&name[24] = *MEMORY[0x24BDAC470];
  *(_DWORD *)&name[32] = v12;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&name[8] = v11;
  *(_DWORD *)&name[12] = reply_port;
  *(_DWORD *)name = 5395;
  *(_QWORD *)&name[16] = 0x157C900000000;
  v15 = MEMORY[0x24BDB0418];
  if (MEMORY[0x24BDB0418])
  {
    voucher_mach_msg_set((mach_msg_header_t *)name);
    reply_port = *(_DWORD *)&name[12];
  }
  v16 = 268435460;
  v17 = mach_msg((mach_msg_header_t *)name, 275, 0x24u, 0x2Cu, reply_port, *MEMORY[0x24BDB6D08], 0);
  v18 = v17;
  if ((v17 - 268435458) <= 0xE && ((1 << (v17 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&name[12]);
LABEL_34:
    if (v18 != 268435460)
      goto LABEL_38;
    if ((*(_WORD *)name & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)&name[12]);
    goto LABEL_37;
  }
  if (v17)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&name[12]);
    goto LABEL_34;
  }
  if (*(_DWORD *)&name[20] != 88109
    || (*(_DWORD *)name & 0x80000000) != 0
    || *(_DWORD *)&name[4] != 36
    || *(_DWORD *)&name[8]
    || *(_DWORD *)&name[32])
  {
LABEL_37:
    mach_msg_destroy((mach_msg_header_t *)name);
  }
LABEL_38:
  _CheckRPCError("Stop");
  v19 = atomic_load((unsigned int *)this + 157);
  v20 = *((_DWORD *)this + 144);
  v33 = 0;
  memset(&name[4], 0, 32);
  *(_QWORD *)&name[24] = *v13;
  *(_DWORD *)&name[32] = v20;
  v21 = mig_get_reply_port();
  *(_DWORD *)&name[8] = v19;
  *(_DWORD *)&name[12] = v21;
  *(_DWORD *)name = 5395;
  *(_QWORD *)&name[16] = 0x15BA900000000;
  if (v15)
  {
    voucher_mach_msg_set((mach_msg_header_t *)name);
    v21 = *(_DWORD *)&name[12];
  }
  v22 = mach_msg((mach_msg_header_t *)name, 275, 0x24u, 0x2Cu, v21, 0x7530u, 0);
  v23 = v22;
  if ((v22 - 268435458) <= 0xE && ((1 << (v22 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&name[12]);
  }
  else
  {
    if (!v22)
    {
      if (*(_DWORD *)&name[20] == 71)
      {
        v16 = -308;
      }
      else if (*(_DWORD *)&name[20] == 89101)
      {
        v16 = -300;
        if ((*(_DWORD *)name & 0x80000000) == 0 && *(_DWORD *)&name[4] == 36 && !*(_DWORD *)&name[8])
        {
          v16 = *(_DWORD *)&name[32];
          if (!*(_DWORD *)&name[32])
            goto LABEL_66;
        }
      }
      else
      {
        v16 = -301;
      }
      goto LABEL_59;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&name[12]);
  }
  if (v23 != 268435460)
  {
    if (!v23)
      goto LABEL_66;
    goto LABEL_60;
  }
  if ((*(_WORD *)name & 0x1F00) == 0x1100)
    mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)&name[12]);
LABEL_59:
  mach_msg_destroy((mach_msg_header_t *)name);
  v23 = v16;
LABEL_60:
  if (kRIOClientSubsystem)
  {
    v24 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_66;
  }
  else
  {
    v24 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = atomic_load((unsigned int *)this + 157);
    *(_DWORD *)name = 136315906;
    *(_QWORD *)&name[4] = "AURemoteIO.cpp";
    *(_WORD *)&name[12] = 1024;
    *(_DWORD *)&name[14] = 1684;
    *(_WORD *)&name[18] = 1024;
    *(_DWORD *)&name[20] = v23;
    *(_WORD *)&name[24] = 1024;
    *(_DWORD *)&name[26] = v25;
    _os_log_impl(&dword_210A23000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d AURemoteIO::Stop: error %d calling TerminateOwnIOThread (port %d)", name, 0x1Eu);
  }
LABEL_66:
  *(_QWORD *)name = 0;
  *(_QWORD *)&name[8] = 0;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)this + 768, (__int128 *)name);
  v26 = *(std::__shared_weak_count **)&name[8];
  if (*(_QWORD *)&name[8])
  {
    v27 = (unint64_t *)(*(_QWORD *)&name[8] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  CADeprecated::XMachReceivePort::SetMachPort((AURemoteIO *)((char *)this + 628));
  v29 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (kRIOClientSubsystem)
  {
    v30 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      return 0;
  }
  else
  {
    v30 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)name = 136315394;
    *(_QWORD *)&name[4] = "AURemoteIO.cpp";
    *(_WORD *)&name[12] = 1024;
    *(_DWORD *)&name[14] = 1693;
    _os_log_impl(&dword_210A23000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-AURemoteIO::Stop", name, 0x12u);
  }
  return 0;
}

void sub_210AC742C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AURemoteIO::SetAudioChannelLayout(AURemoteIO *this, const AudioChannelLayout *a2, uint64_t a3, AudioChannelLayout *a4)
{
  int v6;
  int v8;
  ausdk::AUScope *v9;
  unsigned int v10;
  uint64_t Element;
  _BYTE v13[8];

  v6 = (int)a2;
  if (a4)
    v8 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, a2);
  else
    v8 = 0;
  if ((v6 - 3) <= 0xFFFFFFFD)
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  if (a3 >= 2 || v6 == 2 && !(_DWORD)a3 || v6 == 1 && (_DWORD)a3 == 1)
    ausdk::Throw((ausdk *)0xFFFFD583);
  if ((_DWORD)a3)
  {
    v9 = (AURemoteIO *)((char *)this + 128);
    v10 = 1;
  }
  else
  {
    v9 = (AURemoteIO *)((char *)this + 80);
    v10 = 0;
  }
  Element = ausdk::AUScope::SafeGetElement(v9, v10);
  if (!a4)
  {
    ausdk::AUScope::SafeGetElement((AURemoteIO *)((char *)this + 80), a3);
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v13);
    CAAudioChannelLayout::operator=();
    MEMORY[0x212BCD890](v13);
    return (*(uint64_t (**)(AURemoteIO *, uint64_t, _QWORD))(*(_QWORD *)this + 576))(this, a3, 0);
  }
  if (*(_DWORD *)(Element + 108) == v8)
  {
    ausdk::AUScope::SafeGetElement((AURemoteIO *)((char *)this + 80), a3);
    CAAudioChannelLayout::operator=();
    return (*(uint64_t (**)(AURemoteIO *, uint64_t, _QWORD))(*(_QWORD *)this + 576))(this, a3, 0);
  }
  return 4294956445;
}

uint64_t AURemoteIO::RemoveAudioChannelLayout(AURemoteIO *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(AURemoteIO *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 536))(this, a2, a3, 0);
}

uint64_t *applesauce::dispatch::v1::async<AURemoteIO::Stop(void)::$_0>(dispatch_queue_s *,AURemoteIO::Stop(void)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return std::unique_ptr<AURemoteIO::Stop(void)::$_0,std::default_delete<AURemoteIO::Stop(void)::$_0>>::~unique_ptr[abi:ne180100](&v2);
}

uint64_t *std::unique_ptr<AURemoteIO::Stop(void)::$_0,std::default_delete<AURemoteIO::Stop(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v2);
    MEMORY[0x212BCDF50](v3, 0x20C40A4A59CD2);
  }
  return a1;
}

void AudioIssueDetectorClientReset(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a1);
}

uint64_t AudioIssueDetectorClientSetNodeFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    return AudioIssueDetectorLibraryLoader(void)::libSym(a1, a2, a3, a4, 4096);
  else
    return 0xFFFFFFFFLL;
}

void AudioIssueDetectorClientInitialize(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    AudioIssueDetectorLibraryLoader(void)::libSym(a1);
}

uint64_t AQMEAudioCapturer(uint64_t a1, int a2)
{
  uint64_t v3;

  if ((a2 - 1) > 2)
    v3 = 290;
  else
    v3 = qword_210B058E8[a2 - 1];
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1)
    dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_73);
  if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction)
    return NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v3, "AudioCapture/AudioToolbox", "aurio", 1667327590, 0, a1);
  else
    return 0;
}

void std::allocate_shared[abi:ne180100]<AURemoteIO::IOThread,std::allocator<AURemoteIO::IOThread>,AURemoteIO&,caulk::thread::attributes const&,caulk::mach::os_workgroup_managed &,void>(std::__shared_weak_count **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  std::string *v14;
  std::string *v15;
  std::__shared_weak_count *shared_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;

  v8 = (std::__shared_weak_count *)operator new(0x80uLL);
  *(_OWORD *)&v8->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95928;
  v8[1].std::__shared_count = 0u;
  v10 = v8 + 1;
  v11 = MEMORY[0x24BEC6F58];
  v8[1].__shared_weak_owners_ = a2;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)(v11 + 16);
  v8[2].__shared_owners_ = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a4 + 8), v12);
  v13 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v8[2].__shared_weak_owners_ = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v8[3].__shared_owners_ = v13;
  *(_OWORD *)((char *)&v8[3].__shared_weak_owners_ + 1) = *(_OWORD *)(a4 + 41);
  v8[4].__shared_weak_owners_ = 0;
  LOBYTE(v8[5].__vftable) = 0;
  v14 = (std::string *)operator new();
  v15 = v14;
  v14->__r_.__value_.__s.__data_[0] = 0;
  v14[1].__r_.__value_.__s.__data_[0] = 0;
  if (*(_BYTE *)(a3 + 24))
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    }
    v15[1].__r_.__value_.__s.__data_[0] = 1;
  }
  *(_OWORD *)&v15[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)((char *)&v15[1].__r_.__value_.__r.__words[2] + 5) = *(_OWORD *)(a3 + 45);
  v15[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
  caulk::thread::start((caulk::thread *)&v8[4].__shared_weak_owners_, (caulk::thread::attributes *)v15, (void *(*)(void *))caulk::thread_proxy<std::tuple<caulk::thread::attributes,AURemoteIO::IOThread::IOThread(AURemoteIO&,caulk::thread::attributes const&,caulk::mach::os_workgroup_managed const&)::{lambda(void)#1},std::tuple<>>>, v15);
  *a1 = v10;
  a1[1] = v8;
  shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_210AC79D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  caulk::mach::os_workgroup_managed *v2;
  uint64_t v3;
  std::__shared_weak_count *shared_owners;
  void *v6;

  if (*(_BYTE *)(v3 + 24) && *(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  MEMORY[0x212BCDF50](v3, 0x1032C4060C540BCLL);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed(v2);
  shared_owners = (std::__shared_weak_count *)v1[1].__shared_owners_;
  if (shared_owners)
    std::__shared_weak_count::__release_weak(shared_owners);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t AudioIssueDetectorClientUpdateReportingSessions(uint64_t a1, uint64_t a2)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1)
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
    return AudioIssueDetectorLibraryLoader(void)::libSym(a1, a2);
  else
    return 0xFFFFFFFFLL;
}

_QWORD *std::vector<long long>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v6 = 8 * a3;
    v7 = (char *)operator new(8 * a3);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

void sub_210AC7B30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,AURemoteIO::IOThread::IOThread(AURemoteIO&,caulk::thread::attributes const&,caulk::mach::os_workgroup_managed const&)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 24))
    {
      if (*(char *)(result + 23) < 0)
        operator delete(*(void **)result);
    }
    JUMPOUT(0x212BCDF50);
  }
  return result;
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

void std::__shared_ptr_emplace<AURemoteIO::IOThread>::__on_zero_shared(_QWORD *a1)
{
  caulk::thread *v2;
  std::__shared_weak_count *v3;

  v2 = (caulk::thread *)(a1 + 14);
  caulk::thread::join((caulk::thread *)(a1 + 14));
  caulk::thread::~thread(v2);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(a1 + 6));
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AURemoteIO::RenderBus(unsigned int &,AudioTimeStamp const&,unsigned int,unsigned int)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  kdebug_trace();
  return a1;
}

float GetMeterValues(int a1, PowerMeter *this, PowerMeter *a3, uint64_t a4, float result)
{
  double *v7;
  double v9;
  double v10;
  double v11;
  float v12;

  if (this != a3)
  {
    v7 = (double *)this;
    do
    {
      v9 = v7[14];
      if (a1 == 1892)
      {
        PowerMeter::LinearToDB((PowerMeter *)v7, v9);
        *(float *)&v10 = v10;
        *(_DWORD *)a4 = LODWORD(v10);
        PowerMeter::LinearToDB((PowerMeter *)v7, v7[15]);
      }
      else
      {
        v12 = v9;
        *(float *)a4 = v12;
        v11 = v7[15];
      }
      result = v11;
      *(float *)(a4 + 4) = result;
      a4 += 8;
      v7 += 16;
    }
    while (v7 != (double *)a3);
  }
  return result;
}

void MIGVariableLengthVars::~MIGVariableLengthVars(MIGVariableLengthVars *this)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(this);
  JUMPOUT(0x212BCDF50);
}

void SharedAudioBuffer::~SharedAudioBuffer(xpc_object_t *this)
{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;

  *this = &off_24CA90EB8;
  v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x212BCDF50);
}

void MIGVariableLengthVars2<unsigned char [1024]>::~MIGVariableLengthVars2(MIGVariableLengthRefs *a1)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(a1);
  JUMPOUT(0x212BCDF50);
}

void sub_210AC8550(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::CAAutoDelete<CADeprecated::RealtimeMessenger>::set(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (result != a2)
  {
    if (result)
    {
      v5 = MEMORY[0x212BCD59C]();
      result = MEMORY[0x212BCDF50](v5, 0x10A0C40A7EFA649);
    }
    *a1 = a2;
  }
  return result;
}

void AUIOHelper::~AUIOHelper(AUIOHelper *this)
{
  ausdk::AUBufferList::Deallocate((_QWORD *)this + 4);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 2, 0);
}

uint64_t ___ZN11IPCAUServer19UnpublishOutputUnitEP28OpaqueAudioComponentInstance_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  AudioComponentDescription *v7;
  AudioComponentDescription *v8;
  AudioComponentDescription *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  AudioComponentDescription *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  const AudioComponentDescription *v22;
  NSObject *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  int v29;
  __int128 v30;
  mach_port_t reply_port;
  mach_msg_return_t v32;
  mach_msg_return_t v33;
  char *v35;
  int64_t v36;
  void *v38[2];
  UInt32 componentFlagsMask;
  _BYTE buf[12];
  _BYTE rcv_name[20];
  __int128 v42;
  UInt32 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v2 = CADeprecated::TSingleton<IPCAUServer>::instance();
  v3 = *(_QWORD *)(a1 + 32);
  if (kLocalInterAppAudioScope)
  {
    v4 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUServer.cpp";
    *(_WORD *)rcv_name = 1024;
    *(_DWORD *)&rcv_name[2] = 306;
    *(_WORD *)&rcv_name[6] = 2048;
    *(_QWORD *)&rcv_name[8] = v3;
    _os_log_impl(&dword_210A23000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: unpublishing output unit %p", buf, 0x1Cu);
  }
LABEL_7:
  v5 = *(uint64_t **)(v2 + 240);
  v6 = *(uint64_t **)(v2 + 248);
  if (v5 == v6)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *v5;
    if (*(_QWORD *)(*v5 + 104) == v3)
    {
      v11 = (__int128 *)(v10 + 24);
      if (v8 >= v9)
      {
        v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v7) >> 2) + 1;
        if (v13 > 0xCCCCCCCCCCCCCCCLL)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * (((char *)v9 - (char *)v7) >> 2) > v13)
          v13 = 0x999999999999999ALL * (((char *)v9 - (char *)v7) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v7) >> 2) >= 0x666666666666666)
          v14 = 0xCCCCCCCCCCCCCCCLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 > 0xCCCCCCCCCCCCCCCLL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v15 = (char *)operator new(20 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = *v11;
        v17 = (AudioComponentDescription *)&v15[4 * (((char *)v8 - (char *)v7) >> 2)];
        v17->componentFlagsMask = *((_DWORD *)v11 + 4);
        *(_OWORD *)&v17->componentType = v16;
        if (v8 == v7)
        {
          v20 = &v15[4 * (((char *)v8 - (char *)v7) >> 2)];
        }
        else
        {
          v18 = &v15[4 * (((char *)v8 - (char *)v7) >> 2)];
          do
          {
            v19 = *(_OWORD *)&v8[-1].componentType;
            v20 = v18 - 20;
            *((_DWORD *)v18 - 1) = v8[-1].componentFlagsMask;
            *(_OWORD *)(v18 - 20) = v19;
            --v8;
            v18 -= 20;
          }
          while (v8 != v7);
        }
        v9 = (AudioComponentDescription *)&v15[20 * v14];
        v8 = v17 + 1;
        if (v7)
          operator delete(v7);
        v7 = (AudioComponentDescription *)v20;
      }
      else
      {
        v12 = *v11;
        v8->componentFlagsMask = *(_DWORD *)(v10 + 40);
        *(_OWORD *)&v8->componentType = v12;
        ++v8;
      }
    }
    ++v5;
  }
  while (v5 != v6);
  if (v7 != v8)
  {
    LODWORD(v21) = 0;
    v22 = v7;
    while (kLocalInterAppAudioScope)
    {
      v23 = *(NSObject **)kLocalInterAppAudioScope;
      if (*(_QWORD *)kLocalInterAppAudioScope)
        goto LABEL_37;
LABEL_40:
      v24 = *(char **)(v2 + 240);
      v25 = *(char **)(v2 + 248);
      while (1)
      {
        if (v24 == v25)
        {
          v27 = -50;
LABEL_47:
          v28 = 1;
          goto LABEL_48;
        }
        v26 = *(_QWORD *)v24;
        if (CAComponentDescription::Matches((CAComponentDescription *)(*(_QWORD *)v24 + 24), v22))
          break;
        v24 += 8;
      }
      if (*(int *)(v26 + 112) > 0)
      {
        v27 = -66750;
        goto LABEL_47;
      }
      v29 = AURegistrationServerConnection_ServerPort();
      v30 = *(_OWORD *)&v22->componentType;
      componentFlagsMask = v22->componentFlagsMask;
      *(_OWORD *)v38 = v30;
      *(_QWORD *)&rcv_name[12] = *MEMORY[0x24BDAC470];
      v42 = v30;
      v43 = componentFlagsMask;
      reply_port = mig_get_reply_port();
      *(_QWORD *)buf = 5395;
      *(_DWORD *)&buf[8] = v29;
      *(_DWORD *)rcv_name = reply_port;
      *(_QWORD *)&rcv_name[4] = 0x15F9300000000;
      if (MEMORY[0x24BDB0418])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        reply_port = *(_DWORD *)rcv_name;
      }
      v32 = mach_msg((mach_msg_header_t *)buf, 275, 0x34u, 0x2Cu, reply_port, *MEMORY[0x24BDB6D08], 0);
      v33 = v32;
      if ((v32 - 268435458) <= 0xE && ((1 << (v32 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)rcv_name);
LABEL_68:
        if (v33 != 268435460)
          goto LABEL_72;
        if ((*(_WORD *)buf & 0x1F00) == 0x1100)
          mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)rcv_name);
LABEL_71:
        mach_msg_destroy((mach_msg_header_t *)buf);
        goto LABEL_72;
      }
      if (v32)
      {
        mig_dealloc_reply_port(*(mach_port_t *)rcv_name);
        goto LABEL_68;
      }
      if (*(_DWORD *)&rcv_name[8] != 90103
        || (*(_DWORD *)buf & 0x80000000) != 0
        || *(_DWORD *)&buf[4] != 36
        || *(_DWORD *)&buf[8]
        || (_DWORD)v42)
      {
        goto LABEL_71;
      }
LABEL_72:
      if (*(_QWORD *)(v26 + 72))
        AudioComponentRelease();
      if (*(_QWORD *)v24)
        (*(void (**)(_QWORD))(**(_QWORD **)v24 + 8))(*(_QWORD *)v24);
      v35 = *(char **)(v2 + 248);
      v36 = v35 - (v24 + 8);
      if (v35 != v24 + 8)
        memmove(v24, v24 + 8, v35 - (v24 + 8));
      v28 = 0;
      v27 = 0;
      *(_QWORD *)(v2 + 248) = &v24[v36];
LABEL_48:
      if ((((_DWORD)v21 == 0) & v28) != 0)
        v21 = v27;
      else
        v21 = v21;
      if (++v22 == v8)
        goto LABEL_81;
    }
    v23 = MEMORY[0x24BDACB70];
LABEL_37:
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      MEMORY[0x212BCD50C](v38, v22);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "IPCAUServer.cpp";
      *(_WORD *)rcv_name = 1024;
      *(_DWORD *)&rcv_name[2] = 279;
      *(_WORD *)&rcv_name[6] = 2080;
      *(void **)&rcv_name[8] = v38[0];
      _os_log_impl(&dword_210A23000, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer: unpublishing AU %s", buf, 0x1Cu);
      if (v38[0])
        free(v38[0]);
    }
    goto LABEL_40;
  }
  v21 = 0;
LABEL_81:
  if (v7)
    operator delete(v7);
  return v21;
}

void sub_210AC8B24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void AUAudioTapIO::~AUAudioTapIO(AUAudioTapIO *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24CA8B7E8;
  v2 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  AURemoteIO::~AURemoteIO(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24CA8B7E8;
  v2 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  AURemoteIO::~AURemoteIO(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUAudioTapIO::GetPropertyInfo(AUAudioTapIO *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  switch(a2)
  {
    case 2222:
      result = 0;
      *a6 = 1;
      v7 = 8;
LABEL_12:
      *a5 = v7;
      return result;
    case 2006:
      result = 4294956419;
      if (a3 == 1 && a4 == 1)
      {
        result = 0;
        *a6 = 0;
        goto LABEL_11;
      }
      break;
    case 2003:
      result = 4294956419;
      if (a3 == 1 && a4 == 1)
      {
        result = 0;
        *a6 = 1;
LABEL_11:
        v7 = 4;
        goto LABEL_12;
      }
      break;
    default:
      return AURemoteIO::GetPropertyInfo(this, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t AUAudioTapIO::GetProperty(AUAudioTapIO *this, int a2, int a3, unsigned int a4, int *a5, float a6)
{
  uint64_t v6;
  int v7;
  AT::AudioTapClient *v8;

  switch(a2)
  {
    case 2222:
      v8 = (AT::AudioTapClient *)*((_QWORD *)this + 163);
      v6 = 4294956445;
      if (v8)
      {
        if (AT::AudioTapClient::GetObjC(v8, a5))
          return 0;
        else
          return 4294956445;
      }
      return v6;
    case 2006:
      v6 = 4294956419;
      if (a3 != 1 || a4 != 1)
        return v6;
      v6 = 0;
      v7 = *((_QWORD *)this + 163) != 0;
      goto LABEL_14;
    case 2003:
      v6 = 4294956419;
      if (a3 != 1 || a4 != 1)
        return v6;
      v6 = 0;
      v7 = *((_DWORD *)this + 153) & 1;
LABEL_14:
      *a5 = v7;
      return v6;
  }
  return AURemoteIO::GetProperty(this, a2, a3, a4, a5, a6);
}

uint64_t AUAudioTapIO::SetProperty(AUAudioTapIO *this, int a2, uint64_t a3, uint64_t a4, const int *a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  AT::AudioTapClient *v16;
  mach_port_t ServerPort;
  int v18;
  const UInt8 *BytePtr;
  int Length;
  int v21;
  uint64_t Element;
  uint64_t Format;
  uint64_t ChannelLayout;
  uint64_t v25;
  _QWORD v26[3];
  CFDataRef *v27;
  CFTypeRef v28;
  CFTypeRef cf;

  if (a2 != 2222)
  {
    if (a2 != 2003)
      return AURemoteIO::SetProperty(this, a2, a3, a4, a5, a6);
    if (!*((_BYTE *)this + 17))
    {
      v11 = 4294956419;
      if ((_DWORD)a3 == 1 && (_DWORD)a4 == 1)
      {
        v12 = *((_DWORD *)this + 153);
        v13 = v12 & 0xFFFFFFFE | (*a5 != 0);
        if (v13 != v12)
        {
          *((_DWORD *)this + 153) = v13;
          (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 2003, 1, 1);
        }
        return 0;
      }
      return v11;
    }
    return 4294956447;
  }
  if (*((_BYTE *)this + 17))
    return 4294956447;
  v15 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (AT::AudioTapClient *)operator new();
  MEMORY[0x212BCD920](v16, a5, a6);
  AT::AudioTapClient::GetSerializedObjC(v16);
  if (cf)
  {
    v28 = cf;
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v26, 0);
    v26[0] = &off_24CA91F18;
    v11 = PropertyMarshaller::Serialize();
    if ((_DWORD)v11)
      goto LABEL_32;
    RIOServer::GetServerPort((const char **)gRIOServer);
    ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
    v18 = *((_DWORD *)this + 178);
    if (v27 && *v27)
    {
      BytePtr = CFDataGetBytePtr(*v27);
      if (v27 && *v27)
      {
        Length = CFDataGetLength(*v27);
        goto LABEL_25;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
LABEL_25:
    AUIOClient_SetProperty(ServerPort, v18, 1, 2222, (uint64_t)BytePtr, Length);
    v11 = _CheckRPCError("SetProperty");
    if (!(_DWORD)v11)
    {
      Element = ausdk::AUScope::SafeGetElement((AUAudioTapIO *)((char *)this + 128), 1u);
      Format = AT::AudioTapClient::GetFormat(v16);
      if (!Format)
      {
        v11 = 0;
        v21 = 1;
LABEL_33:
        PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v26);
        if (cf)
          CFRelease(cf);
        if (!v16)
          goto LABEL_37;
        goto LABEL_36;
      }
      (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 400))(this, 2, 1, Element + 80, Format);
      ChannelLayout = AT::AudioTapClient::GetChannelLayout(v16);
      if (ChannelLayout)
        (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 536))(this, 2, 1, ChannelLayout);
      v25 = *((_QWORD *)this + 163);
      *((_QWORD *)this + 163) = v16;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      v16 = 0;
      (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 2222, a3, a4);
      v11 = 0;
    }
LABEL_32:
    v21 = 0;
    goto LABEL_33;
  }
  v11 = 0;
  v21 = 1;
LABEL_36:
  (*(void (**)(AT::AudioTapClient *))(*(_QWORD *)v16 + 8))(v16);
LABEL_37:
  if (v21)
    return 4294956445;
  return v11;
}

void sub_210AC9014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16)
{
  uint64_t v16;

  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a9);
  applesauce::CF::DataRef::~DataRef(&a16);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t AUAudioTapIO::RemovePropertyValue(AUAudioTapIO *this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  mach_port_t ServerPort;
  int v11;
  const UInt8 *BytePtr;
  int Length;
  _QWORD v14[3];
  CFDataRef *v15;
  uint64_t v16;

  if (a2 != 2222)
    return AUConverterBase::RemovePropertyValue(this, a2, a3, a4);
  v7 = *((_QWORD *)this + 163);
  if (!v7)
    return 0;
  if (!*((_BYTE *)this + 17))
  {
    *((_QWORD *)this + 163) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v16 = 0;
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v14, 0);
    v14[0] = &off_24CA91F18;
    v8 = PropertyMarshaller::Serialize();
    if ((_DWORD)v8)
    {
LABEL_17:
      PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v14);
      return v8;
    }
    RIOServer::GetServerPort((const char **)gRIOServer);
    ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
    v11 = *((_DWORD *)this + 178);
    if (v15 && *v15)
    {
      BytePtr = CFDataGetBytePtr(*v15);
      if (v15 && *v15)
      {
        Length = CFDataGetLength(*v15);
        goto LABEL_15;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
LABEL_15:
    AUIOClient_SetProperty(ServerPort, v11, 1, 2222, (uint64_t)BytePtr, Length);
    v8 = _CheckRPCError("RemovePropertyValue");
    if (!(_DWORD)v8)
    {
      (*(void (**)(AUAudioTapIO *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 432))(this, 2222, a3, a4);
      v8 = 0;
    }
    goto LABEL_17;
  }
  return 4294956447;
}

void sub_210AC9230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void AURemoteIO::HostStateChange::~HostStateChange(AURemoteIO::HostStateChange *this)
{
  JUMPOUT(0x212BCDF50);
}

uint64_t AURemoteIO::HostStateChange::RealtimeMessenger_Perform(AURemoteIO::HostStateChange *this)
{
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[32];
  unsigned int *v7;
  char v8;
  uint64_t v9;

  result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v6, *((_DWORD *)this + 5));
  if (v9)
  {
    v2 = *(_QWORD **)(v9 + 16);
    v3 = v2[59];
    if (v3)
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(v2[59]);
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v2 + 432))(v2, 2013, 0, 0);
    if (v3)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  if (v8)
  {
    v4 = v7;
    if (v7)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
    }
  }
  return result;
}

void sub_210AC932C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210AC931CLL);
}

void AUVoiceIO::~AUVoiceIO(AUVoiceIO *this)
{
  _BYTE *v2;
  _BYTE *v3;

  *(_QWORD *)this = &off_24CA93C30;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 264, 0);
  v2 = (_BYTE *)*((_QWORD *)this + 262);
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 263);
    if (v3 != v2)
      *((_QWORD *)this + 263) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *((_QWORD *)this + 262) = 0;
    *((_QWORD *)this + 263) = 0;
  }
  MetaDataBlockInfo::~MetaDataBlockInfo((AUVoiceIO *)((char *)this + 1760));
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 218, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 217, 0);
  EncoderBlockInfo::~EncoderBlockInfo((AUVoiceIO *)((char *)this + 1400));
  AURemoteIO::~AURemoteIO(this);
}

{
  _BYTE *v2;
  _BYTE *v3;

  *(_QWORD *)this = &off_24CA93C30;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 264, 0);
  v2 = (_BYTE *)*((_QWORD *)this + 262);
  if (v2)
  {
    v3 = (_BYTE *)*((_QWORD *)this + 263);
    if (v3 != v2)
      *((_QWORD *)this + 263) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v2);
    *((_QWORD *)this + 262) = 0;
    *((_QWORD *)this + 263) = 0;
  }
  MetaDataBlockInfo::~MetaDataBlockInfo((AUVoiceIO *)((char *)this + 1760));
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 218, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 217, 0);
  EncoderBlockInfo::~EncoderBlockInfo((AUVoiceIO *)((char *)this + 1400));
  AURemoteIO::~AURemoteIO(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUVoiceIO::GetPropertyInfo(AUVoiceIO *this, AudioCodecPropertyID a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  int ServerPort;
  int v14;
  mach_port_t reply_port;
  mach_msg_return_t v16;
  mach_msg_return_t v17;
  BOOL v19;
  unsigned int v20;
  unsigned __int8 v21;
  _BYTE msg[36];
  __int128 v23;

  switch(a2)
  {
    case 0x834u:
    case 0x835u:
    case 0x836u:
    case 0x837u:
    case 0x838u:
    case 0x841u:
    case 0x844u:
    case 0x846u:
    case 0x847u:
    case 0x849u:
    case 0x84Bu:
    case 0x84Cu:
    case 0x853u:
    case 0x854u:
    case 0x857u:
      result = 0;
      v10 = 4;
      goto LABEL_4;
    case 0x839u:
      result = 0;
      v10 = 132;
      goto LABEL_4;
    case 0x83Au:
    case 0x83Cu:
    case 0x848u:
    case 0x84Au:
    case 0x850u:
      result = 0;
      v10 = 8;
LABEL_4:
      *a5 = v10;
      v11 = 1;
      goto LABEL_5;
    case 0x83Eu:
    case 0x83Fu:
    case 0x840u:
      result = 0;
      v12 = 4;
      goto LABEL_9;
    case 0x84Du:
    case 0x84Eu:
      result = 0;
      v12 = 8;
LABEL_9:
      *a5 = v12;
      *a6 = 0;
      return result;
    case 0x852u:
      RIOServer::GetServerPort((const char **)gRIOServer);
      ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
      v14 = *((_DWORD *)this + 178);
      *(_OWORD *)&msg[20] = 0u;
      v23 = 0u;
      *(_OWORD *)&msg[4] = 0u;
      *(_QWORD *)&msg[24] = *MEMORY[0x24BDAC470];
      *(_DWORD *)&msg[32] = v14;
      DWORD1(v23) = 1936747876;
      reply_port = mig_get_reply_port();
      *(_DWORD *)&msg[8] = ServerPort;
      *(_DWORD *)&msg[12] = reply_port;
      *(_DWORD *)msg = 5395;
      *(_QWORD *)&msg[16] = 0x157CD00000000;
      if (MEMORY[0x24BDB0418])
      {
        voucher_mach_msg_set((mach_msg_header_t *)msg);
        reply_port = *(_DWORD *)&msg[12];
      }
      v16 = mach_msg((mach_msg_header_t *)msg, 275, 0x2Cu, 0x34u, reply_port, *MEMORY[0x24BDB6D08], 0);
      v17 = v16;
      if ((v16 - 268435458) <= 0xE && ((1 << (v16 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&msg[12]);
        goto LABEL_28;
      }
      if (v16)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_28:
        if (v17 == 268435460)
        {
          if ((*(_WORD *)msg & 0x1F00) == 0x1100)
            mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)&msg[12]);
          mach_msg_destroy((mach_msg_header_t *)msg);
          v19 = 0;
          v20 = 0;
          goto LABEL_36;
        }
LABEL_35:
        v19 = 0;
        v20 = 0;
        goto LABEL_36;
      }
      if (*(_DWORD *)&msg[20] != 88113
        || (*(_DWORD *)msg & 0x80000000) != 0
        || *(_DWORD *)&msg[4] != 44
        || *(_DWORD *)&msg[8]
        || *(_DWORD *)&msg[32])
      {
        mach_msg_destroy((mach_msg_header_t *)msg);
        goto LABEL_35;
      }
      v20 = v23;
      v19 = DWORD1(v23) != 0;
LABEL_36:
      result = _CheckRPCError("GetVoicePropertyInfo");
      *a6 = v19;
      *a5 = v20;
      return result;
    default:
      if (a2 < 0x10000)
        return AURemoteIO::GetPropertyInfo(this, a2, a3, a4, a5, a6);
      *(_DWORD *)msg = 0;
      v21 = 0;
      result = VPEncoderWrapper::GetPropertyInfo((AudioCodec *)this + 175, a2, (unsigned int *)msg, &v21);
      if (!(_DWORD)result)
      {
        *a5 = *(_DWORD *)msg;
        v11 = v21 != 0;
LABEL_5:
        *a6 = v11;
      }
      return result;
  }
}

uint64_t AUVoiceIO::GetProperty(AUVoiceIO *this, AudioCodecPropertyID a2, int a3, unsigned int a4, _QWORD *a5)
{
  const __CFString *v10;
  double *v11;
  float v12;
  uint64_t VoiceIOPreferredHWSampleRate;
  int v14;
  uint64_t v15;
  AUVoiceIO *v16;
  int v17;
  AudioCodec *v18;
  unsigned int *v19;
  unsigned __int8 v21;
  unsigned int v22;

  if (AURemoteIO::OnIOThread(this))
    return 4294956433;
  VoiceIOPreferredHWSampleRate = 0;
  switch(a2)
  {
    case 0x834u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1301);
      goto LABEL_38;
    case 0x835u:
      v16 = this;
      v17 = 32769;
      return AUVoiceIO::GetVoiceProperty(v16, v17, a5);
    case 0x836u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1302);
      goto LABEL_38;
    case 0x837u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 327);
      goto LABEL_38;
    case 0x838u:
      AUVoiceIO::GetVoiceProperty(this, 32772, a5);
      return 0;
    case 0x839u:
      return VoiceIOPreferredHWSampleRate;
    case 0x83Au:
      return 4294956417;
    case 0x83Cu:
      VoiceIOPreferredHWSampleRate = 0;
      *a5 = *((_QWORD *)this + 168);
      return VoiceIOPreferredHWSampleRate;
    case 0x83Eu:
      if (!*((_BYTE *)this + 1352))
        return 4294956429;
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 422);
LABEL_38:
      *(_DWORD *)a5 = v14;
      return VoiceIOPreferredHWSampleRate;
    case 0x83Fu:
      VoiceIOPreferredHWSampleRate = 0;
      if (*((_BYTE *)this + 1352))
        v14 = *((_DWORD *)this + 423);
      else
        v14 = *((_DWORD *)this + 438);
      goto LABEL_38;
    case 0x840u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 440);
      goto LABEL_38;
    case 0x841u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1303);
      goto LABEL_38;
    case 0x844u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 328);
      goto LABEL_38;
    case 0x846u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 329);
      goto LABEL_38;
    case 0x847u:
    case 0x849u:
    case 0x84Fu:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 330);
      goto LABEL_38;
    case 0x848u:
    case 0x84Au:
    case 0x850u:
      VoiceIOPreferredHWSampleRate = 0;
      v15 = *((_QWORD *)this + 166);
      goto LABEL_6;
    case 0x84Bu:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1304);
      goto LABEL_38;
    case 0x84Cu:
      VoiceIOPreferredHWSampleRate = 0;
      *(_DWORD *)a5 = 0;
      return VoiceIOPreferredHWSampleRate;
    case 0x84Du:
      VoiceIOPreferredHWSampleRate = GetVoiceIOPreferredHWSampleRate(*((_DWORD *)this + 329), (double *)a5, v10, v11);
      if (*(double *)a5 != -1.0)
        return VoiceIOPreferredHWSampleRate;
      v15 = *(_QWORD *)(ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u) + 80);
LABEL_6:
      *a5 = v15;
      return VoiceIOPreferredHWSampleRate;
    case 0x84Eu:
      return GetVoiceIOPreferredHWBlockSizeInSeconds(*((_DWORD *)this + 329), (double *)a5, v10, v11);
    case 0x852u:
      v16 = this;
      v17 = 1936747876;
      return AUVoiceIO::GetVoiceProperty(v16, v17, a5);
    case 0x853u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((_DWORD *)this + 334);
      goto LABEL_38;
    case 0x854u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1340);
      goto LABEL_38;
    case 0x857u:
      VoiceIOPreferredHWSampleRate = 0;
      v14 = *((unsigned __int8 *)this + 1341);
      goto LABEL_38;
    default:
      if (a2 < 0x10000)
        return AURemoteIO::GetProperty(this, a2, a3, a4, a5, v12);
      v22 = 0;
      v21 = 0;
      v18 = (AudioCodec *)((char *)this + 1400);
      VoiceIOPreferredHWSampleRate = VPEncoderWrapper::GetPropertyInfo(v18, a2, &v22, &v21);
      if (!(_DWORD)VoiceIOPreferredHWSampleRate)
        VoiceIOPreferredHWSampleRate = VPEncoderWrapper::GetProperty(v18, a2, a5, &v22, v19);
      break;
  }
  return VoiceIOPreferredHWSampleRate;
}

uint64_t AUVoiceIO::SetProperty(AUVoiceIO *this, AudioCodecPropertyID a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  uint64_t result;
  NSObject *v13;
  const void *v14;
  const void *v15;
  int v16;
  void *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  AUVoiceIO *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  AudioCodecPropertyID v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (AURemoteIO::OnIOThread(this))
    return 4294956433;
  if (!kRIOClientSubsystem)
  {
    v13 = MEMORY[0x24BDACB70];
    goto LABEL_7;
  }
  v13 = *(NSObject **)kRIOClientSubsystem;
  if (*(_QWORD *)kRIOClientSubsystem)
  {
LABEL_7:
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      MEMORY[0x212BCD4F4](&v17, a5, a6);
      *(_DWORD *)buf = 136316930;
      v19 = "AURemoteIO.cpp";
      v20 = 1024;
      v21 = 2888;
      v22 = 2048;
      v23 = this;
      v24 = 1024;
      v25 = a3;
      v26 = 1024;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      v30 = 1024;
      v31 = a6;
      v32 = 2080;
      v33 = v17;
      _os_log_impl(&dword_210A23000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO(%p)::SetProperty scope %d, elem %d, prop %d, %d bytes: %s", buf, 0x3Eu);
      if (v17)
        free(v17);
    }
  }
  result = 0;
  switch(a2)
  {
    case 0x834u:
      *((_BYTE *)this + 1301) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 0x8000, a6, a5);
      goto LABEL_39;
    case 0x835u:
      AUVoiceIO::SetVoiceProperty(this, 32769, a6, a5);
      goto LABEL_39;
    case 0x836u:
      result = 0;
      *((_BYTE *)this + 1302) = *a5 != 0;
      return result;
    case 0x837u:
      result = 0;
      *((_DWORD *)this + 327) = *a5;
      return result;
    case 0x838u:
      AUVoiceIO::SetVoiceProperty(this, 32772, a6, a5);
      goto LABEL_39;
    case 0x839u:
    case 0x84Cu:
      return result;
    case 0x83Au:
      v14 = (const void *)*((_QWORD *)this + 161);
      if (v14)
      {
        _Block_release(v14);
        *((_QWORD *)this + 161) = 0;
      }
      v15 = *(const void **)a5;
      if (v15)
        *((_QWORD *)this + 161) = _Block_copy(v15);
      *(_DWORD *)buf = v15 != 0;
      return AUVoiceIO::SetVoiceProperty(this, 1836278117, 4u, buf);
    case 0x83Cu:
      *((_QWORD *)this + 168) = *(_QWORD *)a5;
      AUVoiceIO::SetVoiceProperty(this, 1868653667, a6, a5);
      goto LABEL_39;
    case 0x841u:
      if (*((_BYTE *)this + 17))
        goto LABEL_31;
      result = 0;
      v16 = *a5;
      *((_BYTE *)this + 1303) = *a5 != 0;
      *((_DWORD *)this + 464) = v16;
      return result;
    case 0x844u:
      result = 0;
      *((_DWORD *)this + 328) = *a5;
      return result;
    case 0x846u:
      if (*((_BYTE *)this + 17))
      {
LABEL_31:
        result = 4294956447;
      }
      else
      {
        *((_DWORD *)this + 329) = *a5;
        AUVoiceIO::SetVoiceProperty(this, 32787, a6, a5);
LABEL_39:
        result = 0;
      }
      break;
    case 0x847u:
    case 0x849u:
    case 0x84Fu:
      *((_DWORD *)this + 330) = *a5;
      AUVoiceIO::SetVoiceProperty(this, 1953915764, a6, a5);
      goto LABEL_39;
    case 0x848u:
    case 0x84Au:
    case 0x850u:
      *((_QWORD *)this + 166) = *(_QWORD *)a5;
      AUVoiceIO::SetVoiceProperty(this, 1953915762, a6, a5);
      goto LABEL_39;
    case 0x84Bu:
      *((_BYTE *)this + 1304) = *a5 != 0;
      AUVoiceIO::SetVoiceProperty(this, 32794, a6, a5);
      goto LABEL_39;
    case 0x84Du:
    case 0x84Eu:
      return 4294956431;
    case 0x852u:
      return AUVoiceIO::SetVoiceProperty(this, 1936747876, a6, a5);
    case 0x853u:
      *((_DWORD *)this + 334) = *a5;
      return AUVoiceIO::SetVoiceProperty(this, 1835361379, a6, a5);
    case 0x854u:
      *((_BYTE *)this + 1340) = *a5 != 0;
      return AUVoiceIO::SetVoiceProperty(this, 1936744803, a6, a5);
    case 0x857u:
      *((_BYTE *)this + 1341) = *a5 != 0;
      return AUVoiceIO::SetVoiceProperty(this, 1836082532, a6, a5);
    default:
      if (a2 < 0x10000)
        return AURemoteIO::SetProperty(this, a2, a3, a4, a5, a6);
      else
        return VPEncoderWrapper::SetProperty((AUVoiceIO *)((char *)this + 1400), a2, a5, a6);
  }
  return result;
}

uint64_t AUVoiceIO::SetParameter(AUVoiceIO *this, int a2, float a3)
{
  VPEncoderWrapper *v3;
  unsigned int *v4;
  AudioCodecPropertyID v5;
  int v7;
  unsigned int v8;

  if (a2 == 1584488812)
  {
    v7 = (int)a3;
    v3 = (AUVoiceIO *)((char *)this + 1400);
    v4 = (unsigned int *)&v7;
    v5 = 1584488812;
    return VPEncoderWrapper::SetProperty(v3, v5, v4, 4u);
  }
  if (a2 == 1651663220)
  {
    v8 = a3;
    v3 = (AUVoiceIO *)((char *)this + 1400);
    v4 = &v8;
    v5 = 1651663220;
    return VPEncoderWrapper::SetProperty(v3, v5, v4, 4u);
  }
  return 2003332927;
}

uint64_t AUVoiceIO::ComplexRender(AUVoiceIO *this, unsigned int *a2, const AudioTimeStamp *a3, int a4, unsigned int a5, unsigned int *a6, AudioStreamPacketDescription *a7, AudioBufferList *a8, void *__dst, unsigned int *a10)
{
  void *v15;
  uint64_t appended;
  uint64_t Element;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  size_t v23;
  _DWORD *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void **v30;
  const void *v31;
  size_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  const void **v46;
  const void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  size_t v56;
  AudioStreamPacketDescription *v57;
  unsigned int *v58;
  unsigned int v59;
  NSObject *v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  char *v65;
  char *v66;
  AudioStreamPacketDescription *v67;
  UInt32 v68;
  char *v69;
  char *v70;
  UInt32 v71;
  UInt32 v72;
  UInt32 v74;
  unsigned int v75;
  NSObject *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  void **v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  AudioStreamPacketDescription *v100;
  AudioStreamPacketDescription *v101;
  AudioStreamPacketDescription *v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112[2];
  MetadataHandler *v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int *v117;
  int v118;
  AudioStreamPacketDescription *v119;
  void *v120;
  UInt32 v121;
  UInt32 ioOutputDataByteSize;
  UInt32 ioInputDataByteSize;
  UInt32 ioNumberPackets[2];
  uint8_t buf[4];
  const char *v126;
  __int16 v127;
  int v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if (a4 != 1)
    return 4294956419;
  v120 = 0;
  if (*((_BYTE *)this + 1303))
  {
    v15 = (void *)*((_QWORD *)this + 221);
    v120 = v15;
  }
  else
  {
    v15 = 0;
  }
  Element = ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u);
  v18 = *(_DWORD *)(Element + 92);
  v19 = *(_DWORD *)(Element + 112);
  v20 = IPCAUSharedMemoryBase::immutableAudioBufferList(*((IPCAUSharedMemoryBase **)this + 95), 0, a5);
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20 != a8->mNumberBuffers)
    return 4294967246;
  v22 = v20;
  LODWORD(v23) = *(_DWORD *)(v20 + 12);
  if (*((_DWORD *)this + 516))
  {
    v24 = 0;
LABEL_9:
    if (a8->mNumberBuffers)
    {
      v25 = 0;
      v26 = v18 & 0xFFFFFFDF;
      v27 = v22 + 16;
      v28 = 40;
      do
      {
        v29 = *(void **)((char *)&a8[-1].mNumberBuffers + v28);
        if (!v29)
        {
          if (*((_BYTE *)this + 1352))
          {
            v33 = (_QWORD *)(*((_QWORD *)this + 217) + v28);
            LODWORD(v23) = *((_DWORD *)v33 - 1);
            v34 = *v33;
          }
          else
          {
            if (v26 == 12)
            {
              v36 = *((_QWORD *)this + 218);
            }
            else
            {
              if (!*((_DWORD *)this + 516))
              {
                v34 = *(_QWORD *)(v27 + v28 - 40);
                goto LABEL_29;
              }
              v36 = *((_QWORD *)this + 264);
            }
            v34 = *(_QWORD *)(v36 + v28);
          }
LABEL_29:
          *(_QWORD *)((char *)&a8[-1].mNumberBuffers + v28) = v34;
          goto LABEL_30;
        }
        if (*((_BYTE *)this + 1352))
        {
          v30 = (const void **)(*((_QWORD *)this + 217) + v28);
          LODWORD(v23) = *((_DWORD *)v30 - 1);
          v31 = *v30;
          v32 = v23;
        }
        else
        {
          if (v26 == 12)
          {
            v35 = *((_QWORD *)this + 218);
            if (*((_DWORD *)this + 516))
              v23 = *(unsigned int *)(v35 + 36);
            else
              v23 = v23;
            goto LABEL_25;
          }
          if (*((_DWORD *)this + 516))
          {
            v35 = *((_QWORD *)this + 264);
            v23 = *(unsigned int *)(v35 + 36);
LABEL_25:
            memcpy(v29, *(const void **)(v35 + v28), v23);
            goto LABEL_30;
          }
          v31 = *(const void **)(v27 + v28 - 40);
          v32 = v23;
        }
        memcpy(v29, v31, v32);
LABEL_30:
        *(_DWORD *)((char *)&a8[-1] + v28 - 4) = v23;
        ++v25;
        v28 += 16;
      }
      while (v25 < a8->mNumberBuffers);
    }
    if (*((_BYTE *)this + 1303))
    {
      v38 = (char *)*((_QWORD *)this + 221);
      v120 = v38;
      v24 = (_DWORD *)((char *)this + 1792);
    }
    else
    {
      v38 = (char *)v120;
    }
    appended = 0;
    if (a10 && __dst && v38)
    {
      if (v24)
      {
        if (*a10 >= *v24)
          v56 = *v24;
        else
          v56 = *a10;
        *a10 = v56;
        memcpy(__dst, v38, v56);
        if (v56 >= *v24)
        {
          return 0;
        }
        else
        {
          memmove(v38, &v38[v56], (*v24 - v56));
          appended = 0;
          *v24 -= v56;
        }
      }
      else
      {
        appended = 0;
        *a10 = 0;
      }
    }
    return appended;
  }
  v118 = v19;
  if (!*((_BYTE *)this + 1303))
    goto LABEL_73;
  if (*((_BYTE *)this + 1352))
  {
    if (v21 == *((_DWORD *)this + 455))
    {
      v24 = 0;
      if (a5)
      {
        v39 = *((_DWORD *)this + 454);
        v40 = v39 - *((_DWORD *)this + 456);
        if (v40)
        {
          v114 = a6;
          v100 = a7;
          v109 = v20;
          if (v40 >= a5)
            v41 = a5;
          else
            v41 = v39 - *((_DWORD *)this + 456);
          v42 = v39 - *((_DWORD *)this + 458);
          v43 = v41;
          if (v42 >= v41)
            v44 = v41;
          else
            v44 = v42;
          if (v21)
          {
            v103 = v18;
            v45 = 0;
            v46 = (const void **)(v20 + 16);
            do
            {
              v47 = *v46;
              v46 += 2;
              memcpy((void *)(*((_QWORD *)this + 230)+ 4 * (*((_DWORD *)this + 458) + *((_DWORD *)this + 454) * v45++)), v47, 4 * v44);
              v48 = *((unsigned int *)this + 455);
            }
            while (v45 < v48);
            v18 = v103;
            if (v43 > v42)
            {
              if ((_DWORD)v48)
              {
                v49 = 0;
                v50 = (uint64_t *)(v109 + 16);
                do
                {
                  v51 = *v50;
                  v50 += 2;
                  memcpy((void *)(*((_QWORD *)this + 230) + 4 * (*((_DWORD *)this + 454) * v49++)), (const void *)(v51 + 4 * v44), 4 * (v43 - v44));
                }
                while (v49 < *((unsigned int *)this + 455));
              }
            }
          }
          *((_DWORD *)this + 456) += v43;
          v52 = *((_DWORD *)this + 458) + v43;
          *((_DWORD *)this + 458) = v52;
          v53 = *((_DWORD *)this + 454);
          v54 = v52 >= v53;
          v55 = v52 - v53;
          if (v54)
            *((_DWORD *)this + 458) = v55;
          v22 = v109;
          v24 = 0;
          a7 = v100;
          a6 = v114;
        }
      }
      goto LABEL_74;
    }
LABEL_73:
    v24 = 0;
    goto LABEL_74;
  }
  if (!v15)
    goto LABEL_73;
  v104 = v18;
  if (*((_DWORD *)this + 512) == a5)
  {
    *((_DWORD *)this + 448) = 0;
    MetadataHandler::Process<float>((uint64_t)this + 1872, *(const float **)(v20 + 16), a5);
    MetadataHandler::GetMetadata((AUVoiceIO *)((char *)this + 1872), &v120, (unsigned int *)this + 448);
  }
  else
  {
    ABLRingBuffer<float>::WriteInto((unsigned int *)this + 454, a5, (_DWORD *)v20);
    v81 = *((_DWORD *)this + 513) + a5;
    *((_DWORD *)this + 513) = v81;
    v82 = *((_DWORD *)this + 512);
    if (v81 > v82)
    {
      v116 = a6;
      v111 = v22;
      v113 = (AUVoiceIO *)((char *)this + 1872);
      v102 = a7;
      do
      {
        v83 = 0;
        if (v82)
        {
          v84 = *((_QWORD *)this + 225);
          v85 = *(_DWORD *)(v84 + 24);
          if (v85 == *((_DWORD *)this + 455))
          {
            v86 = *((_DWORD *)this + 456);
            if (v86)
            {
              if (v86 >= v82)
                v83 = v82;
              else
                v83 = *((_DWORD *)this + 456);
              v87 = *((_DWORD *)this + 454) - *((_DWORD *)this + 457);
              if (v87 >= v83)
                v88 = v83;
              else
                v88 = v87;
              if (v85)
              {
                v108 = *((_DWORD *)this + 454) - *((_DWORD *)this + 457);
                v89 = 0;
                v90 = (uint64_t *)(v84 + 40);
                v91 = (void **)(v84 + 40);
                do
                {
                  v92 = *v91;
                  v91 += 2;
                  memcpy(v92, (const void *)(*((_QWORD *)this + 230)+ 4 * (*((_DWORD *)this + 457) + *((_DWORD *)this + 454) * v89++)), 4 * v88);
                  v93 = *((unsigned int *)this + 455);
                }
                while (v89 < v93);
                a7 = v102;
                if (v83 > v108)
                {
                  if ((_DWORD)v93)
                  {
                    v94 = 0;
                    do
                    {
                      v95 = *v90;
                      v90 += 2;
                      memcpy((void *)(v95 + 4 * v88), (const void *)(*((_QWORD *)this + 230) + 4 * (*((_DWORD *)this + 454) * v94++)), 4 * (v83 - v88));
                    }
                    while (v94 < *((unsigned int *)this + 455));
                  }
                }
              }
              *((_DWORD *)this + 456) -= v83;
              v96 = *((_DWORD *)this + 457) + v83;
              *((_DWORD *)this + 457) = v96;
              v97 = *((_DWORD *)this + 454);
              v54 = v96 >= v97;
              v98 = v96 - v97;
              if (v54)
                *((_DWORD *)this + 457) = v98;
              v22 = v111;
              a6 = v116;
            }
            else
            {
              v83 = 0;
            }
          }
        }
        if (v83 != *((_DWORD *)this + 512))
          break;
        *((_DWORD *)this + 448) = 0;
        MetadataHandler::Process<float>((uint64_t)v113, *(const float **)(*((_QWORD *)this + 225) + 40), v83);
        MetadataHandler::GetMetadata(v113, &v120, (unsigned int *)this + 448);
        v99 = *((_DWORD *)this + 513) - v83;
        *((_DWORD *)this + 513) = v99;
        v82 = *((_DWORD *)this + 512);
      }
      while (v99 > v82);
    }
  }
  v24 = (_DWORD *)((char *)this + 1792);
  v18 = v104;
LABEL_74:
  if (!*((_BYTE *)this + 1352))
  {
    if ((v18 & 0xFFFFFFDF) == 0xC)
    {
      switch(v118)
      {
        case 32:
          Float32ToNativeInt32Scaled_ARM();
          break;
        case 24:
          Float32ToNativeInt24_Portable();
          LODWORD(v23) = 3 * a5;
          break;
        case 16:
          Float32ToNativeInt16Scaled_ARM();
          LODWORD(v23) = 2 * a5;
          break;
      }
    }
    goto LABEL_9;
  }
  *(_QWORD *)v112 = v24;
  v115 = a6;
  v117 = (unsigned int *)*((_QWORD *)this + 217);
  v57 = (AudioStreamPacketDescription *)*((_QWORD *)this + 213);
  v58 = (unsigned int *)((char *)this + 1604);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 + 1, v58));
  *((_DWORD *)this + 424) = 0;
  if (*((_DWORD *)this + 400))
  {
    v60 = CADefaultLog();
    v61 = v60;
    if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v126 = "VPEncoderWrapper.cpp";
      v127 = 1024;
      v128 = 126;
      _os_log_impl(&dword_210A23000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d vpencoderwrapper: process: tryer acquire failed", buf, 0x12u);
    }
    goto LABEL_116;
  }
  v101 = a7;
  v110 = v22;
  v105 = v18;
  v62 = *((_DWORD *)this + 368) * a5;
  if (!v62)
  {
    v64 = 0;
    v63 = 0;
    goto LABEL_115;
  }
  v63 = 0;
  v64 = 0;
  v65 = (char *)*((_QWORD *)v117 + 5);
  v66 = *(char **)(v110 + 16);
  v119 = v57;
  v67 = v57;
LABEL_88:
  *(_QWORD *)ioNumberPackets = 0;
  v68 = 4 * *((_DWORD *)this + 359);
  v106 = v62;
  if (v68 >= v62)
    v68 = v62;
  ioInputDataByteSize = v68;
  v69 = v66;
  appended = AudioCodecAppendInputData(*((AudioCodec *)this + 175), v66, &ioInputDataByteSize, &ioNumberPackets[1], 0);
  if (!(_DWORD)appended)
  {
    v66 = &v69[ioInputDataByteSize];
    v107 = v106 - ioInputDataByteSize;
    while (1)
    {
      v70 = v66;
      v71 = *((_DWORD *)this + 376);
      v121 = 1;
      ioOutputDataByteSize = v71;
      appended = AudioCodecProduceOutputPackets(*((AudioCodec *)this + 175), v65, &ioOutputDataByteSize, &v121, v67, ioNumberPackets);
      v72 = ioNumberPackets[0];
      if ((_DWORD)appended || ioNumberPackets[0] == 1)
        break;
      v74 = v121;
      if (v121)
      {
        v66 = v70;
        if (v119)
        {
          if (v67 != v119)
            v67->mStartOffset = (SInt64)&v65[-*((_QWORD *)v117 + 5)];
          ++v67;
        }
        v63 += ioOutputDataByteSize;
        v65 += ioOutputDataByteSize;
        v64 += v74;
      }
      else
      {
        v66 = v70;
      }
      if (v72 != 3)
      {
        v62 = v107;
        if (!v107)
        {
LABEL_115:
          v117[9] = v63;
          *((_DWORD *)this + 424) = v64;
          v18 = v105;
          v22 = v110;
          a7 = v101;
          goto LABEL_116;
        }
        goto LABEL_88;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v126 = "VPEncoderWrapper.cpp";
      v127 = 1024;
      v128 = 161;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::process: Error producing output packets", buf, 0x12u);
    }
    v18 = v105;
    v22 = v110;
    a7 = v101;
    if ((_DWORD)appended)
      goto LABEL_109;
    do
LABEL_116:
      v77 = __ldaxr(v58);
    while (__stlxr(v77 - 1, v58));
    v78 = *((_DWORD *)this + 424);
    if (v78)
    {
      v24 = *(_DWORD **)v112;
      v79 = v115;
      if (*((_BYTE *)this + 1303))
      {
        if (v120)
        {
          v80 = ABLRingBuffer<float>::ReadFrom((uint64_t)this + 1816, *((_DWORD *)this + 417), (_DWORD *)(*((_QWORD *)this + 225) + 24));
          if (v80 == *((_DWORD *)this + 417))
          {
            *((_DWORD *)this + 448) = 0;
            MetadataHandler::Process<float>((uint64_t)this + 1872, *(const float **)(*((_QWORD *)this + 225) + 40), v80);
            MetadataHandler::GetMetadata((AUVoiceIO *)((char *)this + 1872), &v120, (unsigned int *)this + 448);
          }
        }
        v24 = (_DWORD *)((char *)this + 1792);
        v78 = *((_DWORD *)this + 424);
      }
    }
    else
    {
      v24 = *(_DWORD **)v112;
      v79 = v115;
    }
    *v79 = v78;
    if (a7)
      memcpy(a7, *((const void **)this + 213), 16 * *((unsigned int *)this + 424));
    goto LABEL_9;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v126 = "VPEncoderWrapper.cpp";
    v127 = 1024;
    v128 = 147;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::process: Error appending input data", buf, 0x12u);
  }
LABEL_109:
  v117[9] = 0;
  *((_DWORD *)this + 424) = 0;
  do
    v75 = __ldaxr(v58);
  while (__stlxr(v75 - 1, v58));
  if (kRIOClientSubsystem)
  {
    v76 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      return appended;
  }
  else
  {
    v76 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v126 = "AURemoteIO.cpp";
    v127 = 1024;
    v128 = 2494;
    _os_log_impl(&dword_210A23000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::ComplexRender: Failed to process encoder", buf, 0x12u);
  }
  return appended;
}

void sub_210ACA974(_Unwind_Exception *a1)
{
  unsigned int *v1;
  unsigned int v2;

  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  _Unwind_Resume(a1);
}

BOOL AUVoiceIO::ValidFormat(AUVoiceIO *this, int a2, int a3, const AudioStreamBasicDescription *a4)
{
  int v6;

  if (a2 == 2 && a3 == 1)
    return 1;
  v6 = gLinkedBeforeApex;
  if (gLinkedBeforeApex < 0)
  {
    v6 = NSVersionOfLinkTimeLibrary("AudioToolbox") < 19398656;
    gLinkedBeforeApex = v6;
  }
  return v6 || a4->mFramesPerPacket == 1;
}

uint64_t AUVoiceIO::VPFormatConvert(uint64_t a1, __int128 *a2, uint64_t a3)
{
  int v4;
  const CAStreamBasicDescription *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  const char *v15;
  void *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 5);
  *(_BYTE *)(a1 + 1352) = v4 != 1;
  v5 = (const CAStreamBasicDescription *)(a1 + 1360);
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 1392) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 1376) = v7;
  *(_OWORD *)(a1 + 1360) = v6;
  v8 = *((_DWORD *)a2 + 7);
  *(_QWORD *)(a1 + 1360) = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 1368) = xmmword_210B09F40;
  *(_DWORD *)(a1 + 1384) = 4;
  *(_DWORD *)(a1 + 1388) = v8;
  *(_QWORD *)(a1 + 1392) = 32;
  if (v8 == 1)
    *(_DWORD *)(a1 + 1372) = 9;
  if (v4 != 1)
  {
    v9 = *(_OWORD *)(a1 + 1376);
    *(_OWORD *)(a1 + 1608) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 1624) = v9;
    *(_QWORD *)(a1 + 1640) = *(_QWORD *)(a1 + 1392);
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(a1 + 1680) = *((_QWORD *)a2 + 4);
    *(_OWORD *)(a1 + 1648) = v11;
    *(_OWORD *)(a1 + 1664) = v10;
  }
  v12 = *(_OWORD *)v5;
  v13 = *(_OWORD *)(a1 + 1376);
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 1392);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  if (kRIOClientSubsystem)
  {
    v14 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      return 0;
  }
  else
  {
    v14 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 1352))
      v15 = "compressed";
    else
      v15 = "pcm";
    CAFormatter::CAFormatter((CAFormatter *)&v17, v5);
    *(_DWORD *)buf = 136315906;
    v19 = "AURemoteIO.cpp";
    v20 = 1024;
    v21 = 3101;
    v22 = 2080;
    v23 = v15;
    v24 = 2080;
    v25 = v17;
    _os_log_impl(&dword_210A23000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::VPFormatConvert: client output format is %s, vp uplink output format is %s\n", buf, 0x26u);
    if (v17)
      free(v17);
  }
  return 0;
}

uint64_t AUVoiceIO::InitializeEncoderAndMetadata(AUVoiceIO *this, const CAStreamBasicDescription *a2, const __CFString *a3, double *a4)
{
  unsigned int v4;
  double v7;
  NSObject *v8;
  double v9;
  int v10;
  int v11;
  AudioCodec *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t Property;
  NSObject *v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  OpaqueAudioComponentInstance *v29;
  int v30;
  OpaqueAudioComponent *Next;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  unsigned int v35;
  int v36;
  const char *v37;
  int v38;
  _QWORD *v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  NSObject *v44;
  unint64_t v45;
  char *v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  int v59;
  unsigned int v60;
  char *v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  NSObject **v70;
  NSObject *v71;
  NSObject **v72;
  NSObject *v73;
  double v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  BOOL v78;
  uint64_t v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  int v98;
  float v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int *v104;
  int *v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  _DWORD *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  _DWORD *v124;
  int32x2_t v125;
  uint64_t v126;
  uint64x2_t v127;
  uint64x2_t v128;
  int32x4_t v129;
  _DWORD *v130;
  int32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int32x4_t v148;
  float32x4_t v149;
  float v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int32x4_t v159;
  int32x2_t v160;
  int32x2_t v161;
  int32x4_t v162;
  int v163;
  _DWORD *v164;
  _DWORD *v165;
  _DWORD *v166;
  uint64_t v167;
  int v168;
  int v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  CADeprecated::CABufferList *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v182;
  uint64_t v183;
  int64x2_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  uint64x2_t v190;
  int8x16_t v191;
  unsigned __int8 v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int64x2_t v196;
  int64x2_t v197;
  float32x4_t v198;
  float v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  UInt32 ioPropertyDataSize;
  uint8_t v204[32];
  _BYTE buf[48];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  _QWORD v210[4];

  v4 = a3;
  v210[1] = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 2152) = 1;
  v7 = *(double *)a2;
  *((_DWORD *)this + 516) = 0;
  *(_QWORD *)buf = 0;
  if (!GetVoiceIOPreferredHWBlockSizeInSeconds(*((_DWORD *)this + 329), (double *)buf, a3, a4))
    *((_DWORD *)this + 516) = vcvtpd_s64_f64(*(double *)buf * v7);
  if (kRIOClientSubsystem)
  {
    v8 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_9;
  }
  else
  {
    v8 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(double *)a2;
    v10 = *((_DWORD *)this + 516);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3127;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v10;
    _os_log_impl(&dword_210A23000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::inputBusFormat.mSampleRate = %f, InitializeEncoderAndMetadata:force voiceio block size to: %d", buf, 0x22u);
  }
LABEL_9:
  if (!*((_BYTE *)this + 1352))
  {
    *((_DWORD *)this + 438) = *((_DWORD *)a2 + 4);
    v19 = *((_DWORD *)this + 516);
    if (!v19)
      goto LABEL_36;
    v20 = v19 + v19 * *((_DWORD *)this + 517);
    v21 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 518) = v20;
    *((_DWORD *)this + 519) = v21;
    *((_DWORD *)this + 522) = 0;
    *((_QWORD *)this + 260) = 0;
    v22 = (void *)*((_QWORD *)this + 262);
    v23 = *((_QWORD *)this + 263) - (_QWORD)v22;
    v24 = (v20 * v21);
    if (v24 == v23 >> 2)
    {
      if (v23 >= 1)
      {
        v25 = (unint64_t)v23 >> 2;
        v26 = ((unint64_t)v23 >> 2) + 1;
        bzero(*((void **)this + 262), 4 * (v26 - ((unint64_t)v23 > 3)));
LABEL_34:
        bzero(v22, 4 * (v26 - (v25 != 0)));
      }
    }
    else
    {
      std::valarray<float>::resize((uint64_t)this + 2096, v24);
      v22 = (void *)*((_QWORD *)this + 262);
      v32 = *((_QWORD *)this + 263) - (_QWORD)v22;
      if (v32 >= 1)
      {
        v25 = (unint64_t)v32 >> 2;
        v26 = ((unint64_t)v32 >> 2) + 1;
        goto LABEL_34;
      }
    }
    *((_DWORD *)this + 520) = 0;
    *((_DWORD *)this + 522) = 0;
    v33 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 343), (const CAStreamBasicDescription *)*((unsigned int *)this + 347));
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 264, v33);
    CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 264));
LABEL_36:
    if (kRIOClientSubsystem)
    {
      v34 = *(NSObject **)kRIOClientSubsystem;
      if (!*(_QWORD *)kRIOClientSubsystem)
      {
LABEL_44:
        v37 = (const char *)*((unsigned int *)a2 + 3);
        v38 = v4;
        if ((v37 & 0xFFFFFFDF) == 0xC)
        {
          v39 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", v37, (const CAStreamBasicDescription *)*((unsigned int *)a2 + 7));
          CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 218, v39);
          CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 218));
          v38 = v4;
        }
LABEL_92:
        if (!*((_BYTE *)this + 1303))
          return 0;
        *((_DWORD *)this + 448) = 0;
        *((_DWORD *)this + 440) = 0;
        *((_QWORD *)this + 256) = 0;
        *((_BYTE *)this + 2056) = 0;
        if (*((_BYTE *)this + 1352))
        {
          v59 = 0;
          v60 = *((_DWORD *)a2 + 5);
          *((_DWORD *)this + 512) = v60;
          *((_DWORD *)this + 452) = v60 * v38;
          v61 = &workgroupSupportEnabled(void)::global;
        }
        else
        {
          v62 = (unsigned int *)((char *)this + 2048);
          v60 = *((_DWORD *)this + 516);
          v61 = &workgroupSupportEnabled(void)::global;
          if (v60)
          {
            if (v60 - 4097 >= 0xFFFFF01F)
            {
              v63 = 0;
              while (1)
              {
                v64 = vpMetadataSupportedBlockSizeLookupTable[v63];
                if (v64 == v60)
                {
                  v59 = 0;
                  goto LABEL_113;
                }
                if (v64 > v60)
                  break;
                if (++v63 == 23)
                {
                  v60 = 0;
                  v59 = 0;
                  goto LABEL_114;
                }
              }
              v59 = 0;
              v60 = vpMetadataSupportedBlockSizeLookupTable[(v63 - 1)];
            }
            else
            {
              v59 = -1;
            }
LABEL_113:
            *v62 = v60;
LABEL_114:
            v38 = *((_DWORD *)this + 517);
          }
          else
          {
            if (v4 - 4097 >= 0xFFFFF01F)
            {
              v65 = 0;
              while (1)
              {
                v66 = vpMetadataSupportedBlockSizeLookupTable[v65];
                if (v66 == v4)
                {
                  v59 = 0;
                  goto LABEL_117;
                }
                if (v66 > v4)
                  break;
                if (++v65 == 23)
                {
                  v60 = 0;
                  v59 = 0;
                  goto LABEL_119;
                }
              }
              v59 = 0;
              v60 = vpMetadataSupportedBlockSizeLookupTable[(v65 - 1)];
            }
            else
            {
              v59 = -1;
LABEL_117:
              v60 = v4;
            }
            *v62 = v60;
LABEL_119:
            *((_DWORD *)this + 452) = 2 * v4;
            v38 = 2;
          }
        }
        v70 = (NSObject **)*((_QWORD *)v61 + 17);
        if (v70)
        {
          v71 = *v70;
          if (!*v70)
            goto LABEL_126;
        }
        else
        {
          v71 = MEMORY[0x24BDACB70];
        }
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3213;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v60;
          _os_log_impl(&dword_210A23000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: metadata block size = %d\n", buf, 0x18u);
        }
LABEL_126:
        if (v59)
        {
          v72 = (NSObject **)*((_QWORD *)v61 + 17);
          if (v72)
          {
            v73 = *v72;
            if (!*v72)
              return 0xFFFFFFFFLL;
          }
          else
          {
            v73 = MEMORY[0x24BDACB70];
          }
          if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3217;
            _os_log_impl(&dword_210A23000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::Initialize metadata handler failed", buf, 0x12u);
          }
          return 0xFFFFFFFFLL;
        }
        v74 = *(double *)a2;
        v75 = *((_DWORD *)this + 512);
        PowerMeter::SetSampleRate((AUVoiceIO *)((char *)this + 1872), *(double *)a2);
        PowerMeter::Reset((AUVoiceIO *)((char *)this + 1872));
        if (v74 > 48000.0)
        {
LABEL_195:
          *((_DWORD *)this + 510) = -1;
          *((_DWORD *)this + 440) = 24 * v38;
          if (*((_DWORD *)this + 516))
          {
LABEL_203:
            v176 = (CADeprecated::CABufferList *)CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 343), (const CAStreamBasicDescription *)*((unsigned int *)this + 347));
            v177 = (_QWORD *)*((_QWORD *)this + 225);
            *((_QWORD *)this + 225) = v176;
            if (v177)
            {
              std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v177);
              v176 = (CADeprecated::CABufferList *)*((_QWORD *)this + 225);
            }
            CADeprecated::CABufferList::AllocateBuffers(v176);
            v178 = (*((_DWORD *)this + 440) * v38);
            v179 = *((_QWORD *)this + 221);
            v180 = *((_QWORD *)this + 222) - v179;
            if (v178 <= v180)
            {
              if (v178 < v180)
                *((_QWORD *)this + 222) = v179 + v178;
            }
            else
            {
              std::vector<unsigned char>::__append((unint64_t *)this + 221, v178 - v180);
            }
            Property = 0;
            *((_DWORD *)this + 464) = 1;
            *((_BYTE *)this + 2056) = 1;
            return Property;
          }
          v168 = *((_DWORD *)this + 452);
          v169 = *((_DWORD *)a2 + 7);
          *((_DWORD *)this + 454) = v168;
          *((_DWORD *)this + 455) = v169;
          *((_DWORD *)this + 458) = 0;
          *((_QWORD *)this + 228) = 0;
          v170 = (void *)*((_QWORD *)this + 230);
          v171 = *((_QWORD *)this + 231) - (_QWORD)v170;
          v172 = (v169 * v168);
          if (v172 == v171 >> 2)
          {
            if (v171 >= 1)
            {
              v173 = (unint64_t)v171 >> 2;
              v174 = ((unint64_t)v171 >> 2) + 1;
              bzero(*((void **)this + 230), 4 * (v174 - ((unint64_t)v171 > 3)));
LABEL_201:
              bzero(v170, 4 * (v174 - (v173 != 0)));
            }
          }
          else
          {
            std::valarray<float>::resize((uint64_t)this + 1840, v172);
            v170 = (void *)*((_QWORD *)this + 230);
            v175 = *((_QWORD *)this + 231) - (_QWORD)v170;
            if (v175 >= 1)
            {
              v173 = (unint64_t)v175 >> 2;
              v174 = ((unint64_t)v175 >> 2) + 1;
              goto LABEL_201;
            }
          }
          *((_DWORD *)this + 456) = 0;
          *((_DWORD *)this + 458) = 0;
          goto LABEL_203;
        }
        v76 = 1;
        if (v75 >= 0x401)
        {
          v77 = v75;
          do
          {
            v75 = v77 >> 1;
            ++v76;
            v78 = v77 > 0x801;
            v77 >>= 1;
          }
          while (v78);
        }
        *((_DWORD *)this + 509) = v76;
        v79 = operator new();
        *(_QWORD *)v79 = &off_24CA91168;
        *(_DWORD *)(v79 + 24) = v74;
        *(_DWORD *)(v79 + 16) = v75;
        v207 = xmmword_210B04DB8;
        v208 = unk_210B04DC8;
        v209 = xmmword_210B04DD8;
        *(_OWORD *)buf = xmmword_210B04D78;
        *(_OWORD *)&buf[16] = unk_210B04D88;
        *(_OWORD *)&buf[32] = xmmword_210B04D98;
        v206 = unk_210B04DA8;
        memset(v204, 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v204, buf, (uint64_t)v210, 0x1CuLL);
        v80 = *(_DWORD *)(v79 + 16);
        if (v80 > 7)
        {
          v81 = *(void **)v204;
          if (v80 <= 0x800)
          {
            if ((int)((*(_QWORD *)&v204[8] - *(_QWORD *)v204) >> 2) < 1)
              goto LABEL_150;
            v82 = 0;
            while (1)
            {
              v83 = *(_DWORD *)(*(_QWORD *)v204 + v82);
              if (v80 <= v83 >> 1)
                break;
              v82 += 4;
              if (((*(_QWORD *)&v204[8] - *(_QWORD *)v204) & 0x3FFFFFFFCLL) == v82)
                goto LABEL_151;
            }
            v80 = v83 >> 1;
          }
          else
          {
            v80 = 2048;
          }
        }
        else
        {
          v80 = 8;
          v81 = *(void **)v204;
        }
        *(_DWORD *)(v79 + 16) = v80;
LABEL_150:
        if (v81)
        {
LABEL_151:
          *(_QWORD *)&v204[8] = v81;
          operator delete(v81);
          v80 = *(_DWORD *)(v79 + 16);
        }
        *(_DWORD *)(v79 + 20) = v80;
        MultiRadixRealFFT_Create();
        *(_QWORD *)(v79 + 48) = operator new[]();
        *(_QWORD *)(v79 + 56) = operator new[]();
        bzero(*(void **)(v79 + 48), 4 * *(unsigned int *)(v79 + 20));
        bzero(*(void **)(v79 + 56), 4 * *(unsigned int *)(v79 + 20));
        *(_DWORD *)(v79 + 28) = 24;
        v84 = operator new();
        *(_QWORD *)v84 = &off_24CA8C338;
        *(_OWORD *)(v84 + 8) = 0u;
        *(_OWORD *)(v84 + 24) = 0u;
        *(_OWORD *)(v84 + 40) = 0u;
        *(_OWORD *)(v84 + 56) = 0u;
        *(_QWORD *)(v79 + 32) = v84;
        v85 = *(unsigned int *)(v79 + 28);
        v86 = (float)*(unsigned int *)(v79 + 24);
        v87 = *(unsigned int *)(v79 + 20);
        v88 = v86 * 0.5;
        v89 = atanf((float)(v86 * 0.5) * 0.00074);
        v90 = atanf((float)(v88 * v88) * 0.0000000185);
        *(_DWORD *)(v84 + 48) = v85;
        *(_DWORD *)(v84 + 52) = v87;
        *(_QWORD *)(v84 + 8) = operator new[]();
        *(_QWORD *)(v84 + 16) = operator new[]();
        *(_QWORD *)(v84 + 24) = operator new[]();
        *(_QWORD *)(v84 + 32) = operator new[]();
        *(_QWORD *)(v84 + 56) = operator new[]();
        *(_QWORD *)(v84 + 64) = operator new[]();
        *(_QWORD *)(v84 + 40) = operator new[]();
        bzero(*(void **)(v84 + 8), 4 * v87);
        bzero(*(void **)(v84 + 16), 4 * v87);
        bzero(*(void **)(v84 + 24), 4 * v87);
        bzero(*(void **)(v84 + 32), 4 * v87);
        bzero(*(void **)(v84 + 56), 4 * v85);
        bzero(*(void **)(v84 + 64), 4 * v85);
        bzero(*(void **)(v84 + 40), 4 * v85);
        if ((_DWORD)v87)
        {
          v91 = 0;
          v92 = v86 / (float)(2 * v87);
          v93 = (float)((float)(v90 * 2.24) + (float)(v89 * 13.1)) + (float)(v88 * 0.0001);
          v94 = v93 / (float)(v85 - 1);
          do
          {
            v95 = v92 * (float)v91;
            v96 = atanf(v95 * 0.00074);
            v97 = (float)((float)(atanf((float)(v95 * v95) * 0.0000000185) * 2.24) + (float)(v96 * 13.1))
                + (float)(v95 * 0.0001);
            if (v97 > v93)
              break;
            v98 = vcvtms_s32_f32(v97 / v94);
            v99 = 1.0;
            v100 = v85 - 2;
            if ((int)v85 - 2 >= v98)
            {
              v99 = (float)(v97 - (float)((float)v98 * v94)) / v94;
              v100 = v98;
            }
            *(_DWORD *)(*(_QWORD *)(v84 + 8) + 4 * v91) = v100;
            *(float *)(*(_QWORD *)(v84 + 24) + 4 * v91) = 1.0 - v99;
            *(_DWORD *)(*(_QWORD *)(v84 + 16) + 4 * v91) = v100 + 1;
            *(float *)(*(_QWORD *)(v84 + 32) + 4 * v91++) = v99;
          }
          while (v87 != v91);
        }
        v101 = *(unsigned int *)(v84 + 48);
        if ((_DWORD)v101)
          bzero(*(void **)(v84 + 40), 4 * v101);
        if ((_DWORD)v87)
        {
          v103 = *(_DWORD **)(v84 + 32);
          v102 = *(_QWORD *)(v84 + 40);
          v104 = *(int **)(v84 + 8);
          v105 = *(int **)(v84 + 16);
          v106 = v87;
          v107 = *(_DWORD **)(v84 + 24);
          do
          {
            v109 = *v104++;
            v108 = v109;
            LODWORD(v109) = *v107++;
            *(float *)(v102 + 4 * v108) = *(float *)&v109 + *(float *)(v102 + 4 * v108);
            v111 = *v105++;
            v110 = v111;
            LODWORD(v111) = *v103++;
            *(float *)(v102 + 4 * v110) = *(float *)&v111 + *(float *)(v102 + 4 * v110);
            --v106;
          }
          while (v106);
        }
        if ((_DWORD)v101)
        {
          v112 = *(float **)(v84 + 40);
          do
          {
            *v112 = 1.0 / *v112;
            ++v112;
            --v101;
          }
          while (v101);
        }
        v113 = *(_DWORD **)(v84 + 56);
        *v113 = 0;
        v114 = *(_DWORD **)(v84 + 64);
        *v114 = 0;
        if ((_DWORD)v87)
        {
          v115 = 0;
          LODWORD(v116) = 0;
          v117 = 0;
          v118 = *(_QWORD *)(v84 + 8);
          do
          {
            if (*(_DWORD *)(v118 + 4 * v115) == v117)
            {
              ++v114[(int)v116];
            }
            else
            {
              v116 = (int)v116 + 1;
              ++v117;
              v113[v116] = v115;
              v114[v116] = 1;
            }
            ++v115;
          }
          while (v87 != v115);
        }
        v119 = operator new();
        *(_QWORD *)(v79 + 8) = v119;
        v120 = (float)*(unsigned int *)(v79 + 24);
        v121 = *(unsigned int *)(v79 + 16);
        *(_DWORD *)(v79 + 20) = v121;
        *(_DWORD *)v119 = 1;
        *(_QWORD *)(v119 + 4) = 0x3ECCCCCD3F333333;
        *(_DWORD *)(v79 + 28) = 24;
        v122 = v120 / (float)v121;
        *(float *)(v119 + 156) = expf(-1.0 / (float)(v122 * 0.04));
        *(float *)(v119 + 160) = expf(-1.0 / (float)(v122 * 0.015));
        *(float *)(v119 + 164) = expf(-1.0 / (float)(v122 * 0.025));
        *(float *)(v119 + 168) = expf(-1.0 / (float)(v122 * 0.005));
        *(float *)(v119 + 172) = 1.0 - expf(-1.0 / (float)(v122 * 0.1));
        *(float *)(v119 + 176) = 1.0 - expf(-1.0 / (float)(v122 * 0.05));
        *(_QWORD *)(v119 + 40) = operator new[]();
        *(_QWORD *)(v119 + 80) = operator new[]();
        *(_QWORD *)(v119 + 48) = operator new[]();
        v123 = (v121 + 24);
        *(_QWORD *)(v119 + 56) = operator new[]();
        *(_QWORD *)(v119 + 64) = operator new[]();
        *(_QWORD *)(v119 + 88) = operator new[]();
        *(_QWORD *)(v119 + 96) = operator new[]();
        *(_QWORD *)(v119 + 104) = operator new[]();
        *(_QWORD *)(v119 + 112) = operator new[]();
        *(_QWORD *)(v119 + 120) = operator new[]();
        *(_QWORD *)(v119 + 128) = operator new[]();
        *(_QWORD *)(v119 + 136) = operator new[]();
        bzero(*(void **)(v119 + 40), 4 * (2 * v121));
        bzero(*(void **)(v119 + 80), 4 * (2 * v121));
        bzero(*(void **)(v119 + 48), 4 * (2 * v121));
        bzero(*(void **)(v119 + 56), 4 * v123);
        bzero(*(void **)(v119 + 64), 4 * v123);
        bzero(*(void **)(v119 + 88), 4 * v123);
        bzero(*(void **)(v119 + 96), 4 * v123);
        bzero(*(void **)(v119 + 104), 4 * v123);
        bzero(*(void **)(v119 + 112), 0x60uLL);
        bzero(*(void **)(v119 + 120), 0x60uLL);
        bzero(*(void **)(v119 + 128), 0x60uLL);
        bzero(*(void **)(v119 + 136), 0x60uLL);
        *(_QWORD *)(v119 + 184) = operator new[]();
        v124 = (_DWORD *)operator new[]();
        *(_QWORD *)(v119 + 192) = v124;
        v182 = *(_QWORD *)(v119 + 80);
        v183 = (2 * v121);
        if (2 * (int)v121 >= 1)
        {
          *(float *)v125.i32 = (float)(int)v183;
          v189 = (float32x4_t)vdupq_lane_s32(v125, 0);
          v190 = (uint64x2_t)vdupq_n_s64(v183 - 1);
          v126 = (v183 + 3) & 0x1FFFFFFFCLL;
          v127 = (uint64x2_t)xmmword_210B0A1B0;
          v128 = (uint64x2_t)xmmword_210B09FB0;
          v129 = (int32x4_t)xmmword_210B09FE0;
          v130 = (_DWORD *)(v182 + 8);
          __asm
          {
            FMOV            V4.4S, #4.0
            FMOV            V0.4S, #1.0
          }
          v198 = _Q0;
          __asm { FMOV            V0.4S, #3.0 }
          v187 = _Q0;
          v188 = _Q4;
          v185 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
          v186 = (float32x4_t)vdupq_n_s32(0x3FA2CD2Fu);
          v184 = vdupq_n_s64(4uLL);
          do
          {
            v196 = (int64x2_t)v128;
            v197 = (int64x2_t)v127;
            v193 = (int32x4_t)vcgeq_u64(v190, v128);
            v194 = (int32x4_t)vcgeq_u64(v190, v127);
            v137 = vuzp1q_s32(v193, v194);
            v192 = vmovn_s32(v137).u8[0];
            v195 = v129;
            v138 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v129), v188), v189);
            v139.i64[0] = 0x4000000040000000;
            v139.i64[1] = 0x4000000040000000;
            v140 = (int8x16_t)vcgtq_f32(v139, v138);
            v141 = (int8x16_t)vcgtq_f32(v187, v138);
            v142 = vsubq_f32(v139, v138);
            v143.i64[0] = 0xC0000000C0000000;
            v143.i64[1] = 0xC0000000C0000000;
            v144 = vbicq_s8((int8x16_t)v137, (int8x16_t)vcgtq_f32(v198, v138));
            v145 = vandq_s8(v144, v140);
            v146 = vbicq_s8(v144, v140);
            v147 = vandq_s8(v146, v141);
            v148 = (int32x4_t)vbicq_s8(v146, v141);
            v191 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v148), (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(v147, v145)))), 0x1FuLL));
            v202 = vmulq_f32(vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)v148, (int8x16_t)vaddq_f32(v142, v139), vbslq_s8(v147, (int8x16_t)vaddq_f32(v138, v143), vbslq_s8(v145, (int8x16_t)v142, (int8x16_t)v138))), v186), v185);
            v199 = cosf(v202.f32[1]);
            v149.f32[0] = cosf(v202.f32[0]);
            v149.f32[1] = v199;
            v200 = v149;
            v150 = cosf(v202.f32[2]);
            v151 = v200;
            v151.f32[2] = v150;
            v201 = v151;
            v152 = cosf(v202.f32[3]);
            v153 = v201;
            v153.f32[3] = v152;
            v154.i64[0] = 0x3F0000003F000000;
            v154.i64[1] = 0x3F0000003F000000;
            v155.i64[0] = 0xBF000000BF000000;
            v155.i64[1] = 0xBF000000BF000000;
            v156 = vmlaq_f32(v154, v155, v153);
            v157 = vmulq_f32(v156, v156);
            v158 = vsqrtq_f32((float32x4_t)vbslq_s8(v191, (int8x16_t)v157, (int8x16_t)vsubq_f32(v198, v157)));
            if ((v192 & 1) != 0)
              *(v130 - 2) = v158.i32[0];
            v159.i64[1] = v193.i64[1];
            *(int32x2_t *)v159.i8 = vmovn_s64((int64x2_t)v193);
            v160 = (int32x2_t)vmovn_s32(v159);
            if ((v160.i8[2] & 1) != 0)
              *(v130 - 1) = v158.i32[1];
            v161 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v160, (int64x2_t)v194));
            if ((v161.i8[4] & 1) != 0)
              *v130 = v158.i32[2];
            if ((vmovn_s32(vmovn_hight_s64(v161, *(int64x2_t *)&v194)).i8[6] & 1) != 0)
              v130[1] = v158.i32[3];
            v127 = (uint64x2_t)vaddq_s64(v197, v184);
            v128 = (uint64x2_t)vaddq_s64(v196, v184);
            v162.i64[0] = 0x400000004;
            v162.i64[1] = 0x400000004;
            v129 = vaddq_s32(v195, v162);
            v130 += 4;
            v126 -= 4;
          }
          while (v126);
        }
        v163 = *(_DWORD *)(v79 + 20);
        if (v183 < 2 * v163)
          memset_pattern16((void *)(v182 + 4 * (2 * v121)), &unk_210B0A3F0, 4 * (2 * v163 - v183 - 2) + 8);
        if ((_DWORD)v123)
        {
          v164 = *(_DWORD **)(v119 + 88);
          v165 = *(_DWORD **)(v119 + 96);
          do
          {
            *v164++ = 1065353216;
            *v165++ = 1065353216;
            --v123;
          }
          while (v123);
          memset_pattern16(*(void **)(v119 + 136), &unk_210B0A3F0, 0x60uLL);
          if (!(_DWORD)v121)
          {
LABEL_193:
            *(_DWORD *)(v119 + 152) = 0;
            *(_QWORD *)(v119 + 200) = 0;
            *(_DWORD *)(v119 + 208) = 0;
            *(_DWORD *)(v119 + 72) = 0;
            v167 = *((_QWORD *)this + 251);
            *((_QWORD *)this + 251) = v79;
            if (v167)
              (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
            goto LABEL_195;
          }
        }
        else
        {
          memset_pattern16(*(void **)(v119 + 136), &unk_210B0A3F0, 0x60uLL);
        }
        v166 = *(_DWORD **)(v119 + 184);
        do
        {
          *v166++ = 0;
          *v124++ = 0;
          --v121;
        }
        while (v121);
        goto LABEL_193;
      }
    }
    else
    {
      v34 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v35 = *((_DWORD *)this + 516);
      if (!v35)
        v35 = v4;
      v36 = *((_DWORD *)a2 + 4);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3171;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v4;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v35;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&buf[32] = v36;
      _os_log_impl(&dword_210A23000, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: input bus output is pcm, max # of output frames from vp = %d, max # of output frames from VoiceIO = %d, max # of output frame byte size = %d\n", buf, 0x24u);
    }
    goto LABEL_44;
  }
  *((_BYTE *)this + 1728) = 0;
  v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 189) + 16))((char *)this + 1512);
  v12 = (AudioCodec *)((char *)this + 1400);
  v13 = (unsigned int *)((char *)this + 1600);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  while (*((_DWORD *)this + 401))
    usleep(0x1F4u);
  *(_QWORD *)&buf[12] = 0;
  if (*((_DWORD *)this + 404) != 1819304813 || *((_DWORD *)this + 414) == 1819304813)
  {
    Property = 560226676;
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_58;
    *(_DWORD *)v204 = 136315394;
    *(_QWORD *)&v204[4] = "VPEncoderWrapper.cpp";
    *(_WORD *)&v204[12] = 1024;
    *(_DWORD *)&v204[14] = 63;
    v17 = MEMORY[0x24BDACB70];
    v18 = "%25s:%-5d  vpencoderwrapper::initialize: input or output bad fmt";
LABEL_57:
    _os_log_impl(&dword_210A23000, v17, OS_LOG_TYPE_ERROR, v18, v204, 0x12u);
    goto LABEL_58;
  }
  v27 = *((_OWORD *)this + 104);
  *(_OWORD *)((char *)this + 1416) = *((_OWORD *)this + 103);
  *(_OWORD *)((char *)this + 1432) = v27;
  v28 = *(_OWORD *)((char *)this + 1624);
  *((_OWORD *)this + 91) = *(_OWORD *)((char *)this + 1608);
  *((_BYTE *)this + 1412) = 0;
  *((_QWORD *)this + 181) = *((_QWORD *)this + 210);
  *((_OWORD *)this + 92) = v28;
  *((_QWORD *)this + 186) = *((_QWORD *)this + 205);
  *((_DWORD *)this + 352) = v4;
  v29 = (OpaqueAudioComponentInstance *)*((_QWORD *)this + 175);
  if (v29)
  {
    AudioComponentInstanceDispose(v29);
    *v12 = 0;
  }
  v30 = *((_DWORD *)this + 356);
  *(_DWORD *)buf = 1634037347;
  *(_DWORD *)&buf[4] = v30;
  *(_DWORD *)&buf[8] = 1634758764;
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)buf);
  if (Next)
  {
    Property = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 175);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "VPEncoderWrapper.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 85;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%25s:%-5d  vpencoderwrapper::initialize: could not create encoder instance";
      goto LABEL_57;
    }
    v40 = *((_DWORD *)this + 367);
    if ((v40 & 0x20) != 0)
      *((_DWORD *)this + 367) = v40 & 0xFFFFFFDF;
    Property = AudioCodecInitialize(*v12, (const AudioStreamBasicDescription *)((char *)this + 1456), (const AudioStreamBasicDescription *)((char *)this + 1416), 0, 0);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "VPEncoderWrapper.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 93;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%25s:%-5d  vpencoderwrapper::initialize: could not initialize codec instance";
      goto LABEL_57;
    }
    ioPropertyDataSize = 4;
    Property = AudioCodecGetProperty(*((AudioCodec *)this + 175), 0x70616B62u, &ioPropertyDataSize, (char *)this + 1504);
    if ((_DWORD)Property)
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        goto LABEL_58;
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "VPEncoderWrapper.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 98;
      v17 = MEMORY[0x24BDACB70];
      v18 = "%25s:%-5d  vpencoderwrapper::initialize: could not get codec max output pkt byte size property";
      goto LABEL_57;
    }
    v67 = *((_DWORD *)this + 359);
    v68 = vcvtps_u32_f32((float)*((unsigned int *)this + 352) / (float)v67);
    v69 = v67 * v68;
    v68 += 3;
    *((_DWORD *)this + 375) = v68;
    *((_DWORD *)this + 374) = v69;
    *((_DWORD *)this + 422) = v68;
    *((_DWORD *)this + 423) = *((_DWORD *)this + 376);
    *((_DWORD *)this + 425) = v69;
    *((_BYTE *)this + 1412) = 1;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v204 = 136315394;
      *(_QWORD *)&v204[4] = "VPEncoderWrapper.cpp";
      *(_WORD *)&v204[12] = 1024;
      *(_DWORD *)&v204[14] = 82;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  vpencoderwrapper::initialize: could not find matching codec", v204, 0x12u);
    }
    Property = 4294957891;
  }
  do
LABEL_58:
    v41 = __ldaxr(v13);
  while (__stlxr(v41 - 1, v13));
  if (v11)
    (*(void (**)(char *))(*((_QWORD *)this + 189) + 24))((char *)this + 1512);
  v38 = *((_DWORD *)this + 422);
  v42 = *((_DWORD *)this + 423);
  if (kRIOClientSubsystem)
  {
    v43 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_67;
  }
  else
  {
    v43 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3141;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v38;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v42;
    _os_log_impl(&dword_210A23000, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d AUVoiceIO::InitializeEncoderAndMetadata: input bus output is compressed, max # of output packets = %d, max # of output packet byte size = %d\n", buf, 0x1Eu);
  }
LABEL_67:
  if (!(_DWORD)Property)
  {
    v45 = *((unsigned int *)this + 422);
    v46 = (char *)*((_QWORD *)this + 214);
    v47 = (_BYTE *)*((_QWORD *)this + 213);
    v48 = (v46 - v47) >> 4;
    if (v45 <= v48)
    {
      if (v45 >= v48)
      {
LABEL_91:
        v58 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*((unsigned int *)this + 415), (const CAStreamBasicDescription *)*((unsigned int *)this + 419));
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 217, v58);
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 217));
        *((_BYTE *)this + 1728) = 1;
        goto LABEL_92;
      }
      v57 = &v47[16 * v45];
    }
    else
    {
      v49 = v45 - v48;
      v50 = *((_QWORD *)this + 215);
      if (v45 - v48 > (v50 - (uint64_t)v46) >> 4)
      {
        v51 = v50 - (_QWORD)v47;
        if (v51 >> 3 > v45)
          v45 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v45;
        if (v52 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = (char *)operator new(16 * v52);
        v54 = &v53[16 * v48];
        v55 = &v53[16 * v52];
        bzero(v54, 16 * v49);
        v56 = &v54[16 * v49];
        if (v46 != v47)
        {
          do
          {
            *((_OWORD *)v54 - 1) = *((_OWORD *)v46 - 1);
            v54 -= 16;
            v46 -= 16;
          }
          while (v46 != v47);
          v46 = (char *)*((_QWORD *)this + 213);
        }
        *((_QWORD *)this + 213) = v54;
        *((_QWORD *)this + 214) = v56;
        *((_QWORD *)this + 215) = v55;
        if (v46)
          operator delete(v46);
        goto LABEL_91;
      }
      bzero(*((void **)this + 214), 16 * v49);
      v57 = &v46[16 * v49];
    }
    *((_QWORD *)this + 214) = v57;
    goto LABEL_91;
  }
  if (kRIOClientSubsystem)
  {
    v44 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      return Property;
  }
  else
  {
    v44 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3145;
    _os_log_impl(&dword_210A23000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::Initialize encoder failed", buf, 0x12u);
  }
  return Property;
}

void sub_210ACC420(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t AUVoiceIO::DoProcessEncoderAndMetadata(AUVoiceIO *this, unsigned int *a2, const AudioBufferList *a3, AudioTimeStamp *a4)
{
  uint64_t Element;
  unint64_t v9;
  uint64_t v10;
  double mRateScalar;
  double v12;
  int v13;
  uint64_t v14;
  double mSampleTime;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  double v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  UInt32 mNumberBuffers;
  UInt32 mNumberChannels;
  void **v37;
  UInt32 v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  double v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  UInt64 mHostTime;
  UInt32 v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  void **p_mData;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  void **v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  UInt64 v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  double v88;
  Float64 v89;
  UInt64 v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  void **v98;
  void *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  MetadataHandler *v108;
  uint64_t v109;
  uint64_t result;
  NSObject *v111;
  uint64_t v112;
  unsigned int *v113;
  int v114;
  unsigned int v115;
  void **v116;
  uint64_t *v117;
  MetadataHandler *v118;
  int v119;
  unsigned int v120;
  void *v121;
  _BYTE buf[12];
  _BYTE v123[12];
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v121 = 0;
  Element = ausdk::AUScope::SafeGetElement((AUVoiceIO *)((char *)this + 128), 1u);
  v10 = *((unsigned int *)this + 516);
  mRateScalar = 1.0;
  if ((a4->mFlags & 4) != 0)
    mRateScalar = a4->mRateScalar;
  v12 = *(double *)(Element + 80);
  v13 = *(_DWORD *)(Element + 92);
  v119 = *(_DWORD *)(Element + 104);
  v14 = *(unsigned int *)(Element + 112);
  mSampleTime = a4->mSampleTime;
  if (*((_BYTE *)this + 2152))
  {
    *((double *)this + 265) = mSampleTime;
    *((_QWORD *)this + 268) = a4->mHostTime;
    *((_BYTE *)this + 2152) = 0;
    *((_DWORD *)this + 535) = 0;
    v16 = *a2;
    *((_DWORD *)this + 534) = *a2;
    v17 = (double)v16;
    v18 = mSampleTime - (double)v16;
    *((double *)this + 266) = v18;
  }
  else
  {
    v18 = *((double *)this + 266);
    LODWORD(v9) = *((_DWORD *)this + 534);
    v17 = (double)v9;
  }
  v19 = mSampleTime - v18;
  if (!(_DWORD)v10)
  {
    if (v19 > v17)
    {
      *((_QWORD *)this + 268) = a4->mHostTime;
      v27 = *((double *)this + 265);
    }
    else
    {
      if (mSampleTime >= v18)
      {
        v56 = *((double *)this + 265);
        goto LABEL_122;
      }
      v27 = floor(v12 * (double)(a4->mHostTime - *((_QWORD *)this + 268)) / (mRateScalar * 24000000.0));
      v19 = *((double *)this + 265);
    }
    v56 = v19 + v27;
    *((_DWORD *)this + 534) = 0;
    v17 = 0.0;
LABEL_122:
    result = 0;
    *((double *)this + 266) = mSampleTime;
    *((double *)this + 265) = v56 + v17;
    a4->mSampleTime = v56 + v17;
    *((_DWORD *)this + 534) = *a2;
    return result;
  }
  v20 = (double)(20 * v10);
  if (v19 <= v17 || v19 > v20)
  {
    if (v19 <= v20)
    {
      if (mSampleTime >= v18)
        goto LABEL_58;
      v57 = *((_DWORD *)this + 520);
      if (v57)
      {
        *((_DWORD *)this + 520) = 0;
        v58 = *((_DWORD *)this + 521) + v57;
        *((_DWORD *)this + 521) = v58;
        v59 = *((_DWORD *)this + 518);
        v25 = v58 >= v59;
        v60 = v58 - v59;
        if (v25)
          *((_DWORD *)this + 521) = v60;
      }
      mHostTime = a4->mHostTime;
      *((double *)this + 265) = *((double *)this + 265)
                              + floor(v12 * (double)(mHostTime - *((_QWORD *)this + 268)) / (mRateScalar * 24000000.0));
      *((_QWORD *)this + 268) = mHostTime;
    }
    else
    {
      v22 = *((_DWORD *)this + 520);
      if (v22)
      {
        *((_DWORD *)this + 520) = 0;
        v23 = *((_DWORD *)this + 521) + v22;
        *((_DWORD *)this + 521) = v23;
        v24 = *((_DWORD *)this + 518);
        v25 = v23 >= v24;
        v26 = v23 - v24;
        if (v25)
          *((_DWORD *)this + 521) = v26;
      }
      *((_QWORD *)this + 268) = a4->mHostTime;
      *((double *)this + 265) = v19 + *((double *)this + 265);
    }
    *((_DWORD *)this + 535) = 0;
    goto LABEL_58;
  }
  v28 = *((_DWORD *)this + 520);
  v29 = v28 + (v19 - v17);
  if (v28)
  {
    *((_DWORD *)this + 520) = 0;
    v30 = *((_DWORD *)this + 521) + v28;
    *((_DWORD *)this + 521) = v30;
    v31 = *((_DWORD *)this + 518);
    v25 = v30 >= v31;
    v32 = v30 - v31;
    if (v25)
      *((_DWORD *)this + 521) = v32;
  }
  v33 = v29 % v10;
  *((_DWORD *)this + 535) = 0;
  if (v29 % v10)
  {
    v120 = v14;
    v117 = &v112;
    MEMORY[0x24BDAC7A8](Element);
    *(_QWORD *)buf = 0;
    mNumberBuffers = a3->mNumberBuffers;
    mNumberChannels = a3->mBuffers[0].mNumberChannels;
    *(_DWORD *)buf = mNumberBuffers;
    *(_DWORD *)&buf[8] = mNumberChannels;
    *(_DWORD *)v123 = 4 * v10;
    *(_QWORD *)&v123[4] = (((unint64_t)&v112 - ((v34 + 31) & 0x7FFFFFFF0)) & 0xFFFFFFFFFFFFFFF3) + 16;
    if (mNumberBuffers)
    {
      v37 = (void **)&v123[4];
      v38 = mNumberBuffers;
      do
      {
        bzero(*v37, *((unsigned int *)v37 - 1));
        v37 += 2;
        --v38;
      }
      while (v38);
    }
    if (mNumberBuffers == *((_DWORD *)this + 519))
    {
      v39 = *((_DWORD *)this + 518);
      v40 = v39 - *((_DWORD *)this + 520);
      if (v40)
      {
        LODWORD(v118) = v13;
        if (v40 >= v33)
          v41 = v33;
        else
          v41 = v40;
        v42 = v39 - *((_DWORD *)this + 522);
        LODWORD(v116) = v41;
        if (v42 >= v41)
          v43 = v41;
        else
          v43 = v42;
        if (mNumberBuffers)
        {
          v115 = v42;
          v44 = 0;
          v45 = (const void **)&v123[4];
          do
          {
            v46 = *v45;
            v45 += 2;
            memcpy((void *)(*((_QWORD *)this + 262)+ 4 * (*((_DWORD *)this + 522) + *((_DWORD *)this + 518) * v44++)), v46, 4 * v43);
            v47 = *((unsigned int *)this + 519);
          }
          while (v44 < v47);
          if (v116 > v115 && (_DWORD)v47)
          {
            v48 = 0;
            v49 = 4 * ((_DWORD)v116 - v43);
            v50 = (uint64_t *)&v123[4];
            do
            {
              v51 = *v50;
              v50 += 2;
              memcpy((void *)(*((_QWORD *)this + 262) + 4 * (*((_DWORD *)this + 518) * v48++)), (const void *)(v51 + 4 * v43), v49);
            }
            while (v48 < *((unsigned int *)this + 519));
          }
        }
        v52 = (int)v116;
        *((_DWORD *)this + 520) += (_DWORD)v116;
        v53 = *((_DWORD *)this + 522) + v52;
        *((_DWORD *)this + 522) = v53;
        v54 = *((_DWORD *)this + 518);
        v25 = v53 >= v54;
        v55 = v53 - v54;
        v13 = (int)v118;
        if (v25)
          *((_DWORD *)this + 522) = v55;
      }
    }
    mSampleTime = a4->mSampleTime;
    v14 = v120;
  }
  *((_QWORD *)this + 268) = a4->mHostTime - (unint64_t)(mRateScalar * ((double)v33 * 24000000.0) / v12);
  *((double *)this + 265) = mSampleTime - (double)v33;
LABEL_58:
  *((double *)this + 266) = mSampleTime;
  *((_DWORD *)this + 534) = *a2;
  v62 = a3->mNumberBuffers;
  v63 = *((_DWORD *)this + 519);
  v113 = a2;
  if (v62 == v63)
  {
    v64 = *a2;
    if (*a2)
    {
      v65 = *((_DWORD *)this + 518);
      v66 = v65 - *((_DWORD *)this + 520);
      if (v66)
      {
        LODWORD(v118) = v13;
        v120 = v14;
        if (v66 >= v64)
          v67 = v64;
        else
          v67 = v66;
        v68 = v65 - *((_DWORD *)this + 522);
        if (v68 >= v67)
          v69 = v67;
        else
          v69 = v68;
        if (v62)
        {
          v70 = 0;
          p_mData = &a3->mBuffers[0].mData;
          do
          {
            v72 = *p_mData;
            p_mData += 2;
            memcpy((void *)(*((_QWORD *)this + 262)+ 4 * (*((_DWORD *)this + 522) + *((_DWORD *)this + 518) * v70++)), v72, 4 * v69);
            v73 = *((unsigned int *)this + 519);
          }
          while (v70 < v73);
          a2 = v113;
          if (v67 > v68)
          {
            if ((_DWORD)v73)
            {
              v74 = 0;
              v75 = &a3->mBuffers[0].mData;
              do
              {
                v76 = (char *)*v75;
                v75 += 2;
                memcpy((void *)(*((_QWORD *)this + 262) + 4 * (*((_DWORD *)this + 518) * v74++)), &v76[4 * v69], 4 * (v67 - v69));
              }
              while (v74 < *((unsigned int *)this + 519));
            }
          }
        }
        *((_DWORD *)this + 520) += v67;
        v77 = *((_DWORD *)this + 522) + v67;
        *((_DWORD *)this + 522) = v77;
        v78 = *((_DWORD *)this + 518);
        v25 = v77 >= v78;
        v79 = v77 - v78;
        v14 = v120;
        v13 = (int)v118;
        if (v25)
          *((_DWORD *)this + 522) = v79;
      }
    }
  }
  *a2 = 0;
  v80 = *((_QWORD *)this + 264);
  *(_DWORD *)(v80 + 36) = 0;
  v81 = v13 & 0xFFFFFFDF;
  if ((v13 & 0xFFFFFFDF) == 0xC)
    *(_DWORD *)(*((_QWORD *)this + 218) + 36) = 0;
  if (*((_BYTE *)this + 1303))
    *((_DWORD *)this + 448) = 0;
  v82 = *((_DWORD *)this + 520);
  if (v82 >= v10)
  {
    v87 = 0;
    LODWORD(mSampleTime) = *((_DWORD *)this + 535);
    v88 = (double)*(unint64_t *)&mSampleTime;
    v89 = *((double *)this + 265) + v88;
    *((Float64 *)this + 265) = v89;
    v90 = *((_QWORD *)this + 268) + (unint64_t)(mRateScalar * (v88 * 24000000.0) / v12);
    *((_QWORD *)this + 268) = v90;
    a4->mSampleTime = v89;
    a4->mHostTime = v90;
    v91 = *(_QWORD *)(v80 + 40);
    v116 = (void **)(v80 + 40);
    v112 = v91;
    v118 = (AUVoiceIO *)((char *)this + 1872);
    v114 = v10 * v119;
    v115 = 4 * v10;
    LODWORD(v117) = v81;
    while (1)
    {
      v92 = *(_DWORD *)(v80 + 24);
      if (v92 == *((_DWORD *)this + 519))
      {
        v120 = v87;
        v93 = v14;
        if (v82 >= v10)
          v94 = v10;
        else
          v94 = v82;
        v95 = *((_DWORD *)this + 518) - *((_DWORD *)this + 521);
        if (v95 >= v94)
          v96 = v94;
        else
          v96 = v95;
        if (v92)
        {
          v97 = 0;
          v98 = v116;
          do
          {
            v99 = *v98;
            v98 += 2;
            memcpy(v99, (const void *)(*((_QWORD *)this + 262)+ 4 * (*((_DWORD *)this + 521) + *((_DWORD *)this + 518) * v97++)), 4 * v96);
            v100 = *((unsigned int *)this + 519);
          }
          while (v97 < v100);
          a2 = v113;
          if (v94 > v95)
          {
            if ((_DWORD)v100)
            {
              v101 = 0;
              v102 = (uint64_t *)v116;
              do
              {
                v103 = *v102;
                v102 += 2;
                memcpy((void *)(v103 + 4 * v96), (const void *)(*((_QWORD *)this + 262) + 4 * (*((_DWORD *)this + 518) * v101++)), 4 * (v94 - v96));
              }
              while (v101 < *((unsigned int *)this + 519));
            }
          }
        }
        *((_DWORD *)this + 520) -= v94;
        v104 = *((_DWORD *)this + 521) + v94;
        *((_DWORD *)this + 521) = v104;
        v105 = *((_DWORD *)this + 518);
        v25 = v104 >= v105;
        v106 = v104 - v105;
        if (v25)
          *((_DWORD *)this + 521) = v106;
        v14 = v93;
        v81 = v117;
        v87 = v120;
      }
      else
      {
        v94 = 0;
      }
      if (v94 != (_DWORD)v10)
        break;
      v107 = *a2 + v10;
      *a2 = v107;
      *((_DWORD *)this + 535) = v107;
      if (*((_BYTE *)this + 1303))
      {
        *(_DWORD *)buf = 0;
        v121 = (void *)(*((_QWORD *)this + 221) + *((unsigned int *)this + 448));
        v108 = v118;
        MetadataHandler::Process<float>((uint64_t)v118, *(const float **)(*((_QWORD *)this + 264) + 40), v10);
        MetadataHandler::GetMetadata(v108, &v121, (unsigned int *)buf);
        *((_DWORD *)this + 448) += *(_DWORD *)buf;
      }
      if (v81 == 12)
      {
        v109 = *((_QWORD *)this + 218);
        switch((_DWORD)v14)
        {
          case 0x20:
            Float32ToNativeInt32Scaled_ARM();
            break;
          case 0x18:
            Float32ToNativeInt24_Portable();
            break;
          case 0x10:
            Float32ToNativeInt16Scaled_ARM();
            break;
        }
        v87 += v114;
        *(_DWORD *)(v109 + 36) = *a2 * v119;
      }
      else
      {
        *(_QWORD *)(v80 + 40) += 4 * v10;
        *(_DWORD *)(v80 + 36) += v115;
      }
      v82 = *((_DWORD *)this + 520);
      if (v82 < v10)
      {
        v84 = v112;
        v85 = v116;
        goto LABEL_117;
      }
    }
    if (kRIOClientSubsystem)
    {
      v111 = *(NSObject **)kRIOClientSubsystem;
      if (!*(_QWORD *)kRIOClientSubsystem)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v111 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "AURemoteIO.cpp";
      *(_WORD *)v123 = 1024;
      *(_DWORD *)&v123[2] = 3397;
      *(_WORD *)&v123[6] = 1024;
      *(_DWORD *)&v123[8] = v10;
      _os_log_impl(&dword_210A23000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d AUVoiceIO::DoProcessEncoderAndMetadata: could not read expected blocksiz %d", buf, 0x18u);
    }
    return 0xFFFFFFFFLL;
  }
  v83 = *((_QWORD *)this + 268);
  a4->mSampleTime = *((Float64 *)this + 265);
  a4->mHostTime = v83;
  v86 = *(_QWORD *)(v80 + 40);
  v85 = (_QWORD *)(v80 + 40);
  v84 = v86;
LABEL_117:
  result = 0;
  *v85 = v84;
  return result;
}

uint64_t AUVoiceIO::Version(AUVoiceIO *this)
{
  return 65792;
}

unsigned int *ABLRingBuffer<float>::WriteInto(unsigned int *result, unsigned int a2, _DWORD *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  const void **v10;
  const void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  if (*a3 == result[1])
  {
    if (a2)
    {
      v3 = result;
      v4 = *result - result[2];
      if (v4)
      {
        if (v4 >= a2)
          v5 = a2;
        else
          v5 = *result - result[2];
        v6 = *result - result[4];
        if (v6 >= v5)
          v7 = v5;
        else
          v7 = v6;
        if (*a3)
        {
          v9 = 0;
          v10 = (const void **)(a3 + 4);
          do
          {
            v11 = *v10;
            v10 += 2;
            result = (unsigned int *)memcpy((void *)(*((_QWORD *)v3 + 3) + 4 * (v3[4] + *v3 * (_DWORD)v9++)), v11, 4 * v7);
            v12 = v3[1];
          }
          while (v9 < v12);
          if (v5 > v6 && (_DWORD)v12)
          {
            v13 = 0;
            v14 = (uint64_t *)(a3 + 4);
            do
            {
              v15 = *v14;
              v14 += 2;
              result = (unsigned int *)memcpy((void *)(*((_QWORD *)v3 + 3) + 4 * *v3 * v13++), (const void *)(v15 + 4 * v7), 4 * (v5 - v7));
            }
            while (v13 < v3[1]);
          }
        }
        v3[2] += v5;
        v16 = v3[4] + v5;
        v3[4] = v16;
        v17 = v16 >= *v3;
        v18 = v16 - *v3;
        if (v17)
          v3[4] = v18;
      }
    }
  }
  return result;
}

uint64_t ABLRingBuffer<float>::ReadFrom(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;

  v3 = 0;
  if (a2 && *a3 == *(_DWORD *)(a1 + 4))
  {
    v6 = *(_DWORD *)(a1 + 8);
    if (v6)
    {
      if (v6 >= a2)
        v3 = a2;
      else
        v3 = v6;
      v7 = *(_DWORD *)a1 - *(_DWORD *)(a1 + 12);
      if (v7 >= v3)
        v8 = v3;
      else
        v8 = v7;
      if (*a3)
      {
        v9 = 0;
        v10 = (void **)(a3 + 4);
        do
        {
          v11 = *v10;
          v10 += 2;
          memcpy(v11, (const void *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)(a1 + 12) + *(_DWORD *)a1 * v9++)), 4 * v8);
          v12 = *(unsigned int *)(a1 + 4);
        }
        while (v9 < v12);
        if (v3 > v7 && (_DWORD)v12)
        {
          v13 = 0;
          v14 = (uint64_t *)(a3 + 4);
          do
          {
            v15 = *v14;
            v14 += 2;
            memcpy((void *)(v15 + 4 * v8), (const void *)(*(_QWORD *)(a1 + 24) + 4 * (*(_DWORD *)a1 * v13++)), 4 * (v3 - v8));
          }
          while (v13 < *(unsigned int *)(a1 + 4));
        }
      }
      v16 = *(_DWORD *)(a1 + 12) + v3;
      *(_DWORD *)(a1 + 8) -= v3;
      *(_DWORD *)(a1 + 12) = v16;
      if (v16 >= *(_DWORD *)a1)
        *(_DWORD *)(a1 + 12) = v16 - *(_DWORD *)a1;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t AUVoiceIO::SetVoiceProperty(AUVoiceIO *this, int a2, unsigned int a3, const void *a4)
{
  uint64_t v6;
  mach_port_t ServerPort;
  int v8;
  const UInt8 *BytePtr;
  int Length;
  _QWORD v12[3];
  CFDataRef *v13;

  PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v12, 0);
  v12[0] = &off_24CA91F18;
  v6 = PropertyMarshaller::Serialize();
  if (!(_DWORD)v6)
  {
    RIOServer::GetServerPort((const char **)gRIOServer);
    ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
    v8 = *((_DWORD *)this + 178);
    if (v13 && *v13)
    {
      BytePtr = CFDataGetBytePtr(*v13);
      if (v13 && *v13)
      {
        Length = CFDataGetLength(*v13);
LABEL_9:
        AUIOClient_SetProperty(ServerPort, v8, 0, a2, (uint64_t)BytePtr, Length);
        v6 = _CheckRPCError("SetVoiceProperty");
        goto LABEL_10;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_9;
  }
LABEL_10:
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v12);
  return v6;
}

void sub_210ACD110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)&a9);
  _Unwind_Resume(a1);
}

uint64_t AUVoiceIO::GetVoiceProperty(AUVoiceIO *this, int a2, void *a3)
{
  int ServerPort;
  uint64_t v6;
  const void *v7;
  int **v8;
  BOOL v9;
  const void *v10;
  _QWORD v12[6];
  int v13;
  _QWORD v14[2];
  char v15;
  const void *v16;
  uint64_t v17;
  const void **v18;
  int *v19;
  uint64_t v20;
  int v21;
  void *v22;

  v22 = a3;
  v15 = 1;
  v14[0] = &off_24CA90F08;
  v14[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = (const void **)&v20;
  v19 = &v21;
  v20 = 0;
  v21 = 0;
  RIOServer::GetServerPort((const char **)gRIOServer);
  ServerPort = RIOServer::GetServerPort((const char **)gRIOServer);
  AUIOClient_GetProperty(ServerPort, *((_DWORD *)this + 178), 0, a2, &v20, &v21);
  v6 = _CheckRPCError("GetVoiceProperty");
  if (!(_DWORD)v6)
  {
    v7 = *v18;
    v8 = &v19;
    v9 = *v18 == 0;
    if (!*v18)
      v8 = (int **)&v17;
    v13 = **v8;
    if (v9)
      v10 = v16;
    else
      v10 = v7;
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v12, v10);
    v12[0] = &off_24CA91F18;
    v6 = PropertyMarshaller::Deserialize();
    PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v12);
  }
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v14);
  return v6;
}

void sub_210ACD248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)va);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va1);
  _Unwind_Resume(a1);
}

void MetaDataBlockInfo::~MetaDataBlockInfo(MetaDataBlockInfo *this)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _QWORD *v5;
  void *v6;

  *((_DWORD *)this + 8) = 0;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 296) = 0;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = &off_24CA91148;
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_BYTE *)*((_QWORD *)this + 10);
  if (v3)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 11);
    if (v4 != v3)
      *((_QWORD *)this + 11) = &v4[(v3 - v4 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    operator delete(v3);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v5);
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

double AURemoteIO::HostCallback_GetBeatAndTempo(AURemoteIO *this, double *a2, double *a3, double *a4)
{
  double result;

  if (*((_BYTE *)this + 1072) && (*((_BYTE *)this + 1097) & 1) != 0)
  {
    if (a2)
    {
      result = *((double *)this + 135);
      *a2 = result;
    }
    if (a3)
    {
      result = *((double *)this + 136);
      *a3 = result;
    }
  }
  return result;
}

uint64_t AURemoteIO::HostCallback_GetMusicalTimeLocation(AURemoteIO *this, _DWORD *a2, unsigned int *a3, float *a4, unsigned int *a5, double *a6)
{
  uint64_t v6;

  if (!*((_BYTE *)this + 1072))
    return 4294956433;
  if ((*((_BYTE *)this + 1097) & 2) == 0)
    return 4294956446;
  if (a2)
    *a2 = *((_DWORD *)this + 275);
  if (a3)
    *a3 = *((_DWORD *)this + 276);
  if (a4)
    *a4 = *((float *)this + 277);
  v6 = 0;
  if (a5)
    *(_QWORD *)a5 = *((_QWORD *)this + 139);
  return v6;
}

uint64_t AURemoteIO::HostCallback_GetTransportState(AURemoteIO *this, BOOL *a2, unsigned __int8 *a3, unsigned __int8 *a4, double *a5, unsigned __int8 *a6, double *a7, double *a8)
{
  uint64_t v8;

  if (!*((_BYTE *)this + 1072))
    return 4294956433;
  if ((*((_DWORD *)this + 274) & 0x400) == 0)
    return 4294956446;
  if (a2)
    *a2 = (*((_DWORD *)this + 274) & 2) != 0;
  if (a3)
    *a3 = *((_BYTE *)this + 1096) & 1;
  if (a4)
    *(_QWORD *)a4 = *((_QWORD *)this + 140);
  if (a5)
    *(_BYTE *)a5 = (*((_BYTE *)this + 1096) & 8) != 0;
  if (a6)
    *(_QWORD *)a6 = *((_QWORD *)this + 141);
  v8 = 0;
  if (a7)
    *a7 = *((double *)this + 142);
  return v8;
}

uint64_t AURemoteIO::HostCallback_GetTransportState2(AURemoteIO *this, BOOL *a2, BOOL *a3, unsigned __int8 *a4, unsigned __int8 *a5, double *a6, unsigned __int8 *a7, double *a8, double *a9)
{
  uint64_t v9;

  if (!*((_BYTE *)this + 1072))
    return 4294956433;
  if ((*((_DWORD *)this + 274) & 0x400) == 0)
    return 4294956446;
  if (a2)
    *a2 = (*((_DWORD *)this + 274) & 2) != 0;
  if (a3)
    *a3 = (*((_BYTE *)this + 1096) & 4) != 0;
  if (a4)
    *a4 = *((_BYTE *)this + 1096) & 1;
  if (a5)
    *(_QWORD *)a5 = *((_QWORD *)this + 140);
  if (a6)
    *(_BYTE *)a6 = (*((_BYTE *)this + 1096) & 8) != 0;
  if (a7)
    *(_QWORD *)a7 = *((_QWORD *)this + 141);
  v9 = 0;
  if (a8)
    *a8 = *((double *)this + 142);
  return v9;
}

void applesauce::raii::v1::detail::ScopeGuard<AURemoteIO::AURemoteIO(OpaqueAudioComponentInstance *,EIOPersonality)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(ausdk::ComponentBase *a1)
{
  ausdk::ComponentBase::InitializationMutex(a1);
  std::recursive_mutex::lock(&ausdk::ComponentBase::InitializationMutex(void)::global);
}

void TOpaqueRef<AURemoteIO>::~TOpaqueRef(BaseOpaqueObject *a1)
{
  BaseOpaqueObject::~BaseOpaqueObject(a1);
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24CA95328;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24CA95328;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24CA95328;
  a2[1] = v2;
  return std::__function::__value_func<void ()(double)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<long long>(__CFString const*,__CFString const*,long long (*)(void const*,BOOL &),std::function<void ()(long long)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v3 = *a2;
  v7 = 0;
  v4 = (*(uint64_t (**)(uint64_t, char *))(a1 + 8))(v3, &v7);
  if (!v7)
    return 0;
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA953B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,int &)::{lambda(long long)#1}>,void ()(long long)>::operator()(uint64_t result, _QWORD *a2)
{
  **(_DWORD **)(result + 8) = *a2;
  return result;
}

void ausdk::AUMutex::~AUMutex(ausdk::AUMutex *this)
{
  *(_QWORD *)this = &off_24CA95108;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24CA95108;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 8));
  JUMPOUT(0x212BCDF50);
}

BOOL ausdk::AUMutex::try_lock(ausdk::AUMutex *this)
{
  return std::recursive_mutex::try_lock((std::recursive_mutex *)((char *)this + 8));
}

void RIOServer::~RIOServer(RIOServer *this)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;

  *(_QWORD *)this = &off_24CA94748;
  v2 = *((_QWORD *)this + 25);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 24);
  if (v3)
    dispatch_release(v3);
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

{
  NSObject *v2;
  NSObject *v3;
  void *v4;

  *(_QWORD *)this = &off_24CA94748;
  v2 = *((_QWORD *)this + 25);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 24);
  if (v3)
    dispatch_release(v3);
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t CADeprecated::XRemoteMachServer::GetDebugName(CADeprecated::XRemoteMachServer *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t RIOServer::ServerPortDied(RIOServer *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (kRIOClientSubsystem)
  {
    v4 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_7;
  }
  else
  {
    v4 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315650;
    v11 = "AURemoteIO.cpp";
    v12 = 1024;
    v13 = 176;
    v14 = 1024;
    v15 = a2;
    _os_log_impl(&dword_210A23000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d RIOServer::ServerPortDied: PID %d", (uint8_t *)&v10, 0x18u);
  }
LABEL_7:
  v5 = gRIOMutex;
  if (gRIOMutex)
    (*(void (**)(uint64_t))(*(_QWORD *)gRIOMutex + 16))(gRIOMutex);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 16))((char *)this + 80);
  v7 = result;
  v9 = *((_QWORD *)this + 21);
  v8 = *((_QWORD *)this + 22);
  while (v9 != v8)
  {
    result = *(_QWORD *)v9;
    if (*(_DWORD *)(*(_QWORD *)v9 + 600) == a2)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
      v8 = *((_QWORD *)this + 22);
    }
    v9 += 8;
  }
  if (v7)
    result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 10) + 24))((char *)this + 80);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return result;
}

void sub_210ACD9D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::__on_zero_shared()
{
  JUMPOUT(0x212BCD560);
}

uint64_t ___ZL20IPCPropertiesChangedj_block_invoke(uint64_t a1)
{
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BYTE v6[32];
  unsigned int *v7;
  char v8;
  uint64_t v9;

  result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v6, *(_DWORD *)(a1 + 32));
  if (v9)
  {
    v2 = *(_QWORD **)(v9 + 16);
    v3 = v2[59];
    if (v3)
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(v2[59]);
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v2 + 432))(v2, 101, 0, 0);
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v2 + 432))(v2, 2014, 0, 0);
    if (v3)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  if (v8)
  {
    v4 = v7;
    if (v7)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
    }
  }
  return result;
}

void sub_210ACDB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t AURemoteIO::IPC_Uninitialize(AURemoteIO *this)
{
  uint64_t v2;
  const void *v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  _QWORD block[4];
  int v8;

  v2 = *((_QWORD *)this + 59);
  if (v2)
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 16))(*((_QWORD *)this + 59));
  if (*((_DWORD *)this + 253))
  {
    *(_QWORD *)((char *)this + 1012) = 0;
    *(_QWORD *)((char *)this + 1020) = 0;
    *(_QWORD *)((char *)this + 1028) = 0;
    v3 = (const void *)*((_QWORD *)this + 130);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)this + 130) = 0;
    }
    if (*((_BYTE *)this + 558))
      (*(void (**)(AURemoteIO *))(*(_QWORD *)this + 448))(this);
    if (*((_BYTE *)this + 17))
      (*(void (**)(AURemoteIO *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(AURemoteIO *))(*(_QWORD *)this + 504))(this);
    *((_QWORD *)this + 41) = 0;
    *(_OWORD *)((char *)this + 312) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
    *((_QWORD *)this + 34) = 0xFFEFFFFFFFFFFFFFLL;
    *(_WORD *)((char *)this + 17) = 0;
    *((_BYTE *)this + 1072) = 0;
    v4 = *((_DWORD *)this + 144);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZL20IPCPropertiesChangedj_block_invoke;
    block[3] = &__block_descriptor_tmp_84;
    v8 = v4;
    dispatch_async(MEMORY[0x24BDAC9B8], block);
  }
  *((_QWORD *)this + 156) = 0;
  _Block_release(*((const void **)this + 158));
  *((_QWORD *)this + 158) = 0;
  v5 = *((_QWORD *)this + 160);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 160) = 0;
  }
  result = CADeprecated::CAAutoDelete<CADeprecated::RealtimeMessenger>::set((uint64_t *)this + 159, 0);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return result;
}

{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  _BYTE v4[32];
  unsigned int *v5;
  char v6;
  uint64_t v7;

  result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v4, (int)this);
  if (v7)
    result = AURemoteIO::IPC_Uninitialize(*(AURemoteIO **)(v7 + 16));
  if (v6)
  {
    v2 = v5;
    if (v5)
    {
      do
        v3 = __ldaxr(v2);
      while (__stlxr(v3 - 1, v2));
    }
  }
  return result;
}

void sub_210ACDCCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

void sub_210ACDD44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  unsigned int v15;

  if (a15 && a14)
  {
    do
      v15 = __ldaxr(a14);
    while (__stlxr(v15 - 1, a14));
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210ACDD38);
}

void sub_210ACE66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AUConverterRTMutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void (*a22)(uint64_t),uint64_t a23,void (*a24)(void),char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v47;

  if (a20)
    free(a20);
  if (v45)
    a22(v45);
  if (a23)
    a24();
  AUConverterRTMutex::unlock(a10);
  SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&a25);
  SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&a28);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a43);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
  if (a17 && a16)
  {
    do
      v47 = __ldaxr(a16);
    while (__stlxr(v47 - 1, a16));
  }
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
  _Unwind_Resume(a1);
}

void sub_210ACEA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, char a15)
{
  uint64_t v15;
  unsigned int v17;

  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  if (a15 && a14)
  {
    do
      v17 = __ldaxr(a14);
    while (__stlxr(v17 - 1, a14));
  }
  _Unwind_Resume(exception_object);
}

void SamplerNote::~SamplerNote(SamplerNote *this)
{
  SamplerNote::~SamplerNote(this);
  JUMPOUT(0x212BCDF50);
}

{
  char *v2;
  uint64_t i;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24CA8B5E8;
  *((_QWORD *)this + 1) = &unk_24CA8B650;
  if (*((_DWORD *)this + 18) == -1 && *((_QWORD *)this + 17))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v4 = 136315394;
      v5 = "SamplerNote.cpp";
      v6 = 1024;
      v7 = 43;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note destroyed without clearing map", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  else
  {
    if (*((int *)this + 13) <= 5)
    {
      v2 = (char *)this + 88;
      for (i = *((_QWORD *)this + 12); (char *)i != v2; i = *(_QWORD *)(i + 8))
        VoiceZone::Kill(*(_QWORD *)(i + 16));
    }
    SamplerNote::Cleanup(this, 0);
    std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::destroy((SamplerNote *)((char *)this + 120), *((_QWORD **)this + 16));
    std::__list_imp<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::clear((_QWORD *)this + 11);
  }
}

uint64_t SamplerNote::Update(uint64_t this, int a2)
{
  if (a2 == 2)
    *(_BYTE *)(this + 158) |= 1u;
  return this;
}

uint64_t SamplerNote::Release(uint64_t this, int a2)
{
  uint64_t i;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(this + 52) >= 6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "SamplerNote.cpp";
      v5 = 1024;
      v6 = 155;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note should be sounding when Release called", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
  if (*(_DWORD *)(this + 148) == -1)
  {
    for (i = *(_QWORD *)(this + 96); i != this + 88; i = *(_QWORD *)(i + 8))
      *(_DWORD *)(*(_QWORD *)(i + 16) + 236) = a2;
    *(_DWORD *)(this + 68) = a2;
  }
  return this;
}

uint64_t SamplerNote::FastRelease(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(this + 52) >= 5)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v6 = 136315394;
      v7 = "SamplerNote.cpp";
      v8 = 1024;
      v9 = 172;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: note should be active when FastRelease called", (uint8_t *)&v6, 0x12u);
    }
    __break(1u);
  }
  v2 = this;
  if (*(_DWORD *)(this + 148) == -1)
  {
    v4 = this + 88;
    for (i = *(_QWORD *)(this + 96); i != v4; i = *(_QWORD *)(i + 8))
      this = VoiceZone::FastRelease(*(_QWORD *)(i + 16));
    *(_DWORD *)(v2 + 68) = a2;
  }
  else
  {
    *(_BYTE *)(this + 158) |= 2u;
  }
  return this;
}

float SamplerNote::Amplitude(SamplerNote *this)
{
  float result;

  result = 0.0;
  if (*((int *)this + 13) <= 4)
    return *((float *)this + 38);
  return result;
}

void `non-virtual thunk to'SamplerNote::~SamplerNote(SamplerNote *this)
{
  SamplerNote::~SamplerNote((SamplerNote *)((char *)this - 8));
}

{
  SamplerNote::~SamplerNote((SamplerNote *)((char *)this - 8));
  JUMPOUT(0x212BCDF50);
}

uint64_t `non-virtual thunk to'SamplerNote::Release(SamplerNote *this, int a2)
{
  return SamplerNote::Release((uint64_t)this - 8, a2);
}

uint64_t `non-virtual thunk to'SamplerNote::FastRelease(SamplerNote *this, int a2)
{
  return SamplerNote::FastRelease((uint64_t)this - 8, a2);
}

float `non-virtual thunk to'SamplerNote::Amplitude(SamplerNote *this)
{
  float result;

  result = 0.0;
  if (*((int *)this + 11) <= 4)
    return *((float *)this + 36);
  return result;
}

void sub_210ACEE3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::destroy(v3, a2[1]);
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

_QWORD *std::__list_imp<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](void *a1)
{
  caulk::rt_safe_memory_resource *result;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
  if (*MEMORY[0x24BEC6E18])
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a1);
  __break(1u);
  return result;
}

uint64_t SamplerNote::KillPaused(SamplerNote *this)
{
  char *v2;
  uint64_t i;

  v2 = (char *)this + 88;
  for (i = *((_QWORD *)this + 12); (char *)i != v2; i = *(_QWORD *)(i + 8))
    VoiceZone::Kill(*(_QWORD *)(i + 16));
  SamplerNote::Cleanup(this, 1);
  return (*(uint64_t (**)(SamplerNote *, _QWORD))(*(_QWORD *)this + 80))(this, 0);
}

BOOL SamplerNote::Reconfigure(SamplerNote *this, const MusicDeviceNoteParams *a2)
{
  SamplerNote *v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  double v9;
  uint64_t v10;
  char *v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  ZoneState *v19;
  uint64_t v20;
  float v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  caulk::rt_safe_memory_resource *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  float ZoneXFadeGain;
  float v37;
  uint64_t *v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  float LinearTuning;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  caulk::rt_safe_memory_resource **v64;
  caulk::rt_safe_memory_resource **v65;
  char v66;
  caulk::rt_safe_memory_resource *v67;
  caulk::rt_safe_memory_resource *v68;
  caulk::rt_safe_memory_resource **v69;
  caulk::rt_safe_memory_resource **v70;
  caulk::rt_safe_memory_resource *v71;
  caulk::rt_safe_memory_resource *v72;
  uint64_t v73;
  caulk::rt_safe_memory_resource *v74;
  uint64_t v75;
  uint64_t v76;
  caulk::rt_safe_memory_resource *v77;
  BOOL v78;
  int v80;
  uint64_t v81;
  __int16 v82;
  __int16 v83;
  uint64_t v84;
  caulk::rt_safe_memory_resource *v85;
  int v86;
  unsigned __int8 v87[4];
  SamplerNote *v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  char v94;
  void *v95;
  caulk::rt_safe_memory_resource *v96;
  uint64_t v97;
  caulk::rt_safe_memory_resource *v98;
  caulk::rt_safe_memory_resource *v99;
  uint64_t v100;
  _BYTE buf[18];
  _OWORD v102[128];
  uint64_t v103;

  v2 = this;
  v103 = *MEMORY[0x24BDAC8D0];
  v3 = *((float *)this + 19);
  v4 = *((float *)this + 20);
  *((_BYTE *)this + 157) = 0;
  v5 = *((_QWORD *)this + 5);
  v6 = *(_QWORD *)(v5 + 232);
  if (((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) & ~((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) >> 31)) >= 0x7F)
    LOWORD(v7) = 127;
  else
    v7 = (*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) & ~((*(unsigned __int8 *)(v6 + 68) + (int)v3 - 64) >> 31);
  v8 = (int)v4;
  v9 = (*(double (**)(char *, const MusicDeviceNoteParams *))(*((_QWORD *)this + 1) + 96))((char *)this + 8, a2);
  v11 = (char *)v2 + 112;
  v10 = *((_QWORD *)v2 + 14);
  v12 = *(char *)(v10 + 148);
  v82 = v8;
  v83 = v7;
  memset(v102, 0, 512);
  v13 = (__int16)(v7 + v12) & ~((__int16)(v7 + v12) >> 31);
  if (v13 >= 0x7F)
    LOBYTE(v13) = 127;
  v14 = (*(char *)(v10 + 149) + v8) & ~((*(char *)(v10 + 149) + v8) >> 31);
  if (v14 >= 0x7F)
    LOBYTE(v14) = 127;
  buf[0] = v13;
  buf[1] = v14;
  *(_QWORD *)&buf[8] = v6;
  InstrumentState::GetMatchingLayers((_QWORD *)v10, buf, (uint64_t)v102);
  v86 = *(_DWORD *)(*(_QWORD *)v11 + 124);
  v16 = *(unsigned __int8 *)(*(_QWORD *)v11 + 185);
  v17 = *(_DWORD *)(*(_QWORD *)v11 + 144);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 196) < v17)
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 196);
  if (v17 >= 8)
    v18 = 8;
  else
    v18 = v17;
  v19 = (ZoneState *)*((unsigned int *)v2 + 16);
  v98 = (caulk::rt_safe_memory_resource *)&v98;
  v99 = (caulk::rt_safe_memory_resource *)&v98;
  v100 = 0;
  if (!v15)
  {
    LOBYTE(v90) = 0;
    goto LABEL_97;
  }
  v20 = 0;
  v90 = 0;
  v21 = v9;
  v22 = (uint64_t *)((char *)v2 + 88);
  v81 = v15;
  v89 = v18;
  v88 = v2;
  v80 = v16;
  do
  {
    v23 = *((_QWORD *)v102 + v20);
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v24 = *(unsigned __int8 *)(v23 + 136);
    v25 = *(_QWORD *)(v23 + 24);
    v26 = *(char *)(v25 + 148) + *(char *)(v23 + 152);
    if (v26 <= -64)
      v26 = -64;
    if (v26 >= 64)
      LOWORD(v26) = 64;
    v27 = (__int16)(v26 + v83) & ~((__int16)(v26 + v83) >> 31);
    if (v27 >= 0x7F)
      LOBYTE(v27) = 127;
    v28 = *(char *)(v25 + 149) + *(char *)(v23 + 153);
    if (v28 <= -127)
      v28 = -127;
    if (v28 >= 127)
      LOWORD(v28) = 127;
    v29 = (__int16)(v28 + v82) & ~((__int16)(v28 + v82) >> 31);
    v92 = v27;
    if (v29 >= 0x7F)
      v30 = 127;
    else
      v30 = v29;
    v93 = v30;
    *(_DWORD *)v87 = v24;
    v94 = v24;
    v84 = v20;
    if (!LayerState::GetMatchingZones(v23, &v92, (unsigned __int8 ***)&v95))
    {
LABEL_84:
      v63 = 0;
      goto LABEL_88;
    }
    v31 = (**(uint64_t (***)(uint64_t))v23)(v23);
    v32 = (caulk::rt_safe_memory_resource *)v95;
    v85 = v96;
    v33 = *(_DWORD *)v87;
    if (v95 == v96)
    {
      v63 = 0;
      if (v95)
        goto LABEL_89;
      goto LABEL_90;
    }
    v34 = v31;
    while (1)
    {
      v35 = *(_QWORD *)v32;
      if (!v33)
        break;
      ZoneXFadeGain = GetZoneXFadeGain((ZoneState *)*(unsigned __int8 *)(v35 + 186), *(_BYTE *)(v35 + 187), v33, v93);
      if (ZoneXFadeGain != 0.0)
      {
        v37 = ZoneXFadeGain;
        goto LABEL_35;
      }
LABEL_83:
      v32 = (caulk::rt_safe_memory_resource *)((char *)v32 + 8);
      v33 = *(_DWORD *)v87;
      if (v32 == v85)
        goto LABEL_84;
    }
    v37 = 1.0;
LABEL_35:
    if (*(_WORD *)(v35 + 220))
      v37 = v37
          * (float)((float)(1.0
                          - (float)((float)(v92 - *(unsigned __int8 *)(v35 + 184))
                                  / (float)(*(unsigned __int8 *)(v35 + 185) - *(unsigned __int8 *)(v35 + 184))))
                  * (float)*(__int16 *)(v35 + 220));
    v38 = (uint64_t *)*((_QWORD *)v2 + 12);
    if (v38 != v22)
    {
      v39 = 0;
      do
      {
        while (1)
        {
          v40 = v38[2];
          v91 = v40;
          if (!v40)
            break;
          if (*(_QWORD *)(v40 + 168) != v35)
            break;
          v41 = *(_BYTE *)(v40 + 224);
          if ((v41 & 2) == 0)
            break;
          *(float *)(v40 + 228) = v21;
          *(_DWORD *)(v40 + 232) = (_DWORD)v19;
          *(_BYTE *)(v40 + 224) = v41 & 0xC1;
          v42 = *(_QWORD *)(v40 + 160);
          v43 = *(_QWORD *)(v35 + 24);
          v44 = *(_QWORD *)(v43 + 24);
          v45 = *(char *)(v44 + 148) + *(char *)(v43 + 152);
          if (v45 <= -64)
            v45 = -64;
          if (v45 >= 64)
            LOWORD(v45) = 64;
          v46 = (__int16)(v45 + (int)*(float *)(v42 + 76)) & ~((__int16)(v45 + (int)*(float *)(v42 + 76)) >> 31);
          if (v46 >= 0x7F)
            LOBYTE(v46) = 127;
          *(_BYTE *)(*(_QWORD *)(v40 + 176) + 20) = v46;
          v47 = (int)*(float *)(v42 + 80);
          v48 = *(char *)(v44 + 149) + *(char *)(v43 + 153);
          if (v48 <= -127)
            v48 = -127;
          if (v48 >= 127)
            LOWORD(v48) = 127;
          v49 = (__int16)(v48 + v47) & ~((__int16)(v48 + v47) >> 31);
          if (v49 >= 0x7F)
            LOBYTE(v49) = 127;
          *(_BYTE *)(*(_QWORD *)(v40 + 184) + 20) = v49;
          VoiceZone::HandlePortamento((VoiceZone *)v40);
          LinearTuning = VoiceZone::GetLinearTuning((VoiceZone *)v40, *(float *)(*(_QWORD *)(v40 + 160) + 76)- (float)(int)*(float *)(*(_QWORD *)(v40 + 160) + 76));
          Oscillator::SetFixedPitchFactor(v40 + 256, LinearTuning);
          v51 = *(_QWORD *)(v40 + 168);
          *(float *)(v40 + 1060) = __exp10f((float)(*(float *)(*(_QWORD *)(v51 + 104) + 84)+ (float)(*(float *)(v51 + 200)+ (float)(*(float *)(*(_QWORD *)(v51 + 24) + 104)+ (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 24)+ 128)+ *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 24) + 24)+ 24)+ 180)))))* 0.05)* v37;
          if (!*(_BYTE *)(*(_QWORD *)(v40 + 168) + 189))
          {
            v52 = *(_QWORD *)(v40 + 200);
            if (v52)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 40))(v52, 0);
          }
          if (v86 == 76)
          {
            if (*(_DWORD *)(v40 + 244) != 12)
            {
              v53 = *(_QWORD **)(v40 + 56);
              if (v53 != (_QWORD *)(v40 + 64))
              {
                do
                {
                  VoiceEnvelope::SetGate((VoiceEnvelope *)v53[5], 1, (int)v19);
                  v54 = (_QWORD *)v53[1];
                  if (v54)
                  {
                    do
                    {
                      v55 = v54;
                      v54 = (_QWORD *)*v54;
                    }
                    while (v54);
                  }
                  else
                  {
                    do
                    {
                      v55 = (_QWORD *)v53[2];
                      v56 = *v55 == (_QWORD)v53;
                      v53 = v55;
                    }
                    while (!v56);
                  }
                  v53 = v55;
                }
                while (v55 != (_QWORD *)(v40 + 64));
              }
            }
            v57 = *(_QWORD **)(v40 + 80);
            if (v57 != (_QWORD *)(v40 + 88))
            {
              do
              {
                VoiceLFO::Start(v57[5], (int)v19);
                v58 = (_QWORD *)v57[1];
                if (v58)
                {
                  do
                  {
                    v59 = v58;
                    v58 = (_QWORD *)*v58;
                  }
                  while (v58);
                }
                else
                {
                  do
                  {
                    v59 = (_QWORD *)v57[2];
                    v56 = *v59 == (_QWORD)v57;
                    v57 = v59;
                  }
                  while (!v56);
                }
                v57 = v59;
              }
              while (v59 != (_QWORD *)(v40 + 88));
            }
          }
          *(_BYTE *)(v40 + 224) |= 2u;
          std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, &v91);
          v60 = *v38;
          v61 = v38[1];
          *(_QWORD *)(v60 + 8) = v61;
          *(_QWORD *)v38[1] = v60;
          v2 = v88;
          --*((_QWORD *)v88 + 13);
          std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](v38);
          ++v90;
          v38 = *(uint64_t **)(v61 + 8);
          v39 = 1;
          v18 = v89;
          if (v38 == v22)
            goto LABEL_83;
        }
        v38 = (uint64_t *)v38[1];
      }
      while (v38 != v22);
      v2 = v88;
      if ((v39 & 1) != 0)
        goto LABEL_83;
    }
    v62 = 0;
    while (1)
    {
      v91 = VoiceZone::NewVoiceZone(v2, (SamplerNote *)v35, v19, v37, v21);
      if (!v91)
        break;
      std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, &v91);
      SamplerBaseElement::IncrementActiveLayerVoiceCount((SamplerBaseElement *)v5, v34, 1);
      ++*(_DWORD *)(v5 + 264);
      ++v62;
      if (!v80 || v62 >= v18)
      {
        v90 += v62;
        goto LABEL_83;
      }
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "SamplerNote.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 620;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerNote::Reconfigure: Hit max total zone limit!", buf, 0x12u);
    }
    v90 += v62;
    v63 = 34;
LABEL_88:
    v32 = (caulk::rt_safe_memory_resource *)v95;
    if (v95)
    {
LABEL_89:
      v96 = v32;
      std::allocator_traits<caulk::rt_allocator<ZoneState *>>::deallocate[abi:ne180100](v32, (v97 - (uint64_t)v32) >> 3);
    }
LABEL_90:
    if (v63)
      break;
    v20 = v84 + 1;
    v18 = v89;
  }
  while (v84 + 1 != v81);
LABEL_97:
  v64 = (caulk::rt_safe_memory_resource **)((char *)v2 + 88);
  v65 = (caulk::rt_safe_memory_resource **)*((_QWORD *)v2 + 12);
  if (v65 == (caulk::rt_safe_memory_resource **)((char *)v2 + 88))
  {
    v70 = (caulk::rt_safe_memory_resource **)((char *)v2 + 88);
    v66 = v90;
  }
  else
  {
    v66 = v90;
    do
    {
      v67 = v65[2];
      *(_QWORD *)buf = v67;
      if ((*((_BYTE *)v67 + 224) & 2) != 0)
      {
        VoiceZone::FastRelease((uint64_t)v67);
        std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(&v98, buf);
        ++v66;
      }
      else
      {
        (*(void (**)(caulk::rt_safe_memory_resource *))(*(_QWORD *)v67 + 8))(v67);
      }
      v68 = *v65;
      v69 = (caulk::rt_safe_memory_resource **)v65[1];
      *((_QWORD *)v68 + 1) = v69;
      *(_QWORD *)v65[1] = v68;
      --*((_QWORD *)v2 + 13);
      std::allocator_traits<caulk::rt_allocator<std::__list_node<VoiceZone *,void *>>>::deallocate[abi:ne180100](v65);
      v65 = v69;
    }
    while (v69 != v64);
    v70 = (caulk::rt_safe_memory_resource **)*((_QWORD *)v2 + 12);
  }
  v71 = v99;
  if (v99 != (caulk::rt_safe_memory_resource *)&v98)
  {
    v72 = v98;
    if (v64 != &v98)
    {
      if (v98 == v99)
      {
        v75 = 1;
      }
      else
      {
        v73 = -1;
        v74 = v99;
        do
        {
          v74 = (caulk::rt_safe_memory_resource *)*((_QWORD *)v74 + 1);
          ++v73;
        }
        while (v74 != v98);
        v75 = v73 + 2;
      }
      v100 -= v75;
      *((_QWORD *)v2 + 13) += v75;
    }
    v76 = *(_QWORD *)v71;
    *(_QWORD *)(v76 + 8) = *((_QWORD *)v72 + 1);
    **((_QWORD **)v72 + 1) = v76;
    v77 = *v70;
    *((_QWORD *)v77 + 1) = v71;
    *(_QWORD *)v71 = v77;
    *v70 = v72;
    *((_QWORD *)v72 + 1) = v70;
  }
  *((_BYTE *)v2 + 157) = v66;
  *((_BYTE *)v2 + 156) = v66;
  v78 = v66 != 0;
  if (!v66)
  {
    SamplerNote::Cleanup(v2, 0);
    (*(void (**)(SamplerNote *, _QWORD))(*(_QWORD *)v2 + 80))(v2, 0);
    v78 = 0;
  }
  std::__list_imp<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::clear(&v98);
  return v78;
}

void sub_210ACF8BC()
{
  JUMPOUT(0x210ACF8E8);
}

float GetZoneXFadeGain(ZoneState *a1, unsigned __int8 a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  int v5;
  float result;
  unsigned int v7;

  if (a4 >= a1)
  {
    result = 1.0;
    if (a4 <= a2)
      return result;
    v7 = a3 + a2;
    if (v7 >= 0x7F)
      v7 = 127;
    v5 = v7 - a4;
  }
  else
  {
    v4 = (a1 - a3) & ~((int)(a1 - a3) >> 31);
    if (v4 >= 0x7F)
      v4 = 127;
    v5 = a4 - v4;
  }
  return (float)v5 / (float)a3;
}

caulk::rt_safe_memory_resource *std::list<VoiceZone *,caulk::rt_allocator<VoiceZone *>>::push_back(caulk::rt_safe_memory_resource **a1, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *result;
  caulk::rt_safe_memory_resource *v5;

  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
  if (*MEMORY[0x24BEC6E18])
  {
    result = (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = *a2;
    v5 = *a1;
    *(_QWORD *)result = *a1;
    *((_QWORD *)result + 1) = a1;
    *((_QWORD *)v5 + 1) = result;
    *a1 = result;
    a1[2] = (caulk::rt_safe_memory_resource *)((char *)a1[2] + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,std::shared_ptr<ModControlSource>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::shared_ptr<ModControlSource>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = result + 1;
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    result = (uint64_t *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
    {
      v9 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
      *(_DWORD *)(v9 + 32) = *(_DWORD *)a3;
      *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = v7;
      *v6 = v9;
      v10 = *(_QWORD *)*v4;
      if (v10)
      {
        *v4 = v10;
        v11 = (uint64_t *)*v6;
      }
      else
      {
        v11 = (uint64_t *)v9;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
      ++v4[2];
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void std::__shared_ptr_pointer<RandomValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,RandomValueControlSource>,std::allocator<RandomValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_pointer<RandomValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,RandomValueControlSource>,std::allocator<RandomValueControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<MaxValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,MaxValueControlSource>,std::allocator<MaxValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_pointer<MaxValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,MaxValueControlSource>,std::allocator<MaxValueControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void MaxValueControlSource::~MaxValueControlSource(MaxValueControlSource *this)
{
  *((_QWORD *)this + 4) = off_24CA88060;
  *(_QWORD *)this = &unk_24CA880C8;
  *((_QWORD *)this + 1) = &unk_24CA88128;
}

{
  *((_QWORD *)this + 4) = off_24CA88060;
  *(_QWORD *)this = &unk_24CA880C8;
  *((_QWORD *)this + 1) = &unk_24CA88128;
  MemAllocator::FreeMem(this, (void *)0xB8);
}

uint64_t MaxValueControlSource::GetRunFrameCount(MaxValueControlSource *this, uint64_t a2)
{
  return a2;
}

void `virtual thunk to'MaxValueControlSource::~MaxValueControlSource(MaxValueControlSource *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1[4] = off_24CA88060;
  *v1 = &unk_24CA880C8;
  v1[1] = &unk_24CA88128;
}

{
  MaxValueControlSource::~MaxValueControlSource((MaxValueControlSource *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'MaxValueControlSource::GetRunFrameCount(MaxValueControlSource *this, uint64_t a2)
{
  return a2;
}

{
  return a2;
}

void std::__shared_ptr_pointer<FixedValueControlSource *,std::shared_ptr<ModControlSource>::__shared_ptr_default_delete<ModControlSource,FixedValueControlSource>,std::allocator<FixedValueControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

void ausdk::AUEffectBase::NewKernel(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void AUHipass::~AUHipass(AUHipass *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUHipass::GetPropertyInfo(AUHipass *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 51)
    {
      if (a2 == 52)
      {
        result = 0;
        v7 = 0x4000;
      }
      else
      {
        if (a2 != 57)
        {
          if (a2 == 56)
          {
            result = 0;
            *a5 = 8;
            *a6 = 1;
          }
          return result;
        }
        result = 0;
        v7 = 48;
      }
      *a5 = v7;
      *a6 = 0;
      return result;
    }
    if (a2 == 21 || a2 == 29)
    {
      result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  return result;
}

uint64_t AUHipass::GetProperty(AUHipass *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  ausdk::AUEffectBase ***v17;
  ausdk::AUEffectBase **v18;
  const BiquadCoefficients *v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3)
    return 4294956417;
  v25 = v8;
  v26 = v7;
  v27 = v5;
  v28 = v6;
  v10 = a5;
  result = 4294956417;
  if (a2 > 51)
  {
    if (a2 == 52)
    {
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      (*(void (**)(__int128 *__return_ptr, AUHipass *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v22, this, 2, 0);
      v16 = *(double *)&v22;
      v22 = 0uLL;
      v24 = 0;
      v23 = 0x3FF0000000000000uLL;
      v17 = (ausdk::AUEffectBase ***)*((_QWORD *)this + 66);
      if (*((ausdk::AUEffectBase ****)this + 67) == v17)
        v18 = 0;
      else
        v18 = *v17;
      AUHipass::HipassKernel::CalculateCoefficients(v18, (Biquad *)&v22);
      v20[0] = v22;
      v20[1] = v23;
      v21 = v24;
      GetFrequencyResponse((uint64_t)v10, (AudioUnitFrequencyResponseBin *)1, (uint64_t)v20, v19, v16);
    }
    else
    {
      if (a2 != 57)
        return result;
      v13 = 0;
      v14 = *((_QWORD *)this + 1);
      do
      {
        v15 = overviewParameterIDs[v13];
        *(_QWORD *)v10 = v14;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = v15;
        ++v13;
        v10 += 6;
      }
      while (v13 != 2);
    }
    return 0;
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v12 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29)
        return result;
      result = 0;
      v12 = *((unsigned __int8 *)this + 554);
    }
    *a5 = v12;
  }
  return result;
}

uint64_t AUHipass::SetParameter(AUHipass *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

double AUHipass::GetParameterInfo(AUHipass *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  double result;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  const __CFString *v10;
  CFStringRef *v11[3];

  v11[2] = *(CFStringRef **)MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (!a2)
  {
    v11[0] = (CFStringRef *)&kCutoffFreq_Name;
    v11[1] = (CFStringRef *)&kResonance_Name;
    if (!LocalizeAUParameterStringsForClass<AUHipass>(std::initializer_list<__CFString const**>)::sLocalized)
      LocalizeAUParameterStringsForClass<AUHipass>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v11, 2);
    if (a3 == 1)
    {
      v10 = (const __CFString *)kResonance_Name;
      buffer->cfNameString = (CFStringRef)kResonance_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      result = 3.43597632e10;
      *(_QWORD *)&buffer->minValue = 0x42200000C1A00000;
      buffer->defaultValue = 0.0;
    }
    else if (!a3)
    {
      v8 = (const __CFString *)kCutoffFreq_Name;
      buffer->cfNameString = (CFStringRef)kCutoffFreq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 0x4120000000000008;
      result = *(double *)(ausdk::AUScope::SafeGetElement((AUHipass *)((char *)this + 128), 0) + 80) * 0.5;
      *(float *)&result = result;
      buffer->maxValue = *(AudioUnitParameterValue *)&result;
      v9 = buffer->flags + 12582912;
      buffer->defaultValue = 6900.0;
      buffer->flags = v9;
    }
  }
  return result;
}

uint64_t AUHipass::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUHipass::GetTailTime(AUHipass *this)
{
  return 0.001;
}

uint64_t AUHipass::SupportsTail(AUHipass *this)
{
  return 1;
}

BOOL AUHipass::StreamFormatWritable(AUHipass *this)
{
  return *((_BYTE *)this + 17) == 0;
}

double AUHipass::NewKernel@<D0>(AUHipass *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24CA95250;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0x3FF0000000000000;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = this;
  *(_DWORD *)(v4 + 104) = -1;
  *a2 = v4;
  return result;
}

uint64_t AUHipass::Version(AUHipass *this)
{
  return 0x10000;
}

void AUHipass::HipassKernel::~HipassKernel(AUHipass::HipassKernel *this)
{
  JUMPOUT(0x212BCDF50);
}

double AUHipass::HipassKernel::Reset(AUHipass::HipassKernel *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

double *AUHipass::HipassKernel::Process(AUHipass::HipassKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  int v9;

  v9 = *(_DWORD *)(*((_QWORD *)this + 12) + 592);
  if (*((_DWORD *)this + 26) != v9)
  {
    *((_DWORD *)this + 26) = v9;
    AUHipass::HipassKernel::CalculateCoefficients((ausdk::AUEffectBase **)this, (AUHipass::HipassKernel *)((char *)this + 24));
  }
  return Biquad::Process((double *)this + 3, a2, a3, a4);
}

BiquadCoefficients *AUHipass::HipassKernel::CalculateCoefficients(ausdk::AUEffectBase **this, Biquad *a2)
{
  float Parameter;
  double v5;
  float v6;
  double v7;
  float v8;
  double v9;
  double v10;

  Parameter = ausdk::AUEffectBase::GetParameter(this[1], 0);
  if (Parameter <= 10.0)
    Parameter = 10.0;
  v5 = Parameter;
  v6 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this[1] + 128), 0) + 80);
  v7 = (v5 + v5) / v6;
  v8 = ausdk::AUEffectBase::GetParameter(this[1], 1u);
  v9 = __exp10(v8 * 0.05);
  v10 = 3.11017673;
  if (v7 <= 0.99)
    v10 = v7 * 3.14159265;
  return BiquadCoefficients::SetQ(a2, 2, v10, v9, 0.0);
}

_QWORD *AUHipassFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHipass>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHipass>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void AUSimpleTime::~AUSimpleTime(AUSimpleTime *this)
{
  *(_QWORD *)this = &off_24CA8BF48;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 120, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 119, 0);
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_24CA8BF48;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 120, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 119, 0);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUSimpleTime::Initialize(AUSimpleTime *this)
{
  ausdk::AUScope *v2;
  CADeprecated::CABufferList *v3;
  int v4;
  double v5;
  unsigned int v6;
  unsigned int v7;
  const char *v8;
  int v9;
  double v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = (AUSimpleTime *)((char *)this + 80);
  v3 = (CADeprecated::CABufferList *)*(unsigned int *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 80), 0)+ 108);
  if ((_DWORD)v3 != *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 108))
    return 4294956428;
  v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 92) & 1;
  if (v4 != (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 92) & 1))
    return 4294956428;
  v5 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v5 != *(double *)(ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0) + 80))
    return 4294956428;
  v9 = *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 92);
  if ((v9 & 0x20) == 0 && (_DWORD)v3 != 2 && !v4)
    return 4294956428;
  v11 = v5 * *((float *)this + 237) / 1000.0;
  *((_DWORD *)this + 236) = v11;
  *((_DWORD *)this + 242) = 2 * v11;
  if ((v9 & 0x20) != 0)
  {
    v12 = CADeprecated::CABufferList::New(v3, v6, v7, v8);
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 119, v12);
    v16 = CADeprecated::CABufferList::New(v3, v13, v14, v15);
  }
  else
  {
    v17 = operator new(0x30uLL);
    *v17 = "";
    v17[1] = 0;
    *((_DWORD *)v17 + 4) = 0;
    *((_DWORD *)v17 + 6) = 1;
    *((_DWORD *)v17 + 8) = (_DWORD)v3;
    *((_DWORD *)v17 + 9) = 0;
    v17[5] = 0;
    CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 119, v17);
    v16 = operator new(0x30uLL);
    *v16 = "";
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    *((_DWORD *)v16 + 6) = 1;
    *((_DWORD *)v16 + 8) = (_DWORD)v3;
    *((_DWORD *)v16 + 9) = 0;
    v16[5] = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 120, v16);
  CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 119));
  CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 120));
  return (*(uint64_t (**)(AUSimpleTime *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
}

void AUSimpleTime::Cleanup(AUSimpleTime *this)
{
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 119, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 120, 0);
}

uint64_t AUSimpleTime::Reset(AUSimpleTime *this)
{
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_QWORD *)this + 96) = 0x3FF0000000000000;
  *((_BYTE *)this + 784) = 1;
  *((_QWORD *)this + 107) = 0xBFF0000000000000;
  *((_QWORD *)this + 108) = 0xBFF0000000000000;
  *((_DWORD *)this + 243) = 0;
  *((_QWORD *)this + 122) = 0;
  AUSimpleTime::RateChanged((_DWORD *)this + 230, (uint64_t)this + 896, (float *)this + 235, (_DWORD *)this + 231, (_BYTE *)this + 928, *((_DWORD *)this + 234), *((_DWORD *)this + 223));
  return 0;
}

uint64_t AUSimpleTime::GetPropertyInfo(AUSimpleTime *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 3800)
    {
      if (a2 == 3801)
      {
        v7 = 1;
        v8 = 256;
      }
      else
      {
        if (a2 != 3802)
          return result;
        v7 = 0;
        v8 = 8;
      }
    }
    else if (a2 == 21)
    {
      v7 = 1;
      v8 = 4;
    }
    else
    {
      if (a2 != 49)
        return result;
      v7 = 1;
      v8 = 16;
    }
    result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

uint64_t AUSimpleTime::GetProperty(AUSimpleTime *this, int a2, int a3, unsigned int a4, char *__dst)
{
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 3800)
  {
    if (a2 == 3801)
    {
      v19 = *((_BYTE *)this + 745);
      v27 = *(_DWORD *)((char *)this + 746);
      v28 = *((_WORD *)this + 375);
      v20 = *((_QWORD *)this + 94);
      v29 = *(_OWORD *)((char *)this + 760);
      LOBYTE(v30) = *((_BYTE *)this + 776);
      memmove(__dst, (char *)this + 528, 0xD9uLL);
      result = 0;
      __dst[217] = v19;
      *(_DWORD *)(__dst + 218) = v27;
      *((_WORD *)__dst + 111) = v28;
      *((_QWORD *)__dst + 28) = v20;
      *(_OWORD *)(__dst + 232) = v29;
      *((_QWORD *)__dst + 31) = v30;
    }
    else if (a2 == 3802)
    {
      if (*((_BYTE *)this + 17))
      {
        v8 = *(_DWORD *)__dst;
        v27 = 0;
        (*(void (**)(AUSimpleTime *, _QWORD, _QWORD, _QWORD, int *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v27);
        v9 = *((_DWORD *)this + 222);
        v29 = *((_OWORD *)this + 56);
        v30 = *((_QWORD *)this + 114);
        v10 = *((_DWORD *)this + 230);
        v11 = *((_DWORD *)this + 231);
        v12 = *((_DWORD *)this + 245);
        v13 = *((_DWORD *)this + 223);
        v14 = *((unsigned __int8 *)this + 928);
        v15 = *((_DWORD *)this + 233);
        if (v15 == *((_DWORD *)this + 234) || v11)
        {
          v17 = *((_DWORD *)this + 231);
          v15 = *((_DWORD *)this + 234);
        }
        else
        {
          if (v13)
            v16 = 0;
          else
            v16 = *((_DWORD *)this + 233);
          switch(v16)
          {
            case -3:
              v17 = 0;
              *(_QWORD *)&v29 = 0x500000008;
              v18 = 10;
              goto LABEL_38;
            case -2:
              v17 = 0;
              v29 = xmmword_210B0A1E0;
              v14 = 1;
              v10 = 4;
              break;
            case -1:
              v17 = 0;
              v29 = xmmword_210B0A1D0;
              v30 = 0xA00000005;
              v14 = 1;
              v10 = 6;
              break;
            case 0:
              v17 = 0;
              LODWORD(v29) = 12;
              v10 = 1;
              goto LABEL_36;
            case 1:
              v17 = 0;
              v29 = xmmword_210B0A1C0;
              LODWORD(v30) = 13;
              v14 = 1;
              v10 = 5;
              break;
            case 2:
              v17 = 0;
              *(_QWORD *)&v29 = 0x60000000CLL;
              v18 = 13;
LABEL_38:
              DWORD2(v29) = v18;
              v14 = 1;
              v10 = 3;
              break;
            case 3:
              v17 = 0;
              *(_QWORD *)&v29 = 0xD00000006;
              v14 = 1;
              v10 = 2;
              break;
            default:
              v17 = 0;
LABEL_36:
              v14 = 1;
              break;
          }
        }
        if (v9 != v13 && !v11)
        {
          if (v9)
            v21 = 0;
          else
            v21 = v15;
          switch(v21)
          {
            case -3:
              v17 = 0;
              *(_QWORD *)&v29 = 0x500000008;
              v22 = 10;
              goto LABEL_45;
            case -2:
              v17 = 0;
              v29 = xmmword_210B0A1E0;
              v14 = 1;
              v10 = 4;
              break;
            case -1:
              v17 = 0;
              v29 = xmmword_210B0A1D0;
              v30 = 0xA00000005;
              v14 = 1;
              v10 = 6;
              break;
            case 0:
              v17 = 0;
              LODWORD(v29) = 12;
              v10 = 1;
              goto LABEL_43;
            case 1:
              v17 = 0;
              v29 = xmmword_210B0A1C0;
              LODWORD(v30) = 13;
              v14 = 1;
              v10 = 5;
              break;
            case 2:
              v17 = 0;
              *(_QWORD *)&v29 = 0x60000000CLL;
              v22 = 13;
LABEL_45:
              DWORD2(v29) = v22;
              v14 = 1;
              v10 = 3;
              break;
            case 3:
              v17 = 0;
              *(_QWORD *)&v29 = 0xD00000006;
              v14 = 1;
              v10 = 2;
              break;
            default:
              v17 = 0;
LABEL_43:
              v14 = 1;
              break;
          }
        }
        v23 = 0;
        if (v8)
        {
          if (!v12)
            goto LABEL_54;
LABEL_49:
          v24 = v12 >= v8 ? v8 : v12;
          v8 -= v24;
          if (v8)
          {
            v12 -= v24;
LABEL_54:
            while (v15)
            {
              if (v14)
                v25 = *((_DWORD *)this + 236) >> (v15 > 0);
              else
                v25 = 0;
              v23 += v25;
              v26 = *((_DWORD *)&v29 + v17);
              if (v17 + 1 < v10)
                ++v17;
              else
                v17 = 0;
              v14 = (v26 >> 2) & 1;
              v12 += (*((_DWORD *)this + 236) >> (v15 > 0)) & ((int)(v26 << 28) >> 31);
              if (v12)
                goto LABEL_49;
            }
            v23 = v8;
          }
        }
        result = 0;
        *((_DWORD *)__dst + 1) = v23;
      }
      else
      {
        return 4294956429;
      }
    }
  }
  else if (a2 == 21)
  {
    result = 0;
    *(_DWORD *)__dst = *((_DWORD *)this + 222);
  }
  else if (a2 == 49)
  {
    result = 0;
    *(_OWORD *)__dst = *(_OWORD *)((char *)this + 872);
  }
  return result;
}

uint64_t AUSimpleTime::SetProperty(AUSimpleTime *this, int a2, int a3, unsigned int a4, char *__src, unsigned int a6)
{
  uint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int16 v13;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 3801:
      v8 = __src[217];
      v12 = *(_DWORD *)(__src + 218);
      v13 = *((_WORD *)__src + 111);
      v9 = *((_QWORD *)__src + 28);
      v10 = *(_OWORD *)(__src + 232);
      v11 = *((_QWORD *)__src + 31);
      memmove((char *)this + 528, __src, 0xD9uLL);
      result = 0;
      *((_BYTE *)this + 745) = v8;
      *(_DWORD *)((char *)this + 746) = v12;
      *((_WORD *)this + 375) = v13;
      *((_QWORD *)this + 94) = v9;
      *(_OWORD *)((char *)this + 760) = v10;
      *((_BYTE *)this + 776) = v11;
      *((_BYTE *)this + 784) = 0;
      return result;
    case 49:
      if (a6 < 0x10)
        return 4294956445;
      result = 0;
      *(_OWORD *)((char *)this + 872) = *(_OWORD *)__src;
      break;
    case 21:
      if (a6 >= 4)
      {
        result = 0;
        *((_DWORD *)this + 222) = *(_DWORD *)__src;
        return result;
      }
      return 4294956445;
    default:
      return 4294956417;
  }
  return result;
}

uint64_t AUSimpleTime::SetParameter(AUSimpleTime *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  float v7;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  v7 = 0.0;
  if (!(a3 | a2))
  {
    if (a5 >= 0.58333)
    {
      if (a5 >= 0.73333)
      {
        if (a5 >= 0.9)
        {
          if (a5 >= 1.125)
          {
            if (a5 >= 1.375)
            {
              if (a5 >= 1.75)
              {
                *((_DWORD *)this + 233) = 3;
                v7 = 2.0;
              }
              else
              {
                *((_DWORD *)this + 233) = 2;
                v7 = 1.5;
              }
            }
            else
            {
              *((_DWORD *)this + 233) = 1;
              v7 = 1.25;
            }
          }
          else
          {
            *((_DWORD *)this + 233) = 0;
            v7 = 1.0;
          }
        }
        else
        {
          *((_DWORD *)this + 233) = -1;
          v7 = 0.8;
        }
      }
      else
      {
        *((_DWORD *)this + 233) = -2;
        v7 = 0.66667;
      }
    }
    else
    {
      *((_DWORD *)this + 233) = -3;
      v7 = 0.5;
    }
  }
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, v7, 0);
  return 0;
}

uint64_t AUSimpleTime::CanScheduleParameters(AUSimpleTime *this)
{
  return 0;
}

uint64_t AUSimpleTime::Render(AUSimpleTime *this, unsigned int *a2, AudioTimeStamp *a3, unsigned int a4)
{
  AUSimpleTime *v5;
  uint64_t Element;
  __n128 v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  int v30;
  ausdk::AUBufferList *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t BufferList;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  AUSimpleTime *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  char *v46;
  char *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  signed int v77;
  unint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  int *v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  const void *v104;
  char *v105;
  uint64_t v106;
  float *v107;
  float *v108;
  unint64_t v109;
  uint64_t v110;
  float *v111;
  float *v112;
  float v113;
  float v114;
  float *v115;
  float *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  float *v121;
  uint64_t v122;
  float v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  unint64_t v130;
  int *v131;
  _DWORD *v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  size_t v149;
  const void *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  uint64_t v158;
  float *v159;
  float *v160;
  float *v161;
  float *v162;
  uint64_t v163;
  float v164;
  float v165;
  unint64_t v166;
  float v167;
  float v168;
  float v169;
  float *v170;
  unint64_t v171;
  float v172;
  unint64_t v173;
  float v174;
  float v175;
  float *v176;
  unint64_t v177;
  float v178;
  int *v179;
  unint64_t v180;
  uint64_t v181;
  int *v182;
  int *v183;
  unint64_t v184;
  _DWORD *v185;
  int *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  int *v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  const void *v204;
  uint64_t v205;
  int i;
  uint64_t v207;
  const void *v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  void (*v212)(_QWORD, AudioTimeStamp *, __n128, double);
  double v213;
  ausdk::AUScope *v214;
  uint64_t v215;
  _BOOL4 v216;
  uint64_t v217;
  float *v218;
  char v220;
  const AudioTimeStamp *v221;
  ausdk::AUScope *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  unint64_t v228;
  unsigned int __n;
  size_t __na;
  ausdk::AUBufferList *v231;
  unsigned int v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238[2];
  __int128 v239;
  __int128 v240;
  __int128 v241;

  v5 = this;
  v222 = (AUSimpleTime *)((char *)this + 128);
  Element = ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 128), 0);
  v217 = (uint64_t)v5 + 528;
  v218 = (float *)((char *)v5 + 940);
  AUTimestampGenerator::State::AddOutputTime((uint64_t)v5 + 528, (uint64_t)v5 + 528, (__int128 *)a3, 0.0, *(double *)(Element + 80), 1.0 / *((float *)v5 + 235));
  v8 = *((_DWORD *)v5 + 233);
  if (v8 != *((_DWORD *)v5 + 234) && !*((_DWORD *)v5 + 231))
  {
    *((_DWORD *)v5 + 234) = v8;
    AUSimpleTime::RateChanged((_DWORD *)v5 + 230, (uint64_t)v5 + 896, v218, (_DWORD *)v5 + 231, (_BYTE *)v5 + 928, v8, *((_DWORD *)v5 + 223));
  }
  v9 = *((_DWORD *)v5 + 222);
  if (v9 != *((_DWORD *)v5 + 223) && !*((_DWORD *)v5 + 231))
  {
    *((_DWORD *)v5 + 223) = v9;
    AUSimpleTime::RateChanged((_DWORD *)v5 + 230, (uint64_t)v5 + 896, v218, (_DWORD *)v5 + 231, (_BYTE *)v5 + 928, *((_DWORD *)v5 + 234), v9);
  }
  if (!a4)
  {
LABEL_174:
    v7.n128_u64[0] = *((_QWORD *)v5 + 107);
    v211 = v7.n128_f64[0] + (float)(*((float *)v5 + 235) * (float)a4);
    *((double *)v5 + 107) = v211;
    v212 = (void (*)(_QWORD, AudioTimeStamp *, __n128, double))*((_QWORD *)v5 + 109);
    if (v212)
    {
      v213 = *((double *)v5 + 108);
      if (v7.n128_f64[0] < v213)
        v7.n128_u64[0] = *((_QWORD *)v5 + 108);
      if (v211 < v213)
        v211 = *((double *)v5 + 108);
      v212(*((_QWORD *)v5 + 110), a3, v7, v211 - v7.n128_f64[0]);
    }
    return 0;
  }
  v10 = 0;
  v214 = (AUSimpleTime *)((char *)v5 + 80);
  v224 = a4;
  v221 = a3;
  while (1)
  {
    v11 = *((_DWORD *)v5 + 245);
    if (v11)
    {
      if (v11 >= v224)
        v12 = v224;
      else
        v12 = v11;
      v13 = *(_OWORD *)&a3->mRateScalar;
      *(_OWORD *)v238 = *(_OWORD *)&a3->mSampleTime;
      v239 = v13;
      v14 = *(_OWORD *)&a3->mSMPTETime.mHours;
      v240 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      v241 = v14;
      v15 = ausdk::AUScope::SafeGetElement(v222, 0);
      v16 = *(double *)(v15 + 80);
      v17 = *(_DWORD *)(v15 + 108);
      v18 = *(_DWORD *)(v15 + 92);
      *(double *)v238 = *(double *)v238 + (double)v10;
      AUTimestampGenerator::State::AddOutputTime(v217, v217, (__int128 *)v238, (double)v12, v16, 1.0 / *v218);
      v225 = v10;
      if ((v18 & 0x20) != 0)
      {
        if (v17)
        {
          v30 = 0;
          v31 = (ausdk::AUBufferList *)(v15 + 144);
          v231 = (ausdk::AUBufferList *)(v15 + 144);
          v32 = 40;
          v33 = v225;
          v227 = v17;
          do
          {
            BufferList = ausdk::AUBufferList::GetBufferList(v31);
            if ((*(_BYTE *)(v15 + 92) & 0x20) != 0)
              v35 = *(_QWORD *)(BufferList + 16 * v30 + 16);
            else
              v35 = *(_QWORD *)(BufferList + 16) + 4 * v30;
            v36 = *(char **)(*((_QWORD *)v5 + 120) + v32);
            v37 = *((unsigned int *)v5 + 243);
            v38 = *((unsigned int *)v5 + 242);
            v39 = (char *)(v35 + 4 * v33);
            if (v37 + v12 <= v38)
            {
              v47 = &v36[4 * v37];
              v46 = (char *)(v35 + 4 * v33);
              v45 = 4 * v12;
            }
            else
            {
              v40 = v38 - v37;
              v41 = v33;
              v42 = v5;
              v43 = v15;
              v44 = v12 - (v38 - v37);
              memcpy(v39, &v36[4 * v37], 4 * (v38 - v37));
              v45 = 4 * v44;
              v15 = v43;
              v5 = v42;
              v33 = v41;
              v46 = &v39[4 * v40];
              v17 = v227;
              v31 = v231;
              v47 = v36;
            }
            memcpy(v46, v47, v45);
            ++v30;
            v32 += 16;
          }
          while (v17 != v30);
        }
      }
      else
      {
        v19 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
        v20 = *(char **)(*((_QWORD *)v5 + 120) + 40);
        v21 = (2 * *((_DWORD *)v5 + 243));
        v22 = (2 * *((_DWORD *)v5 + 242));
        v23 = *(_QWORD *)(v19 + 16) + 8 * v10;
        v24 = (2 * v12);
        if (v21 + v24 <= v22)
        {
          v27 = 4 * v24;
          v29 = &v20[4 * v21];
          v28 = (void *)(*(_QWORD *)(v19 + 16) + 8 * v10);
        }
        else
        {
          v25 = v22 - v21;
          v26 = v24 - (v22 - v21);
          memcpy((void *)(*(_QWORD *)(v19 + 16) + 8 * v10), &v20[4 * v21], 4 * (v22 - v21));
          v27 = 4 * v26;
          v28 = (void *)(v23 + 4 * v25);
          v29 = v20;
        }
        memcpy(v28, v29, v27);
      }
      v48 = *((_DWORD *)v5 + 243) + v12;
      *((_DWORD *)v5 + 243) = v48;
      v49 = *((_DWORD *)v5 + 242);
      v50 = v48 >= v49;
      v51 = v48 - v49;
      if (v50)
        *((_DWORD *)v5 + 243) = v51;
      v52 = *((_DWORD *)v5 + 245);
      v50 = v52 >= v12;
      v53 = v52 - v12;
      if (!v50)
        return 4294956422;
      *((_DWORD *)v5 + 245) = v53;
      a3 = (AudioTimeStamp *)v221;
      if ((_DWORD)v224 == (_DWORD)v12)
        goto LABEL_174;
      v224 = (v224 - v12);
      v10 = v12 + v225;
    }
    v54 = *((_DWORD *)v5 + 234);
    if (!v54)
    {
      v234 = *(_OWORD *)&a3->mSampleTime;
      v235 = *(_OWORD *)&a3->mRateScalar;
      v236 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      v237 = *(_OWORD *)&a3->mSMPTETime.mHours;
      result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v224);
      if ((_DWORD)result)
        return result;
      v199 = ausdk::AUScope::SafeGetElement(v222, 0);
      v200 = *(double *)(v199 + 80);
      v238[1] = *((_QWORD *)&v234 + 1);
      v239 = v235;
      v240 = v236;
      v241 = v237;
      *(double *)v238 = *(double *)&v234 + (double)v10;
      AUTimestampGenerator::State::AddOutputTime(v217, v217, (__int128 *)v238, (double)v224, v200, 1.0 / *v218);
      v201 = ausdk::AUScope::SafeGetElement(v214, 0);
      v202 = v201;
      v203 = *(_DWORD *)(v201 + 108);
      if ((*(_BYTE *)(v201 + 92) & 0x20) != 0)
      {
        if (v203)
        {
          for (i = 0; i != v203; ++i)
          {
            v207 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v202 + 144));
            if ((*(_BYTE *)(v202 + 92) & 0x20) != 0)
              v208 = *(const void **)(v207 + 16 * i + 16);
            else
              v208 = (const void *)(*(_QWORD *)(v207 + 16) + 4 * i);
            v209 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v199 + 144));
            if ((*(_BYTE *)(v199 + 92) & 0x20) != 0)
              v210 = *(_QWORD *)(v209 + 16 * i + 16);
            else
              v210 = *(_QWORD *)(v209 + 16) + 4 * i;
            memcpy((void *)(v210 + 4 * v10), v208, 4 * v224);
          }
          a3 = (AudioTimeStamp *)v221;
        }
      }
      else
      {
        v204 = *(const void **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v201 + 144)) + 16);
        v205 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v199 + 144));
        memcpy((void *)(*(_QWORD *)(v205 + 16) + 4 * v203 * v10), v204, 4 * (v203 * v224));
      }
      goto LABEL_174;
    }
    v226 = v10;
    if (!*((_BYTE *)v5 + 928))
      goto LABEL_63;
    v55 = *((_DWORD *)v5 + 236) >> (v54 > 0);
    v56 = ausdk::AUScope::SafeGetElement(v214, 0);
    v57 = *(_DWORD *)(v56 + 108);
    v58 = *((_DWORD *)v5 + 84);
    if (v57 != 2 || (*(_DWORD *)(v56 + 92) & 0x20) != 0)
    {
      if (v55)
      {
        v60 = 0;
        v232 = v55;
        __n = *((_DWORD *)v5 + 84);
        while (1)
        {
          v61 = v58 >= v55 - v60 ? v55 - v60 : v58;
          result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v61);
          if ((_DWORD)result)
            return result;
          if (v57)
          {
            v63 = 0;
            v64 = 40;
            do
            {
              v65 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v56 + 144));
              if ((*(_BYTE *)(v56 + 92) & 0x20) != 0)
                v66 = *(const void **)(v65 + 16 * v63 + 16);
              else
                v66 = (const void *)(*(_QWORD *)(v65 + 16) + 4 * v63);
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)v5 + 119) + v64) + 4 * v60), v66, 4 * v61);
              ++v63;
              v64 += 16;
            }
            while (v57 != v63);
          }
          v60 += v61;
          v55 = v232;
          v58 = __n;
          if (v60 >= v232)
            goto LABEL_62;
        }
      }
      goto LABEL_62;
    }
    if (v55)
      break;
LABEL_62:
    *((_BYTE *)v5 + 928) = 0;
LABEL_63:
    v70 = ausdk::AUScope::SafeGetElement(v222, 0);
    v71 = *(unsigned int *)(v70 + 108);
    v72 = *(_DWORD *)(v70 + 92);
    v73 = *((unsigned int *)v5 + 231);
    v74 = *((_DWORD *)v5 + v73 + 224);
    if ((v73 + 1) < *((_DWORD *)v5 + 230))
      v75 = v73 + 1;
    else
      v75 = 0;
    *((_DWORD *)v5 + 231) = v75;
    v76 = *((unsigned int *)v5 + 244);
    v77 = *((_DWORD *)v5 + 234);
    v78 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
    v220 = v74;
    v79 = v74 & 3;
    v233 = v76;
    if ((v79 - 1) >= 2)
    {
      if (!v79)
      {
        if ((v72 & 0x20) != 0)
        {
          if ((_DWORD)v71)
          {
            v141 = 0;
            v142 = 16 * v71;
            v143 = v76 + v78;
            do
            {
              v144 = *(char **)(*((_QWORD *)v5 + 120) + v141 + 40);
              v145 = *((unsigned int *)v5 + 242);
              v146 = *(_QWORD *)(*((_QWORD *)v5 + 119) + v141 + 40);
              if (v143 <= v145)
              {
                v151 = &v144[4 * v76];
                v150 = *(const void **)(*((_QWORD *)v5 + 119) + v141 + 40);
                v149 = 4 * v78;
              }
              else
              {
                v147 = v145 - v76;
                v148 = v78 - (v145 - v76);
                memcpy(&v144[4 * v76], *(const void **)(*((_QWORD *)v5 + 119) + v141 + 40), 4 * (v145 - v76));
                v149 = 4 * v148;
                v150 = (const void *)(v146 + 4 * v147);
                v151 = v144;
              }
              memcpy(v151, v150, v149);
              v141 += 16;
              v76 = v233;
            }
            while (v142 != v141);
          }
        }
        else
        {
          v96 = *(char **)(*((_QWORD *)v5 + 120) + 40);
          v97 = (v76 * v71);
          v98 = (*((_DWORD *)v5 + 242) * v71);
          v99 = *(_QWORD *)(*((_QWORD *)v5 + 119) + 40);
          v100 = (v78 * v71);
          if (v100 + v97 <= v98)
          {
            v103 = 4 * v100;
            v105 = &v96[4 * v97];
            v104 = *(const void **)(*((_QWORD *)v5 + 119) + 40);
          }
          else
          {
            v101 = v98 - v97;
            v102 = v100 - (v98 - v97);
            memcpy(&v96[4 * v97], *(const void **)(*((_QWORD *)v5 + 119) + 40), 4 * (v98 - v97));
            v103 = 4 * v102;
            v104 = (const void *)(v99 + 4 * v101);
            v105 = v96;
          }
          memcpy(v105, v104, v103);
        }
      }
      goto LABEL_153;
    }
    v80 = v79 == 2;
    v81 = v77 >> 31;
    if ((v72 & 1) == 0)
    {
      if ((_DWORD)v71 != 2)
      {
        if ((_DWORD)v71)
        {
          v125 = 0;
          if (v79 == 2)
            v126 = -(uint64_t)(0x100000000 / v78);
          else
            v126 = 0x100000000 / v78;
          v228 = (unint64_t)(v79 == 2) << 32;
          __na = v126;
          v127 = v76 + v78;
          v128 = 16 * v71;
          v216 = v79 == 2;
          v215 = 16 * v71;
          do
          {
            v129 = *(_DWORD **)(*((_QWORD *)v5 + 120) + v125 + 40);
            v130 = *((unsigned int *)v5 + 242);
            v131 = *(int **)(*((_QWORD *)v5 + 119) + v125 + 40);
            v238[0] = v228;
            v132 = &v129[v76];
            if (v127 <= v130)
            {
              v140 = (_DWORD)v81 == v80;
              v137 = v131;
              v138 = v78;
              v139 = __na;
            }
            else
            {
              v133 = (_DWORD)v81 == v80;
              v134 = v127;
              v135 = v81;
              v136 = v130 - v76;
              v223 = v78 - (v130 - v76);
              FadeToRingMonoLoop_I(v132, v131, v130 - v76, v238, __na, v133);
              v137 = &v131[v136];
              v81 = v135;
              v127 = v134;
              v128 = v215;
              v132 = v129;
              v138 = v223;
              v139 = __na;
              v140 = v133;
              v80 = v216;
            }
            FadeToRingMonoLoop_I(v132, v137, v138, v238, v139, v140);
            v125 += 16;
            v76 = v233;
          }
          while (v128 != v125);
        }
        goto LABEL_153;
      }
      v82 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
      v83 = *((_QWORD *)v5 + 120);
      v84 = *(_DWORD **)(v83 + 40);
      if ((v72 & 0x20) != 0)
      {
        v179 = *(int **)(v83 + 56);
        v180 = *((unsigned int *)v5 + 242);
        v181 = *((_QWORD *)v5 + 119);
        v182 = *(int **)(v181 + 40);
        v183 = *(int **)(v181 + 56);
        if (v79 == 2)
          v184 = -(uint64_t)(0x100000000 / v82);
        else
          v184 = 0x100000000 / v82;
        v238[0] = (unint64_t)(v79 == 2) << 32;
        v185 = &v84[v76];
        v186 = &v179[v76];
        if (v76 + (unint64_t)v82 <= v180)
        {
          v194 = (_DWORD)v81 == v80;
          v190 = v182;
          v191 = v183;
          v192 = v82;
          v193 = v184;
        }
        else
        {
          v187 = (_DWORD)v81 == v80;
          v188 = v180 - v76;
          v189 = v82 - (v180 - v76);
          FadeToRingStereoNonInterleavedLoop_I(v185, v186, v182, v183, v180 - v76, v238, v184, v187);
          v190 = &v182[v188];
          v191 = &v183[v188];
          v185 = v84;
          v186 = v179;
          v192 = v189;
          v193 = v184;
          v194 = v187;
        }
        FadeToRingStereoNonInterleavedLoop_I(v185, v186, v190, v191, v192, v238, v193, v194);
      }
      else
      {
        v85 = *((unsigned int *)v5 + 242);
        v86 = *(int **)(*((_QWORD *)v5 + 119) + 40);
        if (v79 == 2)
          v87 = -(uint64_t)(0x100000000 / v82);
        else
          v87 = 0x100000000 / v82;
        v238[0] = (unint64_t)(v79 == 2) << 32;
        v88 = (uint64_t)&v84[2 * v76];
        if (v76 + (unint64_t)v82 <= v85)
        {
          v95 = (_DWORD)v81 == v80;
          v92 = v86;
          v93 = v82;
          v94 = v87;
        }
        else
        {
          v89 = (_DWORD)v81 == v80;
          v90 = v85 - v76;
          v91 = v82 - (v85 - v76);
          FadeToRingStereoInterleavedLoop_I(v88, v86, v85 - v76, v238, v87, v89);
          v92 = &v86[2 * v90];
          v88 = (uint64_t)v84;
          v93 = v91;
          v94 = v87;
          v95 = v89;
        }
        FadeToRingStereoInterleavedLoop_I(v88, v92, v93, v238, v94, v95);
      }
      goto LABEL_152;
    }
    if ((_DWORD)v71 == 2)
    {
      v106 = *((_QWORD *)v5 + 120);
      v107 = *(float **)(v106 + 40);
      v82 = (*((_DWORD *)v5 + 236) >> (v77 > 0));
      v108 = *(float **)(v106 + 56);
      v109 = *((unsigned int *)v5 + 242);
      v110 = *((_QWORD *)v5 + 119);
      v111 = *(float **)(v110 + 40);
      v112 = *(float **)(v110 + 56);
      if (v79 == 2)
        v113 = 1.0;
      else
        v113 = 0.0;
      if (v79 == 2)
        v114 = -(float)(1.0 / (float)v82);
      else
        v114 = 1.0 / (float)v82;
      *(float *)v238 = v113;
      v115 = &v107[v76];
      v116 = &v108[v76];
      if (v76 + (unint64_t)v82 <= v109)
      {
        v124 = (_DWORD)v81 == v80;
        v120 = v111;
        v121 = v112;
        v122 = v82;
        v123 = v114;
      }
      else
      {
        v117 = (_DWORD)v81 == v80;
        v118 = v109 - v76;
        v119 = v82 - (v109 - v76);
        FadeToRingStereoNonInterleavedLoop_F(v115, v116, v111, v112, v109 - v76, (float *)v238, v114, v117);
        v120 = &v111[v118];
        v121 = &v112[v118];
        v115 = v107;
        v116 = v108;
        v122 = v119;
        v123 = v114;
        v124 = v117;
      }
      FadeToRingStereoNonInterleavedLoop_F(v115, v116, v120, v121, v122, (float *)v238, v123, v124);
LABEL_152:
      LODWORD(v78) = v82;
      goto LABEL_153;
    }
    if ((_DWORD)v71)
    {
      v152 = 0;
      v153 = *((_QWORD *)v5 + 120);
      v154 = *((unsigned int *)v5 + 242);
      v155 = *((_QWORD *)v5 + 119);
      v156 = 1.0 / (float)v78;
      if (v79 == 2)
        v157 = 1.0;
      else
        v157 = 0.0;
      if (v79 == 2)
        v156 = -v156;
      v158 = v154 - v76;
      do
      {
        v159 = *(float **)(v153 + 16 * v152 + 40);
        v160 = *(float **)(v155 + 16 * v152 + 40);
        v161 = &v159[v76];
        if (v76 + (unint64_t)v78 <= v154)
        {
          if ((_DWORD)v81 == v80)
          {
            if ((_DWORD)v78)
            {
              v166 = v78;
              v167 = v157;
              do
              {
                v168 = *v160++;
                *v161 = *v161 + (float)(v168 * v167);
                ++v161;
                v167 = v156 + v167;
                --v166;
              }
              while (v166);
            }
          }
          else
          {
            v173 = v78;
            v174 = v157;
            if ((_DWORD)v78)
            {
              do
              {
                v175 = *v160++;
                *v161++ = v174 * v175;
                v174 = v156 + v174;
                --v173;
              }
              while (v173);
            }
          }
          goto LABEL_137;
        }
        v162 = *(float **)(v155 + 16 * v152 + 40);
        v163 = v154 - v76;
        v164 = v157;
        if ((_DWORD)v81 == v80)
        {
          if ((_DWORD)v154 == (_DWORD)v76)
          {
            v164 = v157;
            goto LABEL_127;
          }
          do
          {
            v165 = *v162++;
            *v161 = *v161 + (float)(v165 * v164);
            ++v161;
            v164 = v156 + v164;
            --v163;
          }
          while (v163);
        }
        else
        {
          if ((_DWORD)v154 == (_DWORD)v76)
          {
            v164 = v157;
LABEL_134:
            if (v78 != v158)
            {
              v176 = &v160[v158];
              v177 = v78 - (v154 - v76);
              do
              {
                v178 = *v176++;
                *v159++ = v164 * v178;
                v164 = v156 + v164;
                --v177;
              }
              while (v177);
            }
            goto LABEL_137;
          }
          do
          {
            v169 = *v162++;
            *v161++ = v164 * v169;
            v164 = v156 + v164;
            --v163;
          }
          while (v163);
        }
        if ((_DWORD)v81 != v80)
          goto LABEL_134;
LABEL_127:
        if (v78 != v158)
        {
          v170 = &v160[v158];
          v171 = v78 - (v154 - v76);
          do
          {
            v172 = *v170++;
            *v159 = *v159 + (float)(v172 * v164);
            ++v159;
            v164 = v156 + v164;
            --v171;
          }
          while (v171);
        }
LABEL_137:
        ++v152;
      }
      while (v152 != v71);
    }
LABEL_153:
    if ((v220 & 4) != 0)
      *((_BYTE *)v5 + 928) = 1;
    a3 = (AudioTimeStamp *)v221;
    v10 = v226;
    if ((v220 & 8) != 0)
    {
      v195 = *((_DWORD *)v5 + 244) + v78;
      *((_DWORD *)v5 + 244) = v195;
      v196 = *((_DWORD *)v5 + 242);
      v50 = v195 >= v196;
      v197 = v195 - v196;
      if (v50)
        *((_DWORD *)v5 + 244) = v197;
      v198 = *((_DWORD *)v5 + 245) + v78;
      *((_DWORD *)v5 + 245) = v198;
      if (v196 < v198)
        return 4294956422;
    }
  }
  v67 = 0;
  while (1)
  {
    v68 = v58 >= v55 - v67 ? v55 - v67 : v58;
    result = AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(v5, v68);
    if ((_DWORD)result)
      return result;
    v69 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v56 + 144));
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v5 + 119) + 40) + 8 * v67), *(const void **)(v69 + 16), 4 * (2 * v68));
    v67 += v68;
    if (v67 >= v55)
      goto LABEL_62;
  }
}

uint64_t AUSimpleTime::GetParameterList(AUSimpleTime *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2)
  {
    a3 = a4;
LABEL_4:
    *a3 = 0;
    return 0;
  }
  *a4 = 1;
  if (a3)
    goto LABEL_4;
  return 0;
}

double AUSimpleTime::GetParameterInfo(AUSimpleTime *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v5;
  double result;

  buffer->flags = -1073741824;
  if (!(a3 | a2))
  {
    v5 = (const __CFString *)kRate_Name;
    buffer->cfNameString = (CFStringRef)kRate_Name;
    buffer->flags = -939524096;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Rate;
    result = 2.00000047;
    *(_QWORD *)&buffer->minValue = 0x400000003F000000;
    buffer->defaultValue = 1.0;
  }
  return result;
}

uint64_t AUSimpleTime::GetParameterValueStrings(AUSimpleTime *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v6;
  _OWORD v7[3];
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a3 | a2)
    return 4294956417;
  if (!a4)
    return 0;
  v7[0] = xmmword_24CA96980;
  v7[1] = *(_OWORD *)&off_24CA96990;
  v7[2] = xmmword_24CA969A0;
  v8 = CFSTR("Very Fast");
  v6 = CFArrayCreate(0, (const void **)v7, 7, 0);
  result = 0;
  *a4 = v6;
  return result;
}

double AUSimpleTime::GetTailTime(AUSimpleTime *this)
{
  return 0.0;
}

uint64_t AUSimpleTime::SupportsTail(AUSimpleTime *this)
{
  return 1;
}

BOOL AUSimpleTime::StreamFormatWritable(AUSimpleTime *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUSimpleTime::SupportedNumChannels(AUSimpleTime *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 1;
}

BOOL AUSimpleTime::ValidFormat(AUSimpleTime *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  BOOL v7;
  int v8;

  v8 = 0;
  v7 = 0;
  CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v8, &v7);
  result = 0;
  if ((v8 & 0xFFFFFFFD) == 1)
  {
    result = 1;
    if (v7 && (v8 == 1 || a4->mChannelsPerFrame != 2))
      return 0;
  }
  return result;
}

uint64_t AUSimpleTime::Version(AUSimpleTime *this)
{
  return 0x10000;
}

_DWORD *AUSimpleTime::RateChanged(_DWORD *result, uint64_t a2, float *a3, _DWORD *a4, _BYTE *a5, int a6, int a7)
{
  float v8;

  if (a7)
    a6 = 0;
  switch(a6)
  {
    case -3:
      *result = 3;
      *(_QWORD *)a2 = 0x500000008;
      *(_DWORD *)(a2 + 8) = 10;
      v8 = 0.5;
      goto LABEL_12;
    case -2:
      *result = 4;
      *(_OWORD *)a2 = xmmword_210B0A1E0;
      v8 = 0.66667;
      goto LABEL_12;
    case -1:
      *result = 6;
      *(_OWORD *)a2 = xmmword_210B0A1D0;
      v8 = 0.8;
      *(_QWORD *)(a2 + 16) = 0xA00000005;
      goto LABEL_12;
    case 0:
      *result = 1;
      *(_DWORD *)a2 = 12;
      v8 = 1.0;
      goto LABEL_12;
    case 1:
      *result = 5;
      *(_OWORD *)a2 = xmmword_210B0A1C0;
      *(_DWORD *)(a2 + 16) = 13;
      v8 = 1.25;
      goto LABEL_12;
    case 2:
      *result = 3;
      *(_QWORD *)a2 = 0x60000000CLL;
      *(_DWORD *)(a2 + 8) = 13;
      v8 = 1.5;
      goto LABEL_12;
    case 3:
      *result = 2;
      *(_QWORD *)a2 = 0xD00000006;
      v8 = 2.0;
LABEL_12:
      *a3 = v8;
      break;
    default:
      break;
  }
  *a4 = 0;
  *a5 = 1;
  return result;
}

float *FadeToRingStereoNonInterleavedLoop_F(float *result, float *a2, float *a3, float *a4, uint64_t a5, float *a6, float a7, char a8)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v8 = *a6;
  if ((a8 & 1) != 0)
  {
    for (; a5; --a5)
    {
      v9 = *a3++;
      *result = *result + (float)(v9 * v8);
      ++result;
      v10 = *a4++;
      *a2 = *a2 + (float)(v10 * v8);
      ++a2;
      v8 = v8 + a7;
    }
  }
  else
  {
    for (; a5; --a5)
    {
      v11 = *a3++;
      *result++ = v8 * v11;
      v12 = *a4++;
      *a2++ = v8 * v12;
      v8 = v8 + a7;
    }
  }
  *a6 = v8;
  return result;
}

uint64_t FadeToRingStereoInterleavedLoop_I(uint64_t result, int *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  int *v12;

  v6 = *a4;
  if ((a6 & 1) != 0)
  {
    if (a3)
    {
      v7 = v6 << 16;
      v8 = (_DWORD *)(result + 4);
      v9 = a2 + 1;
      v6 += a5 * a3;
      do
      {
        *(v8 - 1) += (unint64_t)(SHIDWORD(v7) * (uint64_t)*(v9 - 1)) >> 16;
        *v8 += (unint64_t)(SHIDWORD(v7) * (uint64_t)*v9) >> 16;
        v8 += 2;
        v7 += a5 << 16;
        v9 += 2;
        --a3;
      }
      while (a3);
    }
  }
  else if (a3)
  {
    v10 = v6 << 16;
    v11 = (_DWORD *)(result + 4);
    v12 = a2 + 1;
    v6 += a5 * a3;
    do
    {
      *(v11 - 1) = (unint64_t)(SHIDWORD(v10) * (uint64_t)*(v12 - 1)) >> 16;
      *v11 = (unint64_t)(SHIDWORD(v10) * (uint64_t)*v12) >> 16;
      v11 += 2;
      v10 += a5 << 16;
      v12 += 2;
      --a3;
    }
    while (a3);
  }
  *a4 = v6;
  return result;
}

_DWORD *FadeToRingStereoNonInterleavedLoop_I(_DWORD *result, int *a2, int *a3, int *a4, uint64_t a5, uint64_t *a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;

  v8 = *a6;
  if ((a8 & 1) != 0)
  {
    if (a5)
    {
      v9 = v8 << 16;
      v8 += a7 * a5;
      do
      {
        v10 = *a3++;
        *result++ += (unint64_t)(SHIDWORD(v9) * (uint64_t)v10) >> 16;
        v11 = *a4++;
        *a2++ += (unint64_t)(SHIDWORD(v9) * (uint64_t)v11) >> 16;
        v9 += a7 << 16;
        --a5;
      }
      while (a5);
    }
  }
  else if (a5)
  {
    v12 = v8 << 16;
    v8 += a7 * a5;
    do
    {
      v13 = *a3++;
      *result++ = (unint64_t)(SHIDWORD(v12) * (uint64_t)v13) >> 16;
      v14 = *a4++;
      *a2++ = (unint64_t)(SHIDWORD(v12) * (uint64_t)v14) >> 16;
      v12 += a7 << 16;
      --a5;
    }
    while (a5);
  }
  *a6 = v8;
  return result;
}

_DWORD *FadeToRingMonoLoop_I(_DWORD *result, int *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v6 = *a4;
  if ((a6 & 1) != 0)
  {
    if (a3)
    {
      v7 = v6 << 16;
      v6 += a5 * a3;
      do
      {
        v8 = *a2++;
        *result++ += (unint64_t)(SHIDWORD(v7) * (uint64_t)v8) >> 16;
        v7 += a5 << 16;
        --a3;
      }
      while (a3);
    }
  }
  else if (a3)
  {
    v9 = v6 << 16;
    v6 += a5 * a3;
    do
    {
      v10 = *a2++;
      *result++ = (unint64_t)(SHIDWORD(v9) * (uint64_t)v10) >> 16;
      v9 += a5 << 16;
      --a3;
    }
    while (a3);
  }
  *a4 = v6;
  return result;
}

uint64_t AUSimpleTime::PullInputOnceAndAdvanceTimeStamp(AUSimpleTime *this, uint64_t a2)
{
  ausdk::AUScope *v4;
  uint64_t Element;
  __n128 v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  ausdk::AUInputElement *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v4 = (AUSimpleTime *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUSimpleTime *)((char *)this + 80), 0);
  v6.n128_u64[0] = 0;
  AUTimestampGenerator::State::GenerateInputTime((__n128 *)this + 33, 0, v6, *(double *)(Element + 80));
  v9 = *v7;
  v8 = v7[1];
  v10 = v7[3];
  *(_OWORD *)((char *)this + 824) = v7[2];
  *(_OWORD *)((char *)this + 840) = v10;
  *(_OWORD *)((char *)this + 792) = v9;
  *(_OWORD *)((char *)this + 808) = v8;
  *((_DWORD *)this + 212) &= ~2u;
  if (*((double *)this + 107) < 0.0)
    *((_QWORD *)this + 107) = *((_QWORD *)this + 99);
  if (*((double *)this + 108) < 0.0)
    *((_QWORD *)this + 108) = *((_QWORD *)this + 99);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  v12 = ausdk::AUInputElement::PullInput(v11, &v15, (const AudioTimeStamp *)((char *)this + 792), 0, a2);
  v13 = __udivti3();
  *((double *)this + 99) = *((double *)this + 99) + (double)a2;
  *((_QWORD *)this + 100) += v13;
  *((double *)this + 90) = *((double *)this + 66) + (double)a2;
  return v12;
}

_QWORD *CADeprecated::CABufferList::New(CADeprecated::CABufferList *this, unsigned int a2, unsigned int a3, const char *a4)
{
  int v4;
  _QWORD *result;
  _QWORD *v6;

  v4 = (int)this;
  result = operator new(16 * this + 32);
  *result = "";
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    v6 = result + 4;
    do
    {
      *v6 = 1;
      v6[1] = 0;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *AUSimpleTimeFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x418uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUSimpleTime>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUSimpleTime>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

float Connection::Update(Connection *this, int a2, float result)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;

  if ((a2 - 4300) >= 3)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 56))(*((_QWORD *)this + 32));
    (*(void (**)(Connection *, uint64_t))(*(_QWORD *)this + 40))(this, v4);
    v5 = *(_DWORD *)(*((_QWORD *)this + 32) + 112);
    *((_DWORD *)this + 70) = v5;
    *((_QWORD *)this + 36) = Transform::GetFunction(v5);
    v6 = *((_QWORD *)this + 32);
    *((_BYTE *)this + 296) = *(_BYTE *)(v6 + 108);
    v8 = *(float *)(v6 + 100);
    v7 = *(float *)(v6 + 104);
    v9 = *(_DWORD *)(v6 + 124);
    if (v8 == (float)-v7)
    {
      if (v9 == 1)
      {
        *((_BYTE *)this + 297) = 0;
        *((_BYTE *)this + 298) = *(_BYTE *)(v6 + 120);
LABEL_9:
        *((float *)this + 67) = v8;
        result = v7 - v8;
        *((float *)this + 68) = result;
        return result;
      }
      *((_BYTE *)this + 297) = 1;
      *((_BYTE *)this + 298) = *(_BYTE *)(v6 + 120);
    }
    else
    {
      *((_BYTE *)this + 298) = *(_BYTE *)(v6 + 120);
      *((_BYTE *)this + 297) = v9 == 2;
      if (v9 != 2)
        goto LABEL_9;
    }
    v8 = 0.0;
    goto LABEL_9;
  }
  return result;
}

uint64_t Connection::GetRunFrameCount(Connection *this, uint64_t a2)
{
  return a2;
}

void `non-virtual thunk to'Connection::~Connection(Connection *this)
{
  Connection::~Connection((Connection *)((char *)this - 152));
}

{
  Connection::~Connection((Connection *)((char *)this - 152));
}

uint64_t `non-virtual thunk to'Connection::GetRunFrameCount(Connection *this, uint64_t a2)
{
  return a2;
}

void `non-virtual thunk to'Connection::RegisterInput(Connection *this, int a2)
{
  Connection::RegisterInput((Connection *)((char *)this - 152), a2);
}

void `virtual thunk to'Connection::~Connection(Connection *this)
{
  Connection::~Connection((Connection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  Connection::~Connection((Connection *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t ControlInputInstance<Connection,&Connection::HandleScaleInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

float ControlInputInstance<Connection,&Connection::HandleScaleInput>::Set(uint64_t a1, float a2)
{
  uint64_t v3;
  float result;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2 < 0.0 || a2 > 1.0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "Connection.cpp";
      v7 = 1024;
      v8 = 133;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: Connection scaling input must be normalized!", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v3 + 298))
    a2 = 1.0 - a2;
  result = *(float *)(v3 + 276) * a2;
  *(float *)(v3 + 276) = result;
  *(_BYTE *)(v3 + 248) = 1;
  return result;
}

float ConvexTransform(float a1)
{
  float v1;
  float v2;

  v1 = 0.0;
  if (a1 != 0.0)
    v1 = (float)(log10f(a1) * 0.41667) + 1.0;
  v2 = 1.0;
  if (v1 <= 1.0)
    v2 = v1;
  return fmaxf(v2, 0.0);
}

float SwitchTransform(float a1)
{
  BOOL v1;
  float result;

  v1 = a1 < 0.5;
  result = 1.0;
  if (v1)
    return 0.0;
  return result;
}

void CustomTransform(float a1)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;

  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v1 = 136315394;
    v2 = "Transform.cpp";
    v3 = 1024;
    v4 = 43;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Custom Transform Not Implemented!", (uint8_t *)&v1, 0x12u);
  }
  __break(1u);
}

void CustomTransform::doTransform(CustomTransform *this, float a2)
{
  int v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == 3)
  {
    if (a2 != 0.0)
      log10f(a2);
  }
  else if (v2 == 2)
  {
    if (a2 != 1.0)
      log10f(1.0 - a2);
  }
  else if (v2 != 1)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v3 = 136315394;
      v4 = "Transform.cpp";
      v5 = 1024;
      v6 = 77;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  Custom transform type not supported!", (uint8_t *)&v3, 0x12u);
    }
    __break(1u);
  }
}

void std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,ParameterMapManager::ControlMap>,ltparam,true>,std::allocator<std::__value_type<unsigned int const,ParameterMapManager::ControlMap>>>::destroy(a1[1]);
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
    operator delete(a1);
  }
}

uint64_t ParameterMapManager::AddMapping(uint64_t **a1, unsigned int a2, float *a3)
{
  float v6;
  float v7;
  BOOL v8;
  float v9;
  float v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  float v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v32;
  uint8_t buf[4];
  const char *v34;
  unint64_t v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = a3[1];
  v6 = a3[2];
  v8 = v7 != 0.0 && v6 == 0.0;
  v9 = 1.0;
  if (!v8)
    v9 = 0.0;
  if (v6 != (float)-v7 || v6 == 0.0)
    v11 = v9;
  else
    v11 = 0.5;
  v12 = (char *)operator new(0xB0uLL);
  v12[8] = 1;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_DWORD *)v12 + 36) = 0;
  *(_QWORD *)v12 = off_24CA91680;
  *((_QWORD *)v12 + 21) = &unk_24CA91718;
  *((_DWORD *)v12 + 38) = a2;
  *(_QWORD *)(v12 + 156) = 0x3F80000000000000;
  *((float *)v12 + 41) = v11;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95A40;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  v32 = v13;
  v15 = *a3;
  v16 = *((_DWORD *)a3 + 1);
  v17 = *((_DWORD *)a3 + 2);
  v18 = *((_DWORD *)a3 + 3);
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  *(_DWORD *)buf = a2;
  *((float *)&v34 + 1) = v15;
  v35 = __PAIR64__(v17, v16);
  v36 = v18;
  *(_QWORD *)&v37 = v12;
  *((_QWORD *)&v37 + 1) = v13;
  v20 = operator new(0x48uLL);
  v21 = (uint64_t *)(a1 + 1);
  v22 = a1[1];
  *(_OWORD *)(v20 + 7) = v37;
  *((_DWORD *)v20 + 8) = a2;
  *((float *)v20 + 10) = v15;
  *(_QWORD *)((char *)v20 + 44) = v35;
  *((_DWORD *)v20 + 13) = v18;
  v37 = 0uLL;
  if (v22)
  {
    while (1)
    {
      while (1)
      {
        v23 = v22;
        v24 = *((_DWORD *)v22 + 8);
        if (v24 <= a2)
          break;
        v22 = (uint64_t *)*v22;
        v21 = v23;
        if (!*v23)
          goto LABEL_22;
      }
      if (v24 >= a2)
        break;
      v22 = (uint64_t *)v22[1];
      if (!v22)
      {
        v21 = v23 + 1;
        goto LABEL_22;
      }
    }
    std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(v20 + 7));
    operator delete(v20);
    v28 = 0;
  }
  else
  {
    v23 = (uint64_t *)(a1 + 1);
LABEL_22:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = v23;
    *v21 = (uint64_t)v20;
    v25 = (uint64_t *)**a1;
    if (v25)
    {
      *a1 = v25;
      v20 = (_QWORD *)*v21;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    v28 = 1;
  }
  if ((v28 & 1) == 0 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v34 = "ParameterMapManager.cpp";
    v35 = 0x4000000003A0400;
    v36 = a2;
    LOWORD(v37) = 1024;
    *(_DWORD *)((char *)&v37 + 2) = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR:  ParameterMapManager::AddMapping: Param id %u (0x%x) already exists", buf, 0x1Eu);
  }
  if (v32)
  {
    v29 = (unint64_t *)&v32->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v28;
}

void sub_210AD2914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v6);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ParameterControlSource *,std::shared_ptr<ParameterControlSource>::__shared_ptr_default_delete<ParameterControlSource,ParameterControlSource>,std::allocator<ParameterControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_pointer<ParameterControlSource *,std::shared_ptr<ParameterControlSource>::__shared_ptr_default_delete<ParameterControlSource,ParameterControlSource>,std::allocator<ParameterControlSource>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ParameterMapManager::RemoveMapping(ParameterMapManager *this, unsigned int a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;

  v4 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (result)
  {
    v5 = v4;
    v6 = result;
    do
    {
      v7 = *(_DWORD *)(v6 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v6;
      else
        v9 = (uint64_t *)(v6 + 8);
      if (v8)
        v5 = (char *)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || *((_DWORD *)v5 + 8) > a2)
    {
      return 0;
    }
    else
    {
      v10 = (char *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (char *)*((_QWORD *)v12 + 2);
          v13 = *(_QWORD *)v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*(char **)this == v5)
        *(_QWORD *)this = v11;
      --*((_QWORD *)this + 2);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)result, (uint64_t *)v5);
      std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(v5 + 56));
      operator delete(v5);
      return 1;
    }
  }
  return result;
}

uint64_t ParameterMapManager::GetConnectionInfo(uint64_t a1)
{
  signed int v2;
  int v3;
  int v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  signed int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  _QWORD v33[2];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  const __CFString *v50;
  __int128 v51;
  uint64_t v52;
  const __CFString *v53;
  __int128 v54;
  uint64_t v55;
  const __CFString *v56;
  __int128 v57;
  uint64_t v58;
  const __CFString *v59;
  __int128 v60;
  uint64_t v61;
  const __CFString *v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v33[0] = 38666240000;
  v33[1] = 0;
  v34 = xmmword_210B0A1F0;
  v35 = 0xD00100000;
  v36 = 0;
  v37 = xmmword_210B0A200;
  v38 = 0x1200200000;
  v39 = 0;
  v40 = xmmword_210B0A210;
  v41 = 0x1800C00000;
  v42 = 0;
  v43 = xmmword_210B0A220;
  v46 = 0;
  v45 = 0;
  v47 = 1065353216;
  v44 = 13631488;
  v48 = 0;
  v49 = 0x1A01F00000;
  v50 = CFSTR("Time Octaves");
  v51 = xmmword_210B0A230;
  v52 = 0x1A02000000;
  v53 = CFSTR("Time Octaves");
  v54 = xmmword_210B0A230;
  v55 = 0x1A02100000;
  v56 = CFSTR("Time Octaves");
  v57 = xmmword_210B0A230;
  v58 = 0x1A02200000;
  v59 = CFSTR("Time Octaves");
  v60 = xmmword_210B0A230;
  v61 = 0x1A02300000;
  v62 = CFSTR("Time Octaves");
  v63 = xmmword_210B0A230;
  v64 = 37748736;
  v66 = 0;
  v65 = 0;
  v67 = 1065353216;
  v68 = 0x3F80000000000000;
  v69 = 0x1A02900000;
  v70 = CFSTR("Time Octaves");
  v71 = xmmword_210B0A230;
  v72 = 0x1502A00000;
  v73 = 0;
  v74 = xmmword_210B0A240;
  v75 = 0x901500000;
  v76 = 0;
  v77 = xmmword_210B0A1F0;
  v78 = 0xD01600000;
  v79 = 0;
  v80 = xmmword_210B0A250;
  v81 = 63963136;
  v82 = 0;
  v83 = xmmword_210B0A260;
  v84 = 65011712;
  v85 = 0;
  v86 = xmmword_210B0A260;
  v87 = 66060288;
  v88 = 0;
  v89 = xmmword_210B0A260;
  v90 = 0x4000000;
  v91 = 0;
  v92 = xmmword_210B0A260;
  v93 = 68157440;
  v94 = 0;
  v96 = 0u;
  v97 = 0u;
  v95 = xmmword_210B0A260;
  if ((*(_DWORD *)a1 & 0xF0000000) != 0)
    v2 = *(_DWORD *)a1 & 0xF0000000;
  else
    v2 = *(_DWORD *)a1;
  v3 = *(_DWORD *)(a1 + 4) & 0xFF00000;
  v4 = v33[0];
  v5 = v33;
  while (v4 != v3)
  {
    v6 = *((_DWORD *)v5 + 8);
    v5 += 4;
    v4 = v6;
    if (!v6)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        v15 = 136315906;
        v16 = "ParameterMapManager.cpp";
        v17 = 1024;
        v18 = 311;
        v19 = 1024;
        v20 = v2;
        v21 = 1024;
        v22 = v3;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%25s:%-5d GetConnectionInfo: Invalid input: inSourceID 0x%x, inDestID 0x%x\n", (uint8_t *)&v15, 0x1Eu);
      }
      v7 = 0;
      *(_OWORD *)(a1 + 8) = xmmword_210B0A300;
      return v7;
    }
  }
  v9 = *((_DWORD *)v5 + 1);
  *(_DWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v5[1];
  if ((v2 & 0xFFFFFFF8) == 0x3E8)
    goto LABEL_12;
  if (v3 < 11534336)
  {
    if (v3 == 0x100000)
    {
      if (v2 == 224 || v2 == 0x10000000 || v2 == 300)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A2E0;
        v12 = -12.0;
        v13 = 12.0;
        v11 = 12.0;
        v10 = -12.0;
        goto LABEL_43;
      }
      *(_OWORD *)(a1 + 8) = xmmword_210B0A2F0;
      v13 = 0.0;
      v12 = -96.0;
      v11 = 0.0;
      goto LABEL_37;
    }
    if (v3 == 0x200000)
    {
      if (v2 != 10)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A2C0;
        v12 = -0.5;
        v13 = 0.5;
        v11 = 0.5;
        v10 = -0.5;
        goto LABEL_43;
      }
      *(_OWORD *)(a1 + 8) = xmmword_210B0A2D0;
      v12 = -0.508;
      v13 = 0.508;
      goto LABEL_30;
    }
LABEL_12:
    v10 = *((float *)v5 + 4);
    v11 = *((float *)v5 + 5);
    *(float *)(a1 + 8) = v10;
    *(float *)(a1 + 12) = v11;
    v12 = *((float *)v5 + 6);
    v13 = *((float *)v5 + 7);
    *(float *)(a1 + 16) = v12;
    *(float *)(a1 + 20) = v13;
    goto LABEL_43;
  }
  if (v3 == 11534336)
  {
    if (v2 > 299)
    {
      if (v2 == 0x10000000)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A270;
        v10 = -4800.0;
        v11 = 4800.0;
        v12 = -100.0;
        v14 = 1120403456;
        goto LABEL_42;
      }
      if (v2 == 300)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A2A0;
        v12 = 0.0;
        v13 = 12800.0;
        v11 = 12800.0;
        v10 = 0.0;
        goto LABEL_43;
      }
    }
    else
    {
      if (v2 == 224)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A290;
        v10 = -12800.0;
        v11 = 12800.0;
        v12 = -200.0;
        v14 = 1128792064;
        goto LABEL_42;
      }
      if (v2 == 242)
      {
        *(_OWORD *)(a1 + 8) = xmmword_210B0A280;
        v12 = -100.0;
        v13 = 100.0;
LABEL_30:
        v11 = v13;
LABEL_37:
        v10 = v12;
        goto LABEL_43;
      }
    }
    *(_OWORD *)(a1 + 8) = xmmword_210B0A2B0;
    v10 = -12800.0;
    v11 = 12800.0;
    v12 = -4800.0;
LABEL_41:
    v14 = 1167458304;
    goto LABEL_42;
  }
  if (v3 != 22020096)
    goto LABEL_12;
  v10 = *((float *)v5 + 4);
  v11 = *((float *)v5 + 5);
  *(float *)(a1 + 8) = v10;
  *(float *)(a1 + 12) = v11;
  if (v2 != 300)
  {
    *(_QWORD *)(a1 + 16) = 0x4596000000000000;
    v12 = 0.0;
    goto LABEL_41;
  }
  *(_QWORD *)(a1 + 16) = 0x4648000000000000;
  v12 = 0.0;
  v14 = 1179123712;
LABEL_42:
  v13 = *(float *)&v14;
LABEL_43:
  v7 = 1;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    v15 = 136317186;
    v16 = "ParameterMapManager.cpp";
    v17 = 1024;
    v18 = 306;
    v19 = 1024;
    v20 = v2;
    v21 = 1024;
    v22 = v3;
    v23 = 2048;
    v24 = v10;
    v25 = 2048;
    v26 = v11;
    v27 = 2048;
    v28 = v12;
    v29 = 2048;
    v30 = v13;
    v31 = 1024;
    v32 = v9;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "%25s:%-5d GetConnectionInfo: inSourceID 0x%x, inDestID 0x%x, min: %f max: %f default: %f - %f unit: %u", (uint8_t *)&v15, 0x4Cu);
  }
  return v7;
}

void VoiceZone::Update(VoiceZone *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  float LinearTuning;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  __float2 v16;

  if ((*((_BYTE *)this + 224) & 2) != 0)
  {
    if (a2 <= 4199)
    {
      switch(a2)
      {
        case 4121:
          if ((((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 21) + 56))(*((_QWORD *)this + 21)) ^ ((*((_BYTE *)this + 224) & 1) == 0)) & 1) == 0)
          {
            *((_BYTE *)this + 224) = *((_BYTE *)this + 224) & 0xFE | (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 56))(*((_QWORD *)this + 21));
            if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 21) + 56))(*((_QWORD *)this + 21)) & 1) == 0)
            {
              v3 = *((_QWORD *)this + 19) | 0x400;
              goto LABEL_38;
            }
          }
          break;
        case 4122:
          v6 = *((_QWORD *)this + 21);
          v7 = *(_DWORD *)(v6 + 176);
          if (v7 == -1)
          {
            v8 = *(_QWORD *)(v6 + 24);
            v7 = *(_DWORD *)(v8 + 156);
            if (v7 == -1)
            {
              v9 = *(_QWORD *)(v8 + 24);
              v7 = *(_DWORD *)(v9 + 156);
              if (v7 == -1)
              {
                v7 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 200);
                if (v7 == -1)
                  v7 = 0;
              }
            }
          }
          *((_DWORD *)this + 62) = v7;
          break;
        case 4123:
        case 4124:
LABEL_18:
          LinearTuning = VoiceZone::GetLinearTuning(this, *(float *)(*((_QWORD *)this + 20) + 76)- (float)(int)*(float *)(*((_QWORD *)this + 20) + 76));
          Oscillator::SetFixedPitchFactor((uint64_t)this + 256, LinearTuning);
          break;
        case 4125:
          v10 = *((_QWORD *)this + 21);
          *((float *)this + 265) = __exp10f((float)(*(float *)(*(_QWORD *)(v10 + 104) + 84)+ (float)(*(float *)(v10 + 200)+ (float)(*(float *)(*(_QWORD *)(v10 + 24) + 104)+ (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 24)+ 128)+ *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 24) + 24)+ 24)+ 180)))))* 0.05);
          break;
        case 4126:
          v11 = *(float *)(*((_QWORD *)this + 21) + 204)
              + (float)(*(float *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24) + 108)
                      + (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24) + 24) + 140)
                              + *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24) + 24)
                                                     + 24)
                                         + 192)));
          *((float *)this + 266) = v11;
          v12 = (float)(*((float *)this + 268) + v11) + *((float *)this + 271);
          v13 = fmaxf(v12 + v12, -1.0);
          if (v13 >= 1.0)
            v14 = 1.0;
          else
            v14 = (float)(v13 + 1.0) * 0.5;
          v15 = v14 * 1.57079633;
          v16 = __sincosf_stret(v15);
          *((_DWORD *)this + 274) = LODWORD(v16.__cosval);
          *((_DWORD *)this + 275) = LODWORD(v16.__sinval);
          break;
        default:
          if (!a2)
          {
            v3 = *((_QWORD *)this + 19) | 0x800;
            goto LABEL_38;
          }
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 4200:
          v3 = *((_QWORD *)this + 19) | 0x200;
          break;
        case 4201:
        case 4203:
        case 4213:
        case 4214:
        case 4215:
        case 4216:
        case 4217:
        case 4218:
        case 4219:
        case 4222:
        case 4223:
        case 4224:
        case 4225:
        case 4226:
        case 4227:
        case 4228:
        case 4229:
          return;
        case 4202:
          goto LABEL_18;
        case 4204:
          v4 = *((_QWORD *)this + 25);
          if (v4)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(unsigned __int8 *)(*((_QWORD *)this + 21) + 189));
          goto LABEL_18;
        case 4205:
        case 4206:
          v3 = *((_QWORD *)this + 19) | 4;
          break;
        case 4207:
        case 4208:
        case 4209:
        case 4210:
        case 4211:
        case 4212:
          v3 = *((_QWORD *)this + 19) | 2;
          break;
        case 4220:
          if (*((_QWORD *)this + 9) <= (unint64_t)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21)
                                                                                                + 24)
                                                                                    + 480)
                                                                        - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21)
                                                                                                + 24)
                                                                                    + 472)) >> 3))
            return;
          v3 = *((_QWORD *)this + 19) | 0x100;
          break;
        case 4221:
          v3 = *((_QWORD *)this + 19) | 0x80;
          break;
        case 4230:
          if (*((_QWORD *)this + 12) <= (unint64_t)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21)
                                                                                                 + 24)
                                                                                     + 504)
                                                                         - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21)
                                                                                                 + 24)
                                                                                     + 496)) >> 3))
            return;
          v3 = *((_QWORD *)this + 19) | 0x40;
          break;
        case 4231:
          v3 = *((_QWORD *)this + 19) | 0x20;
          break;
        default:
          if (a2 == 4270)
          {
            if (*((_QWORD *)this + 18) <= (unint64_t)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24)
                                                                                       + 528)
                                                                           - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24)
                                                                                       + 520)) >> 3))
              return;
            v3 = *((_QWORD *)this + 19) | 0x10;
          }
          else
          {
            if (a2 != 4271)
              return;
            v3 = *((_QWORD *)this + 19) | 8;
          }
          break;
      }
LABEL_38:
      *((_QWORD *)this + 19) = v3;
    }
  }
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,Connection *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,Connection *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,Connection *>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int const,Connection *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,Connection *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,Connection *>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int const,Connection *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,Connection *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,Connection *>>>::destroy(v3, a2[1]);
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<ModControlSource *>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 61))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,VoiceLFO *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceLFO *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceLFO *>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int const,VoiceLFO *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceLFO *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceLFO *>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int const,VoiceLFO *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceLFO *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceLFO *>>>::destroy(v3, a2[1]);
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::destroy(v3, a2[1]);
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<VoiceComponent *>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (!(a2 >> 61))
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void VoiceZone::InitializeAllocationPool(VoiceZone *this)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;

  v1 = (int)this;
  do
    v2 = __ldxr((unsigned int *)&VoiceZone::sAllocationPoolRefCount);
  while (__stxr(v2 + 1, (unsigned int *)&VoiceZone::sAllocationPoolRefCount));
  if (!v2)
  {
    v3 = operator new();
    MEMORY[0x212BCD644](v3, "VoiceZone mutex");
    VoiceZone::sMutex = v3;
    v4 = operator new();
    *(_QWORD *)v4 = &off_24CA8DD90;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 32) = v1;
    *(_BYTE *)(v4 + 37) = 0;
    v5 = (1120 * v1);
    v6 = malloc_type_malloc(v5, 0x9CE3EAFBuLL);
    bzero(v6, v5);
    *(_QWORD *)(v4 + 24) = v6;
    *(_BYTE *)(v4 + 36) = 1;
    VoiceZone::sVoiceZoneNewPool = v4;
  }
}

void sub_210AD3644(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10A1C4038DC4EEELL);
  _Unwind_Resume(a1);
}

uint64_t AllocationPool<VoiceZone>::~AllocationPool(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA8DD90;
  if (*(_BYTE *)(a1 + 36))
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void AllocationPool<VoiceZone>::~AllocationPool(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24CA8DD90;
  if (*(_BYTE *)(a1 + 36))
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x212BCDF50);
}

void VoiceZone::ShutdownAllocationPool(VoiceZone *this)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldxr((unsigned int *)&VoiceZone::sAllocationPoolRefCount);
    v2 = v1 - 1;
  }
  while (__stxr(v2, (unsigned int *)&VoiceZone::sAllocationPoolRefCount));
  if (!v2)
  {
    if (VoiceZone::sVoiceZoneNewPool)
      (*(void (**)(uint64_t))(*(_QWORD *)VoiceZone::sVoiceZoneNewPool + 8))(VoiceZone::sVoiceZoneNewPool);
    VoiceZone::sVoiceZoneNewPool = 0;
    if (VoiceZone::sMutex)
      (*(void (**)(uint64_t))(*(_QWORD *)VoiceZone::sMutex + 8))(VoiceZone::sMutex);
    VoiceZone::sMutex = 0;
  }
}

uint64_t VoiceZone::DestroyInternals(VoiceZone *this)
{
  SamplerState::RemoveView(*((_QWORD *)this + 21), this);
  *((_QWORD *)this + 21) = 0;
  return VoiceZone::Clean(this);
}

uint64_t std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<VoiceComponent *>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 3);
  return a1;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  caulk::rt_safe_memory_resource *result;
  uint64_t v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return (caulk::rt_safe_memory_resource *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  v7 = a1 + 1;
LABEL_9:
  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
  if (*MEMORY[0x24BEC6E18])
  {
    v10 = caulk::rt_safe_memory_resource::rt_allocate(result);
    *(_DWORD *)(v10 + 32) = **a3;
    *(_QWORD *)(v10 + 40) = 0;
    std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v10);
    return (caulk::rt_safe_memory_resource *)v10;
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned int const,Connection *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,Connection *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,Connection *>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Connection *>>(uint64_t **a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  caulk::rt_safe_memory_resource *result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v5;
        v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 1);
LABEL_9:
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
    {
      v10 = caulk::rt_safe_memory_resource::rt_allocate(result);
      *(_OWORD *)(v10 + 32) = *a3;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = v7;
      *v6 = v10;
      v11 = (uint64_t *)**a1;
      if (v11)
      {
        *a1 = v11;
        v12 = (uint64_t *)*v6;
      }
      else
      {
        v12 = (uint64_t *)v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
      return (caulk::rt_safe_memory_resource *)1;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int const,VoiceEnvelope *>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,VoiceEnvelope *>,std::less<unsigned int>,true>,caulk::rt_allocator<std::__value_type<unsigned int const,VoiceEnvelope *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__split_buffer<ModControlSource *,caulk::rt_allocator<ModControlSource *> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  caulk::rt_safe_memory_resource *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<ModControlSource *>>::deallocate[abi:ne180100](v4, (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v4) >> 3);
  return a1;
}

_QWORD *std::vector<VoiceComponent *,caulk::rt_allocator<VoiceComponent *>>::insert(_QWORD *result, char *__src, _QWORD *a3)
{
  char *v4;
  char **v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  _QWORD *v50;

  v4 = __src;
  v5 = (char **)result;
  v6 = (char *)result[1];
  v8 = result + 2;
  v7 = result[2];
  if ((unint64_t)v6 >= v7)
  {
    v13 = (char *)*result;
    v14 = ((uint64_t)&v6[-*result] >> 3) + 1;
    if (v14 >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v46 = v8;
    if (v18)
      v18 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v18);
    else
      v19 = 0;
    v20 = (_QWORD *)(v18 + 8 * v16);
    v43 = v18;
    *(_QWORD *)&v44 = v20;
    *((_QWORD *)&v44 + 1) = v20;
    v45 = v18 + 8 * v19;
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v50 = v8;
        v23 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<StateView *>>(v22);
        v25 = (uint64_t *)v44;
        v26 = *((_QWORD *)&v44 + 1) - v44;
        if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
        {
          v32 = vdupq_n_s64(v44);
          v28 = v23 + 8 * (v22 >> 2);
        }
        else
        {
          v27 = v26 >> 3;
          v28 = v23 + 8 * (v22 >> 2) + (v26 & 0xFFFFFFFFFFFFFFF8);
          v29 = 8 * v27;
          v30 = (_QWORD *)(v23 + 8 * (v22 >> 2));
          do
          {
            v31 = *v25++;
            *v30++ = v31;
            v29 -= 8;
          }
          while (v29);
          v32 = (int64x2_t)v44;
        }
        v33 = v45;
        v47 = v43;
        v43 = v23;
        *(_QWORD *)&v44 = v23 + 8 * (v22 >> 2);
        v48 = v32;
        *((_QWORD *)&v44 + 1) = v28;
        v45 = v23 + 8 * v24;
        v49 = v33;
        std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer((uint64_t)&v47);
        v20 = (_QWORD *)*((_QWORD *)&v44 + 1);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        *(_QWORD *)&v44 = v20;
        *((_QWORD *)&v44 + 1) = v20;
      }
    }
    *v20 = *a3;
    v34 = (char *)v44;
    v35 = (char *)(*((_QWORD *)&v44 + 1) + 8);
    *((_QWORD *)&v44 + 1) += 8;
    v36 = *v5;
    if (*v5 != v4)
    {
      v37 = v4;
      do
      {
        v38 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v34 - 1) = v38;
        v34 -= 8;
      }
      while (v37 != v36);
      v35 = (char *)*((_QWORD *)&v44 + 1);
    }
    *(_QWORD *)&v44 = v34;
    v39 = v5[1];
    v40 = v39 - v4;
    if (v39 != v4)
    {
      memmove(v35, v4, v39 - v4);
      v34 = (char *)v44;
      v4 = v5[1];
    }
    v41 = *v5;
    *v5 = v34;
    v5[1] = &v35[v40];
    v42 = (unint64_t)v5[2];
    v5[2] = (char *)v45;
    *((_QWORD *)&v44 + 1) = v4;
    v45 = v42;
    v43 = (unint64_t)v41;
    *(_QWORD *)&v44 = v41;
    return (_QWORD *)std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer((uint64_t)&v43);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    result[1] = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = (_QWORD *)result[1];
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    result[1] = v11;
    if (v6 != v9)
      result = memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    *(_QWORD *)v4 = *a3;
  }
  return result;
}

void sub_210AD3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<VoiceComponent *,caulk::rt_allocator<VoiceComponent *> &>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'KeyControlSource::~KeyControlSource(KeyControlSource *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1[3] = off_24CA87E20;
  *v1 = &unk_24CA87EB0;
}

{
  KeyControlSource::~KeyControlSource((KeyControlSource *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t VoiceZone::FastRelease(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  if ((*(_BYTE *)(this + 224) & 0x10) == 0)
  {
    if ((*(_BYTE *)(this + 224) & 4) != 0)
    {
      *(_BYTE *)(this + 224) |= 0x10u;
      v1 = *(_QWORD **)(this + 56);
      if (v1 != (_QWORD *)(this + 64))
      {
        do
        {
          v2 = v1[5];
          if (*(_DWORD *)(v2 + 844) <= 5u)
          {
            *(_DWORD *)(v2 + 828) = *(_DWORD *)(v2 + 624);
            *(_BYTE *)(v2 + 852) = 0;
            *(_QWORD *)(v2 + 840) = 0x6FFFFFFFFLL;
          }
          v3 = (_QWORD *)v1[1];
          if (v3)
          {
            do
            {
              v4 = v3;
              v3 = (_QWORD *)*v3;
            }
            while (v3);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v1[2];
              v5 = *v4 == (_QWORD)v1;
              v1 = v4;
            }
            while (!v5);
          }
          v1 = v4;
        }
        while (v4 != (_QWORD *)(this + 64));
      }
    }
    else
    {
      return VoiceZone::Kill(this);
    }
  }
  return this;
}

void AUHighShelfFilter::~AUHighShelfFilter(AUHighShelfFilter *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUHighShelfFilter::GetPropertyInfo(AUHighShelfFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 51)
    {
      if (a2 == 52)
      {
        result = 0;
        v7 = 0x4000;
      }
      else
      {
        if (a2 != 57)
        {
          if (a2 == 56)
          {
            result = 0;
            *a5 = 8;
            *a6 = 1;
          }
          return result;
        }
        result = 0;
        v7 = 48;
      }
      *a5 = v7;
      *a6 = 0;
      return result;
    }
    if (a2 == 21 || a2 == 29)
    {
      result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  return result;
}

uint64_t AUHighShelfFilter::GetProperty(AUHighShelfFilter *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  ausdk::AUEffectBase ***v17;
  ausdk::AUEffectBase **v18;
  const BiquadCoefficients *v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3)
    return 4294956417;
  v25 = v8;
  v26 = v7;
  v27 = v5;
  v28 = v6;
  v10 = a5;
  result = 4294956417;
  if (a2 > 51)
  {
    if (a2 == 52)
    {
      if (!*((_BYTE *)this + 17))
        return 4294956429;
      (*(void (**)(__int128 *__return_ptr, AUHighShelfFilter *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v22, this, 2, 0);
      v16 = *(double *)&v22;
      v22 = 0uLL;
      v24 = 0;
      v23 = 0x3FF0000000000000uLL;
      v17 = (ausdk::AUEffectBase ***)*((_QWORD *)this + 66);
      if (*((ausdk::AUEffectBase ****)this + 67) == v17)
        v18 = 0;
      else
        v18 = *v17;
      HighShelfKernel::CalculateCoefficients(v18, (Biquad *)&v22);
      v20[0] = v22;
      v20[1] = v23;
      v21 = v24;
      GetFrequencyResponse((uint64_t)v10, (AudioUnitFrequencyResponseBin *)1, (uint64_t)v20, v19, v16);
    }
    else
    {
      if (a2 != 57)
        return result;
      v13 = 0;
      v14 = *((_QWORD *)this + 1);
      do
      {
        v15 = overviewParameterIDs[v13];
        *(_QWORD *)v10 = v14;
        v10[3] = 0;
        v10[4] = 0;
        v10[2] = v15;
        ++v13;
        v10 += 6;
      }
      while (v13 != 2);
    }
    return 0;
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v12 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29)
        return result;
      result = 0;
      v12 = *((unsigned __int8 *)this + 554);
    }
    *a5 = v12;
  }
  return result;
}

uint64_t AUHighShelfFilter::SetParameter(AUHighShelfFilter *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  ++*((_DWORD *)this + 148);
  return 0;
}

double AUHighShelfFilter::GetParameterInfo(AUHighShelfFilter *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  double result;
  const __CFString *v8;
  AudioUnitParameterOptions v9;
  const __CFString *v10;
  CFStringRef *v11[3];

  v11[2] = *(CFStringRef **)MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (!a2)
  {
    v11[0] = (CFStringRef *)&kCutoffFreq_Name;
    v11[1] = (CFStringRef *)&kGain_Name;
    if (!LocalizeAUParameterStringsForClass<AUHighShelfFilter>(std::initializer_list<__CFString const**>)::sLocalized)
      LocalizeAUParameterStringsForClass<AUHighShelfFilter>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v11, 2);
    if (a3 == 1)
    {
      v10 = (const __CFString *)kGain_Name;
      buffer->cfNameString = (CFStringRef)kGain_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      result = 3.43597632e10;
      *(_QWORD *)&buffer->minValue = 0x42200000C2200000;
      buffer->defaultValue = 0.0;
    }
    else if (!a3)
    {
      v8 = (const __CFString *)kCutoffFreq_Name;
      buffer->cfNameString = (CFStringRef)kCutoffFreq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 0x461C400000000008;
      result = *(double *)(ausdk::AUScope::SafeGetElement((AUHighShelfFilter *)((char *)this + 128), 0) + 80) * 0.5;
      *(float *)&result = result;
      buffer->maxValue = *(AudioUnitParameterValue *)&result;
      v9 = buffer->flags + 0x400000;
      buffer->defaultValue = 10000.0;
      buffer->flags = v9;
    }
  }
  return result;
}

uint64_t AUHighShelfFilter::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;

  result = ausdk::AUBase::RestoreState(this, a2);
  ++*((_DWORD *)this + 148);
  return result;
}

double AUHighShelfFilter::GetTailTime(AUHighShelfFilter *this)
{
  return 0.001;
}

uint64_t AUHighShelfFilter::SupportsTail(AUHighShelfFilter *this)
{
  return 1;
}

BOOL AUHighShelfFilter::StreamFormatWritable(AUHighShelfFilter *this)
{
  return *((_BYTE *)this + 17) == 0;
}

void AUHighShelfFilter::NewKernel(AUHighShelfFilter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24CA8E860;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = -1;
  *(_QWORD *)(v4 + 104) = this;
  HighShelfKernel::Reset((HighShelfKernel *)v4);
  *a2 = v4;
}

uint64_t AUHighShelfFilter::Version(AUHighShelfFilter *this)
{
  return 0x10000;
}

void HighShelfKernel::~HighShelfKernel(HighShelfKernel *this)
{
  JUMPOUT(0x212BCDF50);
}

double HighShelfKernel::Reset(HighShelfKernel *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

double *HighShelfKernel::Process(HighShelfKernel *this, float *a2, float *a3, int a4, BOOL *a5)
{
  int v9;

  v9 = *(_DWORD *)(*((_QWORD *)this + 13) + 592);
  if (*((_DWORD *)this + 24) != v9)
  {
    *((_DWORD *)this + 24) = v9;
    HighShelfKernel::CalculateCoefficients((ausdk::AUEffectBase **)this, (HighShelfKernel *)((char *)this + 24));
  }
  return Biquad::Process((double *)this + 3, a2, a3, a4);
}

BiquadCoefficients *HighShelfKernel::CalculateCoefficients(ausdk::AUEffectBase **this, Biquad *a2)
{
  double Parameter;
  float v5;
  double v6;

  Parameter = ausdk::AUEffectBase::GetParameter(this[1], 0);
  v5 = ausdk::AUEffectBase::GetParameter(this[1], 1u);
  v6 = (Parameter + Parameter)
     / *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this[1] + 128), 0) + 80);
  if (v6 > 0.999)
    v6 = 0.999;
  return Biquad::GetHighShelfParams(a2, v6, v5);
}

_QWORD *AUHighShelfFilterFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHighShelfFilter>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUHighShelfFilter>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void AUNBandEQ::~AUNBandEQ(AUNBandEQ *this)
{
  AUNBandEQ::~AUNBandEQ(this);
  JUMPOUT(0x212BCDF50);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  *(_QWORD *)this = &off_24CA939D8;
  v2 = (void *)*((_QWORD *)this + 99);
  if (v2)
  {
    *((_QWORD *)this + 100) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 96);
  if (v3)
  {
    *((_QWORD *)this + 97) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 87);
  if (v4)
  {
    *((_QWORD *)this + 88) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 84);
  if (v5)
  {
    *((_QWORD *)this + 85) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)*((_QWORD *)this + 80);
  if (v7)
  {
    *((_QWORD *)this + 81) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 77);
  if (v8)
  {
    *((_QWORD *)this + 78) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 74);
  if (v9)
  {
    *((_QWORD *)this + 75) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 71);
  if (v10)
  {
    *((_QWORD *)this + 72) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 68);
  if (v11)
  {
    *((_QWORD *)this + 69) = v11;
    operator delete(v11);
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUNBandEQ::Initialize(AUNBandEQ *this)
{
  uint64_t Element;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  const AudioStreamBasicDescription *v6;
  IIRFilterFloat32 *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t mChannelsPerFrame;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  __int128 v23;
  __int128 v24;
  PowerMeter *v25;
  PowerMeter *v26;
  double v27;
  PowerMeter *v28;
  PowerMeter *v29;
  double v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;
  float64_t v40;
  float64_t v41;
  float64x2_t *v42;
  float64x2_t *v43;
  AudioStreamBasicDescription v44;
  AudioStreamBasicDescription v45;
  std::vector<char>::value_type __x[4];
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  float64_t v53;
  __int16 v54;
  float64_t v55;
  __int16 v56;
  float64_t v57;
  __int16 v58;
  float64_t v59;
  __int16 v60;
  float64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  Element = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 80), 0);
  v3 = *(_OWORD *)(Element + 96);
  *(_OWORD *)&v45.mSampleRate = *(_OWORD *)(Element + 80);
  *(_OWORD *)&v45.mBytesPerPacket = v3;
  *(_QWORD *)&v45.mBitsPerChannel = *(_QWORD *)(Element + 112);
  v4 = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0);
  v5 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&v44.mSampleRate = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&v44.mBytesPerPacket = v5;
  *(_QWORD *)&v44.mBitsPerChannel = *(_QWORD *)(v4 + 112);
  if (!CAStreamBasicDescription::IsEquivalent((CAStreamBasicDescription *)&v45, &v44, v6))
    return 4294956428;
  v7 = NewIIRFilter(&v45, &v44, *((_DWORD *)this + 133));
  v8 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v7 = (IIRFilterFloat32 *)*((_QWORD *)this + 83);
  }
  if (!v7)
    return 4294956428;
  v9 = (_DWORD **)((char *)this + 672);
  if ((v45.mFormatFlags & 0x20) != 0)
    mChannelsPerFrame = v45.mChannelsPerFrame;
  else
    mChannelsPerFrame = 1;
  v11 = (16 * mChannelsPerFrame) | 8;
  __x[0] = 0;
  v12 = (_DWORD *)*((_QWORD *)this + 84);
  v13 = *((_QWORD *)this + 85) - (_QWORD)v12;
  if (v11 <= v13)
  {
    if (v11 < v13)
      *((_QWORD *)this + 85) = (char *)v12 + v11;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 28, v11 - v13, __x);
    v12 = *v9;
  }
  *v12 = mChannelsPerFrame;
  if ((v44.mFormatFlags & 0x20) != 0)
    v15 = v44.mChannelsPerFrame;
  else
    v15 = 1;
  v16 = (16 * v15) | 8;
  __x[0] = 0;
  v17 = (_DWORD *)*((_QWORD *)this + 87);
  v18 = *((_QWORD *)this + 88) - (_QWORD)v17;
  if (v16 <= v18)
  {
    if (v16 < v18)
      *((_QWORD *)this + 88) = (char *)v17 + v16;
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 29, v16 - v18, __x);
    v17 = (_DWORD *)*((_QWORD *)this + 87);
    v12 = *v9;
  }
  *v17 = v15;
  v19 = *((_QWORD *)this + 85) - (_QWORD)v12 - 8;
  if (*((_QWORD *)this + 85) - (_QWORD)v12 != 8)
  {
    v20 = v12 + 2;
    do
    {
      *v20 = 1;
      v20 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  v21 = *((_QWORD *)this + 88) - (_QWORD)v17 - 8;
  if (*((_QWORD *)this + 88) - (_QWORD)v17 != 8)
  {
    v22 = v17 + 2;
    do
    {
      *v22 = 1;
      v22 += 4;
      v21 -= 16;
    }
    while (v21);
  }
  (*(void (**)(AUNBandEQ *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  v23 = *(_OWORD *)&v45.mBytesPerPacket;
  *(_OWORD *)((char *)this + 824) = *(_OWORD *)&v45.mSampleRate;
  *(_OWORD *)((char *)this + 840) = v23;
  *((_QWORD *)this + 107) = *(_QWORD *)&v45.mBitsPerChannel;
  v24 = *(_OWORD *)&v44.mBytesPerPacket;
  *((_OWORD *)this + 54) = *(_OWORD *)&v44.mSampleRate;
  *((_OWORD *)this + 55) = v24;
  *((_QWORD *)this + 112) = *(_QWORD *)&v44.mBitsPerChannel;
  if (*((_DWORD *)this + 204))
  {
    std::vector<PowerMeter>::resize((void **)this + 96, *((unsigned int *)this + 213));
    v25 = (PowerMeter *)*((_QWORD *)this + 96);
    v26 = (PowerMeter *)*((_QWORD *)this + 97);
    if (v25 != v26)
    {
      v27 = *((double *)this + 103);
      do
      {
        PowerMeter::SetSampleRate(v25, v27);
        v25 = (PowerMeter *)((char *)v25 + 128);
      }
      while (v25 != v26);
    }
  }
  if (*((_DWORD *)this + 205))
  {
    std::vector<PowerMeter>::resize((void **)this + 99, *((unsigned int *)this + 223));
    v28 = (PowerMeter *)*((_QWORD *)this + 99);
    v29 = (PowerMeter *)*((_QWORD *)this + 100);
    if (v28 != v29)
    {
      v30 = *((double *)this + 108);
      do
      {
        PowerMeter::SetSampleRate(v28, v30);
        v28 = (PowerMeter *)((char *)v28 + 128);
      }
      while (v28 != v29);
    }
  }
  if (kAUNBandEQSubsystem && (*(_BYTE *)(kAUNBandEQSubsystem + 8) & 1) != 0 && *(_QWORD *)kAUNBandEQSubsystem)
  {
    std::vector<BiquadCoefficients>::vector(&v42, *((unsigned int *)this + 132));
    AUNBandEQ::CalculateCoefficients(this, &v42);
    v32 = v42;
    v31 = v43;
    if (v43 == v42)
    {
      v32 = v43;
      if (!v43)
        return 0;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v35 = kAUNBandEQSubsystem;
      do
      {
        if (v35)
        {
          if ((*(_BYTE *)(v35 + 8) & 1) != 0)
          {
            v36 = *(NSObject **)v35;
            if (*(_QWORD *)v35)
            {
              if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
              {
                v37 = v32->f64[v33];
                v38 = v32->f64[v33 + 1];
                v39 = v32[1].f64[v33];
                v40 = v32[1].f64[v33 + 1];
                v41 = v32[2].f64[v33];
                *(_DWORD *)__x = 136316930;
                v47 = "AUNBandEQ.cpp";
                v48 = 1024;
                v49 = 221;
                v50 = 1024;
                v51 = v34;
                v52 = 2048;
                v53 = v37;
                v54 = 2048;
                v55 = v38;
                v56 = 2048;
                v57 = v39;
                v58 = 2048;
                v59 = v40;
                v60 = 2048;
                v61 = v41;
                _os_log_impl(&dword_210A23000, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d biquad coefs %2d : %16.8f %16.8f %16.8f %16.8f %16.8f", (uint8_t *)__x, 0x4Au);
                v35 = kAUNBandEQSubsystem;
                v32 = v42;
                v31 = v43;
              }
            }
          }
        }
        ++v34;
        v33 += 5;
      }
      while (v34 < 0xCCCCCCCCCCCCCCCDLL * (((char *)v31 - (char *)v32) >> 3));
      if (!v32)
        return 0;
    }
    v43 = v32;
    operator delete(v32);
  }
  return 0;
}

void sub_210AD485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUNBandEQ::Cleanup(AUNBandEQ *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 97) = *((_QWORD *)this + 96);
  *((_QWORD *)this + 100) = *((_QWORD *)this + 99);
  return result;
}

uint64_t AUNBandEQ::Reset(AUNBandEQ *this)
{
  uint64_t v2;
  unsigned int v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  PowerMeter *v20;
  PowerMeter *v21;
  PowerMeter *v22;
  PowerMeter *v23;

  v2 = *((_QWORD *)this + 83);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    AUNBandEQ::CalculateCoefficients(this, (float64x2_t **)this + 68);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 83) + 16))(*((_QWORD *)this + 83), *((unsigned int *)this + 132), *((_QWORD *)this + 68));
    v3 = atomic_load((unsigned int *)this + 134);
    *((_DWORD *)this + 135) = v3;
    v4 = (_BYTE *)*((_QWORD *)this + 68);
    v5 = (_BYTE *)*((_QWORD *)this + 69);
    if (v5 != v4)
      memmove(*((void **)this + 71), v4, v5 - v4);
    v6 = *((_QWORD *)this + 74);
    if (*((_QWORD *)this + 75) != v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (__int128 *)(v6 + v7);
        v11 = (__int128 *)(*((_QWORD *)this + 77) + v7);
        v12 = *(_OWORD *)(v6 + v7);
        v13 = *(_OWORD *)(v6 + v7 + 16);
        *(__int128 *)((char *)v11 + 25) = *(_OWORD *)(v6 + v7 + 25);
        *v11 = v12;
        v11[1] = v13;
        v14 = *((_QWORD *)this + 80) + v8;
        if (*(_BYTE *)(v14 + 48))
        {
          v15 = *v10;
          v16 = v10[1];
          v17 = *((_QWORD *)v10 + 4);
          *(_BYTE *)(v14 + 40) = *((_BYTE *)v10 + 40);
          *(_QWORD *)(v14 + 32) = v17;
          *(_OWORD *)v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
        }
        else
        {
          v18 = *v11;
          v19 = v11[2];
          *(_OWORD *)(v14 + 16) = v11[1];
          *(_OWORD *)(v14 + 32) = v19;
          *(_OWORD *)v14 = v18;
          *(_BYTE *)(v14 + 48) = 1;
        }
        ++v9;
        v6 = *((_QWORD *)this + 74);
        v8 += 56;
        v7 += 48;
      }
      while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 75) - v6) >> 4));
    }
  }
  if (*((_DWORD *)this + 204))
  {
    v20 = (PowerMeter *)*((_QWORD *)this + 96);
    v21 = (PowerMeter *)*((_QWORD *)this + 97);
    while (v20 != v21)
    {
      PowerMeter::Reset(v20);
      v20 = (PowerMeter *)((char *)v20 + 128);
    }
  }
  if (*((_DWORD *)this + 205))
  {
    v22 = (PowerMeter *)*((_QWORD *)this + 99);
    v23 = (PowerMeter *)*((_QWORD *)this + 100);
    while (v22 != v23)
    {
      PowerMeter::Reset(v22);
      v22 = (PowerMeter *)((char *)v22 + 128);
    }
  }
  return 0;
}

uint64_t AUNBandEQ::GetPropertyInfo(AUNBandEQ *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  int v12;

  if (a2 == 3007)
  {
    v8 = 1;
    v9 = 4;
LABEL_12:
    result = 0;
    *a5 = v9;
LABEL_13:
    *a6 = v8;
    return result;
  }
  if (a2 == 3099)
  {
    if (a3 > 1)
      v7 = 0;
    else
      v7 = (uint64_t)(*((_QWORD *)this + 97) - *((_QWORD *)this + 96)) >> 7;
    if ((a3 & 0xFFFFFFFD) == 0)
      v7 += (uint64_t)(*((_QWORD *)this + 100) - *((_QWORD *)this + 99)) >> 7;
    v8 = 0;
    v9 = 16 * v7;
    goto LABEL_12;
  }
  result = 4294956417;
  if (!a3)
  {
    if (a2 <= 2199)
    {
      switch(a2)
      {
        case 21:
          result = 0;
          *a6 = 1;
          *a5 = 4;
          break;
        case 52:
          result = 0;
          v12 = 0x4000;
LABEL_30:
          *a5 = v12;
          *a6 = 0;
          break;
        case 56:
          result = 0;
LABEL_22:
          v11 = 8;
LABEL_23:
          *a5 = v11;
          v8 = 1;
          goto LABEL_13;
      }
    }
    else
    {
      switch(a2)
      {
        case 2200:
          result = 0;
          v11 = 4;
          goto LABEL_23;
        case 2201:
          result = 0;
          *a5 = 4;
          v8 = *((_BYTE *)this + 17) ^ 1;
          goto LABEL_13;
        case 2202:
          return result;
        case 2203:
          result = 0;
          v12 = 40 * *((_DWORD *)this + 132);
          goto LABEL_30;
        case 2204:
          result = 0;
          v12 = 4;
          goto LABEL_30;
        case 2205:
          result = 0;
          v12 = 8;
          goto LABEL_30;
        default:
          if (a2 == 3098)
            goto LABEL_22;
          break;
      }
    }
  }
  return result;
}

uint64_t AUNBandEQ::GetProperty(AUNBandEQ *this, int a2, unsigned int a3, unsigned int a4, _QWORD *a5)
{
  unsigned int v8;
  uint64_t result;
  PowerMeter *v10;
  PowerMeter *v11;
  float64x2_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t Value;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  float64x2_t *v25;
  PowerMeter *v26;
  PowerMeter *i;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t *v40;
  const BiquadCoefficients *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float64x2_t *v46;
  uint64_t v47;
  UInt8 *v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t *v51;
  UInt8 *bytes;
  UInt8 *v54;
  float64x2_t *v55;
  float64x2_t *v56;

  if (a2 == 3099)
  {
    if (a3 > 1 || (v10 = (PowerMeter *)*((_QWORD *)this + 96), v11 = (PowerMeter *)*((_QWORD *)this + 97), v10 == v11))
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        Value = PowerMeter::GetValue(v10);
        v17 = Value;
        v18 = v16;
        if ((unint64_t)v13 >= v14)
        {
          v19 = ((char *)v13 - (char *)v12) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v14 - (_QWORD)v12) >> 3 > v20)
            v20 = (uint64_t)(v14 - (_QWORD)v12) >> 3;
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v21);
          else
            v22 = 0;
          v23 = (unint64_t *)(v21 + 16 * v19);
          *v23 = v17;
          v23[1] = v18;
          if (v13 == (unint64_t *)v12)
          {
            v25 = (float64x2_t *)(v21 + 16 * v19);
          }
          else
          {
            v24 = v21 + 16 * v19;
            do
            {
              v25 = (float64x2_t *)(v24 - 16);
              *(_OWORD *)(v24 - 16) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v24 -= 16;
            }
            while (v13 != (unint64_t *)v12);
          }
          v14 = v21 + 16 * v22;
          v13 = v23 + 2;
          if (v12)
            operator delete(v12);
          v12 = v25;
        }
        else
        {
          *v13 = Value;
          v13[1] = v16;
          v13 += 2;
        }
        PowerMeter::ClearClipping(v10);
        v10 = (PowerMeter *)((char *)v10 + 128);
      }
      while (v10 != v11);
    }
    if ((a3 & 0xFFFFFFFD) == 0)
    {
      v26 = (PowerMeter *)*((_QWORD *)this + 99);
      for (i = (PowerMeter *)*((_QWORD *)this + 100); v26 != i; v26 = (PowerMeter *)((char *)v26 + 128))
      {
        v28 = PowerMeter::GetValue(v26);
        v30 = v28;
        v31 = v29;
        if ((unint64_t)v13 >= v14)
        {
          v32 = ((char *)v13 - (char *)v12) >> 4;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60)
            std::vector<void const*>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v14 - (_QWORD)v12) >> 3 > v33)
            v33 = (uint64_t)(v14 - (_QWORD)v12) >> 3;
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
            v34 = 0xFFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MixerRamp>>(v34);
          else
            v35 = 0;
          v36 = (unint64_t *)(v34 + 16 * v32);
          *v36 = v30;
          v36[1] = v31;
          if (v13 == (unint64_t *)v12)
          {
            v38 = (float64x2_t *)(v34 + 16 * v32);
          }
          else
          {
            v37 = v34 + 16 * v32;
            do
            {
              v38 = (float64x2_t *)(v37 - 16);
              *(_OWORD *)(v37 - 16) = *((_OWORD *)v13 - 1);
              v13 -= 2;
              v37 -= 16;
            }
            while (v13 != (unint64_t *)v12);
          }
          v14 = v34 + 16 * v35;
          v13 = v36 + 2;
          if (v12)
            operator delete(v12);
          v12 = v38;
        }
        else
        {
          *v13 = v28;
          v13[1] = v29;
          v13 += 2;
        }
        PowerMeter::ClearClipping(v26);
      }
    }
    memcpy(a5, v12, (char *)v13 - (char *)v12);
    if (!v12)
      return 0;
    goto LABEL_61;
  }
  if (a2 != 3007)
  {
    result = 4294956417;
    if (a3)
      return result;
    if (a2 > 2199)
    {
      switch(a2)
      {
        case 2200:
          result = 0;
          v8 = *((_DWORD *)this + 132);
          goto LABEL_66;
        case 2201:
          result = 0;
          v8 = *((_DWORD *)this + 133);
          goto LABEL_66;
        case 2202:
          return result;
        case 2203:
          if (!*((_BYTE *)this + 17))
            return 4294956429;
          std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
          AUNBandEQ::CalculateCoefficients(this, &v55);
          v43 = *((unsigned int *)this + 132);
          v39 = v55;
          if (!(_DWORD)v43)
            goto LABEL_90;
          v44 = 0;
          v45 = 5 * v43;
          v46 = v55 + 1;
          do
          {
            a5[v44] = *(_QWORD *)&v46[-1].f64[0];
            a5[(v44 + 1)] = *(_QWORD *)&v46[-1].f64[1];
            a5[(v44 + 2)] = *(_QWORD *)&v46->f64[0];
            a5[(v44 + 3)] = *(_QWORD *)&v46->f64[1];
            a5[(v44 + 4)] = *(_QWORD *)&v46[1].f64[0];
            v44 += 5;
            v46 = (float64x2_t *)((char *)v46 + 40);
          }
          while (v45 != v44);
          goto LABEL_91;
        case 2204:
          result = 0;
          v8 = 11;
          goto LABEL_66;
        case 2205:
          if (!*((_BYTE *)this + 17))
            return 4294956429;
          std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
          AUNBandEQ::CalculateCoefficients(this, &v55);
          std::vector<double>::vector(&bytes, (5 * *((_DWORD *)this + 132)));
          v47 = *((unsigned int *)this + 132);
          v48 = bytes;
          if ((_DWORD)v47)
          {
            v49 = 0;
            v50 = 5 * v47;
            v51 = v55 + 1;
            do
            {
              *(float64_t *)&v48[8 * v49] = v51[-1].f64[0];
              *(float64_t *)&v48[8 * (v49 + 1)] = v51[-1].f64[1];
              *(float64_t *)&v48[8 * (v49 + 2)] = v51->f64[0];
              *(float64_t *)&v48[8 * (v49 + 3)] = v51->f64[1];
              *(float64_t *)&v48[8 * (v49 + 4)] = v51[1].f64[0];
              v49 += 5;
              v51 = (float64x2_t *)((char *)v51 + 40);
            }
            while (v50 != v49);
          }
          *a5 = CFDataCreate(0, v48, v54 - v48);
          if (bytes)
          {
            v54 = bytes;
            operator delete(bytes);
          }
          v39 = v55;
LABEL_90:
          if (!v39)
            return 0;
LABEL_91:
          v56 = v39;
          break;
        default:
          if (a2 == 3098)
          {
            result = 0;
            v42 = atomic_load((unint64_t *)this + 90);
            *a5 = v42;
          }
          return result;
      }
      goto LABEL_62;
    }
    if (a2 == 21)
    {
      result = 0;
      v8 = atomic_load((unsigned int *)this + 190);
      goto LABEL_66;
    }
    if (a2 != 52)
      return result;
    if (!*((_BYTE *)this + 17))
      return 4294956429;
    (*(void (**)(float64x2_t **__return_ptr, AUNBandEQ *, uint64_t, _QWORD))(*(_QWORD *)this + 392))(&v55, this, 2, 0);
    v40 = v55;
    std::vector<BiquadCoefficients>::vector(&v55, *((unsigned int *)this + 132));
    AUNBandEQ::CalculateCoefficients(this, &v55);
    v12 = v55;
    GetFrequencyResponse((uint64_t)a5, (AudioUnitFrequencyResponseBin *)(0xCCCCCCCCCCCCCCCDLL * (((char *)v56 - (char *)v55) >> 3)), (uint64_t)v55, v41, *(double *)&v40);
    if (!v12)
      return 0;
    v56 = v12;
LABEL_61:
    v39 = v12;
LABEL_62:
    operator delete(v39);
    return 0;
  }
  switch(a3)
  {
    case 2u:
      result = 0;
      v8 = *((_DWORD *)this + 205);
      goto LABEL_66;
    case 1u:
      result = 0;
      v8 = *((_DWORD *)this + 204);
LABEL_66:
      *(_DWORD *)a5 = v8;
      return result;
    case 0u:
      v8 = *((_DWORD *)this + 204);
      if (v8)
        v8 = *((_DWORD *)this + 205) != 0;
      result = 0;
      goto LABEL_66;
  }
  return 4294956430;
}

void sub_210AD50CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AUNBandEQ::SetProperty(AUNBandEQ *this, int a2, int a3, unsigned int a4, unsigned int *a5, unsigned int a6)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, unsigned int *);
  PowerMeter *v13;
  PowerMeter *v14;
  PowerMeter *v15;
  PowerMeter *v16;
  double v17;
  PowerMeter *v18;
  PowerMeter *v19;
  unsigned int v20;
  PowerMeter *v21;
  PowerMeter *v22;
  double v23;
  unint64_t v24;
  _Unwind_Exception *v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;

  if (a2 != 3007)
  {
    result = 4294956417;
    if (a3)
      return result;
    if (a2 <= 2199)
    {
      if (a2 == 21)
      {
        result = 0;
        atomic_store(*a5, (unsigned int *)this + 190);
      }
      else if (a2 == 56)
      {
        v11 = *((_QWORD *)this + 1);
        v27 = 0;
        v28 = &v27;
        v29 = 0x2000000000;
        v12 = (uint64_t (*)(uint64_t, unsigned int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        v30 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
        if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
        {
          v26[0] = MEMORY[0x24BDAC760];
          v26[1] = 0x40000000;
          v26[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_2650;
          v26[3] = &unk_24CA96A88;
          v26[4] = &v27;
          ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_2650((uint64_t)v26);
          v12 = (uint64_t (*)(uint64_t, unsigned int *))v28[3];
        }
        _Block_object_dispose(&v27, 8);
        if (!v12)
        {
          dlerror();
          v25 = (_Unwind_Exception *)abort_report_np();
          _Block_object_dispose(&v27, 8);
          _Unwind_Resume(v25);
        }
        return v12(v11, a5);
      }
      return result;
    }
    switch(a2)
    {
      case 2200:
        if (a6 != 4)
          return 4294956445;
        v20 = *a5;
        break;
      case 2201:
        if (*((_BYTE *)this + 17))
          return 4294956447;
        v24 = *a5;
        if ((v24 - 1001) < 0xFFFFFC18)
          return 4294956445;
        *((_DWORD *)this + 133) = v24;
        std::vector<BiquadCoefficients>::resize((void **)this + 68, v24);
        std::vector<BiquadCoefficients>::resize((void **)this + 71, *((unsigned int *)this + 133));
        std::vector<AUNBandEQ::PolarDesc>::resize((char **)this + 74, *((unsigned int *)this + 133));
        std::vector<AUNBandEQ::PolarDesc>::resize((char **)this + 77, *((unsigned int *)this + 133));
        std::vector<std::optional<AUNBandEQ::PolarDesc>>::resize((_QWORD *)this + 80, *((unsigned int *)this + 133));
        if (*((_DWORD *)this + 133) >= *((_DWORD *)this + 132))
          v20 = *((_DWORD *)this + 132);
        else
          v20 = *((_DWORD *)this + 133);
        break;
      case 3098:
        if (*(double *)a5 >= 0.0)
        {
          result = 0;
          atomic_store(*(_QWORD *)a5, (unint64_t *)this + 90);
          return result;
        }
        return 4294956445;
      default:
        return result;
    }
    return AUNBandEQ::SetNumBands(this, v20);
  }
  if (a6 < 4)
    return 4294967246;
  if (a3 == 2)
  {
    v9 = *a5;
    v10 = *((_DWORD *)this + 204);
  }
  else if (a3 == 1)
  {
    v9 = *((_DWORD *)this + 205);
    v10 = *a5;
  }
  else
  {
    if (a3)
      return 4294956430;
    v9 = *a5;
    v10 = *a5;
  }
  if (v10 && !*((_DWORD *)this + 204))
  {
    v13 = (PowerMeter *)*((_QWORD *)this + 97);
    v14 = (PowerMeter *)*((_QWORD *)this + 96);
    if (v13 == v14)
    {
      std::vector<PowerMeter>::resize((void **)this + 96, *((unsigned int *)this + 213));
    }
    else
    {
      do
      {
        PowerMeter::Reset(v14);
        v14 = (PowerMeter *)((char *)v14 + 128);
      }
      while (v14 != v13);
    }
    v15 = (PowerMeter *)*((_QWORD *)this + 96);
    v16 = (PowerMeter *)*((_QWORD *)this + 97);
    if (v15 != v16)
    {
      v17 = *((double *)this + 103);
      do
      {
        PowerMeter::SetSampleRate(v15, v17);
        v15 = (PowerMeter *)((char *)v15 + 128);
      }
      while (v15 != v16);
    }
  }
  if (v9 && !*((_DWORD *)this + 205))
  {
    v18 = (PowerMeter *)*((_QWORD *)this + 100);
    v19 = (PowerMeter *)*((_QWORD *)this + 99);
    if (v18 == v19)
    {
      std::vector<PowerMeter>::resize((void **)this + 99, *((unsigned int *)this + 223));
    }
    else
    {
      do
      {
        PowerMeter::Reset(v19);
        v19 = (PowerMeter *)((char *)v19 + 128);
      }
      while (v19 != v18);
    }
    v21 = (PowerMeter *)*((_QWORD *)this + 99);
    v22 = (PowerMeter *)*((_QWORD *)this + 100);
    if (v21 != v22)
    {
      v23 = *((double *)this + 108);
      do
      {
        PowerMeter::SetSampleRate(v21, v23);
        v21 = (PowerMeter *)((char *)v21 + 128);
      }
      while (v21 != v22);
    }
  }
  result = 0;
  __dmb(0xBu);
  *((_DWORD *)this + 204) = v10;
  *((_DWORD *)this + 205) = v9;
  return result;
}

uint64_t AUNBandEQ::GetParameter(AUNBandEQ *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  float Parameter;
  uint64_t result;

  if (a2 >= 0x3E8 && a2 % 0x3E8 >= *((_DWORD *)this + 132))
    return 4294956418;
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  Parameter = ausdk::AUElement::GetParameter(Element, a2);
  result = 0;
  *a5 = Parameter;
  return result;
}

uint64_t AUNBandEQ::SetParameter(AUNBandEQ *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  unsigned int *v12;
  unsigned int v13;
  uint64_t result;
  float v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v19;
  float v20;

  if (a2 < 0x3E8)
    goto LABEL_2;
  if (a2 % 0x3E8 >= *((_DWORD *)this + 132))
    return 4294956418;
  if ((_DWORD)a2 - a2 % 0x3E8 != 2000 || *((_BYTE *)this + 764))
  {
LABEL_2:
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    ausdk::AUElement::SetParameter(Element, a2, a5, 0);
LABEL_3:
    v12 = (unsigned int *)((char *)this + 536);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    return 0;
  }
  v20 = 0.0;
  result = (*(uint64_t (**)(AUNBandEQ *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)this + 144))(this, a2, a3, a4, &v20);
  if (!(_DWORD)result)
  {
    v15 = v20;
    ausdk::AUBase::SetParameter(this, a2, a3, a4, a5);
    result = (*(uint64_t (**)(AUNBandEQ *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)this + 144))(this, a2, a3, a4, &v20);
    if (!(_DWORD)result)
    {
      v16 = v15;
      v17 = v20;
      v19 = v15 > 0xA || v17 == v16 || v17 > 0xA;
      if (!v19 && kFilterParamBits[v17] != kFilterParamBits[v16])
      {
        (*(void (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 3, 0, 0);
        (*(void (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 4, 0, 0);
      }
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t AUNBandEQ::CanScheduleParameters(AUNBandEQ *this)
{
  return 0;
}

uint64_t AUNBandEQ::ProcessBufferLists(AUNBandEQ *this, unsigned int *a2, const AudioBufferList *a3, AudioBufferList *a4, uint64_t a5)
{
  unsigned int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **p_mData;
  const float *v44;
  unsigned int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  size_t mDataByteSize;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  unsigned int v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  double *v69;
  uint64_t v70;
  double *v71;
  BOOL v72;
  uint64_t v73;
  double v74;
  long double v75;
  double v76;
  double *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  double *v83;
  double *v84;
  double v85;
  int v86;
  uint64_t mNumberBuffers;
  _QWORD *v88;
  void **v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void **v94;
  char *v95;
  _BYTE *v96;
  _BYTE *v97;
  const void *v98;
  uint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void **v105;
  const float *v106;
  const AudioBufferList *v108;
  AudioBufferList *v109;
  int v110;
  void **v111;
  void **v112;
  unsigned int v113;
  unsigned int v114;
  float64x2_t v115;
  double v116;
  __int128 v117;
  _BYTE v118[31];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v9 = atomic_load((unsigned int *)this + 134);
  if (*((_DWORD *)this + 135) != v9)
  {
    *((_DWORD *)this + 135) = v9;
    v10 = COERCE_DOUBLE(atomic_load((unint64_t *)this + 90));
    v11 = v10;
    v12 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * v10;
    if (v12 >= 2.22507386e-308)
      v13 = -6.90775528 / v12;
    else
      v13 = -INFINITY;
    v14 = exp(v13);
    if (v13 < -708.4)
      v14 = 0.0;
    *((double *)this + 91) = v14;
    *((long double *)this + 92) = pow(v14, 4.0);
    v15 = llround(*(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * v11);
    LODWORD(v15) = v15 & ~(v15 >> 63);
    *((_DWORD *)this + 186) = v15;
    if ((_DWORD)v15)
    {
      AUNBandEQ::CalculateCoefficients(this, (float64x2_t **)this + 71);
      v17 = (double *)*((_QWORD *)this + 72);
      v18 = (double *)*((_QWORD *)this + 71);
      v19 = *((_QWORD *)this + 68);
      if ((char *)v17 - (char *)v18 == *((_QWORD *)this + 69) - v19)
      {
        if (v18 == v17)
        {
LABEL_19:
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 83) + 16))(*((_QWORD *)this + 83), *((unsigned int *)this + 132));
          *((_DWORD *)this + 186) = 0;
          goto LABEL_31;
        }
        v20 = (double *)(v19 + 16);
        v16 = -1.0;
        while (1)
        {
          v21 = v18[1];
          v23 = v18[2];
          v22 = v18[3];
          v24 = v18[4];
          v25 = *(v20 - 2);
          if ((fabs(*v18) + fabs(v21) + fabs(v22) + fabs(v24) + fabs(v23 + -1.0) >= 1.0e-15
             || fabs(v25) + fabs(*(v20 - 1)) + fabs(v20[1]) + fabs(v20[2]) + fabs(*v20 + -1.0) >= 1.0e-15)
            && (*v18 != v25 || v21 != *(v20 - 1) || v23 != *v20 || v22 != v20[1] || v24 != v20[2]))
          {
            break;
          }
          v20 += 5;
          v18 += 5;
          if (v18 == v17)
            goto LABEL_19;
        }
      }
      if (*((_DWORD *)this + 132))
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = (char *)(*((_QWORD *)this + 74) + v26);
          v30 = *((_QWORD *)this + 77) + v26;
          v31 = *(_QWORD *)(v30 + 32);
          v32 = *(unsigned __int8 *)(v30 + 40);
          if (*((_QWORD *)v29 + 4) == v31 && v29[40] == v32)
          {
            v34 = *v29;
            v36 = *(_OWORD *)(v29 + 17);
            v117 = *(_OWORD *)(v29 + 1);
            *(_OWORD *)v118 = v36;
            *(_OWORD *)&v118[15] = *((_OWORD *)v29 + 2);
            v35 = 1;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          v37 = *((_QWORD *)this + 80) + v27;
          v38 = *(_OWORD *)v118;
          *(_OWORD *)(v37 + 1) = v117;
          *(_BYTE *)v37 = v34;
          *(_OWORD *)(v37 + 17) = v38;
          HIDWORD(v16) = *(_DWORD *)&v118[19];
          *(_OWORD *)(v37 + 32) = *(_OWORD *)&v118[15];
          *(_BYTE *)(v37 + 48) = v35;
          ++v28;
          v27 += 56;
          v26 += 48;
        }
        while (v28 < *((unsigned int *)this + 132));
      }
      LODWORD(v16) = *((_DWORD *)this + 186);
      *((double *)this + 94) = 1.0 / (double)v16;
    }
    else
    {
      AUNBandEQ::CalculateCoefficients(this, (float64x2_t **)this + 68);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 83) + 16))(*((_QWORD *)this + 83), *((unsigned int *)this + 132), *((_QWORD *)this + 68));
    }
  }
LABEL_31:
  if (*((_DWORD *)this + 204))
  {
    v39 = *((_QWORD *)this + 97);
    v40 = *((_QWORD *)this + 96);
    if (a3->mNumberBuffers != (v39 - v40) >> 7)
      return 4294967246;
    if (v39 != v40)
    {
      v41 = 0;
      v42 = 0;
      p_mData = &a3->mBuffers[0].mData;
      do
      {
        v44 = (const float *)*p_mData;
        p_mData += 2;
        PowerMeter::Process((PowerMeter *)(v40 + v41), v44);
        ++v42;
        v40 = *((_QWORD *)this + 96);
        v41 += 128;
      }
      while (v42 < (*((_QWORD *)this + 97) - v40) >> 7);
    }
  }
  v45 = atomic_load((unsigned int *)this + 190);
  if (*((_DWORD *)this + 186))
    v46 = v45 == 0;
  else
    v46 = 0;
  if (v46)
  {
    if ((_DWORD)a5)
    {
      v51 = 0;
      v111 = &a4->mBuffers[0].mData;
      v112 = &a3->mBuffers[0].mData;
      v110 = a5;
      v108 = a3;
      v109 = a4;
      do
      {
        v52 = a5 - v51;
        if (v52 >= 4)
          v53 = 4;
        else
          v53 = v52;
        v54 = *((_DWORD *)this + 186);
        v55 = v54 >= v53;
        v56 = v54 - v53;
        if (v55)
          v57 = v56;
        else
          v57 = 0;
        *((_DWORD *)this + 186) = v57;
        if (v56 != 0 && v55)
        {
          if (v52 <= 3)
            v58 = pow(*((long double *)this + 91), (double)v53);
          else
            v58 = *((double *)this + 92);
          if (*((_DWORD *)this + 132))
          {
            v113 = v53;
            v114 = v51;
            v59 = 0;
            v60 = 0;
            v61 = 1.0 - (double)v57 * *((double *)this + 94);
            v115 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v61, 0);
            v116 = v61;
            v62 = 24;
            v63 = 32;
            do
            {
              v64 = *((_QWORD *)this + 68);
              v65 = v64 + v63 - 32;
              v66 = *((_QWORD *)this + 71);
              v67 = (double *)(v66 + v63 - 32);
              v68 = *((_QWORD *)this + 74);
              v69 = (double *)(v68 + v62 - 24);
              v70 = *((_QWORD *)this + 77);
              v71 = (double *)(v70 + v62 - 24);
              if (*(_BYTE *)(v68 + v62 + 16))
                v72 = *(_BYTE *)(v70 + v62 + 16) == 0;
              else
                v72 = 1;
              if (v72)
              {
                v73 = *((_QWORD *)this + 80);
                if (*(_BYTE *)(v73 + v59 + 48))
                {
                  v74 = *(double *)(v73 + v59);
                  if (v74 == 0.0)
                  {
                    v76 = 0.0;
                  }
                  else
                  {
                    v75 = pow(*v71 / v74, v61);
                    v61 = v116;
                    v76 = v74 * v75;
                  }
                  *v69 = v76;
                  v77 = (double *)(v68 + v62);
                  *((float64x2_t *)v77 - 1) = vmlaq_f64(*(float64x2_t *)(v73 + v59 + 8), v115, vsubq_f64(*(float64x2_t *)(v70 + v62 - 16), *(float64x2_t *)(v73 + v59 + 8)));
                  *v77 = *(double *)(v73 + v59 + 24) + (*(double *)(v70 + v62) - *(double *)(v73 + v59 + 24)) * v61;
                  AUNBandEQ::CalculateCoefficients((BiquadCoefficients *)&v117, v68 + v62 - 24);
                  v61 = v116;
                  v78 = *(_OWORD *)v118;
                  *(_OWORD *)v65 = v117;
                  *(_OWORD *)(v65 + 16) = v78;
                  *(_QWORD *)(v65 + 32) = *(_QWORD *)&v118[16];
                }
                else
                {
                  *(double *)v65 = *v67 + (*(double *)v65 - *v67) * v58;
                  v83 = (double *)(v64 + v63);
                  v84 = (double *)(v66 + v63);
                  v85 = *(v83 - 2);
                  *(v83 - 3) = *(v84 - 3) + (*(v83 - 3) - *(v84 - 3)) * v58;
                  *(v83 - 2) = *(v84 - 2) + (v85 - *(v84 - 2)) * v58;
                  *(v83 - 1) = *(v84 - 1) + (*(v83 - 1) - *(v84 - 1)) * v58;
                  *v83 = *v84 + (*v83 - *v84) * v58;
                }
              }
              else
              {
                v79 = *(_OWORD *)v67;
                v80 = *(_OWORD *)(v66 + v63 - 16);
                *(_QWORD *)(v64 + v63) = *(_QWORD *)(v66 + v63);
                *(_OWORD *)v65 = v79;
                *(_OWORD *)(v64 + v63 - 16) = v80;
                v81 = *(_OWORD *)v71;
                v82 = *(_OWORD *)(v70 + v62 - 8);
                *(_OWORD *)(v68 + v62 + 1) = *(_OWORD *)(v70 + v62 + 1);
                *(_OWORD *)v69 = v81;
                *(_OWORD *)(v68 + v62 - 8) = v82;
              }
              ++v60;
              v63 += 40;
              v62 += 48;
              v59 += 56;
            }
            while (v60 < *((unsigned int *)this + 132));
            v52 = v113;
            v51 = v114;
            LODWORD(a5) = v110;
            a3 = v108;
            a4 = v109;
          }
          else
          {
            v52 = v53;
          }
        }
        else
        {
          v96 = (_BYTE *)*((_QWORD *)this + 71);
          v97 = (_BYTE *)*((_QWORD *)this + 72);
          if (v97 != v96)
            memmove(*((void **)this + 68), v96, v97 - v96);
          v98 = (const void *)*((_QWORD *)this + 77);
          v99 = *((_QWORD *)this + 78) - (_QWORD)v98;
          if (v99)
            memmove(*((void **)this + 74), v98, v99 - 7);
        }
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 83) + 16))(*((_QWORD *)this + 83), *((unsigned int *)this + 132), *((_QWORD *)this + 68));
        v86 = 4 * v52;
        mNumberBuffers = a3->mNumberBuffers;
        if ((_DWORD)mNumberBuffers)
        {
          v88 = (_QWORD *)(*((_QWORD *)this + 84) + 16);
          v89 = v112;
          do
          {
            v90 = (char *)*v89;
            v89 += 2;
            *v88 = &v90[4 * v51];
            *((_DWORD *)v88 - 1) = v86;
            v88 += 2;
            --mNumberBuffers;
          }
          while (mNumberBuffers);
        }
        v91 = a4->mNumberBuffers;
        v92 = *((_QWORD *)this + 87);
        if ((_DWORD)v91)
        {
          v93 = (_QWORD *)(v92 + 16);
          v94 = v111;
          do
          {
            v95 = (char *)*v94;
            v94 += 2;
            *v93 = &v95[4 * v51];
            *((_DWORD *)v93 - 1) = v86;
            v93 += 2;
            --v91;
          }
          while (v91);
        }
        (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 83) + 32))(*((_QWORD *)this + 83), v52, *((_QWORD *)this + 84), v92);
        v51 += v52;
      }
      while (v51 < a5);
    }
  }
  else if (v45 || (v100 = (_DWORD *)*((_QWORD *)this + 83), !v100[4]))
  {
    v47 = a3->mNumberBuffers;
    if (v47 == a4->mNumberBuffers && a3->mNumberBuffers)
    {
      v48 = 0;
      v49 = 0;
      do
      {
        mDataByteSize = a3->mBuffers[v48].mDataByteSize;
        if ((_DWORD)mDataByteSize == a4->mBuffers[v48].mDataByteSize)
        {
          memcpy(a4->mBuffers[v48].mData, a3->mBuffers[v48].mData, mDataByteSize);
          v47 = a3->mNumberBuffers;
        }
        ++v49;
        ++v48;
      }
      while (v49 < v47);
    }
  }
  else
  {
    (*(void (**)(_DWORD *, uint64_t, const AudioBufferList *, AudioBufferList *))(*(_QWORD *)v100 + 32))(v100, a5, a3, a4);
  }
  if (!*((_DWORD *)this + 205))
    return 0;
  v101 = *((_QWORD *)this + 100);
  v102 = *((_QWORD *)this + 99);
  if (a4->mNumberBuffers == (v101 - v102) >> 7)
  {
    if (v101 != v102)
    {
      v103 = 0;
      v104 = 0;
      v105 = &a4->mBuffers[0].mData;
      do
      {
        v106 = (const float *)*v105;
        v105 += 2;
        PowerMeter::Process((PowerMeter *)(v102 + v103), v106);
        ++v104;
        v102 = *((_QWORD *)this + 99);
        v103 += 128;
      }
      while (v104 < (*((_QWORD *)this + 100) - v102) >> 7);
    }
    return 0;
  }
  return 4294967246;
}

uint64_t AUNBandEQ::Render(AUNBandEQ *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  uint64_t Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v14;
  unsigned int v15;

  v8 = (AUNBandEQ *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 80), 0);
  v10 = ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0);
  v15 = 0;
  v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
  result = ausdk::AUInputElement::PullInput(v11, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
    v14 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
    return (*(uint64_t (**)(AUNBandEQ *, unsigned int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 176))(this, a2, BufferList, v14, a4);
  }
  return result;
}

uint64_t AUNBandEQ::GetParameterList(AUNBandEQ *this, int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
    return 4294956430;
  v18 = v4;
  v19 = v5;
  if (a3)
    *a3 = 0;
  if (*((_DWORD *)this + 132))
  {
    v10 = 0;
    v11 = 1;
    v12 = 3000;
    do
    {
      if (a3)
      {
        a3[v11] = v12 - 2000;
        v13 = v12 - 1000;
        a3[v11 + 1] = v13;
        a3[v11 + 2] = v12;
      }
      else
      {
        v13 = (v10 + 2000);
      }
      v14 = v11 + 3;
      v17 = 0.0;
      if (!(*(unsigned int (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, v13, 0, 0, &v17))
      {
        v15 = v17;
        if (v15 <= 0xA)
        {
          if ((unint64_t)(v15 - 1) >= 6)
          {
            if (a3)
              a3[v14] = v12 + 1000;
            v14 = v11 + 4;
          }
          if (((0x186uLL >> v15) & 1) == 0)
          {
            if (a3)
              a3[v14] = v12 + 2000;
            ++v14;
          }
        }
      }
      ++v10;
      v16 = v12 - 2999;
      ++v12;
      v11 = v14;
    }
    while (v16 < *((_DWORD *)this + 132));
  }
  else
  {
    v14 = 1;
  }
  result = 0;
  *a4 = v14;
  return result;
}

uint64_t AUNBandEQ::GetParameterInfo(AUNBandEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  unsigned int v6;
  unsigned int v8;
  const __CFString *v9;
  AudioUnitParameterOptions v10;
  uint64_t v11;
  UInt32 v12;
  const __CFString *v13;
  AudioUnitParameterOptions flags;
  AudioUnitParameterValue v15;
  const __CFString *v16;
  int v17;
  const __CFString *v18;
  AudioUnitParameterValue v19;
  AudioUnitParameterOptions v20;
  const __CFString *v21;
  const __CFString *v22;
  _OWORD v23[8];
  uint64_t *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  buffer->flags = 0;
  buffer->unitName = 0;
  if (a2)
    return 4294956430;
  v6 = a3;
  v23[6] = xmmword_24CA96A58;
  v23[7] = *(_OWORD *)off_24CA96A68;
  v24 = &kAUNBandEQFilterTypeName_ResonantHighShelf;
  v23[2] = xmmword_24CA96A18;
  v23[3] = *(_OWORD *)&off_24CA96A28;
  v23[4] = xmmword_24CA96A38;
  v23[5] = *(_OWORD *)&off_24CA96A48;
  v23[0] = xmmword_24CA969F8;
  v23[1] = *(_OWORD *)&off_24CA96A08;
  if (LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized)
  {
    if (a3)
      goto LABEL_5;
LABEL_8:
    v9 = (const __CFString *)kAUNBandEQParamName_GlobalGain;
    buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_GlobalGain;
    buffer->flags |= 0x8000000u;
    CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
    result = 0;
    buffer->unit = kAudioUnitParameterUnit_Decibels;
    *(_QWORD *)&buffer->minValue = 0x41C00000C2C00000;
    v10 = buffer->flags | 0xC0000000;
    buffer->defaultValue = 0.0;
    buffer->flags = v10;
    return result;
  }
  LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v23, 17);
  if (!v6)
    goto LABEL_8;
LABEL_5:
  if (v6 >= 0x3E8)
  {
    v8 = v6 % 0x3E8;
    if (v6 % 0x3E8 >= *((_DWORD *)this + 132))
      return 4294956418;
    v6 = 1000 * (v6 / 0x3E8);
  }
  else
  {
    v8 = 0;
  }
  LODWORD(v23[0]) = 0;
  if ((*(unsigned int (**)(AUNBandEQ *, _QWORD, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)this + 144))(this, v8 + 2000, 0, 0, v23))
  {
    return 4294956418;
  }
  v11 = *(float *)v23;
  if (v11 > 0xA)
    return 4294956418;
  v12 = v8 + 1;
  result = 4294956418;
  if ((int)v6 <= 2999)
  {
    if (v6 == 1000)
    {
      v22 = (const __CFString *)kAUNBandEQParamName_BypassBand;
      buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_BypassBand;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v22, buffer->name, 52, 0x8000100u);
      buffer->clumpID = v12;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Boolean;
      *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
      v15 = 1.0;
      goto LABEL_28;
    }
    if (v6 == 2000)
    {
      v16 = (const __CFString *)kAUNBandEQParamName_FilterType;
      buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_FilterType;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      buffer->clumpID = v12;
      flags = buffer->flags;
      buffer->unit = kAudioUnitParameterUnit_Indexed;
      *(_QWORD *)&buffer->minValue = 0x4120000000000000;
      buffer->defaultValue = 0.0;
      v17 = -804257792;
LABEL_30:
      v20 = flags | v17;
      goto LABEL_31;
    }
  }
  else
  {
    switch(v6)
    {
      case 0xBB8u:
        v18 = (const __CFString *)kAUNBandEQParamName_Frequency;
        buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Frequency;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
        buffer->clumpID = v12;
        buffer->flags |= 0x100000u;
        *(_QWORD *)&buffer->unit = 0x4120000000000008;
        v19 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * 0.49;
        buffer->maxValue = v19;
        buffer->defaultValue = 1000.0;
        v20 = buffer->flags | 0xC0000000;
LABEL_31:
        result = 0;
        buffer->flags = v20;
        return result;
      case 0xFA0u:
        if ((unint64_t)(v11 - 1) >= 6)
        {
          v21 = (const __CFString *)kAUNBandEQParamName_Gain;
          buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Gain;
          buffer->flags |= 0x8000000u;
          CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
          buffer->clumpID = v12;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Decibels;
          *(_QWORD *)&buffer->minValue = 0x41C00000C2C00000;
          buffer->defaultValue = 0.0;
LABEL_29:
          v17 = -1072693248;
          goto LABEL_30;
        }
        return 4294956418;
      case 0x1388u:
        if (((0x186uLL >> v11) & 1) == 0)
        {
          v13 = (const __CFString *)kAUNBandEQParamName_Bandwidth;
          buffer->cfNameString = (CFStringRef)kAUNBandEQParamName_Bandwidth;
          buffer->flags |= 0x8000000u;
          CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
          buffer->clumpID = v12;
          flags = buffer->flags;
          buffer->unit = kAudioUnitParameterUnit_Octaves;
          *(_QWORD *)&buffer->minValue = 0x40A000003D4CCCCDLL;
          v15 = 0.5;
LABEL_28:
          buffer->defaultValue = v15;
          goto LABEL_29;
        }
        return 4294956418;
    }
  }
  return result;
}

uint64_t AUNBandEQ::SaveState(AUNBandEQ *this, __CFDictionary **a2)
{
  __CFDictionary *v4;

  ausdk::AUBase::SaveState(this, a2);
  v4 = *a2;
  AddNumToDictionary(v4, CFSTR("numberOfBands"), *((_DWORD *)this + 132));
  AddNumToDictionary(v4, CFSTR("ParametricType"), 11);
  return 0;
}

uint64_t AUNBandEQ::RestoreState(OpaqueAudioComponentInstance **this, __CFDictionary *a2)
{
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  float Parameter;
  float v9;
  float v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  OpaqueAudioComponentInstance *v16;
  ausdk::AUElement *v17;
  ausdk::AUElement **v18;
  float v19;
  unsigned int v20;
  unsigned int v21;

  v21 = 0;
  if (GetNumFromDictionary(a2, CFSTR("numberOfBands"), (int *)&v21)
    || (result = AUNBandEQ::SetNumBands((AUNBandEQ *)this, v21), !(_DWORD)result))
  {
    result = ausdk::AUBase::RestoreState(this, a2);
    v5 = (unsigned int *)(this + 67);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    if (!(_DWORD)result)
    {
      result = GetNumFromDictionary(a2, CFSTR("ParametricType"), (int *)&v21);
      if ((_DWORD)result)
      {
        if (*((_DWORD *)this + 132))
        {
          v7 = 3000;
          do
          {
            if (!ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, v7 - 1000))
            {
              Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, v7);
              v9 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, v7 + 1000);
              v10 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, v7 + 2000);
              v11 = Parameter
                  * 6.28318531
                  / *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0) + 80);
              v12 = __exp10(v9 * 0.5 * 0.05);
              v13 = sin(v11);
              v14 = sinh(v10 * 0.34657359 * v11 / v13);
              v15 = asinh(0.5 / (1.0 / (v14 + v14) / v12));
              v16 = this[9];
              if (v16)
              {
                v17 = (ausdk::AUElement *)(*(uint64_t (**)(OpaqueAudioComponentInstance *, _QWORD))(*(_QWORD *)v16 + 32))(v16, 0);
              }
              else
              {
                v18 = (ausdk::AUElement **)this[6];
                if (this[7] == (OpaqueAudioComponentInstance *)v18)
                  v17 = 0;
                else
                  v17 = *v18;
              }
              v19 = (v13 + v13) * v15 / (v11 * 0.693147181);
              ausdk::AUElement::SetParameter(v17, v7 + 2000, v19, 0);
            }
            v20 = v7 - 2999;
            ++v7;
          }
          while (v20 < *((_DWORD *)this + 132));
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t AUNBandEQ::GetParameterValueStrings(AUNBandEQ *this, int a2, unsigned int a3, const __CFArray **a4)
{
  uint64_t result;
  const __CFArray *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = 4294956418;
  if (!a2 && a3 >= 0x3E8 && a3 % 0x3E8 < *((_DWORD *)this + 132) && 1000 * (a3 / 0x3E8) == 2000)
  {
    if (a4)
    {
      v14 = xmmword_24CA96A58;
      v15 = *(_OWORD *)off_24CA96A68;
      v16 = &kAUNBandEQFilterTypeName_ResonantHighShelf;
      v10 = xmmword_24CA96A18;
      v11 = *(_OWORD *)&off_24CA96A28;
      v12 = xmmword_24CA96A38;
      v13 = *(_OWORD *)&off_24CA96A48;
      v8 = xmmword_24CA969F8;
      v9 = *(_OWORD *)&off_24CA96A08;
      if (!LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized)
        LocalizeAUParameterStringsForClass<AUNBandEQ>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)&v8, 17);
      *(_QWORD *)&v8 = kAUNBandEQFilterTypeName_Parametric;
      *((_QWORD *)&v8 + 1) = kAUNBandEQFilterTypeName_2ndOrderButterworthLowPass;
      *(_QWORD *)&v9 = kAUNBandEQFilterTypeName_2ndOrderButterworthHighPass;
      *((_QWORD *)&v9 + 1) = kAUNBandEQFilterTypeName_ResonantLowPass;
      *(_QWORD *)&v10 = kAUNBandEQFilterTypeName_ResonantHighPass;
      *((_QWORD *)&v10 + 1) = kAUNBandEQFilterTypeName_BandPass;
      v11 = __PAIR128__(kAUNBandEQFilterTypeName_LowShelf, kAUNBandEQFilterTypeName_BandStop);
      *(_QWORD *)&v12 = kAUNBandEQFilterTypeName_HighShelf;
      *((_QWORD *)&v12 + 1) = kAUNBandEQFilterTypeName_ResonantLowShelf;
      *(_QWORD *)&v13 = kAUNBandEQFilterTypeName_ResonantHighShelf;
      v7 = CFArrayCreate(0, (const void **)&v8, 11, 0);
      result = 0;
      *a4 = v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double AUNBandEQ::GetLatency(AUNBandEQ *this)
{
  return 0.0;
}

double AUNBandEQ::GetTailTime(AUNBandEQ *this)
{
  return 0.05;
}

uint64_t AUNBandEQ::SupportsTail(AUNBandEQ *this)
{
  return 1;
}

BOOL AUNBandEQ::StreamFormatWritable(AUNBandEQ *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNBandEQ::SupportedNumChannels(AUNBandEQ *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNBandEQ::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 1;
}

uint64_t AUNBandEQ::ChangeStreamFormat(AUNBandEQ *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  __n128 v8;
  unsigned int *v9;
  unsigned int v10;

  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  v8.n128_u64[0] = *(_QWORD *)&a4->mSampleRate;
  if (a4->mSampleRate != a5->mSampleRate)
  {
    v9 = (unsigned int *)((char *)this + 536);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    (*(void (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 432))(this, 3, 0, 0, v8);
  }
  return 0;
}

uint64_t AUNBandEQ::Version(AUNBandEQ *this)
{
  return 0x10000;
}

uint64_t GetNumFromDictionary(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  const __CFNumber *Value;

  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 4294956445;
  CFNumberGetValue(Value, kCFNumberSInt32Type, a3);
  return 0;
}

uint64_t AUNBandEQ::SetNumBands(AUNBandEQ *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned int *v17;
  unsigned int v18;

  v2 = *((unsigned int *)this + 132);
  if ((_DWORD)v2 == a2)
    return 0;
  if (a2 - 1 < *((_DWORD *)this + 133))
  {
    if (v2 < a2)
    {
      v5 = 48 * v2;
      v6 = 40 * v2;
      v7 = 56 * v2;
      do
      {
        AUNBandEQ::SetDefaultParametersForBand(this, v2);
        v8 = (_QWORD *)(*((_QWORD *)this + 71) + v6);
        *v8 = 0;
        v8[1] = 0;
        v8[3] = 0;
        v8[4] = 0;
        v8[2] = 0x3FF0000000000000;
        v9 = *((_QWORD *)this + 68) + v6;
        v10 = *(_OWORD *)v8;
        v11 = *((_OWORD *)v8 + 1);
        *(_QWORD *)(v9 + 32) = 0;
        *(_OWORD *)v9 = v10;
        *(_OWORD *)(v9 + 16) = v11;
        v12 = (_OWORD *)(*((_QWORD *)this + 77) + v5);
        *v12 = 0u;
        v12[1] = 0u;
        *(_OWORD *)((char *)v12 + 25) = 0u;
        v13 = (__int128 *)(*((_QWORD *)this + 74) + v5);
        *(__int128 *)((char *)v13 + 25) = 0u;
        *v13 = 0u;
        v13[1] = 0u;
        v14 = *((_QWORD *)this + 80) + v7;
        if (*(_BYTE *)(v14 + 48))
        {
          *(_OWORD *)(v14 + 25) = 0uLL;
          *(_OWORD *)v14 = 0uLL;
          *(_OWORD *)(v14 + 16) = 0uLL;
        }
        else
        {
          v15 = *v13;
          v16 = v13[2];
          *(_OWORD *)(v14 + 16) = v13[1];
          *(_OWORD *)(v14 + 32) = v16;
          *(_OWORD *)v14 = v15;
          *(_BYTE *)(v14 + 48) = 1;
        }
        LODWORD(v2) = v2 + 1;
        v7 += 56;
        v5 += 48;
        v6 += 40;
      }
      while (a2 != (_DWORD)v2);
    }
    *((_DWORD *)this + 132) = a2;
    (*(void (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 3, 0, 0);
    (*(void (**)(AUNBandEQ *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 4, 0, 0);
    v17 = (unsigned int *)((char *)this + 536);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    return 0;
  }
  return 4294956445;
}

void AUNBandEQ::SetDefaultParametersForBand(AUNBandEQ *this, unsigned int a2)
{
  ausdk::AUScope *v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  long double v9;
  ausdk::AUElement *Element;
  ausdk::AUElement *v11;
  ausdk::AUElement *v12;
  ausdk::AUElement *v13;
  ausdk::AUElement *v14;

  v4 = (AUNBandEQ *)((char *)this + 32);
  v5 = *(double *)(ausdk::AUScope::SafeGetElement((AUNBandEQ *)((char *)this + 128), 0) + 80) * 0.5;
  v6 = v5 / 40.0;
  v7 = v5 < 10000.0;
  v8 = 250.0;
  if (v7)
    v8 = v6;
  v9 = pow(v8, (double)a2 / (double)(*((_DWORD *)this + 133) - 1)) * 40.0;
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(Element, a2 + 1000, 1.0, 0);
  v11 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v11, a2 + 2000, 0.0, 0);
  v12 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  *(float *)&v9 = v9;
  ausdk::AUElement::SetParameter(v12, a2 + 3000, *(float *)&v9, 0);
  v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v13, a2 + 4000, 0.0, 0);
  v14 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v4, 0);
  ausdk::AUElement::SetParameter(v14, a2 + 5000, 0.5, 0);
}

void AddNumToDictionary(__CFDictionary *a1, const __CFString *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

void AUNBandEQ::CalculateCoefficients(ausdk::AUEffectBase *this, float64x2_t **a2)
{
  unint64_t v2;
  float Parameter;
  uint64_t Element;
  char *v7;
  char *v8;
  float64x2_t *v9;
  unint64_t v10;
  int v11;
  double v12;
  unsigned int v13;
  double v14;
  double v15;
  float v16;
  double v17;
  long double v18;
  double v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  _OWORD v27[2];
  uint64_t v28;
  __int128 v29;
  _OWORD v30[2];

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 3);
  if (v2 < *((unsigned int *)this + 132))
    __assert_rtn("CalculateCoefficients", "AUNBandEQ.cpp", 1085, "coefs.size() >= mNumBands");
  if (v2 > *((unsigned int *)this + 133))
    __assert_rtn("CalculateCoefficients", "AUNBandEQ.cpp", 1086, "coefs.size() <= mMaxBands");
  Parameter = ausdk::AUEffectBase::GetParameter(this, 0);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this + 128), 0);
  if ((float64x2_t **)((char *)this + 568) == a2)
    v7 = (char *)this + 616;
  else
    v7 = 0;
  if ((float64x2_t **)((char *)this + 544) == a2)
    v8 = (char *)this + 592;
  else
    v8 = v7;
  v9 = a2[1];
  if (v9 == *a2)
  {
    v24 = Parameter;
LABEL_25:
    v25 = __exp10(v24 * 0.05);
    v9[1] = vmulq_n_f64(v9[1], v25);
    v9[2].f64[0] = v25 * v9[2].f64[0];
    if (v8)
      *(double *)(*(_QWORD *)v8 + 24) = v24;
    return;
  }
  v10 = 0;
  v11 = 0;
  v12 = *(double *)(Element + 80);
  v26 = Parameter;
  v13 = 3000;
  do
  {
    memset((char *)v30 + 8, 0, 17);
    v14 = ausdk::AUEffectBase::GetParameter(this, v13);
    v15 = v14 * 6.28318531 / v12;
    *(double *)&v29 = v15;
    v16 = ausdk::AUEffectBase::GetParameter(this, v13 + 2000);
    v17 = sin(v15);
    if (v17 == 0.0)
    {
      v19 = 0.0;
    }
    else
    {
      v18 = sinh(v16 * 0.34657359 * v15 / v17);
      v19 = 1.0 / (v18 + v18);
    }
    *((double *)&v29 + 1) = v19;
    *(double *)v30 = ausdk::AUEffectBase::GetParameter(this, v13 + 1000);
    *(_QWORD *)&v30[1] = (uint64_t)ausdk::AUEffectBase::GetParameter(this, v13 - 1000);
    if (ausdk::AUEffectBase::GetParameter(this, v13 - 2000) == 0.0 && v12 * 0.49 >= v14)
    {
      BYTE8(v30[1]) = v13 - 3000 >= *((_DWORD *)this + 132);
      if (((v11 | BYTE8(v30[1])) & 1) == 0)
      {
        *((double *)v30 + 1) = v26;
        v11 = 1;
      }
    }
    else
    {
      BYTE8(v30[1]) = 1;
    }
    AUNBandEQ::CalculateCoefficients((BiquadCoefficients *)v27, (uint64_t)&v29);
    v20 = (uint64_t)*a2 + 40 * v10;
    v21 = v27[1];
    *(_OWORD *)v20 = v27[0];
    *(_OWORD *)(v20 + 16) = v21;
    *(_QWORD *)(v20 + 32) = v28;
    if (v8)
    {
      v22 = (_OWORD *)(*(_QWORD *)v8 + 48 * v10);
      v23 = v30[0];
      *v22 = v29;
      v22[1] = v23;
      *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v30 + 9);
    }
    v10 = v13 - 2999;
    v9 = *a2;
    ++v13;
  }
  while (0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 3) > v10);
  v24 = v26;
  if ((v11 & 1) == 0)
    goto LABEL_25;
}

double AUNBandEQ::CalculateCoefficients(BiquadCoefficients *this, uint64_t a2)
{
  long double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  int v10;
  float v11;
  double v12;
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0x3FF0000000000000;
  if (*(_BYTE *)(a2 + 40))
  {
LABEL_2:
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    switch(*(_QWORD *)(a2 + 32))
    {
      case 0:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = *(double *)(a2 + 16);
        v7 = 11;
        goto LABEL_23;
      case 1:
        v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0)
          goto LABEL_2;
        if (v8 > 3.11017673)
          v8 = 3.11017673;
        v9 = 0.0;
        v10 = 1;
        goto LABEL_28;
      case 2:
        v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0)
          goto LABEL_2;
        if (v8 > 3.11017673)
          v8 = 3.11017673;
        v9 = 0.0;
        v10 = 2;
        goto LABEL_28;
      case 3:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = 0.0;
        v7 = 1;
        goto LABEL_23;
      case 4:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = 0.0;
        v7 = 2;
        goto LABEL_23;
      case 5:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = 0.0;
        v7 = 3;
        goto LABEL_23;
      case 6:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = 0.0;
        v7 = 4;
        goto LABEL_23;
      case 7:
        v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0)
          goto LABEL_2;
        v9 = *(double *)(a2 + 16);
        if (v8 > 3.11017673)
          v8 = 3.11017673;
        v10 = 7;
        goto LABEL_28;
      case 8:
        v8 = *(double *)a2;
        if (*(double *)a2 <= 0.0)
          goto LABEL_2;
        v9 = *(double *)(a2 + 16);
        if (v8 > 3.11017673)
          v8 = 3.11017673;
        v10 = 8;
LABEL_28:
        BiquadCoefficients::SetPriv(this, v10, v8, 0.707106781, v9);
        break;
      case 9:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = *(double *)(a2 + 16);
        v7 = 7;
        goto LABEL_23;
      case 0xALL:
        v4 = *(double *)a2;
        v5 = *(double *)(a2 + 8);
        v6 = *(double *)(a2 + 16);
        v7 = 8;
LABEL_23:
        BiquadCoefficients::SetQ(this, v7, v4, v5, v6);
        break;
      default:
        goto LABEL_2;
    }
  }
  v11 = *(double *)(a2 + 24);
  v12 = __exp10(v11 * 0.05);
  *((float64x2_t *)this + 1) = vmulq_n_f64(*((float64x2_t *)this + 1), v12);
  result = v12 * *((double *)this + 4);
  *((double *)this + 4) = result;
  return result;
}

void std::vector<BiquadCoefficients>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[40 * a2];
  }
  else
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 3) >= v7)
    {
      v22 = &v4[40 * v7];
      do
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 3) = 0;
        *((_QWORD *)v4 + 4) = 0;
        *((_QWORD *)v4 + 2) = 0x3FF0000000000000;
        v4 += 40;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 > 0x666666666666666)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 3);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x333333333333333)
        v11 = 0x666666666666666;
      else
        v11 = v10;
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(v11);
      v14 = &v12[40 * v6];
      v15 = &v12[40 * a2];
      v16 = v14;
      do
      {
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *((_QWORD *)v16 + 2) = 0x3FF0000000000000;
        v16 += 40;
      }
      while (v16 != v15);
      v17 = &v12[40 * v13];
      v19 = (char *)*a1;
      v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          v20 = *(_OWORD *)(v18 - 40);
          v21 = *(_OWORD *)(v18 - 24);
          *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
          *(_OWORD *)(v14 - 24) = v21;
          *(_OWORD *)(v14 - 40) = v20;
          v14 -= 40;
          v18 -= 40;
        }
        while (v18 != v19);
        v18 = (char *)*a1;
      }
      *a1 = v14;
      a1[1] = v15;
      a1[2] = v17;
      if (v18)
        operator delete(v18);
    }
  }
}

void std::vector<AUNBandEQ::PolarDesc>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v4[48 * a2];
    goto LABEL_18;
  }
  v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4) >= v6)
  {
    bzero(a1[1], 48 * ((48 * v6 - 48) / 0x30) + 48);
    v19 = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
LABEL_18:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x555555555555555)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4);
  v9 = 2 * v8;
  if (2 * v8 <= a2)
    v9 = a2;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v9;
  if (v10 > 0x555555555555555)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = 3 * v10;
  v12 = (char *)operator new(48 * v10);
  v13 = &v12[48 * v5];
  v14 = &v12[16 * v11];
  v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v13, v15);
  v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      v17 = *((_OWORD *)v3 - 3);
      v18 = *((_OWORD *)v3 - 2);
      *(_OWORD *)(v13 - 23) = *(_OWORD *)(v3 - 23);
      *((_OWORD *)v13 - 3) = v17;
      *((_OWORD *)v13 - 2) = v18;
      v13 -= 48;
      v3 -= 48;
    }
    while (v3 != v4);
    v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
    operator delete(v3);
}

void std::vector<std::optional<AUNBandEQ::PolarDesc>>::resize(_QWORD *a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE *v20;

  v4 = (_BYTE *)*a1;
  v5 = (_BYTE *)a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v5[-*a1] >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v20 = &v4[56 * a2];
    goto LABEL_21;
  }
  v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v5) >> 3) >= v7)
  {
    v20 = &v5[56 * v7];
    do
    {
      *v5 = 0;
      v5[48] = 0;
      v5 += 56;
    }
    while (v5 != v20);
LABEL_21:
    a1[1] = v20;
    return;
  }
  if (a2 > 0x492492492492492)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)v4) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x249249249249249)
    v11 = 0x492492492492492;
  else
    v11 = v10;
  if (v11 > 0x492492492492492)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(56 * v11);
  v13 = &v12[56 * v6];
  v14 = &v12[56 * a2];
  v15 = v13;
  do
  {
    *v15 = 0;
    v15[48] = 0;
    v15 += 56;
  }
  while (v15 != v14);
  v16 = (_BYTE *)*a1;
  if (v5 != (_BYTE *)*a1)
  {
    do
    {
      v17 = *(_OWORD *)(v5 - 56);
      v18 = *(_OWORD *)(v5 - 40);
      v19 = *(_OWORD *)(v5 - 24);
      *(v13 - 8) = *(v5 - 8);
      *(_OWORD *)(v13 - 24) = v19;
      *(_OWORD *)(v13 - 40) = v18;
      *(_OWORD *)(v13 - 56) = v17;
      v13 -= 56;
      v5 -= 56;
    }
    while (v5 != v16);
    v5 = (_BYTE *)*a1;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[56 * v11];
  if (v5)
    operator delete(v5);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

_QWORD *std::vector<BiquadCoefficients>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<BiquadCoefficients>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[5 * v5];
    v6 = &v4[5 * a2];
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[3] = 0;
      v4[4] = 0;
      v4[2] = 0x3FF0000000000000;
      v4 += 5;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_210AD7794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_210AD7808(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

unint64_t PowerMeter::GetValue(PowerMeter *this)
{
  double v2;
  unsigned int v3;
  double v4;

  PowerMeter::LinearToDB(this, *((double *)this + 14));
  *(float *)&v3 = v2;
  PowerMeter::LinearToDB(this, *((double *)this + 15));
  *(float *)&v4 = v4;
  return v3 | ((unint64_t)LODWORD(v4) << 32);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

os_log_t ___ZN9AUNBandEQC2EP28OpaqueAudioComponentInstance_block_invoke()
{
  _QWORD *v0;
  os_log_t result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  result = os_log_create("com.apple.coreaudio", "nbeq");
  *v0 = result;
  kAUNBandEQSubsystem = (uint64_t)v0;
  return result;
}

void AUAudioFilePlayer::~AUAudioFilePlayer(AUAudioFilePlayer *this)
{
  AUAudioFilePlayer::~AUAudioFilePlayer(this);
  JUMPOUT(0x212BCDF50);
}

{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_24CA8F328;
  AUAudioFilePlayer::DeallocateBuffers(this);
  v2 = (const void *)*((_QWORD *)this + 121);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 122);
  if (v3)
    CFRelease(v3);
  MEMORY[0x212BCD890]((char *)this + 984);
  CADeprecated::CAMutex::~CAMutex((AUAudioFilePlayer *)((char *)this + 824));
  std::__list_imp<AFPEvent>::clear((_QWORD *)this + 100);
  AudioFileMgr::~AudioFileMgr((AUAudioFilePlayer *)((char *)this + 776));
  AUScheduledSoundPlayer::~AUScheduledSoundPlayer(this);
}

uint64_t AUAudioFilePlayer::Initialize(AUAudioFilePlayer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 118);
  if (!v2)
  {
    v2 = AFPReadThread::sInstance;
    if (!AFPReadThread::sInstance)
    {
      v2 = operator new();
      *(_QWORD *)v2 = off_24CA94908;
      CADeprecated::CAPThread::CAPThread((CADeprecated::CAPThread *)v2, MEMORY[0x24BED30A8], (void *)v2, 61, 1, 0, 0);
      *(_QWORD *)(v2 + 128) = "AFPReadThread";
      *(_BYTE *)(v2 + 136) = 0;
      *(_QWORD *)v2 = &off_24CA8C358;
      *(_QWORD *)(v2 + 144) = 0;
      *(_QWORD *)(v2 + 152) = 0;
      *(_QWORD *)(v2 + 160) = 0;
      *(_QWORD *)(v2 + 168) = v2 + 168;
      *(_QWORD *)(v2 + 176) = v2 + 168;
      *(_QWORD *)(v2 + 184) = 0;
      MEMORY[0x212BCD608](v2 + 192, "mReadThreadGuard");
      *(_BYTE *)(v2 + 123) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      AFPReadThread::sInstance = v2;
    }
    *((_QWORD *)this + 118) = v2;
  }
  *((_BYTE *)this + 936) = 0;
  AFPReadThread::AddClient((AFPReadThread *)v2, this);
  *((_BYTE *)this + 952) = 0;
  (*(void (**)(AUAudioFilePlayer *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 65542, 0, 0);
  return 0;
}

uint64_t AUAudioFilePlayer::Cleanup(AFPReadThread **this)
{
  AFPReadThread *v2;

  (*((void (**)(AFPReadThread **, _QWORD, _QWORD))*this + 9))(this, 0, 0);
  v2 = this[118];
  if (v2)
  {
    AFPReadThread::RemoveClient(v2, (AUAudioFilePlayer *)this, 0);
    this[118] = 0;
  }
  if (this[97] != this[98])
    AudioFileMgr::ReleaseFiles((uint64_t *)this + 97);
  return AUAudioFilePlayer::DeallocateBuffers((AUAudioFilePlayer *)this);
}

uint64_t AUAudioFilePlayer::Reset(AUAudioFilePlayer *this)
{
  AFPReadThread *v2;
  int v3;
  uint64_t i;
  void (*v5)(_QWORD, uint64_t, _QWORD);
  AFPReadThread *v6;

  v2 = (AFPReadThread *)*((_QWORD *)this + 118);
  if (v2)
    AFPReadThread::RemoveClient(v2, this, 1);
  (*(void (**)(AUAudioFilePlayer *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 65542, 0, 0);
  AUScheduledSoundPlayer::Reset(this);
  *((_BYTE *)this + 936) = 0;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 103) + 16))((char *)this + 824);
  for (i = *((_QWORD *)this + 101);
        (AUAudioFilePlayer *)i != (AUAudioFilePlayer *)((char *)this + 800);
        i = *(_QWORD *)(i + 8))
  {
    v5 = *(void (**)(_QWORD, uint64_t, _QWORD))(i + 80);
    if (v5)
      v5(*(_QWORD *)(i + 88), i + 16, *(unsigned int *)(i + 144));
  }
  std::__list_imp<AFPEvent>::clear((_QWORD *)this + 100);
  if (v3)
    (*(void (**)(char *))(*((_QWORD *)this + 103) + 24))((char *)this + 824);
  v6 = (AFPReadThread *)*((_QWORD *)this + 118);
  if (v6)
    AFPReadThread::AddClient(v6, this);
  return 0;
}

void sub_210AD7DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AUAudioFilePlayer::GetPropertyInfo(AUAudioFilePlayer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;

  result = 4294956417;
  if (a2 <= 3301)
  {
    if (a2 != 37)
    {
      if (a2 == 3300)
      {
        result = 0;
        v7 = 112;
      }
      else
      {
        if (a2 != 3301)
          return result;
        result = 0;
        v7 = 64;
      }
      *a5 = v7;
      *a6 = 1;
      return result;
    }
    result = 0;
    *a6 = 1;
    v8 = 4;
LABEL_16:
    *a5 = v8;
    return result;
  }
  if (a2 <= 3318)
  {
    if (a2 == 3302)
    {
      result = 0;
      *a5 = 64;
      *a6 = 0;
      return result;
    }
    if (a2 != 3318)
      return result;
    goto LABEL_12;
  }
  if (a2 == 65542)
  {
    result = 0;
    *a6 = 0;
    *a5 = 0;
    return result;
  }
  if (a2 == 3319)
  {
LABEL_12:
    result = 0;
    *a6 = 1;
    v8 = 8;
    goto LABEL_16;
  }
  return result;
}

uint64_t AUAudioFilePlayer::GetProperty(AUAudioFilePlayer *this, int a2, unsigned int a3, unsigned int a4, _OWORD *a5)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double v11;

  result = 4294956417;
  if (a2 <= 3301)
  {
    if (a2 == 37)
    {
      result = 0;
      *(_DWORD *)a5 = *((unsigned __int8 *)this + 772);
    }
    else if (a2 == 3301)
    {
      result = 0;
      v8 = *((_OWORD *)this + 41);
      v9 = *((_OWORD *)this + 42);
      v10 = *((_OWORD *)this + 44);
      a5[2] = *((_OWORD *)this + 43);
      a5[3] = v10;
      *a5 = v8;
      a5[1] = v9;
    }
  }
  else
  {
    switch(a2)
    {
      case 3302:
        *((_DWORD *)a5 + 14) = 1;
        v11 = -1.0;
        if (*((double *)this + 90) >= 0.0)
          v11 = *((double *)this + 80);
        result = 0;
        *(double *)a5 = v11;
        break;
      case 3318:
        result = 0;
        v7 = *((_QWORD *)this + 122);
        goto LABEL_14;
      case 3319:
        result = 0;
        v7 = *((_QWORD *)this + 121);
LABEL_14:
        *(_QWORD *)a5 = v7;
        break;
    }
  }
  return result;
}

uint64_t AUAudioFilePlayer::SetProperty(AFPReadThread **this, int a2, unsigned int a3, unsigned int a4, double *a5, unsigned int a6, __n128 a7, double a8, double a9, double a10)
{
  double *v11;
  uint64_t v13;
  uint64_t Element;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  AFPReadThread *v18;
  AFPReadThread *v19;
  AFPReadThread *v20;
  int64_t v21;
  char *v22;
  AFPReadThread *v23;
  uint64_t v24;
  AFPReadThread *v25;
  AFPReadThread *v26;
  AFPReadThread *v27;
  AFPReadThread *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  AFPReadThread *v32;
  AFPReadThread *v33;
  AFPReadThread *v34;
  int64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  AFPReadThread *v39;
  AFPReadThread *v40;
  unint64_t v41;
  AFPReadThread *v42;
  AFPReadThread *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  AFPReadThread *v47;
  unint64_t v48;
  AFPReadThread *v49;
  int v50;
  int v51;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  OpaqueExtAudioFile *v57;
  double v58;
  AFPReadThread *v59;
  AFPReadThread *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  AFPReadThread *v64;
  unint64_t v65;
  AFPReadThread *v66;
  AFPReadThread *v67;
  AFPReadThread *v68;
  AFPReadThread *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  AFPReadThread *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  ExtAudioFileRef *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  AFPReadThread *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  AFPReadThread *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  AFPReadThread *v99;
  AFPReadThread *v100;
  AFPReadThread *v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  AFPReadThread *v107;
  int64_t v108;
  AFPReadThread *v109;
  size_t v110;
  AFPReadThread *v111;
  AFPReadThread *v112;
  char *v113;
  double v114;
  unsigned int v115;
  double v116;
  unint64_t v117;
  int v118;
  double v119;
  int v120;
  AFPReadThread *v121;
  uint64_t v122;
  int v123;
  int v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  AFPReadThread *v128;
  uint64_t v129;
  int v130;
  _OWORD v131[2];
  uint64_t v132;
  UInt32 ioDataSize;
  ExtAudioFileRef outExtAudioFile[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;

  v11 = a5;
  v13 = 4294956417;
  if (a2 > 3309)
  {
    switch(a2)
    {
      case 3310:
        Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(this + 16), 0);
        v15 = *(_OWORD *)(Element + 96);
        v131[0] = *(_OWORD *)(Element + 80);
        v131[1] = v15;
        v132 = *(_QWORD *)(Element + 112);
        (*((void (**)(AFPReadThread **, _QWORD, _QWORD))*this + 9))(this, 0, 0);
        if ((a6 & 7) != 0)
          return 4294956445;
        v16 = a6 >> 3;
        AUAudioFilePlayer::AllocateBuffers((AUAudioFilePlayer *)this);
        v17 = (uint64_t)this[116];
        v18 = this[97];
        v19 = this[98];
        if (v18 != v19)
        {
          v20 = this[97];
          do
          {
            *((_BYTE *)v20 + 56) = 1;
            v20 = (AFPReadThread *)((char *)v20 + 64);
          }
          while (v20 != v19);
        }
        if (v16 > (this[99] - v18) >> 6)
        {
          v21 = v19 - v18;
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AFPAudioFileInfo>>(a6 >> 3);
          v23 = (AFPReadThread *)&v22[v21 & 0xFFFFFFFFFFFFFFC0];
          v25 = (AFPReadThread *)&v22[64 * v24];
          v26 = this[98];
          v27 = this[97];
          v28 = v23;
          if (v26 != v27)
          {
            do
            {
              v29 = *((_OWORD *)v26 - 4);
              v30 = *((_OWORD *)v26 - 3);
              v31 = *((_OWORD *)v26 - 1);
              *((_OWORD *)v28 - 2) = *((_OWORD *)v26 - 2);
              *((_OWORD *)v28 - 1) = v31;
              *((_OWORD *)v28 - 4) = v29;
              *((_OWORD *)v28 - 3) = v30;
              v28 = (AFPReadThread *)((char *)v28 - 64);
              v26 = (AFPReadThread *)((char *)v26 - 64);
            }
            while (v26 != v27);
            v26 = this[97];
          }
          this[97] = v28;
          this[98] = v23;
          this[99] = v25;
          if (v26)
            operator delete(v26);
        }
        if (a6 >= 8)
        {
          v56 = (uint64_t *)(this + 123);
          v129 = v17;
          do
          {
            v58 = *v11++;
            v57 = *(OpaqueExtAudioFile **)&v58;
            v59 = this[97];
            v60 = this[98];
            if (v60 == v59)
            {
              v59 = this[98];
            }
            else
            {
              v61 = (v60 - v59) >> 6;
              do
              {
                v62 = v61 >> 1;
                v63 = (unint64_t *)((char *)v59 + 64 * (v61 >> 1));
                v65 = *v63;
                v64 = (AFPReadThread *)(v63 + 8);
                v61 += ~(v61 >> 1);
                if (v65 < (unint64_t)v57)
                  v59 = v64;
                else
                  v61 = v62;
              }
              while (v61);
            }
            if (v60 != v59 && *(OpaqueExtAudioFile **)v59 == v57)
            {
              *((_BYTE *)v59 + 56) = 0;
              AudioFileMgr::SetBuffer((uint64_t)v59, v17);
            }
            else
            {
              outExtAudioFile[0] = v57;
              ioDataSize = 40;
              if (!AudioFileGetProperty(v57, 0x64666D74u, &ioDataSize, &v135)
                && !AudioFileMgr::WrapFile(outExtAudioFile, (unsigned int *)v131, v56))
              {
                BYTE8(v137) = 0;
                v66 = this[98];
                v67 = this[99];
                if (v66 >= v67)
                {
                  v74 = this[97];
                  v75 = ((v66 - v74) >> 6) + 1;
                  if (v75 >> 58)
                    std::vector<void const*>::__throw_length_error[abi:ne180100]();
                  v76 = v67 - v74;
                  if (v76 >> 5 > v75)
                    v75 = v76 >> 5;
                  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFC0)
                    v77 = 0x3FFFFFFFFFFFFFFLL;
                  else
                    v77 = v75;
                  if (v77)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AFPAudioFileInfo>>(v77);
                  }
                  else
                  {
                    v79 = 0;
                    v78 = 0;
                  }
                  v87 = v59 - v74;
                  v88 = (v59 - v74) >> 6;
                  v89 = &v79[64 * v88];
                  v90 = (AFPReadThread *)&v79[64 * v78];
                  if (v88 == v78)
                  {
                    if (v87 < 1)
                    {
                      if (v59 == v74)
                        v92 = 1;
                      else
                        v92 = v87 >> 5;
                      v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AFPAudioFileInfo>>(v92);
                      v89 = &v93[64 * (v92 >> 2)];
                      v90 = (AFPReadThread *)&v93[64 * v94];
                      if (v79)
                      {
                        v95 = (AFPReadThread *)&v93[64 * v94];
                        operator delete(v79);
                        v90 = v95;
                      }
                    }
                    else
                    {
                      if (v88 >= -1)
                        v91 = v88 + 1;
                      else
                        v91 = v88 + 2;
                      v89 -= 64 * (v91 >> 1);
                    }
                  }
                  v96 = *(_OWORD *)outExtAudioFile;
                  v97 = v135;
                  v98 = v137;
                  *((_OWORD *)v89 + 2) = v136;
                  *((_OWORD *)v89 + 3) = v98;
                  *(_OWORD *)v89 = v96;
                  *((_OWORD *)v89 + 1) = v97;
                  v99 = this[97];
                  v100 = (AFPReadThread *)v89;
                  if (v99 != v59)
                  {
                    v101 = v59;
                    v102 = v89;
                    do
                    {
                      v103 = *((_OWORD *)v101 - 4);
                      v104 = *((_OWORD *)v101 - 3);
                      v105 = *((_OWORD *)v101 - 1);
                      v100 = (AFPReadThread *)(v102 - 64);
                      *((_OWORD *)v102 - 2) = *((_OWORD *)v101 - 2);
                      *((_OWORD *)v102 - 1) = v105;
                      *((_OWORD *)v102 - 4) = v103;
                      *((_OWORD *)v102 - 3) = v104;
                      v101 = (AFPReadThread *)((char *)v101 - 64);
                      v102 -= 64;
                    }
                    while (v101 != v99);
                  }
                  v106 = v89 + 64;
                  v107 = this[98];
                  v108 = v107 - v59;
                  if (v107 != v59)
                  {
                    v109 = v59;
                    v110 = v107 - v59;
                    v111 = v90;
                    memmove(v106, v109, v110);
                    v90 = v111;
                  }
                  v112 = this[97];
                  this[97] = v100;
                  this[98] = (AFPReadThread *)&v106[v108];
                  this[99] = v90;
                  v56 = (uint64_t *)(this + 123);
                  v17 = v129;
                  if (v112)
                    operator delete(v112);
                }
                else if (v59 == v66)
                {
                  v84 = *(_OWORD *)outExtAudioFile;
                  v85 = v135;
                  v86 = v137;
                  *((_OWORD *)v59 + 2) = v136;
                  *((_OWORD *)v59 + 3) = v86;
                  *(_OWORD *)v59 = v84;
                  *((_OWORD *)v59 + 1) = v85;
                  this[98] = (AFPReadThread *)((char *)v59 + 64);
                }
                else
                {
                  v68 = (AFPReadThread *)((char *)v66 - 64);
                  v69 = this[98];
                  while (v68 < v66)
                  {
                    v70 = *(_OWORD *)v68;
                    v71 = *((_OWORD *)v68 + 1);
                    v72 = *((_OWORD *)v68 + 3);
                    *((_OWORD *)v69 + 2) = *((_OWORD *)v68 + 2);
                    *((_OWORD *)v69 + 3) = v72;
                    *(_OWORD *)v69 = v70;
                    *((_OWORD *)v69 + 1) = v71;
                    v69 = (AFPReadThread *)((char *)v69 + 64);
                    v68 = (AFPReadThread *)((char *)v68 + 64);
                  }
                  this[98] = v69;
                  if (v66 != (AFPReadThread *)((char *)v59 + 64))
                    memmove((char *)v66 - 64 * ((v66 - (AFPReadThread *)((char *)v59 + 64)) >> 6), v59, v66 - (AFPReadThread *)((char *)v59 + 64));
                  v80 = outExtAudioFile;
                  if (v59 <= (AFPReadThread *)outExtAudioFile)
                    v80 = &outExtAudioFile[8 * (unint64_t)(this[98] > (AFPReadThread *)outExtAudioFile)];
                  v81 = *(_OWORD *)v80;
                  v82 = *((_OWORD *)v80 + 1);
                  v83 = *((_OWORD *)v80 + 3);
                  *((_OWORD *)v59 + 2) = *((_OWORD *)v80 + 2);
                  *((_OWORD *)v59 + 3) = v83;
                  *(_OWORD *)v59 = v81;
                  *((_OWORD *)v59 + 1) = v82;
                }
              }
            }
            v73 = (int)v16 <= 1;
            LODWORD(v16) = v16 - 1;
          }
          while (!v73);
        }
        v32 = this[97];
        v33 = this[98];
        while (v32 != v33)
        {
          if (*((_BYTE *)v32 + 56))
          {
            ExtAudioFileDispose(*((ExtAudioFileRef *)v32 + 1));
            v34 = this[98];
            v35 = v34 - (AFPReadThread *)((char *)v32 + 64);
            if (v34 != (AFPReadThread *)((char *)v32 + 64))
              memmove(v32, (char *)v32 + 64, v34 - (AFPReadThread *)((char *)v32 + 64));
            v33 = (AFPReadThread *)((char *)v32 + v35);
            this[98] = (AFPReadThread *)((char *)v32 + v35);
          }
          else
          {
            v32 = (AFPReadThread *)((char *)v32 + 64);
          }
        }
        return 0;
      case 3311:
        if (!*((_BYTE *)this + 17))
          goto LABEL_52;
        v41 = *((_QWORD *)a5 + 10);
        v42 = this[97];
        v43 = this[98];
        if (v43 != v42)
        {
          v44 = (v43 - v42) >> 6;
          do
          {
            v45 = v44 >> 1;
            v46 = (unint64_t *)((char *)v42 + 64 * (v44 >> 1));
            v48 = *v46;
            v47 = (AFPReadThread *)(v46 + 8);
            v44 += ~(v44 >> 1);
            if (v48 < v41)
              v42 = v47;
            else
              v44 = v45;
          }
          while (v44);
        }
        if (v42 == v43 || *(_QWORD *)v42 != v41)
        {
          fwrite("invalid file region\n", 0x14uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
          return 4294956445;
        }
        if (*((_BYTE *)this + 772) && ((_BYTE)a5[7] & 1) == 0)
          return 4294956445;
        v113 = (char *)(this + 100);
        v114 = *(double *)this[120];
        v130 = (*((uint64_t (**)(char *))this[103] + 2))((char *)this + 824);
        v115 = *((_DWORD *)v11 + 26);
        if (v115 != -1)
        {
          v116 = *((double *)v42 + 2);
          if (v116 != v114)
            v115 = vcvtpd_u64_f64(v114 * (double)v115 / v116);
        }
        v117 = *((_QWORD *)v11 + 1);
        v118 = *((_DWORD *)v11 + 14);
        v119 = *v11;
        v120 = *((_DWORD *)v11 + 27);
        v121 = this[102];
        if (v121
          && ((v122 = *(_QWORD *)v113, v123 = *(_DWORD *)(*(_QWORD *)v113 + 72), (v123 & 1) != 0)
           && (v118 & 1) != 0
           && v119 < *(double *)(v122 + 16)
           || (v123 & 2) != 0 && (v118 & 2) != 0 && v117 < *(_QWORD *)(v122 + 24)))
        {
          v124 = 0;
          v13 = 1936682863;
        }
        else
        {
          v125 = (char *)operator new(0x98uLL);
          v13 = 0;
          *((double *)v125 + 2) = v119;
          v126 = *((_OWORD *)v11 + 2);
          *((_OWORD *)v125 + 2) = *((_OWORD *)v11 + 1);
          *((_OWORD *)v125 + 3) = v126;
          v127 = *(_OWORD *)((char *)v11 + 76);
          *(_OWORD *)(v125 + 76) = *(_OWORD *)((char *)v11 + 60);
          *((_QWORD *)v125 + 3) = v117;
          *((double *)v125 + 8) = v11[6];
          *((_DWORD *)v125 + 18) = v118;
          *(_OWORD *)(v125 + 92) = v127;
          *(_OWORD *)(v125 + 104) = *(_OWORD *)(v11 + 11);
          *((_DWORD *)v125 + 30) = v115;
          *((_DWORD *)v125 + 31) = v120;
          *((_QWORD *)v125 + 16) = v42;
          *((_DWORD *)v125 + 34) = v115;
          *((_DWORD *)v125 + 35) = 0;
          *((_DWORD *)v125 + 36) = 0;
          v128 = this[100];
          *(_QWORD *)v125 = v128;
          *((_QWORD *)v125 + 1) = v113;
          *((_QWORD *)v128 + 1) = v125;
          this[100] = (AFPReadThread *)v125;
          v124 = 1;
          this[102] = (AFPReadThread *)((char *)v121 + 1);
        }
        if (v130)
          (*((void (**)(char *))this[103] + 3))((char *)this + 824);
        if (!v124)
          return v13;
        if ((AFPReadThread::TryWake(this[118]) & 1) != 0)
          return 0;
        v13 = 0;
        *((_BYTE *)this + 936) = 1;
        return v13;
      case 3312:
        if (*((_BYTE *)this + 17))
        {
          AUAudioFilePlayer::Prime((AUAudioFilePlayer *)this, *(_DWORD *)a5, a7, a8, a9, a10);
          return 0;
        }
LABEL_52:
        v13 = 4294956429;
        break;
      case 3318:
        v39 = this[122];
        if (v39)
          CFRelease(v39);
        v40 = *(AFPReadThread **)v11;
        this[122] = *(AFPReadThread **)v11;
        if (!v40)
          return 0;
        goto LABEL_45;
      case 3319:
        v49 = this[121];
        if (v49)
          CFRelease(v49);
        v40 = *(AFPReadThread **)v11;
        this[121] = *(AFPReadThread **)v11;
        if (!v40)
          return 0;
LABEL_45:
        CFRetain(v40);
        return 0;
      default:
        return v13;
    }
    return v13;
  }
  if (a2 != 37)
  {
    if (a2 == 3300)
    {
      if (a6 >= 0x70)
      {
        v53 = (unint64_t *)(this + 78);
        while (1)
        {
          v54 = *v53;
          *((_QWORD *)a5 + 11) = *v53;
          while (1)
          {
            v55 = __ldaxr(v53);
            if (v55 != v54)
              break;
            if (!__stlxr((unint64_t)a5, v53))
              return 0;
          }
          __clrex();
        }
      }
    }
    else
    {
      if (a2 != 3301)
        return v13;
      if (a6 >= 0x40)
      {
        v13 = 0;
        this[90] = (AFPReadThread *)0xBFF0000000000000;
        v36 = *(_OWORD *)a5;
        v37 = *((_OWORD *)a5 + 1);
        v38 = *((_OWORD *)a5 + 3);
        *((_OWORD *)this + 43) = *((_OWORD *)a5 + 2);
        *((_OWORD *)this + 44) = v38;
        *((_OWORD *)this + 41) = v36;
        *((_OWORD *)this + 42) = v37;
        *((_BYTE *)this + 752) = 1;
        return v13;
      }
    }
    return 4294956445;
  }
  if (a6 != 4)
    return 4294956445;
  v50 = *((unsigned __int8 *)this + 772);
  v51 = *(_DWORD *)a5 != 0;
  *((_BYTE *)this + 772) = v51;
  if (v50 != v51)
    (*((void (**)(AFPReadThread **, _QWORD, _QWORD))*this + 9))(this, 0, 0);
  return 0;
}

void sub_210AD872C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t AUScheduledSoundPlayer::CanScheduleParameters(AUScheduledSoundPlayer *this)
{
  return 0;
}

uint64_t AUAudioFilePlayer::Render(AUAudioFilePlayer *this, const float *a2, const AudioTimeStamp *a3, unsigned int a4, __n128 a5, double a6, double a7, double a8)
{
  unsigned int v12;

  if (*((_BYTE *)this + 772))
  {
    a5.n128_u64[0] = *((_QWORD *)this + 90);
    v12 = a4;
    if (a5.n128_f64[0] >= 0.0)
    {
      a5.n128_u64[0] = *((_QWORD *)this + 81);
      v12 = a4;
      if (a5.n128_f64[0] >= 0.0)
      {
        a6 = (double)a4;
        a5.n128_f64[0] = a5.n128_f64[0] + (double)a4;
        v12 = a5.n128_f64[0];
      }
    }
    AUAudioFilePlayer::Prime(this, v12, a5, a6, a7, a8);
  }
  AUScheduledSoundPlayer::Render(this, a2, (int64_t)a3, a4);
  if (*((_BYTE *)this + 936))
  {
    *((_BYTE *)this + 936) = 0;
    if ((AFPReadThread::TryWake(*((AFPReadThread **)this + 118)) & 1) == 0)
      *((_BYTE *)this + 936) = 1;
  }
  return 0;
}

uint64_t AUAudioFilePlayer::SaveState(const void **this, __CFDictionary **a2)
{
  CFTypeID v4;
  __CFDictionary *v5;

  ausdk::AUBase::SaveState((ausdk::AUBase *)this, a2);
  if (this[121])
  {
    if (this[122])
    {
      v4 = CFGetTypeID(*a2);
      if (v4 == CFDictionaryGetTypeID())
      {
        v5 = *a2;
        CFDictionaryAddValue(v5, CFSTR("kAUPresetPersistentStateKey"), this[121]);
        CFDictionaryAddValue(v5, CFSTR("file-references"), this[122]);
      }
    }
  }
  return 0;
}

uint64_t AUAudioFilePlayer::RestoreState(AUAudioFilePlayer *this, CFTypeRef cf)
{
  CFTypeID v4;
  const void *Value;
  const void *v6;
  const void *v7;
  const void *v8;

  v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("file-references"));
    v6 = (const void *)*((_QWORD *)this + 122);
    if (v6)
      CFRelease(v6);
    *((_QWORD *)this + 122) = Value;
    if (Value)
      CFRetain(Value);
    v7 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("kAUPresetPersistentStateKey"));
    v8 = (const void *)*((_QWORD *)this + 121);
    if (v8)
      CFRelease(v8);
    *((_QWORD *)this + 121) = v7;
    if (v7)
      CFRetain(v7);
  }
  return ausdk::AUBase::RestoreState((OpaqueAudioComponentInstance **)this, cf);
}

BOOL AUScheduledSoundPlayer::StreamFormatWritable(AUScheduledSoundPlayer *this)
{
  return *((_BYTE *)this + 17) == 0;
}

BOOL AUAudioFilePlayer::ValidFormat(AUAudioFilePlayer *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  UInt32 mChannelsPerFrame;

  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 33 >= 0xFFFFFFE0 && (mChannelsPerFrame < 2 || (a4->mFormatFlags & 0x20) != 0);
  }
  return result;
}

uint64_t AUAudioFilePlayer::ChangeStreamFormat(AUAudioFilePlayer *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  const AudioChannelLayout *v8;
  const CAAudioChannelLayout *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _OWORD v15[2];
  uint64_t v16;

  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  AUAudioFilePlayer::AllocateBuffers(this);
  if (memcmp(a4, a5, 0x28uLL))
  {
    if (a4->mChannelsPerFrame != a5->mChannelsPerFrame)
    {
      v10 = *((_QWORD *)this + 123);
      if (v10)
      {
        if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v10 + 16), v8))
        {
          CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v15);
          CAAudioChannelLayout::operator=();
          MEMORY[0x212BCD890](v15);
        }
      }
    }
    v11 = *((_QWORD *)this + 120);
    v12 = *(_QWORD *)(v11 + 32);
    v13 = *(_OWORD *)(v11 + 16);
    v15[0] = *(_OWORD *)v11;
    v15[1] = v13;
    v16 = v12;
    AudioFileMgr::RebuildConverters((uint64_t)this + 776, (const CAStreamBasicDescription *)v15, *((unsigned __int8 **)this + 116), (uint64_t *)this + 123, v9);
  }
  return 0;
}

uint64_t AUAudioFilePlayer::GetAudioChannelLayout(AUAudioFilePlayer *this, const AudioChannelLayout *a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((_DWORD)a2 != 2)
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  if (a3)
    ausdk::Throw((ausdk *)0xFFFFD583);
  v7 = *((_QWORD *)this + 123);
  if (v7
    && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), a2)
    && (v9 = *((_QWORD *)this + 123)) != 0)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if (a4 && (_DWORD)v10)
      memcpy(a4, (const void *)(v9 + 16), *(unsigned int *)(v9 + 12));
  }
  else
  {
    v10 = 0;
  }
  *a5 = 1;
  return v10;
}

uint64_t AUAudioFilePlayer::SetAudioChannelLayout(AUAudioFilePlayer *this, const AudioChannelLayout *a2, int a3, AudioChannelLayout *a4)
{
  int v6;
  const CAAudioChannelLayout *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  if ((_DWORD)a2 != 2)
    return 4294956430;
  if (a3)
    return 4294956419;
  if (a4)
  {
    v6 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, a2);
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUAudioFilePlayer *)((char *)this + 128), 0) + 108) != v6)
      return 4294956445;
    CAAudioChannelLayout::operator=();
  }
  else
  {
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v12);
    CAAudioChannelLayout::operator=();
    MEMORY[0x212BCD890](v12);
  }
  v8 = (unsigned __int8 *)*((_QWORD *)this + 116);
  if (!v8)
  {
    AUAudioFilePlayer::AllocateBuffers(this);
    v8 = (unsigned __int8 *)*((_QWORD *)this + 116);
  }
  v9 = *((_QWORD *)this + 120);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_OWORD *)(v9 + 16);
  v12[0] = *(_OWORD *)v9;
  v12[1] = v11;
  v13 = v10;
  AudioFileMgr::RebuildConverters((uint64_t)this + 776, (const CAStreamBasicDescription *)v12, v8, (uint64_t *)this + 123, v7);
  return 0;
}

uint64_t AUAudioFilePlayer::RemoveAudioChannelLayout(AUAudioFilePlayer *this, int a2, int a3)
{
  const CAAudioChannelLayout *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  if (a2 != 2)
    return 4294956430;
  if (a3)
    return 4294956419;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)v10);
  CAAudioChannelLayout::operator=();
  MEMORY[0x212BCD890](v10);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 116);
  if (!v6)
  {
    AUAudioFilePlayer::AllocateBuffers(this);
    v6 = (unsigned __int8 *)*((_QWORD *)this + 116);
  }
  v7 = *((_QWORD *)this + 120);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 16);
  v10[0] = *(_OWORD *)v7;
  v10[1] = v9;
  v11 = v8;
  AudioFileMgr::RebuildConverters((uint64_t)this + 776, (const CAStreamBasicDescription *)v10, v6, (uint64_t *)this + 123, v5);
  return 0;
}

_DWORD *AUAudioFilePlayer::GetChannelLayoutTags@<X0>(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  _DWORD *result;

  if (a1 != 2)
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  if (a2)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(4uLL);
  *a3 = v5;
  *v5 = 0;
  result = v5 + 1;
  a3[1] = result;
  a3[2] = result;
  return result;
}

uint64_t AUAudioFilePlayer::Version(AUAudioFilePlayer *this)
{
  return 0x10000;
}

uint64_t AUAudioFilePlayer::AllocateBuffers(AUAudioFilePlayer *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  ausdk::AUBufferList *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  ausdk::AUBufferList *v13;
  uint64_t result;
  AudioStreamBasicDescription v15;

  AUAudioFilePlayer::DeallocateBuffers(this);
  *((_QWORD *)this + 120) = ausdk::AUScope::SafeGetElement((AUAudioFilePlayer *)((char *)this + 128), 0) + 80;
  if (*((int *)this + 189) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = operator new();
      v4 = *((_QWORD *)this + 120);
      v5 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)&v15.mSampleRate = *(_OWORD *)v4;
      *(_OWORD *)&v15.mBytesPerPacket = v5;
      *(_QWORD *)&v15.mBitsPerChannel = *(_QWORD *)(v4 + 32);
      v6 = *((_DWORD *)this + 190);
      *(_BYTE *)(v3 + 120) = 1;
      *(_BYTE *)(v3 + 136) = 0;
      v7 = (ausdk::AUBufferList *)operator new();
      *(_DWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)(v3 + 112) = v7;
      ausdk::AUBufferList::Allocate(v7, &v15, v6);
      *(_QWORD *)(v3 + 88) = *((_QWORD *)this + 114);
      *((_QWORD *)this + 114) = v3;
      ++v2;
    }
    while (v2 < *((_DWORD *)this + 189));
  }
  if (*((int *)this + 191) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = operator new();
      v10 = *((_QWORD *)this + 120);
      v11 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)&v15.mSampleRate = *(_OWORD *)v10;
      *(_OWORD *)&v15.mBytesPerPacket = v11;
      *(_QWORD *)&v15.mBitsPerChannel = *(_QWORD *)(v10 + 32);
      v12 = *((_DWORD *)this + 192);
      *(_BYTE *)(v9 + 120) = 0;
      *(_BYTE *)(v9 + 136) = 0;
      v13 = (ausdk::AUBufferList *)operator new();
      *(_DWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)(v9 + 112) = v13;
      ausdk::AUBufferList::Allocate(v13, &v15, v12);
      *(_QWORD *)(v9 + 88) = *((_QWORD *)this + 115);
      *((_QWORD *)this + 115) = v9;
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 191));
  }
  result = operator new[]();
  *((_QWORD *)this + 116) = result;
  return result;
}

void sub_210AD8EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10A0C40ACE8B2C5);
  _Unwind_Resume(a1);
}

uint64_t AUAudioFilePlayer::DeallocateBuffers(AUAudioFilePlayer *this)
{
  AFPReadSlice *i;
  AFPReadSlice *v3;
  uint64_t result;

  for (i = (AFPReadSlice *)*((_QWORD *)this + 114); i; i = (AFPReadSlice *)*((_QWORD *)this + 114))
  {
    *((_QWORD *)this + 114) = *((_QWORD *)i + 11);
    AFPReadSlice::~AFPReadSlice(i);
    MEMORY[0x212BCDF50]();
  }
  while (1)
  {
    v3 = (AFPReadSlice *)*((_QWORD *)this + 115);
    if (!v3)
      break;
    *((_QWORD *)this + 115) = *((_QWORD *)v3 + 11);
    AFPReadSlice::~AFPReadSlice(v3);
    MEMORY[0x212BCDF50]();
  }
  result = *((_QWORD *)this + 116);
  if (result)
    result = MEMORY[0x212BCDF2C](result, 0x1000C8077774924);
  *((_QWORD *)this + 116) = 0;
  return result;
}

void AFPReadSlice::~AFPReadSlice(AFPReadSlice *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  if (v1)
  {
    ausdk::AUBufferList::Deallocate(*((_QWORD **)this + 14));
    MEMORY[0x212BCDF50](v1, 0x1020C409F4E64B8);
  }
}

void AUAudioFilePlayer::Prime(AUAudioFilePlayer *this, unsigned int a2, __n128 a3, double a4, double a5, double a6)
{
  double v7;

  if (!a2)
    a2 = 2 * *((_DWORD *)this + 190);
  v7 = (double)a2;
  while (1)
  {
    AUScheduledSoundPlayer::InsertAddedSlices(this, a3, a4, a5, a6);
    if (*((double *)this + 79) >= v7
      || !*((_BYTE *)this + 952)
      && (!*((_QWORD *)this + 114)
       || !AUAudioFilePlayer::EventSchedule::NextToRead((AUAudioFilePlayer *)((char *)this + 800))))
    {
      break;
    }
    usleep(0x2710u);
  }
}

uint64_t AFPReadThread::TryWake(AFPReadThread *this)
{
  CADeprecated::CAGuard *v1;
  uint64_t v2;
  BOOL v4;

  v4 = 0;
  v1 = (AFPReadThread *)((char *)this + 192);
  v2 = CADeprecated::CAMutex::Try((AFPReadThread *)((char *)this + 192), &v4);
  if ((_DWORD)v2)
  {
    CADeprecated::CAGuard::Notify(v1);
    if (v4)
      CADeprecated::CAMutex::Unlock(v1);
  }
  return v2;
}

char *AUAudioFilePlayer::EventSchedule::NextToRead(AUAudioFilePlayer::EventSchedule *this)
{
  char *v2;
  int v3;
  AUAudioFilePlayer::EventSchedule *v4;
  int v5;
  char *v6;
  void (*v7)(_QWORD, char *);
  uint64_t v8;
  AUAudioFilePlayer::EventSchedule *v9;

  v2 = (char *)this + 24;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 16))((char *)this + 24);
  v4 = (AUAudioFilePlayer::EventSchedule *)*((_QWORD *)this + 1);
  if (v4 != this)
  {
    do
    {
      v5 = *((_DWORD *)v4 + 35);
      if (v5 == 2)
      {
        v9 = (AUAudioFilePlayer::EventSchedule *)*((_QWORD *)v4 + 1);
      }
      else
      {
        v6 = (char *)v4 + 16;
        if (v5 != 3)
          goto LABEL_11;
        if (*((_DWORD *)v4 + 36))
        {
          v7 = (void (*)(_QWORD, char *))*((_QWORD *)v4 + 10);
          if (v7)
            v7(*((_QWORD *)v4 + 11), (char *)v4 + 16);
        }
        v8 = *(_QWORD *)v4;
        v9 = (AUAudioFilePlayer::EventSchedule *)*((_QWORD *)v4 + 1);
        *(_QWORD *)(v8 + 8) = v9;
        **((_QWORD **)v4 + 1) = v8;
        --*((_QWORD *)this + 2);
        operator delete(v4);
      }
      v4 = v9;
    }
    while (v9 != this);
  }
  v6 = 0;
LABEL_11:
  if (v3)
    (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
  return v6;
}

void sub_210AD9164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v2;

  if ((v2 & 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *AFPReadThread::RemoveClient(AFPReadThread *this, AUAudioFilePlayer *a2, char a3)
{
  CADeprecated::CAMutex *v6;
  AUAudioFilePlayer **v7;
  AUAudioFilePlayer **v8;
  int64_t v9;
  uint64_t *result;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;

  v6 = (AFPReadThread *)((char *)this + 192);
  v20 = CADeprecated::CAMutex::Lock((AFPReadThread *)((char *)this + 192));
  v8 = (AUAudioFilePlayer **)*((_QWORD *)this + 18);
  v7 = (AUAudioFilePlayer **)*((_QWORD *)this + 19);
  while (v8 != v7)
  {
    if (*v8 == a2)
    {
      v9 = (char *)v7 - (char *)(v8 + 1);
      if (v7 != v8 + 1)
        memmove(v8, v8 + 1, (char *)v7 - (char *)(v8 + 1));
      *((_QWORD *)this + 19) = (char *)v8 + v9;
      break;
    }
    ++v8;
  }
  result = (uint64_t *)*((_QWORD *)this + 22);
  if (result != (uint64_t *)((char *)this + 168))
  {
    v11 = (unint64_t *)((char *)a2 + 912);
    v12 = (unint64_t *)((char *)a2 + 920);
    do
    {
      v13 = result[2];
      if (*(AUAudioFilePlayer **)(v13 + 72) == a2)
      {
        *(_BYTE *)(v13 + 136) = 1;
        *((_BYTE *)a2 + 952) = 0;
        *(_DWORD *)(*(_QWORD *)(v13 + 128) + 124) = 3;
        if (*(_BYTE *)(v13 + 120))
        {
          while (1)
          {
            v14 = *v11;
            *(_QWORD *)(v13 + 88) = *v11;
            while (1)
            {
              v15 = __ldaxr(v11);
              if (v15 != v14)
                break;
              if (!__stlxr(v13, v11))
                goto LABEL_23;
            }
            __clrex();
          }
        }
LABEL_18:
        v16 = *v12;
        *(_QWORD *)(v13 + 88) = *v12;
        do
        {
          v17 = __ldaxr(v12);
          if (v17 != v16)
          {
            __clrex();
            goto LABEL_18;
          }
        }
        while (__stlxr(v13, v12));
LABEL_23:
        v18 = *result;
        v19 = (uint64_t *)result[1];
        *(_QWORD *)(v18 + 8) = v19;
        *(_QWORD *)result[1] = v18;
        --*((_QWORD *)this + 23);
        operator delete(result);
        result = v19;
      }
      else
      {
        result = (uint64_t *)result[1];
      }
    }
    while (result != (uint64_t *)((char *)this + 168));
  }
  if ((a3 & 1) == 0 && *((_QWORD *)this + 18) == *((_QWORD *)this + 19))
  {
    if ((AFPReadThread *)AFPReadThread::sInstance == this)
      AFPReadThread::sInstance = 0;
    if (v20)
      CADeprecated::CAMutex::Unlock(v6);
    return (uint64_t *)CADeprecated::XThread::Stop(this);
  }
  else if (v20)
  {
    return (uint64_t *)CADeprecated::CAMutex::Unlock(v6);
  }
  return result;
}

void AFPReadThread::AddClient(AFPReadThread *this, AUAudioFilePlayer *a2)
{
  char *v4;
  int v5;
  char *v6;
  char *v7;
  AUAudioFilePlayer **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (char *)this + 192;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 24) + 16))((char *)this + 192);
  v6 = (char *)*((_QWORD *)v4 - 6);
  v7 = (char *)*((_QWORD *)v4 - 5);
  if (v6 == v7)
  {
LABEL_5:
    v9 = *((_QWORD *)this + 20);
    if ((unint64_t)v7 >= v9)
    {
      v11 = (v7 - v6) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      v13 = v9 - (_QWORD)v6;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = a2;
      v10 = v16 + 8;
      if (v6 != v7)
      {
        do
        {
          v17 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v7 != v6);
        v6 = (char *)*((_QWORD *)this + 18);
      }
      *((_QWORD *)this + 18) = v16;
      *((_QWORD *)this + 19) = v10;
      *((_QWORD *)this + 20) = &v15[8 * v14];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v7 = a2;
      v10 = v7 + 8;
    }
    *((_QWORD *)this + 19) = v10;
  }
  else
  {
    v8 = (AUAudioFilePlayer **)*((_QWORD *)v4 - 6);
    while (*v8 != a2)
    {
      if (++v8 == (AUAudioFilePlayer **)v7)
        goto LABEL_5;
    }
  }
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_210AD94C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__list_imp<AFPEvent>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t *AudioFileMgr::ReleaseFiles(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = this;
  v2 = *this;
  if (*this != this[1])
  {
    do
    {
      this = (uint64_t *)ExtAudioFileDispose(*(ExtAudioFileRef *)(v2 + 8));
      v2 += 64;
    }
    while (v2 != v1[1]);
    v2 = *v1;
  }
  v1[1] = v2;
  return this;
}

void AFPReadThread::~AFPReadThread(AFPReadThread *this)
{
  void *v2;

  *(_QWORD *)this = &off_24CA8C358;
  MEMORY[0x212BCD614]((char *)this + 192);
  std::__list_imp<AFPEvent>::clear((_QWORD *)this + 21);
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  CADeprecated::CAPThread::~CAPThread(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24CA8C358;
  MEMORY[0x212BCD614]((char *)this + 192);
  std::__list_imp<AFPEvent>::clear((_QWORD *)this + 21);
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  CADeprecated::CAPThread::~CAPThread(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AFPReadThread::RequestStop(AFPReadThread *this)
{
  uint64_t v1;
  CADeprecated::CAGuard *v2;
  int v3;
  uint64_t result;

  v2 = (AFPReadThread *)((char *)this + 192);
  v1 = *((_QWORD *)this + 24);
  *((_BYTE *)this + 136) = 1;
  v3 = (*(uint64_t (**)(char *))(v1 + 16))((char *)this + 192);
  result = CADeprecated::CAGuard::Notify(v2);
  if (v3)
    return (*(uint64_t (**)(CADeprecated::CAGuard *))(*(_QWORD *)v2 + 24))(v2);
  return result;
}

void sub_210AD9688(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AFPReadThread::Run(AFPReadThread *this)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  AUAudioFilePlayer::EventSchedule *v13;
  unint64_t *v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  OpaqueExtAudioFile *v29;
  OSStatus v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  int v40;
  char v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(_QWORD, uint64_t, _QWORD);
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  CADeprecated::CAGuard *v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;
  __int16 v58;
  OSStatus v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v53 = (AFPReadThread *)((char *)this + 192);
  CADeprecated::CAMutex::Lock((AFPReadThread *)((char *)this + 192));
  while (!*((_BYTE *)this + 136))
  {
    while (1)
    {
      v3 = *((_QWORD *)this + 23);
      if (v3)
        break;
      v11 = (_QWORD *)*((_QWORD *)this + 18);
      if (v11 != *((_QWORD **)this + 19))
      {
        do
        {
          v12 = *v11;
          v13 = (AUAudioFilePlayer::EventSchedule *)(*v11 + 800);
          v14 = (unint64_t *)(*v11 + 920);
          v15 = (unint64_t *)(*v11 + 912);
          while (!*(_BYTE *)(v12 + 952))
          {
            v16 = AUAudioFilePlayer::EventSchedule::NextToRead(v13);
            v17 = v16;
            if (!v16)
              break;
            if (*((_DWORD *)v16 + 30) >= *(_DWORD *)(v12 + 760))
              v18 = *(_DWORD *)(v12 + 760);
            else
              v18 = *((_DWORD *)v16 + 30);
            if (v18 > *(_DWORD *)(v12 + 768))
            {
              while (1)
              {
                v19 = *v15;
                if (!*v15)
                  goto LABEL_36;
                v20 = *(_QWORD *)(v19 + 88);
                while (1)
                {
                  v21 = __ldaxr(v15);
                  if (v21 != v19)
                    break;
                  if (!__stlxr(v20, v15))
                    goto LABEL_35;
                }
                __clrex();
              }
            }
            while (1)
            {
              v19 = *v14;
              if (!*v14)
                break;
              v22 = *(_QWORD *)(v19 + 88);
              while (1)
              {
                v23 = __ldaxr(v14);
                if (v23 != v19)
                  break;
                if (!__stlxr(v22, v14))
                  goto LABEL_35;
              }
              __clrex();
            }
LABEL_33:
            v19 = *v15;
            if (!*v15)
              break;
            v24 = *(_QWORD *)(v19 + 88);
            do
            {
              v25 = __ldaxr(v15);
              if (v25 != v19)
              {
                __clrex();
                goto LABEL_33;
              }
            }
            while (__stlxr(v24, v15));
LABEL_35:
            *(_QWORD *)(v19 + 80) = 0;
            *(_DWORD *)(v19 + 56) = 1;
            *(_QWORD *)v19 = *(_QWORD *)v16;
            *(_QWORD *)(v19 + 64) = AUAudioFilePlayer::SlicePlayCompletionProc;
            *(_QWORD *)(v19 + 72) = v12;
            *(_DWORD *)(v19 + 96) = v18;
            *(_QWORD *)(v19 + 104) = ausdk::AUBufferList::PrepareBuffer(*(ausdk::AUBufferList **)(v19 + 112), *(const AudioStreamBasicDescription **)(v12 + 960), v18);
            *(_QWORD *)(v19 + 128) = v17;
            *(_BYTE *)(v12 + 952) = 1;
            v26 = operator new(0x18uLL);
            v26[1] = (char *)this + 168;
            v26[2] = v19;
            v27 = *((_QWORD *)this + 21);
            *v26 = v27;
            *(_QWORD *)(v27 + 8) = v26;
            *((_QWORD *)this + 21) = v26;
            ++*((_QWORD *)this + 23);
          }
LABEL_36:
          ++v11;
        }
        while (v11 != *((_QWORD **)this + 19));
        if (*((_QWORD *)this + 23))
          continue;
      }
      if (*((_BYTE *)this + 136))
        return CADeprecated::CAMutex::Unlock(v53);
      CADeprecated::CAGuard::Wait(v53);
      goto LABEL_61;
    }
    v4 = (uint64_t *)*((_QWORD *)this + 22);
    v5 = v4[2];
    v6 = *(_QWORD *)(v5 + 72);
    v7 = *v4;
    *(_QWORD *)(v7 + 8) = v4[1];
    *(_QWORD *)v4[1] = v7;
    *((_QWORD *)this + 23) = v3 - 1;
    operator delete(v4);
    if (*(_BYTE *)(v6 + 772)
      || (*(double *)(v6 + 720) >= 0.0 && (v8 = *(double *)(v6 + 640), v8 >= 0.0)
        ? (v10 = *(double *)v5 - v8, v9 = **(double **)(v6 + 960))
        : (v9 = **(double **)(v6 + 960), v10 = v9 * 60.0),
          v10 / v9 > 0.0))
    {
      v28 = *(_QWORD *)(v5 + 128);
      v29 = *(OpaqueExtAudioFile **)(*(_QWORD *)(v28 + 112) + 8);
      if (*(_DWORD *)(v28 + 124)
        || (*(_DWORD *)(v28 + 124) = 1, (v30 = ExtAudioFileSeek(v29, *(_QWORD *)(v28 + 96))) == 0))
      {
        v30 = ExtAudioFileRead(v29, (UInt32 *)(v5 + 96), *(AudioBufferList **)(v5 + 104));
        if (!v30)
        {
          v35 = *(_QWORD *)(v5 + 128);
          v36 = *(_DWORD *)(v5 + 96);
          v37 = *(_DWORD *)(v35 + 120);
          v38 = v37 - v36;
          if (v37 < v36)
            v38 = 0;
          *(_DWORD *)(v35 + 120) = v38;
          if (v36)
            v39 = v37 > v36;
          else
            v39 = 0;
          if (v39)
          {
            v41 = 0;
          }
          else
          {
            v40 = *(_DWORD *)(v35 + 88);
            if (v40)
            {
              v41 = 0;
              *(_DWORD *)(v35 + 88) = v40 - 1;
              *(_QWORD *)(v35 + 120) = *(unsigned int *)(v35 + 104);
              goto LABEL_64;
            }
            *(_DWORD *)(v35 + 124) = 2;
            v49 = *(void (**)(_QWORD, uint64_t, _QWORD))(v35 + 64);
            if (v49)
            {
              v49(*(_QWORD *)(v35 + 72), v35, *(unsigned int *)(v35 + 128));
              v42 = *(_DWORD *)(v5 + 96);
              v41 = 1;
              goto LABEL_65;
            }
            v41 = 1;
          }
LABEL_64:
          v42 = v36;
LABEL_65:
          *(double *)v35 = *(double *)v35 + (double)v36;
          *(_BYTE *)(v5 + 136) = v41;
          *(_BYTE *)(v6 + 952) = 0;
          if (v42)
          {
            v43 = (unint64_t *)(v6 + 624);
            while (1)
            {
              v44 = *v43;
              *(_QWORD *)(v5 + 88) = *v43;
              while (1)
              {
                v45 = __ldaxr(v43);
                if (v45 != v44)
                  break;
                if (!__stlxr(v5, v43))
                  goto LABEL_60;
              }
              __clrex();
            }
          }
          if (*(_BYTE *)(v5 + 120))
          {
            v46 = (unint64_t *)(v6 + 912);
            while (1)
            {
              v47 = *v46;
              *(_QWORD *)(v5 + 88) = *v46;
              while (1)
              {
                v48 = __ldaxr(v46);
                if (v48 != v47)
                  break;
                if (!__stlxr(v5, v46))
                  goto LABEL_60;
              }
              __clrex();
            }
          }
          v50 = (unint64_t *)(v6 + 920);
          while (1)
          {
            v51 = *v50;
            *(_QWORD *)(v5 + 88) = *v50;
            while (1)
            {
              v52 = __ldaxr(v50);
              if (v52 != v51)
                break;
              if (!__stlxr(v5, v50))
                goto LABEL_60;
            }
            __clrex();
          }
        }
        v31 = MEMORY[0x24BDACB70];
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_59;
        *(_DWORD *)buf = 136315650;
        v55 = "AUAudioFilePlayer.cpp";
        v56 = 1024;
        v57 = 732;
        v58 = 1024;
        v59 = v30;
        v32 = v31;
        v33 = "%25s:%-5d  ### Error %d from ExtAudioFileRead";
      }
      else
      {
        v34 = MEMORY[0x24BDACB70];
        if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
          goto LABEL_59;
        *(_DWORD *)buf = 136315650;
        v55 = "AUAudioFilePlayer.cpp";
        v56 = 1024;
        v57 = 724;
        v58 = 1024;
        v59 = v30;
        v32 = v34;
        v33 = "%25s:%-5d  ### Error %d from ExtAudioFileSeek";
      }
      _os_log_impl(&dword_210A23000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 0x18u);
    }
    else
    {
      v30 = 1919251058;
    }
LABEL_59:
    AUAudioFilePlayer::SliceNotRead(v6, v5, v30);
LABEL_60:
    CADeprecated::CAMutex::Unlock(v53);
    CADeprecated::CAMutex::Lock(v53);
LABEL_61:
    ;
  }
  return CADeprecated::CAMutex::Unlock(v53);
}

uint64_t AUAudioFilePlayer::SliceNotRead(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  *(_BYTE *)(a2 + 136) = 1;
  *(_BYTE *)(result + 952) = 0;
  v3 = *(_QWORD *)(a2 + 128);
  if (!*(_DWORD *)(v3 + 128))
    *(_DWORD *)(v3 + 128) = a3;
  *(_DWORD *)(v3 + 124) = 3;
  if (*(_BYTE *)(a2 + 120))
  {
    v4 = (unint64_t *)(result + 912);
    while (1)
    {
      v5 = *v4;
      *(_QWORD *)(a2 + 88) = *v4;
      while (1)
      {
        v6 = __ldaxr(v4);
        if (v6 != v5)
          break;
        if (!__stlxr(a2, v4))
          return result;
      }
      __clrex();
    }
  }
  v7 = (unint64_t *)(result + 920);
LABEL_11:
  v8 = *v7;
  *(_QWORD *)(a2 + 88) = *v7;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_11;
    }
  }
  while (__stlxr(a2, v7));
  return result;
}

uint64_t AUAudioFilePlayer::SlicePlayCompletionProc(uint64_t this, _QWORD *a2, ScheduledAudioSlice *a3)
{
  uint64_t v3;
  int v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a2[16];
  v4 = *((unsigned __int8 *)a2 + 136);
  if ((a2[10] & 4) == 0 || *(_DWORD *)(v3 + 128))
  {
    if (!*((_BYTE *)a2 + 136))
      goto LABEL_5;
    goto LABEL_4;
  }
  *(_DWORD *)(v3 + 128) = 1919251058;
  if (v4)
LABEL_4:
    *(_DWORD *)(v3 + 124) = 3;
LABEL_5:
  if (*((_BYTE *)a2 + 120))
  {
    v5 = (unint64_t *)(this + 912);
    while (1)
    {
      v6 = *v5;
      a2[11] = *v5;
      while (1)
      {
        v7 = __ldaxr(v5);
        if (v7 != v6)
          break;
        if (!__stlxr((unint64_t)a2, v5))
          goto LABEL_18;
      }
      __clrex();
    }
  }
  v8 = (unint64_t *)(this + 920);
LABEL_13:
  v9 = *v8;
  a2[11] = *v8;
  do
  {
    v10 = __ldaxr(v8);
    if (v10 != v9)
    {
      __clrex();
      goto LABEL_13;
    }
  }
  while (__stlxr((unint64_t)a2, v8));
LABEL_18:
  *(_BYTE *)(this + 936) = 1;
  return this;
}

uint64_t CADeprecated::XThread::RequestStop(uint64_t this)
{
  *(_BYTE *)(this + 136) = 1;
  return this;
}

void AudioFileMgr::~AudioFileMgr(AudioFileMgr *this)
{
  void *v2;

  AudioFileMgr::ReleaseFiles((uint64_t *)this);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void BankManager::~BankManager(BankManager *this)
{
  unint64_t v2;
  _QWORD *v3;

  v3 = *(_QWORD **)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this < v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x212BCDF50](*v3, 0x1020C4039081DA8);
        v2 = *((_QWORD *)this + 1);
      }
      ++v3;
    }
    while ((unint64_t)v3 < v2);
    v3 = *(_QWORD **)this;
  }
  if (v3)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

_DWORD *BankManager::GetBank(BankManager *this, int a2, int a3)
{
  unint64_t i;
  _DWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  for (i = *(_QWORD *)this; i < *((_QWORD *)this + 1); i += 8)
  {
    v6 = *(_DWORD **)i;
    if (*(_DWORD *)(*(_QWORD *)i + 1024) == a2)
      return v6;
  }
  if (!a3)
    return 0;
  v6 = (_DWORD *)operator new();
  v6[256] = a2;
  bzero(v6, 0x400uLL);
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)this;
    v11 = ((uint64_t)v8 - *(_QWORD *)this) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = *--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(_QWORD **)this;
    }
    *(_QWORD *)this = v16;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *((_QWORD *)this + 1) = v9;
  return v6;
}

void SamplerElement::~SamplerElement(SamplerElement *this)
{
  SamplerElement::~SamplerElement(this);
  JUMPOUT(0x212BCDF50);
}

{
  caulk::rt_safe_memory_resource *v2;

  *(_QWORD *)this = &off_24CA8DED8;
  SamplerBaseElement::SetInstrument(this, 0);
  v2 = (caulk::rt_safe_memory_resource *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 44) - (_QWORD)v2) >> 2));
  }
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 304);
  SamplerBaseElement::~SamplerBaseElement(this);
}

void SamplerElement::NoteOff(SamplerElement *this, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 42);
  v6 = *((_QWORD *)this + 43);
  v8 = -1431655765 * ((unint64_t)(v6 - v7) >> 2);
  if (v8 < 2)
  {
    if (v8 == 1)
    {
      if (v7 != v6)
      {
        v9 = *(_QWORD *)(v6 - 12);
        *((_DWORD *)this + 92) = *(_DWORD *)(v6 - 4);
        *((_QWORD *)this + 45) = v9;
      }
      *((_QWORD *)this + 43) = v6 - 12;
    }
    SynthGroupElement::NoteOff((uint64_t)this, a2, a3);
    InstrumentState::UpdateLayers(*((InstrumentState **)this + 32));
    return;
  }
  if ((*((_BYTE *)this + 296) & 1) == 0)
  {
    SamplerElement::RemoveNote(this, a2);
LABEL_19:
    SynthGroupElement::NoteOff((uint64_t)this, a2, a3);
    return;
  }
  if (v7 == v6)
    goto LABEL_19;
  v10 = v6 - 12;
  if (*(_DWORD *)(v6 - 12) == a2)
  {
    v11 = *(_QWORD *)(v6 - 8);
    *((_DWORD *)this + 90) = a2;
    *(_QWORD *)((char *)this + 364) = v11;
    *((_QWORD *)this + 43) = v10;
    if (v7 == v10)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v17 = 136315394;
        v18 = "SamplerElement.cpp";
        v19 = 1024;
        v20 = 145;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: expected previous note in active stack", (uint8_t *)&v17, 0x12u);
      }
      __break(1u);
    }
    else
    {
      v12 = 0;
      v13 = *(unsigned int *)(v6 - 24);
      v14 = *(const char **)(v6 - 20);
      v15 = *((unsigned __int8 *)this + 241) + 1;
      while (1)
      {
        v16 = *((_QWORD *)this + 3 * v12 + 12);
        if (v16)
          break;
LABEL_16:
        if (++v12 == v15)
        {
          if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
          {
            v17 = 136315650;
            v18 = "SamplerElement.cpp";
            v19 = 1024;
            v20 = 167;
            v21 = 1024;
            v22 = a2;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::NoteOff: no note found for note ID %u", (uint8_t *)&v17, 0x18u);
          }
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(v16 + 40) != a2)
      {
        v16 = *(_QWORD *)(v16 + 16);
        if (!v16)
          goto LABEL_16;
      }
      v17 = 2;
      v18 = v14;
      (*(void (**)(uint64_t, _QWORD, SamplerElement *, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v16 + 24))(v16, *(_QWORD *)(v16 + 24), this, v13, *(_QWORD *)(*((_QWORD *)this + 1) + 688) + a3, a3, &v17);
      *(_BYTE *)(*((_QWORD *)this + 1) + 816) = 1;
    }
  }
  else
  {
    SamplerElement::RemoveNote(this, a2);
  }
}

void SamplerElement::ChannelMessage(uint64_t **this, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  int v6;
  _BOOL4 v7;
  double v8;
  float v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  float v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 > 125)
  {
    if ((_DWORD)a2 == 126 || (_DWORD)a2 == 127)
    {
      SamplerElement::UpdateState((uint64_t)this);
    }
    else
    {
      if ((_DWORD)a2 != 192)
      {
LABEL_19:
        SynthGroupElement::ChannelMessage((SynthGroupElement *)this, a2, a3);
        return;
      }
      if (*((_BYTE *)this + 376))
      {
        v5 = this[29];
        v6 = *((_DWORD *)v5 + 20);
        if (*((_DWORD *)v5 + 16) == 9)
          v7 = v6 != 2;
        else
          v7 = v6 == 1;
        v10 = a3 & 0x7F;
        v11 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at((uint64_t **)v5[6], 0x20u);
        v12 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at((uint64_t **)v5[6], 0);
        v13 = (_WORD)v12 << 7;
        v14 = v11 | (v12 << 7);
        v15 = v13 & 0x7F00;
        if (v15)
        {
          if (v7)
            v16 = 30720;
          else
            v16 = 30976;
          v17 = v16 | (v14 >> 8);
          if (v15 == 30720 || v15 == 30976)
            v19 = v14;
          else
            v19 = v17;
        }
        else
        {
          if (v7)
            v21 = 30720;
          else
            v21 = 30976;
          v19 = v21 & 0xFFFFFF00 | v14;
        }
        v22 = this[1];
        if (v7)
          v23 = v19 & 0x7F00;
        else
          v23 = v19;
        v24 = *v22;
        if (*((_BYTE *)this + 377))
        {
          if ((*(unsigned int (**)(uint64_t *))(v24 + 424))(this[1]))
          {
            if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
            {
              v27 = 136315394;
              v28 = "SamplerElement.cpp";
              v29 = 1024;
              v30 = 285;
              _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: Preroll mode set during render", (uint8_t *)&v27, 0x12u);
            }
            __break(1u);
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 704))(v22, v23, v10);
          }
        }
        else
        {
          v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 712))(this[1], v23, v10);
          ((void (*)(uint64_t **, uint64_t))(*this)[23])(this, v25);
        }
      }
    }
  }
  else if ((a2 - 124) >= 2)
  {
    if ((_DWORD)a2 != 5)
    {
      if ((_DWORD)a2 == 65)
      {
        (*(void (**)(uint64_t *, uint64_t, _QWORD))(*this[29] + 56))(this[29], a2, a3);
        return;
      }
      goto LABEL_19;
    }
    (*(void (**)(uint64_t *, uint64_t, _QWORD))(*this[29] + 56))(this[29], a2, a3);
    if (*((_DWORD *)this[32] + 31) == 74)
    {
      if (a3)
      {
        if (a3 > 0xF)
        {
          if (a3 <= 0x70)
          {
            v20 = (double)-a3 / 48.0;
            v9 = __exp10f(v20) * 25.0;
            goto LABEL_49;
          }
          if (a3 > 0x7E)
          {
            v9 = 0.01;
            goto LABEL_49;
          }
          v8 = exp2f((float)((float)(int)(a3 * a3) * -0.0078125) * 4.0) * 0.1;
        }
        else
        {
          v8 = 1000.0 / ((double)a3 * 5.0 + 1.0);
        }
        v9 = v8;
      }
      else
      {
        v9 = 1000.0;
      }
LABEL_49:
      v26 = 0.001 / v9;
      *((float *)this + 93) = v26;
    }
  }
}

uint64_t SamplerElement::AllNotesOff(SamplerElement *this, uint64_t a2)
{
  uint64_t result;

  result = SynthGroupElement::AllNotesOff((uint64_t)this, a2);
  *((_QWORD *)this + 43) = *((_QWORD *)this + 42);
  return result;
}

uint64_t SamplerElement::AllSoundOff(SamplerElement *this, uint64_t a2)
{
  uint64_t result;

  result = SynthGroupElement::AllSoundOff((uint64_t)this, a2);
  *((_QWORD *)this + 43) = *((_QWORD *)this + 42);
  return result;
}

caulk::rt_safe_memory_resource *SamplerElement::Reset(SamplerElement *this)
{
  caulk::rt_safe_memory_resource *result;

  result = SamplerBaseElement::Reset(this);
  *((_QWORD *)this + 43) = *((_QWORD *)this + 42);
  return result;
}

uint64_t SamplerElement::Render(SynthGroupElement *this, uint64_t a2, uint64_t a3, ausdk::AUScope *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *((_QWORD *)this + 38);
  if (v5)
    *(_BYTE *)(v5 + 324) = 1;
  v6 = *((_QWORD *)this + 40);
  if (v6)
    *(_BYTE *)(v6 + 324) = 1;
  return SynthGroupElement::Render(this, a2, a3, a4, a5);
}

void SamplerElement::RegisterControlSource(SamplerElement *this, int a2)
{
  std::__shared_weak_count_vtbl *v3;
  uint64_t v4;
  LFOState **v5;
  LFOState **v6;
  LFOState *v7;
  float v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  LFOState **v14;
  LFOState **v15;
  LFOState *v16;
  float v17;
  unint64_t *p_shared_owners;

  if (a2 == 321)
  {
    if (*((_QWORD *)this + 40))
      return;
    v12 = (std::__shared_weak_count_vtbl *)operator new(0x150uLL);
    v13 = *((_QWORD *)this + 32);
    v14 = *(LFOState ***)(v13 + 208);
    v15 = *(LFOState ***)(v13 + 216);
    if (v14 == v15)
    {
LABEL_15:
      v16 = 0;
    }
    else
    {
      while (1)
      {
        v16 = *v14;
        if ((**(unsigned int (***)(LFOState *))*v14)(*v14) == 268435697)
          break;
        if (++v14 == v15)
          goto LABEL_15;
      }
    }
    v17 = *((float *)this + 63);
    v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA94780;
    v12[8].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8E028;
    VoiceLFO::VoiceLFO((VoiceLFO *)v12, v16, v17);
    v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8CF80;
    v12[8].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8D0B0;
    v12[3].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8D018;
    LODWORD(v12[8].~__shared_weak_count) = 0;
    BYTE4(v12[8].~__shared_weak_count) = 0;
    v9 = (std::__shared_weak_count *)operator new();
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95998;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v12;
    VoiceLFO::Start((uint64_t)v12, 0);
    std::shared_ptr<MultiRamp>::operator=[abi:ne180100]((_QWORD *)this + 40, (uint64_t)v12, (uint64_t)v9);
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    goto LABEL_18;
  }
  if (a2 != 320)
  {
    SamplerBaseElement::RegisterControlSource(this, a2);
    return;
  }
  if (!*((_QWORD *)this + 38))
  {
    v3 = (std::__shared_weak_count_vtbl *)operator new(0x150uLL);
    v4 = *((_QWORD *)this + 32);
    v5 = *(LFOState ***)(v4 + 208);
    v6 = *(LFOState ***)(v4 + 216);
    if (v5 == v6)
    {
LABEL_7:
      v7 = 0;
    }
    else
    {
      while (1)
      {
        v7 = *v5;
        if ((**(unsigned int (***)(LFOState *))*v5)(*v5) == 268435696)
          break;
        if (++v5 == v6)
          goto LABEL_7;
      }
    }
    v8 = *((float *)this + 63);
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA94780;
    v3[8].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8E028;
    VoiceLFO::VoiceLFO((VoiceLFO *)v3, v7, v8);
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8CF80;
    v3[8].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8D0B0;
    v3[3].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_24CA8D018;
    LODWORD(v3[8].~__shared_weak_count) = 0;
    BYTE4(v3[8].~__shared_weak_count) = 0;
    v9 = (std::__shared_weak_count *)operator new();
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95998;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v3;
    VoiceLFO::Start((uint64_t)v3, 0);
    std::shared_ptr<MultiRamp>::operator=[abi:ne180100]((_QWORD *)this + 38, (uint64_t)v3, (uint64_t)v9);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_18:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_210ADA8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SamplerElement::UnregisterControlSource(uint64_t this, int a2)
{
  if ((a2 & 0xFFFFFFFE) != 0x140)
    return SamplerBaseElement::UnregisterControlSource(this, a2);
  return this;
}

uint64_t SamplerElement::StartNote(SamplerElement *this, SynthPartElement *a2, uint64_t a3, const MusicDeviceNoteParams *a4, const MusicDeviceNoteParams *a5)
{
  unsigned int mPitch;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t NewNote;
  Float32 mVelocity;
  Float32 v40;
  Float32 *v41;
  unint64_t v42;
  _DWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  Float32 *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int64x2_t v54;
  uint64_t v55;
  _BYTE v56[24];
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  mPitch = (char)(int)a5->mPitch;
  v11 = *((_QWORD *)this + 32);
  v12 = *(_QWORD *)(v11 + 192);
  if (v12)
  {
    if ((mPitch & 0x80000000) != 0)
      std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
    if (((*(_QWORD *)(v12 + ((mPitch >> 3) & 0x18)) >> mPitch) & 1) != 0)
    {
      *(_BYTE *)(*((_QWORD *)this + 29) + 76) = mPitch;
      LOBYTE(v12) = 1;
    }
    else
    {
      LOBYTE(v12) = 0;
    }
  }
  v13 = *(unsigned __int8 *)(v11 + 200);
  if (v13 != 255)
  {
    v14 = mPitch;
    if (v13 + 11 >= mPitch && v13 - 11 <= mPitch)
    {
      v24 = *((_QWORD *)this + 29);
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 != v25)
      {
        v27 = 715827883 * (127 * (v14 - v13) + 1524);
        v28 = (v27 >> 34) + (v27 < 0);
        while (*(_WORD *)v26 != 304)
        {
          v26 += 24;
          if (v26 == v25)
            return 778;
        }
        v31 = *(_QWORD *)(v26 + 8);
        v32 = *(std::__shared_weak_count **)(v26 + 16);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
        }
        if (v31)
        {
          v35 = v28 << 7;
          if (*(_DWORD *)(v31 + 164) != v35)
          {
            *(_DWORD *)(v31 + 164) = v35;
            *(_BYTE *)(v31 + 168) = 1;
          }
        }
        if (v32)
        {
          v36 = (unint64_t *)&v32->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
      }
      return 778;
    }
  }
  if ((v12 & 1) != 0)
    return 778;
  if ((*((_BYTE *)this + 296) & 1) != 0)
  {
    v16 = *((_QWORD *)this + 43);
    if (*((_QWORD *)this + 42) != v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v16 - 12);
      *((_DWORD *)this + 92) = *(_DWORD *)(v16 - 4);
      *((_QWORD *)this + 45) = v18;
      v19 = *((unsigned __int8 *)this + 241) + 1;
      while (1)
      {
        v20 = *((_QWORD *)this + 3 * v17 + 12);
        if (v20)
          break;
LABEL_18:
        if (++v17 == v19)
        {
          if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
            goto LABEL_43;
          *(_DWORD *)v56 = 136315650;
          *(_QWORD *)&v56[4] = "SamplerElement.cpp";
          *(_WORD *)&v56[12] = 1024;
          *(_DWORD *)&v56[14] = 94;
          *(_WORD *)&v56[18] = 1024;
          *(_DWORD *)&v56[20] = v18;
          v21 = MEMORY[0x24BDACB70];
          v22 = "%25s:%-5d SamplerElement::StartNote: no note found for pressed key %u";
          v23 = 24;
          goto LABEL_42;
        }
      }
      while (*(_DWORD *)(v20 + 40) != (_DWORD)v18)
      {
        v20 = *(_QWORD *)(v20 + 16);
        if (!v20)
          goto LABEL_18;
      }
      result = (*(uint64_t (**)(uint64_t, SynthPartElement *, SamplerElement *, uint64_t, _QWORD, const MusicDeviceNoteParams *, const MusicDeviceNoteParams *))(*(_QWORD *)v20 + 24))(v20, a2, this, a3, *(_QWORD *)(*((_QWORD *)this + 1) + 688) + a4, a4, a5);
      if ((result & 1) != 0)
      {
        v30 = 777;
        goto LABEL_49;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v56 = 136315394;
        *(_QWORD *)&v56[4] = "SamplerElement.cpp";
        *(_WORD *)&v56[12] = 1024;
        *(_DWORD *)&v56[14] = 89;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::StartNote: re-attack returned false", v56, 0x12u);
      }
      return 0xFFFFFFFFLL;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v56 = 136315394;
      *(_QWORD *)&v56[4] = "SamplerElement.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 98;
      v21 = MEMORY[0x24BDACB70];
      v22 = "%25s:%-5d SamplerElement::StartNote: no keys currently pressed";
      v23 = 18;
LABEL_42:
      _os_log_impl(&dword_210A23000, v21, OS_LOG_TYPE_DEBUG, v22, v56, v23);
    }
LABEL_43:
    if (*((_DWORD *)this + 66))
      (*(void (**)(SamplerElement *, const MusicDeviceNoteParams *))(*(_QWORD *)this + 88))(this, a4);
  }
  NewNote = SamplerBaseElement::GetNewNote(*((SamplerBaseElement **)this + 1), (uint64_t)a4, a3, a4);
  if (!NewNote)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v56 = 136315394;
      *(_QWORD *)&v56[4] = "SamplerElement.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 109;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerElement::StartNote: No free notes available", v56, 0x12u);
    }
    SamplerElement::RemoveNote(this, a3);
    return 0xFFFFFFFFLL;
  }
  result = (*(uint64_t (**)(SamplerElement *, uint64_t, SynthPartElement *, uint64_t, const MusicDeviceNoteParams *, const MusicDeviceNoteParams *))(*(_QWORD *)this + 56))(this, NewNote, a2, a3, a4, a5);
  if (*(int *)(NewNote + 44) <= 4)
    v30 = 0;
  else
    v30 = 779;
LABEL_49:
  v40 = a5->mPitch;
  mVelocity = a5->mVelocity;
  v41 = (Float32 *)*((_QWORD *)this + 43);
  v42 = *((_QWORD *)this + 44);
  if ((unint64_t)v41 < v42)
  {
    *(_DWORD *)v41 = a3;
    v43 = v41 + 3;
    v41[1] = v40;
    v41[2] = mVelocity;
LABEL_74:
    *((_QWORD *)this + 43) = v43;
    return v30;
  }
  v44 = *((_QWORD *)this + 42);
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v41 - v44) >> 2);
  v46 = v45 + 1;
  if (v45 + 1 > 0x1555555555555555)
    std::vector<void const*>::__throw_length_error[abi:ne180100]();
  v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v44) >> 2);
  if (2 * v47 > v46)
    v46 = 2 * v47;
  if (v47 >= 0xAAAAAAAAAAAAAAALL)
    v48 = 0x1555555555555555;
  else
    v48 = v46;
  v58 = (char *)this + 352;
  if (!v48)
  {
    v49 = 0;
    goto LABEL_68;
  }
  if (v48 <= 0x1555555555555555)
  {
    result = *MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
    {
      v49 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
      v44 = *((_QWORD *)this + 42);
      v41 = (Float32 *)*((_QWORD *)this + 43);
LABEL_68:
      v50 = (Float32 *)(v49 + 12 * v45);
      *(_DWORD *)v50 = a3;
      v50[1] = v40;
      v50[2] = mVelocity;
      if (v41 == (Float32 *)v44)
      {
        v54 = vdupq_n_s64(v44);
        v51 = v49 + 12 * v45;
      }
      else
      {
        v51 = v49 + 12 * v45;
        do
        {
          v52 = *(_QWORD *)(v41 - 3);
          v41 -= 3;
          v53 = *((_DWORD *)v41 + 2);
          *(_QWORD *)(v51 - 12) = v52;
          v51 -= 12;
          *(_DWORD *)(v51 + 8) = v53;
        }
        while (v41 != (Float32 *)v44);
        v54 = *((int64x2_t *)this + 21);
      }
      v43 = v50 + 3;
      *((_QWORD *)this + 42) = v51;
      *((_QWORD *)this + 43) = v50 + 3;
      *(int64x2_t *)&v56[8] = v54;
      v55 = *((_QWORD *)this + 44);
      *((_QWORD *)this + 44) = v49 + 12 * v48;
      v57 = v55;
      *(_QWORD *)v56 = v54.i64[0];
      std::__split_buffer<SamplerNoteParams,caulk::rt_allocator<SamplerNoteParams> &>::~__split_buffer((uint64_t)v56);
      goto LABEL_74;
    }
  }
  __break(1u);
  return result;
}

void SamplerElement::GetSourceComponentByID(SamplerElement *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  *a3 = 0;
  a3[1] = 0;
  if (a2 == 321)
  {
    v4 = *((_QWORD *)this + 40);
    v5 = *((_QWORD *)this + 41);
    goto LABEL_5;
  }
  if (a2 == 320)
  {
    v4 = *((_QWORD *)this + 38);
    v5 = *((_QWORD *)this + 39);
LABEL_5:
    std::shared_ptr<MultiRamp>::operator=[abi:ne180100](a3, v4, v5);
    return;
  }
  SamplerBaseElement::GetSourceComponentByID(this, a2, &v9);
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)a3, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_210ADAF9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SamplerElement::GetDestinationComponentByID(SamplerElement *this, unsigned int a2)
{
  uint64_t v2;

  if (a2 >> 28 != 1)
    return 0;
  if (a2 != 241)
  {
    if (a2 == 240)
    {
      v2 = *((_QWORD *)this + 38);
      goto LABEL_7;
    }
    return 0;
  }
  v2 = *((_QWORD *)this + 40);
LABEL_7:
  if (v2)
    return v2 + 152;
  else
    return 0;
}

_QWORD *SamplerElement::SetInstrument(SamplerElement *this, InstrumentState *a2)
{
  _QWORD *result;

  result = SamplerBaseElement::SetInstrument(this, a2);
  if (a2)
    *((_QWORD *)this + 37) = *((_QWORD *)this + 37) & 0xFFFFFFFFFFFFFFFELL | (*((_DWORD *)a2 + 31) > 75);
  return result;
}

_QWORD *SamplerElement::RemoveNote(_QWORD *this, int a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  int64_t v5;

  v3 = (char *)this[42];
  v2 = (char *)this[43];
  if (v3 != v2)
  {
    v4 = this;
    while (*(_DWORD *)v3 != a2)
    {
      v3 += 12;
      if (v3 == v2)
        return this;
    }
    v5 = v2 - (v3 + 12);
    if (v2 != v3 + 12)
      this = memmove(v3, v3 + 12, v2 - (v3 + 12));
    v4[43] = &v3[v5];
  }
  return this;
}

uint64_t std::__split_buffer<SamplerNoteParams,caulk::rt_allocator<SamplerNoteParams> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  caulk::rt_safe_memory_resource *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 12) % 0xCuLL + *(_QWORD *)(a1 + 8);
  v3 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(_QWORD *)a1)
    std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 2));
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<SamplerNoteParams>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  caulk::rt_safe_memory_resource *v2;

  if (a2 < 0x1555555555555556)
  {
    v2 = result;
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
  }
  __break(1u);
  return result;
}

void std::__shared_ptr_pointer<InstrumentLFO *,std::shared_ptr<InstrumentLFO>::__shared_ptr_default_delete<InstrumentLFO,InstrumentLFO>,std::allocator<InstrumentLFO>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_pointer<InstrumentLFO *,std::shared_ptr<InstrumentLFO>::__shared_ptr_default_delete<InstrumentLFO,InstrumentLFO>,std::allocator<InstrumentLFO>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void InstrumentLFO::~InstrumentLFO(InstrumentLFO *this)
{
  VoiceLFO::~VoiceLFO(this, (uint64_t *)&off_24CA89AB8);
}

{
  void *v1;

  VoiceLFO::~VoiceLFO(this, (uint64_t *)&off_24CA89AB8);
  operator delete(v1);
}

uint64_t InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

uint64_t InstrumentLFO::Run(InstrumentLFO *this, uint64_t a2)
{
  return ModControlDestination::Run((InstrumentLFO *)((char *)this + 152), a2);
}

uint64_t InstrumentLFO::Enable(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t InstrumentLFO::IsEnabled(InstrumentLFO *this)
{
  return *((unsigned __int8 *)this + 8);
}

float InstrumentLFO::GetValue(InstrumentLFO *this, unsigned int a2)
{
  float result;

  if (!*((_BYTE *)this + 324))
    return *((float *)this + 80);
  (*(void (**)(InstrumentLFO *))(*(_QWORD *)this + 32))(this);
  result = VoiceLFO::GetValue(this, a2);
  *((float *)this + 80) = result;
  *((_BYTE *)this + 324) = 0;
  return result;
}

void `non-virtual thunk to'InstrumentLFO::~InstrumentLFO(InstrumentLFO *this)
{
  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this - 152), (uint64_t *)&off_24CA89AB8);
}

{
  void *v1;

  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this - 152), (uint64_t *)&off_24CA89AB8);
  operator delete(v1);
}

uint64_t `non-virtual thunk to'InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

void `virtual thunk to'InstrumentLFO::~InstrumentLFO(InstrumentLFO *this)
{
  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (uint64_t *)&off_24CA89AB8);
}

{
  void *v1;

  VoiceLFO::~VoiceLFO((InstrumentLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (uint64_t *)&off_24CA89AB8);
  operator delete(v1);
}

uint64_t `virtual thunk to'InstrumentLFO::GetRunFrameCount(InstrumentLFO *this, uint64_t a2)
{
  return a2;
}

uint64_t `virtual thunk to'InstrumentLFO::Run(InstrumentLFO *this, uint64_t a2)
{
  return ModControlDestination::Run((InstrumentLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 152), a2);
}

_QWORD *`virtual thunk to'InstrumentLFO::Enable(_QWORD *this, char a2)
{
  *((_BYTE *)this + *(_QWORD *)(*this - 64) + 8) = a2;
  return this;
}

uint64_t `virtual thunk to'InstrumentLFO::IsEnabled(InstrumentLFO *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 8);
}

uint64_t SamplerElement::UpdateState(uint64_t this)
{
  uint64_t v1;
  int v2;
  _BOOL4 v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_DWORD *)(*(_QWORD *)(this + 256) + 124);
  v3 = v2 > 75;
  v4 = *(_QWORD *)(this + 296);
  if (v3 == (*(_DWORD *)(this + 296) & 1))
  {
    if (v2 != 74)
      return this;
    v3 = *(_BYTE *)(*(_QWORD *)(this + 232) + 75) != 0;
  }
  else
  {
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(this + 8) + 664))(*(_QWORD *)(this + 8), *(unsigned __int8 *)(this + 248));
    v4 = *(_QWORD *)(v1 + 296);
  }
  *(_QWORD *)(v1 + 296) = v4 & 0xFFFFFFFFFFFFFFFELL | v3;
  return this;
}

uint64_t std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(uint64_t **a1, unsigned __int16 a2)
{
  unsigned int v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *((unsigned __int16 *)a1 + 13);
      if (v2 <= a2)
        break;
      a1 = (uint64_t **)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return (uint64_t)a1 + 28;
    a1 = (uint64_t **)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

void AUSampleDelay::~AUSampleDelay(AUSampleDelay *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUSampleDelay::Initialize(int64x2_t *this)
{
  uint64_t v2;
  __int32 v3;
  __int32 v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int32 v9;

  v2 = ausdk::AUEffectBase::Initialize(this);
  if (!(_DWORD)v2)
  {
    v3 = this[21].i32[0];
    v4 = this[37].i32[1];
    v5 = (int)(*(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 80) * 0.100000001);
    this[37].i32[1] = v5;
    v6 = (uint64_t *)this[33].i64[0];
    v7 = (uint64_t *)this[33].i64[1];
    if (v6 != v7)
    {
      do
      {
        v8 = *v6++;
        v9 = this[37].i32[1];
        *(_DWORD *)(v8 + 52) = v9;
        *(_DWORD *)(v8 + 56) = v9 + v3;
        TAUBuffer<unsigned int>::Allocate(v8 + 24, v9 + v3);
        bzero(*(void **)(v8 + 32), *(unsigned int *)(v8 + 40));
      }
      while (v6 != v7);
      v5 = this[37].i32[1];
    }
    if (v5 != v4)
      (*(void (**)(int64x2_t *, uint64_t, _QWORD, _QWORD))(this->i64[0] + 432))(this, 4, 0, 0);
  }
  return v2;
}

uint64_t AUSampleDelay::SetParameter(AUSampleDelay *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (!(a3 | a2))
    AUSampleDelay::DelayParameterSet(this);
  return 0;
}

AudioUnitParameterValue AUSampleDelay::GetParameterInfo(AUSampleDelay *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  AudioUnitParameterValue result;
  const __CFString *v8;
  CFStringRef *v9[2];

  v9[1] = *(CFStringRef **)MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (!a2)
  {
    v9[0] = (CFStringRef *)&kSampleDelayParamName;
    if (LocalizeAUParameterStringsForClass<AUSampleDelay>(std::initializer_list<__CFString const**>)::sLocalized)
    {
      if (a3)
        return result;
LABEL_6:
      v8 = (const __CFString *)kSampleDelayParamName;
      buffer->cfNameString = (CFStringRef)kSampleDelayParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      *(_QWORD *)&buffer->unit = 5;
      result = (float)*((int *)this + 149);
      buffer->maxValue = result;
      buffer->defaultValue = 0.0;
      return result;
    }
    LocalizeAUParameterStringsForClass<AUSampleDelay>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings(v9, 1);
    if (!a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t AUSampleDelay::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v3;

  v3 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v3)
    AUSampleDelay::DelayParameterSet((AUSampleDelay *)this);
  return v3;
}

double AUSampleDelay::GetLatency(AUSampleDelay *this)
{
  return 0.0;
}

double AUSampleDelay::GetTailTime(AUSampleDelay *this)
{
  double Parameter;

  Parameter = ausdk::AUEffectBase::GetParameter(this, 0);
  return Parameter / *(double *)(ausdk::AUScope::SafeGetElement((AUSampleDelay *)((char *)this + 128), 0) + 80);
}

uint64_t AUSampleDelay::SupportsTail(AUSampleDelay *this)
{
  return 1;
}

uint64_t AUSampleDelay::NewKernel@<X0>(AUSampleDelay *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24CA94970;
  *(_QWORD *)(result + 8) = this;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *a2 = result;
  return result;
}

BOOL AUSampleDelay::ShouldBypassEffect(AUSampleDelay *this)
{
  return *((_BYTE *)this + 552) || *((_BYTE *)this + 592) != 0;
}

uint64_t AUSampleDelay::Version(AUSampleDelay *this)
{
  return 0x10000;
}

void AUSampleDelay::AUSampleDelayKernel::~AUSampleDelayKernel(AUSampleDelay::AUSampleDelayKernel *this)
{
  void *v1;
  char *v2;

  *(_QWORD *)this = &off_24CA94970;
  v2 = (char *)this + 24;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
  {
    free(v1);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
}

{
  void *v1;
  char *v2;

  *(_QWORD *)this = &off_24CA94970;
  v2 = (char *)this + 24;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
  {
    free(v1);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
  JUMPOUT(0x212BCDF50);
}

void AUSampleDelay::AUSampleDelayKernel::Reset(void **this)
{
  bzero(this[4], *((unsigned int *)this + 10));
}

void *AUSampleDelay::AUSampleDelayKernel::Process(ausdk::AUEffectBase **this, const float *a2, float *a3, int a4, BOOL *a5)
{
  float Parameter;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  ausdk::AUEffectBase *v14;
  size_t v15;
  const float *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  float *v21;
  ausdk::AUEffectBase *v22;
  size_t v23;

  Parameter = ausdk::AUEffectBase::GetParameter(this[1], 0);
  v10 = *((_DWORD *)this + 14);
  v11 = *((int *)this + 13);
  *((_DWORD *)this + 12) = ((int)v11 - (int)Parameter + v10) % v10;
  if ((int)v11 + a4 <= v10)
  {
    v14 = (ausdk::AUEffectBase *)((char *)this[4] + 4 * v11);
    v15 = 4 * a4;
    v16 = a2;
  }
  else
  {
    v12 = v10 - v11;
    v13 = a4 - (v10 - v11);
    memcpy((char *)this[4] + 4 * v11, a2, 4 * (v10 - (int)v11));
    v14 = this[4];
    v15 = 4 * v13;
    v16 = &a2[v12];
  }
  memcpy(v14, v16, v15);
  v17 = *((int *)this + 12);
  v18 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 13) = (*((_DWORD *)this + 13) + a4) % v18;
  if ((int)v17 + a4 <= v18)
  {
    v22 = (ausdk::AUEffectBase *)((char *)this[4] + 4 * v17);
    v23 = 4 * a4;
    v21 = a3;
  }
  else
  {
    v19 = v18 - v17;
    v20 = a4 - (v18 - v17);
    memcpy(a3, (char *)this[4] + 4 * v17, 4 * (v18 - (int)v17));
    v21 = &a3[v19];
    v22 = this[4];
    v23 = 4 * v20;
  }
  return memcpy(v21, v22, v23);
}

uint64_t AUSampleDelay::DelayParameterSet(AUSampleDelay *this)
{
  int Parameter;
  uint64_t v3;
  ausdk::AUElement *v4;
  int v5;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  ausdk::AUElement **v9;
  uint64_t result;
  BOOL v11;

  Parameter = (int)ausdk::AUEffectBase::GetParameter(this, 0);
  if (Parameter < 0)
  {
    v6 = *((_QWORD *)this + 9);
    if (v6)
    {
      v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
    }
    else
    {
      v8 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v8)
        v7 = 0;
      else
        v7 = *v8;
    }
    ausdk::AUElement::SetParameter(v7, 0, 0.0, 0);
    Parameter = 0;
  }
  else if (*((_DWORD *)this + 149) < Parameter)
  {
    Parameter = *((_DWORD *)this + 149);
    v3 = *((_QWORD *)this + 9);
    if (v3)
    {
      v4 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, 0);
      v5 = *((_DWORD *)this + 149);
    }
    else
    {
      v9 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v9)
        v4 = 0;
      else
        v4 = *v9;
      v5 = *((_DWORD *)this + 149);
    }
    ausdk::AUElement::SetParameter(v4, 0, (float)v5, 0);
  }
  result = (*(uint64_t (**)(AUSampleDelay *))(*(_QWORD *)this + 592))(this);
  *((_BYTE *)this + 592) = Parameter == 0;
  if (Parameter)
    v11 = (_DWORD)result == 0;
  else
    v11 = 1;
  if (!v11)
    return (*(uint64_t (**)(AUSampleDelay *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  return result;
}

_QWORD *AUSampleDelayFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x298uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSampleDelay>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSampleDelay>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t NextPrime(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  int v7;
  int v8;
  int v9;
  int v10;

  if (a1 < 0xFFF2)
  {
LABEL_12:
    if (a1 < 3)
    {
      return 2;
    }
    else
    {
      v7 = 0;
      v8 = 6541;
      do
      {
        v9 = v8 + v7;
        if (v8 + v7 < 0 != __OFADD__(v8, v7))
          ++v9;
        v10 = v9 >> 1;
        if (a1 <= kPrimes[v10])
          v8 = v10;
        else
          v7 = v10 + 1;
        v1 = kPrimes[v7];
      }
      while (a1 > v1);
    }
  }
  else
  {
    a1 = a1 | 1;
    v1 = a1;
    while (1)
    {
      v2 = 1;
      v3 = 1;
      do
      {
        v4 = kPrimes[v2];
        if (v4 * v4 > v1)
          break;
        v5 = v1 % v4;
        v3 &= v5 != 0;
      }
      while (v5 && v2++ < 0x198D);
      if ((v3 & 1) != 0)
        break;
      v1 = (v1 + 2);
      if (!(_DWORD)v1)
        goto LABEL_12;
    }
  }
  return v1;
}

uint64_t MIDIControlDelegate::SetProgramChange(MIDIControlDelegate *this)
{
  return 0;
}

BOOL MIDIControlDelegate::SetPitchWheel(MIDIControlDelegate *this, __int16 a2)
{
  uint64_t i;
  _BOOL8 v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  for (i = *((_QWORD *)this + 2); ; i += 24)
  {
    if (i == *((_QWORD *)this + 3))
      return 0;
    if (*(_WORD *)i == 224)
      break;
  }
  v5 = *(_QWORD *)(i + 8);
  v6 = *(std::__shared_weak_count **)(i + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v3 = v5 != 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 164) != (a2 & 0x7FFF))
    {
      *(_DWORD *)(v5 + 164) = a2 & 0x7FFF;
      *(_BYTE *)(v5 + 168) = 1;
    }
    *((float *)this + 21) = (float)(a2 - 0x2000) * 0.00012207;
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v3;
}

BOOL MIDIControlDelegate::SetChannelPressure(MIDIControlDelegate *this, int a2)
{
  uint64_t i;
  _BOOL8 v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  for (i = *((_QWORD *)this + 2); ; i += 24)
  {
    if (i == *((_QWORD *)this + 3))
      return 0;
    if (*(_WORD *)i == 208)
      break;
  }
  v5 = *(_QWORD *)(i + 8);
  v6 = *(std::__shared_weak_count **)(i + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v3 = v5 != 0;
  if (v5 && *(_DWORD *)(v5 + 164) != a2 << 7)
  {
    *(_DWORD *)(v5 + 164) = a2 << 7;
    *(_BYTE *)(v5 + 168) = 1;
  }
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v3;
}

BOOL MIDIControlDelegate::SetPolyPressure(MIDIControlDelegate *this, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 16 * a2);
    if (*(_DWORD *)(v4 + 164) != a3 << 7)
    {
      *(_DWORD *)(v4 + 164) = a3 << 7;
      *(_BYTE *)(v4 + 168) = 1;
    }
  }
  return v3 != 0;
}

uint64_t MIDIControlDelegate::SetSysex(MIDIControlDelegate *this, void *a2)
{
  return 0;
}

float MIDIControlDelegate::GetPitchBend(MIDIControlDelegate *this)
{
  return *((float *)this + 21) * (float)(*((float *)this + 22) + *((float *)this + 23));
}

uint64_t MIDIControlDelegate::GetRPN(uint64_t ***this)
{
  int v2;

  v2 = *(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(this[6], 0x64u);
  return v2 | (*(unsigned __int8 *)std::map<unsigned short const,unsigned char,std::less<unsigned short>,caulk::rt_allocator<std::pair<unsigned short const,unsigned char>>>::at(this[6], 0x65u) << 7);
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned short const,unsigned char>,std::__map_value_compare<unsigned short const,std::__value_type<unsigned short const,unsigned char>,std::less<unsigned short>,true>,caulk::rt_allocator<std::__value_type<unsigned short const,unsigned char>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD **a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  caulk::rt_safe_memory_resource *result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = (uint64_t *)(a1 + 1);
  v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t *)v5;
        v8 = *(unsigned __int16 *)(v5 + 26);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return (caulk::rt_safe_memory_resource *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t *)(a1 + 1);
LABEL_9:
  result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
  if (*MEMORY[0x24BEC6E18])
  {
    v10 = caulk::rt_safe_memory_resource::rt_allocate(result);
    *(_WORD *)(v10 + 26) = **a3;
    *(_BYTE *)(v10 + 28) = 0;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = v7;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (caulk::rt_safe_memory_resource *)v10;
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__tree<std::__value_type<unsigned short const,unsigned char>,std::__map_value_compare<unsigned short const,std::__value_type<unsigned short const,unsigned char>,std::less<unsigned short>,true>,caulk::rt_allocator<std::__value_type<unsigned short const,unsigned char>>>::destroy(caulk::rt_safe_memory_resource *result, _QWORD *a2)
{
  caulk::rt_safe_memory_resource *v3;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<unsigned short const,unsigned char>,std::__map_value_compare<unsigned short const,std::__value_type<unsigned short const,unsigned char>,std::less<unsigned short>,true>,caulk::rt_allocator<std::__value_type<unsigned short const,unsigned char>>>::destroy(result, *a2);
    std::__tree<std::__value_type<unsigned short const,unsigned char>,std::__map_value_compare<unsigned short const,std::__value_type<unsigned short const,unsigned char>,std::less<unsigned short>,true>,caulk::rt_allocator<std::__value_type<unsigned short const,unsigned char>>>::destroy(v3, a2[1]);
    result = (caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18];
    if (*MEMORY[0x24BEC6E18])
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, a2);
    else
      __break(1u);
  }
  return result;
}

void std::vector<MIDIControlEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_pointer<MIDIControlSource *,std::shared_ptr<MIDIControlSource>::__shared_ptr_default_delete<MIDIControlSource,MIDIControlSource>,std::allocator<MIDIControlSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

void MatrixMixerCore::CalcDecayConstant(MatrixMixerCore *this, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *((float *)this + 21) * a2;
  if (v4 >= 2.22507386e-308)
    v5 = -6.90775528 / v4;
  else
    v5 = -INFINITY;
  v6 = exp(v5);
  if (v5 < -708.4)
    v6 = 0.0;
  v7 = v6 * v6;
  v8 = v6;
  *(float *)&v7 = v7 * v7;
  *((float *)this + 15) = v8;
  *((_DWORD *)this + 16) = LODWORD(v7);
  if (*((_DWORD *)this + 2))
  {
    v9 = 0;
    v10 = 16;
    do
    {
      PowerMeter::SetSampleRate((PowerMeter *)(*((_QWORD *)this + 2) + v10), a2);
      ++v9;
      v10 += 160;
    }
    while (v9 < *((unsigned int *)this + 2));
  }
  if (*((_DWORD *)this + 3))
  {
    v11 = 0;
    v12 = 16;
    do
    {
      PowerMeter::SetSampleRate((PowerMeter *)(*((_QWORD *)this + 3) + v12), a2);
      ++v11;
      v12 += 160;
    }
    while (v11 < *((unsigned int *)this + 3));
  }
}

void MIDISynth::~MIDISynth(MIDISynth *this)
{
  MIDISynth::~MIDISynth(this);
  JUMPOUT(0x212BCDF50);
}

{
  MIDISynth *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  SampleManager *v8;
  unsigned int v9;
  unsigned int v10;
  DLSBankManager *v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  MIDISynth *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24CA941D0;
  *((_QWORD *)this + 66) = &unk_24CA944E8;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v12 = 136315650;
    v13 = "MidiSynth.cpp";
    v14 = 1024;
    v15 = 44;
    v16 = 2048;
    v17 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::~MIDISynth(%p)", (uint8_t *)&v12, 0x1Cu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v2 = (MIDISynth *)*((_QWORD *)this + 107);
    v12 = 136315650;
    v13 = "MidiSynth.cpp";
    v14 = 1024;
    v15 = 367;
    v16 = 2048;
    v17 = v2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::ClearPreloadedInstruments: unref'ing %lu instruments", (uint8_t *)&v12, 0x1Cu);
  }
  v3 = (char *)*((_QWORD *)this + 105);
  v4 = (char *)this + 848;
  if (v3 != (char *)this + 848)
  {
    do
    {
      SamplerState::Unref(*((_DWORD **)v3 + 5));
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((_QWORD **)this + 106));
  *((_QWORD *)this + 105) = v4;
  *((_OWORD *)this + 53) = 0u;
  v8 = (SampleManager *)MIDISynth::SetCurrentBank(this, 0);
  do
  {
    v9 = __ldxr(SamplerBase::sInstanceCount);
    v10 = v9 - 1;
  }
  while (__stxr(v10, SamplerBase::sInstanceCount));
  if (!v10)
  {
    SampleManager::Destroy(v8);
    DLSBankManager::Destroy(v11);
  }
  std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((_QWORD **)this + 106));
  SamplerBase::~SamplerBase(this);
}

uint64_t MIDISynth::GetPropertyInfo(MIDISynth *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  switch(a2)
  {
    case 4119:
      if (a3)
        return 4294956430;
      result = 0;
      v7 = 4;
LABEL_12:
      *a5 = v7;
      *a6 = 1;
      return result;
    case 1100:
      if (a3)
        return 4294956430;
      result = 0;
      v7 = 8;
      goto LABEL_12;
    case 1007:
      if (!a3)
      {
        result = 0;
        *a5 = 8;
        *a6 = 0;
        return result;
      }
      return 4294956430;
  }
  return SamplerBase::GetPropertyInfo(this, a2, a3, a4, a5, a6);
}

CFIndex MIDISynth::GetProperty(MIDISynth *this, uint64_t a2, int a3, uint64_t a4, CFStringRef *a5)
{
  const __CFURL *v6;
  CFURLRef v7;
  uint64_t v8;
  const __CFURL *v9;
  const __CFURL *v11;
  CFErrorRef error;

  switch((_DWORD)a2)
  {
    case 0x3E8:
      if (a3)
        return 4294956430;
      v9 = (const __CFURL *)*((_QWORD *)this + 104);
      if (v9)
      {
        error = 0;
        v8 = CopyInstrumentInfoFromSoundBank(v9, &error);
        if (!(_DWORD)v8)
        {
          *(_DWORD *)a5 = CFArrayGetCount(error);
          CFRelease(error);
        }
        return v8;
      }
      return 4294956427;
    case 0x3EF:
      if (a3)
        return 4294956430;
      v11 = (const __CFURL *)*((_QWORD *)this + 104);
      if (v11)
        return CopyNameFromSoundBank(v11, a5);
      return 4294956427;
    case 0x44C:
      if (!a3)
      {
        error = 0;
        v6 = (const __CFURL *)*((_QWORD *)this + 104);
        if (v6)
        {
          v7 = CFURLCreateFilePathURL(0, v6, &error);
          if (!v7)
            return CFErrorGetCode(error);
        }
        else
        {
          v7 = 0;
        }
        v8 = 0;
        *a5 = (CFStringRef)v7;
        return v8;
      }
      return 4294956430;
  }
  return SamplerBase::GetProperty(this, a2, a3, a4, a5);
}

uint64_t MIDISynth::SetProperty(MIDISynth *this, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  const void *v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2 == 4119)
  {
    if (!a3)
    {
      v12 = *a5 != 0;
      v13[0] = &off_24CA96AD0;
      v13[1] = &v12;
      v14 = v13;
      SamplerBase::DoForGroupElements((MIDISynth *)((char *)this + 176), (uint64_t)v13);
      v10 = v14;
      if (v14 == v13)
      {
        v11 = 4;
        v10 = v13;
      }
      else
      {
        if (!v14)
          return 0;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
      return 0;
    }
    return 4294956430;
  }
  if ((_DWORD)a2 != 1100)
    return SamplerBase::SetProperty(this, a2, a3, a4, a5, a6);
  if (a3)
    return 4294956430;
  if (!a5)
    return 4294956445;
  v8 = *(const void **)a5;
  result = AccessURLAsset(*(const __CFURL **)a5);
  if (!(_DWORD)result)
  {
    result = MIDISynth::SetCurrentBank(this, v8);
    if (!(_DWORD)result)
    {
      (*(void (**)(MIDISynth *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432))(this, 1000, 0, a4);
      (*(void (**)(MIDISynth *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432))(this, 1007, 0, a4);
      (*(void (**)(MIDISynth *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 432))(this, 1100, 0, a4);
      return 0;
    }
  }
  return result;
}

void sub_210ADC444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t MIDISynth::GetInstrumentCount(MIDISynth *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

void MIDISynth::PreloadInstrument(MIDISynth *this, uint64_t a2, unsigned int a3)
{
  _QWORD **v6;
  MIDISynth *v7;
  uint64_t **v8;
  SamplerState *v9;
  InstrumentManager *v10;
  uint64_t Instrument;
  _DWORD **v12;
  _DWORD **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  uint64_t **v22;
  char v23;
  _QWORD *v24;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v25 = 136315906;
    v26 = "MidiSynth.cpp";
    v27 = 1024;
    v28 = 324;
    v29 = 1024;
    v30 = a2;
    v31 = 1024;
    v32 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::PreloadInstrument: bank 0x%x, patch %u", (uint8_t *)&v25, 0x1Eu);
  }
  v6 = (_QWORD **)((char *)this + 840);
  v7 = (MIDISynth *)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)this + 840, a2, a3);
  if ((MIDISynth *)((char *)this + 848) == v7)
  {
    v8 = (uint64_t **)v7;
    if ((_DWORD)a2 != 9999 || a3)
    {
      if (!*((_QWORD *)this + 104))
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v25 = 136315394;
          v26 = "MidiSynth.cpp";
          v27 = 1024;
          v28 = 338;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d PreloadInstrument failed -- no sound bank is loaded", (uint8_t *)&v25, 0x12u);
        }
        return;
      }
      Instrument = (uint64_t)GlobalState::CreateInstrument(*((GlobalState **)this + 92), 0);
      ++*(_DWORD *)(Instrument + 8);
      GlobalState::LoadInstrumentFromDLSCollection(*((GlobalState **)this + 92), (InstrumentState *)Instrument, *((CFURLRef *)this + 104), a2, a3, 1);
    }
    else
    {
      v9 = (SamplerState *)*((_QWORD *)this + 92);
      v10 = (InstrumentManager *)operator new();
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 1) = 0;
      *(_QWORD *)v10 = (char *)v10 + 8;
      Instrument = operator new();
      InstrumentState::InstrumentState((InstrumentState *)Instrument, 0, v9, v10);
      v12 = *(_DWORD ***)(Instrument + 232);
      v13 = *(_DWORD ***)(Instrument + 240);
      while (v12 != v13)
      {
        if (*v12)
          SamplerState::Unref(*v12);
        ++v12;
      }
      a3 = 0;
      ++*(_DWORD *)(Instrument + 8);
      LODWORD(a2) = 9999;
    }
    v14 = (uint64_t *)operator new(0x30uLL);
    v15 = v14;
    *((_DWORD *)v14 + 8) = a2 | (a3 << 16);
    v14[5] = Instrument;
    v16 = *v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v16;
          v18 = *((unsigned __int16 *)v16 + 16);
          if (v18 == (_DWORD)a2)
            break;
          if (v18 <= a2)
          {
            if (v18 >= a2)
              v23 = 1;
            else
              v23 = -1;
            if ((v23 & 0x80) == 0)
              goto LABEL_39;
            goto LABEL_31;
          }
LABEL_25:
          v16 = (uint64_t *)*v16;
          v22 = v17;
          if (!*v17)
            goto LABEL_34;
        }
        v19 = *((unsigned __int8 *)v16 + 34);
        v20 = v19 == a3;
        if (v19 > a3)
          goto LABEL_25;
        if (v19 >= a3)
          v21 = 1;
        else
          v21 = -1;
        if (v20)
          v21 = 0;
        if ((v21 & 0x80) == 0)
        {
LABEL_39:
          operator delete(v14);
          return;
        }
LABEL_31:
        v22 = (uint64_t **)(v16 + 1);
        v16 = (uint64_t *)v16[1];
        if (!v16)
          goto LABEL_34;
      }
    }
    v17 = v8;
    v22 = v8;
LABEL_34:
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v17;
    *v22 = v14;
    v24 = (_QWORD *)**v6;
    if (v24)
    {
      *v6 = v24;
      v15 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v8, v15);
    ++*((_QWORD *)this + 107);
  }
}

void sub_210ADC7B8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x212BCDF50](v2, 0x10E1C4007E2654BLL);
    __cxa_begin_catch(exception_object);
    SamplerState::Unref(0);
    __cxa_end_catch();
    JUMPOUT(0x210ADC780);
  }
  _Unwind_Resume(exception_object);
}

void MIDISynth::GetLoadedInstrument(MIDISynth *this, int a2, int a3)
{
  MIDISynth *v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v7 = 136315906;
    v8 = "MidiSynth.cpp";
    v9 = 1024;
    v10 = 351;
    v11 = 1024;
    v12 = a2;
    v13 = 1024;
    v14 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d MIDISynth::GetLoadedInstrument: bank 0x%x, patch %u", (uint8_t *)&v7, 0x1Eu);
  }
  v6 = (MIDISynth *)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)this + 840, a2, a3);
  if ((MIDISynth *)((char *)this + 848) == v6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315906;
      v8 = "MidiSynth.cpp";
      v9 = 1024;
      v10 = 358;
      v11 = 1024;
      v12 = a2;
      v13 = 1024;
      v14 = a3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d MIDISynth::GetLoadedInstrument: no instrument for bank 0x%x patch %d - returning silent instrument", (uint8_t *)&v7, 0x1Eu);
    }
    if (v6 == (MIDISynth *)std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>((uint64_t)this + 840, 0x270Fu, 0))
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v7 = 136315394;
        v8 = "MidiSynth.cpp";
        v9 = 1024;
        v10 = 360;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: silent instrument missing from inst list", (uint8_t *)&v7, 0x12u);
      }
      __break(1u);
    }
  }
}

void MIDISynth::InitializeMemory(MIDISynth *this)
{
  AudioStreamer *v1;

  VoiceZone::InitializeAllocationPool((VoiceZone *)0x400);
  AudioStreamer::Initialize(v1);
}

uint64_t MIDISynth::GetInitializeNoteCount(MIDISynth *this)
{
  return 128;
}

void MIDISynth::CleanupMemory(MIDISynth *this)
{
  VoiceZone *v1;

  AudioStreamer::Destroy(this);
  VoiceZone::ShutdownAllocationPool(v1);
}

uint64_t MIDISynth::Configure(MIDISynth *this)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  SamplerBase::Configure(this);
  (*(void (**)(MIDISynth *, uint64_t, _QWORD))(*(_QWORD *)this + 704))(this, 9999, 0);
  if (!*((_QWORD *)this + 104) && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315394;
    v4 = "MidiSynth.cpp";
    v5 = 1024;
    v6 = 228;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configure: No sound bank URL has been set", (uint8_t *)&v3, 0x12u);
  }
  return MIDISynth::ConfigureInstruments(this);
}

void `non-virtual thunk to'MIDISynth::~MIDISynth(MIDISynth *this)
{
  MIDISynth::~MIDISynth((MIDISynth *)((char *)this - 528));
}

{
  MIDISynth::~MIDISynth((MIDISynth *)((char *)this - 528));
  JUMPOUT(0x212BCDF50);
}

void sub_210ADCD80(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t MIDISynth::SetCurrentBank(MIDISynth *this, CFTypeRef cf)
{
  const void **v4;
  DLSBankManager *Instance;
  DLSBankManager *v6;
  __CFString *PathComponent;

  if (cf)
    CFRetain(cf);
  v4 = (const void **)*((_QWORD *)this + 104);
  if (v4)
  {
    PathComponent = (__CFString *)CFURLCopyLastPathComponent((CFURLRef)v4);
    Instance = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)PathComponent);
    DLSBankManager::ReleaseBank(Instance, PathComponent);
    CFRelease(*((CFTypeRef *)this + 104));
    v4 = Smart<__CFString const*>::~Smart((const void **)&PathComponent);
  }
  *((_QWORD *)this + 104) = cf;
  if (cf)
  {
    v6 = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)v4);
    DLSBankManager::AddBank(v6, *((CFURLRef *)this + 104), *(_BYTE *)(*((_QWORD *)this + 92) + 176));
    if (*((_BYTE *)this + 17))
      MIDISynth::ConfigureInstruments(this);
  }
  return 0;
}

uint64_t MIDISynth::ConfigureInstruments(MIDISynth *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(MIDISynth *, uint64_t, _QWORD))(*(_QWORD *)this + 704))(this, 30976, 0);
  (*(void (**)(MIDISynth *, uint64_t, _QWORD))(*(_QWORD *)this + 704))(this, 30720, 0);
  v7[0] = &off_24CA95400;
  v8 = v7;
  SamplerBase::DoForGroupElements((MIDISynth *)((char *)this + 176), (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  v4 = 0;
  do
  {
    v5 = v4;
    result = (*(uint64_t (**)(MIDISynth *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 616))(this, v4++, 192, 0, 0);
  }
  while (v5 < 0xF);
  return result;
}

void sub_210ADCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA95400;
  return result;
}

void std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA95400;
}

uint64_t std::__function::__func<MIDISynth::ConfigureInstruments(void)::$_0,std::allocator<MIDISynth::ConfigureInstruments(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 376) = 1;
  return 0;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::__map_value_compare<std::pair<unsigned short,unsigned char> const,std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>,std::less<std::pair<unsigned short,unsigned char>>,true>,std::allocator<std::__value_type<std::pair<unsigned short,unsigned char> const,InstrumentState *>>>::find<std::pair<unsigned short,unsigned char>>(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  char v17;

  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return v3;
  v6 = v3;
  do
  {
    v7 = *(unsigned __int16 *)(v4 + 32);
    v8 = v7 == a2;
    if (v7 >= a2)
      v9 = 1;
    else
      v9 = -1;
    if (v8)
    {
      v10 = *(unsigned __int8 *)(v4 + 34);
      v11 = v10 == a3;
      v9 = v10 >= a3 ? 1 : -1;
      if (v11)
        v9 = 0;
    }
    v12 = (v9 & 0x80) == 0;
    if (v9 < 0)
      v13 = (uint64_t *)(v4 + 8);
    else
      v13 = (uint64_t *)v4;
    if (v12)
      v6 = v4;
    v4 = *v13;
  }
  while (*v13);
  if (v3 == v6)
    return v3;
  v14 = *(unsigned __int16 *)(v6 + 32);
  if (v14 <= a2)
    v15 = 1;
  else
    v15 = -1;
  if (v14 == a2)
  {
    v16 = *(unsigned __int8 *)(v6 + 34);
    v17 = -1;
    if (v16 <= a3)
      v17 = 1;
    if (v16 == a3)
      v15 = 0;
    else
      v15 = v17;
  }
  if (v15 < 0)
    return v3;
  return v6;
}

void std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA96AD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA96AD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIDISynth::SetPrerollMode(unsigned char)::$_0,std::allocator<MIDISynth::SetPrerollMode(unsigned char)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 377) = **(_BYTE **)(a1 + 8) != 0;
  return 0;
}

_QWORD *MIDISynthFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x3A0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct(SamplerBase *a1, OpaqueAudioComponentInstance *a2)
{
  _QWORD *v2;
  unsigned int v3;

  SamplerBase::SamplerBase(a1, a2, 16, 16);
  *v2 = &off_24CA941D0;
  v2[66] = &unk_24CA944E8;
  v2[104] = 0;
  v2[107] = 0;
  v2[106] = 0;
  v2[105] = v2 + 106;
  do
    v3 = __ldxr(SamplerBase::sInstanceCount);
  while (__stxr(v3 + 1, SamplerBase::sInstanceCount));
}

uint64_t ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void AURemoteIOPropertyMarshaller::~AURemoteIOPropertyMarshaller(AURemoteIOPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x212BCDF50);
}

void TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x212BCDF50);
}

BOOL TMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a4 == 8;
}

BOOL TMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::SerializeT(int a1, CASerializer *this, void *a3)
{
  int v6;

  CASerializer::Write(this, a3);
  v6 = *((_DWORD *)a3 + 1);
  return CASerializer::Write(this, &v6);
}

uint64_t TSimpleMarshaller<AUVoiceIOOtherAudioDuckingConfiguration>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  uint64_t result;
  int v6;

  v6 = 0;
  CADeserializer::Read(this, a3);
  result = CADeserializer::Read(this, &v6);
  *((_DWORD *)a3 + 1) = v6;
  return result;
}

BOOL TMarshaller<audit_token_t>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20)
    return 0;
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, *a3);
  return *(_BYTE *)(a2 + 32) == 0;
}

uint64_t TPODMarshaller<audit_token_t>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

void CompressorKernel::Reset(CompressorKernel *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;

  v2 = *(float *)this;
  v3 = powf(1.7782, 1.0 / (float)(*(float *)this * 0.02));
  v4 = powf(1.7782, 1.0 / (float)(v2 * 0.1));
  v5 = 1.0 - expf(-6.2832 / v2);
  v6 = 1.0 - powf(0.1, 1.0 / (float)(v2 * 0.05));
  bzero((char *)this + 4, 0x40CuLL);
  *((_DWORD *)this + 260) = 1215954944;
  *(_OWORD *)((char *)this + 1044) = 0u;
  *((float *)this + 265) = v3;
  *((float *)this + 266) = v4;
  *((float *)this + 267) = v5;
  __asm { FMOV            V0.4S, #-1.0 }
  *((_OWORD *)this + 67) = _Q0;
  *((_OWORD *)this + 68) = xmmword_210B0A340;
  *((_OWORD *)this + 69) = xmmword_210B0A350;
  bzero((char *)this + 1120, 0x804uLL);
  *((float *)this + 793) = v6;
  *((_BYTE *)this + 3176) = 0;
}

void CompressorKernel::Process(CompressorKernel *this, float *a2, float *a3, int a4, float *a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float *a13, float *a14)
{
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  char *v35;
  char *v36;
  int v37;
  double v38;
  double v39;
  float *v40;
  int v41;
  int v42;
  double v43;
  double v44;
  float v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float v51;
  double v52;
  float v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  float v62;
  float v63;
  float v64;
  int v65;
  int v66;
  double v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  char *v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  double v81;
  float v82;
  double v83;
  double v84;
  int v85;

  if (*((float *)this + 271) != a6)
  {
    *((float *)this + 271) = a6;
    v27 = __exp10f(a6 * 0.05);
    *((float *)this + 260) = (float)(v27 * v27) * 128.0;
  }
  if (*((float *)this + 272) != a8)
  {
    *((float *)this + 272) = a8;
    v28 = __exp10f(a8 * 0.05);
    v29 = (float)(v28 * v28) * 128.0;
    *((float *)this + 261) = v29;
    *((float *)this + 262) = v29 * 5.0;
  }
  v30 = *(float *)this;
  if (*((float *)this + 268) == a10)
  {
    v82 = *((float *)this + 273);
  }
  else
  {
    *((float *)this + 268) = a10;
    v31 = 1.0 - pow(0.1, 1.0 / (float)(v30 * a10));
    v82 = v31;
    *((float *)this + 273) = v31;
  }
  if (*((float *)this + 269) == a11)
  {
    v80 = *((float *)this + 274);
  }
  else
  {
    *((float *)this + 269) = a11;
    v32 = pow(1.7782, 1.0 / (float)(v30 * a11));
    v80 = v32;
    *((float *)this + 274) = v32;
  }
  if (*((float *)this + 270) == a12)
  {
    v33 = *((float *)this + 275);
  }
  else
  {
    *((float *)this + 270) = a12;
    v33 = __exp10f(a12 * 0.05);
    *((float *)this + 275) = v33;
  }
  if (a4 >= 1)
  {
    v81 = a8;
    v34 = a7;
    v83 = a6;
    v35 = (char *)this + 1120;
    v36 = (char *)this + 4;
    v37 = *((unsigned __int8 *)this + 3176);
    v38 = *((double *)this + 129);
    v39 = 20.0;
    v84 = 1.57079633 / v34;
    v40 = a13;
    do
    {
      if (a4 >= 0x40)
        v41 = 64;
      else
        v41 = a4;
      v85 = a4;
      if (v37)
      {
        if (v38 <= *((float *)this + 262))
        {
          v42 = 1;
        }
        else
        {
          v42 = 0;
          *((_DWORD *)this + 276) = 1065353216;
          *((_BYTE *)this + 3176) = 0;
        }
      }
      else
      {
        v42 = 0;
      }
      v43 = sqrt(v38 * 0.0078125);
      if (v43 < 2.22507386e-308)
        v43 = 2.22507386e-308;
      v44 = log10(v43) * v39;
      if (v44 < -160.0)
        v44 = -160.0;
      v45 = *((float *)this + 278) + (v44 - *((float *)this + 278)) * 0.0199999996;
      *((float *)this + 278) = v45;
      v46 = *((float *)this + 260);
      if (v38 <= v46)
      {
        v54 = *((float *)this + 261);
        if (v38 < v54)
        {
          v55 = sqrt(v38 / v54);
          if (v55 >= 0.00000199999995)
            v56 = v55;
          else
            v56 = 0.00000199999995;
          v57 = 2.22507386e-308;
          if (v56 >= 2.22507386e-308)
            v57 = v56;
          v58 = log10(v57) * 20.0 * a9;
          if (v58 >= -140.0)
            v59 = v58;
          else
            v59 = -140.0;
          v60 = __exp10(v59 * 0.05);
          v61 = v59 + v81;
          if (v59 + v81 < -160.0)
            v61 = -160.0;
          v62 = *((float *)this + 279) + (v61 - *((float *)this + 279)) * 0.0199999996;
          *((float *)this + 279) = v62;
          v53 = v60 / v56;
          *((_BYTE *)this + 3176) = 1;
          v63 = *((float *)this + 276);
          if (v63 >= v53)
            v64 = *((float *)this + 793);
          else
            v64 = *((float *)this + 266);
          v37 = 1;
          v65 = v85;
          v39 = 20.0;
          goto LABEL_57;
        }
        *((float *)this + 279) = v45;
        v53 = 1.0;
        v37 = v42;
      }
      else
      {
        v47 = sqrt(v38 / v46);
        if (v47 < 0.00000999999975)
          v47 = 0.00000999999975;
        if (v47 < 2.22507386e-308)
          v47 = 2.22507386e-308;
        v48 = log10(v47) * v39;
        v49 = atan(v84 * v48) / v84;
        v50 = v49 + v83;
        if (v49 + v83 < -160.0)
          v50 = -160.0;
        v51 = *((float *)this + 279) + (v50 - *((float *)this + 279)) * 0.0199999996;
        *((float *)this + 279) = v51;
        v52 = __exp10((v49 - v48) * 0.05);
        v37 = 0;
        v53 = v52;
        *((_BYTE *)this + 3176) = 0;
      }
      v63 = *((float *)this + 276);
      v65 = v85;
      if (v53 <= v63)
      {
        v64 = v82;
      }
      else if (*((double *)this + 129) <= *((float *)this + 263))
      {
        v64 = v80;
      }
      else
      {
        v64 = *((float *)this + 265);
      }
LABEL_57:
      a4 = v65 - v41;
      v66 = *((_DWORD *)this + 792);
      v67 = *((double *)this + 129);
      v68 = *((_DWORD *)this + 257);
      v69 = *((float *)this + 264);
      do
      {
        v70 = *a2;
        if (a13)
        {
          v71 = *a5++;
          v72 = *(float *)&v35[8 * v66];
          v73 = &v35[8 * v66];
          v74 = *((float *)v73 + 1);
          *(float *)&v35[8 * v66] = v70;
          v70 = (float)(v70 + v71) * 0.5;
          *((float *)v73 + 1) = v71;
        }
        else
        {
          v72 = *(float *)&v35[4 * v66];
          *(float *)&v35[4 * v66] = v70;
          v74 = 0.0;
        }
        v75 = v70 * v70;
        v76 = *(float *)&v36[4 * v68];
        *(float *)&v36[4 * v68] = v70 * v70;
        v77 = *((float *)this + 267);
        v78 = v64 * v63;
        if ((float)(v64 * v63) > 1.0)
          v78 = 1.0;
        v63 = v63 + (float)((float)(v53 - v63) * v64);
        if (v64 >= 1.0)
          v63 = v78;
        *a3 = (float)(v33 * v72) * v63;
        if (a13)
          *v40++ = (float)(v33 * v74) * v63;
        ++a2;
        v66 = (v66 + 1);
        v67 = v67 + v75 - v76;
        v68 = (v68 + 1);
        v79 = v69 * v77;
        v69 = v67 + v69 - v79;
        ++a3;
        --v41;
      }
      while (v41);
      *((_DWORD *)this + 792) = v66;
      if (v67 >= 0.0)
        v38 = v67;
      else
        v38 = 0.0;
      *((double *)this + 129) = v38;
      *((_DWORD *)this + 257) = v68;
      *((float *)this + 276) = v63;
      *((float *)this + 264) = v69;
      *((float *)this + 263) = v79;
      *((float *)this + 277) = *((float *)this + 277) + (float)((float)(v63 - *((float *)this + 277)) * 0.02);
    }
    while (a4 > 0);
  }
}

void AUScheduledSoundPlayer::~AUScheduledSoundPlayer(AUScheduledSoundPlayer *this)
{
  AUScheduledSoundPlayer::~AUScheduledSoundPlayer(this);
  JUMPOUT(0x212BCDF50);
}

{
  AUScheduledSoundPlayer::SliceEventHandler *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24CA913E0;
  v2 = (AUScheduledSoundPlayer *)((char *)this + 728);
  v3 = *((_QWORD *)this + 92);
  v4 = *((_QWORD *)this + 91);
  while (v3 != v4)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v3 - 72));
  *((_QWORD *)this + 92) = v4;
  AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(v2);
  CADeprecated::CAMutex::~CAMutex((AUScheduledSoundPlayer *)((char *)this + 528));
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUScheduledSoundPlayer::Cleanup(AUScheduledSoundPlayer *this)
{
  return (*(uint64_t (**)(AUScheduledSoundPlayer *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
}

uint64_t AUScheduledSoundPlayer::Reset(AUScheduledSoundPlayer *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD);

  v2 = (char *)this + 528;
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 66) + 16))((char *)this + 528);
  v4 = *((_QWORD *)this + 92);
  v5 = *((_QWORD *)this + 91);
  while (v4 != v5)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v4 - 72));
  *((_QWORD *)this + 92) = v5;
  v6 = *((_QWORD *)this + 77);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 88);
      *(_DWORD *)(v6 + 80) |= 1u;
      v8 = *(void (**)(_QWORD))(v6 + 64);
      if (v8)
        v8(*(_QWORD *)(v6 + 72));
      v6 = v7;
    }
    while (v7);
  }
  *((_QWORD *)this + 77) = 0;
  v9 = *((_QWORD *)this + 78);
  if (v9)
  {
    do
    {
      while (1)
      {
        v10 = *(_QWORD *)(v9 + 88);
        *((_QWORD *)this + 78) = v10;
        *(_DWORD *)(v9 + 80) |= 1u;
        v11 = *(void (**)(_QWORD))(v9 + 64);
        if (!v11)
          break;
        v11(*(_QWORD *)(v9 + 72));
        v9 = *((_QWORD *)this + 78);
        if (!v9)
          goto LABEL_13;
      }
      v9 = v10;
    }
    while (v10);
  }
LABEL_13:
  *((_BYTE *)this + 752) = 0;
  *((_QWORD *)this + 90) = 0xBFF0000000000000;
  *((_QWORD *)this + 79) = 0;
  if (v3)
    (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
  return 0;
}

void sub_210ADDC20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t AUScheduledSoundPlayer::GetPropertyInfo(AUScheduledSoundPlayer *this, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if ((a2 - 3300) > 2)
    return 4294956417;
  result = 0;
  *a5 = dword_210B09BD0[a2 - 3300];
  *a6 = 0x101u >> (8 * (a2 + 28));
  return result;
}

uint64_t AUScheduledSoundPlayer::GetProperty(AUScheduledSoundPlayer *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10;

  if (a2 == 3302)
  {
    a5[14] = 1;
    v10 = -1.0;
    if (*((double *)this + 90) >= 0.0)
      v10 = *((double *)this + 80);
    result = 0;
    *(double *)a5 = v10;
  }
  else if (a2 == 3301)
  {
    result = 0;
    v7 = *((_OWORD *)this + 41);
    v8 = *((_OWORD *)this + 42);
    v9 = *((_OWORD *)this + 44);
    *((_OWORD *)a5 + 2) = *((_OWORD *)this + 43);
    *((_OWORD *)a5 + 3) = v9;
    *(_OWORD *)a5 = v7;
    *((_OWORD *)a5 + 1) = v8;
  }
  else
  {
    return 4294956417;
  }
  return result;
}

__n128 AUScheduledSoundPlayer::SetProperty(__n128 *this, int a2, unsigned int a3, unsigned int a4, __n128 *a5, unsigned int a6)
{
  unint64_t *n128_u64;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __n128 v10;
  __n128 v11;

  if (a2 == 3301)
  {
    if (a6 >= 0x40)
    {
      this[45].n128_u64[0] = 0xBFF0000000000000;
      result = *a5;
      v10 = a5[1];
      v11 = a5[3];
      this[43] = a5[2];
      this[44] = v11;
      this[41] = result;
      this[42] = v10;
      this[47].n128_u8[0] = 1;
    }
  }
  else if (a2 == 3300 && a6 >= 0x70)
  {
    n128_u64 = this[39].n128_u64;
    while (1)
    {
      v7 = *n128_u64;
      a5[5].n128_u64[1] = *n128_u64;
      while (1)
      {
        v8 = __ldaxr(n128_u64);
        if (v8 != v7)
          break;
        if (!__stlxr((unint64_t)a5, n128_u64))
          return result;
      }
      __clrex();
    }
  }
  return result;
}

uint64_t AUScheduledSoundPlayer::Render(AUScheduledSoundPlayer *this, const float *a2, int64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  vDSP_Length v8;
  ausdk::AUScope *v9;
  uint64_t Element;
  uint64_t BufferList;
  double v12;
  __n128 v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  double v46;
  int v47;
  double v48;
  float v49;
  BOOL v50;
  float v52;
  unsigned int v53;
  unsigned int *v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  BOOL v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t *v67;
  void (*v68)(_QWORD);
  uint64_t v69;
  unsigned int v70;
  double v72;
  double v73;
  double *v74;
  AudioTimeStamp *NextReadSlice;
  double v76;
  unsigned int v78;
  uint64_t v79;
  double v80;
  int mRateScalar_low;
  double mSampleTime;
  int v83;
  unsigned int v84;
  unsigned int v85;
  double v86;
  unsigned int v87;
  unsigned int v88;
  int BufferOffsetForTime;
  uint64_t v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  UInt64 v98;
  UInt64 v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  unsigned int v103;
  _DWORD *v104;
  double *v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  vDSP_Length v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double __Step;
  vDSP_Length v126;
  __int16 v127;
  float __Start;
  const char *v129;
  __int16 v130;
  int v131;
  uint64_t v132;

  LODWORD(v5) = a4;
  v8 = (vDSP_Length)this;
  v132 = *MEMORY[0x24BDAC8D0];
  v9 = (AUScheduledSoundPlayer *)((char *)this + 128);
  Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  v12 = *(double *)(ausdk::AUScope::SafeGetElement(v9, 0) + 80);
  v126 = v8 + 528;
  v127 = 0;
  HIBYTE(v127) = (*(uint64_t (**)(vDSP_Length, __int16 *))(*(_QWORD *)(v8 + 528) + 32))(v8 + 528, &v127);
  if ((v127 & 0x100) != 0)
  {
    v112 = v8;
    v118 = BufferList;
    if (!*(_BYTE *)(v8 + 752))
      goto LABEL_7;
    v16 = *(double *)(v8 + 720);
    if (v16 >= 0.0)
      goto LABEL_142;
    LODWORD(v17) = *(_DWORD *)(v8 + 712);
    if ((v17 & 1) != 0)
    {
      v16 = *(double *)(v8 + 656);
      if (v16 < 0.0)
      {
        v16 = *(double *)a3;
        *(_DWORD *)(v8 + 712) = v17 | 1;
        *(double *)(v8 + 656) = v16;
      }
      goto LABEL_141;
    }
    if ((v17 & 2) == 0 || (LODWORD(v4) = *(_DWORD *)(a3 + 56), (v4 & 2) == 0))
    {
LABEL_7:
      v18 = 0;
      v19 = 0;
      goto LABEL_8;
    }
LABEL_184:
    v98 = *(_QWORD *)(v8 + 664);
    if (!v98)
    {
      v16 = *(double *)a3;
LABEL_141:
      *(double *)(v8 + 720) = v16;
      goto LABEL_142;
    }
    v99 = *(_QWORD *)(a3 + 8);
    v100 = __udivti3();
    v13.n128_u64[0] = *(_QWORD *)(a3 + 16);
    if (v98 >= v99)
      v101 = v100;
    else
      v101 = -v100;
    if ((v4 & 4) == 0)
      v13.n128_f64[0] = 1.0;
    v14 = *(double *)a3;
    v16 = round(*(double *)a3 + (double)v101 * 0.000000001 * (v12 / v13.n128_f64[0]));
    if (v16 < *(double *)a3 + (double)v5)
    {
      v8 = v112;
      *(double *)(v112 + 720) = v16;
      *(_DWORD *)(v112 + 712) = v17 | 1;
      *(double *)(v112 + 656) = v16;
LABEL_142:
      v18 = 0;
      v72 = *(double *)a3;
      v12 = *(double *)a3 - v16;
      v13.n128_f64[0] = (double)v5;
      v73 = v12 + (double)v5;
      *(double *)(v8 + 640) = v12;
      *(double *)(v8 + 648) = v12;
      v17 = v8 + 616;
      v122 = BufferList + 8;
      while (1)
      {
        AUScheduledSoundPlayer::InsertAddedSlices((AUScheduledSoundPlayer *)v8, v13, v72, v14, v15);
        v124 = 0.0;
        __Step = 0.0;
        NextReadSlice = (AudioTimeStamp *)AUScheduledSoundPlayer::GetNextReadSlice(0, (_QWORD *)v17, (ExtScheduledAudioSlice **)&__Step, v12, v73, &v124, v74);
        if (!NextReadSlice)
          goto LABEL_196;
        v76 = v124;
        if (v124 <= __Step)
          goto LABEL_196;
        if (v12 > __Step || v124 > v73)
          break;
        v115 = v17;
        if (v12 < __Step)
        {
          v78 = (__Step - v12);
          if (*(int *)BufferList >= 1)
          {
            LODWORD(v4) = *(_DWORD *)BufferList + 1;
            v79 = v122;
            do
            {
              bzero((void *)(*(_QWORD *)(v79 + 8) + 4 * *(_DWORD *)v79 * v18), 4 * *(_DWORD *)v79 * v78);
              LODWORD(v4) = v4 - 1;
              v79 += 16;
            }
            while (v4 > 1);
          }
          LODWORD(v5) = v5 - v78;
          v18 += v78;
          v12 = v12 + (double)v78;
          *(double *)(v8 + 648) = *(double *)(v8 + 648) + (double)v78;
        }
        v120 = (unsigned int *)a2;
        v72 = (double)v5;
        if (v76 - v12 <= (double)v5)
          v80 = v76 - v12;
        else
          v80 = (double)v5;
        mRateScalar_low = LODWORD(NextReadSlice[1].mRateScalar);
        mSampleTime = NextReadSlice->mSampleTime;
        if ((mRateScalar_low & 2) == 0)
        {
          if (v12 <= mSampleTime)
            v83 = 2;
          else
            v83 = 6;
          mRateScalar_low |= v83;
          LODWORD(NextReadSlice[1].mRateScalar) = mRateScalar_low;
        }
        v117 = v5;
        v84 = v80;
        if ((NextReadSlice->mFlags & 1) != 0
          && mSampleTime <= v12
          && ((v4 = *(unsigned int *)&NextReadSlice[1].mSMPTETime.mSubframes, (mRateScalar_low & 8) != 0)
           || (v72 = (double)v4, mSampleTime + (double)v4 > v12)))
        {
          v86 = v12;
          v87 = v18;
          v88 = v80;
          if (v84)
          {
            do
            {
              a3 = (int64_t)NextReadSlice;
              BufferOffsetForTime = ExtScheduledAudioSlice::GetBufferOffsetForTime((ExtScheduledAudioSlice *)NextReadSlice, v86);
              v90 = v4;
              if ((int)v4 - BufferOffsetForTime >= v88)
                v91 = v88;
              else
                v91 = v4 - BufferOffsetForTime;
              if (*(int *)BufferList >= 1)
              {
                v92 = BufferOffsetForTime;
                v93 = *(_DWORD *)BufferList + 1;
                v94 = (uint64_t *)(*(_QWORD *)(a3 + 104) + 16);
                v95 = v122;
                do
                {
                  v96 = *v94;
                  v94 += 2;
                  memcpy((void *)(*(_QWORD *)(v95 + 8) + 4 * *(_DWORD *)v95 * v87), (const void *)(v96 + (4 * *(_DWORD *)v95 * v92)), 4 * *(_DWORD *)v95 * v91);
                  --v93;
                  v95 += 16;
                }
                while (v93 > 1);
              }
              v87 += v91;
              v86 = v86 + (double)v91;
              v88 -= v91;
              BufferList = v118;
              v4 = v90;
              NextReadSlice = (AudioTimeStamp *)a3;
              v84 = v80;
            }
            while (v88);
          }
        }
        else if (*(int *)BufferList >= 1)
        {
          v85 = *(_DWORD *)BufferList + 1;
          v4 = v122;
          do
          {
            bzero((void *)(*(_QWORD *)(v4 + 8) + 4 * *(_DWORD *)v4 * v18), 4 * *(_DWORD *)v4 * v84);
            --v85;
            v4 += 16;
          }
          while (v85 > 1);
        }
        v18 += v84;
        v8 = v112;
        v13.n128_f64[0] = v80 + *(double *)(v112 + 648);
        *(_QWORD *)(v112 + 648) = v13.n128_u64[0];
        LODWORD(v5) = v117 - v84;
        if (v117 == v84)
        {
          a2 = (const float *)v120;
LABEL_196:
          v19 = 1;
          goto LABEL_8;
        }
        v12 = v12 + v80;
        a2 = (const float *)v120;
        v17 = v115;
      }
      if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        goto LABEL_183;
      __Start = 4.8151e-34;
      v129 = "AUScheduledSoundPlayer.cpp";
      v130 = 1024;
      v131 = 1476;
      v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(curRenderTime, sliceStartTime) && STIsLE(sliceEndTime, endRenderTime)) "
            "!= 0 is false]: ";
      goto LABEL_182;
    }
    v18 = 0;
    v19 = 0;
    v8 = v112;
LABEL_8:
    if ((_DWORD)v5)
    {
      if (*(int *)BufferList >= 1)
      {
        v20 = BufferList + 8;
        v21 = *(_DWORD *)BufferList + 1;
        do
        {
          bzero((void *)(*(_QWORD *)(v20 + 8) + 4 * *(_DWORD *)v20 * v18), (4 * *(_DWORD *)v20 * v5));
          --v21;
          v20 += 16;
        }
        while (v21 > 1);
      }
      if (!v18)
        *(_DWORD *)a2 |= 0x10u;
      if (v19)
        *(double *)(v8 + 648) = *(double *)(v8 + 648) + (double)v5;
      v18 += v5;
    }
    if (!v19)
      goto LABEL_136;
    if (*(double *)(v8 + 720) >= 0.0)
    {
      v22 = *(double *)(v8 + 640);
      if (v22 >= 0.0)
      {
        if (v18)
        {
          v23 = *(_QWORD *)(v8 + 736);
          v24 = *(_QWORD *)(v8 + 728);
          if (v23 == v24)
            goto LABEL_117;
          v25 = 0;
          v26 = 0;
          v27 = v22 + (double)v18;
          v107 = BufferList + 8;
          a3 = 72;
LABEL_23:
          v28 = v24 + 72 * v25;
          v29 = *(_DWORD *)(v28 + 32);
          v104 = (_DWORD *)(v28 + 32);
          if (!v29)
            goto LABEL_116;
          v103 = v26;
          if (!*(_DWORD *)BufferList)
            goto LABEL_115;
          v30 = v24 + 72 * v25;
          v31 = *(double *)(v30 + 8);
          v106 = (double *)(v30 + 8);
          v32 = v31 >= v22 ? *(double *)(v30 + 8) : v22;
          v33 = (double)v29;
          v34 = v31 + (double)v29;
          v35 = v27 >= v34 ? v34 : v27;
          if (v35 <= v32)
            goto LABEL_115;
          v109 = 0;
          v111 = (v35 - v32);
          v36 = v24 + 72 * v25;
          v102 = (double *)(v36 + 16);
          v105 = (double *)(v36 + 24);
          v121 = v25;
          v108 = v24;
          while (1)
          {
            if (v32 >= v35)
              goto LABEL_100;
            v37 = 0;
            v17 = 0;
            v38 = 1;
            v12 = 0.0;
            v39 = 0.0;
            do
            {
              LOBYTE(v4) = v38;
              v40 = v24 + 72 * v121 + 16 * v37;
              v41 = *(_QWORD *)(v40 + 48);
              if (v41)
              {
                v42 = *(double *)(v41 + 32);
                v33 = *(double *)(v41 + 40);
                if (v42 > v33)
                {
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    __Start = 4.8151e-34;
                    v129 = "AUScheduledSoundPlayer.cpp";
                    v130 = 1024;
                    v131 = 457;
                    v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
                    goto LABEL_182;
                  }
                  goto LABEL_183;
                }
                v43 = v42 > v32 || v33 <= v32;
                if (!v43 || (v42 >= v32 ? (v44 = v42 < v35) : (v44 = 0), v44))
                {
                  if (v17)
                  {
                    if (v42 > v12)
                    {
                      if (v42 < v39)
                        v39 = *(double *)(v41 + 32);
                      goto LABEL_68;
                    }
                    if (v33 < v39)
                      v39 = *(double *)(v41 + 40);
                  }
                  else
                  {
                    if (v42 <= v32)
                      v12 = v32;
                    else
                      v12 = *(double *)(v41 + 32);
                    if (v33 >= v35)
                      v39 = v35;
                    else
                      v39 = *(double *)(v41 + 40);
                  }
                  v17 = v40 + 40;
                }
                else if (v33 <= v32)
                {
                  AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v40 + 40);
                }
                else if (v42 >= v35)
                {
                  break;
                }
              }
              v38 = 0;
              v37 = 1;
            }
            while ((v4 & 1) != 0);
            if (!v17)
            {
              v25 = v121;
              goto LABEL_100;
            }
LABEL_68:
            v45 = *(_QWORD *)(v17 + 8);
            v25 = v121;
            if (!v45)
              goto LABEL_100;
            if (v39 <= v12)
              goto LABEL_100;
            v46 = *v106;
            if (v12 < *v106)
              goto LABEL_100;
            v47 = 0;
            v33 = *v102;
            v48 = *v105;
            v49 = *v105;
            *(float *)&__Step = v49;
            if ((*(_BYTE *)(v45 + 56) & 1) != 0 && *(double *)v45 <= v12)
            {
              v113 = *(_DWORD *)(v45 + 96);
              v50 = *(double *)v45 + (double)v113 <= v12 && (*(_BYTE *)(v45 + 80) & 8) == 0;
              v47 = 0;
              if (!v50 && v111 != 0)
              {
                v52 = v33 + (v12 - v46) * v48;
                v119 = v109;
                LODWORD(v8) = v111;
                v110 = v45;
                while (1)
                {
                  v116 = v47;
                  v53 = ExtScheduledAudioSlice::GetBufferOffsetForTime((ExtScheduledAudioSlice *)v45, v12);
                  v114 = v8;
                  v8 = v113 - v53 >= v8 ? v8 : v113 - v53;
                  if (!(_DWORD)v8)
                    break;
                  BufferList = *(unsigned int *)BufferList;
                  if ((int)BufferList >= 1)
                  {
                    v54 = (unsigned int *)(*(_QWORD *)(v45 + 104) + 8);
                    v123 = v53;
                    LOBYTE(v4) = v119;
                    v17 = v107;
                    do
                    {
                      a3 = *v54;
                      if ((_DWORD)a3 != *(_DWORD *)v17)
                      {
                        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                        {
                          __Start = 4.8151e-34;
                          v129 = "AUScheduledSoundPlayer.cpp";
                          v130 = 1024;
                          v131 = 226;
                          v97 = "%25s:%-5d ASSERTION FAILURE [(srcBuf->mNumberChannels == destBuf->mNumberChannels) != 0 is false]: ";
                          goto LABEL_182;
                        }
                        goto LABEL_183;
                      }
                      if ((_DWORD)a3)
                      {
                        v5 = 0;
                        v55 = 0;
                        v56 = (float *)(*(_QWORD *)(v17 + 8) + 4 * v119);
                        a2 = (const float *)(*((_QWORD *)v54 + 1) + 4 * v123);
                        do
                        {
                          __Start = v52;
                          a2 += v5;
                          v56 += v5;
                          vDSP_vrampmul(a2, a3, &__Start, (const float *)&__Step, v56, a3, v8);
                          ++v55;
                          v5 += 4;
                        }
                        while (v55 < *(unsigned int *)v17);
                      }
                      v54 += 4;
                      v17 += 16;
                      v43 = (int)BufferList <= 1;
                      BufferList = (BufferList - 1);
                    }
                    while (!v43);
                    v49 = *(float *)&__Step;
                    v24 = v108;
                    a3 = 72;
                    v25 = v121;
                    v45 = v110;
                  }
                  v52 = v52 + (float)((float)v8 * v49);
                  v119 += v8;
                  v12 = v12 + (double)v8;
                  v47 = v8 + v116;
                  LODWORD(v8) = v114 - v8;
                  BufferList = v118;
                  if (!(_DWORD)v8)
                    goto LABEL_97;
                }
                v47 = v116;
              }
            }
LABEL_97:
            if (v111 == v47)
              break;
            v111 -= v47;
            v109 += v47;
            v32 = v39;
            v8 = v112;
          }
          v32 = v39;
          v8 = v112;
LABEL_100:
          LODWORD(v33) = *v104;
          if (*v106 + (double)*(unint64_t *)&v33 <= v32)
            goto LABEL_114;
          v57 = 0;
          LODWORD(v17) = 0;
          while (1)
          {
            v4 = v57;
            v58 = v24 + 72 * v121 + 16 * v57;
            v59 = *(_QWORD *)(v58 + 48);
            if (v59)
            {
              v60 = *(double *)(v59 + 32);
              v61 = *(double *)(v59 + 40);
              if (v60 > v61)
              {
                if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  goto LABEL_183;
                __Start = 4.8151e-34;
                v129 = "AUScheduledSoundPlayer.cpp";
                v130 = 1024;
                v131 = 364;
                v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
LABEL_182:
                _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, v97, (uint8_t *)&__Start, 0x12u);
                goto LABEL_183;
              }
              if (v61 > v32)
              {
                v57 = 1;
                v62 = v60 < v32 && v4 == 0;
                LODWORD(v17) = 1;
                if (!v62)
                  goto LABEL_115;
                continue;
              }
              AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v58 + 40);
            }
            v57 = 1;
            if (v4)
            {
              v25 = v121;
              if ((v17 & 1) == 0)
              {
LABEL_114:
                *v106 = 0.0;
                *v104 = 0;
                *v105 = 0.0;
                AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v24 + 72 * v25 + 40);
                AUScheduledSoundPlayer::RampEvent::InvalidateSlice(v24 + 72 * v25 + 56);
              }
LABEL_115:
              v23 = *(_QWORD *)(v8 + 736);
              v24 = *(_QWORD *)(v8 + 728);
              v26 = v103;
LABEL_116:
              v25 = ++v26;
              if (0x8E38E38E38E38E39 * ((v23 - v24) >> 3) <= v26)
              {
LABEL_117:
                AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents((AUScheduledSoundPlayer::SliceEventHandler *)(v8 + 728));
                break;
              }
              goto LABEL_23;
            }
          }
        }
      }
    }
    v63 = *(_QWORD *)(v8 + 616);
    if (!v63)
      goto LABEL_136;
    v4 = 0;
    v12 = *(double *)(v8 + 648);
    v17 = v8 + 616;
    while (1)
    {
      v64 = *(double *)(v63 + 32);
      v65 = *(double *)(v63 + 40);
      if (v64 > v65)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          __Start = 4.8151e-34;
          v129 = "AUScheduledSoundPlayer.cpp";
          v130 = 1024;
          v131 = 1349;
          v97 = "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ";
          goto LABEL_182;
        }
LABEL_183:
        __break(1u);
        goto LABEL_184;
      }
      v66 = v63;
      v63 = *(_QWORD *)(v63 + 88);
      if (v65 > v12)
      {
        v4 = v66;
        if (v64 >= v12)
          goto LABEL_136;
        goto LABEL_130;
      }
      v67 = (uint64_t *)(v8 + 616);
      if (v66 != *(_QWORD *)v17)
      {
        if (!v4)
          goto LABEL_128;
        v67 = (uint64_t *)(v4 + 88);
      }
      *v67 = v63;
LABEL_128:
      *(_DWORD *)(v66 + 80) |= 1u;
      v68 = *(void (**)(_QWORD))(v66 + 64);
      if (v68)
        v68(*(_QWORD *)(v66 + 72));
LABEL_130:
      if (!v63)
        goto LABEL_136;
    }
  }
  if (*(int *)BufferList >= 1)
  {
    v69 = BufferList + 8;
    v70 = *(_DWORD *)BufferList + 1;
    do
    {
      bzero(*(void **)(v69 + 8), (4 * v5 * *(_DWORD *)v69));
      --v70;
      v69 += 16;
    }
    while (v70 > 1);
  }
  *(_DWORD *)a2 |= 0x10u;
LABEL_136:
  if ((_BYTE)v127)
    (*(void (**)(vDSP_Length))(*(_QWORD *)v126 + 24))(v126);
  return 0;
}

void sub_210ADE93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a30)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 24))(a29);
  _Unwind_Resume(exception_object);
}

uint64_t AUScheduledSoundPlayer::SupportedNumChannels(AUScheduledSoundPlayer *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 1;
}

BOOL AUScheduledSoundPlayer::ValidFormat(AUScheduledSoundPlayer *this, const AudioStreamBasicDescription *a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  _BOOL8 result;
  UInt32 mChannelsPerFrame;

  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, a2);
  if ((_DWORD)result)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 129 >= 0xFFFFFF80 && (mChannelsPerFrame < 2 || (a4->mFormatFlags & 0x20) != 0);
  }
  return result;
}

uint64_t AUScheduledSoundPlayer::Version(AUScheduledSoundPlayer *this)
{
  return 0x10000;
}

void AUScheduledSoundPlayer::InsertAddedSlices(AUScheduledSoundPlayer *this, __n128 a2, double a3, double a4, double a5)
{
  double v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD);
  unint64_t v15;
  int v16;
  double v17;
  uint64_t Element;
  double *v19;
  int64x2_t *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  AUScheduledSoundPlayer::RampEvent *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  void (*v38)(_QWORD);
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int64x2_t v59;
  unsigned int v60;
  double v61;
  unsigned int v62;
  uint64_t NextReadSlice;
  double v64;
  uint64_t v65;
  char v66;
  char v67;
  char *v68;
  unsigned int v70;
  const char *v72;
  unint64_t v73;
  void (*v74)(_QWORD, unint64_t);
  unint64_t v75;
  unint64_t v76;
  double v77;
  uint64_t v78;
  int v79;
  ExtScheduledAudioSlice *v80;
  char v81;
  unint64_t *v82;
  ExtScheduledAudioSlice *v83;
  void (*v84)(_QWORD, unint64_t, __n128);
  double EndOfNextLoopSampleTime;
  double v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double v91;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD);
  double v97;
  double v98;
  int v99;
  uint64_t v100;
  void (*v101)(_QWORD);
  int v102;
  uint64_t v103;
  void (*v104)(_QWORD);
  double v105;
  uint64_t v106;
  double v107;
  double v108;
  BOOL v109;
  double v110;
  unint64_t v111;
  double v112;
  int64x2_t v113;
  unint64_t v114;
  char *v115;
  _BYTE buf[32];
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _QWORD v120[3];

  v120[1] = *MEMORY[0x24BDAC8D0];
  v7 = (unint64_t *)((char *)this + 624);
LABEL_2:
  v8 = *v7;
  if (!*v7)
    return;
  do
  {
    v9 = __ldaxr(v7);
    if (v9 != v8)
    {
      __clrex();
      goto LABEL_2;
    }
  }
  while (__stlxr(0, v7));
  v10 = v8;
  do
  {
    v11 = v10;
    if ((*(_BYTE *)(v10 + 80) & 0x30) != 0 && (*(_BYTE *)(v10 + 56) & 1) == 0)
    {
      v12 = *(_QWORD *)(v10 + 88);
      *(_QWORD *)(v10 + 88) = 0;
      if (v12)
      {
        do
        {
          v13 = *(_QWORD *)(v12 + 88);
          *(_DWORD *)(v12 + 80) |= 1u;
          v14 = *(void (**)(_QWORD))(v12 + 64);
          if (v14)
            v14(*(_QWORD *)(v12 + 72));
          v12 = v13;
        }
        while (v13);
      }
    }
    v10 = *(_QWORD *)(v11 + 88);
  }
  while (v10);
  v15 = *((_QWORD *)this + 77);
  if (!v15)
    goto LABEL_101;
  v16 = *(_DWORD *)(v11 + 80);
  if ((v16 & 0x30) == 0 || (*(_BYTE *)(v11 + 56) & 1) != 0)
    goto LABEL_101;
  if ((v16 & 0x20) != 0 && (*(_BYTE *)(v15 + 80) & 2) != 0)
  {
    v45 = *(_QWORD *)(v15 + 88);
    *(_QWORD *)(v15 + 88) = 0;
    *((double *)this + 79) = ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(*((ExtScheduledAudioSlice **)this + 77), *((double *)this + 81));
    v15 = v45;
    if (v45)
      goto LABEL_98;
    goto LABEL_101;
  }
  if ((v16 & 0x10) == 0)
  {
    *((_QWORD *)this + 77) = 0;
    *((_QWORD *)this + 79) = 0;
    goto LABEL_98;
  }
  v17 = *((double *)this + 81);
  Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  v15 = *((_QWORD *)this + 77);
  if (!v15)
    goto LABEL_96;
  v20 = (int64x2_t *)((char *)this + 728);
  v21 = *(double *)(Element + 80);
  v111 = *((_QWORD *)this + 77);
  v22 = *((_QWORD *)this + 92);
  v23 = *((_QWORD *)this + 91);
  v24 = (v22 - v23) / 72;
  if (v22 == v23)
  {
LABEL_29:
    if (v24 >= 2)
    {
      v29 = (AUScheduledSoundPlayer::RampEvent *)(v22 - 72);
      v30 = v22 - 72;
      do
      {
        AUScheduledSoundPlayer::RampEvent::~RampEvent(v29);
        *((_QWORD *)this + 92) = v31;
        v32 = 0x8E38E38E38E38E39 * ((v30 - *((_QWORD *)this + 91)) >> 3);
        v30 -= 72;
        v29 = (AUScheduledSoundPlayer::RampEvent *)(v31 - 72);
      }
      while (v32 > 1);
    }
    *(_DWORD *)buf = 0;
    *(_QWORD *)&buf[16] = 0x3FF0000000000000;
    v33 = 40;
    do
    {
      v34 = &buf[v33];
      *v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
      v33 += 16;
    }
    while (v34 + 16 != (_BYTE *)v120);
    LODWORD(v117) = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[24] = 0;
    v35 = v118;
    if ((_QWORD)v118)
    {
      if (BYTE8(v117))
      {
        *(_DWORD *)(v118 + 80) |= 1u;
        v36 = *(void (**)(_QWORD))(v35 + 64);
        if (v36)
          v36(*(_QWORD *)(v35 + 72));
      }
      BYTE8(v117) = 0;
      *(_QWORD *)&v118 = 0;
    }
    v37 = v119;
    if (v119)
    {
      if (BYTE8(v118))
      {
        *(_DWORD *)(v119 + 80) |= 1u;
        v38 = *(void (**)(_QWORD))(v37 + 64);
        if (v38)
          v38(*(_QWORD *)(v37 + 72));
      }
      BYTE8(v118) = 0;
      v119 = 0;
    }
    v39 = *((_QWORD *)this + 92);
    v40 = *((_QWORD *)this + 93);
    if (v39 >= v40)
    {
      v46 = v20->i64[0];
      v47 = 0x8E38E38E38E38E39 * ((uint64_t)(v39 - v20->i64[0]) >> 3);
      v48 = v47 + 1;
      if (v47 + 1 > 0x38E38E38E38E38ELL)
        std::vector<void const*>::__throw_length_error[abi:ne180100]();
      if (0x1C71C71C71C71C72 * ((uint64_t)(v40 - v46) >> 3) > v48)
        v48 = 0x1C71C71C71C71C72 * ((uint64_t)(v40 - v46) >> 3);
      if (0x8E38E38E38E38E39 * ((uint64_t)(v40 - v46) >> 3) >= 0x1C71C71C71C71C7)
        v49 = 0x38E38E38E38E38ELL;
      else
        v49 = v48;
      v115 = (char *)this + 744;
      if (v49)
      {
        if (v49 > 0x38E38E38E38E38ELL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = (char *)operator new(72 * v49);
      }
      else
      {
        v50 = 0;
      }
      v52 = &v50[72 * v47];
      v53 = v118;
      *((_OWORD *)v52 + 2) = v117;
      *((_OWORD *)v52 + 3) = v53;
      *((_QWORD *)v52 + 8) = v119;
      v54 = *(_OWORD *)&buf[16];
      *(_OWORD *)v52 = *(_OWORD *)buf;
      *((_OWORD *)v52 + 1) = v54;
      if (v39 == v46)
      {
        v59 = vdupq_n_s64(v39);
        v55 = &v50[72 * v47];
      }
      else
      {
        v55 = &v50[72 * v47];
        do
        {
          *(_OWORD *)(v55 - 72) = *(_OWORD *)(v39 - 72);
          v56 = *(_OWORD *)(v39 - 56);
          v57 = *(_OWORD *)(v39 - 40);
          v58 = *(_OWORD *)(v39 - 24);
          *((_QWORD *)v55 - 1) = *(_QWORD *)(v39 - 8);
          *(_OWORD *)(v55 - 24) = v58;
          *(_OWORD *)(v55 - 40) = v57;
          *(_OWORD *)(v55 - 56) = v56;
          v55 -= 72;
          v39 -= 72;
        }
        while (v39 != v46);
        v59 = *v20;
        v40 = *((_QWORD *)this + 93);
      }
      v44 = (unint64_t)(v52 + 72);
      *((_QWORD *)this + 91) = v55;
      *((_QWORD *)this + 92) = v52 + 72;
      v113 = v59;
      *((_QWORD *)this + 93) = &v50[72 * v49];
      v114 = v40;
      v112 = *(double *)v59.i64;
      std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer((uint64_t)&v112);
    }
    else
    {
      *(_OWORD *)v39 = *(_OWORD *)buf;
      v41 = *(_OWORD *)&buf[16];
      v42 = v117;
      v43 = v118;
      *(_QWORD *)(v39 + 64) = v119;
      *(_OWORD *)(v39 + 32) = v42;
      *(_OWORD *)(v39 + 48) = v43;
      *(_OWORD *)(v39 + 16) = v41;
      v44 = v39 + 72;
    }
    *((_QWORD *)this + 92) = v44;
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)buf);
    v51 = (char *)(*((_QWORD *)this + 92) - 72);
  }
  else
  {
    v25 = 0;
    if (v24 <= 1)
      v26 = 1;
    else
      v26 = (v22 - v23) / 72;
    v27 = (int *)(v23 + 32);
    while (1)
    {
      v28 = *v27;
      v27 += 18;
      if (!v28)
        break;
      if (v26 == ++v25)
        goto LABEL_29;
    }
    v51 = (char *)(v23 + 72 * v25);
  }
  v60 = vcvtpd_u64_f64(v21 * 20.0 / 1000.0);
  v61 = v17 + (double)v60;
  if (v61 <= v17)
    goto LABEL_95;
  v62 = 0;
  v5 = 1.79769313e308;
  while (1)
  {
    *(_QWORD *)buf = 0;
    v112 = 0.0;
    NextReadSlice = AUScheduledSoundPlayer::GetNextReadSlice((AUScheduledSoundPlayer *)1, &v111, (ExtScheduledAudioSlice **)buf, v17, v61, &v112, v19);
    if (!NextReadSlice)
      break;
    v17 = v112;
    v64 = *(double *)buf;
    if (v112 <= *(double *)buf)
      break;
    v65 = 0;
    v66 = 1;
    while (1)
    {
      v67 = v66;
      v68 = &v51[16 * v65];
      if (!*((_QWORD *)v68 + 6))
        break;
      v66 = 0;
      v65 = 1;
      if ((v67 & 1) == 0)
        goto LABEL_82;
    }
    v68[40] = 1;
    *((_QWORD *)v68 + 6) = NextReadSlice;
    if (v5 == 1.79769313e308)
      v5 = v64;
    v62 = (v17 - v64 + (double)v62);
    v15 = *(_QWORD *)(NextReadSlice + 88);
    v111 = v15;
    if (v17 >= v61 || v15 == 0)
      goto LABEL_83;
  }
LABEL_82:
  v15 = v111;
LABEL_83:
  if (!v62)
  {
LABEL_95:
    *((_QWORD *)v51 + 1) = 0;
    *((_DWORD *)v51 + 8) = 0;
    *((_QWORD *)v51 + 3) = 0;
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)(v51 + 40));
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)(v51 + 56));
    AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents((AUScheduledSoundPlayer *)((char *)this + 728));
LABEL_96:
    v70 = 0;
    goto LABEL_97;
  }
  if (v62 >= v60)
    v70 = v60;
  else
    v70 = v62;
  if (*((_DWORD *)v51 + 8))
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUScheduledSoundPlayer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 401;
      v72 = "%25s:%-5d ASSERTION FAILURE [(!IsValid()) != 0 is false]: ";
      goto LABEL_192;
    }
    goto LABEL_203;
  }
  if (v5 >= 0.0 && v5 != 1.79769313e308)
    goto LABEL_193;
  if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    goto LABEL_203;
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = "AUScheduledSoundPlayer.cpp";
  *(_WORD *)&buf[12] = 1024;
  *(_DWORD *)&buf[14] = 404;
  v72 = "%25s:%-5d ASSERTION FAILURE [(STIsGE(startSampleTime, 0.) && !STIsUnspecified(startSampleTime)) != 0 is false]: ";
LABEL_192:
  while (2)
  {
    while (1)
    {
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, v72, buf, 0x12u);
      __break(1u);
LABEL_193:
      if (v70)
        break;
      if (!os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        goto LABEL_203;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUScheduledSoundPlayer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 405;
      v72 = "%25s:%-5d ASSERTION FAILURE [(numberOfFrames > 0) != 0 is false]: ";
    }
    *(_DWORD *)v51 = 0;
    *((_DWORD *)v51 + 8) = v70;
    v110 = 1.0 / (double)(v70 + 1);
    *((double *)v51 + 1) = v5;
    *((double *)v51 + 2) = 1.0 - v110;
    *((double *)v51 + 3) = -v110;
LABEL_97:
    *((double *)this + 79) = *((double *)this + 81) + (double)v70;
    *((_QWORD *)this + 77) = 0;
    if (v15)
    {
      do
      {
LABEL_98:
        v73 = *(_QWORD *)(v15 + 88);
        *(_DWORD *)(v15 + 80) |= 1u;
        v74 = *(void (**)(_QWORD, unint64_t))(v15 + 64);
        if (v74)
          v74(*(_QWORD *)(v15 + 72), v15);
        v15 = v73;
      }
      while (v73);
    }
LABEL_101:
    v75 = 0;
    v51 = (char *)this + 616;
    do
    {
      v76 = v75;
      v75 = v8;
      v8 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v75 + 88) = v76;
    }
    while (v8);
    if (*((double *)this + 81) >= 0.0)
      v77 = *((double *)this + 81);
    else
      v77 = 0.0;
    v8 = 0x7FEFFFFFFFFFFFFFLL;
    while (1)
    {
      v15 = v75;
      v75 = *(_QWORD *)(v75 + 88);
      a2.n128_u64[0] = *((_QWORD *)this + 79);
      if (v77 >= a2.n128_f64[0])
        a2.n128_f64[0] = v77;
      v78 = *((_QWORD *)this + 77);
      v79 = *(_DWORD *)(v15 + 56);
      if (!v78)
        break;
      v80 = 0;
      v81 = 0;
      v82 = (unint64_t *)((char *)this + 616);
      while (1)
      {
        v83 = (ExtScheduledAudioSlice *)v78;
        if ((v79 & 1) != 0 && *(double *)v15 <= *(double *)v78)
          break;
        if ((*(_BYTE *)(v78 + 80) & 8) != 0)
          v81 |= *(double *)(v78 + 40) == 1.79769313e308;
        v82 = (unint64_t *)(v78 + 88);
        v78 = *(_QWORD *)(v78 + 88);
        v80 = v83;
        if (!v78)
        {
          v80 = v83;
          v83 = 0;
          break;
        }
      }
      if ((v81 & 1) == 0 || ((*(_DWORD *)(v15 + 80) & 0x30) != 0) | *(_DWORD *)(v15 + 56) & 1)
        goto LABEL_122;
      *(_DWORD *)(v15 + 80) |= 1u;
      v84 = *(void (**)(_QWORD, unint64_t, __n128))(v15 + 64);
      if (v84)
        v84(*(_QWORD *)(v15 + 72), v15, a2);
LABEL_188:
      if (!v75)
        return;
    }
    v83 = 0;
    v80 = 0;
    v82 = (unint64_t *)((char *)this + 616);
LABEL_122:
    if ((v79 & 1) == 0)
      ExtScheduledAudioSlice::SetAnchorSampleTime((ExtScheduledAudioSlice *)v15, a2.n128_f64[0]);
    if (v80 && (*(_BYTE *)(v15 + 80) & 0x20) != 0)
    {
      EndOfNextLoopSampleTime = ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(v80, *((double *)this + 81));
      if (EndOfNextLoopSampleTime < *(double *)v15)
        EndOfNextLoopSampleTime = *(double *)v15;
      ExtScheduledAudioSlice::SetAnchorSampleTime((ExtScheduledAudioSlice *)v15, EndOfNextLoopSampleTime);
    }
    if ((*(_BYTE *)(v15 + 56) & 1) != 0)
    {
      v86 = *(double *)v15;
      v87 = 1.79769313e308;
      v88 = fmin(*(double *)v15, 1.79769313e308);
      *(double *)(v15 + 32) = v88;
      v89 = *(_DWORD *)(v15 + 80);
      LODWORD(v88) = *(_DWORD *)(v15 + 96);
      v90 = (double)*(unint64_t *)&v88;
      v91 = v86 + v90;
      if (v91 < 1.79769313e308 && (*(_DWORD *)(v15 + 80) & 8) == 0)
        v87 = v91;
      *(double *)(v15 + 40) = v87;
      v93 = (double *)(v15 + 40);
      *(_QWORD *)(v15 + 88) = v83;
      *v82 = v15;
      if (v91 > *((double *)this + 79))
        *((double *)this + 79) = v91;
      v94 = *(_QWORD *)(v15 + 88);
      if (v94)
      {
        if ((v89 & 0x30) != 0)
        {
          *(_QWORD *)(v15 + 88) = 0;
          do
          {
            v95 = *(_QWORD *)(v94 + 88);
            *(_DWORD *)(v94 + 80) |= 1u;
            v96 = *(void (**)(_QWORD))(v94 + 64);
            if (v96)
              v96(*(_QWORD *)(v94 + 72));
            v94 = v95;
          }
          while (v95);
        }
        else if ((v89 & 8) != 0)
        {
          *(_QWORD *)(v15 + 88) = 0;
          while (1)
          {
            v102 = *(_DWORD *)(v94 + 80);
            if ((v102 & 0x30) != 0)
              break;
            v103 = *(_QWORD *)(v94 + 88);
            *(_DWORD *)(v94 + 80) = v102 | 1;
            v104 = *(void (**)(_QWORD))(v94 + 64);
            if (v104)
              v104(*(_QWORD *)(v94 + 72));
            v94 = v103;
            if (!v103)
              goto LABEL_170;
          }
          *(_QWORD *)(v15 + 88) = v94;
          v98 = *(double *)(v94 + 32);
LABEL_160:
          if (*(double *)v15 >= v98)
            v98 = *(double *)v15;
          if ((*(_BYTE *)(v15 + 80) & 8) == 0)
          {
            LODWORD(v90) = *(_DWORD *)(v15 + 96);
            v105 = (double)*(unint64_t *)&v90;
            if (v98 >= *(double *)v15 + v105)
              v98 = *(double *)v15 + v105;
          }
LABEL_169:
          *v93 = fmin(v98, 1.79769313e308);
        }
        else
        {
          v97 = *v93;
          do
          {
            v98 = *(double *)(v94 + 32);
            if (v97 <= v98)
              break;
            v99 = *(_DWORD *)(v94 + 80);
            if ((v99 & 0x30) != 0)
              goto LABEL_160;
            if (v97 < *(double *)(v94 + 40))
            {
              if (v97 > v98)
              {
                v93 = (double *)(v94 + 32);
                v98 = *(double *)v94;
                if (*(double *)v94 < v97)
                  v98 = v97;
                goto LABEL_169;
              }
              if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = "AUScheduledSoundPlayer.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 975;
                v72 = "%25s:%-5d ASSERTION FAILURE [(STIsGT(inSliceEndSampleTime, sliceStartSampleTime)) != 0 is false]: ";
                goto LABEL_192;
              }
              goto LABEL_203;
            }
            v100 = *(_QWORD *)(v94 + 88);
            *(_QWORD *)(v15 + 88) = v100;
            *(_DWORD *)(v94 + 80) = v99 | 1;
            v101 = *(void (**)(_QWORD))(v94 + 64);
            if (v101)
              v101(*(_QWORD *)(v94 + 72));
            v94 = v100;
          }
          while (v100);
        }
      }
LABEL_170:
      if ((*(_BYTE *)(v15 + 56) & 1) != 0 && (*(_BYTE *)(v15 + 80) & 0x38) != 0)
      {
        v106 = *(_QWORD *)v51;
        if (*(_QWORD *)v51)
        {
          if (v106 != v15)
          {
            v107 = *(double *)(v15 + 32);
            do
            {
              if (v107 < *(double *)(v106 + 40))
              {
                if (*(double *)v106 >= v107)
                  v108 = *(double *)v106;
                else
                  v108 = v107;
                if ((*(_BYTE *)(v106 + 80) & 8) == 0)
                {
                  LODWORD(a5) = *(_DWORD *)(v106 + 96);
                  a5 = (double)*(unint64_t *)&a5;
                  if (v108 >= *(double *)v106 + a5)
                    v108 = *(double *)v106 + a5;
                }
                *(double *)(v106 + 40) = fmin(v108, 1.79769313e308);
              }
              v106 = *(_QWORD *)(v106 + 88);
              if (v106)
                v109 = v106 == v15;
              else
                v109 = 1;
            }
            while (!v109);
          }
        }
      }
      goto LABEL_188;
    }
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "AUScheduledSoundPlayer.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 64;
      v72 = "%25s:%-5d ASSERTION FAILURE [(IsAnchorSampleTimeValid()) != 0 is false]: ";
      continue;
    }
    break;
  }
LABEL_203:
  __break(1u);
}

void sub_210ADF4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t AUScheduledSoundPlayer::GetNextReadSlice(AUScheduledSoundPlayer *this, _QWORD *a2, ExtScheduledAudioSlice **a3, double a4, double a5, double *a6, double *a7)
{
  uint64_t v7;
  uint64_t v8;
  char v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  _QWORD *v22;
  void (*v23)(_QWORD);
  double v24;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v7 = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  *a6 = 0.0;
  v8 = *a2;
  if (a4 >= a5 || v8 == 0)
    return v7;
  v15 = (char)this;
  v16 = 0;
  v7 = 0;
  while (1)
  {
    v17 = *(double *)(v8 + 32);
    v18 = *(double *)(v8 + 40);
    if (v17 > v18)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        v26 = 136315394;
        v27 = "AUScheduledSoundPlayer.cpp";
        v28 = 1024;
        v29 = 1265;
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(STIsLE(sliceStartTime, sliceEndTime)) != 0 is false]: ", (uint8_t *)&v26, 0x12u);
      }
      __break(1u);
    }
    v19 = v8;
    v8 = *(_QWORD *)(v8 + 88);
    if (v17 <= a4 && v18 > a4)
      break;
    if (v17 >= a4 && v17 < a5)
      break;
    if (v18 <= a4 && (v15 & 1) == 0)
    {
      v22 = a2;
      if (v19 == *a2)
        goto LABEL_21;
      if (v16)
      {
        v22 = (_QWORD *)(v16 + 88);
LABEL_21:
        *v22 = v8;
      }
      *(_DWORD *)(v19 + 80) |= 1u;
      v23 = *(void (**)(_QWORD))(v19 + 64);
      if (v23)
        v23(*(_QWORD *)(v19 + 72));
      v19 = v16;
      goto LABEL_36;
    }
    if (v17 >= a5)
      return v7;
LABEL_36:
    v16 = v19;
    if (!v8)
      return v7;
  }
  if (!v7)
  {
    if (v17 <= a4)
      v17 = a4;
    *(double *)a3 = v17;
    if (v18 >= a5)
      v24 = a5;
    else
      v24 = v18;
    goto LABEL_35;
  }
  if (v17 <= *(double *)a3)
  {
    *a3 = *a3;
    v24 = *a6;
    if (v18 < *a6)
      v24 = v18;
LABEL_35:
    *a6 = v24;
    v7 = v19;
    goto LABEL_36;
  }
  if (v17 >= *a6)
    v17 = *a6;
  *a6 = v17;
  return v7;
}

void AUScheduledSoundPlayer::SliceEventHandler::RemoveInvalidRampEvents(AUScheduledSoundPlayer::SliceEventHandler *this)
{
  uint64_t i;

  for (i = *((_QWORD *)this + 1); i != *(_QWORD *)this && !*(_DWORD *)(i - 40); *((_QWORD *)this + 1) = i)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(i - 72));
}

uint64_t AUScheduledSoundPlayer::RampEvent::InvalidateSlice(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = result;
    if (*(_BYTE *)result)
    {
      *(_DWORD *)(v1 + 80) |= 1u;
      v3 = *(uint64_t (**)(_QWORD))(v1 + 64);
      if (v3)
        result = v3(*(_QWORD *)(v1 + 72));
    }
    *(_BYTE *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
  }
  return result;
}

uint64_t ExtScheduledAudioSlice::GetBufferOffsetForTime(ExtScheduledAudioSlice *this, double a2)
{
  double v2;
  unsigned int v3;

  v2 = *(double *)this;
  if ((*((_BYTE *)this + 80) & 8) != 0)
  {
    v3 = *((_DWORD *)this + 24);
    if (v2 + (double)v3 <= a2)
      v2 = v2 + (double)((a2 - v2) / v3 * v3);
  }
  return (a2 - v2);
}

void AUScheduledSoundPlayer::RampEvent::~RampEvent(AUScheduledSoundPlayer::RampEvent *this)
{
  uint64_t v2;
  char v3;
  char v4;

  v2 = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    AUScheduledSoundPlayer::RampEvent::InvalidateSlice((uint64_t)this + 16 * v2 + 40);
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
}

double ExtScheduledAudioSlice::GetEndOfNextLoopSampleTime(ExtScheduledAudioSlice *this, double a2)
{
  double result;
  unsigned int v4;

  if ((*((_BYTE *)this + 80) & 8) == 0)
    return *((double *)this + 5);
  v4 = *((_DWORD *)this + 24);
  result = *(double *)this + (double)v4;
  if (result < a2)
    return result + (double)(v4 + v4 * ((a2 - result) / v4));
  return result;
}

void ExtScheduledAudioSlice::SetAnchorSampleTime(ExtScheduledAudioSlice *this, double a2)
{
  double v2;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = 1.79769313e308;
  if (a2 < 0.0 || a2 > 1.79769313e308)
  {
    this = (ExtScheduledAudioSlice *)os_log_type_enabled(0, OS_LOG_TYPE_ERROR);
    if ((_DWORD)this)
    {
      v4 = 136315394;
      v5 = "AUScheduledSoundPlayer.cpp";
      v6 = 1024;
      v7 = 97;
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(STIsGE(inSampleTime, 0.) && STIsLE(inSampleTime, kUnspecifiedSampleTime)) != 0 is false]: ", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  *(double *)this = trunc(a2);
  *((_DWORD *)this + 14) = *((_DWORD *)this + 14) & 0xFFFFFFFE | (a2 != v2);
}

uint64_t std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(i - 72));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(AUScheduledSoundPlayer::SliceEventHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  while (v2 != v3)
    AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v2 - 72));
  *((_QWORD *)this + 1) = v3;
  v4 = (void **)this;
  std::vector<AUScheduledSoundPlayer::RampEvent>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<AUScheduledSoundPlayer::RampEvent>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        AUScheduledSoundPlayer::RampEvent::~RampEvent((AUScheduledSoundPlayer::RampEvent *)(v4 - 72));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AUScheduledSoundPlayer::AUScheduledSoundPlayer(AUScheduledSoundPlayer *this, OpaqueAudioComponentInstance *a2)
{
  ausdk::AUBase *v3;
  char *v9;
  uint64_t Element;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = ausdk::AUBase::AUBase(this, a2, 0, 1, 0);
  *(_QWORD *)v3 = &off_24CA913E0;
  MEMORY[0x212BCD644]((char *)v3 + 528, "reset");
  *((_QWORD *)this + 79) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)this + 40) = _Q1;
  *((_QWORD *)this + 90) = 0xBFF0000000000000;
  *((_QWORD *)this + 91) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)&v13 + 1) = (char *)this + 744;
  v9 = (char *)operator new(0x90uLL);
  *((_QWORD *)this + 91) = v9;
  *((_QWORD *)this + 92) = v9;
  *((_QWORD *)this + 93) = v9 + 144;
  *(_QWORD *)&v13 = 0;
  v11 = 0;
  v12 = 0uLL;
  std::__split_buffer<AUScheduledSoundPlayer::RampEvent>::~__split_buffer((uint64_t)&v11);
  *((_BYTE *)this + 752) = 0;
  ausdk::AUBase::CreateElements((int64x2_t *)this);
  v11 = 0x40E5888000000000;
  v12 = xmmword_210B09F40;
  v13 = xmmword_210B09F50;
  Element = ausdk::AUScope::SafeGetElement((AUScheduledSoundPlayer *)((char *)this + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v11);
}

void sub_210ADFBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  ausdk::AUBase *v9;
  CADeprecated::CAMutex *v10;
  AUScheduledSoundPlayer::SliceEventHandler *v11;

  AUScheduledSoundPlayer::SliceEventHandler::~SliceEventHandler(v11);
  CADeprecated::CAMutex::~CAMutex(v10);
  ausdk::AUBase::~AUBase(v9);
  _Unwind_Resume(a1);
}

uint64_t AUEffectWithCustomViewBase::GetPropertyInfo(AUEffectWithCustomViewBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 56 || a3)
  {
    if (a3 || (a2 | 8) != 0x1D)
    {
      return 4294956417;
    }
    else
    {
      result = 0;
      *a6 = 1;
      *a5 = 4;
    }
  }
  else
  {
    result = 0;
    *a5 = 8;
    *a6 = 1;
  }
  return result;
}

uint64_t AUEffectWithCustomViewBase::SetProperty(AUEffectWithCustomViewBase *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, int *);
  _Unwind_Exception *v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  if (a2 != 56 || a3)
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  v7 = *((_QWORD *)this + 1);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v8 = (uint64_t (*)(uint64_t, int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  v15 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
  {
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 0x40000000;
    v11[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_2926;
    v11[3] = &unk_24CA96B10;
    v11[4] = &v12;
    ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_2926((uint64_t)v11);
    v8 = (uint64_t (*)(uint64_t, int *))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v8)
  {
    dlerror();
    v10 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v12, 8);
    _Unwind_Resume(v10);
  }
  return v8(v7, a5);
}

void AURoundTripAAC::~AURoundTripAAC(AURoundTripAAC *this)
{
  void *v2;

  *(_QWORD *)this = &off_24CA8DAD8;
  v2 = (void *)*((_QWORD *)this + 80);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 80) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 74, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 73, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 71, 0);
  MEMORY[0x212BCD890]((char *)this + 536);
  MEMORY[0x212BCD890]((char *)this + 528);
  ausdk::AUBase::~AUBase(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24CA8DAD8;
  v2 = (void *)*((_QWORD *)this + 80);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 80) = 0;
  }
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 74, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 73, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 71, 0);
  MEMORY[0x212BCD890]((char *)this + 536);
  MEMORY[0x212BCD890]((char *)this + 528);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AURoundTripAAC::Initialize(AURoundTripAAC *this)
{
  uint64_t v1;
  ausdk::AUScope *v3;
  int v4;
  uint64_t Element;
  __int128 v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  UInt32 mChannelsPerFrame;
  int v13;
  OpaqueAudioConverter *v14;
  int v15;
  size_t v16;
  BOOL v17;
  double *v18;
  double *v19;
  char v20;
  double v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  double *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  ausdk::AUElement *v33;
  uint64_t Property;
  UInt32 v35;
  OSStatus PropertyInfo;
  UInt32 v37;
  BOOL v38;
  char *v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int *v50;
  uint64_t v51;
  int v52;
  UInt32 v53;
  BOOL v54;
  void *v55;
  char v56;
  unint64_t v57;
  double v58;
  UInt32 v59;
  double *v60;
  double *v61;
  UInt32 mFramesPerPacket;
  double v63;
  double v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned int v72;
  uint64_t v73;
  void *v74;
  void *v75;
  BOOL v76;
  BOOL v77;
  std::bad_alloc *exception;
  std::bad_alloc *v80;
  std::bad_alloc *v81;
  std::bad_alloc *v82;
  std::bad_alloc *v83;
  std::bad_alloc *v84;
  std::bad_alloc *v85;
  std::bad_alloc *v86;
  std::bad_alloc *v87;
  std::bad_alloc *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  ausdk::AUScope *v92;
  AudioConverterRef *v93;
  int inPropertyData;
  AudioConverterRef outAudioConverter;
  AudioStreamBasicDescription inDestinationFormat;
  int v97;
  int v98;
  float v99;
  AudioStreamBasicDescription inSourceFormat;
  UInt32 ioPropertyDataSize;
  Boolean outWritable;
  Boolean v103[4];
  unsigned int v104;
  unsigned int *outSize;
  unsigned int inSpecifier;
  UInt32 outPropertyDataSize;
  _DWORD outPropertyData[18];
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v3 = (AURoundTripAAC *)((char *)this + 80);
  v4 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
  if (v4 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108))
  {
    ioPropertyDataSize = 0;
    v92 = v3;
    Element = ausdk::AUScope::SafeGetElement(v3, 0);
    v6 = *(_OWORD *)(Element + 96);
    *(_OWORD *)&inSourceFormat.mSampleRate = *(_OWORD *)(Element + 80);
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v6;
    *(_QWORD *)&inSourceFormat.mBitsPerChannel = *(_QWORD *)(Element + 112);
    v7 = vcvtpd_u64_f64(inSourceFormat.mSampleRate * 0.2);
    *((_DWORD *)this + 303) = v7;
    *((double *)this + 152) = 1.0 / (double)v7;
    *((_DWORD *)this + 306) = 0;
    v99 = 0.0;
    (*(void (**)(AURoundTripAAC *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v99);
    *((_DWORD *)this + 140) = v99;
    pthread_once(&gOnce, initHasHEv2);
    if ((gHasHEv2 & 1) == 0 && *((_DWORD *)this + 140) == 2)
      *((_DWORD *)this + 140) = 1;
    v8 = 0;
    do
    {
      v9 = v8 | AURoundTripAAC::MatchParamsForPreset(this, v8);
      v8 = 1;
    }
    while ((v9 & 1) == 0);
    v98 = 1650553971;
    v97 = 127;
    v93 = (AudioConverterRef *)((char *)this + 552);
    inDestinationFormat.mSampleRate = fmin(inSourceFormat.mSampleRate, 48000.0);
    inDestinationFormat.mBytesPerFrame = 0;
    inDestinationFormat.mChannelsPerFrame = inSourceFormat.mChannelsPerFrame;
    *(_OWORD *)&inDestinationFormat.mFormatID = xmmword_210B0A360;
    *(_QWORD *)&inDestinationFormat.mBitsPerChannel = 0;
    while (1)
    {
      outAudioConverter = 0;
      v10 = AudioConverterNew(&inSourceFormat, &inDestinationFormat, &outAudioConverter);
      v11 = v10;
      if (!(_DWORD)v10)
        break;
      mChannelsPerFrame = inDestinationFormat.mChannelsPerFrame;
      if (inDestinationFormat.mChannelsPerFrame < 3)
        break;
      if (mChannelsPerFrame >= (*(unsigned int (**)(AURoundTripAAC *, _QWORD))(*(_QWORD *)this + 376))(this, 0))return v11;
      AudioConverterDispose(*((AudioConverterRef *)this + 68));
      ++inDestinationFormat.mChannelsPerFrame;
      v13 = 2;
LABEL_122:
      if (v13 != 2)
        return v1;
    }
    if ((_DWORD)v10)
      return v11;
    v14 = outAudioConverter;
    *((_QWORD *)this + 68) = outAudioConverter;
    inPropertyData = 127;
    ioPropertyDataSize = 4;
    AudioConverterSetProperty(v14, 0x63647175u, 4u, &inPropertyData);
    *(float *)&outPropertyDataSize = 0.0;
    (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD, UInt32 *))(*(_QWORD *)this + 144))(this, 1, 0, 0, &outPropertyDataSize);
    inSpecifier = (float)(*(float *)&outPropertyDataSize + 1.0);
    LODWORD(outSize) = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x61636266u, 4u, &inSpecifier);
    if (*((_DWORD *)this + 164) == 2)
    {
      outPropertyData[0] = 1086324736;
      (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD, _DWORD *))(*(_QWORD *)this + 144))(this, 2, 0, 0, outPropertyData);
      v104 = (float)((float)((float)(*(float *)outPropertyData + -1.0) / 9.0) * 127.0);
      AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x76627271u, 4u, &v104);
    }
    else
    {
      *(float *)&v104 = 10.0;
      (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD, unsigned int *))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v104);
      v15 = kCodecBitRates[*(float *)&v104];
      *(_DWORD *)v103 = v15;
      outWritable = 0;
      if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x61656272u, (UInt32 *)&outSize, &outWritable))
      {
        v16 = outSize & 0xFFFFFFF0;
        v17 = outSize > 0xF;
        v18 = (double *)malloc_type_malloc(v16, 0x2C8E6D5CuLL);
        v19 = v18;
        v20 = !v17;
        if (v18)
          v20 = 1;
        if ((v20 & 1) == 0)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v80 = std::bad_alloc::bad_alloc(exception);
        }
        bzero(v18, v16);
        AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61656272u, (UInt32 *)&outSize, v19);
        v22 = 0;
        v23 = 0;
        v24 = outSize;
        v25 = (unint64_t)outSize >> 4;
        do
        {
          if (v24 >= 0x10)
          {
            LODWORD(v21) = kCodecBitRates[v22];
            v21 = (double)*(unint64_t *)&v21;
            v26 = v19 + 1;
            v27 = v25;
            while (*(v26 - 1) > v21 || *v26 < v21)
            {
              v26 += 2;
              if (!--v27)
                goto LABEL_27;
            }
            outPropertyData[v23++] = v22;
          }
LABEL_27:
          ++v22;
        }
        while (v22 != 17);
        if (v23)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0x7FFFFFFF;
          do
          {
            v31 = kCodecBitRates[outPropertyData[v28]] - v15;
            if (v31 < 0)
              v31 = v15 - kCodecBitRates[outPropertyData[v28]];
            if (v31 < v30)
            {
              v30 = v31;
              v29 = v28;
            }
            ++v28;
          }
          while (v23 != v28);
        }
        else
        {
          v29 = 0;
        }
        v32 = outPropertyData[v29];
        *(_DWORD *)v103 = kCodecBitRates[v32];
        LODWORD(outSize) = 4;
        if (!AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x62726174u, 4u, v103))
        {
          v33 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 32), 0);
          ausdk::AUElement::SetParameter(v33, 2u, (float)v32, 0);
        }
        if (v19)
          free(v19);
      }
    }
    ioPropertyDataSize = 40;
    AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61636F64u, &ioPropertyDataSize, &inDestinationFormat);
    v104 = 2;
    ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x7067636Du, 4u, &v104);
    Property = AudioConverterNew(&inDestinationFormat, &inSourceFormat, v93);
    if ((_DWORD)Property)
      goto LABEL_120;
    ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x73726361u, 4u, &v98);
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x73726361u, ioPropertyDataSize, &v98);
    ioPropertyDataSize = 4;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x73726371u, 4u, &v97);
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x73726371u, ioPropertyDataSize, &v97);
    v35 = inDestinationFormat.mChannelsPerFrame;
    if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v92, 0) + 108) >= 3u)
    {
      *(float *)&outPropertyDataSize = 0.0;
      v103[0] = 0;
      PropertyInfo = AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x6165636Cu, &outPropertyDataSize, v103);
      if (!PropertyInfo)
      {
        v37 = outPropertyDataSize;
        v38 = outPropertyDataSize > 3;
        v39 = (char *)malloc_type_malloc(outPropertyDataSize & 0xFFFFFFFC, 0x7C51E058uLL);
        v40 = !v38;
        if (v39)
          v40 = 1;
        if ((v40 & 1) == 0)
        {
          v85 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v86 = std::bad_alloc::bad_alloc(v85);
        }
        PropertyInfo = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x6165636Cu, &outPropertyDataSize, v39);
        if (!PropertyInfo)
        {
          AURoundTripAAC::SetDefaultChannelLayoutsIfNone(this);
          inSpecifier = *(_DWORD *)(*((_QWORD *)this + 66) + 16);
          v41 = *(_DWORD *)(*((_QWORD *)this + 67) + 16);
          PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize);
          if (!PropertyInfo)
          {
            CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(&outSize, outPropertyDataSize);
            PropertyInfo = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize, outSize);
            if (!PropertyInfo)
            {
              if (v37 < 4)
                goto LABEL_78;
              v89 = v41;
              v90 = 0;
              v42 = 0;
              LODWORD(v43) = v37 >> 2;
              v44 = 0;
              v43 = v43 <= 1 ? 1 : v43;
              v91 = v43;
              do
              {
                v45 = &v39[4 * v42];
                if (*(unsigned __int16 *)v45 == v35
                  && !AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &v39[4 * v42], &outPropertyDataSize))
                {
                  CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(outPropertyData, outPropertyDataSize);
                  if (AudioFormatGetProperty(0x636D706Cu, 4u, &v39[4 * v42], &outPropertyDataSize, *(void **)outPropertyData))
                  {
                    v46 = *(void **)outPropertyData;
                  }
                  else
                  {
                    v47 = outSize[2];
                    v46 = *(void **)outPropertyData;
                    if ((_DWORD)v47)
                    {
                      v48 = 0;
                      v49 = 0;
                      do
                      {
                        if (*(_DWORD *)(*(_QWORD *)outPropertyData + 8))
                        {
                          v50 = (int *)(*(_QWORD *)outPropertyData + 12);
                          v51 = *(unsigned int *)(*(_QWORD *)outPropertyData + 8);
                          do
                          {
                            v52 = *v50;
                            v50 += 5;
                            if (outSize[5 * v48 + 3] == v52)
                              ++v49;
                            --v51;
                          }
                          while (v51);
                        }
                        ++v48;
                      }
                      while (v48 != v47);
                      if (v49 > v90)
                      {
                        v44 = *(_DWORD *)v45;
                        v90 = v49;
                      }
                    }
                  }
                  if (v46)
                    free(v46);
                }
                ++v42;
              }
              while (v42 != v91);
              if (v44)
              {
                *(_QWORD *)&outPropertyData[1] = 0;
                outPropertyDataSize = 32;
                outPropertyData[0] = inSpecifier;
                PropertyInfo = AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x69636C20u, 0x20u, outPropertyData);
                if (!PropertyInfo)
                {
                  outPropertyData[0] = v89;
                  outPropertyDataSize = 32;
                  PropertyInfo = AudioConverterSetProperty(*v93, 0x6F636C20u, 0x20u, outPropertyData);
                  if (!PropertyInfo)
                  {
                    *(_QWORD *)&outPropertyData[1] = 0;
                    outPropertyDataSize = 32;
                    outPropertyData[0] = v44;
                    PropertyInfo = AudioConverterSetProperty(*((AudioConverterRef *)this + 68), 0x6F636C20u, 0x20u, outPropertyData);
                    if (!PropertyInfo)
                    {
                      outPropertyDataSize = 32;
                      PropertyInfo = AudioConverterSetProperty(*v93, 0x69636C20u, 0x20u, outPropertyData);
                    }
                  }
                }
              }
              else
              {
LABEL_78:
                PropertyInfo = -10868;
              }
            }
            if (outSize)
              free(outSize);
          }
        }
        if (v39)
          free(v39);
      }
      if (PropertyInfo == 1667771179)
      {
        v53 = inDestinationFormat.mChannelsPerFrame;
        if (v53 < (*(unsigned int (**)(AURoundTripAAC *, _QWORD))(*(_QWORD *)this + 376))(this, 0))
        {
          AudioConverterDispose(*((AudioConverterRef *)this + 68));
          AudioConverterDispose(*((AudioConverterRef *)this + 69));
          ++inDestinationFormat.mChannelsPerFrame;
          v13 = 2;
          Property = v1;
LABEL_121:
          v1 = Property;
          goto LABEL_122;
        }
      }
    }
    LOBYTE(outPropertyData[0]) = 0;
    if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x636D6763u, &ioPropertyDataSize, (Boolean *)outPropertyData))
    {
      v54 = ioPropertyDataSize != 0;
      v55 = malloc_type_malloc(ioPropertyDataSize, 0x7C51E058uLL);
      v56 = !v54;
      if (v55)
        v56 = 1;
      if ((v56 & 1) == 0)
      {
        v83 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v84 = std::bad_alloc::bad_alloc(v83);
      }
      if (!AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x636D6763u, &ioPropertyDataSize, v55))
        AudioConverterSetProperty(*v93, 0x646D6763u, ioPropertyDataSize, v55);
      if (v55)
        free(v55);
    }
    *(_QWORD *)outPropertyData = 0;
    ioPropertyDataSize = 8;
    AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x7072696Du, &ioPropertyDataSize, outPropertyData);
    outSize = 0;
    ioPropertyDataSize = 8;
    AudioConverterSetProperty(*((AudioConverterRef *)this + 69), 0x7072696Du, 8u, &outSize);
    LOBYTE(outPropertyDataSize) = 0;
    v58 = 1.0;
    if (!AudioConverterGetPropertyInfo(*((AudioConverterRef *)this + 68), 0x666C7374u, &ioPropertyDataSize, (Boolean *)&outPropertyDataSize))
    {
      v59 = ioPropertyDataSize;
      v60 = (double *)malloc_type_malloc(ioPropertyDataSize, 0x7C51E058uLL);
      v61 = v60;
      if (v59 && !v60)
      {
        v81 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v82 = std::bad_alloc::bad_alloc(v81);
      }
      if (AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x666C7374u, &ioPropertyDataSize, v60)
        || ioPropertyDataSize < 0x60)
      {
        if (!v61)
          goto LABEL_103;
      }
      else
      {
        v58 = *v61 / v61[6 * (ioPropertyDataSize / 0x30) - 6];
      }
      free(v61);
    }
LABEL_103:
    mFramesPerPacket = inDestinationFormat.mFramesPerPacket;
    *((_DWORD *)this + 153) = inDestinationFormat.mFramesPerPacket;
    LODWORD(v57) = outPropertyData[0];
    v63 = inSourceFormat.mSampleRate / inDestinationFormat.mSampleRate;
    if (v98 == 1650553971)
    {
      v64 = v63 * 88.2;
      if (v63 <= 1.0)
        v64 = 88.2;
      v65 = (vcvtpd_s64_f64(v64) + 15) & 0xFFFFFFF0;
    }
    else
    {
      v65 = 96;
    }
    v66 = v65 + mFramesPerPacket * vcvtpd_u64_f64(v63);
    *((_DWORD *)this + 157) = v66;
    if (*((_DWORD *)this + 140))
    {
      v66 += 4096;
      *((_DWORD *)this + 157) = v66;
    }
    *((_DWORD *)this + 156) = v66 + vcvtpd_u64_f64(v63 * (v58 * (double)v57));
    *(float *)&outPropertyDataSize = 0.0;
    ioPropertyDataSize = 4;
    Property = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x786F7073u, &ioPropertyDataSize, &outPropertyDataSize);
    if (!(_DWORD)Property)
    {
      ioPropertyDataSize = 40;
      Property = AudioConverterGetProperty(*((AudioConverterRef *)this + 68), 0x61636F64u, &ioPropertyDataSize, &inDestinationFormat);
      if (!(_DWORD)Property)
      {
        v67 = *((_DWORD *)this + 84);
        *((_DWORD *)this + 162) = (v67 + *((_DWORD *)this + 153) - 1) / *((_DWORD *)this + 153);
        v68 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)inDestinationFormat.mFormatFlags, (const CAStreamBasicDescription *)inDestinationFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 71, v68);
        v69 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)inSourceFormat.mFormatFlags, (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 72, v69);
        v70 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*(unsigned int *)((unint64_t)&inSourceFormat | 0xC), (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 73, v70);
        v71 = CADeprecated::CABufferList::New((CADeprecated::CABufferList *)"", (const char *)*(unsigned int *)((unint64_t)&inSourceFormat | 0xC), (const CAStreamBasicDescription *)inSourceFormat.mChannelsPerFrame);
        CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 74, v71);
        v72 = 4 * *((_DWORD *)this + 156);
        *((_DWORD *)this + 151) = 4 * v67;
        *((_DWORD *)this + 152) = v72 + 4 * v67;
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 72));
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 73));
        CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 73), v72);
        *((_DWORD *)this + 150) = outPropertyDataSize * *((_DWORD *)this + 162);
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 71));
        v73 = *((unsigned int *)this + 162);
        v74 = (void *)*((_QWORD *)this + 80);
        if (v74)
        {
          free(v74);
          *((_QWORD *)this + 80) = 0;
        }
        v75 = malloc_type_malloc(16 * v73, 0x7C51E058uLL);
        v76 = (_DWORD)v73 == 0;
        if (v75)
          v76 = 1;
        if (!v76)
        {
          v87 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v88 = std::bad_alloc::bad_alloc(v87);
        }
        *((_QWORD *)this + 80) = v75;
        CADeprecated::CABufferList::AllocateBuffers(*((CADeprecated::CABufferList **)this + 74));
        CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 74), 4 * *((_DWORD *)this + 157));
        *((_DWORD *)this + 155) = 0;
        if (*((_BYTE *)this + 660))
        {
          (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 432))(this, 4, 0, 0);
          *((_BYTE *)this + 660) = 0;
        }
        v77 = inSourceFormat.mSampleRate >= 64000.0;
        *((_BYTE *)this + 801) = inSourceFormat.mSampleRate >= 64000.0;
        *((_BYTE *)this + 929) = v77;
        *((_BYTE *)this + 1057) = v77;
        *((_BYTE *)this + 1185) = v77;
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 688));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 816));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 944));
        TruePeak::Reset((AURoundTripAAC *)((char *)this + 1072));
        Property = 0;
      }
    }
LABEL_120:
    v13 = 1;
    goto LABEL_121;
  }
  return 4294956428;
}

void sub_210AE0DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;

  if (a39)
    free(a39);
  if (v39)
    free(v39);
  _Unwind_Resume(exception_object);
}

void AURoundTripAAC::Cleanup(AURoundTripAAC *this)
{
  OpaqueAudioConverter *v2;
  OpaqueAudioConverter *v3;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 68);
  if (v2)
    AudioConverterDispose(v2);
  v3 = (OpaqueAudioConverter *)*((_QWORD *)this + 69);
  if (v3)
    AudioConverterDispose(v3);
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 69) = 0;
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 71, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 72, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 73, 0);
  CADeprecated::CAAutoDelete<CADeprecated::CABufferList>::set((_QWORD **)this + 74, 0);
}

uint64_t AURoundTripAAC::Reset(AURoundTripAAC *this)
{
  OpaqueAudioConverter *v2;
  OpaqueAudioConverter *v3;
  _BOOL4 v4;
  _DWORD *v5;
  _DWORD *v6;

  TruePeak::Reset((AURoundTripAAC *)((char *)this + 688));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 816));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 944));
  TruePeak::Reset((AURoundTripAAC *)((char *)this + 1072));
  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 68);
  if (v2)
    AudioConverterReset(v2);
  v3 = (OpaqueAudioConverter *)*((_QWORD *)this + 69);
  if (v3)
    AudioConverterReset(v3);
  v4 = 1;
  *((_BYTE *)this + 652) = 1;
  if (!*((_DWORD *)this + 158))
    v4 = *((_DWORD *)this + 300) != 0;
  *((_DWORD *)this + 159) = v4;
  *((_DWORD *)this + 155) = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 73);
  if (v5)
    CADeprecated::CABufferList::SetNumBytes(v5, 4 * *((_DWORD *)this + 156));
  v6 = (_DWORD *)*((_QWORD *)this + 74);
  if (v6)
    CADeprecated::CABufferList::SetNumBytes(v6, 4 * *((_DWORD *)this + 157));
  return 0;
}

uint64_t AURoundTripAAC::GetPropertyInfo(AURoundTripAAC *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;
  BOOL v8;

  if (a3)
    return 4294956417;
  v7 = 4;
  v8 = 1;
  result = 4294956417;
  if (a2 <= 5300)
  {
    if (a2 != 21 && a2 != 37)
    {
      if (a2 != 57)
        return result;
      v8 = 0;
      v7 = 72;
    }
LABEL_11:
    result = 0;
    *a6 = v8;
    *a5 = v7;
  }
  else
  {
    switch(a2)
    {
      case 5301:
      case 5303:
        goto LABEL_11;
      case 5302:
        v8 = 0;
        v7 = 96;
        goto LABEL_11;
      case 5304:
        v8 = 0;
        goto LABEL_11;
      default:
        return result;
    }
  }
  return result;
}

uint64_t AURoundTripAAC::GetProperty(AURoundTripAAC *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  _DWORD *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  if (a3)
    return 4294956417;
  v6 = a5;
  result = 4294956417;
  if (a2 <= 5300)
  {
    switch(a2)
    {
      case 21:
        result = 0;
        v11 = *((_DWORD *)this + 158);
        break;
      case 37:
        result = 0;
        v11 = *((_DWORD *)this + 302);
        break;
      case 57:
        v8 = 0;
        v9 = *((_QWORD *)this + 1);
        do
        {
          v10 = overviewParameterIDs[v8];
          *(_QWORD *)v6 = v9;
          v6[3] = 0;
          v6[4] = 0;
          v6[2] = v10;
          ++v8;
          v6 += 6;
        }
        while (v8 != 3);
        return 0;
      default:
        return result;
    }
LABEL_17:
    *a5 = v11;
    return result;
  }
  if (a2 == 5301)
  {
    result = 0;
    v11 = *((_DWORD *)this + 300);
    goto LABEL_17;
  }
  if (a2 != 5302)
  {
    if (a2 != 5304)
      return result;
    result = 0;
    v11 = *((_DWORD *)this + 301);
    goto LABEL_17;
  }
  TruePeak::GetStats();
  TruePeak::GetStats();
  TruePeak::GetStats();
  TruePeak::GetStats();
  return 0;
}

uint64_t AURoundTripAAC::SetProperty(AURoundTripAAC *this, int a2, int a3, unsigned int a4, _DWORD *a5, int a6)
{
  uint64_t result;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 5300)
  {
    if (a2 == 21)
    {
      if (a6 == 4)
      {
        result = 0;
        *((_DWORD *)this + 158) = *a5 != 0;
        return result;
      }
    }
    else
    {
      if (a2 != 37)
        return result;
      if (a6 == 4)
      {
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 688));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 816));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 944));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 1072));
        result = 0;
        __dmb(0xBu);
        *((_DWORD *)this + 302) = *a5 != 0;
        return result;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 5301:
        if (a6 == 4)
        {
          result = 0;
          *((_DWORD *)this + 300) = *a5 != 0;
          return result;
        }
        break;
      case 5303:
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 688));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 816));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 944));
        TruePeak::ResetStats((AURoundTripAAC *)((char *)this + 1072));
        return 0;
      case 5304:
        if (a6 == 4)
        {
          result = 0;
          *((_DWORD *)this + 301) = *a5;
          return result;
        }
        break;
      default:
        return result;
    }
  }
  return 4294956445;
}

uint64_t AURoundTripAAC::SetParameter(AURoundTripAAC *this, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  ausdk::AUScope *v12;
  ausdk::AUElement *v13;
  float v14;
  ausdk::AUElement *v15;
  float v17;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v17 = a5;
  (*(void (**)(AURoundTripAAC *, uint64_t, uint64_t, uint64_t, float *))(*(_QWORD *)this + 144))(this, a2, a3, a4, &v17);
  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
  ausdk::AUElement::SetParameter(Element, v8, a5, 0);
  if (v17 != a5)
  {
    if (v8 == 1)
    {
      *((_BYTE *)this + 660) = 1;
      *((_DWORD *)this + 164) = a5;
      if (a5 == 2.0)
      {
        v14 = *((float *)this + 167);
LABEL_12:
        v15 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 32), 0);
        ausdk::AUElement::SetParameter(v15, 2u, v14, 0);
LABEL_13:
        ++*((_DWORD *)this + 169);
        return 0;
      }
    }
    else
    {
      if (v8)
        goto LABEL_13;
      if (a5 == 0.0 || *((_BYTE *)this + 653))
      {
        *((_BYTE *)this + 653) = a5 == 0.0;
        *((_BYTE *)this + 660) = 1;
      }
      if (a5 == 0.0)
        goto LABEL_13;
      v12 = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, v7);
      v13 = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(v12, v6);
      ausdk::AUElement::SetParameter(v13, 1u, 0.0, 0);
      *((_BYTE *)this + 660) = 1;
      *((_DWORD *)this + 164) = 0;
    }
    v14 = (float)*((unsigned int *)this + 168);
    goto LABEL_12;
  }
  return 0;
}

uint64_t AURoundTripAAC::CanScheduleParameters(AURoundTripAAC *this)
{
  return 0;
}

uint64_t AURoundTripAAC::Render(AURoundTripAAC *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v7;
  uint64_t Element;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  ausdk::AUInputElement *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  UInt32 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  unsigned int v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  float *v36;
  float *v37;
  uint64_t v38;
  double v39;
  float v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const float *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const float *v57;
  const float **v58;
  const float *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 __n;
  unsigned int *__n_4;
  AudioBufferList *BufferList;
  UInt32 ioOutputDataPacketSize;
  unsigned int v69;

  v7 = (AURoundTripAAC *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0);
  if (*((_DWORD *)this + 158))
    v9 = 1;
  else
    v9 = *((_DWORD *)this + 300) != 0;
  v10 = *(unsigned int *)(Element + 108);
  v11 = *((_DWORD *)this + 169);
  if (v11 == *((_DWORD *)this + 170)
    || (*((_DWORD *)this + 170) = v11,
        (*(void (**)(AURoundTripAAC *))(*(_QWORD *)this + 64))(this),
        v12 = (*(uint64_t (**)(AURoundTripAAC *))(*(_QWORD *)this + 56))(this),
        !(_DWORD)v12))
  {
    v69 = 0;
    v13 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v7, 0);
    v12 = ausdk::AUInputElement::PullInput(v13, &v69, a3, 0, a4);
    if (!(_DWORD)v12)
    {
      __n = v9;
      *((_DWORD *)this + 154) = a4;
      v14 = ausdk::AUScope::SafeGetElement(v7, 0);
      BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v14 + 144));
      v15 = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
      v16 = (_DWORD *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v15 + 144));
      v63 = *((_QWORD *)this + 72);
      v64 = *((_QWORD *)this + 73);
      __n_4 = (unsigned int *)(*((_QWORD *)this + 74) + 24);
      if (!*((_DWORD *)this + 302) && (_DWORD)v10)
      {
        if ((_DWORD)v10 == 2)
        {
          v44 = ausdk::AUScope::SafeGetElement(v7, 0);
          v45 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v44 + 144));
          TruePeak::Process((AURoundTripAAC *)((char *)this + 688), a4, *(const float **)(v45 + 16));
          v46 = ausdk::AUScope::SafeGetElement(v7, 0);
          v47 = *(_DWORD *)(v46 + 92);
          v48 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v46 + 144));
          if ((v47 & 0x20) != 0)
            v49 = *(const float **)(v48 + 32);
          else
            v49 = (const float *)(*(_QWORD *)(v48 + 16) + 4);
          TruePeak::Process((AURoundTripAAC *)((char *)this + 816), a4, v49);
        }
        else
        {
          v51 = 0;
          v52 = 16;
          v53 = v10;
          do
          {
            v54 = ausdk::AUScope::SafeGetElement(v7, 0);
            v55 = *(_DWORD *)(v54 + 92);
            v56 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v54 + 144));
            if ((v55 & 0x20) != 0)
              v57 = *(const float **)(v56 + v52);
            else
              v57 = (const float *)(*(_QWORD *)(v56 + 16) + v51);
            TruePeak::Process((AURoundTripAAC *)((char *)this + 688), a4, v57);
            v52 += 16;
            v51 += 4;
            --v53;
          }
          while (v53);
        }
      }
      v17 = (unsigned int *)(v64 + 24);
      AppendBuffer((unsigned int *)(v64 + 24), BufferList, a4, *(_DWORD *)(*((_QWORD *)this + 73) + 16));
      AppendBuffer(__n_4, BufferList, a4, *(_DWORD *)(*((_QWORD *)this + 74) + 16));
      CADeprecated::CABufferList::SetNumBytes(*((_DWORD **)this + 72), *((_DWORD *)this + 151));
      ioOutputDataPacketSize = a4;
      v18 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 69), (AudioConverterComplexInputDataProc)AURoundTripAAC::sDecodeInputProc, this, &ioOutputDataPacketSize, (AudioBufferList *)(v63 + 24), 0);
      v12 = v18 == 1735356005 ? 0 : v18;
      if (!(_DWORD)v12)
      {
        v19 = __n;
        if (!*((_DWORD *)this + 302) && (_DWORD)v10)
        {
          if ((_DWORD)v10 == 2)
          {
            TruePeak::Process((AURoundTripAAC *)((char *)this + 944), a4, *(const float **)(v63 + 40));
            TruePeak::Process((AURoundTripAAC *)((char *)this + 1072), a4, *(const float **)(v63 + 56));
          }
          else
          {
            v58 = (const float **)(v63 + 40);
            do
            {
              v59 = *v58;
              v58 += 2;
              TruePeak::Process((AURoundTripAAC *)((char *)this + 944), a4, v59);
              --v10;
            }
            while (v10);
          }
        }
        if (__n && *((_DWORD *)this + 159) && !*((_DWORD *)this + 306))
        {
          if ((_DWORD)a4 && *v16)
          {
            v60 = 0;
            v61 = 0;
            do
            {
              memcpy(*(void **)&v16[v60 + 4], *(const void **)(v64 + 40 + v60 * 4), (4 * a4));
              ++v61;
              v60 += 4;
            }
            while (v61 < *v16);
          }
          goto LABEL_77;
        }
        v20 = ioOutputDataPacketSize;
        v21 = *((unsigned __int8 *)this + 652);
        v22 = 4 * (a4 - ioOutputDataPacketSize);
        LODWORD(v23) = *v16;
        if ((_DWORD)a4 != ioOutputDataPacketSize && (_DWORD)v23 != 0)
        {
          v25 = 0;
          if (*((_BYTE *)this + 652))
            v26 = 0;
          else
            v26 = 4 * ioOutputDataPacketSize;
          v27 = 4;
          do
          {
            bzero((void *)(*(_QWORD *)&v16[v27] + v26), v22);
            ++v25;
            v23 = *v16;
            v27 += 4;
          }
          while (v25 < v23);
          v20 = ioOutputDataPacketSize;
          v19 = __n;
        }
        if (v20 && (_DWORD)v23)
        {
          v28 = 0;
          v29 = 0;
          v30 = 4 * v20;
          if (!v21)
            v22 = 0;
          do
          {
            memcpy((void *)(*(_QWORD *)&v16[v28 + 4] + v22), *(const void **)(v63 + 40 + v28 * 4), v30);
            ++v29;
            v23 = *v16;
            v28 += 4;
          }
          while (v29 < v23);
          v19 = __n;
        }
        v31 = *((_DWORD *)this + 306);
        if (v31)
        {
          v32 = *((double *)this + 155);
        }
        else
        {
          if (*((_DWORD *)this + 159) == v19)
            goto LABEL_77;
          v31 = *((_DWORD *)this + 303);
          *((_DWORD *)this + 306) = v31;
          v32 = *((double *)this + 152);
          v50 = 0.0;
          if (v19)
          {
            v50 = 1.0;
            v32 = -v32;
          }
          *((double *)this + 154) = v50;
          *((double *)this + 155) = v32;
          *((_DWORD *)this + 159) = v19;
          if (!v31)
            goto LABEL_77;
          LODWORD(v23) = *v16;
        }
        if (v31 >= a4)
          v33 = a4;
        else
          v33 = v31;
        if ((_DWORD)v33)
        {
          v34 = *((double *)this + 154);
          if ((_DWORD)v23)
          {
            v35 = 0;
            do
            {
              v36 = *(float **)&v16[4 * v35 + 4];
              v37 = *(float **)(v64 + 16 * v35 + 40);
              v38 = v33;
              v39 = v34;
              do
              {
                v40 = *v37++;
                v41 = v39;
                *v36 = v40 + (float)(v41 * (float)(*v36 - v40));
                ++v36;
                v39 = v32 + v39;
                --v38;
              }
              while (v38);
              ++v35;
            }
            while (v35 != v23);
          }
          *((double *)this + 154) = v34 + v32 * (double)v33;
          LODWORD(v23) = *v16;
        }
        if (v31 < a4 && v32 < 0.0 && (_DWORD)v23)
        {
          v42 = 0;
          v43 = 0;
          do
          {
            memcpy((void *)(*(_QWORD *)&v16[v42 + 4] + (4 * v33)), (const void *)(*(_QWORD *)(v64 + 40 + v42 * 4) + (4 * v33)), (4 * (a4 - v33)));
            ++v43;
            v42 += 4;
          }
          while (v43 < *v16);
        }
        *((_DWORD *)this + 306) -= v33;
        v17 = (unsigned int *)(v64 + 24);
LABEL_77:
        if (ioOutputDataPacketSize)
          *((_BYTE *)this + 652) = 0;
        ShiftBuffers(v17, a4);
      }
    }
  }
  return v12;
}

uint64_t AURoundTripAAC::GetParameterInfo(AURoundTripAAC *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  int v7;
  BOOL v8;
  float v9;
  float v10;
  int v11;
  uint64_t v12;
  const __CFString *v13;

  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  if (a3 == 2)
  {
    v11 = *((_DWORD *)this + 164);
    if (v11)
    {
      if (v11 == 2)
      {
        buffer->cfNameString = CFSTR("quality");
        buffer->flags = -939524096;
        CFStringGetCString(CFSTR("quality"), buffer->name, 52, 0x8000100u);
        *(_QWORD *)&buffer->unit = 0x3F80000000000000;
        v12 = 0x40C0000041200000;
        goto LABEL_22;
      }
      v13 = CFSTR("base bit rate");
    }
    else
    {
      v13 = CFSTR("bit rate");
    }
    buffer->cfNameString = v13;
    buffer->flags = -939524096;
    CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 1;
    v12 = 0x4120000041800000;
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    buffer->cfNameString = CFSTR("encoding strategy");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("encoding strategy"), buffer->name, 52, 0x8000100u);
    *(_QWORD *)&buffer->unit = 1;
    v8 = *((_BYTE *)this + 653) == 0;
    v9 = 2.0;
    v10 = 0.0;
LABEL_15:
    if (!v8)
      v10 = v9;
    v12 = LODWORD(v10);
    goto LABEL_22;
  }
  if (a3)
    return 4294956418;
  buffer->cfNameString = CFSTR("type");
  buffer->flags = -939524096;
  CFStringGetCString(CFSTR("type"), buffer->name, 52, 0x8000100u);
  *(_QWORD *)&buffer->unit = 1;
  pthread_once(&gOnce, initHasHEv2);
  if (gHasHEv2 == 1)
  {
    v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
    v8 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108) == 2 && v7 == 2;
    v9 = 1.0;
    v10 = 2.0;
    goto LABEL_15;
  }
  v12 = 1065353216;
LABEL_22:
  result = 0;
  *(_QWORD *)&buffer->maxValue = v12;
  buffer->flags += 285212672;
  return result;
}

uint64_t AURoundTripAAC::SaveState(AURoundTripAAC *this, __CFDictionary **a2)
{
  __CFDictionary *v4;
  CFNumberRef v5;

  ausdk::AUBase::SaveState(this, a2);
  v4 = *a2;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)this + 664);
  CFDictionarySetValue(v4, CFSTR("factoryPresetIndex"), v5);
  CFRelease(v5);
  return 0;
}

uint64_t AURoundTripAAC::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t result;
  const __CFNumber *Value;
  uint64_t v6;
  const AUPreset *v7;
  char v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t valuePtr;

  result = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)result)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("factoryPresetIndex"));
    if (Value)
    {
      HIDWORD(valuePtr) = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
      if (!AURoundTripAAC::MatchParamsForPreset((AURoundTripAAC *)this, HIDWORD(valuePtr)))
      {
LABEL_8:
        *((_DWORD *)this + 166) = -1;
        return 0;
      }
      v6 = SHIDWORD(valuePtr);
      *((_DWORD *)this + 166) = HIDWORD(valuePtr);
      v7 = (const AUPreset *)&sPresets[4 * v6];
    }
    else
    {
      valuePtr = 0;
      v11 = 0;
      (*((void (**)(OpaqueAudioComponentInstance **, _QWORD, _QWORD, _QWORD, char *))*this + 18))(this, 0, 0, 0, (char *)&valuePtr + 4);
      v8 = 1;
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, uint64_t *))*this + 18))(this, 1, 0, 0, &valuePtr);
      (*((void (**)(OpaqueAudioComponentInstance **, uint64_t, _QWORD, _QWORD, int *))*this + 18))(this, 2, 0, 0, &v11);
      v9 = 0;
      while (1)
      {
        v10 = v8;
        if (AURoundTripAAC::MatchParamsForPreset((AURoundTripAAC *)this, v9))
          break;
        v8 = 0;
        v9 = 1;
        if ((v10 & 1) == 0)
          goto LABEL_8;
      }
      *((_DWORD *)this + 166) = v9;
      v7 = (const AUPreset *)&sPresets[4 * v9];
    }
    ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v7);
    return 0;
  }
  return result;
}

uint64_t AURoundTripAAC::GetParameterValueStrings(AURoundTripAAC *this, int a2, int a3, const __CFArray **a4)
{
  uint64_t result;
  int v7;
  CFIndex v9;
  __CFString **v10;
  const __CFArray *v11;

  if (a2)
    return 4294956417;
  switch(a3)
  {
    case 2:
      if (*((_DWORD *)this + 164) > 1u)
        return 4294956417;
      if (!a4)
        return 0;
      v10 = &kRate_Names;
      v9 = 17;
      break;
    case 1:
      if (!a4)
        return 0;
      v10 = &kStrategy_Names;
      if (*((_BYTE *)this + 653))
        v9 = 3;
      else
        v9 = 1;
      break;
    case 0:
      if (a4)
      {
        pthread_once(&gOnce, initHasHEv2);
        if (gHasHEv2 == 1)
        {
          v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
          if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0) + 108) == 2
            && v7 == 2)
          {
            v9 = 3;
          }
          else
          {
            v9 = 2;
          }
        }
        else
        {
          v9 = 2;
        }
        v10 = &kType_Names;
        break;
      }
      return 0;
    default:
      return 4294956417;
  }
  v11 = CFArrayCreate(0, (const void **)v10, v9, 0);
  result = 0;
  *a4 = v11;
  return result;
}

uint64_t AURoundTripAAC::GetPresets(AURoundTripAAC *this, const __CFArray **a2)
{
  __CFArray *Mutable;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 2, 0);
    CFArrayAppendValue(Mutable, sPresets);
    CFArrayAppendValue(Mutable, &dword_254A76368);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AURoundTripAAC::NewFactoryPresetSet(AURoundTripAAC *this, const AUPreset *a2)
{
  uint64_t v3;
  unsigned int presetNumber;
  char i;
  const AUPreset *v6;
  char v7;
  uint64_t result;
  uint64_t j;

  v3 = 0;
  presetNumber = a2->presetNumber;
  for (i = 1; ; i = 0)
  {
    v6 = (const AUPreset *)&sPresets[4 * v3];
    if (presetNumber == v6->presetNumber)
      break;
    v7 = i;
    v3 = 1;
    if ((v7 & 1) == 0)
      return 4294956445;
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v6);
  if (presetNumber > 1)
    return 0;
  for (j = 0; j != 3; ++j)
    (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, j, 0, 0, 0, presetParams[3 * presetNumber + j]);
  result = 0;
  *((_DWORD *)this + 166) = presetNumber;
  return result;
}

double AURoundTripAAC::GetLatency(AURoundTripAAC *this)
{
  uint64_t Element;
  unint64_t v3;

  Element = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
  LODWORD(v3) = *((_DWORD *)this + 156);
  return (double)v3 / *(double *)(Element + 80);
}

double AURoundTripAAC::GetTailTime(AURoundTripAAC *this)
{
  return 0.05;
}

uint64_t AURoundTripAAC::SupportsTail(AURoundTripAAC *this)
{
  return 1;
}

BOOL AURoundTripAAC::StreamFormatWritable(AURoundTripAAC *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AURoundTripAAC::SupportedNumChannels(AURoundTripAAC *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 2;
}

BOOL AURoundTripAAC::ValidFormat(AURoundTripAAC *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame;
  const AudioStreamBasicDescription *v6;
  _BOOL8 result;

  mChannelsPerFrame = a4->mChannelsPerFrame;
  if (!mChannelsPerFrame
    || mChannelsPerFrame > (*(unsigned int (**)(AURoundTripAAC *, _QWORD))(*(_QWORD *)this + 376))(this, 0))
  {
    return 0;
  }
  result = ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a4, v6);
  if (result)
    return (a4->mFormatFlags & 0x20) != 0 || a4->mChannelsPerFrame == 1;
  return result;
}

uint64_t AURoundTripAAC::ChangeStreamFormat(AURoundTripAAC *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *a4, const AudioStreamBasicDescription *a5)
{
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, a4, a5);
  if (a4->mChannelsPerFrame != a5->mChannelsPerFrame)
    (*(void (**)(AURoundTripAAC *, uint64_t, uint64_t))(*(_QWORD *)this + 544))(this, a2, a3);
  return 0;
}

uint64_t AURoundTripAAC::GetAudioChannelLayout(AURoundTripAAC *this, int a2, int a3, AudioChannelLayout *a4, BOOL *a5)
{
  const AudioChannelLayout *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  AURoundTripAAC::SetDefaultChannelLayoutsIfNone(this);
  *a5 = 1;
  if (a2 == 2)
  {
    v11 = (char *)this + 536;
  }
  else
  {
    if (a2 != 1)
      ausdk::Throw((ausdk *)0xFFFFD58ELL);
    v11 = (char *)this + 528;
  }
  if (a3)
    ausdk::Throw((ausdk *)0xFFFFD583);
  if (!*(_QWORD *)v11)
    return 0;
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(*(_QWORD *)v11 + 16), v10))
    return 0;
  v12 = *(_QWORD *)v11;
  if (!*(_QWORD *)v11)
    return 0;
  v13 = *(unsigned int *)(v12 + 12);
  if (a4 && (_DWORD)v13)
    memcpy(a4, (const void *)(v12 + 16), *(unsigned int *)(v12 + 12));
  return v13;
}

uint64_t AURoundTripAAC::SetAudioChannelLayout(AURoundTripAAC *this, uint64_t a2, uint64_t a3, AudioChannelLayout *a4)
{
  int v4;
  int v5;
  int mChannelLayoutTag_low;
  ausdk::AUScope *v9;
  ausdk::AUScope *v11;
  uint64_t Element;
  const AudioChannelLayout *v13;
  int v14;

  v4 = a3;
  v5 = a2;
  if (!a4)
    return (*(uint64_t (**)(AURoundTripAAC *, uint64_t, uint64_t))(*(_QWORD *)this + 544))(this, a2, a3);
  if ((_DWORD)a2 == 2)
  {
    v9 = (AURoundTripAAC *)((char *)this + 128);
  }
  else
  {
    if ((_DWORD)a2 != 1)
      return 4294956428;
    v9 = (AURoundTripAAC *)((char *)this + 80);
  }
  mChannelLayoutTag_low = LOWORD(a4->mChannelLayoutTag);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v9, 0) + 108) != mChannelLayoutTag_low)
    return 4294956428;
  if (v5 == 2)
    v11 = (AURoundTripAAC *)((char *)this + 128);
  else
    v11 = (AURoundTripAAC *)((char *)this + 80);
  Element = ausdk::AUScope::SafeGetElement(v11, 0);
  if (v4)
    return 4294956419;
  v14 = *(_DWORD *)(Element + 108);
  if (v14 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v13))
    return 4294956445;
  CAAudioChannelLayout::operator=();
  return 0;
}

uint64_t AURoundTripAAC::RemoveAudioChannelLayout(AURoundTripAAC *this, int a2, int a3)
{
  CAAudioChannelLayout *v3;

  if (a2 == 2)
  {
    v3 = (AURoundTripAAC *)((char *)this + 536);
    if (a3)
      return 4294956419;
LABEL_6:
    CAAudioChannelLayout::Clear(v3);
    return 0;
  }
  if (a2 == 1)
  {
    v3 = (AURoundTripAAC *)((char *)this + 528);
    if (a3)
      return 4294956419;
    goto LABEL_6;
  }
  return 4294956430;
}

char *AURoundTripAAC::GetChannelLayoutTags@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  _DWORD *exception;

  if ((a1 - 1) > 1)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -10866;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(a2, &kPCMLayoutTags, (uint64_t)overviewParameterIDs, 2uLL);
}

uint64_t AURoundTripAAC::Version(AURoundTripAAC *this)
{
  return 0x10000;
}

uint64_t AURoundTripAAC::SetDefaultChannelLayoutsIfNone(AURoundTripAAC *this)
{
  int v2;
  BOOL v3;
  uint64_t result;
  BOOL v5;

  v2 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 80), 0) + 108);
  if (*(_DWORD *)(*((_QWORD *)this + 66) + 16))
    v3 = (unsigned __int16)*(_DWORD *)(*((_QWORD *)this + 66) + 16) == v2;
  else
    v3 = 0;
  if (v3
    || (CAAudioChannelLayout::operator=(),
        result = (*(uint64_t (**)(AURoundTripAAC *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 536))(this, 1, 0, *((_QWORD *)this + 66) + 16), !(_DWORD)result))
  {
    result = ausdk::AUScope::SafeGetElement((AURoundTripAAC *)((char *)this + 128), 0);
    if (*(_DWORD *)(*((_QWORD *)this + 67) + 16))
      v5 = (unsigned __int16)*(_DWORD *)(*((_QWORD *)this + 67) + 16) == *(_DWORD *)(result + 108);
    else
      v5 = 0;
    if (!v5)
    {
      CAAudioChannelLayout::operator=();
      return (*(uint64_t (**)(AURoundTripAAC *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 536))(this, 2, 0, *((_QWORD *)this + 67) + 16);
    }
  }
  return result;
}

void initHasHEv2(void)
{
  void *v0;
  BOOL v1;
  int v2;
  void *v3;
  BOOL v4;
  int v5;
  void *outPropertyData;
  UInt32 outPropertyDataSize;
  int inSpecifier;

  outPropertyDataSize = 0;
  inSpecifier = 1633772400;
  if (!AudioFormatGetPropertyInfo(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize) && outPropertyDataSize > 0xB)
  {
    outPropertyData = 0;
    CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(&outPropertyData, outPropertyDataSize);
    v0 = outPropertyData;
    if (AudioFormatGetProperty(0x6176656Eu, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData))
      v1 = 0;
    else
      v1 = outPropertyDataSize > 0xB;
    v2 = v1;
    if (v0)
      free(v0);
    if (v2)
    {
      outPropertyDataSize = 0;
      inSpecifier = 1633772400;
      if (!AudioFormatGetPropertyInfo(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize) && outPropertyDataSize > 0xB)
      {
        outPropertyData = 0;
        CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(&outPropertyData, outPropertyDataSize);
        v3 = outPropertyData;
        if (AudioFormatGetProperty(0x61766465u, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData))
          v4 = 0;
        else
          v4 = outPropertyDataSize > 0xB;
        v5 = v4;
        if (v3)
          free(v3);
        if (v5)
          gHasHEv2 = 1;
      }
    }
  }
}

void sub_210AE2480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9)
    free(a9);
  _Unwind_Resume(exception_object);
}

void *CADeprecated::CAAutoFree<AudioClassDescription>::allocBytes(void **a1, size_t size)
{
  void *v4;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

BOOL AURoundTripAAC::MatchParamsForPreset(AURoundTripAAC *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 > 1)
    return 0;
  v13 = v2;
  v14 = v3;
  v12 = 0.0;
  (*(void (**)(AURoundTripAAC *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v12);
  v7.n128_f32[0] = v12;
  if (v12 != 0.0)
    return 0;
  v8 = (char *)&presetParams + 12 * a2;
  v9 = 1;
  v10 = 2;
  while (v9 != 3)
  {
    v12 = 0.0;
    (*(void (**)(AURoundTripAAC *, uint64_t, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, v9, 0, 0, &v12, v7);
    v7.n128_f32[0] = v12;
    v11 = *(float *)&v8[4 * v9++];
    if (v12 != v11)
    {
      v10 = v9 - 2;
      return v10 > 1;
    }
  }
  return v10 > 1;
}

unsigned int *AppendBuffer(unsigned int *result, AudioBufferList *a2, int a3, unsigned int a4)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  void **p_mData;
  unsigned int *v11;
  uint64_t v12;

  if (a3)
  {
    v4 = result;
    v5 = *result;
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = 0;
      v9 = (4 * a3);
      p_mData = &a2->mBuffers[0].mData;
      do
      {
        v11 = &v4[v7 / 4];
        v12 = v4[v7 / 4 + 3];
        if ((int)v12 + (int)v9 <= a4)
        {
          result = (unsigned int *)memcpy((void *)(*((_QWORD *)v11 + 2) + v12), p_mData[v7 / 8], v9);
          v11[3] += v9;
          v5 = *v4;
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < v5);
    }
  }
  return result;
}

uint64_t AURoundTripAAC::sDecodeInputProc(AURoundTripAAC *this, UInt32 *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, AURoundTripAAC *a6)
{
  AudioBufferList *v10;
  UInt32 v11;
  uint64_t result;

  v10 = (AudioBufferList *)a5[71];
  v11 = *((_DWORD *)a5 + 162);
  if (v11 >= *a2)
    v11 = *a2;
  *a2 = v11;
  CADeprecated::CABufferList::SetNumBytes(v10, *((_DWORD *)a5 + 150));
  result = AudioConverterFillComplexBuffer((AudioConverterRef)a5[68], (AudioConverterComplexInputDataProc)AURoundTripAAC::sEncodeInputProc, a5, a2, v10 + 1, a5[80]);
  if (*a2)
  {
    memcpy(a3 + 2, v10[1].mBuffers, 16 * v10[1].mNumberBuffers);
    result = 0;
    *(_QWORD *)&a4->mNumberBuffers = a5[80];
  }
  return result;
}

unsigned int *ShiftBuffers(unsigned int *result, int a2)
{
  unsigned int *v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result;
    if (*result)
    {
      v3 = 0;
      v4 = (4 * a2);
      v5 = result + 3;
      do
      {
        v6 = *v5 - v4;
        result = (unsigned int *)memmove(*(void **)(v5 + 1), (const void *)(*(_QWORD *)(v5 + 1) + v4), v6);
        *v5 = v6;
        v5 += 4;
        ++v3;
      }
      while (v3 < *v2);
    }
  }
  return result;
}

uint64_t AURoundTripAAC::sEncodeInputProc(AURoundTripAAC *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, AURoundTripAAC *a6)
{
  AudioStreamPacketDescription *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  UInt32 *p_mVariableFramesInPacket;
  uint64_t v20;

  v8 = a5[74];
  v9 = HIDWORD(v8[2].mStartOffset) >> 2;
  v10 = *((_DWORD *)a5 + 155);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    result = 1735356005;
    *(_DWORD *)a2 = 0;
    v13 = *a3;
    if ((_DWORD)v13)
    {
      v14 = a3 + 4;
      do
      {
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 - 1) = 1;
        v14 += 4;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    ShiftBuffers(&v8[1].mVariableFramesInPacket, v10);
    v16 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 >= v11)
      v16 = v11;
    *((_DWORD *)a5 + 155) = v16;
    v17 = *a3;
    if ((_DWORD)v17)
    {
      v18 = a3 + 4;
      p_mVariableFramesInPacket = &v8[2].mVariableFramesInPacket;
      do
      {
        v20 = *(_QWORD *)p_mVariableFramesInPacket;
        p_mVariableFramesInPacket += 4;
        *(_QWORD *)v18 = v20;
        *(v18 - 2) = 1;
        *(v18 - 1) = 4 * v16;
        v18 += 4;
        --v17;
      }
      while (v17);
    }
    result = 0;
    *(_DWORD *)a2 = v16;
  }
  return result;
}

_QWORD *CADeprecated::CAAutoFree<AudioChannelLayout>::CAAutoFree(_QWORD *a1, uint64_t a2)
{
  void *v4;
  std::bad_alloc *exception;
  std::bad_alloc *v7;

  *a1 = 0;
  v4 = malloc_type_malloc(32 * a2, 0x7C51E058uLL);
  if (a2 && !v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = v4;
  return a1;
}

uint64_t InstrumentState::ResetToDefaults(InstrumentState *this, int a2)
{
  _QWORD **v4;
  _QWORD **v5;
  _QWORD *v6;
  _DWORD **v7;
  _DWORD **v8;
  _DWORD **v9;
  _DWORD **v10;
  _QWORD **v11;
  _QWORD **v12;
  _QWORD *v13;

  *((_BYTE *)this + 48) = 1;
  (*(void (**)(InstrumentState *, const __CFString *, uint64_t))(*(_QWORD *)this + 72))(this, CFSTR("Default Instrument"), 1);
  *((_QWORD *)this + 15) = 0x4A00000000;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = -1;
  *((_WORD *)this + 74) = 0;
  *((_BYTE *)this + 150) = 1;
  *((_DWORD *)this + 39) = -1;
  *((_WORD *)this + 92) = 0;
  *((_BYTE *)this + 200) = -1;
  if (a2)
  {
    (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
    v4 = (_QWORD **)*((_QWORD *)this + 29);
    v5 = (_QWORD **)*((_QWORD *)this + 30);
    while (v4 != v5)
    {
      v6 = *v4++;
      LayerState::UnregisterConnections(v6);
    }
    v7 = (_DWORD **)*((_QWORD *)this + 26);
    v8 = (_DWORD **)*((_QWORD *)this + 27);
    if (v7 != v8)
    {
      do
      {
        if (*v7)
          SamplerState::Unref(*v7);
        ++v7;
      }
      while (v7 != v8);
      v7 = (_DWORD **)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 27) = v7;
    v9 = (_DWORD **)*((_QWORD *)this + 29);
    v10 = (_DWORD **)*((_QWORD *)this + 30);
    if (v9 != v10)
    {
      do
      {
        if (*v9)
          SamplerState::Unref(*v9);
        ++v9;
      }
      while (v9 != v10);
      v9 = (_DWORD **)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v9;
    InstrumentState::Initialize((InstrumentManager **)this);
    v11 = (_QWORD **)*((_QWORD *)this + 29);
    v12 = (_QWORD **)*((_QWORD *)this + 30);
    while (v11 != v12)
    {
      v13 = *v11++;
      LayerState::RegisterConnections(v13);
    }
    (*(void (**)(InstrumentState *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  }
  return (*(uint64_t (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4142, 0);
}

void InstrumentState::GetProperty(InstrumentState *this, int a2, unsigned int *a3)
{
  const void *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  float v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  SampleManager *Instance;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  __int128 v39;
  CAXException *exception;
  CAXException *v41;
  _BYTE v42[16];
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE *v48;
  __int16 v49;
  const char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 4120:
      v5 = (const void *)(*(uint64_t (**)(InstrumentState *))(*(_QWORD *)this + 80))(this);
      v6 = v5;
      if (v5)
        CFRetain(v5);
      *(_QWORD *)a3 = v6;
      return;
    case 4121:
    case 4128:
    case 4129:
    case 4133:
    case 4134:
    case 4135:
    case 4137:
    case 4138:
    case 4139:
    case 4141:
    case 4144:
      return;
    case 4122:
      v9 = *((_DWORD *)this + 39);
      goto LABEL_25;
    case 4123:
      v9 = *((_DWORD *)this + 33);
      goto LABEL_25;
    case 4124:
      v10 = *((float *)this + 34);
      goto LABEL_36;
    case 4125:
      v10 = *((float *)this + 32);
      goto LABEL_36;
    case 4126:
      v10 = *((float *)this + 35) * 200.0;
      goto LABEL_36;
    case 4127:
      v9 = *((char *)this + 148);
      goto LABEL_25;
    case 4130:
      v9 = *((unsigned __int8 *)this + 150);
      goto LABEL_25;
    case 4131:
      v9 = *((_DWORD *)this + 36);
      goto LABEL_25;
    case 4132:
      *(_QWORD *)a3 = *((_QWORD *)this + 20);
      return;
    case 4136:
      v9 = *((char *)this + 149);
      goto LABEL_25;
    case 4140:
      v11 = *((_QWORD *)this + 29);
      if (((*((_QWORD *)this + 30) - v11) & 0x7FFFFFFF8) != 0)
      {
        v12 = 0;
        do
        {
          a3[v12] = (***(uint64_t (****)(_QWORD))(v11 + 8 * v12))(*(_QWORD *)(v11 + 8 * v12));
          ++v12;
          v11 = *((_QWORD *)this + 29);
        }
        while (v12 < ((unint64_t)(*((_QWORD *)this + 30) - v11) >> 3));
      }
      return;
    case 4142:
      v9 = *((_DWORD *)this + 31);
LABEL_25:
      *a3 = v9;
      return;
    case 4143:
      v13 = (_QWORD *)*((_QWORD *)this + 14);
      v16 = (_QWORD *)*v13;
      v14 = v13 + 1;
      v15 = v16;
      if (v16 != v14)
      {
        v17 = 0;
        do
        {
          a3[v17] = *((_DWORD *)v15 + 8);
          v18 = (_QWORD *)v15[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v15[2];
              v20 = *v19 == (_QWORD)v15;
              v15 = v19;
            }
            while (!v20);
          }
          ++v17;
          v15 = v19;
        }
        while (v19 != v14);
      }
      return;
    case 4145:
      v10 = *((float *)this + 38);
LABEL_36:
      *(float *)a3 = v10;
      return;
    case 4146:
      v21 = *((_QWORD *)this + 14);
      Instance = (SampleManager *)SampleManager::GetInstance(0);
      v25 = *(_QWORD *)(v21 + 8);
      v24 = v21 + 8;
      v23 = v25;
      if (!v25)
        goto LABEL_75;
      v26 = *a3;
      v27 = v24;
      do
      {
        v28 = *(_DWORD *)(v23 + 32);
        v29 = v28 >= v26;
        if (v28 >= v26)
          v30 = (uint64_t *)v23;
        else
          v30 = (uint64_t *)(v23 + 8);
        if (v29)
          v27 = v23;
        v23 = *v30;
      }
      while (*v30);
      if (v27 == v24 || v26 < *(_DWORD *)(v27 + 32))
      {
LABEL_75:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v42, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v44 = "InstrumentManager.cpp";
          v45 = 1024;
          v46 = 67;
          v47 = 2080;
          v48 = v42;
          v49 = 2080;
          v50 = "InstrumentManager::GetSampleInfo: Sample with that ID not found";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(exception, "InstrumentManager::GetSampleInfo: Sample with that ID not found", -10851);
      }
      v31 = *(_QWORD *)(v27 + 40);
      v32 = SampleManager::SearchForSample(Instance, v31);
      if (!v32)
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v44 = "SampleManager.cpp";
          v45 = 1024;
          v46 = 569;
          v47 = 2048;
          v48 = (_BYTE *)v31;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d GetSampleInfo: Sample with ID %llu not found", buf, 0x1Cu);
        }
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v42, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v44 = "InstrumentManager.cpp";
          v45 = 1024;
          v46 = 68;
          v47 = 2080;
          v48 = v42;
          v49 = 2080;
          v50 = "InstrumentManager::GetSampleInfo: Sample missing from sample manager";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v41 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v41, "InstrumentManager::GetSampleInfo: Sample missing from sample manager", -10851);
      }
      v33 = v32;
      v34 = *(const void **)(v32 + 32);
      *((_QWORD *)a3 + 1) = v34;
      if (v34)
        CFRetain(v34);
      v35 = *(const void **)(v33 + 40);
      *((_QWORD *)a3 + 2) = v35;
      if (v35)
        CFRetain(v35);
      *((_QWORD *)a3 + 3) = *(_QWORD *)(v33 + 56);
      *((_BYTE *)a3 + 4) = *((_QWORD *)a3 + 1) == 0;
      v36 = *(_DWORD *)(v33 + 168);
      if (!v36)
        goto LABEL_60;
      if ((*(_BYTE *)(v33 + 156) & 0x20) != 0)
      {
        v37 = 1;
      }
      else
      {
        v37 = *(_DWORD *)(v33 + 172);
        if (!v37)
        {
          v36 = 0;
          goto LABEL_60;
        }
      }
      v36 /= v37;
LABEL_60:
      *((_QWORD *)a3 + 9) = *(_QWORD *)(v33 + 184) * *(_DWORD *)(v33 + 172) * v36;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33) & 1) != 0)
      {
        v38 = *(_OWORD *)(v33 + 144);
        v39 = *(_OWORD *)(v33 + 160);
        *((_QWORD *)a3 + 8) = *(_QWORD *)(v33 + 176);
        *((_OWORD *)a3 + 2) = v38;
        *((_OWORD *)a3 + 3) = v39;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v44 = "Sample.cpp";
          v45 = 1024;
          v46 = 84;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  Description request on unloaded Sample", buf, 0x12u);
        }
        __break(1u);
      }
      return;
    default:
      if (a2 == 4230)
      {
        v7 = *((_QWORD *)this + 26);
        if (((*((_QWORD *)this + 27) - v7) & 0x7FFFFFFF8) != 0)
        {
          v8 = 0;
          do
          {
            a3[v8] = (***(uint64_t (****)(_QWORD))(v7 + 8 * v8))(*(_QWORD *)(v7 + 8 * v8));
            ++v8;
            v7 = *((_QWORD *)this + 26);
          }
          while (v8 < ((unint64_t)(*((_QWORD *)this + 27) - v7) >> 3));
        }
      }
      return;
  }
}

void sub_210AE2F80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t InstrumentState::SetProperty(InstrumentState *this, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t i;
  unsigned int (***v10)(_QWORD);
  uint64_t (***v11)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  SampleManager *v26;
  SampleManager *v27;
  SampleManager *v28;
  void *v29;
  SampleManager *v30;
  char **v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  SampleManager *v36;
  uint64_t v37;
  char *v38;
  int v39;
  CFHashCode v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;
  BOOL v50;
  uint64_t *v51;
  _BOOL8 v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  BOOL v56;
  uint64_t *v57;
  SampleManager *v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t *v68;
  unsigned int **v69;
  unsigned int **v70;
  unsigned int *v71;
  unsigned int v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int (***v75)(_QWORD);
  const void *v76;
  const void *v77;
  uint64_t v78;
  int NextAvailable;
  uint64_t v80;
  const SamplerState *v81;
  SamplerState *v82;
  const SamplerState *v83;
  uint64_t v84;
  unsigned int (**v85)(_QWORD);
  int v86;
  unint64_t v87;
  EnvelopeState *v88;
  unint64_t v89;
  EnvelopeState **v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  EnvelopeState **v98;
  char *v99;
  char *v100;
  EnvelopeState *v101;
  unint64_t v102;
  uint64_t v103;
  const SamplerState *v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  _QWORD *v120;
  LayerState *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  BOOL v136;
  uint64_t *v137;
  SampleManager *Instance;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  unint64_t v143;
  CFHashCode v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t *v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  BOOL v157;
  int v158;
  CAXException *exception;
  CAXException *v161;
  CAXException *v162;
  CAXException *v163;
  CAXException *v164;
  CAXException *v165;
  CAXException *v166;
  CAXException *v167;
  CAXException *v168;
  CAXException *v169;
  CAXException *v170;
  CAXException *v171;
  unsigned int v172;
  uint64_t v173;
  CFStringRef v174;
  uint8_t buf[4];
  const char *v176;
  __int16 v177;
  int v178;
  __int16 v179;
  uint8_t *v180;
  __int16 v181;
  const char *v182;
  uint8_t v183[4];
  const char *v184;
  __int16 v185;
  int v186;
  __int16 v187;
  uint8_t *v188;
  __int16 v189;
  CFHashCode v190;
  __int16 v191;
  unint64_t v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v176 = "InstrumentState.cpp";
      v177 = 1024;
      v178 = 568;
      v179 = 2080;
      v180 = v183;
      v181 = 2080;
      v182 = "InstrumentState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "InstrumentState::SetProperty: NULL property value", -10851);
  }
  v6 = 0;
  switch(a2)
  {
    case 4120:
      v6 = 1;
      (*(void (**)(InstrumentState *, _QWORD, uint64_t))(*(_QWORD *)this + 72))(this, *(_QWORD *)a3, 1);
      return v6;
    case 4121:
    case 4128:
    case 4129:
    case 4137:
    case 4138:
    case 4139:
    case 4140:
    case 4143:
    case 4146:
      return v6;
    case 4122:
      InstrumentState::SetOutputScope(this, *a3);
      return 1;
    case 4123:
      InstrumentState::SetCoarseTuning(this, *a3);
      return 1;
    case 4124:
      InstrumentState::SetFineTuning((float *)this, *(float *)a3);
      return 1;
    case 4125:
      InstrumentState::SetGain((float *)this, *(float *)a3);
      return 1;
    case 4126:
      InstrumentState::SetPan((float *)this, *(float *)a3 * 0.005);
      return 1;
    case 4127:
      InstrumentState::SetKeyOffset(this, *a3);
      return 1;
    case 4130:
      v59 = *a3 != 0;
      if (*((unsigned __int8 *)this + 150) != v59)
      {
        *((_BYTE *)this + 150) = v59;
        (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4130, 0);
      }
      return 1;
    case 4131:
      InstrumentState::SetVoiceCount(this, *a3);
      return 1;
    case 4132:
      v76 = (const void *)*((_QWORD *)this + 20);
      if (v76)
        CFRelease(v76);
      v77 = *(const void **)a3;
      *((_QWORD *)this + 20) = *(_QWORD *)a3;
      if (v77)
        CFRetain(v77);
      return 1;
    case 4133:
      CheckDataSize(a4, 0x48u);
      v72 = *a3;
      if (*a3 >> 28 == 1)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentState.cpp";
          v177 = 1024;
          v178 = 631;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentState::SetProperty: Cannot copy instrument-level LFOs";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v161 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v161, "InstrumentState::SetProperty: Cannot copy instrument-level LFOs", -10851);
      }
      v73 = (_QWORD *)*((_QWORD *)this + 29);
      v74 = (_QWORD *)*((_QWORD *)this + 30);
      while (2)
      {
        if (v73 == v74)
        {
          v75 = 0;
        }
        else
        {
          v75 = (unsigned int (***)(_QWORD))*v73;
          if ((**(unsigned int (***)(_QWORD))*v73)(*v73) != v72)
          {
            ++v73;
            continue;
          }
        }
        break;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v176 = "InstrumentState.cpp";
        v177 = 1024;
        v178 = 757;
        v179 = 1024;
        LODWORD(v180) = v72;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::CopyLayer(ID = 0x%x)", buf, 0x18u);
      }
      if (!v75)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentState.cpp";
          v177 = 1024;
          v178 = 758;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentState::CopyLayer: No layer matching that element ID";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v162 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v162, "InstrumentState::CopyLayer: No layer matching that element ID", -10851);
      }
      v78 = operator new();
      NextAvailable = GetNextAvailableIndex<LayerState>(*((char **)this + 29), *((char **)this + 30));
      SamplerState::SamplerState((SamplerState *)v78, (const SamplerState *)v75, NextAvailable);
      *(_QWORD *)v78 = &off_24CA8A950;
      *(_DWORD *)(v78 + 96) = *((_DWORD *)v75 + 24);
      *(_QWORD *)(v78 + 100) = *(unsigned int (***)(_QWORD))((char *)v75 + 100);
      *(_DWORD *)(v78 + 108) = *((_DWORD *)v75 + 27);
      *(_QWORD *)(v78 + 112) = v75[14];
      *(_BYTE *)(v78 + 130) = *((_BYTE *)v75 + 130);
      *(_DWORD *)(v78 + 132) = *((_DWORD *)v75 + 33);
      *(_BYTE *)(v78 + 136) = *((_BYTE *)v75 + 136);
      *(_QWORD *)(v78 + 140) = *(unsigned int (***)(_QWORD))((char *)v75 + 140);
      *(_DWORD *)(v78 + 148) = *((_DWORD *)v75 + 37);
      *(_BYTE *)(v78 + 152) = *((_BYTE *)v75 + 152);
      *(_BYTE *)(v78 + 154) = *((_BYTE *)v75 + 154);
      *(_DWORD *)(v78 + 156) = *((_DWORD *)v75 + 39);
      *(_QWORD *)(v78 + 160) = v75[20];
      *(_DWORD *)(v78 + 168) = *((_DWORD *)v75 + 42);
      v80 = operator new();
      v81 = (const SamplerState *)v75[22];
      SamplerState::SamplerState((SamplerState *)v80, v81, 0);
      *(_QWORD *)v80 = &off_24CA8E920;
      *(_QWORD *)(v80 + 88) = *((_QWORD *)v81 + 11);
      *(_DWORD *)(v80 + 96) = *((_DWORD *)v81 + 24);
      *(_QWORD *)(v78 + 176) = v80;
      v82 = (SamplerState *)operator new();
      v83 = (const SamplerState *)v75[23];
      SamplerState::SamplerState(v82, v83, 0);
      *(_QWORD *)v82 = &off_24CA8B060;
      *((_QWORD *)v82 + 11) = *((_QWORD *)v83 + 11);
      *((_QWORD *)v82 + 12) = *((_QWORD *)v83 + 12);
      *(_QWORD *)(v78 + 184) = v82;
      v84 = operator new();
      v85 = v75[24];
      SamplerState::SamplerState((SamplerState *)v84, (const SamplerState *)v85, 0);
      *(_DWORD *)(v84 + 88) = *((_DWORD *)v85 + 22);
      *(_QWORD *)v84 = &off_24CA8DDB0;
      *(_QWORD *)(v84 + 92) = *(unsigned int (**)(_QWORD))((char *)v85 + 92);
      *(_QWORD *)(v78 + 192) = v84;
      *(_WORD *)(v78 + 200) = 0;
      v86 = (**(uint64_t (***)(uint64_t))v78)(v78);
      TRandom::Seed((TRandom *)(v78 + 208), v86);
      *(_OWORD *)(v78 + 512) = 0u;
      *(_OWORD *)(v78 + 528) = 0u;
      *(_OWORD *)(v78 + 480) = 0u;
      *(_OWORD *)(v78 + 496) = 0u;
      *(_OWORD *)(v78 + 448) = 0u;
      *(_OWORD *)(v78 + 464) = 0u;
      *(_BYTE *)(v78 + 88) = *((_BYTE *)v75 + 88);
      *(_BYTE *)(v78 + 89) = *((_BYTE *)v75 + 89);
      *(_BYTE *)(v78 + 90) = *((_BYTE *)v75 + 90);
      *(_BYTE *)(v78 + 91) = *((_BYTE *)v75 + 91);
      *(_BYTE *)(v78 + 92) = *((_BYTE *)v75 + 92);
      *(_BYTE *)(v78 + 93) = *((_BYTE *)v75 + 93);
      if ((((char *)v75[60] - (char *)v75[59]) & 0x7FFFFFFF8) != 0)
      {
        v87 = 0;
        do
        {
          v88 = (EnvelopeState *)operator new();
          EnvelopeState::EnvelopeState(v88, (const EnvelopeState *)v75[59][v87], v87);
          v90 = *(EnvelopeState ***)(v78 + 480);
          v89 = *(_QWORD *)(v78 + 488);
          if ((unint64_t)v90 >= v89)
          {
            v92 = *(_QWORD *)(v78 + 472);
            v93 = ((uint64_t)v90 - v92) >> 3;
            if ((unint64_t)(v93 + 1) >> 61)
              std::vector<void const*>::__throw_length_error[abi:ne180100]();
            v94 = v89 - v92;
            v95 = v94 >> 2;
            if (v94 >> 2 <= (unint64_t)(v93 + 1))
              v95 = v93 + 1;
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
              v96 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v96 = v95;
            if (v96)
              v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v96);
            else
              v97 = 0;
            v98 = (EnvelopeState **)(v96 + 8 * v93);
            *v98 = v88;
            v91 = v98 + 1;
            v100 = *(char **)(v78 + 472);
            v99 = *(char **)(v78 + 480);
            if (v99 != v100)
            {
              do
              {
                v101 = (EnvelopeState *)*((_QWORD *)v99 - 1);
                v99 -= 8;
                *--v98 = v101;
              }
              while (v99 != v100);
              v99 = *(char **)(v78 + 472);
            }
            *(_QWORD *)(v78 + 472) = v98;
            *(_QWORD *)(v78 + 480) = v91;
            *(_QWORD *)(v78 + 488) = v96 + 8 * v97;
            if (v99)
              operator delete(v99);
          }
          else
          {
            *v90 = v88;
            v91 = v90 + 1;
          }
          *(_QWORD *)(v78 + 480) = v91;
          ++*((_DWORD *)v88 + 2);
          ++v87;
        }
        while (v87 < ((unint64_t)((char *)v75[60] - (char *)v75[59]) >> 3));
      }
      if ((((char *)v75[63] - (char *)v75[62]) & 0x7FFFFFFF8) != 0)
      {
        v102 = 0;
        do
        {
          v103 = operator new();
          v104 = (const SamplerState *)v75[62][v102];
          SamplerState::SamplerState((SamplerState *)v103, v104, v102);
          *(_QWORD *)v103 = &off_24CA937A0;
          *(_QWORD *)(v103 + 88) = *((_QWORD *)v104 + 11);
          *(_QWORD *)(v103 + 96) = *((_QWORD *)v104 + 12);
          v106 = *(uint64_t **)(v78 + 504);
          v105 = *(_QWORD *)(v78 + 512);
          if ((unint64_t)v106 >= v105)
          {
            v108 = *(_QWORD *)(v78 + 496);
            v109 = ((uint64_t)v106 - v108) >> 3;
            if ((unint64_t)(v109 + 1) >> 61)
              std::vector<void const*>::__throw_length_error[abi:ne180100]();
            v110 = v105 - v108;
            v111 = v110 >> 2;
            if (v110 >> 2 <= (unint64_t)(v109 + 1))
              v111 = v109 + 1;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
              v112 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v112 = v111;
            if (v112)
              v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v112);
            else
              v113 = 0;
            v114 = (uint64_t *)(v112 + 8 * v109);
            *v114 = v103;
            v107 = v114 + 1;
            v116 = *(char **)(v78 + 496);
            v115 = *(char **)(v78 + 504);
            if (v115 != v116)
            {
              do
              {
                v117 = *((_QWORD *)v115 - 1);
                v115 -= 8;
                *--v114 = v117;
              }
              while (v115 != v116);
              v115 = *(char **)(v78 + 496);
            }
            *(_QWORD *)(v78 + 496) = v114;
            *(_QWORD *)(v78 + 504) = v107;
            *(_QWORD *)(v78 + 512) = v112 + 8 * v113;
            if (v115)
              operator delete(v115);
          }
          else
          {
            *v106 = v103;
            v107 = v106 + 1;
          }
          *(_QWORD *)(v78 + 504) = v107;
          ++*(_DWORD *)(v103 + 8);
          ++v102;
        }
        while (v102 < ((unint64_t)((char *)v75[63] - (char *)v75[62]) >> 3));
      }
      ++*(_DWORD *)(*(_QWORD *)(v78 + 192) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v78 + 176) + 8);
      ++*(_DWORD *)(*(_QWORD *)(v78 + 184) + 8);
      v119 = (uint64_t *)*((_QWORD *)this + 30);
      v118 = *((_QWORD *)this + 31);
      if ((unint64_t)v119 >= v118)
      {
        v126 = *((_QWORD *)this + 29);
        v127 = ((uint64_t)v119 - v126) >> 3;
        if ((unint64_t)(v127 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v128 = v118 - v126;
        v129 = v128 >> 2;
        if (v128 >> 2 <= (unint64_t)(v127 + 1))
          v129 = v127 + 1;
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v130 = v129;
        if (v130)
          v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v130);
        else
          v131 = 0;
        v147 = (uint64_t *)(v130 + 8 * v127);
        v148 = v130 + 8 * v131;
        *v147 = v78;
        v120 = v147 + 1;
        v150 = (char *)*((_QWORD *)this + 29);
        v149 = (char *)*((_QWORD *)this + 30);
        if (v149 != v150)
        {
          do
          {
            v151 = *((_QWORD *)v149 - 1);
            v149 -= 8;
            *--v147 = v151;
          }
          while (v149 != v150);
          v149 = (char *)*((_QWORD *)this + 29);
        }
        *((_QWORD *)this + 29) = v147;
        *((_QWORD *)this + 30) = v120;
        *((_QWORD *)this + 31) = v148;
        if (v149)
          operator delete(v149);
      }
      else
      {
        *v119 = v78;
        v120 = v119 + 1;
      }
      *((_QWORD *)this + 30) = v120;
      ++*(_DWORD *)(v78 + 8);
      LayerState::RegisterConnections((_QWORD *)v78);
      (*(void (**)(InstrumentState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4140, 1);
      v60 = (**(uint64_t (***)(uint64_t))v78)(v78);
LABEL_212:
      a3[16] = v60;
      return 1;
    case 4134:
      v61 = *a3;
      v62 = *((_QWORD *)this + 14);
      v64 = (uint64_t *)(v62 + 8);
      v63 = *(_QWORD *)(v62 + 8);
      if (!v63)
        goto LABEL_93;
      v65 = v62 + 8;
      do
      {
        v66 = *(_DWORD *)(v63 + 32);
        v67 = v66 >= v61;
        if (v66 >= v61)
          v68 = (uint64_t *)v63;
        else
          v68 = (uint64_t *)(v63 + 8);
        if (v67)
          v65 = v63;
        v63 = *v68;
      }
      while (*v68);
      if ((uint64_t *)v65 == v64 || *(_DWORD *)(v65 + 32) > v61)
      {
LABEL_93:
        v69 = (unsigned int **)*((_QWORD *)this + 29);
        v70 = (unsigned int **)*((_QWORD *)this + 30);
        while (v69 != v70)
        {
          v71 = *v69;
          if ((**(unsigned int (***)(unsigned int *))*v69)(*v69) == v61)
            goto LABEL_155;
          ++v69;
        }
        v71 = 0;
LABEL_155:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          v176 = "InstrumentState.cpp";
          v177 = 1024;
          v178 = 770;
          v179 = 1024;
          LODWORD(v180) = v61;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::RemoveLayer(ID = 0x%x)", buf, 0x18u);
        }
        if (!v71)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            v176 = "InstrumentState.cpp";
            v177 = 1024;
            v178 = 772;
            v179 = 2080;
            v180 = v183;
            v181 = 2080;
            v182 = "InstrumentState::RemoveLayer: No layer matching that element ID";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v163 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v163, "InstrumentState::RemoveLayer: No layer matching that element ID", -10851);
        }
        (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v71 + 64))(v71, 0);
        v121 = (LayerState *)*((_QWORD *)v71 + 15);
        if (v121)
        {
          LayerState::SetSelectionLayerIndex(v121, v71[29]);
          InstrumentState::UpdateLayers(this);
        }
        LayerState::UnregisterConnections(v71);
        (*(void (**)(InstrumentState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4140, 1);
        v122 = (_QWORD *)*((_QWORD *)this + 30);
        v123 = (_QWORD *)*((_QWORD *)this + 29);
        if (v123 != v122)
        {
          do
          {
            if ((unsigned int *)*v123 == v71)
              goto LABEL_164;
            ++v123;
          }
          while (v123 != v122);
          v123 = (_QWORD *)*((_QWORD *)this + 30);
        }
LABEL_164:
        if (v123 != v122)
        {
          v124 = v123 + 1;
          if (v123 + 1 != v122)
          {
            do
            {
              if ((unsigned int *)*v124 != v71)
                *v123++ = *v124;
              ++v124;
            }
            while (v124 != v122);
            v122 = (_QWORD *)*((_QWORD *)this + 30);
          }
        }
        if (v122 != v123)
          *((_QWORD *)this + 30) = v123;
        SamplerState::Unref(v71);
        return 1;
      }
      v132 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
      if (v132)
      {
        *(_DWORD *)buf = 136315650;
        v176 = "InstrumentManager.cpp";
        v177 = 1024;
        v178 = 388;
        v179 = 1024;
        LODWORD(v180) = v61;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::RemoveSampleWithID(ID = %u)", buf, 0x18u);
      }
      if (v61 > 0xFFFFFFEF)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentManager.cpp";
          v177 = 1024;
          v178 = 396;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentManager::RemoveSampleWithID: Cannot remove default sample";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v171 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v171, "InstrumentManager::RemoveSampleWithID: Cannot remove default sample", -10851);
      }
      v133 = *v64;
      if (!*v64)
        goto LABEL_277;
      v134 = v62 + 8;
      do
      {
        v135 = *(_DWORD *)(v133 + 32);
        v136 = v135 >= v61;
        if (v135 >= v61)
          v137 = (uint64_t *)v133;
        else
          v137 = (uint64_t *)(v133 + 8);
        if (v136)
          v134 = v133;
        v133 = *v137;
      }
      while (*v137);
      if ((uint64_t *)v134 == v64 || *(_DWORD *)(v134 + 32) > v61)
      {
LABEL_277:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentManager.cpp";
          v177 = 1024;
          v178 = 391;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentManager::RemoveSampleWithID: Invalid sample ID";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v166 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v166, "InstrumentManager::RemoveSampleWithID: Invalid sample ID", -10851);
      }
      Instance = (SampleManager *)SampleManager::GetInstance((SampleManager *)v132);
      SampleManager::ReleaseSample(Instance, *(_QWORD *)(v134 + 40));
      std::__tree<std::__value_type<unsigned int const,unsigned long>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned long>,InstrumentManager::ltid,true>,std::allocator<std::__value_type<unsigned int const,unsigned long>>>::__remove_node_pointer((uint64_t **)v62, (uint64_t *)v134);
      v29 = (void *)v134;
LABEL_198:
      operator delete(v29);
      goto LABEL_233;
    case 4135:
      (*(void (**)(InstrumentState *, BOOL))(*(_QWORD *)this + 8))(this, *a3 != 0);
      return 1;
    case 4136:
      InstrumentState::SetVelocityOffset(this, *a3);
      return 1;
    case 4141:
      CheckDataSize(a4, 0x48u);
      v11 = (uint64_t (***)(_QWORD))InstrumentState::AddLayer((char **)this, -1, a3[17] != 1);
      goto LABEL_80;
    case 4142:
      InstrumentState::SetMidiVoiceMode(this, *a3);
      return 1;
    case 4144:
      v30 = (SampleManager *)CheckDataSize(a4, 0x48u);
      v31 = *(char ***)a3;
      if (a3[17] != 2)
      {
        if (!v31)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
            *(_DWORD *)buf = 136315906;
            v176 = "InstrumentState.cpp";
            v177 = 1024;
            v178 = 674;
            v179 = 2080;
            v180 = v183;
            v181 = 2080;
            v182 = "InstrumentState::SetProperty: NULL sample URL";
            _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          v168 = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(v168, "InstrumentState::SetProperty: NULL sample URL", -10851);
        }
        v125 = InstrumentManager::AddSample(*((InstrumentManager **)this + 14), *(glob_t **)a3, *(unsigned __int8 *)(*((_QWORD *)this + 3) + 176), 0xFFFFFFFFLL, 0);
        goto LABEL_232;
      }
      if (!v31)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentState.cpp";
          v177 = 1024;
          v178 = 669;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentState::SetProperty: NULL raw sample data";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v167 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v167, "InstrumentState::SetProperty: NULL raw sample data", -10851);
      }
      v32 = 1315423911;
      v33 = *((_QWORD *)this + 14);
      v34 = *v31;
      v35 = (size_t)v31[1];
      v36 = (SampleManager *)SampleManager::GetInstance(v30);
      v37 = v35;
      if ((_DWORD)v35)
      {
        v38 = v34;
        do
        {
          v39 = *v38++;
          v32 ^= (v32 >> 2) + 32 * v32 + v39;
          --v37;
        }
        while (v37);
      }
      snprintf((char *)buf, 0x800uLL, "sample#0X%llX-%llu-%u", v34, v35, v32);
      v174 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)buf, 0x600u);
      v40 = CFHash(v174);
      v41 = SampleManager::SearchForSample(v36, v40);
      v42 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
      if (v41)
      {
        if (v42)
        {
          *(_DWORD *)v183 = 136315650;
          v184 = "SampleManager.cpp";
          v185 = 1024;
          v186 = 505;
          v187 = 2048;
          v188 = (uint8_t *)v40;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SampleManager::AddSample: Sample with ID %llu found already loaded", v183, 0x1Cu);
        }
        goto LABEL_218;
      }
      if (v42)
      {
        *(_DWORD *)v183 = 136315906;
        v184 = "SampleManager.cpp";
        v185 = 1024;
        v186 = 498;
        v187 = 2080;
        v188 = buf;
        v189 = 2048;
        v190 = v40;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SampleManager::AddSample: New sample: %s hashcode: %llu ", v183, 0x26u);
      }
      v139 = operator new();
      v140 = v139;
      *(_BYTE *)(v139 + 16) = 0;
      *(_DWORD *)(v139 + 20) = 1;
      *(_BYTE *)(v139 + 24) = 1;
      *(_QWORD *)(v139 + 32) = 0;
      *(_QWORD *)(v139 + 40) = 0;
      *(_BYTE *)(v139 + 48) = 1;
      *(_QWORD *)(v139 + 56) = 0;
      *(_BYTE *)(v139 + 64) = 1;
      *(_QWORD *)(v139 + 104) = 0;
      *(_OWORD *)(v139 + 72) = Sample::sDefaultSampleInfo;
      *(_OWORD *)(v139 + 88) = unk_210B04B40;
      *(_OWORD *)(v139 + 112) = 0u;
      *(_OWORD *)(v139 + 128) = 0u;
      *(_OWORD *)(v139 + 144) = 0u;
      *(_OWORD *)(v139 + 160) = 0u;
      *(_OWORD *)(v139 + 176) = 0u;
      *(_QWORD *)(v139 + 189) = 0;
      *(_QWORD *)v139 = &off_24CA8C1E0;
      *(_QWORD *)(v139 + 8) = 0;
      *(_BYTE *)(v139 + 197) = 0;
      *(_DWORD *)(v139 + 192) = 1;
      v141 = *((_OWORD *)v31 + 1);
      v142 = *((_OWORD *)v31 + 2);
      *(_QWORD *)(v139 + 176) = v31[6];
      *(_OWORD *)(v139 + 144) = v141;
      *(_OWORD *)(v139 + 160) = v142;
      v143 = v35 / *((unsigned int *)v31 + 10);
      *(_QWORD *)(v139 + 112) = 0;
      v144 = (v143 + 1);
      *(_QWORD *)(v139 + 128) = v144;
      v145 = *(_DWORD *)(v139 + 168);
      v172 = v143;
      v173 = v33;
      if (!v145)
        goto LABEL_215;
      if ((*(_BYTE *)(v139 + 156) & 0x20) != 0)
      {
        v146 = 1;
      }
      else
      {
        v146 = *(_DWORD *)(v139 + 172);
        if (!v146)
        {
          v145 = 0;
          goto LABEL_215;
        }
      }
      v145 /= v146;
LABEL_215:
      v152 = v144 * (unint64_t)(*(_DWORD *)(v139 + 172) * v145);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v183 = 136316162;
        v184 = "MemorySample.cpp";
        v185 = 1024;
        v186 = 47;
        v187 = 2048;
        v188 = (uint8_t *)v140;
        v189 = 2048;
        v190 = v144;
        v191 = 2048;
        v192 = v152;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d MemorySample::Load(this=%p):  Creating waveform cache for %llu frames, size %llu bytes", v183, 0x30u);
      }
      v153 = (char *)operator new[]();
      *(_QWORD *)(v140 + 136) = v153;
      *(_QWORD *)(v140 + 120) = *(_QWORD *)(v140 + 112) + *(_QWORD *)(v140 + 128) - 1;
      memcpy(v153, v34, v35);
      memcpy(&v153[v35], v34, *((unsigned int *)v31 + 10));
      v33 = v173;
      *(_QWORD *)(v140 + 184) = v172;
      *(_QWORD *)(v140 + 80) = 0;
      *(_DWORD *)(v140 + 72) = 8323136;
      *(_BYTE *)(v140 + 76) = 127;
      *(_DWORD *)(v140 + 88) = 71;
      *(_QWORD *)(v140 + 96) = 0;
      *(_QWORD *)(v140 + 104) = v172 - 1;
      *(_BYTE *)(v140 + 197) = 1;
      SampleManager::InsertSample((uint64_t **)v36, v40, (Sample *)v140);
LABEL_218:
      Smart<__CFString const*>::~Smart((const void **)&v174);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        v176 = "InstrumentManager.cpp";
        v177 = 1024;
        v178 = 318;
        v179 = 2048;
        v180 = (uint8_t *)v34;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::AddSample(addr = %p)", buf, 0x1Cu);
      }
      v154 = *(uint64_t **)v33;
      if (*(_QWORD *)v33 == v33 + 8)
      {
LABEL_228:
        v125 = InstrumentManager::RegisterSample((uint64_t **)v33, *(_DWORD *)(v33 + 16) | 0x10000000u, -1, v40);
        goto LABEL_232;
      }
      while (v40 != v154[5])
      {
        v155 = (uint64_t *)v154[1];
        if (v155)
        {
          do
          {
            v156 = v155;
            v155 = (uint64_t *)*v155;
          }
          while (v155);
        }
        else
        {
          do
          {
            v156 = (uint64_t *)v154[2];
            v157 = *v156 == (_QWORD)v154;
            v154 = v156;
          }
          while (!v157);
        }
        v154 = v156;
        if (v156 == (uint64_t *)(v33 + 8))
          goto LABEL_228;
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
      {
        v158 = *((_DWORD *)v154 + 8);
        *(_DWORD *)buf = 136315650;
        v176 = "InstrumentManager.cpp";
        v177 = 1024;
        v178 = 321;
        v179 = 1024;
        LODWORD(v180) = v158;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::AddSample: Sample already added as ID 0x%x - returning existing key", buf, 0x18u);
      }
      v125 = *((_DWORD *)v154 + 8);
LABEL_232:
      a3[16] = v125;
LABEL_233:
      (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4143, 0);
      return 1;
    case 4145:
      InstrumentState::SetPortamentoTime(this, *(float *)a3);
      return 1;
    case 4147:
      v43 = *((_QWORD *)this + 14);
      v46 = *(_QWORD *)(v43 + 8);
      v45 = (_QWORD *)(v43 + 8);
      v44 = v46;
      if (v46)
      {
        v47 = *a3;
        v48 = v45;
        do
        {
          v49 = *(_DWORD *)(v44 + 32);
          v50 = v49 >= v47;
          if (v49 >= v47)
            v51 = (uint64_t *)v44;
          else
            v51 = (uint64_t *)(v44 + 8);
          if (v50)
            v48 = (_QWORD *)v44;
          v44 = *v51;
        }
        while (*v51);
        if (v48 != v45 && *((_DWORD *)v48 + 8) <= v47)
        {
          v52 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
          if (v52)
          {
            *(_DWORD *)buf = 136315650;
            v176 = "InstrumentManager.cpp";
            v177 = 1024;
            v178 = 357;
            v179 = 1024;
            LODWORD(v180) = v47;
            _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReferenceSampleWithID(ID = %u)", buf, 0x18u);
          }
          if (v47 > 0xFFFFFFEF)
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              v176 = "InstrumentManager.cpp";
              v177 = 1024;
              v178 = 364;
              v179 = 2080;
              v180 = v183;
              v181 = 2080;
              v182 = "InstrumentManager::ReferenceSampleWithID: Cannot reference default sample";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v170 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v170, "InstrumentManager::ReferenceSampleWithID: Cannot reference default sample", -10851);
          }
          v53 = *v45;
          if (!*v45)
            goto LABEL_278;
          v54 = v45;
          do
          {
            v55 = *(_DWORD *)(v53 + 32);
            v56 = v55 >= v47;
            if (v55 >= v47)
              v57 = (uint64_t *)v53;
            else
              v57 = (uint64_t *)(v53 + 8);
            if (v56)
              v54 = (_QWORD *)v53;
            v53 = *v57;
          }
          while (*v57);
          if (v54 == v45 || *((_DWORD *)v54 + 8) > v47)
          {
LABEL_278:
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              v176 = "InstrumentManager.cpp";
              v177 = 1024;
              v178 = 360;
              v179 = 2080;
              v180 = v183;
              v181 = 2080;
              v182 = "InstrumentManager::ReferenceSampleWithID: Invalid sample ID";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            v165 = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(v165, "InstrumentManager::ReferenceSampleWithID: Invalid sample ID", -10851);
          }
          v58 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v52);
          SampleManager::AcquireSample(v58, v54[5]);
        }
      }
      return 1;
    case 4148:
      v12 = *((_QWORD *)this + 14);
      v14 = (uint64_t *)(v12 + 8);
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        return 1;
      v15 = *a3;
      v16 = v12 + 8;
      do
      {
        v17 = *(_DWORD *)(v13 + 32);
        v18 = v17 >= v15;
        if (v17 >= v15)
          v19 = (uint64_t *)v13;
        else
          v19 = (uint64_t *)(v13 + 8);
        if (v18)
          v16 = v13;
        v13 = *v19;
      }
      while (*v19);
      if ((uint64_t *)v16 == v14 || *(_DWORD *)(v16 + 32) > v15)
        return 1;
      v20 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
      if (v20)
      {
        *(_DWORD *)buf = 136315650;
        v176 = "InstrumentManager.cpp";
        v177 = 1024;
        v178 = 370;
        v179 = 1024;
        LODWORD(v180) = v15;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::UnreferenceSampleWithID(ID = %u)", buf, 0x18u);
      }
      if (v15 > 0xFFFFFFEF)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentManager.cpp";
          v177 = 1024;
          v178 = 382;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentManager::UnreferenceSampleWithID: Cannot unreference default sample";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v169 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v169, "InstrumentManager::UnreferenceSampleWithID: Cannot unreference default sample", -10851);
      }
      v21 = *v14;
      if (!*v14)
        goto LABEL_279;
      v22 = v12 + 8;
      do
      {
        v23 = *(_DWORD *)(v21 + 32);
        v24 = v23 >= v15;
        if (v23 >= v15)
          v25 = (uint64_t *)v21;
        else
          v25 = (uint64_t *)(v21 + 8);
        if (v24)
          v22 = v21;
        v21 = *v25;
      }
      while (*v25);
      if ((uint64_t *)v22 == v14 || *(_DWORD *)(v22 + 32) > v15)
      {
LABEL_279:
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v183, 0xFFFFD59D);
          *(_DWORD *)buf = 136315906;
          v176 = "InstrumentManager.cpp";
          v177 = 1024;
          v178 = 373;
          v179 = 2080;
          v180 = v183;
          v181 = 2080;
          v182 = "InstrumentManager::UnreferenceSampleWithID: Invalid sample ID";
          _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
        }
        v164 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v164, "InstrumentManager::UnreferenceSampleWithID: Invalid sample ID", -10851);
      }
      v26 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v20);
      SampleManager::ReleaseSample(v26, *(_QWORD *)(v22 + 40));
      v28 = (SampleManager *)SampleManager::GetInstance(v27);
      if (SampleManager::GetSample(v28, *(_QWORD *)(v22 + 40)))
        goto LABEL_233;
      std::__tree<std::__value_type<unsigned int const,unsigned long>,std::__map_value_compare<unsigned int const,std::__value_type<unsigned int const,unsigned long>,InstrumentManager::ltid,true>,std::allocator<std::__value_type<unsigned int const,unsigned long>>>::__remove_node_pointer((uint64_t **)v12, (uint64_t *)v22);
      v29 = (void *)v22;
      goto LABEL_198;
    default:
      if (a2 != 4231)
        return v6;
      CheckDataSize(a4, 0x48u);
      v8 = (char *)*((_QWORD *)this + 26);
      v7 = (char *)*((_QWORD *)this + 27);
      for (i = (unint64_t)(v7 - v8) >> 3; v8 != v7; v8 += 8)
      {
        v10 = *(unsigned int (****)(_QWORD))v8;
        if ((***(unsigned int (****)(_QWORD))v8)(*(_QWORD *)v8) >= i)
          LODWORD(i) = ((uint64_t (*)(_QWORD))**v10)(v10) + 1;
      }
      v11 = (uint64_t (***)(_QWORD))InstrumentState::AddLFO(this, i);
LABEL_80:
      v60 = (**v11)(v11);
      goto LABEL_212;
  }
}

void sub_210AE4B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_210AE4CC4()
{
  JUMPOUT(0x210AE4CBCLL);
}

unsigned int (***InstrumentState::FindState(InstrumentState *this, uint64_t a2, int a3))(_QWORD)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int (***v8)(_QWORD);
  _QWORD *v9;
  _QWORD *v10;

  if ((a3 & 0xEFFFFFFF) == 0)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 26);
    v10 = (_QWORD *)*((_QWORD *)this + 27);
    while (v9 != v10)
    {
      v8 = (unsigned int (***)(_QWORD))*v9;
      if ((**(unsigned int (***)(_QWORD))*v9)(*v9) == (_DWORD)a2)
        return v8;
      ++v9;
    }
  }
  v5 = *((_QWORD *)this + 29);
  if (((*((_QWORD *)this + 30) - v5) & 0x7FFFFFFF8) == 0)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v5 + 8 * v6) + 32))(*(_QWORD *)(v5 + 8 * v6), a2, 0);
    if (v7)
      break;
    ++v6;
    v5 = *((_QWORD *)this + 29);
    if (v6 >= ((unint64_t)(*((_QWORD *)this + 30) - v5) >> 3))
      return 0;
  }
  return (unsigned int (***)(_QWORD))v7;
}

uint64_t InstrumentState::Save(InstrumentState *this, CACFDictionary *a2)
{
  const __CFString *v4;
  float v5;
  float v6;
  float v7;
  unint64_t v8;
  const __CFArray *Mutable;
  uint64_t *v10;
  uint64_t *v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t *v19;
  uint64_t *v20;
  const CFDictionaryKeyCallBacks *v21;
  const CFDictionaryValueCallBacks *v22;
  uint64_t v23;
  __CFDictionary *v25;
  __int16 v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  InstrumentState *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "InstrumentState.cpp";
    v28 = 1024;
    v29 = 208;
    v30 = 2048;
    v31 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Save(this=%p)", buf, 0x1Cu);
  }
  v4 = (const __CFString *)(*(uint64_t (**)(InstrumentState *))(*(_QWORD *)this + 80))(this);
  CACFDictionary::AddString(a2, CFSTR("name"), v4);
  if (*((_DWORD *)this + 39) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("output"));
  if (*((_DWORD *)this + 36) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("voice count"));
  if (*((_DWORD *)this + 33))
    CACFDictionary::AddSInt32(a2, CFSTR("coarse tune"));
  v5 = *((float *)this + 34);
  if (v5 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("fine tune"), v5);
  v6 = *((float *)this + 32);
  if (v6 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("gain"), v6);
  v7 = *((float *)this + 35) * 200.0;
  if (v7 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("pan"), v7);
  if (*((_BYTE *)this + 148))
    CACFDictionary::AddSInt32(a2, CFSTR("key offset"));
  if (*((_BYTE *)this + 149))
    CACFDictionary::AddSInt32(a2, CFSTR("vel offset"));
  if (!*((_BYTE *)this + 150))
    CACFDictionary::AddBool(a2, CFSTR("self exclusive"));
  v8 = *((_QWORD *)this + 27) - *((_QWORD *)this + 26);
  if ((v8 & 0x7FFFFFFF8) != 0)
  {
    Mutable = CFArrayCreateMutable(0, (v8 >> 3), MEMORY[0x24BDBD690]);
    *(_QWORD *)buf = Mutable;
    *(_WORD *)&buf[8] = 256;
    v10 = (uint64_t *)*((_QWORD *)this + 26);
    v11 = (uint64_t *)*((_QWORD *)this + 27);
    if (v10 == v11)
    {
      v15 = 0;
    }
    else
    {
      v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
      v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
      do
      {
        v14 = *v10;
        v25 = CFDictionaryCreateMutable(0, 0, v12, v13);
        v26 = 256;
        v15 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v14 + 40))(v14, &v25);
        CACFArray::AppendDictionary((CACFArray *)buf, v25);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v25);
        ++v10;
      }
      while (v10 != v11);
      Mutable = *(const __CFArray **)buf;
    }
    CACFDictionary::AddArray(a2, CFSTR("LFOs"), Mutable);
    CACFArray::~CACFArray((CACFArray *)buf);
  }
  else
  {
    v15 = 0;
  }
  v17 = *((_QWORD *)this + 29);
  v16 = (char *)this + 232;
  v18 = CFArrayCreateMutable(0, ((unint64_t)(*((_QWORD *)v16 + 1) - v17) >> 3), MEMORY[0x24BDBD690]);
  *(_QWORD *)buf = v18;
  *(_WORD *)&buf[8] = 256;
  v19 = *(uint64_t **)v16;
  v20 = (uint64_t *)*((_QWORD *)v16 + 1);
  if (*(uint64_t **)v16 != v20)
  {
    v21 = (const CFDictionaryKeyCallBacks *)MEMORY[0x24BDBD6A0];
    v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x24BDBD6B0];
    do
    {
      v23 = *v19;
      v25 = CFDictionaryCreateMutable(0, 0, v21, v22);
      v26 = 256;
      v15 = (*(uint64_t (**)(uint64_t, __CFDictionary **))(*(_QWORD *)v23 + 40))(v23, &v25);
      CACFArray::AppendDictionary((CACFArray *)buf, v25);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v25);
      ++v19;
    }
    while (v19 != v20);
    v18 = *(const __CFArray **)buf;
  }
  CACFDictionary::AddArray(a2, CFSTR("Layers"), v18);
  CACFArray::~CACFArray((CACFArray *)buf);
  return v15;
}

void sub_210AE5128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t InstrumentState::Restore(InstrumentState *this, const CACFDictionary *a2)
{
  const __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _DWORD **v21;
  _DWORD **v22;
  unsigned int Count;
  uint64_t v24;
  LayerState *v25;
  unint64_t v26;
  LayerState **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  LayerState **v35;
  char *v36;
  char *v37;
  LayerState *v38;
  const void **v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  uint64_t v56;
  int v57;
  CAXException *exception;
  _QWORD *v60;
  uint64_t v61;
  __int16 v62;
  CFArrayRef theArray;
  __int16 v64;
  __CFString *v65;
  uint8_t v66[16];
  _BYTE buf[12];
  __int16 v68;
  int v69;
  __int16 v70;
  uint8_t *v71;
  __int16 v72;
  const char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a2)
    return 4294956445;
  (*(void (**)(InstrumentState *, _QWORD))(*(_QWORD *)this + 64))(this, 0);
  if (CACFDictionary::GetString(a2, CFSTR("name"), (const __CFString **)&v65))
    (*(void (**)(InstrumentState *, __CFString *, uint64_t))(*(_QWORD *)this + 72))(this, v65, 1);
  if (CACFDictionary::GetUInt32(a2, CFSTR("output"), (unsigned int *)&v65))
    InstrumentState::SetOutputScope(this, v65);
  if (CACFDictionary::GetUInt32(a2, CFSTR("voice count"), (unsigned int *)&v65))
    InstrumentState::SetVoiceCount(this, v65);
  if (CACFDictionary::GetSInt32(a2, CFSTR("coarse tune"), (int *)&v65))
    InstrumentState::SetCoarseTuning(this, (int)v65);
  if (CACFDictionary::GetFloat32(a2, CFSTR("fine tune"), (float *)&v65))
    InstrumentState::SetFineTuning((float *)this, *(float *)&v65);
  if (CACFDictionary::GetFloat32(a2, CFSTR("pan"), (float *)&v65))
    InstrumentState::SetPan((float *)this, *(float *)&v65 * 0.005);
  if (CACFDictionary::GetFloat32(a2, CFSTR("gain"), (float *)&v65))
    InstrumentState::SetGain((float *)this, *(float *)&v65);
  if (CACFDictionary::GetSInt32(a2, CFSTR("key offset"), (int *)&v65))
    InstrumentState::SetKeyOffset(this, (int)v65);
  if (CACFDictionary::GetSInt32(a2, CFSTR("vel offset"), (int *)&v65))
    InstrumentState::SetVelocityOffset(this, (int)v65);
  if (CACFDictionary::GetBool(a2, CFSTR("self exclusive"), (BOOL *)&v65)
    && *((unsigned __int8 *)this + 150) != v65)
  {
    *((_BYTE *)this + 150) = (_BYTE)v65;
    (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4130, 0);
  }
  theArray = 0;
  v64 = 0;
  CACFDictionary::GetCACFArray(a2, CFSTR("LFOs"), (CACFArray *)&theArray);
  v4 = theArray;
  if (theArray)
  {
    v5 = 0;
    v6 = 0;
LABEL_42:
    LODWORD(v4) = CFArrayGetCount(v4);
    while (v6 < v4)
    {
      *(_QWORD *)buf = 0;
      *(_WORD *)&buf[8] = 0;
      CACFArray::GetCACFDictionary((CACFArray *)&theArray, v6, (CACFDictionary *)buf);
      v7 = operator new();
      SamplerState::SamplerState((SamplerState *)v7, 7, 0, this, 0x20u);
      *(_QWORD *)v7 = &off_24CA937A0;
      *(_QWORD *)(v7 + 88) = 0x1B10000000;
      *(_QWORD *)(v7 + 96) = 0x40A000003C23D70ALL;
      v9 = (uint64_t *)*((_QWORD *)this + 27);
      v8 = *((_QWORD *)this + 28);
      if ((unint64_t)v9 >= v8)
      {
        v11 = *((_QWORD *)this + 26);
        v12 = ((uint64_t)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v13 = v8 - v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v15);
        else
          v16 = 0;
        v17 = (uint64_t *)(v15 + 8 * v12);
        *v17 = v7;
        v10 = v17 + 1;
        v19 = (char *)*((_QWORD *)this + 26);
        v18 = (char *)*((_QWORD *)this + 27);
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (char *)*((_QWORD *)this + 26);
        }
        *((_QWORD *)this + 26) = v17;
        *((_QWORD *)this + 27) = v10;
        *((_QWORD *)this + 28) = v15 + 8 * v16;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      *((_QWORD *)this + 27) = v10;
      ++*(_DWORD *)(v7 + 8);
      v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 48))(v7, buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      v6 = (v6 + 1);
      v4 = theArray;
      if (theArray)
        goto LABEL_42;
    }
  }
  else
  {
    v5 = 0;
  }
  CACFDictionary::GetCACFArray(a2, CFSTR("Layers"), (CACFArray *)&theArray);
  if (theArray && CFArrayGetCount(theArray))
  {
    v21 = (_DWORD **)*((_QWORD *)this + 29);
    v22 = (_DWORD **)*((_QWORD *)this + 30);
    if (v21 != v22)
    {
      do
      {
        if (*v21)
          SamplerState::Unref(*v21);
        ++v21;
      }
      while (v21 != v22);
      v21 = (_DWORD **)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v21;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count)
      {
        if (!(_DWORD)v5)
        {
          v24 = 0;
          do
          {
            v25 = (LayerState *)operator new();
            LayerState::LayerState(v25, v24, this, 0);
            v27 = (LayerState **)*((_QWORD *)this + 30);
            v26 = *((_QWORD *)this + 31);
            if ((unint64_t)v27 >= v26)
            {
              v29 = *((_QWORD *)this + 29);
              v30 = ((uint64_t)v27 - v29) >> 3;
              if ((unint64_t)(v30 + 1) >> 61)
                std::vector<void const*>::__throw_length_error[abi:ne180100]();
              v31 = v26 - v29;
              v32 = v31 >> 2;
              if (v31 >> 2 <= (unint64_t)(v30 + 1))
                v32 = v30 + 1;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                v33 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v33 = v32;
              if (v33)
                v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v33);
              else
                v34 = 0;
              v35 = (LayerState **)(v33 + 8 * v30);
              *v35 = v25;
              v28 = v35 + 1;
              v37 = (char *)*((_QWORD *)this + 29);
              v36 = (char *)*((_QWORD *)this + 30);
              if (v36 != v37)
              {
                do
                {
                  v38 = (LayerState *)*((_QWORD *)v36 - 1);
                  v36 -= 8;
                  *--v35 = v38;
                }
                while (v36 != v37);
                v36 = (char *)*((_QWORD *)this + 29);
              }
              *((_QWORD *)this + 29) = v35;
              *((_QWORD *)this + 30) = v28;
              *((_QWORD *)this + 31) = v33 + 8 * v34;
              if (v36)
                operator delete(v36);
            }
            else
            {
              *v27 = v25;
              v28 = v27 + 1;
            }
            *((_QWORD *)this + 30) = v28;
            ++*((_DWORD *)v25 + 2);
            *(_QWORD *)buf = 0;
            *(_WORD *)&buf[8] = 0;
            CACFArray::GetCACFDictionary((CACFArray *)&theArray, v24, (CACFDictionary *)buf);
            v5 = (*(uint64_t (**)(LayerState *, _BYTE *))(*(_QWORD *)v25 + 48))(v25, buf);
            CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
            v24 = (v24 + 1);
          }
          while (v24 < Count && !(_DWORD)v5);
        }
      }
    }
  }
  v61 = 0;
  v62 = 0;
  CACFDictionary::GetCACFDictionary(a2, CFSTR("Banks"), (CACFDictionary *)&v61);
  if (v61 && CACFDictionary::Size((CACFDictionary *)&v61))
  {
    v39 = (const void **)operator new[]();
    CACFDictionary::GetKeys((CACFDictionary *)&v61, v39);
    InstrumentState::SetCurrentBankName(this, *v39);
    MEMORY[0x212BCDF2C](v39, 0x60C8044C4A2DFLL);
  }
  v41 = (_QWORD *)*((_QWORD *)this + 29);
  v40 = (_QWORD *)*((_QWORD *)this + 30);
  if (v41 != v40)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v60 = (_QWORD *)*((_QWORD *)this + 30);
    do
    {
      v46 = (**(uint64_t (***)(_QWORD))*v41)(*v41);
      v47 = v46;
      if ((unint64_t)v43 >= v44)
      {
        v48 = (v43 - v42) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v44 - (_QWORD)v42) >> 1 > v49)
          v49 = (uint64_t)(v44 - (_QWORD)v42) >> 1;
        if (v44 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v50);
        else
          v51 = 0;
        v52 = (char *)(v50 + 4 * v48);
        *(_DWORD *)v52 = v47;
        v53 = v52 + 4;
        while (v43 != v42)
        {
          v54 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v52 - 1) = v54;
          v52 -= 4;
        }
        v44 = v50 + 4 * v51;
        if (v42)
          operator delete(v42);
        v42 = v52;
        v43 = v53;
        v40 = v60;
      }
      else
      {
        *(_DWORD *)v43 = v46;
        v43 += 4;
      }
      if (v45)
      {
        v55 = v42;
        v56 = v45;
        do
        {
          v57 = *(_DWORD *)v55;
          v55 += 4;
          if (v57 == *(_DWORD *)&v42[4 * v45])
          {
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v66, 0xFFFFD59D);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "InstrumentState.cpp";
              v68 = 1024;
              v69 = 339;
              v70 = 2080;
              v71 = v66;
              v72 = 2080;
              v73 = "Duplicate layer IDs in document";
              _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "Duplicate layer IDs in document", -10851);
          }
          --v56;
        }
        while (v56);
      }
      ++v45;
      ++v41;
    }
    while (v41 != v40);
    if (v42)
      operator delete(v42);
  }
  (*(void (**)(InstrumentState *, uint64_t))(*(_QWORD *)this + 64))(this, 1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v61);
  CACFArray::~CACFArray((CACFArray *)&theArray);
  return v5;
}

void sub_210AE5940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

_DWORD *InstrumentState::Disconnect(_DWORD *this)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  int64_t i;
  _DWORD **v6;
  _DWORD **v7;

  v1 = this;
  v3 = (char *)*((_QWORD *)this + 26);
  v2 = (char *)*((_QWORD *)this + 27);
  v4 = *((_QWORD *)this + 30) - *((_QWORD *)this + 29);
  for (i = v2 - v3; v3 != v2; v3 += 8)
  {
    this = *(_DWORD **)v3;
    if (*(_QWORD *)v3)
      this = SamplerState::Unref(this);
  }
  if (((v4 | i) & 0x7FFFFFFF8) != 0)
  {
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      v7 = (_DWORD **)v1[29];
      v6 = (_DWORD **)v1[30];
      while (v7 != v6)
      {
        this = *v7;
        if (*v7)
          this = SamplerState::Unref(this);
        ++v7;
      }
    }
  }
  else if (v1)
  {
    return (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v1 + 104))(v1);
  }
  return this;
}

void InstrumentState::~InstrumentState(InstrumentManager **this)
{
  InstrumentState::~InstrumentState(this);
  JUMPOUT(0x212BCDF50);
}

{
  InstrumentManager *v2;
  InstrumentManager *v3;
  InstrumentManager *v4;
  InstrumentManager *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  InstrumentManager **v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *this = (InstrumentManager *)&off_24CA8E890;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v6 = 136315650;
    v7 = "InstrumentState.cpp";
    v8 = 1024;
    v9 = 95;
    v10 = 2048;
    v11 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::~InstrumentState(%p)", (uint8_t *)&v6, 0x1Cu);
  }
  InstrumentState::Cleanup((InstrumentState *)this);
  v2 = this[14];
  if (v2)
  {
    InstrumentManager::ReleaseSamples(this[14]);
    std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,std::tuple<double,double>>>>::destroy(*((_QWORD **)v2 + 1));
    MEMORY[0x212BCDF50](v2, 0x1020C4062D53EE8);
  }
  v3 = this[29];
  if (v3)
  {
    this[30] = v3;
    operator delete(v3);
  }
  v4 = this[26];
  if (v4)
  {
    this[27] = v4;
    operator delete(v4);
  }
  v5 = this[11];
  if (v5)
  {
    this[12] = v5;
    operator delete(v5);
  }
  SamplerState::~SamplerState((SamplerState *)this);
}

_QWORD *InstrumentState::Notify(uint64_t **this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  v6 = (a2 - 4122);
  if (v6 > 0x22)
  {
LABEL_9:
    if ((_DWORD)a2)
      return SamplerState::Notify((SamplerState *)this, a2, a3);
    goto LABEL_3;
  }
  if (((1 << (a2 - 26)) & 0x4423F) == 0)
  {
    if (v6 == 20)
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*this[3] + 112))(this[3], 4142, 0);
      return SamplerState::Notify((SamplerState *)this, a2, a3);
    }
    if (v6 == 34)
    {
      InstrumentState::UpdateLayers((InstrumentState *)this);
      return SamplerState::Notify((SamplerState *)this, a2, a3);
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = this[29];
  v8 = this[30];
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 112))(v9, a2, 0);
  }
  return SamplerState::Notify((SamplerState *)this, a2, a3);
}

void sub_210AE5CF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void InstrumentState::Cleanup(InstrumentState *this)
{
  uint64_t v2;
  _DWORD **v3;
  _DWORD **v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v9;
  CFURLRef ***v10;
  _QWORD *v11;
  int v12;
  CFURLRef *BankEntry;
  CFURLRef *v14;
  CFURLRef *v15;
  CFURLRef v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  NSObject *v43;
  const char *v44;
  uint32_t v45;
  const __CFString *v46;
  _BOOL8 v47;
  DLSBankManager *Instance;
  const void *v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE v55[10];
  int v56;
  __int16 v57;
  const char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v51 = "InstrumentState.cpp";
    v52 = 1024;
    v53 = 248;
    v54 = 2048;
    *(_QWORD *)v55 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Cleanup(%p)", buf, 0x1Cu);
  }
  v2 = *((_QWORD *)this + 24);
  if (v2)
    MEMORY[0x212BCDF50](v2, 0x1000C40451B5BE8);
  *((_QWORD *)this + 24) = 0;
  v3 = (_DWORD **)*((_QWORD *)this + 29);
  v4 = (_DWORD **)*((_QWORD *)this + 30);
  if (v3 != v4)
  {
    do
    {
      if (*v3)
        SamplerState::Unref(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_DWORD **)*((_QWORD *)this + 29);
  }
  *((_QWORD *)this + 30) = v3;
  v5 = (const __CFString *)*((_QWORD *)this + 22);
  if (v5)
  {
    v7 = *((unsigned int *)this + 42);
    v6 = *((unsigned int *)this + 43);
    if ((_DWORD)v6 == -1 || (_DWORD)v7 == -1)
    {
LABEL_58:
      v46 = (const __CFString *)*((_QWORD *)this + 22);
      v47 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
      if (v47)
      {
        *(_DWORD *)buf = 136315650;
        v51 = "InstrumentManager.cpp";
        v52 = 1024;
        v53 = 255;
        v54 = 2112;
        *(_QWORD *)v55 = v46;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReleaseBank: releasing DLS bank %@", buf, 0x1Cu);
      }
      Instance = (DLSBankManager *)DLSBankManager::GetInstance((DLSBankManager *)v47);
      DLSBankManager::ReleaseBank(Instance, v46);
      v49 = (const void *)*((_QWORD *)this + 22);
      if (v49)
        CFRelease(v49);
      *((_QWORD *)this + 22) = 0;
      goto LABEL_63;
    }
    v9 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if (v9)
    {
      *(_DWORD *)buf = 136315906;
      v51 = "InstrumentManager.cpp";
      v52 = 1024;
      v53 = 248;
      v54 = 1024;
      *(_DWORD *)v55 = v6;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v7;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::ReleaseBankInstrument: releasing DLS instrument bank %u, patch %u", buf, 0x1Eu);
    }
    v10 = (CFURLRef ***)DLSBankManager::GetInstance((DLSBankManager *)v9);
    v11 = v10 + 3;
    v12 = ((uint64_t (*)(CFURLRef ***))v10[3][2])(v10 + 3);
    BankEntry = DLSBankManager::FindBankEntry(v10, v5);
    v14 = BankEntry;
    if (BankEntry)
    {
      v15 = (CFURLRef *)std::__tree<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,std::__map_value_compare<std::pair<unsigned int const,unsigned int> const,std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>,BankEntry::ltid,true>,std::allocator<std::__value_type<std::pair<unsigned int const,unsigned int> const,DlsInstrument *>>>::find<std::pair<unsigned int const,unsigned int>>((uint64_t)(BankEntry + 3), v7 | (v6 << 32));
      if (v14 + 4 != v15)
      {
        v16 = v15[5];
        if (v16)
        {
          v17 = *((_QWORD *)v16 + 9) - *((_QWORD *)v16 + 8);
          if ((int)(v17 >> 3) >= 1)
          {
            v18 = 0;
            v19 = (v17 >> 3);
            while (1)
            {
              v20 = *((_QWORD *)v16 + 8);
              if (v18 >= (int)((unint64_t)(*((_QWORD *)v16 + 9) - v20) >> 3))
                v21 = 0;
              else
                v21 = *(_QWORD *)(v20 + 8 * v18);
              v22 = *(_QWORD *)(v21 + 472);
              if (v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 112))(v22);
                v23 = (_QWORD *)(v21 + 504);
                v24 = *(void **)(v21 + 504);
                if (v24)
                  free(v24);
LABEL_48:
                *v23 = 0;
                goto LABEL_49;
              }
              v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 56) + 56) + 96);
              v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 56) + 56) + 104);
              v27 = v26 - v25;
              if (v26 != v25)
              {
                v28 = 0;
                v29 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
                v30 = 1;
                while (*(_DWORD *)(v25 + 24 * v28 + 16) != *(_DWORD *)(v21 + 160))
                {
                  v28 = v30;
                  if (v29 <= v30++)
                    goto LABEL_43;
                }
                v32 = v25 + 24 * v28;
                v33 = *(_DWORD *)(v32 + 20);
                v34 = v33 - 1;
                *(_DWORD *)(v32 + 20) = v33 - 1;
                if (v33 <= 0)
                {
                  if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
                    goto LABEL_43;
                  *(_DWORD *)buf = 136316162;
                  v51 = "DlsPoolTable.h";
                  v52 = 1024;
                  v53 = 62;
                  v54 = 2080;
                  *(_QWORD *)v55 = "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices/Source/CAServices/DLS/DlsPoolTable.h";
                  *(_WORD *)&v55[8] = 1024;
                  v56 = 62;
                  v57 = 2080;
                  v58 = "mRefCount >= 0";
                  _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ASSERTION FAILED: %s, line %d: %s", buf, 0x2Cu);
                  if (*(_DWORD *)(v32 + 20))
                    goto LABEL_43;
                }
                else if (v34)
                {
                  goto LABEL_43;
                }
                v35 = *(unsigned int **)v32;
                if (*(_QWORD *)v32)
                {
                  v36 = v35 + 2;
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 16))(v35);
                  *(_QWORD *)v32 = 0;
                }
              }
LABEL_43:
              v39 = *(unsigned int **)(v21 + 464);
              if (v39)
              {
                v23 = (_QWORD *)(v21 + 464);
                v40 = v39 + 2;
                do
                {
                  v41 = __ldaxr(v40);
                  v42 = v41 - 1;
                }
                while (__stlxr(v42, v40));
                if (!v42)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 16))(v39);
                goto LABEL_48;
              }
LABEL_49:
              if (++v18 == v19)
                goto LABEL_56;
            }
          }
          goto LABEL_56;
        }
      }
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
LABEL_56:
        if (v12)
          (*(void (**)(_QWORD *))(*v11 + 24))(v11);
        goto LABEL_58;
      }
      *(_DWORD *)buf = 136315906;
      v51 = "DLSBankManager.cpp";
      v52 = 1024;
      v53 = 78;
      v54 = 1024;
      *(_DWORD *)v55 = v7;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v6;
      v43 = MEMORY[0x24BDACB70];
      v44 = "%25s:%-5d BankEntry::ReleaseInstrument: patch %u bank %u not loaded";
      v45 = 30;
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      *(_DWORD *)buf = 136315650;
      v51 = "DLSBankManager.cpp";
      v52 = 1024;
      v53 = 210;
      v54 = 2112;
      *(_QWORD *)v55 = v5;
      v43 = MEMORY[0x24BDACB70];
      v44 = "%25s:%-5d DLSBankManager::ReleaseBankInstrument: Bank '%@' not loaded";
      v45 = 28;
    }
    _os_log_impl(&dword_210A23000, v43, OS_LOG_TYPE_DEFAULT, v44, buf, v45);
    goto LABEL_56;
  }
LABEL_63:
  *((_QWORD *)this + 21) = -1;
  InstrumentManager::ReleaseSamples(*((InstrumentManager **)this + 14));
}

void sub_210AE62A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_DWORD *InstrumentState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v4 = a2;
  if (this[39] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 0, 0x10u, (uint64_t)"Invalid output scope");
      v3 = v4;
    }
    v2[39] = v3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4122, 0);
  }
  return this;
}

_DWORD *InstrumentState::SetVoiceCount(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[36] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 1u, 0x40u, (uint64_t)"InstrumentState::SetVoiceCount: Invalid count");
      v3 = v4;
    }
    v2[36] = v3;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v6 = "InstrumentState.cpp";
      v7 = 1024;
      v8 = 890;
      v9 = 1024;
      v10 = v3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::SetVoiceCount: count %u", buf, 0x18u);
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4131, 0);
  }
  return this;
}

_DWORD *InstrumentState::SetCoarseTuning(_DWORD *this, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = a2;
  if (this[33] != a2)
  {
    v2 = this;
    CHECK_RANGE<int>(&v3, -24, 24, (uint64_t)"InstrumentState::SetCoarseTuning: Invalid coarse tuning");
    v2[33] = v3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4123, 0);
  }
  return this;
}

float *InstrumentState::SetFineTuning(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[34] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"InstrumentState::SetFineTuning: Invalid fine tuning", -99.0, 99.0);
    v2[34] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4124, 0);
  }
  return this;
}

float *InstrumentState::SetPan(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[35] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[35] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4126, 0);
  }
  return this;
}

float *InstrumentState::SetGain(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[32] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"InstrumentState::SetGain: Invalid volume", -96.0, 12.0);
    v2[32] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4125, 0);
  }
  return this;
}

void InstrumentState::SetKeyOffset(InstrumentState *this, int a2)
{
  int v3;

  v3 = a2;
  CHECK_RANGE<int>(&v3, -64, 64, (uint64_t)"InstrumentState::SetKeyOffset: Invalid key offset");
  if (v3 != *((char *)this + 148))
  {
    *((_BYTE *)this + 148) = v3;
    (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4127, 0);
  }
}

void InstrumentState::SetVelocityOffset(InstrumentState *this, int a2)
{
  int v3;

  v3 = a2;
  CHECK_RANGE<int>(&v3, -127, 127, (uint64_t)"InstrumentState::SetVelocityOffset: Invalid velocity offset");
  if (v3 != *((char *)this + 149))
  {
    *((_BYTE *)this + 149) = v3;
    (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4136, 0);
  }
}

void InstrumentState::SetCurrentBankName(InstrumentState *this, CFTypeRef cf)
{
  const void *v4;

  if (cf)
    CFRetain(cf);
  v4 = (const void *)*((_QWORD *)this + 22);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 22) = cf;
}

_DWORD *InstrumentState::SetMidiVoiceMode(_DWORD *this, int a2)
{
  CAXException *exception;
  _BYTE v3[16];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  _BYTE *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((a2 - 78) <= 0xFFFFFFFB)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v3, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v5 = "InstrumentState.cpp";
      v6 = 1024;
      v7 = 876;
      v8 = 2080;
      v9 = v3;
      v10 = 2080;
      v11 = "InstrumentState::SetMidiVoiceMode: Invalid Mode";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "InstrumentState::SetMidiVoiceMode: Invalid Mode", -10851);
  }
  if (this[31] != a2)
  {
    this[31] = a2;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4142, 0);
  }
  return this;
}

void sub_210AE68F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void InstrumentState::SetPortamentoTime(InstrumentState *this, float a2)
{
  float v3;

  v3 = a2;
  CHECK_RANGE<float>(&v3, (uint64_t)"InstrumentState::SetPortamentoTime: Invalid time", 0.0, 5.0);
  if (*((float *)this + 38) != v3)
  {
    *((float *)this + 38) = v3;
    (*(void (**)(InstrumentState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4145, 0);
  }
}

LayerState *InstrumentState::AddLayer(char **this, int a2, int a3)
{
  int NextAvailable;
  char *v7;
  char *v8;
  LayerState *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a2 == -1)
    NextAvailable = GetNextAvailableIndex<LayerState>(this[29], this[30]);
  else
    NextAvailable = 0;
  v7 = this[29];
  v8 = this[30];
  while (v7 != v8)
  {
    if ((***(unsigned int (****)(_QWORD))v7)(*(_QWORD *)v7) == a2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v25 = 136315394;
        v26 = "InstrumentState.cpp";
        v27 = 1024;
        v28 = 744;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED: InstrumentState::AddLayer attempted to add same ID twice!", (uint8_t *)&v25, 0x12u);
      }
      __break(1u);
    }
    v7 += 8;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v25 = 136315650;
    v26 = "InstrumentState.cpp";
    v27 = 1024;
    v28 = 745;
    v29 = 1024;
    v30 = NextAvailable;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::AddLayer: adding ID 0x%x", (uint8_t *)&v25, 0x18u);
  }
  v9 = (LayerState *)operator new();
  LayerState::LayerState(v9, NextAvailable, (SamplerState *)this, a3);
  v11 = this[30];
  v10 = this[31];
  if (v11 >= v10)
  {
    v13 = this[29];
    v14 = (v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v17);
    else
      v18 = 0;
    v19 = (char *)(v17 + 8 * v14);
    v20 = (char *)(v17 + 8 * v18);
    *(_QWORD *)v19 = v9;
    v12 = v19 + 8;
    v22 = this[29];
    v21 = this[30];
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = this[29];
    }
    this[29] = v19;
    this[30] = v12;
    this[31] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_QWORD *)v11 = v9;
    v12 = v11 + 8;
  }
  this[30] = v12;
  ++*((_DWORD *)v9 + 2);
  LayerState::RegisterConnections(v9);
  (*((void (**)(char **, uint64_t, uint64_t))*this + 14))(this, 4140, 1);
  return v9;
}

void sub_210AE6C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40FFC326B0);
  _Unwind_Resume(a1);
}

uint64_t InstrumentState::AddLFO(InstrumentState *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v20 = 136315650;
    v21 = "InstrumentState.cpp";
    v22 = 1024;
    v23 = 795;
    v24 = 1024;
    v25 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::AddLFO: adding ID 0x%x", (uint8_t *)&v20, 0x18u);
  }
  v4 = operator new();
  SamplerState::SamplerState((SamplerState *)v4, 7, a2, this, 0x20u);
  *(_QWORD *)v4 = &off_24CA937A0;
  *(_QWORD *)(v4 + 88) = 0x1B10000000;
  *(_QWORD *)(v4 + 96) = 0x40A000003C23D70ALL;
  v6 = (uint64_t *)*((_QWORD *)this + 27);
  v5 = *((_QWORD *)this + 28);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 26);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 26);
    v16 = (char *)*((_QWORD *)this + 27);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 26) = v14;
    *((_QWORD *)this + 27) = v7;
    *((_QWORD *)this + 28) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 27) = v7;
  ++*(_DWORD *)(v4 + 8);
  (*(void (**)(InstrumentState *, uint64_t, uint64_t))(*(_QWORD *)this + 112))(this, 4230, 1);
  return v4;
}

void sub_210AE6E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C402E53C1ECLL);
  _Unwind_Resume(a1);
}

unint64_t GetNextAvailableIndex<LayerState>(char *a1, char *a2)
{
  unint64_t v2;
  char *v4;
  unsigned int (***v5)(_QWORD);

  v2 = (unint64_t)(a2 - a1) >> 3;
  if (a2 != a1)
  {
    v4 = a1;
    do
    {
      v5 = *(unsigned int (****)(_QWORD))v4;
      if ((***(unsigned int (****)(_QWORD))v4)(*(_QWORD *)v4) >= v2)
        v2 = (**v5)(v5) + 1;
      v4 += 8;
    }
    while (v4 != a2);
  }
  return v2;
}

void InstrumentState::Initialize(InstrumentManager **this)
{
  LayerState *v2;
  InstrumentManager *v3;
  InstrumentManager *v4;
  InstrumentManager *v5;
  InstrumentManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  InstrumentManager *v12;
  InstrumentManager *v13;
  InstrumentManager *v14;
  InstrumentManager *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  InstrumentManager **v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v17 = 136315650;
    v18 = "InstrumentState.cpp";
    v19 = 1024;
    v20 = 102;
    v21 = 2048;
    v22 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::Initialize(%p)", (uint8_t *)&v17, 0x1Cu);
  }
  InstrumentManager::AddDefaultSamples(this[14]);
  (*((void (**)(InstrumentManager **, uint64_t, _QWORD))*this + 14))(this, 4143, 0);
  v2 = (LayerState *)operator new();
  LayerState::LayerState(v2, 0, (SamplerState *)this, 1);
  v4 = this[30];
  v3 = this[31];
  if (v4 >= v3)
  {
    v6 = this[29];
    v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v10);
    else
      v11 = 0;
    v12 = (InstrumentManager *)(v10 + 8 * v7);
    v13 = (InstrumentManager *)(v10 + 8 * v11);
    *(_QWORD *)v12 = v2;
    v5 = (InstrumentManager *)((char *)v12 + 8);
    v15 = this[29];
    v14 = this[30];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 = (InstrumentManager *)((char *)v14 - 8);
        *((_QWORD *)v12 - 1) = v16;
        v12 = (InstrumentManager *)((char *)v12 - 8);
      }
      while (v14 != v15);
      v14 = this[29];
    }
    this[29] = v12;
    this[30] = v5;
    this[31] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v4 = v2;
    v5 = (InstrumentManager *)((char *)v4 + 8);
  }
  this[30] = v5;
  ++*((_DWORD *)v2 + 2);
}

void sub_210AE708C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40FFC326B0);
  _Unwind_Resume(a1);
}

void InstrumentState::InstrumentState(InstrumentState *this, int a2, SamplerState *a3, InstrumentManager *a4)
{
  uint64_t (**v6)(SamplerState *__hidden);
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  InstrumentState *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  SamplerState::SamplerState(this, 4, a2, a3, 1u);
  v6 = &off_24CA8E890;
  *(_QWORD *)v7 = &off_24CA8E890;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = a4;
  *(_QWORD *)(v7 + 120) = 0x4A00000000;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 136) = 0;
  *(_DWORD *)(v7 + 144) = -1;
  *(_WORD *)(v7 + 148) = 0;
  *(_BYTE *)(v7 + 150) = 1;
  *(_QWORD *)(v7 + 152) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = -1;
  *(_QWORD *)(v7 + 176) = 0;
  *(_WORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_BYTE *)(v7 + 200) = -1;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_OWORD *)(v7 + 240) = 0u;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v8 = 136315906;
    v9 = "InstrumentState.cpp";
    v10 = 1024;
    v11 = 82;
    v12 = 2048;
    v13 = this;
    v14 = 1024;
    v15 = 256;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentState::InstrumentState(%p): [%u bytes]", (uint8_t *)&v8, 0x22u);
    v6 = *(uint64_t (***)(SamplerState *__hidden))this;
  }
  ((void (*)(InstrumentState *, const __CFString *, uint64_t))v6[9])(this, CFSTR("Default Instrument"), 1);
}

void sub_210AE7240(_Unwind_Exception *a1)
{
  SamplerState *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)*((_QWORD *)v1 + 29);
  if (v5)
  {
    *((_QWORD *)v1 + 30) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 27) = v6;
    operator delete(v6);
  }
  v7 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 12) = v7;
    operator delete(v7);
  }
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

void MappedMemoryStream::~MappedMemoryStream(MappedMemoryStream *this)
{
  MappedMemoryStream::~MappedMemoryStream(this);
  JUMPOUT(0x212BCDF50);
}

{
  void *v2;

  *(_QWORD *)this = &off_24CA90280;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    munmap(v2, *((_QWORD *)this + 3));
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  MemoryStream::~MemoryStream(this);
}

uint64_t TStream::ReadAsync()
{
  return 4294967292;
}

uint64_t MemoryStream::GetLength(MemoryStream *this)
{
  return *((_QWORD *)this + 3);
}

void AUDelay::~AUDelay(AUDelay *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUDelay::GetPropertyInfo(AUDelay *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 57 || a3)
  {
    if (a2 != 56 || a3)
    {
      if (a3 || (a2 | 8) != 0x1D)
      {
        return 4294956417;
      }
      else
      {
        result = 0;
        *a6 = 1;
        *a5 = 4;
      }
    }
    else
    {
      result = 0;
      *a5 = 8;
      *a6 = 1;
    }
  }
  else
  {
    result = 0;
    *a5 = 96;
    *a6 = 0;
  }
  return result;
}

uint64_t AUDelay::GetProperty(AUDelay *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned __int8 *v9;

  if (a2 != 57 || a3)
  {
    if (a3)
      return 4294956417;
    if (a2 == 29)
    {
      v9 = (unsigned __int8 *)this + 554;
    }
    else
    {
      if (a2 != 21)
        return 4294956417;
      v9 = (unsigned __int8 *)this + 552;
    }
    result = 0;
    *a5 = *v9;
    return result;
  }
  v5 = 0;
  v6 = *((_QWORD *)this + 1);
  do
  {
    v7 = overviewParameterIDs[v5];
    *(_QWORD *)a5 = v6;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v7;
    ++v5;
    a5 += 6;
  }
  while (v5 != 4);
  return 0;
}

float AUDelay::GetParameterInfo(AUDelay *this, int a2, int a3, AudioUnitParameterInfo *buffer, double a5)
{
  const __CFString *v8;
  const __CFString *v9;
  AudioUnitParameterOptions v10;
  const __CFString *v11;
  const __CFString *v12;
  AudioUnitParameterOptions v13;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (!a2)
  {
    LODWORD(a5) = 1420256304;
    v15[0] = xmmword_24CA96B48;
    v15[1] = *(_OWORD *)&off_24CA96B58;
    if (!LocalizeAUParameterStringsForClass<AUDelay>(std::initializer_list<__CFString const**>)::sLocalized)
      LocalizeAUParameterStringsForClass<AUDelay>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v15, 4);
    switch(a3)
    {
      case 0:
        v8 = (const __CFString *)kDryWetMix_Name;
        buffer->cfNameString = (CFStringRef)kDryWetMix_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_EqualPowerCrossfade;
        a5 = 5.27765581e13;
        goto LABEL_9;
      case 1:
        v9 = (const __CFString *)kDelayTime_Name;
        buffer->cfNameString = (CFStringRef)kDelayTime_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v9, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Seconds;
        LODWORD(a5) = 953267991;
        *(_QWORD *)&buffer->minValue = 0x4000000038D1B717;
        v10 = buffer->flags + 25165824;
        buffer->defaultValue = 1.0;
        buffer->flags = v10;
        break;
      case 2:
        v11 = (const __CFString *)kFeedback_Name;
        buffer->cfNameString = (CFStringRef)kFeedback_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v11, buffer->name, 52, 0x8000100u);
        buffer->unit = kAudioUnitParameterUnit_Percent;
        a5 = 5.23367857e13;
LABEL_9:
        *(double *)&buffer->minValue = a5;
        buffer->defaultValue = 50.0;
        break;
      case 3:
        v12 = (const __CFString *)kLopassCutoff_Name;
        buffer->cfNameString = (CFStringRef)kLopassCutoff_Name;
        buffer->flags |= 0x8000000u;
        CFStringGetCString(v12, buffer->name, 52, 0x8000100u);
        *(_QWORD *)&buffer->unit = 0x4120000000000008;
        a5 = *(double *)(ausdk::AUScope::SafeGetElement((AUDelay *)((char *)this + 128), 0) + 80) * 0.5;
        v13 = buffer->flags + 0x400000;
        buffer->defaultValue = 15000.0;
        buffer->flags = v13;
        if (a5 > 24000.0)
          a5 = 24000.0;
        *(float *)&a5 = a5;
        buffer->maxValue = *(AudioUnitParameterValue *)&a5;
        break;
      default:
        return *(float *)&a5;
    }
  }
  return *(float *)&a5;
}

void AUDelay::GetTailTime(AUDelay *this)
{
  float Parameter;
  double v3;

  ausdk::AUEffectBase::GetParameter(this, 1u);
  Parameter = ausdk::AUEffectBase::GetParameter(this, 2u);
  if (ausdk::AUEffectBase::GetParameter(this, 0) * 0.01 != 0.0)
  {
    v3 = -(Parameter * 0.01);
    if (Parameter * 0.01 >= 0.0)
      v3 = Parameter * 0.01;
    if (v3 < 1.0 && v3 != 0.0)
      log(v3);
  }
}

uint64_t AUDelay::SupportsTail(AUDelay *this)
{
  return 1;
}

BOOL AUDelay::StreamFormatWritable(AUDelay *this)
{
  return *((_BYTE *)this + 17) == 0;
}

void AUDelay::NewKernel(AUDelay *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24CA95220;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 40) = 0;
  v5 = (int)(*(double *)(ausdk::AUScope::SafeGetElement((AUDelay *)((char *)this + 128), 0) + 80) * 2.0 + 10.0);
  *(_DWORD *)(v4 + 60) = v5;
  TAUBuffer<unsigned int>::Allocate(v4 + 24, v5);
  bzero(*(void **)(v4 + 32), *(unsigned int *)(v4 + 40));
  *(_QWORD *)(v4 + 52) = (*(_DWORD *)(v4 + 60) - 1);
  *a2 = v4;
}

void sub_210AE7850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)v2)
  {
    free(*(void **)v2);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
  }
  MEMORY[0x212BCDF50](v1, 0x10A1C40FC27F72CLL);
  _Unwind_Resume(a1);
}

uint64_t AUDelay::Version(AUDelay *this)
{
  return 0x10000;
}

void AUDelay::DelayKernel::~DelayKernel(AUDelay::DelayKernel *this)
{
  void *v1;
  char *v2;

  *(_QWORD *)this = &off_24CA95220;
  v2 = (char *)this + 24;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
  {
    free(v1);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
}

{
  void *v1;
  char *v2;

  *(_QWORD *)this = &off_24CA95220;
  v2 = (char *)this + 24;
  v1 = (void *)*((_QWORD *)this + 3);
  if (v1)
  {
    free(v1);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 4) = 0;
  }
  JUMPOUT(0x212BCDF50);
}

void AUDelay::DelayKernel::Reset(AUDelay::DelayKernel *this)
{
  *((_DWORD *)this + 14) = 0;
  bzero(*((void **)this + 4), *((unsigned int *)this + 10));
}

void AUDelay::DelayKernel::Process(ausdk::AUEffectBase **this, float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  float Parameter;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  double v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  ausdk::AUEffectBase *v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;

  Parameter = ausdk::AUEffectBase::GetParameter(this[1], 0);
  v11 = ausdk::AUEffectBase::GetParameter(this[1], 1u);
  v12 = ausdk::AUEffectBase::GetParameter(this[1], 2u);
  v13 = ausdk::AUEffectBase::GetParameter(this[1], 3u);
  if (v13 < 10.0)
    v13 = 10.0;
  if (v13 > 24000.0)
    v13 = 24000.0;
  v14 = (v13 + v13)
      / *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this[1] + 128), 0) + 80);
  v15 = 0.0001;
  if (v11 >= 0.0001)
    v15 = v11;
  if (v15 > 2.0)
    v15 = 2.0;
  v16 = (int)(*(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUEffectBase *)((char *)this[1] + 128), 0) + 80) * v15);
  if (v16 <= 1)
    v16 = 1;
  v17 = *((_DWORD *)this + 15);
  if (v16 >= v17)
    v16 = v17 - 1;
  v18 = v12 * 0.01;
  if (v18 < -0.999)
    v18 = -0.999;
  if (v18 <= 0.999)
    v19 = v18;
  else
    v19 = 0.999;
  v20 = *((_DWORD *)this + 13);
  v21 = (v20 + v17 - v16) % v17;
  *((_DWORD *)this + 12) = v21;
  v22 = 1.0;
  if (v14 <= 1.0)
    v22 = v14;
  v23 = exp(v22 * -3.14159265);
  v24 = *((float *)this + 14);
  if (a4)
  {
    v25 = Parameter * 0.01;
    v26 = 1.0 - v23;
    v27 = sqrtf(v25);
    v28 = sqrt(1.0 - v25);
    v29 = this[4];
    v30 = a4 + 1;
    v31 = 0.0;
    do
    {
      v32 = *a2++;
      v33 = *((float *)v29 + v21);
      v21 = (v21 + 1) % v17;
      v34 = v24 * v26;
      v24 = (float)(v24 + v33) - (float)(v24 * v26);
      *((float *)v29 + v20) = v32 + (float)(v34 * v19);
      v20 = (v20 + 1) % v17;
      v35 = (float)(v27 * v34) + (float)(v28 * v32);
      v36 = -v35;
      if (v35 >= 0.0)
        v36 = v35;
      if (v36 > v31)
        v31 = v36;
      *a3++ = v35;
      --v30;
    }
    while (v30 > 1);
    *((_DWORD *)this + 12) = v21;
    *((_DWORD *)this + 13) = v20;
    if (v31 > 0.000001)
      *a5 = 0;
  }
  *((float *)this + 14) = v24;
}

_QWORD *AUDelayFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x290uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDelay>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDelay>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

double SynthNote::Reset(SynthNote *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  result = NAN;
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 16) = -1;
  return result;
}

long double SynthNote::Frequency(SynthNote *this)
{
  double v1;
  float v2;

  v1 = *((float *)this + 17) + -69.0;
  v2 = (*(float (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 232) + 72))(*(_QWORD *)(*((_QWORD *)this + 4) + 232));
  return exp2((v1 + v2) / 12.0) * 440.0;
}

uint64_t LoopReader::TimePitchDispatch1(LoopReader *this, float *a2, LoopReader *a3, void *a4)
{
  return LoopReader::TimePitchCallback(a3, (float *)this, 0, (uint64_t)a2);
}

uint64_t LoopReader::TimePitchCallback(LoopReader *this, float *a2, float *a3, uint64_t a4)
{
  int v7;
  float *v9;
  size_t v10;
  uint64_t result;
  float *v12;
  float *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = *((unsigned __int8 *)this + 160);
  *((_BYTE *)this + 34) = 1;
  v12 = a2;
  v13 = 0;
  if (v7)
  {
    v13 = a3;
    bzero(a2, 4 * a4);
    v9 = a3;
    v10 = 4 * a4;
  }
  else
  {
    v10 = 4 * a4;
    v9 = a2;
  }
  bzero(v9, v10);
  result = LoopReader::Read(this, &v12, *((unsigned __int8 *)this + 35), *((double *)this + 18), a4, 1.0, *((_DWORD *)this + 35), *((double *)this + 19));
  *((_BYTE *)this + 34) = 0;
  return result;
}

uint64_t LoopReader::Read(LoopReader *this, float **a2, int a3, double a4, uint64_t a5, double a6, int a7, double a8)
{
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  int v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  double v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float *v34;
  float *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  int v43;
  double v44;
  _BOOL4 v45;
  unsigned int v46;
  double v47;
  int v48;
  double v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  unsigned int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  uint64_t v62;
  double *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  int v67;
  double v68;
  double v69;
  int v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  signed int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  double v84;
  double v85;
  double v86;
  double v87;
  int v88;
  unsigned int v89;
  int v90;
  char v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unsigned int v100;
  double v101;
  double v102;
  double v103;
  int v104;
  int v105;
  double v106;
  double v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v113;
  int v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  double v134;
  int v135;
  float v136;
  float v137;
  int v138;
  float v139;
  float v140;
  double v141;
  float v142;
  int v143;
  float v144;
  float v145;
  BOOL v146;
  float v147;
  float v148;
  int v149;
  int v150;
  int v151;
  int v152;
  float v153;
  float v154;
  double v155;
  double v156;
  double v157;
  int v158;
  int v159;
  int v160;
  BOOL v161;
  int v162;
  BOOL v163;
  int v164;
  int v165;
  unsigned int v166;
  double v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  double v181;
  double v182;
  int v183;
  float v184;
  int v185;
  int v186;
  float v187;
  int v188;
  float v189;
  double v190;
  double v191;
  int v192;
  float v193;
  double v194;
  float v195;
  double v196;
  double v197;
  double v198;
  double v199;
  int v200;
  BOOL v202;
  float v203;
  double v204;
  BOOL v206;
  BOOL v207;
  BOOL v208;
  int v209;
  double v210;
  BOOL v211;
  int v212;
  BOOL v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  double v219;
  BOOL v220;
  unsigned int v221;
  float v222;
  float v223;
  int v224;
  float v225;
  float v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  float v230;
  float v231;
  float v232;
  int v233;
  double v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  double v238;
  signed int v239;
  int v240;
  double v241;
  double v242;
  double v243;
  float v244;
  double v245;
  float v246;
  double v247;
  float v248;
  float v249;
  double v250;
  double v251;
  float v252;
  float v253;
  int v254;
  float v255;
  float v256;
  int v257;
  int v258;
  double v259;
  long double v260;
  float *v261;
  float *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t (*v266)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  double v272;
  double v273;
  float *v274;
  float *v275;
  float v276;
  float v277;
  float v278;
  float v279;
  double v280;
  uint64_t v281;
  double v282;
  double v283;
  int v284;
  double v285;
  _BOOL4 v286;
  double v287;
  int v288;
  double v289;
  uint64_t v290;
  unsigned int v291;
  double v292;
  int v293;
  unsigned int v294;
  double v295;
  int v296;
  unsigned int v297;
  int v298;
  double v300;
  int v303;
  int v304;
  int v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  unsigned int v310;

  v13 = *((unsigned __int8 *)this + 160);
  v14 = *((double *)this + 21);
  v15 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  v16 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this) * *((double *)this + 23);
  if (v14 * 2048.0 >= v16)
    v17 = v16;
  else
    v17 = v14 * 2048.0;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (!(_DWORD)result)
    return result;
  v19 = result;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  if (v20 == *((_DWORD *)this + 44))
  {
    v21 = *((_DWORD *)this + 12);
  }
  else
  {
    *((_DWORD *)this + 44) = v20;
    *((double *)this + 3) = *((double *)this + 3)
                          - (double)(int)*((double *)this + 3)
                          + (double)((int)*((double *)this + 3) % (int)v20);
    v21 = *((_DWORD *)this + 12) % v20;
    *((_DWORD *)this + 13) %= v20;
  }
  *((_DWORD *)this + 12) = v21 % v19;
  v22 = (*(double (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
  *((_DWORD *)this + 35) = a7;
  *((double *)this + 18) = a4;
  *((double *)this + 19) = a8;
  v23 = exp2(v22 / -1200.0);
  (*(void (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
  v291 = a5;
  if (!*((_BYTE *)this + 32))
  {
    v307 = 0;
    if (a3)
      v26 = -1;
    else
      v26 = 1;
    *((_BYTE *)this + 35) = a3;
    goto LABEL_21;
  }
  v25 = *((unsigned __int8 *)this + 33);
  if (a3)
    v26 = -1;
  else
    v26 = 1;
  *((_BYTE *)this + 35) = a3;
  if (v25 && v24 == 0.0)
  {
    v307 = 0;
    goto LABEL_21;
  }
  if (*((_BYTE *)this + 34))
  {
    v307 = 1;
LABEL_21:
    v27 = *((double *)this + 5);
    (*(void (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
    if (*((_BYTE *)this + 32) && (!*((_BYTE *)this + 33) || v28 != 0.0))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
    v308 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this, 0);
    if (v13)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, 1);
      if (!(_DWORD)a5)
        return result;
    }
    else
    {
      result = 0;
      if (!(_DWORD)a5)
        return result;
    }
    v297 = v17;
    v29 = v14 * 512.0;
    v30 = v23 * a4;
    v31 = 1.0 / sqrt(v30);
    if (v30 <= 1.0)
      v31 = 1.0;
    v32 = v31 * 0.08;
    v55 = v31 < 0.5;
    v33 = 0.04;
    if (!v55)
      v33 = v32;
    v34 = *a2;
    v35 = a2[1];
    v36 = (a8 + a8) * 0.8 + 0.2;
    if (v30 <= 1.0)
      v33 = 0.06;
    v37 = v36 * v33;
    v38 = v15 * (v36 * v33);
    v39 = 0.5;
    if (v30 <= 1.0)
      v40 = 0;
    else
      v40 = (int)((v30 + -1.0) * (double)v26 * (double)(int)v38);
    if (v19 >= 0)
      v41 = v19;
    else
      v41 = v19 + 1;
    v304 = -(v41 >> 1);
    v305 = v40;
    v303 = v41 >> 1;
    v42 = v19 - 1;
    v43 = *((_DWORD *)this + 12);
    if (a8 <= 0.5)
      v44 = 1.0;
    else
      v44 = a8 + a8;
    v287 = v44;
    v45 = v30 > 0.9 && v30 < 1.0;
    v286 = v45;
    v285 = v30 * 0.3 * v30;
    v46 = a5;
    v284 = v26;
    v300 = v37;
    v306 = result;
    v282 = v30;
    v283 = v14 * 512.0;
    while (1)
    {
      v310 = v46;
      (*(void (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
      if (!*((_BYTE *)this + 32) || *((_BYTE *)this + 33) && v47 == 0.0)
      {
        v48 = 0;
      }
      else
      {
        v49 = *((double *)this + 1);
        v48 = (int)(v49 * (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this));
        v43 += v48;
      }
      v46 = v310;
      v309 = (v305 + (int)(*((double *)this + 3) + v39 + v30 * (double)(int)(a5 - v310))) % v19;
      v50 = v309 - *((_DWORD *)this + 12);
      if (v50 <= v303)
        v51 = 0;
      else
        v51 = v19;
      if (v50 >= v304)
        v52 = -v51;
      else
        v52 = v19;
      v53 = v50 + v52;
      if (v53 >= 0)
        v54 = v53;
      else
        v54 = -v53;
      v55 = v30 < 1.0;
      if (v30 > 1.0)
        v55 = v53 * v26 > 0 || v30 < 1.0;
      if (!v55 && (v30 != 1.0 || v29 >= (double)v54))
        break;
      v56 = v48;
      *((double *)this + 23) = v37;
      v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
      v58 = *((_DWORD *)this + 14);
      v59 = v58 == 0;
      v60 = *((_DWORD *)this + 12);
      if (v58)
      {
        v61 = v307;
        v62 = v308;
        result = v306;
        v42 = v19 - 1;
        v46 = v310;
        v48 = v56;
        v63 = (double *)&loc_210B02000;
        v64 = &kResetPower_Name;
        v65 = &kResetPower_Name;
        v66 = &kResetPower_Name;
        goto LABEL_113;
      }
      v67 = v57;
      *((_DWORD *)this + 13) = v60;
      (*(void (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
      if (*((_BYTE *)this + 32) && v68 != 0.0)
      {
        v69 = *((double *)this + 1);
        *((_DWORD *)this + 13) += (int)(v69
                                      * (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this));
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this))
          v70 = *((_DWORD *)this + 13) % v67;
        else
          v70 = 0;
        *((_DWORD *)this + 13) = v70;
      }
      v71 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
      v72 = *((double *)this + 19);
      if (v72 <= v39)
        v73 = 1.0;
      else
        v73 = v72 + v72;
      v74 = *((double *)this + 21) * v73;
      v75 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this) * *((double *)this + 23);
      v76 = v74 * 2048.0;
      if (v74 * 2048.0 >= v75)
        v76 = v75;
      v77 = v74 * 4096.0;
      if (v74 * 4096.0 >= v75)
        v77 = v75;
      v78 = (v67 + v309 - *((_DWORD *)this + 13)) % v67;
      if (v67 >= 0)
        v79 = v67;
      else
        v79 = v67 + 1;
      v80 = -(v79 >> 1);
      if (v67 >= 0)
        v81 = v67;
      else
        v81 = v67 + 1;
      if (v78 <= v81 >> 1)
        v82 = 0;
      else
        v82 = v67;
      v83 = v78 - v82;
      if (v78 < v80)
        v58 = v78 + v67;
      else
        v58 = v83;
      v84 = *((double *)this + 18);
      if (v84 <= 1.0)
      {
        v87 = v71 * v300;
        v37 = v300;
        v58 = (int)v87;
        v61 = v307;
        v62 = v308;
        result = v306;
        v42 = v19 - 1;
        v46 = v310;
      }
      else
      {
        v85 = v84 + -1.0;
        if (v84 < 1.1)
          v85 = 0.1;
        v86 = v76 / v85;
        if (v86 > v77)
          v86 = v77;
        if ((int)v58 <= (int)v86)
          v58 = (int)v86;
        v61 = v307;
        v62 = v308;
        result = v306;
        v42 = v19 - 1;
        v46 = v310;
        v37 = v300;
      }
      v48 = v56;
      v63 = (double *)&loc_210B02000;
      v64 = &kResetPower_Name;
      v65 = &kResetPower_Name;
      v66 = &kResetPower_Name;
      if (v58 >= 0x1000)
        v58 = 4096;
      *((_DWORD *)this + 14) = v58;
      *((_DWORD *)this + 15) = v58;
      *((double *)this + 9) = 1.0 / (double)v58;
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 12) = v309;
      *((double *)this + 24) = v84;
      v59 = 1;
      v60 = v309;
      if (!v58)
        goto LABEL_110;
LABEL_112:
      if (!v58)
        goto LABEL_418;
LABEL_113:
      v88 = *((_DWORD *)this + 13);
      v89 = *((_DWORD *)this + 20);
      if (v89 >= v46)
        v90 = v46;
      else
        v90 = *((_DWORD *)this + 20);
      *((_DWORD *)this + 20) = v89 - v90;
      if (v30 >= 1.0)
      {
        if (v30 > 1.0)
        {
          v91 = !v59;
          if (!*((_BYTE *)this + 200))
            v91 = 1;
          if ((v91 & 1) == 0 && !v90)
          {
LABEL_126:
            if (v58 != *((_DWORD *)this + 15))
              goto LABEL_381;
            v296 = v48;
            v298 = *((unsigned __int8 *)this + 160);
            v92 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
            v289 = *((double *)this + 21);
            v93 = v287 * v289;
            v94 = (*(double (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
            v95 = v94 * *((double *)this + 23);
            if (v287 * v289 * 512.0 >= v95)
              v96 = v94 * *((double *)this + 23);
            else
              v96 = v93 * 512.0;
            if (v93 * 700.0 >= v95)
              v97 = v94 * *((double *)this + 23);
            else
              v97 = v93 * 700.0;
            if (v93 * 1024.0 >= v95)
              v98 = v94 * *((double *)this + 23);
            else
              v98 = v93 * 1024.0;
            v292 = v94 * *((double *)this + 23);
            if (v93 * 2048.0 >= v95)
              v99 = v94 * *((double *)this + 23);
            else
              v99 = v93 * 2048.0;
            v100 = (int)v98;
            v101 = (double)*((int *)this + 28);
            v102 = *((double *)this + 15) + (v101 - *((double *)this + 15)) * v285;
            *((double *)this + 15) = v102;
            v103 = v102 / v97;
            if (v102 / v97 < 1.0)
              v97 = v102 / v97 * (v102 / v97 * (v97 * (v102 / v97)));
            v104 = (int)v96;
            v105 = (int)v96;
            if (v99 < v101)
              goto LABEL_154;
            v106 = v102 / v98;
            v107 = v106 * (v98 * v106);
            if (v106 >= 1.0)
              v107 = v98;
            v108 = (int)(v106 * v107 + v106 * v107);
            v109 = *((_DWORD *)this + 14);
            v110 = v109 <= v108 ? 0 : (int)(v106 * v107 + v106 * v107);
            v111 = v109 - v110;
            v104 = v109 - v110 <= v100 ? (int)v98 : v109 - v110;
            v161 = v109 <= v108;
            v105 = (int)((a8 + a8) * 0.035 * v92);
            if (!v161 || v111 < v100)
LABEL_154:
              *((_DWORD *)this + 14) = v104;
            if (v286)
              *((_DWORD *)this + 14) = 4 * v104;
            v113 = v105 - (int)(v103 * v97 + v103 * v97);
            v295 = v98;
            v114 = (int)(v98 / *((double *)this + 12));
            if (v114 >= (int)v100)
              v114 = (int)v98;
            if (v113 <= v114)
              v113 = v114;
            if (v113 <= (int)v96)
              v115 = (int)v96;
            else
              v115 = v113;
            if (*((_DWORD *)this + 34) == 1 || *((double *)this + 13) > 1.4)
              v115 = (v115 + v100) >> 1;
            v294 = (int)v98;
            v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
            v117 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this, 0);
            v118 = v298;
            v290 = v117;
            if (v298)
            {
              v119 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, 1);
              v120 = v290;
              v118 = v298;
            }
            else
            {
              v120 = v117;
              v119 = 0;
            }
            v121 = v115;
            v122 = v115;
            if (a7 != -1)
            {
              v123 = v115 - a7 + v88;
              if (v116 >= 0)
                v124 = v116;
              else
                v124 = v116 + 1;
              v125 = -(v124 >> 1);
              if (v116 >= 0)
                v126 = v116;
              else
                v126 = v116 + 1;
              if (v123 <= v126 >> 1)
                v127 = 0;
              else
                v127 = v116;
              v128 = v123 - v127;
              if (v123 < v125)
                v129 = v123 + v116;
              else
                v129 = v128;
              v130 = (int)(-v96 / v30);
              v131 = v130 - v129 + v115;
              if (v131 < 0)
                v131 = 4;
              if (v130 >= v129)
                v122 = v115;
              else
                v122 = v131;
            }
            if (a3)
              v132 = -v122;
            else
              v132 = 0;
            if (a3)
              v133 = 0;
            else
              v133 = v122;
            v134 = *((double *)this + 11);
            v135 = (v88 + v132) % v116;
            v136 = *(float *)(v120 + 4 * v135);
            if (v118)
              v136 = v136 + *(float *)(v119 + 4 * v135);
            v137 = 0.0;
            v280 = v96;
            v288 = v122;
            v138 = 0;
            if (v132 >= v133)
            {
              v140 = 1.0;
              v142 = 0.0;
              v139 = 0.0;
            }
            else
            {
              v139 = 0.0;
              v140 = 1.0;
              v141 = *((double *)this + 11);
              v142 = 0.0;
              do
              {
                v143 = (v88 + v132) % v116;
                v144 = 0.0;
                if (v118)
                  v144 = *(float *)(v119 + 4 * v143);
                v145 = *(float *)(v120 + 4 * v143) + v144;
                v141 = v141 + ((float)(v145 * v145) - v141) * 0.002;
                v146 = v145 < 0.0;
                if (v145 < 0.0)
                  v145 = -v145;
                v147 = -1.0;
                if (!v146)
                  v147 = 1.0;
                if (v145 > v142)
                {
                  v142 = v145;
                  v138 = v132;
                  v140 = v147;
                }
                v148 = v145 - v136;
                if (v148 < 0.0)
                  v148 = -v148;
                if (v148 > v139)
                  v139 = v148;
                ++v132;
                v136 = v145;
              }
              while (v133 != v132);
              *((double *)this + 11) = v141;
            }
            v149 = 0;
            if (a3)
              v150 = 0;
            else
              v150 = -v121;
            if (a3)
              v151 = v121;
            else
              v151 = 0;
            if (v150 < v151)
            {
              v149 = 0;
              v137 = 0.0;
              do
              {
                v152 = ((v116 + v60 + (int)(v30 * (double)v138)) % v116 + v116 + v150) % v116;
                v153 = 0.0;
                if (v118)
                  v153 = *(float *)(v119 + 4 * v152);
                v154 = v140 * (float)(*(float *)(v120 + 4 * v152) + v153);
                if (v154 > v137)
                {
                  v137 = v154;
                  v149 = v150;
                }
                ++v150;
              }
              while (v151 != v150);
            }
            v293 = (v116 + v60 + (int)(v30 * (double)v138)) % v116;
            v281 = v119;
            v155 = (float)(v137 / v142);
            v156 = log2(v142 / sqrt(v134));
            v157 = 1.0 / v155;
            if ((float)(v137 / v142) >= 1.0)
              v157 = (float)(v137 / v142);
            v158 = (float)(v139 / v142) > 0.5;
            if ((float)(v139 / v142) < 0.2)
              v158 = -1;
            v159 = v156 > 2.2;
            if (v156 > 4.0)
              v159 = 2;
            v160 = v159 + v158;
            if (v155 < 0.714285714)
              ++v160;
            *((double *)this + 12) = v156;
            *((double *)this + 13) = v157;
            *((_DWORD *)this + 34) = v160;
            v161 = a8 >= 0.75 || v160 <= 1;
            v162 = !v161;
            *((_BYTE *)this + 84) = v162;
            v58 = *((_DWORD *)this + 14);
            if (v149 < 1)
            {
              v165 = v293;
              v166 = v294;
              result = v306;
              v30 = v282;
              v29 = v283;
              v46 = v310;
              v39 = 0.5;
              v48 = v296;
              v63 = (double *)&loc_210B02000;
              v64 = &kResetPower_Name;
              v65 = &kResetPower_Name;
              v66 = &kResetPower_Name;
              v167 = v295;
              if (v58 < v294)
                goto LABEL_249;
            }
            else
            {
              v163 = __OFSUB__(v58, v149);
              v164 = v58 - v149;
              v165 = v293;
              if ((v164 < 0) ^ v163 | (v164 == 0))
                v164 = v294;
              if (v164 <= v294)
                v166 = v294;
              else
                v166 = v164;
              result = v306;
              v30 = v282;
              v29 = v283;
              v46 = v310;
              v39 = 0.5;
              v48 = v296;
              v63 = (double *)&loc_210B02000;
              v64 = &kResetPower_Name;
              v65 = &kResetPower_Name;
              v66 = &kResetPower_Name;
              v167 = v295;
LABEL_249:
              *((_DWORD *)this + 14) = v166;
              v58 = v166;
            }
            v90 = v138 - (v138 > 0);
            v60 = (v149 + v116 + v165) % v116;
            v168 = v90 + v116 + v88;
            v169 = (v168 - v60) % v116;
            if (v116 >= 0)
              v170 = v116;
            else
              v170 = v116 + 1;
            v171 = -(v170 >> 1);
            if (v116 >= 0)
              v172 = v116;
            else
              v172 = v116 + 1;
            if (v169 <= v172 >> 1)
              v173 = 0;
            else
              v173 = v116;
            v174 = v169 - v173;
            if (v169 < v171)
              v175 = v169 + v116;
            else
              v175 = v174;
            v176 = v309 - v88;
            if (v309 - v88 >= v171)
            {
              if (v116 >= 0)
                v178 = v116;
              else
                v178 = v116 + 1;
              if (v176 <= v178 >> 1)
                v179 = 0;
              else
                v179 = v116;
              v177 = v176 - v179;
            }
            else
            {
              v177 = v176 + v116;
            }
            LODWORD(a5) = v291;
            v26 = v284;
            if ((double)v177 > -v167 && v167 > (double)v177)
            {
              if (v289 * 128.0 <= (double)v288)
                v162 = 1;
              if (v162 == 1)
              {
                v180 = *((_DWORD *)this + 32);
                v181 = (double)v180;
                if (v167 >= (double)v180)
                {
                  v186 = v60;
                  v37 = v300;
                  v191 = v292;
                  v190 = v287 * v289;
                  goto LABEL_340;
                }
                if ((float)(v142 - v137) >= 0.0)
                  v182 = (float)(v142 - v137);
                else
                  v182 = -(float)(v142 - v137);
                v183 = (v168 - v180) % v116;
                v184 = *(float *)(v290 + 4 * v183);
                if (v298)
                {
                  v184 = v184 + *(float *)(v281 + 4 * v183);
                  if (v175 >= 0)
                    v185 = v175;
                  else
                    v185 = v175 + 1;
                  v186 = (v168 - (v185 >> 1)) % v116;
                  v187 = *(float *)(v290 + 4 * v186) + *(float *)(v281 + 4 * v186);
                  v188 = (int)(((int)(((unint64_t)(1431655765 * v175) >> 32) - v175) >> 1)
                             + ((((unint64_t)(1431655765 * v175) >> 32) - v175) >> 31)
                             + v168)
                       % v116;
                  v189 = *(float *)(v290 + 4 * v188) + *(float *)(v281 + 4 * v188);
                }
                else
                {
                  if (v175 >= 0)
                    v192 = v175;
                  else
                    v192 = v175 + 1;
                  v186 = (v168 - (v192 >> 1)) % v116;
                  v187 = *(float *)(v290 + 4 * v186);
                  v188 = (int)(((int)(((unint64_t)(1431655765 * v175) >> 32) - v175) >> 1)
                             + ((((unint64_t)(1431655765 * v175) >> 32) - v175) >> 31)
                             + v168)
                       % v116;
                  v189 = *(float *)(v290 + 4 * v188);
                }
                v191 = v292;
                v190 = v287 * v289;
                v193 = v142 - v184;
                if (v193 >= 0.0)
                  v194 = v193;
                else
                  v194 = -v193;
                v195 = v142 - v189;
                if (v195 >= 0.0)
                  v196 = v195;
                else
                  v196 = -v195;
                v197 = v194 / v182;
                v198 = (double)v175;
                v199 = v181 / (double)v175;
                if (v199 < 0.0)
                  v199 = v167;
                v200 = *((unsigned __int8 *)this + 132);
                *((_BYTE *)this + 132) = 0;
                v202 = v197 < 2.0 && v200 == 0;
                if (v199 >= 0.7)
                  v202 = 0;
                if (v197 >= 1.0 && !v202)
                {
                  v203 = v142 - v187;
                  if (v203 >= 0.0)
                    v204 = v203;
                  else
                    v204 = -v203;
                  v206 = (v204 / v182 < 2.0 || v157 > 1.5) && v167 < v198;
                  v37 = v300;
                  if (v206)
                    goto LABEL_340;
                  v207 = v196 / v182 < 2.0 && v280 * 3.0 < v198;
                  v186 = v188;
                  if (v207)
                    goto LABEL_340;
                  v208 = v157 < 1.2 && v200 == 0;
                  if (!v208
                    || v199 >= 1.0
                    || ((v209 = (int)(1.0 / v199 + v39), v210 = 1.0 / v199 - (double)v209, v210 > -0.1)
                      ? (v211 = v209 < 2)
                      : (v211 = 1),
                        v211))
                  {
                    v186 = v60;
                    goto LABEL_340;
                  }
                  v212 = v175 / v209;
                  v213 = v210 < 0.1 && v280 < (double)v212;
                  v186 = v60;
                  if (!v213)
                  {
LABEL_340:
                    v214 = (v168 - v186) % v116;
                    if (v116 >= 0)
                      v215 = v116;
                    else
                      v215 = v116 + 1;
                    if (v214 <= v215 >> 1)
                      v216 = 0;
                    else
                      v216 = v116;
                    v217 = v214 - v216;
                    if (v214 < v171)
                      v218 = v214 + v116;
                    else
                      v218 = v217;
                    if (v218 < 0)
                      v218 = -v218;
                    *((_DWORD *)this + 32) = v218;
                    v60 = v186;
                    v61 = v307;
                    v62 = v308;
                    v42 = v19 - 1;
                    goto LABEL_352;
                  }
                  v183 = (v168 - v212) % v116;
                }
                *((_BYTE *)this + 132) = 1;
                v186 = v183;
                v37 = v300;
                goto LABEL_340;
              }
            }
            v61 = v307;
            v62 = v308;
            v42 = v19 - 1;
            v37 = v300;
            v191 = v292;
            v190 = v287 * v289;
LABEL_352:
            v219 = v190 * 4096.0;
            if (v190 * 4096.0 >= v191)
              v219 = v191;
            if (v90 < 0)
              v90 = -v90;
            if (v58 >= v219)
              v58 = v219;
            *((double *)this + 9) = 1.0 / (double)v58;
            *((_DWORD *)this + 14) = v58;
            *((_DWORD *)this + 15) = v58;
            v221 = v90 - v46;
            v220 = v90 <= (int)v46;
            if (v90 >= (int)v46)
              v90 = v46;
            if (v220)
              v221 = 0;
            *((_DWORD *)this + 20) = v221;
          }
        }
      }
      else
      {
        if (v90)
          v59 = 0;
        if (v59)
          goto LABEL_126;
      }
      v46 -= v90;
      if (!v90)
        goto LABEL_381;
      do
      {
        if (v13)
          v222 = *(float *)(result + 4 * v88);
        else
          v222 = 0.0;
        v223 = *(float *)(v62 + 4 * v88);
        v224 = v88 + v26;
        if (v88 + v26 >= v19)
          v224 = 0;
        if (v224 >= 0)
          v88 = v224;
        else
          v88 = v42;
        if (v61)
        {
          *v34 = v223 + *v34;
          if (!v13)
            goto LABEL_379;
          v225 = v222 + *v35;
        }
        else
        {
          v27 = v27 + (a6 - v27) * v63[139];
          v226 = *v34 + v223 * v27;
          *v34 = v226;
          if (!v13)
            goto LABEL_379;
          v225 = *v35 + v222 * v27;
        }
        *v35++ = v225;
LABEL_379:
        ++v34;
        --v90;
      }
      while (v90);
      v58 = *((_DWORD *)this + 14);
LABEL_381:
      if (v58 >= v46)
        v227 = v46;
      else
        v227 = v58;
      v46 -= v227;
      v228 = v58 - v227;
      *((_DWORD *)this + 14) = v58 - v227;
      *((_DWORD *)this + 28) = 0;
      v229 = v60;
      while (2)
      {
        v60 = v229;
        if (v227)
        {
          if (v13)
          {
            v230 = *(float *)(result + 4 * v229);
            v229 += v26;
            if (v229 >= v19)
              v229 = 0;
            if (v229 < 0)
              v229 = v42;
            v231 = *(float *)(v62 + 4 * v88);
            v232 = *(float *)(result + 4 * v88);
          }
          else
          {
            v229 += v26;
            if (v229 >= v19)
              v229 = 0;
            if (v229 < 0)
              v229 = v42;
            v231 = *(float *)(v62 + 4 * v88);
            v230 = 0.0;
            v232 = 0.0;
          }
          v233 = v88 + v26;
          if (v88 + v26 >= v19)
            v233 = 0;
          if (v233 >= 0)
            v88 = v233;
          else
            v88 = v42;
          v234 = *((double *)this + 24);
          v235 = v64[422];
          v236 = v65[423];
          v237 = v234 > 1.0;
          if (v234 <= 1.0)
            v236 = v64[422];
          v238 = *((double *)this + 8);
          v239 = vcvtd_n_s64_f64(v238, 0xCuLL);
          v240 = 2 * v239;
          if (v237)
            v235 = v66[424];
          v241 = v238 * 4096.0 - floor(v238 * 4096.0);
          v242 = *(float *)(v236 + 8 * v239 + 4) + v241 * *(float *)(v236 + 4 * v240);
          v243 = *(float *)(v235 + 4 * (8193 - 2 * v239)) + (1.0 - v241) * *(float *)(v235 + 4 * (0x2000 - v240));
          v244 = *(float *)(v62 + 4 * v60);
          v245 = v238 + *((double *)this + 9);
          *((double *)this + 8) = v245;
          if (v61)
          {
            v246 = v243 * v231 + v242 * v244 + *v34;
            *v34 = v246;
            if (v13)
            {
              v247 = v243 * v232 + v242 * v230 + *v35;
              goto LABEL_411;
            }
          }
          else
          {
            v27 = v27 + (a6 - v27) * v63[139];
            v248 = *v34 + (v243 * v231 + v242 * v244) * v27;
            *v34 = v248;
            if (v13)
            {
              v247 = *v35 + (v243 * v232 + v242 * v230) * v27;
LABEL_411:
              v249 = v247;
              *v35++ = v249;
            }
          }
          --v227;
          ++v34;
          if (v245 > 1.0)
          {
            if ((int)(v227 + 1) >= 2)
            {
              v46 += v227;
              *((_DWORD *)this + 28) = v228 + v227;
            }
            *((_QWORD *)this + 8) = 0x3FF0000000000000;
            *((_DWORD *)this + 13) = v88;
            goto LABEL_417;
          }
          continue;
        }
        break;
      }
      v250 = *((double *)this + 8);
      *((_DWORD *)this + 13) = v88;
      if (v250 != 1.0)
        goto LABEL_418;
LABEL_417:
      *((_DWORD *)this + 14) = 0;
      v60 = v229;
LABEL_418:
      if (v30 == 1.0)
      {
        if (!v46)
        {
LABEL_442:
          *((double *)this + 5) = v27;
          *((_DWORD *)this + 12) = (v19 - v48 + v60) % v19;
          return result;
        }
        v251 = v63[139];
        while (2)
        {
          if (v13)
            v252 = *(float *)(result + 4 * v60);
          else
            v252 = 0.0;
          v253 = *(float *)(v62 + 4 * v60);
          v254 = v60 + v26;
          if (v60 + v26 >= v19)
            v254 = 0;
          if (v254 >= 0)
            v60 = v254;
          else
            v60 = v42;
          if (v61)
          {
            *v34 = v253 + *v34;
            if (v13)
            {
              v255 = v252 + *v35;
              goto LABEL_437;
            }
          }
          else
          {
            v27 = v27 + (a6 - v27) * v251;
            v256 = *v34 + v253 * v27;
            *v34 = v256;
            if (v13)
            {
              v255 = *v35 + v252 * v27;
LABEL_437:
              *v35++ = v255;
            }
          }
          ++v34;
          if (!--v46)
            goto LABEL_442;
          continue;
        }
      }
      *((double *)this + 5) = v27;
      v43 = (v19 - v48 + v60) % v19;
      *((_DWORD *)this + 12) = v43;
      if (!v46)
        return result;
    }
    v59 = 0;
    v60 = v43 % v19;
    v58 = *((_DWORD *)this + 14);
    v61 = v307;
    v62 = v308;
    result = v306;
    v63 = (double *)&loc_210B02000;
    v64 = &kResetPower_Name;
    v65 = &kResetPower_Name;
    v66 = &kResetPower_Name;
    if (v58)
      goto LABEL_112;
LABEL_110:
    if (v30 != 1.0)
    {
      v58 = v297;
      *((_DWORD *)this + 14) = v297;
    }
    goto LABEL_112;
  }
  v257 = *((unsigned __int8 *)this + 160);
  v258 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v259 = *((double *)this + 5);
  v260 = exp2(v22 / 1200.0);
  (*(void (**)(_QWORD, double))(**((_QWORD **)this + 2) + 56))(*((_QWORD *)this + 2), v260);
  v261 = (float *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, 0);
  if (v257)
  {
    v262 = (float *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, 1);
    a5 = *((_QWORD *)this + 2);
    v263 = v26;
    v264 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, 0);
    v265 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, 1);
    v266 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a5 + 48);
    v267 = a5;
    LODWORD(a5) = v291;
    v268 = v264;
    v26 = v263;
    result = v266(v267, v268, v265, v291, 1);
  }
  else
  {
    v269 = *((_QWORD *)this + 2);
    v270 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, 0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v269 + 40))(v269, v270, a5, 1);
    v262 = 0;
  }
  if (a4 > 0.0)
  {
    v271 = *((double *)this + 3) + (double)v26 * a4 * (double)a5;
    *((double *)this + 3) = v271;
    v272 = (double)v258;
    if (v271 < 0.0)
    {
      v273 = v271 + v272;
LABEL_449:
      *((double *)this + 3) = v273;
      goto LABEL_450;
    }
    if (v271 >= v272)
    {
      v273 = v271 - v272;
      goto LABEL_449;
    }
  }
LABEL_450:
  if ((_DWORD)a5)
  {
    v275 = *a2;
    v274 = a2[1];
    do
    {
      v259 = v259 + (a6 - v259) * 0.05;
      v276 = *v261++;
      v277 = *v275 + v259 * v276;
      *v275++ = v277;
      if (v257)
      {
        v278 = *v262++;
        v279 = *v274 + v259 * v278;
        *v274++ = v279;
      }
      LODWORD(a5) = a5 - 1;
    }
    while ((_DWORD)a5);
  }
  *((double *)this + 5) = v259;
  return result;
}

uint64_t LoopReader::TimePitchDispatch2(LoopReader *this, float *a2, float *a3, LoopReader *a4, void *a5)
{
  return LoopReader::TimePitchCallback(a4, (float *)this, a2, (uint64_t)a3);
}

double LoopReader::Reset(LoopReader *this)
{
  int v2;
  unsigned int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  double result;

  v2 = *((unsigned __int8 *)this + 160);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v4 = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this, 0);
  v5 = v4;
  if (v2)
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)this + 24))(*(_QWORD *)this, 1);
    v7 = 4 * v3;
    bzero(v5, v7);
    v4 = (void *)v6;
    v8 = v7;
  }
  else
  {
    v8 = 4 * v3;
  }
  bzero(v4, v8);
  v9 = *((_QWORD *)this + 2);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 88) = xmmword_210B09FF0;
  *((_QWORD *)this + 13) = 0x3FF0000000000000;
  *((_DWORD *)this + 32) = 512;
  *((_BYTE *)this + 132) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_BYTE *)this + 34) = 0;
  *((_QWORD *)this + 23) = 0x3FB1EB851EB851ECLL;
  result = 0.0;
  *((_OWORD *)this + 4) = xmmword_210B0A000;
  *((_DWORD *)this + 44) = 0;
  *((_BYTE *)this + 84) = 0;
  return result;
}

void LoopReader::~LoopReader(LoopReader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 2) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    MEMORY[0x212BCD980](32);
  }
  pthread_mutex_lock(&sInitLocker);
  v3 = LoopReader::sFadeTables;
  if (LoopReader::sFadeTables)
  {
    v4 = *(_QWORD *)(LoopReader::sFadeTables + 8) - 1;
    *(_QWORD *)(LoopReader::sFadeTables + 8) = v4;
    if (!v4)
    {
      v5 = *(void **)(v3 + 24);
      if (v5)
        malloc_make_purgeable(v5);
    }
  }
  pthread_mutex_unlock(&sInitLocker);
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_210AE950C(void *a1)
{
  pthread_mutex_unlock(&sInitLocker);
  __clang_call_terminate(a1);
}

void PitchShifter3::~PitchShifter3(PitchShifter3 *this)
{
  PitchShifter3::~PitchShifter3(this);
  JUMPOUT(0x212BCDF50);
}

{
  uint64_t i;
  char *v3;
  void *v4;
  char *v5;
  void *v6;

  *(_QWORD *)this = &off_24CA8D130;
  LoopReader::~LoopReader((PitchShifter3 *)((char *)this + 152));
  for (i = 96; i != 48; i -= 24)
  {
    v3 = (char *)this + i;
    v4 = *(void **)((char *)this + i);
    if (v4)
    {
      free(v4);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_DWORD *)v3 + 4) = 0;
    }
  }
  do
  {
    v5 = (char *)this + i;
    v6 = *(void **)((char *)this + i);
    if (v6)
    {
      free(v6);
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *((_DWORD *)v5 + 4) = 0;
    }
    i -= 24;
  }
  while (i);
}

uint64_t PitchShifter3::GetLoopLength(PitchShifter3 *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t PitchShifter3::GetBufferData(PitchShifter3 *this, int a2)
{
  return *((_QWORD *)this + 3 * a2 + 4);
}

double PitchShifter3::GetSampleRate(PitchShifter3 *this)
{
  return *((double *)this + 2);
}

uint64_t PitchShifter3::GetTempBuffer(PitchShifter3 *this, int a2)
{
  return *((_QWORD *)this + 3 * a2 + 10);
}

double PitchShifter3::GetPitch(PitchShifter3 *this)
{
  return *((double *)this + 1);
}

uint64_t PitchShifter3::GetNumberOfSourceFrames(PitchShifter3 *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if (*((_BYTE *)this + 144))
  {
    v2 = *((double *)this + 1);
    v3 = exp2(v2 / 1200.0) / 1.5 * *((double *)this + 42) + -0.005;
    if (v3 < 0.03)
      v3 = 0.03;
    v4 = v3 + 0.01;
    if (v2 >= 0.0)
      v4 = v3;
    v5 = *((double *)this + 2);
    v6 = v5 * v4;
    v7 = (double)*((int *)this + 30);
    v8 = v7 - v6;
    if (v8 < 0.0)
      v8 = v8 + (double)*((int *)this + 32);
    v9 = (double)(int)v8;
    *((double *)this + 22) = v9;
  }
  else
  {
    v9 = *((double *)this + 22);
    v5 = *((double *)this + 2);
    v7 = (double)*((int *)this + 30);
  }
  v10 = v7 - v9;
  v11 = *((_DWORD *)this + 32);
  if (v11 >= 0)
    v12 = *((_DWORD *)this + 32);
  else
    v12 = v11 + 1;
  v13 = (double)v11;
  v14 = -0.0;
  if (v10 < (double)-(v12 >> 1))
    v14 = (double)v11;
  v15 = v10 + v14;
  if (v15 <= (double)(v12 >> 1))
    v13 = 0.0;
  v16 = -(v15 - v13 - v5 / 44100.0 * (*((double *)this + 17) + *((double *)this + 17)) * 8192.0);
  if (v16 < 0.0)
    return 0.0;
  return v16;
}

unsigned __int8 *PitchShifter3::PushInput(unsigned __int8 *this, float *__src, float *a3, int a4)
{
  _DWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  void *v16;
  size_t v17;
  char *v18;

  if (this[145])
  {
    v6 = this;
    v7 = this[124];
    v8 = (char *)*((_QWORD *)this + 4);
    if (this[124])
      v18 = (char *)*((_QWORD *)this + 7);
    else
      v18 = 0;
    v9 = *((int *)this + 30);
    v10 = *((_DWORD *)this + 32);
    v11 = v10 - v9;
    if ((int)(v10 - v9) >= a4)
      v11 = a4;
    v12 = a4 - v11;
    v13 = v11;
    v14 = 4 * v11;
    memcpy(&v8[4 * v9], __src, v14);
    if (v7)
    {
      memcpy(&v18[4 * v9], a3, v14);
      memcpy(v8, &__src[v13], 4 * v12);
      v15 = &a3[v13];
      v16 = v18;
      v17 = 4 * v12;
    }
    else
    {
      v17 = 4 * v12;
      v15 = &__src[v13];
      v16 = v8;
    }
    this = (unsigned __int8 *)memcpy(v16, v15, v17);
    v6[30] = (v6[30] + a4) % v10;
  }
  return this;
}

uint64_t PitchShifter3::Process(PitchShifter3 *this, float *a2, float *a3, int a4, char a5, double a6, double a7, double a8, double a9)
{
  int v18;
  long double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t result;
  BOOL v26;
  float *v27;
  float *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *((double *)this + 17) = a9;
  v18 = *((unsigned __int8 *)this + 124);
  v19 = cos(a8 * 1.57079633);
  v20 = 1.0 - v19 * v19;
  *((double *)this + 1) = a6;
  v27 = a2;
  v28 = a3;
  if (a8 == 1.0)
  {
    bzero(a2, 4 * a4);
    if (v18)
      bzero(a3, 4 * a4);
  }
  v21 = sqrt(v20);
  v22 = vcvtd_n_s64_f64(a7, 9uLL);
  if (v22 <= 512)
    v23 = 512;
  else
    v23 = v22;
  do
  {
    if (a4 >= v23)
      v24 = v23;
    else
      v24 = a4;
    *((_BYTE *)this + 352) = a5;
    result = LoopReader::Read((PitchShifter3 *)((char *)this + 152), &v27, 0, a7, v24, v21, *((_DWORD *)this + 30), a9);
    if (a2)
    {
      a2 += v24;
      v27 = a2;
    }
    if (a3)
    {
      a3 += v24;
      v28 = a3;
    }
    v26 = __OFSUB__(a4, (_DWORD)v24);
    a4 -= v24;
  }
  while (!((a4 < 0) ^ v26 | (a4 == 0)));
  return result;
}

VoiceActivityDetector *MetadataHandler::Process<float>(uint64_t a1, const float *a2, unsigned int a3)
{
  VoiceActivityDetector *result;
  _BOOL4 v7;

  PowerMeter::Process((PowerMeter *)a1, a2);
  result = *(VoiceActivityDetector **)(a1 + 136);
  if (result)
  {
    result = (VoiceActivityDetector *)VoiceActivityDetector::VADProcess<float>(result, (uint64_t)a2, a3, *(_DWORD *)(a1 + 164));
    v7 = (_DWORD)result != 0;
  }
  else
  {
    v7 = 0;
  }
  if (!*(_DWORD *)(a1 + 168))
    v7 = 0;
  *(_DWORD *)(a1 + 168) = v7;
  return result;
}

double MetadataHandler::GetMetadata(MetadataHandler *this, void **a2, unsigned int *a3)
{
  double result;
  uint64_t v7;
  int v8;

  PowerMeter::LinearToDB(this, *((double *)this + 14));
  *(float *)&result = result;
  v7 = (uint64_t)*a2;
  *(_QWORD *)v7 = 0x4706F6462;
  *(_DWORD *)(v7 + 8) = LODWORD(result);
  *a2 = (void *)(v7 + 12);
  *a3 += 12;
  v8 = *((_DWORD *)this + 42);
  if ((v8 & 0x80000000) == 0)
  {
    *(_QWORD *)&result = 0x473616432;
    *(_QWORD *)(v7 + 12) = 0x473616432;
    *(_DWORD *)(v7 + 20) = v8;
    *a2 = (void *)(v7 + 24);
    *a3 += 12;
    *((_DWORD *)this + 42) = -1;
  }
  return result;
}

void AUMatrixReverbLite::~AUMatrixReverbLite(AUMatrixReverbLite *this)
{
  *(_QWORD *)this = &off_24CA8FF40;
  CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((_QWORD *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
}

{
  *(_QWORD *)this = &off_24CA8FF40;
  CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((_QWORD *)this + 66, 0);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUMatrixReverbLite::Initialize(AUMatrixReverbLite *this)
{
  ausdk::AUScope *v2;
  int v3;
  double v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;

  v2 = (AUMatrixReverbLite *)((char *)this + 80);
  if (!*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0) + 108)
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) > 0xCu
    || *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) == 2
    && *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108) == 1)
  {
    return 4294956428;
  }
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108) >= 3u)
  {
    v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108);
    if (v3 != *(_DWORD *)(ausdk::AUScope::SafeGetElement(v2, 0) + 108))
      return 4294956428;
  }
  v4 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v4 != *(double *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 80))
    return 4294956428;
  *((_DWORD *)this + 135) = *((_DWORD *)this + 134);
  v6 = operator new();
  *(_QWORD *)v6 = 0x3CA3D70A3BA3D70ALL;
  *(_OWORD *)(v6 + 8) = xmmword_210B0A370;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v6 + 24) = _D0;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_QWORD *)(v6 + 104) = 0;
  for (i = 112; i != 1264; i += 72)
  {
    v13 = v6 + i;
    *(_QWORD *)(v13 + 48) = 0;
    *(_OWORD *)(v13 + 16) = 0uLL;
    *(_OWORD *)(v13 + 32) = 0uLL;
    *(_OWORD *)v13 = 0uLL;
  }
  *(_DWORD *)(v6 + 32) = 1065353216;
  CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((_QWORD *)this + 66, v6);
  v14 = *((_QWORD *)this + 66);
  v19 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v19);
  v15 = v19;
  v19 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 3, 0, 0, &v19);
  v16 = v19;
  v19 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 6, 0, 0, &v19);
  FeedbackDelayNetwork<float>::SetDelayTime(v14, v19, v15, v16, v4);
  v17 = *((_QWORD *)this + 66);
  v19 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v19);
  v18 = v19;
  v19 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 5, 0, 0, &v19);
  FeedbackDelayNetwork<float>::SetDecayTime(v17, v18, v19);
  FeedbackDelayNetwork<float>::Reset(*((_OWORD **)this + 66));
  return 0;
}

_QWORD *AUMatrixReverbLite::Cleanup(AUMatrixReverbLite *this)
{
  return CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set((_QWORD *)this + 66, 0);
}

uint64_t AUMatrixReverbLite::Reset(AUMatrixReverbLite *this)
{
  _OWORD *v1;

  v1 = (_OWORD *)*((_QWORD *)this + 66);
  if (v1)
    FeedbackDelayNetwork<float>::Reset(v1);
  return 0;
}

uint64_t AUMatrixReverbLite::GetPropertyInfo(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;

  result = 4294956417;
  if (!a3)
  {
    if (a2 > 55)
    {
      if (a2 == 56)
      {
        v7 = 1;
        v8 = 8;
      }
      else
      {
        if (a2 != 57)
          return result;
        v7 = 0;
        v8 = 168;
      }
    }
    else
    {
      v7 = 1;
      v8 = 4;
      if (a2 != 10 && a2 != 21)
        return result;
    }
    result = 0;
    *a5 = v8;
    *a6 = v7;
  }
  return result;
}

uint64_t AUMatrixReverbLite::GetProperty(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (a3)
    return 4294956417;
  if (a2 == 10)
  {
    v6 = *((_DWORD *)this + 139);
LABEL_8:
    result = 0;
    *a5 = v6;
    return result;
  }
  if (a2 != 57)
  {
    if (a2 != 21)
      return 4294956417;
    v6 = *((unsigned __int8 *)this + 560);
    goto LABEL_8;
  }
  v7 = 0;
  v8 = *((_QWORD *)this + 1);
  do
  {
    v9 = overviewParameterIDs[v7];
    *(_QWORD *)a5 = v8;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v9;
    ++v7;
    a5 += 6;
  }
  while (v7 != 7);
  return 0;
}

uint64_t AUMatrixReverbLite::SetProperty(AUMatrixReverbLite *this, int a2, int a3, unsigned int a4, unsigned int *a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, unsigned int *);
  uint64_t v11;
  unsigned int v12;
  const AUPreset *v13;
  _Unwind_Exception *v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 10:
      if (a6 < 4)
        return 4294956445;
      v11 = 0;
      v12 = *a5;
      result = 4294956445;
      while (1)
      {
        v13 = (const AUPreset *)((char *)&sRoomPresets + v11);
        if (v12 == *(_DWORD *)((char *)&sRoomPresets + v11))
          break;
        v11 += 16;
        if (v11 == 208)
          return result;
      }
      AUMatrixReverbLite::SetRoomType(this, v12);
      ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, v13);
      return 0;
    case 56:
      v9 = *((_QWORD *)this + 1);
      v16 = 0;
      v17 = &v16;
      v18 = 0x2000000000;
      v10 = (uint64_t (*)(uint64_t, unsigned int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      v19 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
      {
        v15[0] = MEMORY[0x24BDAC760];
        v15[1] = 0x40000000;
        v15[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3220;
        v15[3] = &unk_24CA96C10;
        v15[4] = &v16;
        ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3220((uint64_t)v15);
        v10 = (uint64_t (*)(uint64_t, unsigned int *))v17[3];
      }
      _Block_object_dispose(&v16, 8);
      if (!v10)
      {
        dlerror();
        v14 = (_Unwind_Exception *)abort_report_np();
        _Block_object_dispose(&v16, 8);
        _Unwind_Resume(v14);
      }
      return v10(v9, a5);
    case 21:
      if (a6 >= 4)
      {
        result = 0;
        *((_BYTE *)this + 560) = *a5 != 0;
        return result;
      }
      return 4294956445;
    default:
      return 4294956417;
  }
}

uint64_t AUMatrixReverbLite::SetParameter(AUMatrixReverbLite *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;

  Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
  Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
  ausdk::AUElement::SetParameter(Element, a2, a5, 0);
  if (a2 - 2 <= 4)
    ++*((_DWORD *)this + 134);
  return 0;
}

uint64_t AUMatrixReverbLite::CanScheduleParameters(AUMatrixReverbLite *this)
{
  return 0;
}

uint64_t AUMatrixReverbLite::ProcessMultipleBufferLists(AUMatrixReverbLite *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  uint64_t result;
  unsigned int *v10;
  uint64_t v11;
  UInt32 mNumberBuffers;
  UInt32 v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  int v23;
  float v24;
  float v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float *v40;
  float *v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t *v76;
  float v77;
  uint64_t *v78;
  float *v79;
  uint64_t v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  uint64_t v88;
  float v89;
  _DWORD *v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  result = 4294956428;
  if (a4 == 1 && a6 == 1)
  {
    v10 = (unsigned int *)*a5;
    v11 = (uint64_t)*a7;
    mNumberBuffers = (*a5)->mNumberBuffers;
    v13 = (*a7)->mNumberBuffers;
    if (mNumberBuffers == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0) + 108)
      && v13 == *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108))
    {
      v15 = *((_QWORD *)v10 + 2);
      v16 = *(_QWORD *)(v11 + 16);
      if (v13 == 2)
      {
        if (mNumberBuffers == 2)
          v17 = *((_QWORD *)v10 + 4);
        else
          v17 = 0;
        v21 = *(_QWORD *)(v11 + 32);
        if (*((_BYTE *)this + 560))
        {
          v22 = (const void *)v17;
          memcpy(*(void **)(v11 + 16), *((const void **)v10 + 2), 4 * a3);
          if (!v21)
            return 0;
          if (v22)
          {
            v20 = v22;
            v19 = (void *)v21;
          }
          else
          {
            v19 = (void *)v21;
            v20 = (const void *)v15;
          }
          v18 = 4 * a3;
LABEL_48:
          memcpy(v19, v20, v18);
          return 0;
        }
        v94 = v17;
      }
      else
      {
        if (*((_BYTE *)this + 560))
        {
          v18 = 4 * a3;
          v19 = *(void **)(v11 + 16);
          v20 = (const void *)*((_QWORD *)v10 + 2);
          goto LABEL_48;
        }
        v21 = 0;
        v94 = 0;
      }
      if (*((_BYTE *)this + 561))
        v14.n128_f64[0] = FeedbackDelayNetwork<float>::Reset(*((_OWORD **)this + 66));
      v23 = *((_DWORD *)this + 134);
      if (v23 != *((_DWORD *)this + 135))
      {
        v93 = v21;
        *((_DWORD *)this + 135) = v23;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v95, v14);
        v24 = v95;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 3, 0, 0, &v95);
        v25 = v95;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 6, 0, 0, &v95);
        v26 = v95;
        v27 = *(double *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 80);
        if (v24 != *((float *)this + 137) || v25 != *((float *)this + 138) || *((_DWORD *)this + 136) != v26)
        {
          FeedbackDelayNetwork<float>::SetDelayTime(*((_QWORD *)this + 66), v27, v24, v25, (double)v26);
          *((float *)this + 137) = v24;
          *((float *)this + 138) = v25;
          *((_DWORD *)this + 136) = v26;
        }
        v28 = *((_QWORD *)this + 66);
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 2, 0, 0, &v95);
        v29 = v95;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 3, 0, 0, &v95);
        v30 = v95;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 6, 0, 0, &v95);
        FeedbackDelayNetwork<float>::SetDelayTime(v28, v95, v29, v30, v27);
        v31 = *((_QWORD *)this + 66);
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v95);
        v32 = v95;
        v95 = 1.0;
        (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 5, 0, 0, &v95);
        FeedbackDelayNetwork<float>::SetDecayTime(v31, v32, v95);
        v14.n128_f64[0] = FeedbackDelayNetwork<float>::Reset(*((_OWORD **)this + 66));
        v21 = v93;
      }
      v95 = 0.0;
      (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, 1, 0, 0, &v95, v14);
      v33 = __exp10f(v95 * 0.05);
      v34 = (float *)*((_QWORD *)this + 66);
      v34[6] = v33;
      v34[9] = v33 * v34[7];
      v95 = 1.0;
      (*(void (**)(AUMatrixReverbLite *, _QWORD, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 0, 0, 0, &v95);
      v35 = (float *)*((_QWORD *)this + 66);
      v35[8] = v95 * 0.01;
      if (mNumberBuffers >= 3 && mNumberBuffers == v13)
      {
        v36 = *v10;
        if (v36 <= 0xC && a3)
        {
          v37 = 0;
          v38 = 1.0 / (float)(sqrtf((float)v36) * 1.4142);
          do
          {
            v39 = 0;
            v40 = &v95;
            do
            {
              v41 = &v35[v39];
              v42 = v35[v39 + 39];
              v43 = (float)(*(float *)(*(_QWORD *)&v35[v39 + 28]
                                     + 4 * (LODWORD(v35[v39 + 38]) & LODWORD(v42)))
                          * v35[v39 + 35])
                  + (float)(v35[v39 + 34] * v35[v39 + 36]);
              *v40++ = v43;
              v41[36] = v43;
              *((_DWORD *)v41 + 39) = LODWORD(v42) + 1;
              v39 += 18;
            }
            while (v39 != 288);
            v44 = (float)(v95 + v96) + (float)(v97 + v98);
            v45 = (float)(v95 - v96) + (float)(v97 - v98);
            v46 = (float)(v95 + v96) - (float)(v97 + v98);
            v47 = (float)(v95 - v96) - (float)(v97 - v98);
            v48 = (float)(v99 + v100) + (float)(v101 + v102);
            v49 = (float)(v99 - v100) + (float)(v101 - v102);
            v50 = (float)(v99 + v100) - (float)(v101 + v102);
            v51 = (float)(v99 - v100) - (float)(v101 - v102);
            v52 = (float)(v103 + v104) + (float)(v105 + v106);
            v53 = (float)(v103 - v104) + (float)(v105 - v106);
            v54 = (float)(v103 + v104) - (float)(v105 + v106);
            v55 = (float)(v103 - v104) - (float)(v105 - v106);
            v56 = (float)(v107 + v108) + (float)(v109 + v110);
            v57 = (float)(v107 - v108) + (float)(v109 - v110);
            v58 = (float)(v107 + v108) - (float)(v109 + v110);
            v59 = (float)(v107 - v108) - (float)(v109 - v110);
            v60 = v44 + v48;
            v61 = v45 + v49;
            v62 = v46 + v50;
            v63 = v47 + v51;
            v64 = v44 - v48;
            v65 = v45 - v49;
            v66 = v46 - v50;
            v67 = v47 - v51;
            v68 = v52 + v56;
            v69 = v53 + v57;
            v70 = v54 + v58;
            v71 = v55 + v59;
            v72 = v52 - v56;
            v73 = v53 - v57;
            v74 = v54 - v58;
            v95 = v60 + v68;
            v96 = v61 + v69;
            v97 = v62 + v70;
            v98 = v63 + (float)(v55 + v59);
            v99 = v64 + v72;
            v100 = v65 + v73;
            v75 = v55 - v59;
            v101 = v66 + v74;
            v102 = v67 + v75;
            v103 = v60 - v68;
            v104 = v61 - v69;
            v105 = v62 - v70;
            v106 = v63 - v71;
            v107 = v64 - v72;
            v108 = v65 - v73;
            v109 = v66 - v74;
            v110 = v67 - v75;
            if ((_DWORD)v36)
            {
              v76 = (uint64_t *)(v10 + 4);
              v77 = 0.0;
              v78 = (uint64_t *)(v11 + 16);
              v79 = &v96;
              v80 = v36;
              v81 = v35 + 14;
              do
              {
                v83 = *v76;
                v76 += 2;
                v82 = v83;
                v85 = *v78;
                v78 += 2;
                v84 = v85;
                v77 = v77 + *(float *)(v82 + 4 * v37);
                *(float *)&v85 = *v79++;
                v86 = *(float *)&v85 * v35[10];
                v87 = v35[11] * *v81;
                *(_DWORD *)v81++ = v85;
                *(float *)(v84 + 4 * v37) = *(float *)(v82 + 4 * v37)
                                          + (float)(v35[8]
                                                  * (float)((float)((float)(v86 + v87) * v35[9])
                                                          - *(float *)(v82 + 4 * v37)));
                --v80;
              }
              while (v80);
            }
            else
            {
              v77 = 0.0;
            }
            v88 = 0;
            v89 = v38 * v77;
            v90 = v35 + 40;
            do
            {
              v91 = *v90;
              *(float *)(*((_QWORD *)v90 - 6) + 4 * (*(v90 - 2) & *v90)) = v89
                                                                                         + *(float *)((char *)&v95 + v88);
              *v90 = v91 + 1;
              v90 += 18;
              v88 += 4;
            }
            while (v88 != 64);
            ++v37;
          }
          while (v37 != a3);
        }
      }
      else if (v21)
      {
        if (v94)
          FeedbackDelayNetwork<float>::ProcessStereo(v35, a3, v15, v94, v16, v21);
        else
          FeedbackDelayNetwork<float>::ProcessMonoToStereo(v35, a3, v15, v16, v21);
      }
      else
      {
        FeedbackDelayNetwork<float>::ProcessMono(v35, a3, v15, v16);
      }
      if (*((_BYTE *)this + 560))
      {
        if (!*((_BYTE *)this + 561))
        {
          v92 = 0;
LABEL_57:
          AUMatrixReverbLite::RampOutput(this, a3, v92);
          goto LABEL_58;
        }
      }
      else if (!*((_BYTE *)this + 561))
      {
LABEL_58:
        result = 0;
        *((_BYTE *)this + 561) = *((_BYTE *)this + 560);
        return result;
      }
      v92 = 1;
      goto LABEL_57;
    }
    return 4294967246;
  }
  return result;
}

uint64_t AUMatrixReverbLite::Render(AUMatrixReverbLite *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  ausdk::AUInputElement *Element;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t BufferList;
  unsigned int v15;

  v15 = 0;
  v8 = (AUMatrixReverbLite *)((char *)this + 80);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 80), 0);
  result = ausdk::AUInputElement::PullInput(Element, &v15, a3, 0, a4);
  if (!(_DWORD)result)
  {
    v11 = ausdk::AUScope::SafeGetElement(v8, 0);
    BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
    v12 = ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0);
    v13 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    return (*(uint64_t (**)(AUMatrixReverbLite *, unsigned int *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 184))(this, a2, a4, 1, &BufferList, 1, &v13);
  }
  return result;
}

uint64_t AUMatrixReverbLite::GetParameterInfo(AUMatrixReverbLite *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v7;
  const __CFString *v8;
  AudioUnitParameterValue v9;
  const __CFString *v10;
  AudioUnitParameterOptions flags;
  int v12;
  const __CFString *v13;
  AudioUnitParameterOptions v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  _OWORD v18[10];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  v18[6] = xmmword_24CA96BC8;
  v18[7] = *(_OWORD *)&off_24CA96BD8;
  v18[8] = xmmword_24CA96BE8;
  v18[9] = *(_OWORD *)off_24CA96BF8;
  v18[2] = xmmword_24CA96B88;
  v18[3] = *(_OWORD *)&off_24CA96B98;
  v18[4] = xmmword_24CA96BA8;
  v18[5] = *(_OWORD *)&off_24CA96BB8;
  v18[0] = xmmword_24CA96B68;
  v18[1] = *(_OWORD *)&off_24CA96B78;
  if (!LocalizeAUParameterStringsForClass<AUMatrixReverbLite>(std::initializer_list<__CFString const**>)::sLocalized)
    LocalizeAUParameterStringsForClass<AUMatrixReverbLite>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v18, 20);
  switch(a3)
  {
    case 0:
      v7 = (const __CFString *)kDryWetMix_Name;
      buffer->cfNameString = (CFStringRef)kDryWetMix_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v7, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Percent;
      *(_QWORD *)&buffer->minValue = 0x42C8000000000000;
      buffer->defaultValue = 50.0;
      return result;
    case 1:
      v15 = (const __CFString *)kGain_Name;
      buffer->cfNameString = (CFStringRef)kGain_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v15, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C1A00000;
      buffer->defaultValue = 0.0;
      return result;
    case 2:
      v8 = (const __CFString *)kMinDelayTime_Name;
      buffer->cfNameString = (CFStringRef)kMinDelayTime_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3F80000038D1B717;
      v9 = 0.008;
      goto LABEL_9;
    case 3:
      v10 = (const __CFString *)kMaxDelayTime_Name;
      buffer->cfNameString = (CFStringRef)kMaxDelayTime_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3F80000038D1B717;
      v9 = 0.05;
LABEL_9:
      flags = buffer->flags;
      v12 = 20971520;
      goto LABEL_11;
    case 4:
      v13 = (const __CFString *)kDecayTime0Hz_Name;
      buffer->cfNameString = (CFStringRef)kDecayTime0Hz_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v13, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x41A000003A83126FLL;
      v9 = 1.0;
      flags = buffer->flags;
      v12 = 327680;
LABEL_11:
      v14 = flags | v12;
      break;
    case 5:
      v16 = (const __CFString *)kDecayTimeNyq_Name;
      buffer->cfNameString = (CFStringRef)kDecayTimeNyq_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x41A000003A83126FLL;
      v9 = 1.0;
      v14 = buffer->flags | 0x400000;
      break;
    case 6:
      v17 = (const __CFString *)kRandomize_Name;
      buffer->cfNameString = (CFStringRef)kRandomize_Name;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v17, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Generic;
      *(_QWORD *)&buffer->minValue = 0x447A00003F800000;
      v9 = 1.0;
      v14 = buffer->flags | 0x1000000;
      break;
    default:
      return 4294956418;
  }
  buffer->defaultValue = v9;
  buffer->flags = v14;
  return result;
}

uint64_t AUMatrixReverbLite::GetPresets(AUMatrixReverbLite *this, const __CFArray **a2)
{
  __CFArray *Mutable;
  uint64_t i;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 13, 0);
    for (i = 0; i != 208; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sRoomPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUMatrixReverbLite::NewFactoryPresetSet(AUMatrixReverbLite *this, const AUPreset *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = 0;
  while (1)
  {
    v4 = (unsigned int *)((char *)&sRoomPresets + v3);
    if (a2->presetNumber == *(_DWORD *)((char *)&sRoomPresets + v3))
      break;
    v3 += 16;
    if (v3 == 208)
      return 4294956445;
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)((char *)&sRoomPresets + v3));
  AUMatrixReverbLite::SetRoomType(this, *v4);
  return 0;
}

double AUMatrixReverbLite::GetTailTime(AUMatrixReverbLite *this)
{
  float v2;

  v2 = 1.0;
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v2);
  return v2 * 3.0;
}

uint64_t AUMatrixReverbLite::SupportsTail(AUMatrixReverbLite *this)
{
  return 1;
}

BOOL AUMatrixReverbLite::StreamFormatWritable(AUMatrixReverbLite *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUMatrixReverbLite::SupportedNumChannels(AUMatrixReverbLite *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUMatrixReverbLite::SupportedNumChannels(AUChannelInfo const**)::sSupportedChannelConfigs;
  return 13;
}

BOOL AUMatrixReverbLite::ValidFormat(AUMatrixReverbLite *this, unsigned int a2, unsigned int a3, AudioStreamBasicDescription *a4)
{
  int v5;
  _BOOL8 result;
  UInt32 mChannelsPerFrame;
  BOOL v9;
  int v10;

  v9 = 0;
  v10 = 0;
  v5 = CAStreamBasicDescription::IdentifyCommonPCMFormat(a4, &v10, &v9);
  result = 0;
  if (v5 && v10 == 1)
  {
    mChannelsPerFrame = a4->mChannelsPerFrame;
    return mChannelsPerFrame - 13 >= 0xFFFFFFF4 && (mChannelsPerFrame < 2 || !v9);
  }
  return result;
}

uint64_t AUMatrixReverbLite::Version(AUMatrixReverbLite *this)
{
  return 0x10000;
}

uint64_t AUMatrixReverbLite::SetRoomType(AUMatrixReverbLite *this, unsigned int a2)
{
  float *v3;

  v3 = (float *)((char *)&sRoomPresetValues + 16 * a2);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 2, 0, 0, 0, *v3);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 3, 0, 0, 0, v3[1]);
  (*(void (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 4, 0, 0, 0, v3[2]);
  return (*(uint64_t (**)(AUMatrixReverbLite *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this
                                                                                                 + 152))(this, 5, 0, 0, 0, v3[3]);
}

double FeedbackDelayNetwork<float>::Reset(_OWORD *a1)
{
  uint64_t i;
  char *v3;
  uint64_t v4;
  double result;

  for (i = 0; i != 1152; i += 72)
  {
    v3 = (char *)a1 + i;
    v4 = *(unsigned int *)((char *)a1 + i + 148);
    if ((_DWORD)v4)
      bzero(*((void **)v3 + 14), 4 * v4);
    *(_QWORD *)(v3 + 156) = *((_DWORD *)v3 + 38) & -*((_DWORD *)v3 + 41);
    *((_DWORD *)v3 + 36) = 0;
  }
  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  return result;
}

void FeedbackDelayNetwork<float>::SetDelayTime(uint64_t a1, unsigned int a2, float a3, float a4, double a5)
{
  long double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t j;
  int v19;
  uint64_t Prime;

  v10 = pow((float)(a4 / a3), 0.0666666667);
  v11 = a3;
  LODWORD(v12) = vcvtmd_u64_f64(a5 * v11 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 112, v12, a5);
  LODWORD(v13) = vcvtmd_u64_f64(a5 * a4 + 0.5);
  FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 1192, v13, a5);
  srandom(a2);
  for (i = 0; i != 1008; i += 72)
  {
    v11 = v10 * v11;
    v15 = random();
    v16 = v11 * pow(v10, ((double)v15 / 2147483650.0 + -0.5) * 0.8);
    LODWORD(v17) = vcvtmd_u64_f64(a5 * v16 + 0.5);
    FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + 184 + i, v17, a5);
  }
  for (j = 0; j != 1080; j += 72)
  {
    v19 = *(_DWORD *)(a1 + j + 236);
    if (v19 == *(_DWORD *)(a1 + j + 164))
    {
      Prime = NextPrime((v19 + 1));
      FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(a1 + j + 184, Prime, a5);
    }
  }
}

float FeedbackDelayNetwork<float>::SetDecayTime(uint64_t a1, float a2, float a3)
{
  uint64_t v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float result;

  v4 = 0;
  if (a3 > a2)
    a3 = a2;
  v5 = a2;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  v6 = 1.0 - (float)(a2 / a3) * (float)(a2 / a3);
  v7 = 0.0;
  do
  {
    v8 = a1 + v4;
    v9 = *(double *)(a1 + v4 + 168) * -3.0 / v5;
    v10 = fmax(__exp10(v9), 0.0001);
    v11 = v6 * (v9 * 0.575646273);
    if (v11 > 0.99)
      v11 = 0.99;
    v12 = v10 * (1.0 - v11);
    v13 = v12 * 0.25;
    *(float *)&v12 = v12;
    *(_DWORD *)(v8 + 176) = LODWORD(v12);
    *(float *)&v12 = v11;
    v14 = v13;
    *(_DWORD *)(v8 + 136) = LODWORD(v12);
    *(float *)(v8 + 140) = v14;
    v7 = v7 + v14;
    v4 += 72;
  }
  while (v4 != 1152);
  *(float *)(a1 + 28) = 1.0 / v7;
  v15 = *(double *)(a1 + 16) / *(double *)(a1 + 8);
  v16 = (1.0 - v15) / (v15 + 1.0);
  v17 = 1.0 / (1.0 - v16);
  *(float *)(a1 + 36) = (float)(1.0 / v7) * *(float *)(a1 + 24);
  *(float *)(a1 + 40) = v17;
  result = -(float)(v16 * v17);
  *(float *)(a1 + 44) = result;
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessStereo(float *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  _DWORD *v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v7 = 0;
      v8 = &v56;
      do
      {
        v9 = &result[v7];
        v10 = result[v7 + 39];
        v11 = (float)(*(float *)(*(_QWORD *)&result[v7 + 28]
                               + 4 * (LODWORD(result[v7 + 38]) & LODWORD(v10)))
                    * result[v7 + 35])
            + (float)(result[v7 + 34] * result[v7 + 36]);
        *v8++ = v11;
        v9[36] = v11;
        *((_DWORD *)v9 + 39) = LODWORD(v10) + 1;
        v7 += 18;
      }
      while (v7 != 288);
      v12 = 0;
      v13 = (float)(v56 + v57) + (float)(v58 + v59);
      v14 = (float)(v56 - v57) + (float)(v58 - v59);
      v15 = (float)(v56 + v57) - (float)(v58 + v59);
      v16 = (float)(v56 - v57) - (float)(v58 - v59);
      v17 = (float)(v60 + v61) + (float)(v62 + v63);
      v18 = (float)(v60 - v61) + (float)(v62 - v63);
      v19 = (float)(v60 + v61) - (float)(v62 + v63);
      v20 = (float)(v60 - v61) - (float)(v62 - v63);
      v21 = (float)(v64 + v65) + (float)(v66 + v67);
      v22 = (float)(v64 - v65) + (float)(v66 - v67);
      v23 = (float)(v64 + v65) - (float)(v66 + v67);
      v24 = (float)(v64 - v65) - (float)(v66 - v67);
      v25 = (float)(v68 + v69) + (float)(v70 + v71);
      v26 = (float)(v68 - v69) + (float)(v70 - v71);
      v27 = (float)(v68 + v69) - (float)(v70 + v71);
      v28 = (float)(v68 - v69) - (float)(v70 - v71);
      v29 = v13 + v17;
      v30 = v14 + v18;
      v31 = v15 + v19;
      v32 = v16 + v20;
      v33 = v13 - v17;
      v34 = v14 - v18;
      v35 = v15 - v19;
      v36 = v16 - v20;
      v37 = v21 + v25;
      v38 = v22 + v26;
      v39 = v23 + v27;
      v40 = v24 + v28;
      v41 = v21 - v25;
      v42 = v22 - v26;
      v43 = v23 - v27;
      v44 = v24 - v28;
      v56 = v29 + v37;
      v57 = v30 + v38;
      v58 = v31 + v39;
      v59 = v32 + v40;
      v60 = v33 + v41;
      v61 = v34 + v42;
      v62 = v35 + v43;
      v63 = v36 + v44;
      v64 = v29 - v37;
      v65 = v30 - v38;
      v66 = v31 - v39;
      v67 = v32 - v40;
      v68 = v33 - v41;
      v69 = v34 - v42;
      v70 = v35 - v43;
      v71 = v36 - v44;
      v45 = result[10];
      v46 = result[11];
      v47 = (float)((float)(v30 + v38) * v45) + (float)(v46 * result[12]);
      v48 = (float)(v45 * (float)(v31 + v39)) + (float)(v46 * result[13]);
      result[12] = v30 + v38;
      result[13] = v31 + v39;
      v49 = result[9];
      v50 = v47 * v49;
      v51 = v48 * v49;
      v52 = *(float *)(a3 + 4 * i);
      v53 = *(float *)(a4 + 4 * i);
      *(float *)(a5 + 4 * i) = v52 + (float)((float)(v50 - v52) * result[8]);
      *(float *)(a6 + 4 * i) = v53 + (float)((float)(v51 - v53) * result[8]);
      v54 = result + 40;
      do
      {
        v55 = *v54;
        *(float *)(*((_QWORD *)v54 - 6) + 4 * (*(v54 - 2) & *v54)) = (float)((float)(v52 + v53) * 0.5)
                                                                                   + *(float *)((char *)&v56 + v12);
        *v54 = v55 + 1;
        v54 += 18;
        v12 += 4;
      }
      while (v12 != 64);
    }
  }
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessMonoToStereo(float *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  _DWORD *v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v6 = 0;
      v7 = &v54;
      do
      {
        v8 = &result[v6];
        v9 = result[v6 + 39];
        v10 = (float)(*(float *)(*(_QWORD *)&result[v6 + 28]
                               + 4 * (LODWORD(result[v6 + 38]) & LODWORD(v9)))
                    * result[v6 + 35])
            + (float)(result[v6 + 34] * result[v6 + 36]);
        *v7++ = v10;
        v8[36] = v10;
        *((_DWORD *)v8 + 39) = LODWORD(v9) + 1;
        v6 += 18;
      }
      while (v6 != 288);
      v11 = 0;
      v12 = (float)(v54 + v55) + (float)(v56 + v57);
      v13 = (float)(v54 - v55) + (float)(v56 - v57);
      v14 = (float)(v54 + v55) - (float)(v56 + v57);
      v15 = (float)(v54 - v55) - (float)(v56 - v57);
      v16 = (float)(v58 + v59) + (float)(v60 + v61);
      v17 = (float)(v58 - v59) + (float)(v60 - v61);
      v18 = (float)(v58 + v59) - (float)(v60 + v61);
      v19 = (float)(v58 - v59) - (float)(v60 - v61);
      v20 = (float)(v62 + v63) + (float)(v64 + v65);
      v21 = (float)(v62 - v63) + (float)(v64 - v65);
      v22 = (float)(v62 + v63) - (float)(v64 + v65);
      v23 = (float)(v62 - v63) - (float)(v64 - v65);
      v24 = (float)(v66 + v67) + (float)(v68 + v69);
      v25 = (float)(v66 - v67) + (float)(v68 - v69);
      v26 = (float)(v66 + v67) - (float)(v68 + v69);
      v27 = (float)(v66 - v67) - (float)(v68 - v69);
      v28 = v12 + v16;
      v29 = v13 + v17;
      v30 = v14 + v18;
      v31 = v15 + v19;
      v32 = v12 - v16;
      v33 = v13 - v17;
      v34 = v14 - v18;
      v35 = v15 - v19;
      v36 = v20 + v24;
      v37 = v21 + v25;
      v38 = v22 + v26;
      v39 = v23 + v27;
      v40 = v20 - v24;
      v41 = v21 - v25;
      v42 = v22 - v26;
      v43 = v23 - v27;
      v54 = v28 + v36;
      v55 = v29 + v37;
      v56 = v30 + v38;
      v57 = v31 + v39;
      v58 = v32 + v40;
      v59 = v33 + v41;
      v60 = v34 + v42;
      v61 = v35 + v43;
      v62 = v28 - v36;
      v63 = v29 - v37;
      v64 = v30 - v38;
      v65 = v31 - v39;
      v66 = v32 - v40;
      v67 = v33 - v41;
      v68 = v34 - v42;
      v69 = v35 - v43;
      v44 = result[10];
      v45 = result[11];
      v46 = (float)((float)(v29 + v37) * v44) + (float)(v45 * result[12]);
      v47 = (float)(v44 * (float)(v30 + v38)) + (float)(v45 * result[13]);
      result[12] = v29 + v37;
      result[13] = v30 + v38;
      v48 = result[9];
      v49 = v46 * v48;
      v50 = v47 * v48;
      v51 = *(float *)(a3 + 4 * i);
      *(float *)(a4 + 4 * i) = v51 + (float)(result[8] * (float)(v49 - v51));
      *(float *)(a5 + 4 * i) = v51 + (float)((float)(v50 - v51) * result[8]);
      v52 = result + 40;
      do
      {
        v53 = *v52;
        *(float *)(*((_QWORD *)v52 - 6) + 4 * (*(v52 - 2) & *v52)) = v51
                                                                                   + *(float *)((char *)&v54 + v11);
        *v52 = v53 + 1;
        v52 += 18;
        v11 += 4;
      }
      while (v11 != 64);
    }
  }
  return result;
}

float *FeedbackDelayNetwork<float>::ProcessMono(float *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _DWORD *v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v5 = 0;
      v6 = &v48;
      do
      {
        v7 = &result[v5];
        v8 = result[v5 + 39];
        v9 = (float)(*(float *)(*(_QWORD *)&result[v5 + 28]
                              + 4 * (LODWORD(result[v5 + 38]) & LODWORD(v8)))
                   * result[v5 + 35])
           + (float)(result[v5 + 34] * result[v5 + 36]);
        *v6++ = v9;
        v7[36] = v9;
        *((_DWORD *)v7 + 39) = LODWORD(v8) + 1;
        v5 += 18;
      }
      while (v5 != 288);
      v10 = 0;
      v11 = (float)(v48 + v49) + (float)(v50 + v51);
      v12 = (float)(v48 - v49) + (float)(v50 - v51);
      v13 = (float)(v48 + v49) - (float)(v50 + v51);
      v14 = (float)(v48 - v49) - (float)(v50 - v51);
      v15 = (float)(v52 + v53) + (float)(v54 + v55);
      v16 = (float)(v52 - v53) + (float)(v54 - v55);
      v17 = (float)(v52 + v53) - (float)(v54 + v55);
      v18 = (float)(v52 - v53) - (float)(v54 - v55);
      v19 = (float)(v56 + v57) + (float)(v58 + v59);
      v20 = (float)(v56 - v57) + (float)(v58 - v59);
      v21 = (float)(v56 + v57) - (float)(v58 + v59);
      v22 = (float)(v56 - v57) - (float)(v58 - v59);
      v23 = (float)(v60 + v61) + (float)(v62 + v63);
      v24 = (float)(v60 - v61) + (float)(v62 - v63);
      v25 = (float)(v60 + v61) - (float)(v62 + v63);
      v26 = (float)(v60 - v61) - (float)(v62 - v63);
      v27 = v11 + v15;
      v28 = v12 + v16;
      v29 = v13 + v17;
      v30 = v14 + v18;
      v31 = v11 - v15;
      v32 = v12 - v16;
      v33 = v13 - v17;
      v34 = v14 - v18;
      v35 = v19 + v23;
      v36 = v20 + v24;
      v37 = v21 + v25;
      v38 = v22 + v26;
      v39 = v19 - v23;
      v40 = v20 - v24;
      v41 = v21 - v25;
      v42 = v22 - v26;
      v48 = v27 + v35;
      v49 = v28 + v36;
      v50 = v29 + v37;
      v51 = v30 + v38;
      v52 = v31 + v39;
      v53 = v32 + v40;
      v54 = v33 + v41;
      v55 = v34 + v42;
      v56 = v27 - v35;
      v57 = v28 - v36;
      v58 = v29 - v37;
      v59 = v30 - v38;
      v60 = v31 - v39;
      v61 = v32 - v40;
      v62 = v33 - v41;
      v63 = v34 - v42;
      v43 = (float)((float)(v28 + v36) * result[10]) + (float)(result[11] * result[12]);
      result[12] = v28 + v36;
      v44 = v43 * result[9];
      v45 = *(float *)(a3 + 4 * i);
      *(float *)(a4 + 4 * i) = v45 + (float)(result[8] * (float)(v44 - v45));
      v46 = result + 40;
      do
      {
        v47 = *v46;
        *(float *)(*((_QWORD *)v46 - 6) + 4 * (*(v46 - 2) & *v46)) = v45
                                                                                   + *(float *)((char *)&v48 + v10);
        *v46 = v47 + 1;
        v46 += 18;
        v10 += 4;
      }
      while (v10 != 64);
    }
  }
  return result;
}

uint64_t AUMatrixReverbLite::RampOutput(AUMatrixReverbLite *this, unsigned int a2, int a3)
{
  ausdk::AUScope *v5;
  int v6;
  uint64_t Element;
  uint64_t result;
  float *v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (AUMatrixReverbLite *)((char *)this + 128);
  v6 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUMatrixReverbLite *)((char *)this + 128), 0) + 108);
  Element = ausdk::AUScope::SafeGetElement(v5, 0);
  result = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  v9 = *(float **)(result + 16);
  if (a3)
    v10 = 0.0;
  else
    v10 = 1.0;
  if (a3)
    v11 = 1.0 / (float)a2;
  else
    v11 = -(float)(1.0 / (float)a2);
  if (v6 == 2)
  {
    v12 = ausdk::AUScope::SafeGetElement(v5, 0);
    v13 = *(_DWORD *)(v12 + 92);
    result = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
    if ((v13 & 0x20) != 0)
    {
      v14 = *(float **)(result + 32);
      if (!a2)
        return result;
    }
    else
    {
      v14 = (float *)(*(_QWORD *)(result + 16) + 4);
      if (!a2)
        return result;
    }
    v16 = a2;
    do
    {
      *v9 = v10 * *v9;
      ++v9;
      *v14 = v10 * *v14;
      ++v14;
      v10 = v11 + v10;
      --v16;
    }
    while (v16);
  }
  else if (a2)
  {
    v15 = a2;
    do
    {
      *v9 = v10 * *v9;
      ++v9;
      v10 = v11 + v10;
      --v15;
    }
    while (v15);
  }
  return result;
}

double FeedbackDelayNetwork<float>::DelayLine::SetDelaySamples(uint64_t a1, uint64_t a2, double a3)
{
  int Prime;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double result;

  Prime = NextPrime(a2);
  *(_DWORD *)(a1 + 52) = Prime;
  v6 = (1 << -(char)__clz(Prime - 1));
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v6 - 1;
  std::vector<float>::resize((char **)a1, v6);
  v8 = *(char **)(a1 + 8);
  v9 = *(char **)a1;
  v10 = (uint64_t)&v8[-*(_QWORD *)a1] >> 2;
  if (v10 >= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2)
    goto LABEL_11;
  if (v8 == v9)
  {
    v15 = 0;
    v13 = 4 * v10;
    goto LABEL_8;
  }
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v8[-*(_QWORD *)a1] >> 2);
  v12 = *(char **)a1;
  v9 = *(char **)(a1 + 8);
  v13 = (uint64_t)&v11[4 * v10];
  v15 = &v11[4 * v14];
  if (v9 == *(char **)a1)
  {
LABEL_8:
    v16 = v13;
    goto LABEL_9;
  }
  v16 = v13;
  do
  {
    v17 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *(_DWORD *)(v16 - 4) = v17;
    v16 -= 4;
  }
  while (v9 != v12);
  v9 = v12;
LABEL_9:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v15;
  if (v9)
    operator delete(v9);
LABEL_11:
  v18 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v18)
    bzero(*(void **)a1, 4 * v18);
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  result = (double)v7 / a3;
  *(double *)(a1 + 56) = result;
  return result;
}

void sub_210AEBAF0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210AEBABCLL);
}

_QWORD *CADeprecated::CAAutoDelete<FeedbackDelayNetwork<float>>::set(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = *result;
  if (*result != a2)
  {
    v4 = result;
    if (v2)
    {
      v5 = 1152;
      do
      {
        v6 = *(void **)(v2 + v5 + 40);
        if (v6)
        {
          *(_QWORD *)(v2 + v5 + 48) = v6;
          operator delete(v6);
        }
        v5 -= 72;
      }
      while (v5);
      result = (_QWORD *)MEMORY[0x212BCDF50](v2, 0x1080C401ADC8BBCLL);
    }
    *v4 = a2;
  }
  return result;
}

_QWORD *AUMatrixReverbLiteFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x278uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixReverbLite>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUMatrixReverbLite>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void ECompressorKernel::~ECompressorKernel(ECompressorKernel *this)
{
  JUMPOUT(0x212BCDF50);
}

void ECompressorKernel::Reset(ECompressorKernel *this)
{
  CompressorKernel::Reset((ECompressorKernel *)((char *)this + 24));
}

void ECompressorKernel::Process(ausdk::AUEffectBase **this, float *a2, float *a3, int a4, BOOL *a5)
{
  float Parameter;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;

  Parameter = ausdk::AUEffectBase::GetParameter(this[1], 0);
  v10 = ausdk::AUEffectBase::GetParameter(this[1], 3u);
  v11 = ausdk::AUEffectBase::GetParameter(this[1], 1u);
  v12 = ausdk::AUEffectBase::GetParameter(this[1], 2u);
  v13 = ausdk::AUEffectBase::GetParameter(this[1], 4u);
  v14 = ausdk::AUEffectBase::GetParameter(this[1], 5u);
  v15 = ausdk::AUEffectBase::GetParameter(this[1], 6u);
  CompressorKernel::Process((CompressorKernel *)(this + 3), a2, a3, a4, 0, Parameter, v11, v10, v12, v13, v14, v15, 0, v16);
}

void AUDynamicsProcessor::~AUDynamicsProcessor(AUDynamicsProcessor *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24CA90460;
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    *((_QWORD *)this + 75) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_24CA94B10;
  v3 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24CA90460;
  v2 = (void *)*((_QWORD *)this + 74);
  if (v2)
  {
    *((_QWORD *)this + 75) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &off_24CA94B10;
  v3 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v3);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUDynamicsProcessor::Initialize(int64x2_t *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int i;

  v2 = ausdk::AUEffectBase::Initialize(this);
  if (!(_DWORD)v2)
  {
    v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 108);
    if (v3 == 2)
      v4 = 1;
    else
      v4 = v3;
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        ausdk::AUEffectBase::SetParameter((ausdk::AUEffectBase *)this, i + 1000, 0.0);
        ausdk::AUEffectBase::SetParameter((ausdk::AUEffectBase *)this, i + 2000, -120.0);
        ausdk::AUEffectBase::SetParameter((ausdk::AUEffectBase *)this, i + 3000, -120.0);
      }
    }
    if (this[237].i32[2] != v4)
    {
      this[237].i32[2] = v4;
      (*(void (**)(int64x2_t *, uint64_t, _QWORD, _QWORD))(this->i64[0] + 432))(this, 3, 0, 0);
    }
  }
  return v2;
}

double AUDynamicsProcessor::Cleanup(AUDynamicsProcessor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  *((_QWORD *)this + 75) = *((_QWORD *)this + 74);
  v2 = (_QWORD *)*((_QWORD *)this + 67);
  v3 = (_QWORD *)*((_QWORD *)this + 66);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 67) = v3;
  result = 0.0;
  *(_OWORD *)((char *)this + 568) = 0u;
  return result;
}

uint64_t AUDynamicsProcessor::Reset(AUDynamicsProcessor *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 66);
  v3 = (_QWORD *)*((_QWORD *)this + 67);
  while (v2 != v3)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 16))(*v2);
    ++v2;
  }
  CompressorKernel::Reset((AUDynamicsProcessor *)((char *)this + 616));
  return 0;
}

uint64_t AUDynamicsProcessor::GetPropertyInfo(AUDynamicsProcessor *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 57 || a3)
  {
    if (a2 != 56 || a3)
    {
      if (a3 || (a2 | 8) != 0x1D)
      {
        return 4294956417;
      }
      else
      {
        result = 0;
        *a6 = 1;
        *a5 = 4;
      }
    }
    else
    {
      result = 0;
      *a5 = 8;
      *a6 = 1;
    }
  }
  else
  {
    result = 0;
    *a5 = 168;
    *a6 = 0;
  }
  return result;
}

uint64_t AUDynamicsProcessor::GetProperty(AUDynamicsProcessor *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned __int8 *v9;

  if (a2 != 57 || a3)
  {
    if (a3)
      return 4294956417;
    if (a2 == 29)
    {
      v9 = (unsigned __int8 *)this + 554;
    }
    else
    {
      if (a2 != 21)
        return 4294956417;
      v9 = (unsigned __int8 *)this + 552;
    }
    result = 0;
    *a5 = *v9;
    return result;
  }
  v5 = 0;
  v6 = *((_QWORD *)this + 1);
  do
  {
    v7 = overviewParameterIDs[v5];
    *(_QWORD *)a5 = v6;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = v7;
    ++v5;
    a5 += 6;
  }
  while (v5 != 7);
  return 0;
}

uint64_t AUDynamicsProcessor::GetParameter(AUDynamicsProcessor *this, unsigned int a2, unsigned int a3, unsigned int a4, float *a5)
{
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  float Parameter;
  int v13;
  float *v14;
  float *v15;
  float v16;

  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope(this, a3);
LABEL_3:
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, a4);
    Parameter = ausdk::AUElement::GetParameter(Element, a2);
    goto LABEL_4;
  }
  v13 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 108);
  if (a2 >= 0x3E8 && v13 + 1000 > a2)
  {
    Parameter = 0.0;
    if (!*((_BYTE *)this + 552) && *((_BYTE *)this + 17))
    {
      if (v13 == 2)
        v14 = (float *)((char *)this + 1724);
      else
        v14 = (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 8 * (a2 - 1000)) + 1132);
      v16 = *v14;
      if (*v14 < 1.1755e-38)
        v16 = 1.1755e-38;
      Parameter = log10f(v16) * -20.0;
    }
    goto LABEL_4;
  }
  if (a2 >= 0x7D0 && v13 + 2000 > a2)
  {
    Parameter = 0.0;
    if (*((_BYTE *)this + 552) || !*((_BYTE *)this + 17))
      goto LABEL_4;
    if (v13 == 2)
      v15 = (float *)((char *)this + 1728);
    else
      v15 = (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 8 * (a2 - 2000)) + 1136);
LABEL_30:
    Parameter = *v15;
    goto LABEL_4;
  }
  if (a2 < 0xBB8 || v13 + 3000 <= a2)
  {
    Scope = (AUDynamicsProcessor *)((char *)this + 32);
    goto LABEL_3;
  }
  Parameter = 0.0;
  if (!*((_BYTE *)this + 552) && *((_BYTE *)this + 17))
  {
    if (v13 == 2)
      v15 = (float *)((char *)this + 1732);
    else
      v15 = (float *)(*(_QWORD *)(*((_QWORD *)this + 74) + 8 * (a2 - 3000)) + 1140);
    goto LABEL_30;
  }
LABEL_4:
  *a5 = Parameter;
  return 0;
}

uint64_t AUDynamicsProcessor::Render(int32x2_t *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4)
{
  ausdk::AUScope *v8;
  _DWORD *Element;
  uint64_t v10;
  ausdk::AUInputElement *v11;
  uint64_t v12;
  const AudioBufferList *BufferList;
  ausdk::AUInputElement *v14;
  const AudioBufferList *v15;
  ausdk::AUBufferList *v16;
  float *v17;
  int v18;
  uint64_t v19;
  float *v20;
  AudioBufferList *v22;
  ausdk::AUBufferList *v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  void **v31;
  int32x2_t v32;
  ausdk::AUElement *v33;
  ausdk::AUElement **v34;
  float Parameter;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  unsigned int v43;
  unsigned int v44;

  v8 = (ausdk::AUScope *)&this[10];
  Element = (_DWORD *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[10], 0);
  v10 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[16], 0);
  if (this[69].i8[0])
  {
    v44 = 0;
    v11 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    v12 = ausdk::AUInputElement::PullInput(v11, &v44, a3, 0, a4);
    if (!(_DWORD)v12)
    {
      if (this[69].i8[2] && *(_BYTE *)(v10 + 168))
      {
        BufferList = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
        ausdk::AUBufferList::SetBufferList((ausdk::AUBufferList *)(v10 + 144), BufferList);
      }
      else
      {
        v22 = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144));
        ausdk::AUBufferList::CopyBufferContentsTo((_QWORD *)Element + 18, v22);
      }
    }
  }
  else
  {
    if (Element[27] != 2)
      return ausdk::AUEffectBase::Render((ausdk::AUInputElement **)this, a2, a3, a4);
    v43 = 0;
    v14 = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement(v8, 0);
    v12 = ausdk::AUInputElement::PullInput(v14, &v43, a3, 0, a4);
    if (!(_DWORD)v12)
    {
      if (this[69].i8[2] && *(_BYTE *)(v10 + 168))
      {
        v15 = (const AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
        ausdk::AUBufferList::SetBufferList((ausdk::AUBufferList *)(v10 + 144), v15);
      }
      v16 = (ausdk::AUBufferList *)(v10 + 144);
      v17 = *(float **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v10 + 144)) + 16);
      v18 = *(_DWORD *)(v10 + 92);
      v19 = ausdk::AUBufferList::GetBufferList(v16);
      if ((v18 & 0x20) != 0)
        v20 = *(float **)(v19 + 32);
      else
        v20 = (float *)(*(_QWORD *)(v19 + 16) + 4);
      if ((v43 & 0x10) != 0)
      {
        *a2 |= 0x10u;
        if (!this[69].i8[2])
        {
          v28 = (_DWORD *)ausdk::AUBufferList::GetBufferList(v16);
          if (*v28)
          {
            v29 = v28;
            v30 = 0;
            v31 = (void **)(v28 + 4);
            do
            {
              bzero(*v31, *((unsigned int *)v31 - 1));
              ++v30;
              v31 += 2;
            }
            while (v30 < *v29);
          }
        }
        v12 = 0;
        this[216] = vdup_n_s32(0xC3200000);
        *(float *)&this[215].i32[1] = *(float *)&this[215].i32[1] * 0.98;
      }
      else
      {
        v23 = (ausdk::AUBufferList *)(Element + 36);
        v24 = *(float **)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36)) + 16);
        v25 = Element[23];
        v26 = ausdk::AUBufferList::GetBufferList(v23);
        if ((v25 & 0x20) != 0)
          v27 = *(float **)(v26 + 32);
        else
          v27 = (float *)(*(_QWORD *)(v26 + 16) + 4);
        v32 = this[9];
        if (v32)
        {
          v33 = (ausdk::AUElement *)(*(uint64_t (**)(int32x2_t, _QWORD))(**(_QWORD **)&v32 + 32))(v32, 0);
        }
        else
        {
          v34 = (ausdk::AUElement **)this[6];
          if ((ausdk::AUElement **)this[7] == v34)
            v33 = 0;
          else
            v33 = *v34;
        }
        Parameter = ausdk::AUElement::GetParameter(v33, 0);
        v36 = ausdk::AUElement::GetParameter(v33, 3u);
        v37 = ausdk::AUElement::GetParameter(v33, 1u);
        v38 = ausdk::AUElement::GetParameter(v33, 2u);
        v39 = ausdk::AUElement::GetParameter(v33, 4u);
        v40 = ausdk::AUElement::GetParameter(v33, 5u);
        v41 = ausdk::AUElement::GetParameter(v33, 6u);
        CompressorKernel::Process((CompressorKernel *)&this[77], v24, v17, a4, v27, Parameter, v37, v36, v38, v39, v40, v41, v20, v42);
        return 0;
      }
    }
  }
  return v12;
}

uint64_t AUDynamicsProcessor::GetParameterInfo(AUDynamicsProcessor *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v8;
  AudioUnitParameterValue v9;
  unsigned int v10;
  unsigned int v11;
  const __CFString *BandName;
  int v13;
  int v14;
  uint64_t v15;
  const __CFString *v16;
  AudioUnitParameterValue v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  const __CFString *v21;
  AudioUnitParameterOptions v22;
  const __CFString *v23;
  int v24;
  __CFString *v25;
  __CFString **v26;
  const __CFString *v27;
  int v28;
  int v29;
  AudioUnitParameterOptions v30;
  _OWORD v31[11];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  v31[8] = xmmword_24CA96CC8;
  v31[9] = *(_OWORD *)&off_24CA96CD8;
  v31[10] = xmmword_24CA96CE8;
  v31[4] = xmmword_24CA96C88;
  v31[5] = *(_OWORD *)&off_24CA96C98;
  v31[6] = xmmword_24CA96CA8;
  v31[7] = *(_OWORD *)&off_24CA96CB8;
  v31[0] = xmmword_24CA96C48;
  v31[1] = *(_OWORD *)&off_24CA96C58;
  v31[2] = xmmword_24CA96C68;
  v31[3] = *(_OWORD *)&off_24CA96C78;
  if (!LocalizeAUParameterStringsForClass<AUDynamicsProcessor>(std::initializer_list<__CFString const**>)::sLocalized)
    LocalizeAUParameterStringsForClass<AUDynamicsProcessor>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v31, 22);
  switch(a3)
  {
    case 0u:
      v8 = (const __CFString *)kCompressionThresholdParamName;
      buffer->cfNameString = (CFStringRef)kCompressionThresholdParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x41A00000C2C80000;
      v9 = -15.0;
      goto LABEL_21;
    case 1u:
      v20 = (const __CFString *)kHeadRoomParamName;
      buffer->cfNameString = (CFStringRef)kHeadRoomParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v20, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x422000003DCCCCCDLL;
      v9 = 5.6;
      goto LABEL_21;
    case 2u:
      v16 = (const __CFString *)kExpansionRatioParamName;
      buffer->cfNameString = (CFStringRef)kExpansionRatioParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v16, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Rate;
      *(_QWORD *)&buffer->minValue = 0x424800003F800000;
      v17 = 1.0;
      goto LABEL_23;
    case 3u:
      v18 = (const __CFString *)kExpansionThresholdParamName;
      buffer->cfNameString = (CFStringRef)kExpansionThresholdParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v18, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 3270508544;
      v9 = -100.0;
LABEL_21:
      buffer->defaultValue = v9;
      return result;
    case 4u:
      v19 = (const __CFString *)kAttackTimeParamName;
      buffer->cfNameString = (CFStringRef)kAttackTimeParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v19, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x3E99999A3A83126FLL;
      v17 = 0.05;
      goto LABEL_23;
    case 5u:
      v21 = (const __CFString *)kReleaseTimeParamName;
      buffer->cfNameString = (CFStringRef)kReleaseTimeParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v21, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Seconds;
      *(_QWORD *)&buffer->minValue = 0x404000003C23D70ALL;
      v17 = 0.03;
LABEL_23:
      v22 = buffer->flags | 0x400000;
      buffer->defaultValue = v17;
      buffer->flags = v22;
      return result;
    case 6u:
      v23 = (const __CFString *)kMasterGainParamName;
      buffer->cfNameString = (CFStringRef)kMasterGainParamName;
      buffer->flags |= 0x8000000u;
      CFStringGetCString(v23, buffer->name, 52, 0x8000100u);
      result = 0;
      buffer->unit = kAudioUnitParameterUnit_Decibels;
      *(_QWORD *)&buffer->minValue = 0x42200000C2200000;
      buffer->defaultValue = 0.0;
      return result;
    default:
      v10 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 108);
      if (v10 == 2)
        v11 = 1;
      else
        v11 = v10;
      if (a3 >= 0x3E8 && v11 + 1000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        BandName = GenerateBandName(a3 - 1000, v11, (BOOL *)v31, (__CFString *)kMeteringParamName, (const __CFString *const *)kMeteringParamNames);
        v13 = LOBYTE(v31[0]);
        buffer->cfNameString = BandName;
        if (v13)
          v14 = 134217744;
        else
          v14 = 0x8000000;
        buffer->flags |= v14;
        CFStringGetCString(BandName, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        v15 = 0x41A0000000000000;
LABEL_35:
        *(_QWORD *)&buffer->minValue = v15;
        v30 = buffer->flags & 0x7FFF7FFF | 0x8000;
        buffer->defaultValue = 0.0;
        buffer->flags = v30;
        return result;
      }
      v24 = a3 - 2000;
      if (a3 >= 0x7D0 && v11 + 2000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        v25 = (__CFString *)kInputAmpParamName;
        v26 = kInputAmpParamNames;
LABEL_31:
        v27 = GenerateBandName(v24, v11, (BOOL *)v31, v25, (const __CFString *const *)v26);
        v28 = LOBYTE(v31[0]);
        buffer->cfNameString = v27;
        if (v28)
          v29 = 134217744;
        else
          v29 = 0x8000000;
        buffer->flags |= v29;
        CFStringGetCString(v27, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        v15 = 0x41A00000C2F00000;
        goto LABEL_35;
      }
      result = 4294956418;
      if (a3 >= 0xBB8 && v11 + 3000 > a3)
      {
        LOBYTE(v31[0]) = 0;
        v25 = (__CFString *)kOutputAmpParamName;
        v26 = kOutputAmpParamNames;
        v24 = a3 - 3000;
        goto LABEL_31;
      }
      return result;
  }
}

uint64_t AUDynamicsProcessor::SaveState(AUDynamicsProcessor *this, __CFDictionary **a2)
{
  __CFDictionary *v3;
  CFNumberRef v4;
  int valuePtr;

  ausdk::AUBase::SaveState(this, a2);
  v3 = *a2;
  valuePtr = 1;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v3, CFSTR("ThresholdOK"), v4);
  CFRelease(v4);
  return 0;
}

uint64_t AUDynamicsProcessor::RestoreState(OpaqueAudioComponentInstance **this, const void *a2)
{
  uint64_t v4;
  float Parameter;
  float v6;

  v4 = ausdk::AUBase::RestoreState(this, a2);
  if (!(_DWORD)v4 && !CFDictionaryContainsKey((CFDictionaryRef)a2, CFSTR("ThresholdOK")))
  {
    Parameter = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 0);
    ausdk::AUEffectBase::SetParameter((ausdk::AUEffectBase *)this, 0, Parameter * 0.5);
    v6 = ausdk::AUEffectBase::GetParameter((ausdk::AUEffectBase *)this, 3u);
    ausdk::AUEffectBase::SetParameter((ausdk::AUEffectBase *)this, 3u, v6 * 0.5);
  }
  return v4;
}

uint64_t AUDynamicsProcessor::GetPresets(AUDynamicsProcessor *this, const __CFArray **a2)
{
  __CFArray *Mutable;
  uint64_t i;

  if (a2)
  {
    Mutable = CFArrayCreateMutable(0, 6, 0);
    for (i = 0; i != 96; i += 16)
      CFArrayAppendValue(Mutable, (char *)&sPresets + i);
    *a2 = Mutable;
  }
  return 0;
}

uint64_t AUDynamicsProcessor::NewFactoryPresetSet(AUDynamicsProcessor *this, const AUPreset *a2)
{
  uint64_t v3;
  SInt32 presetNumber;

  v3 = 0;
  presetNumber = a2->presetNumber;
  while (presetNumber != *(_DWORD *)((char *)&sPresets + v3))
  {
    v3 += 16;
    if (v3 == 96)
      return 4294956445;
  }
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)((char *)&sPresets + v3));
  AUDynamicsProcessor::SetParamsForPreset(this, presetNumber);
  return 0;
}

double AUDynamicsProcessor::GetLatency(AUDynamicsProcessor *this)
{
  return 256.0 / *(double *)(ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0) + 80);
}

double AUDynamicsProcessor::GetTailTime(AUDynamicsProcessor *this)
{
  return 0.2;
}

uint64_t AUDynamicsProcessor::SupportsTail(AUDynamicsProcessor *this)
{
  return 1;
}

BOOL AUDynamicsProcessor::StreamFormatWritable(AUDynamicsProcessor *this)
{
  return *((_BYTE *)this + 17) == 0;
}

void AUDynamicsProcessor::NewKernel(AUDynamicsProcessor *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24CA8F818;
  *(_QWORD *)(v4 + 8) = this;
  *(_DWORD *)(v4 + 24) = 1194083328;
  bzero((void *)(v4 + 28), 0x40CuLL);
  *(_DWORD *)(v4 + 1064) = 1215954944;
  *(_OWORD *)(v4 + 1068) = 0u;
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)(v4 + 1084) = xmmword_210B0A380;
  *(_OWORD *)(v4 + 1100) = _Q1;
  *(_OWORD *)(v4 + 1116) = xmmword_210B0A330;
  *(_DWORD *)(v4 + 1132) = 1065353216;
  *(int32x2_t *)(v4 + 1136) = vdup_n_s32(0xC2F00000);
  bzero((void *)(v4 + 1144), 0x804uLL);
  *(_DWORD *)(v4 + 3196) = 982044160;
  *(_BYTE *)(v4 + 3200) = 0;
  CompressorKernel::Reset((CompressorKernel *)(v4 + 24));
  v10 = (uint64_t *)*((_QWORD *)this + 75);
  v11 = *((_QWORD *)this + 76);
  if ((unint64_t)v10 >= v11)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 74);
    v14 = v10 - v13;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v13;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    *v19 = v4;
    v12 = v19 + 1;
    if (v10 != v13)
    {
      do
      {
        v20 = *--v10;
        *--v19 = v20;
      }
      while (v10 != v13);
      v10 = (uint64_t *)*((_QWORD *)this + 74);
    }
    *((_QWORD *)this + 74) = v19;
    *((_QWORD *)this + 75) = v12;
    *((_QWORD *)this + 76) = &v18[8 * v17];
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v10 = v4;
    v12 = v10 + 1;
  }
  *((_QWORD *)this + 75) = v12;
  *a2 = v4;
}

void sub_210AECE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t AUDynamicsProcessor::Version(AUDynamicsProcessor *this)
{
  return 0x10000;
}

void AUDynamicsProcessor::SetParamsForPreset(AUDynamicsProcessor *this, int a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  ausdk::AUElement *v6;
  ausdk::AUElement **v7;

  v3 = 0;
  v4 = (char *)&presetParams + 28 * a2;
  do
  {
    v5 = *((_QWORD *)this + 9);
    if (v5)
    {
      v6 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, 0);
    }
    else
    {
      v7 = (ausdk::AUElement **)*((_QWORD *)this + 6);
      if (*((ausdk::AUElement ***)this + 7) == v7)
        v6 = 0;
      else
        v6 = *v7;
    }
    ausdk::AUElement::SetParameter(v6, v3, *(float *)&v4[4 * v3], 0);
    ++v3;
  }
  while (v3 != 7);
}

const __CFString *GenerateBandName(int a1, unsigned int a2, BOOL *a3, __CFString *theString, const __CFString *const *a5)
{
  __CFString *MutableCopy;

  MutableCopy = theString;
  if (a2 > 8)
  {
    MutableCopy = CFStringCreateMutableCopy(0, 128, theString);
    snprintf(GenerateBandName(unsigned int,unsigned int,BOOL &,__CFString const*,__CFString const* const*)::cstr, 0x14uLL, " (%d)", a1 + 1);
    CFStringAppendCString(MutableCopy, GenerateBandName(unsigned int,unsigned int,BOOL &,__CFString const*,__CFString const* const*)::cstr, 0x600u);
    *a3 = 1;
  }
  else
  {
    *a3 = 0;
    if (a2 != 1)
      return a5[a1];
  }
  return MutableCopy;
}

_QWORD *AUDynamicsProcessorFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0xF20uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t ausdk::APFactory<ausdk::AUBaseProcessLookup,AUDynamicsProcessor>::Destruct(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void AUDynamicsProcessor::AUDynamicsProcessor(AUDynamicsProcessor *this, OpaqueAudioComponentInstance *a2)
{
  _OWORD *v3;
  ausdk::AUBase *v4;
  uint64_t Element;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = (_OWORD *)((char *)this + 1676);
  v4 = ausdk::AUBase::AUBase(this, a2, 1, 1, 0);
  *((_WORD *)v4 + 276) = 0;
  *((_QWORD *)v4 + 68) = 0;
  *((_OWORD *)v4 + 33) = 0u;
  *((_BYTE *)v4 + 554) = 1;
  *((_DWORD *)v4 + 139) = 0;
  *((_BYTE *)v4 + 560) = 0;
  *((_DWORD *)v4 + 147) = 0;
  *(_OWORD *)((char *)v4 + 568) = 0u;
  *((_BYTE *)v4 + 584) = 0;
  *(_QWORD *)v4 = &off_24CA90460;
  *((_QWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 154) = 1194083328;
  *(_OWORD *)((char *)v4 + 600) = 0u;
  bzero((char *)v4 + 620, 0x40CuLL);
  *((_DWORD *)this + 414) = 1215954944;
  *(_OWORD *)((char *)this + 1660) = 0u;
  __asm { FMOV            V1.4S, #-1.0 }
  *v3 = xmmword_210B0A380;
  v3[1] = _Q1;
  v3[2] = xmmword_210B0A330;
  *((_DWORD *)this + 431) = 1065353216;
  *((int32x2_t *)this + 216) = vdup_n_s32(0xC2F00000);
  bzero((char *)this + 1736, 0x804uLL);
  *((_DWORD *)this + 947) = 982044160;
  *((_BYTE *)this + 3792) = 0;
  *((_DWORD *)this + 950) = 0;
  ausdk::AUEffectBase::SetParameter(this, 0, -15.0);
  ausdk::AUEffectBase::SetParameter(this, 3u, -100.0);
  ausdk::AUEffectBase::SetParameter(this, 1u, 5.6);
  ausdk::AUEffectBase::SetParameter(this, 2u, 1.0);
  ausdk::AUEffectBase::SetParameter(this, 4u, 0.05);
  ausdk::AUEffectBase::SetParameter(this, 5u, 0.03);
  ausdk::AUEffectBase::SetParameter(this, 6u, 0.0);
  AUDynamicsProcessor::SetParamsForPreset(this, 0);
  ausdk::AUBase::SetAFactoryPresetAsCurrent((char *)this, (const AUPreset *)&sPresets);
  ausdk::AUBase::CreateElements((int64x2_t *)this);
  v12 = 0x40E5888000000000;
  v13 = xmmword_210B09F40;
  v14 = xmmword_210B09F50;
  Element = ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 80), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)Element + 56))(Element, &v12);
  v11 = ausdk::AUScope::SafeGetElement((AUDynamicsProcessor *)((char *)this + 128), 0);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, &v12);
}

void sub_210AED1F8(_Unwind_Exception *a1)
{
  AUEffectWithCustomViewBase *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 75) = v4;
    operator delete(v4);
  }
  AUEffectWithCustomViewBase::~AUEffectWithCustomViewBase(v1);
  _Unwind_Resume(a1);
}

void AUSpecialPurposeSweepFilter::~AUSpecialPurposeSweepFilter(AUSpecialPurposeSweepFilter *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA94B10;
  v2 = (void **)((char *)this + 528);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUSpecialPurposeSweepFilter::Initialize(AUSpecialPurposeSweepFilter *this)
{
  float *v2;
  float v3;
  float v4;
  BOOL v5;
  float v6;
  uint64_t v7;
  double v8;
  float v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;

  v2 = (float *)((char *)this + 40592);
  v3 = fmaxf(1.0 - *((float *)this + 10150), 0.01);
  v4 = 1.0 / v3;
  v5 = v3 < 0.99;
  v6 = 1.0101;
  if (v5)
    v6 = v4;
  *((float *)this + 10151) = v6;
  v7 = 0;
  v8 = *(double *)(ausdk::AUScope::SafeGetElement((AUSpecialPurposeSweepFilter *)((char *)this + 128), 0) + 80);
  v9 = v2[1];
  if (v8 * 0.45 < v9)
    v9 = v8 * 0.45;
  v2[1] = v9;
  v10 = (double *)((char *)this + 624);
  do
  {
    v11 = *v2;
    v12 = pow((float)(v2[1] / *v2), (double)(int)v7 / 999.0) * v11 * 6.28318531 / v8;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 1.0;
    if (v12 > 0.0)
    {
      if (v12 <= 3.11017673)
        v18 = v12;
      else
        v18 = 3.11017673;
      v19 = __exp10(0.0);
      v20 = __sincos_stret(v18);
      v21 = (1.0 - v20.__cosval) * 0.5;
      v22 = 1.0 / (v20.__sinval / 1.41421356 + 1.0);
      v23 = v19 * v22;
      v13 = v20.__cosval * -2.0 * v22;
      v14 = v22 * (1.0 - v20.__sinval / 1.41421356);
      v16 = v23 * v21;
      v15 = v23 * (v21 + v21);
      v17 = v16;
    }
    *(v10 - 4) = v13;
    *(v10 - 3) = v14;
    *(v10 - 2) = v17;
    *(v10 - 1) = v15;
    ++v7;
    *v10 = v16;
    v10 += 5;
  }
  while (v7 != 1000);
  return ausdk::AUEffectBase::Initialize((int64x2_t *)this);
}

uint64_t AUSpecialPurposeSweepFilter::GetPropertyInfo(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v8;
  char v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      v9 = 0;
      v8 = 24;
    }
    else
    {
      if (a2 != 4700)
        return result;
      v9 = *((_BYTE *)this + 17) ^ 1;
      v8 = 12;
    }
LABEL_11:
    result = 0;
    *a6 = v9;
    *a5 = v8;
    return result;
  }
  v8 = 4;
  v9 = 1;
  if (a2 == 21 || a2 == 29)
    goto LABEL_11;
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::GetProperty(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, _QWORD *a5)
{
  uint64_t result;
  int v7;
  char *v8;
  uint64_t v9;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 56)
  {
    if (a2 == 57)
    {
      result = 0;
      *a5 = *((_QWORD *)this + 1);
      a5[1] = 0;
      *((_DWORD *)a5 + 4) = 0;
    }
    else if (a2 == 4700)
    {
      result = 0;
      v8 = (char *)this + 40592;
      v9 = *(_QWORD *)v8;
      *((_DWORD *)a5 + 2) = *((_DWORD *)v8 + 2);
      *a5 = v9;
    }
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 552);
    }
    else
    {
      if (a2 != 29)
        return result;
      result = 0;
      v7 = *((unsigned __int8 *)this + 554);
    }
    *(_DWORD *)a5 = v7;
  }
  return result;
}

uint64_t AUSpecialPurposeSweepFilter::SetProperty(AUSpecialPurposeSweepFilter *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t result;
  char *v9;
  uint64_t v10;

  if (a2 != 4700 || a3 != 0)
    return ausdk::AUEffectBase::SetProperty(this, a2, a3, a4, a5, a6);
  if (*((_BYTE *)this + 17))
    return 4294956447;
  if (a6 < 0xC)
    return 4294956445;
  result = 0;
  v9 = (char *)this + 40592;
  v10 = *(_QWORD *)a5;
  *((_DWORD *)v9 + 2) = a5[2];
  *(_QWORD *)v9 = v10;
  return result;
}

double AUSpecialPurposeSweepFilter::GetParameterInfo(AUSpecialPurposeSweepFilter *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  double result;

  buffer->flags = -1073741824;
  if (!(a3 | a2))
  {
    buffer->cfNameString = CFSTR("sweep");
    buffer->flags = -939524096;
    CFStringGetCString(CFSTR("sweep"), buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Generic;
    result = 0.0078125;
    *(_QWORD *)&buffer->minValue = 0x3F80000000000000;
    buffer->defaultValue = 1.0;
  }
  return result;
}

double AUSpecialPurposeSweepFilter::GetTailTime(AUSpecialPurposeSweepFilter *this)
{
  return 0.001;
}

uint64_t AUSpecialPurposeSweepFilter::SupportsTail(AUSpecialPurposeSweepFilter *this)
{
  return 1;
}

void AUSpecialPurposeSweepFilter::NewKernel(AUSpecialPurposeSweepFilter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24CA94A38;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 24) = this;
  AUSpecialPurposeSweepFilter::SweepFilterKernel::Reset((AUSpecialPurposeSweepFilter::SweepFilterKernel *)v4);
  *a2 = v4;
}

void sub_210AED6A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10A1C40C7DC006BLL);
  _Unwind_Resume(a1);
}

uint64_t AUSpecialPurposeSweepFilter::Version(AUSpecialPurposeSweepFilter *this)
{
  return 0x10000;
}

double AUSpecialPurposeSweepFilter::SweepFilterKernel::Reset(AUSpecialPurposeSweepFilter::SweepFilterKernel *this)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unsigned int v10;
  float64x2_t *v11;
  float v12;
  double result;

  *((float *)this + 22) = ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0);
  v2 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(*((_QWORD *)this + 3) + 128), 0) + 80)
     * 0.015625
     * 0.24;
  if (v2 >= 2.22507386e-308)
    v3 = -6.90775528 / v2;
  else
    v3 = -INFINITY;
  v4 = exp(v3);
  if (v3 < -708.4)
    v4 = 0.0;
  v5 = *((_QWORD *)this + 3);
  v6 = *((float *)this + 22);
  v7 = v4;
  v8 = fminf(*(float *)(v5 + 40604) * (float)(1.0 - v6), 1.0);
  *((float *)this + 23) = v7;
  *((float *)this + 24) = v8;
  v9 = vcvtmd_s64_f64(v6 * 999.0 + 0.5);
  v10 = v9 & ~(v9 >> 31);
  if (v10 >= 0x3E7)
    v10 = 999;
  v11 = (float64x2_t *)(v5 + 40 * v10);
  *((float32x4_t *)this + 2) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11[37]), v11[38]);
  v12 = v11[39].f64[0];
  *((float *)this + 12) = v12;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

void AUSpecialPurposeSweepFilter::SweepFilterKernel::~SweepFilterKernel(AUSpecialPurposeSweepFilter::SweepFilterKernel *this)
{
  JUMPOUT(0x212BCDF50);
}

int8x16_t AUSpecialPurposeSweepFilter::SweepFilterKernel::Process(AUSpecialPurposeSweepFilter::SweepFilterKernel *this, float *a2, float *a3, unsigned int a4, BOOL *a5)
{
  unsigned int v6;
  float v9;
  unsigned int v10;
  float v11;
  float v12;
  int v13;
  unsigned int v14;
  float64x2_t *v15;
  float v16;
  float v18;
  float v19;
  unsigned int v22;
  float v23;
  __int32 v31;
  float v32;
  float32x4_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t result;

  if (a4)
  {
    v6 = a4;
    v9 = *(float *)(*((_QWORD *)this + 3) + 40604);
    do
    {
      if (v6 >= 0x80)
        v10 = 64;
      else
        v10 = v6;
      v11 = fmaxf(fminf(ausdk::AUEffectBase::GetParameter(*((ausdk::AUEffectBase **)this + 1), 0), 1.0), 0.0);
      v12 = v11 + (float)(*((float *)this + 23) * (float)(*((float *)this + 22) - v11));
      *((float *)this + 22) = v12;
      v13 = vcvtmd_s64_f64(v12 * 999.0 + 0.5);
      v14 = v13 & ~(v13 >> 31);
      if (v14 >= 0x3E7)
        v14 = 999;
      v15 = (float64x2_t *)(*((_QWORD *)this + 3) + 40 * v14);
      v16 = 1.0 / (float)v10;
      _Q3 = *((float32x4_t *)this + 2);
      *(float32x4_t *)((char *)this + 52) = vmulq_n_f32(vsubq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v15[37]), v15[38]), _Q3), v16);
      v18 = v15[39].f64[0];
      *((float *)this + 17) = v16 * (float)(v18 - *((float *)this + 12));
      v19 = *((float *)this + 24);
      *((float *)this + 25) = v16 * (float)(fminf(v9 * (float)(1.0 - v12), 1.0) - v19);
      _S1 = *((float *)this + 20);
      _S2 = *((_DWORD *)this + 21);
      v22 = v10;
      do
      {
        v23 = *a2++;
        _Q0.f32[0] = v23;
        __asm
        {
          FMLA            S7, S0, V3.S[2]
          FMLS            S4, S1, V3.S[0]
          FMLS            S1, S2, V3.S[1]
        }
        *a3++ = v23 + (float)(v19 * (float)(_S1 - v23));
        _S2 = *((_DWORD *)this + 20);
        *((float *)this + 20) = _S1;
        *((_DWORD *)this + 21) = _S2;
        v32 = *((float *)this + 17);
        v31 = *((_DWORD *)this + 18);
        *((float *)this + 18) = v23;
        *((_DWORD *)this + 19) = v31;
        _Q3 = vaddq_f32(*(float32x4_t *)((char *)this + 52), *((float32x4_t *)this + 2));
        *((float32x4_t *)this + 2) = _Q3;
        *((float *)this + 12) = v32 + *((float *)this + 12);
        v19 = *((float *)this + 25) + *((float *)this + 24);
        *((float *)this + 24) = v19;
        --v22;
      }
      while (v22);
      v6 -= v10;
    }
    while (v6);
    _Q0.i32[1] = v31;
    _Q0.i64[1] = __PAIR64__(_S2, LODWORD(_S1));
  }
  else
  {
    _Q0 = *(float32x4_t *)((char *)this + 72);
  }
  v33 = vabsq_f32(_Q0);
  v34 = vcvt_hight_f64_f32(v33);
  v35 = vcvtq_f64_f32(*(float32x2_t *)v33.f32);
  v36 = (float64x2_t)vdupq_n_s64(0x3CD203AF9EE75616uLL);
  v37 = (float64x2_t)vdupq_n_s64(0x430C6BF526340000uLL);
  result = vandq_s8((int8x16_t)_Q0, (int8x16_t)vuzp1q_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v35, v36), (int8x16_t)vcgtq_f64(v37, v35)), (int32x4_t)vandq_s8((int8x16_t)vcgtq_f64(v34, v36), (int8x16_t)vcgtq_f64(v37, v34))));
  *(int8x16_t *)((char *)this + 72) = result;
  return result;
}

_QWORD *AUSpecialPurposeSweepFilterFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x9EE0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpecialPurposeSweepFilter>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessLookup,AUSpecialPurposeSweepFilter>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void VoiceLFO::~VoiceLFO(VoiceLFO *this)
{
}

{
  MemAllocator *v1;

  MemAllocator::FreeMem(v1, (void *)0x148);
}

uint64_t VoiceLFO::Update(VoiceLFO *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 56))(*((_QWORD *)this + 32));
  (*(void (**)(VoiceLFO *, uint64_t))(*(_QWORD *)this + 40))(this, v2);
  return VoiceLFO::UpdateCachedState((uint64_t)this);
}

uint64_t VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  double v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!(_DWORD)a2)
    return 0;
  if (!(*(unsigned int (**)(VoiceLFO *))(*(_QWORD *)this + 48))(this))
    return a2;
  v4 = *((_DWORD *)this + 66);
  if (v4)
  {
    if (v4 >= a2)
      return a2;
    else
      return v4;
  }
  v6 = *(_DWORD *)(*((_QWORD *)this + 32) + 92) - 26;
  v7 = v6 > 0x32;
  v8 = (1 << v6) & 0x600000000000DLL;
  if (v7 || v8 == 0)
  {
    v10 = *((double *)this + 37);
    if (v10 <= 0.0005)
      return a2;
    result = (0.25 / v10);
  }
  else
  {
    result = *((unsigned int *)this + 67);
  }
  if (result >= a2)
    return a2;
  if (!(_DWORD)result)
  {
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      v11 = 136315650;
      v12 = "VoiceLFO.cpp";
      v13 = 1024;
      v14 = 97;
      v15 = 1024;
      v16 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d VoiceLFO::GetRunFrameCount returning 0 for input of %u", (uint8_t *)&v11, 0x18u);
      return 0;
    }
  }
  return result;
}

float VoiceLFO::GetValue(VoiceLFO *this, unsigned int a2)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  float v11;
  float v12;
  int v13;
  double v14;
  double v15;
  float v16;
  float v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  double v25;
  int v26;
  int v27;
  double v28;
  int v29;

  v4 = *((_DWORD *)this + 66);
  if (!v4)
  {
    v7 = *((double *)this + 37);
    v8 = *((_DWORD *)this + 67);
    if (v8 >= a2)
      v9 = v8 - a2;
    else
      v9 = 0;
    v10 = *(_DWORD *)(*((_QWORD *)this + 32) + 92);
    switch(v10)
    {
      case 25:
        v11 = *((double *)this + 36) * 6.28318024;
        v12 = sinf(v11);
        v13 = 0;
        goto LABEL_29;
      case 26:
        v19 = *((double *)this + 36);
        v20 = -1.0;
        v21 = 2.0;
        goto LABEL_26;
      case 27:
        v15 = *((double *)this + 36);
        v17 = v15 * -4.0 + 2.0;
        if (v15 >= 0.75)
        {
          v16 = v15 * 4.0 + -4.0;
          v17 = v16;
        }
        v13 = 0;
        if (v15 < 0.25)
        {
          v18 = v15 * 4.0;
          v12 = v18;
        }
        else
        {
          v12 = v17;
        }
        goto LABEL_29;
      case 28:
        if (*((double *)this + 36) >= 0.5)
          v12 = -1.0;
        else
          v12 = 1.0;
        goto LABEL_28;
      case 29:
        v19 = *((double *)this + 36);
        v20 = 1.0;
        v21 = -2.0;
LABEL_26:
        v14 = v20 + v19 * v21;
        goto LABEL_27;
      default:
        if (v10 == 75)
        {
          v12 = *((float *)this + 77);
        }
        else
        {
          if (v10 != 76)
          {
            v13 = 0;
            v12 = 0.0;
            goto LABEL_29;
          }
          v14 = *((float *)this + 77) + *((double *)this + 36) * (float)(*((float *)this + 78) - *((float *)this + 77));
LABEL_27:
          v12 = v14;
        }
LABEL_28:
        v13 = 1;
LABEL_29:
        v22 = *((double *)this + 36) + (double)a2 * v7;
        v23 = v22 - (double)(int)v22;
        *((double *)this + 36) = v23;
        if (!v13 || !a2 || v8 > a2)
          goto LABEL_60;
        v9 = 0;
        if (v10 > 28)
        {
          if (v10 != 29)
          {
            if (v10 != 75)
            {
              if (v10 == 76)
              {
                v9 = (1.0 / v7);
                *((_DWORD *)this + 77) = *((_DWORD *)this + 78);
                *((float *)this + 78) = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
                *((_QWORD *)this + 36) = 0;
              }
              goto LABEL_60;
            }
            if (*((_DWORD *)this + 79) == 1)
              goto LABEL_48;
            v9 = (1.0 / v7);
            *((_DWORD *)this + 79) = 1;
            v12 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
            *((float *)this + 77) = v12;
LABEL_60:
            *((_DWORD *)this + 67) = v9;
            return (v12 + 1.0) * 0.5;
          }
          v26 = *((_DWORD *)this + 79);
          if (v26 == 1)
          {
LABEL_48:
            *((_DWORD *)this + 79) = 0;
LABEL_59:
            v9 = 4;
            goto LABEL_60;
          }
          if (!v26)
          {
            v25 = 1.0;
            goto LABEL_46;
          }
          goto LABEL_52;
        }
        if (v10 == 26)
        {
          v27 = *((_DWORD *)this + 79);
          if (v27 == 1)
          {
            v29 = 2;
            goto LABEL_58;
          }
          if (v27 != 2)
            goto LABEL_52;
          v28 = 1.0;
        }
        else
        {
          if (v10 != 28)
            goto LABEL_60;
          v24 = *((_DWORD *)this + 79);
          if (v24 != 2)
          {
            if (v24 != 1)
            {
              if (!v24)
              {
                v25 = 0.5 - v23;
LABEL_46:
                v9 = (v25 / v7);
                *((_DWORD *)this + 79) = 1;
                v12 = 1.0;
                goto LABEL_60;
              }
LABEL_52:
              v9 = 0;
              goto LABEL_60;
            }
            v29 = 2 * (v12 == 1.0);
LABEL_58:
            *((_DWORD *)this + 79) = v29;
            goto LABEL_59;
          }
          v28 = 1.0 - v23;
        }
        v9 = (v28 / v7);
        *((_DWORD *)this + 79) = 1;
        v12 = -1.0;
        goto LABEL_60;
    }
  }
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
    *((_DWORD *)this + 66) = v6;
  else
    *((_DWORD *)this + 66) = 0;
  v12 = 0.0;
  return (v12 + 1.0) * 0.5;
}

void VoiceLFO::RegisterInput(VoiceLFO *this, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2 != 44040192)
  {
    if (a2 != 42991616)
      return;
    if (*((_DWORD *)this + 41))
    {
      if (!*((_QWORD *)this + 21))
      {
        v3 = (_QWORD *)MemAllocator::AllocMem((MemAllocator *)0x10);
        *v3 = off_24CA90DC8;
        v3[1] = this;
        *((_QWORD *)this + 21) = v3;
      }
      return;
    }
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 41) <= 1u)
  {
LABEL_10:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v5 = 136315394;
      v6 = "ModControlDestination.h";
      v7 = 1024;
      v8 = 52;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d  ASSERTION FAILED:  index > current number of inputs and/or max inputs", (uint8_t *)&v5, 0x12u);
    }
    __break(1u);
    return;
  }
  if (!*((_QWORD *)this + 22))
  {
    v4 = (_QWORD *)MemAllocator::AllocMem((MemAllocator *)0x10);
    *v4 = off_24CA90DA0;
    v4[1] = this;
    *((_QWORD *)this + 22) = v4;
  }
}

double VoiceLFO::ProcessInputs(VoiceLFO *this)
{
  double result;

  VoiceLFO::UpdateCachedState((uint64_t)this);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)this + 34) = result;
  return result;
}

void `non-virtual thunk to'VoiceLFO::~VoiceLFO(VoiceLFO *this)
{
}

{
  VoiceLFO::~VoiceLFO((VoiceLFO *)((char *)this - 152));
}

uint64_t `non-virtual thunk to'VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  return VoiceLFO::GetRunFrameCount((VoiceLFO *)((char *)this - 152), a2);
}

void `non-virtual thunk to'VoiceLFO::RegisterInput(VoiceLFO *this, int a2)
{
  VoiceLFO::RegisterInput((VoiceLFO *)((char *)this - 152), a2);
}

double `non-virtual thunk to'VoiceLFO::ProcessInputs(VoiceLFO *this)
{
  double result;

  VoiceLFO::UpdateCachedState((uint64_t)this - 152);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)this + 15) = result;
  return result;
}

void `virtual thunk to'VoiceLFO::~VoiceLFO(VoiceLFO *this)
{
}

{
  VoiceLFO::~VoiceLFO((VoiceLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'VoiceLFO::GetRunFrameCount(VoiceLFO *this, uint64_t a2)
{
  return VoiceLFO::GetRunFrameCount((VoiceLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

void VoiceLFO::~VoiceLFO(VoiceLFO *this, uint64_t *a2)
{
  uint64_t v4;
  ModControlDestination *v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 40)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[12];
  *((_QWORD *)this + 19) = a2[13];
  v5 = (VoiceLFO *)((char *)this + 152);
  SamplerState::RemoveView(*((_QWORD *)this + 32), (VoiceLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)));
  *((_QWORD *)this + 32) = 0;
  ModControlDestination::~ModControlDestination(v5, a2 + 5);
  v6 = a2[2];
  *(_QWORD *)this = v6;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 40)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[4];
}

uint64_t VoiceLFO::UpdateCachedState(uint64_t this)
{
  uint64_t v1;
  float v2;
  double v3;
  double v4;
  unsigned int v5;
  double v6;
  int v7;
  unsigned int v8;
  double v9;

  v1 = *(_QWORD *)(this + 256);
  v2 = fminf(fmaxf(*(float *)(this + 272) * *(float *)(v1 + 96), 0.0), 60.0);
  if (v2 <= 0.0)
  {
    v5 = 0;
    v4 = *(double *)(this + 280);
  }
  else
  {
    v3 = v2;
    v4 = *(double *)(this + 280);
    v5 = (v3 / v4 + 0.5);
  }
  *(_DWORD *)(this + 304) = v5;
  v6 = v4 * fminf(fmaxf(*(float *)(this + 276) * *(float *)(v1 + 100), 0.0078125), 128.0);
  *(double *)(this + 296) = v6;
  v7 = *(_DWORD *)(v1 + 92);
  v8 = 9999999;
  if (v7 <= 74)
  {
    if (v7 != 26 && v7 != 28 && v7 != 29)
      goto LABEL_14;
    if (*(_DWORD *)(this + 316) != 1)
      return this;
    v9 = 0.5 / v6;
    goto LABEL_13;
  }
  if ((v7 - 75) < 2)
  {
    if (*(_DWORD *)(this + 316) != 1)
      return this;
    v9 = (1.0 - *(double *)(this + 288)) * (double)(1.0 / v6);
LABEL_13:
    v8 = v9;
  }
LABEL_14:
  *(_DWORD *)(this + 268) = v8;
  return this;
}

uint64_t ControlInputInstance<VoiceLFO,&VoiceLFO::HandleRateInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

void ControlInputInstance<VoiceLFO,&VoiceLFO::HandleRateInput>::Set(uint64_t a1, float a2)
{
  uint64_t v3;

  if (a2 != 0.0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
    {
      *(float *)(v3 + 276) = exp2f(a2) * *(float *)(v3 + 276);
      *(_BYTE *)(v3 + 248) = 1;
    }
  }
}

uint64_t ControlInputInstance<VoiceLFO,&VoiceLFO::HandleDelayInput>::~ControlInputInstance(MemAllocator *a1)
{
  return MemAllocator::FreeMem(a1, (void *)0x10);
}

void ControlInputInstance<VoiceLFO,&VoiceLFO::HandleDelayInput>::Set(uint64_t a1, float a2)
{
  uint64_t v3;

  if (a2 != 0.0)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
    {
      *(float *)(v3 + 272) = exp2f(a2) * *(float *)(v3 + 272);
      *(_BYTE *)(v3 + 248) = 1;
    }
  }
}

void VoiceLFO::VoiceLFO(VoiceLFO *this, LFOState *a2, float a3)
{
  char v6;
  int v7;
  unsigned int v8;

  v6 = (*(uint64_t (**)(LFOState *))(*(_QWORD *)a2 + 56))(a2);
  v7 = (**(uint64_t (***)(LFOState *))a2)(a2);
  ModControlSrcAndDest::ModControlSrcAndDest(this, (uint64_t *)&off_24CA89AC0, v6, v7, 2);
  *(_QWORD *)this = off_24CA87718;
  *((_QWORD *)this + 41) = &unk_24CA87848;
  *((_QWORD *)this + 19) = &unk_24CA877B0;
  v8 = ((float)(*((float *)a2 + 24) * a3) + 0.5);
  *((_QWORD *)this + 32) = a2;
  *((_QWORD *)this + 33) = v8;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 34) = _D0;
  *((double *)this + 35) = 1.0 / a3;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_DWORD *)this + 76) = v8;
  *((float *)this + 77) = (float)random() * 4.6566e-10;
  *((_QWORD *)this + 39) = 0x100000000;
  SamplerState::AddView(*((_QWORD *)this + 32), (VoiceLFO *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)));
}

void sub_210AEE520(_Unwind_Exception *a1)
{
  _QWORD *v1;
  ModControlDestination *v2;

  ModControlDestination::~ModControlDestination(v2, (uint64_t *)&off_24CA89AE0);
  *v1 = off_24CA87478;
  v1[41] = &unk_24CA87508;
  _Unwind_Resume(a1);
}

uint64_t VoiceLFO::Start(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  *(_DWORD *)(this + 264) = *(_DWORD *)(this + 304) + a2;
  v3 = *(_DWORD *)(*(_QWORD *)(this + 256) + 92);
  if (v3 > 74)
  {
    if ((v3 - 75) < 2)
    {
      *(_QWORD *)(this + 288) = 0;
      *(_DWORD *)(this + 268) = (1.0 / *(double *)(this + 296));
      this = random();
      *(float *)(v2 + 312) = (float)this * 4.6566e-10;
      return this;
    }
    goto LABEL_10;
  }
  if (v3 != 26)
  {
    if (v3 == 28)
    {
      *(_QWORD *)(this + 288) = 0;
      goto LABEL_9;
    }
    if (v3 != 29)
    {
LABEL_10:
      *(_QWORD *)(this + 288) = 0;
      v4 = 9999999;
      goto LABEL_11;
    }
  }
  *(_QWORD *)(this + 288) = 0x3FE0000000000000;
LABEL_9:
  v4 = (0.5 / *(double *)(this + 296));
LABEL_11:
  *(_DWORD *)(this + 268) = v4;
  return this;
}

void ZoneState::ResetToDefaults(ZoneState *this)
{
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 22) = 0xFFFFFFFFLL;
  *((_BYTE *)this + 189) = 1;
  *((_DWORD *)this + 28) = 50;
  *((_BYTE *)this + 140) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0x463B8000C63B8000;
  *((_DWORD *)this + 54) = -1;
  *((_WORD *)this + 110) = 0;
  ZoneState::LoadSampleInfo(this, *((Sample **)this + 13));
}

uint64_t ZoneState::GetProperty(ZoneState *this, int a2, _BYTE *a3)
{
  int v3;
  float v4;
  uint64_t v6;
  char v7;

  if (a2 <= 4199)
  {
    switch(a2)
    {
      case 4122:
        v3 = *((_DWORD *)this + 44);
        goto LABEL_27;
      case 4123:
        v3 = *((_DWORD *)this + 48);
        goto LABEL_27;
      case 4124:
        v4 = *((float *)this + 49);
        goto LABEL_35;
      case 4125:
        v4 = *((float *)this + 50);
        goto LABEL_35;
      case 4126:
        v4 = *((float *)this + 51) * 200.0;
        goto LABEL_35;
      case 4127:
        return ComponentState::GetProperty(this, a2, a3);
      case 4128:
        *a3 = *((_BYTE *)this + 184);
        v7 = *((_BYTE *)this + 185);
        goto LABEL_33;
      case 4129:
        *a3 = *((_BYTE *)this + 186);
        v7 = *((_BYTE *)this + 187);
LABEL_33:
        a3[1] = v7;
        return 1;
      default:
        if (a2 != 4151)
          return ComponentState::GetProperty(this, a2, a3);
        v3 = *((_DWORD *)this + 54);
LABEL_27:
        *(_DWORD *)a3 = v3;
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 4200:
        v3 = *((_DWORD *)this + 24);
        goto LABEL_27;
      case 4201:
      case 4214:
        return ComponentState::GetProperty(this, a2, a3);
      case 4202:
        v3 = *((unsigned __int8 *)this + 188);
        goto LABEL_27;
      case 4203:
        v3 = *((unsigned __int8 *)this + 180);
        goto LABEL_27;
      case 4204:
        v3 = *((unsigned __int8 *)this + 189);
        goto LABEL_27;
      case 4205:
        v6 = *((_QWORD *)this + 15);
        goto LABEL_23;
      case 4206:
        v6 = *((_QWORD *)this + 16);
        goto LABEL_23;
      case 4207:
        v3 = *((_DWORD *)this + 34);
        goto LABEL_27;
      case 4208:
        v3 = *((unsigned __int8 *)this + 140);
        goto LABEL_27;
      case 4209:
        v3 = *((_DWORD *)this + 28);
        goto LABEL_27;
      case 4210:
        v3 = *((_DWORD *)this + 36);
        goto LABEL_27;
      case 4211:
        v6 = *((_QWORD *)this + 19);
        goto LABEL_23;
      case 4212:
        v6 = *((_QWORD *)this + 20);
LABEL_23:
        *(_QWORD *)a3 = v6;
        return 1;
      case 4213:
        v4 = *((float *)this + 43);
        break;
      case 4215:
        v3 = *((_DWORD *)this + 42);
        goto LABEL_27;
      default:
        if (a2 == 4400)
        {
          v4 = *((float *)this + 52);
        }
        else
        {
          if (a2 != 4401)
            return ComponentState::GetProperty(this, a2, a3);
          v4 = *((float *)this + 53);
        }
        break;
    }
LABEL_35:
    *(float *)a3 = v4;
  }
  return 1;
}

uint64_t ZoneState::SetProperty(ZoneState *this, int a2, unsigned int *a3, uint64_t a4, __n128 a5)
{
  __n128 v7;
  uint64_t result;
  __n128 v9;
  CAXException *exception;
  _BYTE v11[16];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _BYTE *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v11, 0xFFFFD59D);
      *(float *)buf = 4.8153e-34;
      v13 = "ZoneState.cpp";
      v14 = 1024;
      v15 = 370;
      v16 = 2080;
      v17 = v11;
      v18 = 2080;
      v19 = "ZoneState::SetProperty: NULL property value";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetProperty: NULL property value", -10851);
  }
  if (a2 <= 4199)
  {
    switch(a2)
    {
      case 4122:
        ZoneState::SetOutputScope(this, *a3);
        return 1;
      case 4123:
        ZoneState::SetCoarseTuning(this, *a3);
        return 1;
      case 4124:
        ZoneState::SetFineTuning((float *)this, *(float *)a3);
        return 1;
      case 4125:
        ZoneState::SetGain((float *)this, *(float *)a3);
        return 1;
      case 4126:
        ZoneState::SetPan((float *)this, *(float *)a3 * 0.005);
        return 1;
      case 4127:
        goto LABEL_13;
      case 4128:
        ZoneState::SetKeyRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      case 4129:
        ZoneState::SetVelRange(this, *(unsigned __int8 *)a3, *((unsigned __int8 *)a3 + 1));
        return 1;
      default:
        if (a2 == 4151)
        {
          ZoneState::SetGateMode(this, *a3);
          return 1;
        }
LABEL_13:
        result = ComponentState::SetProperty(this, a2, a3);
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 4200:
        ZoneState::LoadSample((uint64_t)this, *a3);
        return 1;
      case 4201:
      case 4214:
        goto LABEL_13;
      case 4202:
        ZoneState::SetRootKey(this, *a3);
        return 1;
      case 4203:
        ZoneState::SetKeyGroup(this, *a3);
        return 1;
      case 4204:
        ZoneState::SetPitchTracking(this, *a3 != 0);
        return 1;
      case 4205:
        CheckDataSize(a4, 8u);
        ZoneState::SetSampleStart(this, *(_QWORD *)a3);
        return 1;
      case 4206:
        CheckDataSize(a4, 8u);
        ZoneState::SetSampleEnd(this, *(_QWORD *)a3);
        return 1;
      case 4207:
        ZoneState::SetSampleDirection(this, *a3);
        return 1;
      case 4208:
        ZoneState::SetLoopEnabled(this, *a3 != 0);
        return 1;
      case 4209:
        ZoneState::SetLoopingMode(this, *a3);
        return 1;
      case 4210:
        ZoneState::SetLoopType(this, *a3);
        return 1;
      case 4211:
        CheckDataSize(a4, 8u);
        ZoneState::SetLoopStart(this, *(_QWORD *)a3);
        return 1;
      case 4212:
        CheckDataSize(a4, 8u);
        ZoneState::SetLoopEnd(this, *(_QWORD *)a3);
        return 1;
      case 4213:
        ZoneState::SetLoopTune((float *)this, *(float *)a3);
        return 1;
      case 4215:
        if (*((_DWORD *)this + 42) != *a3)
        {
          *((_DWORD *)this + 42) = *a3;
          (*(void (**)(ZoneState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4215, 0, a5);
        }
        return 1;
      default:
        if (a2 == 4400)
        {
          *(float *)buf = *(float *)a3;
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pitch offset limit", -12000.0, *((float *)this + 53));
          v9.n128_u32[0] = *(_DWORD *)buf;
          if (*(float *)buf != *((float *)this + 52))
          {
            *((float *)this + 52) = *(float *)buf;
            (*(void (**)(ZoneState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4400, 0, v9);
          }
        }
        else
        {
          if (a2 != 4401)
            goto LABEL_13;
          *(float *)buf = *(float *)a3;
          CHECK_RANGE<float>((float *)buf, (uint64_t)"Invalid pitch offset limit", *((float *)this + 52), 12000.0);
          v7.n128_u32[0] = *(_DWORD *)buf;
          if (*(float *)buf != *((float *)this + 53))
          {
            *((float *)this + 53) = *(float *)buf;
            (*(void (**)(ZoneState *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 112))(this, 4401, 0, v7);
          }
        }
        break;
    }
    return 1;
  }
  return result;
}

void sub_210AEEBFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ZoneState::Save(const __CFString **this, CACFDictionary *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const __CFString **v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v9 = 136315650;
    v10 = "ZoneState.cpp";
    v11 = 1024;
    v12 = 463;
    v13 = 2048;
    v14 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::Save(this=%p)", (uint8_t *)&v9, 0x1Cu);
  }
  ComponentState::Save(this, a2);
  CACFDictionary::AddUInt32(a2, CFSTR("waveform"));
  CACFDictionary::AddUInt32(a2, CFSTR("root key"));
  if (*((_DWORD *)this + 45))
    CACFDictionary::AddUInt32(a2, CFSTR("key group"));
  if (*((_BYTE *)this + 184) || *((_BYTE *)this + 185) != 127)
  {
    CACFDictionary::AddUInt32(a2, CFSTR("min key"));
    CACFDictionary::AddUInt32(a2, CFSTR("max key"));
  }
  if (*((_BYTE *)this + 186) || *((_BYTE *)this + 187) != 127)
  {
    CACFDictionary::AddUInt32(a2, CFSTR("min vel"));
    CACFDictionary::AddUInt32(a2, CFSTR("max vel"));
  }
  if (!*((_BYTE *)this + 189))
    CACFDictionary::AddBool(a2, CFSTR("pitch tracking"));
  if (*((_DWORD *)this + 28) != 50)
    CACFDictionary::AddUInt32(a2, CFSTR("looping mode"));
  if (this[15])
    CACFDictionary::AddUInt64(a2, CFSTR("sample start"));
  if (this[16] != (const __CFString *)(this[13][5].length - 1))
    CACFDictionary::AddUInt64(a2, CFSTR("sample end"));
  if (*((_DWORD *)this + 34) != 60)
    CACFDictionary::AddUInt32(a2, CFSTR("sample direction"));
  CACFDictionary::AddBool(a2, CFSTR("loop enabled"));
  if (*((_DWORD *)this + 36) == 73 || *((_DWORD *)this + 34) != 60)
    CACFDictionary::AddUInt32(a2, CFSTR("loop type"));
  if (this[19])
    CACFDictionary::AddUInt64(a2, CFSTR("loop start"));
  if (this[20] != (const __CFString *)(this[13][5].length - 1))
    CACFDictionary::AddUInt64(a2, CFSTR("loop end"));
  if (*((_DWORD *)this + 42) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("loop count"));
  v4 = *((float *)this + 43);
  if (v4 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("loop tune"), v4);
  if (*((_DWORD *)this + 44) != -1)
    CACFDictionary::AddUInt32(a2, CFSTR("output"));
  if (*((_DWORD *)this + 48))
    CACFDictionary::AddSInt32(a2, CFSTR("coarse tune"));
  v5 = *((float *)this + 49);
  if (v5 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("fine tune"), v5);
  v6 = *((float *)this + 50);
  if (v6 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("gain"), v6);
  v7 = *((float *)this + 51) * 200.0;
  if (v7 != 0.0)
    CACFDictionary::AddFloat32(a2, CFSTR("pan"), v7);
  return 0;
}

uint64_t ZoneState::Restore(ZoneState *this, const CACFDictionary *a2)
{
  int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE buf[12];
  __int16 v11;
  int v12;
  __int16 v13;
  ZoneState *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = ComponentState::Restore(this, a2);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "ZoneState.cpp";
    v11 = 1024;
    v12 = 511;
    v13 = 2048;
    v14 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::Restore(this=%p)", buf, 0x1Cu);
  }
  if (v4)
    return 4294956445;
  *(_DWORD *)buf = -2;
  CACFDictionary::GetUInt32(a2, CFSTR("waveform"), (unsigned int *)buf);
  ZoneState::LoadSample((uint64_t)this, *(_DWORD *)buf | 0x10000000);
  if (CACFDictionary::GetUInt32(a2, CFSTR("root key"), (unsigned int *)buf))
    ZoneState::SetRootKey(this, *(unsigned int *)buf);
  if (CACFDictionary::GetUInt32(a2, CFSTR("key group"), (unsigned int *)buf))
    ZoneState::SetKeyGroup(this, *(int *)buf);
  if (CACFDictionary::GetUInt32(a2, CFSTR("output"), (unsigned int *)buf))
    ZoneState::SetOutputScope(this, *(unsigned int *)buf);
  if (CACFDictionary::GetSInt32(a2, CFSTR("coarse tune"), (int *)buf))
    ZoneState::SetCoarseTuning(this, *(int *)buf);
  if (CACFDictionary::GetFloat32(a2, CFSTR("fine tune"), (float *)buf))
    ZoneState::SetFineTuning((float *)this, *(float *)buf);
  if (CACFDictionary::GetFloat32(a2, CFSTR("gain"), (float *)buf))
    ZoneState::SetGain((float *)this, *(float *)buf);
  if (CACFDictionary::GetFloat32(a2, CFSTR("pan"), (float *)buf))
    ZoneState::SetPan((float *)this, *(float *)buf * 0.005);
  v6 = *((unsigned __int8 *)this + 184);
  v8 = *((unsigned __int8 *)this + 185);
  v9 = v6;
  CACFDictionary::GetUInt32(a2, CFSTR("min key"), &v9);
  CACFDictionary::GetUInt32(a2, CFSTR("max key"), &v8);
  ZoneState::SetKeyRange(this, v9, v8);
  v7 = *((unsigned __int8 *)this + 186);
  v8 = *((unsigned __int8 *)this + 187);
  v9 = v7;
  CACFDictionary::GetUInt32(a2, CFSTR("min vel"), &v9);
  CACFDictionary::GetUInt32(a2, CFSTR("max vel"), &v8);
  ZoneState::SetVelRange(this, v9, v8);
  if (CACFDictionary::GetBool(a2, CFSTR("pitch tracking"), buf))
    ZoneState::SetPitchTracking(this, buf[0]);
  if (CACFDictionary::GetUInt64(a2, CFSTR("sample end"), (unint64_t *)buf))
    ZoneState::SetSampleEnd(this, *(unint64_t *)buf);
  if (CACFDictionary::GetUInt64(a2, CFSTR("sample start"), (unint64_t *)buf))
    ZoneState::SetSampleStart(this, *(unint64_t *)buf);
  if (CACFDictionary::GetUInt32(a2, CFSTR("sample direction"), (unsigned int *)buf))
    ZoneState::SetSampleDirection(this, *(int *)buf);
  if (CACFDictionary::GetBool(a2, CFSTR("loop enabled"), buf))
    ZoneState::SetLoopEnabled(this, buf[0]);
  if (CACFDictionary::GetUInt32(a2, CFSTR("loop type"), (unsigned int *)buf))
  {
    if (*(_DWORD *)buf == 70)
      ZoneState::SetLoopEnabled(this, 0);
    else
      ZoneState::SetLoopType(this, *(int *)buf);
  }
  if (CACFDictionary::GetUInt64(a2, CFSTR("loop end"), (unint64_t *)buf))
    ZoneState::SetLoopEnd(this, *(unint64_t *)buf);
  if (CACFDictionary::GetUInt64(a2, CFSTR("loop start"), (unint64_t *)buf))
    ZoneState::SetLoopStart(this, *(unint64_t *)buf);
  if (CACFDictionary::GetUInt32(a2, CFSTR("loop count"), (unsigned int *)buf)
    && *((_DWORD *)this + 42) != *(_DWORD *)buf)
  {
    *((_DWORD *)this + 42) = *(_DWORD *)buf;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4215, 0);
  }
  if (CACFDictionary::GetFloat32(a2, CFSTR("loop tune"), (float *)buf))
    ZoneState::SetLoopTune((float *)this, *(float *)buf);
  return 0;
}

const __CFString *ZoneState::GetName(ZoneState *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    CFRetain(*((CFTypeRef *)this + 4));
  }
  else
  {
    v2 = *((_QWORD *)this + 13);
    if (v2)
      return *(const __CFString **)(v2 + 40);
    else
      return CFSTR("No Sample");
  }
  return (const __CFString *)v1;
}

void ZoneState::~ZoneState(ZoneState *this)
{
  *(_QWORD *)this = &off_24CA947D0;
  ZoneState::SampleInfo::~SampleInfo((ZoneState *)((char *)this + 96));
  SamplerState::~SamplerState(this);
}

{
  *(_QWORD *)this = &off_24CA947D0;
  ZoneState::SampleInfo::~SampleInfo((ZoneState *)((char *)this + 96));
  SamplerState::~SamplerState(this);
  JUMPOUT(0x212BCDF50);
}

void ZoneState::SampleInfo::~SampleInfo(ZoneState::SampleInfo *this)
{
  RefCounted *v2;

  v2 = (RefCounted *)*((_QWORD *)this + 1);
  if (v2)
  {
    RefCounted::Unref(v2);
    *((_QWORD *)this + 1) = 0;
    *(_DWORD *)this = -1;
  }
}

uint64_t ZoneState::LoadSample(uint64_t this, unsigned int a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **Instance;
  CFHashCode v18;
  SampleManager *v19;
  Sample *Sample;
  RefCounted *v21;
  unsigned int *v22;
  unsigned int v23;
  CAXException *exception;
  _BYTE v25[16];
  _BYTE buf[12];
  __int16 v27;
  int v28;
  __int16 v29;
  _BYTE v30[10];
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(this + 96);
  if (v2 != a2 || v2 == -1)
  {
    v5 = this;
    v6 = *(_QWORD *)(*(_QWORD *)(this + 24) + 24);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ZoneState.cpp";
      v27 = 1024;
      v28 = 205;
      v29 = 2048;
      *(_QWORD *)v30 = v5;
      *(_WORD *)&v30[8] = 1024;
      LODWORD(v31) = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadSample(%p, id = 0x%x)", buf, 0x22u);
    }
    v7 = *(_QWORD *)(v6 + 112);
    v8 = (const void **)os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
    if ((_DWORD)v8)
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
      v27 = 1024;
      v28 = 402;
      v29 = 1024;
      *(_DWORD *)v30 = a2;
      *(_WORD *)&v30[4] = 1024;
      *(_DWORD *)&v30[6] = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::GetSampleWithID(ID = %u (0x%x))", buf, 0x1Eu);
    }
    v9 = a2;
    if ((a2 & 0x10000000) == 0)
    {
      v8 = (const void **)os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG);
      v9 = a2 | 0x10000000;
      if ((v8 & 1) != 0)
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
        v27 = 1024;
        v28 = 405;
        v29 = 1024;
        *(_DWORD *)v30 = a2;
        *(_WORD *)&v30[4] = 1024;
        *(_DWORD *)&v30[6] = a2 | 0x10000000;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d InstrumentManager::GetSampleWithID: converting old id %u to 0x%x", buf, 0x1Eu);
      }
    }
    v12 = *(_QWORD *)(v7 + 8);
    v11 = v7 + 8;
    v10 = v12;
    if (!v12)
      goto LABEL_39;
    v13 = v11;
    do
    {
      v14 = *(_DWORD *)(v10 + 32);
      v15 = v14 >= v9;
      if (v14 >= v9)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)(v10 + 8);
      if (v15)
        v13 = v10;
      v10 = *v16;
    }
    while (*v16);
    if (v13 != v11 && v9 >= *(_DWORD *)(v13 + 32))
    {
      v18 = *(_QWORD *)(v13 + 40);
    }
    else
    {
LABEL_39:
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "InstrumentManager.cpp";
        v27 = 1024;
        v28 = 411;
        v29 = 1024;
        *(_DWORD *)v30 = v9;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d InstrumentManager::GetSampleWithID: Cannot find sample with ID 0x%x", buf, 0x18u);
      }
      *(_QWORD *)buf = CFURLCreateWithString(0, CFSTR("wave://internal/silence"), 0);
      Instance = (uint64_t **)SampleManager::GetInstance(*(SampleManager **)buf);
      v18 = SampleManager::AddSample(Instance, *(glob_t **)buf, 0);
      v8 = Smart<__CFURL const*>::~Smart((const void **)buf);
    }
    v19 = (SampleManager *)SampleManager::GetInstance((SampleManager *)v8);
    Sample = (Sample *)SampleManager::GetSample(v19, v18);
    if (!Sample)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v25, 0xFFFFD589);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "ZoneState.cpp";
        v27 = 1024;
        v28 = 207;
        v29 = 2080;
        *(_QWORD *)v30 = v25;
        *(_WORD *)&v30[8] = 2080;
        v31 = "Failed to find sample";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "Failed to find sample", -10871);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, 0);
    ZoneState::LoadSampleInfo((ZoneState *)v5, Sample);
    v21 = *(RefCounted **)(v5 + 104);
    if (v21)
      RefCounted::Unref(v21);
    *(_QWORD *)(v5 + 104) = Sample;
    v22 = (unsigned int *)((char *)Sample + 20);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_DWORD *)(v5 + 96) = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, 1);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, 4200, 0);
  }
  return this;
}

void sub_210AEF8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

_BYTE *ZoneState::SetRootKey(_BYTE *this, unsigned int a2)
{
  _BYTE *v3;
  unsigned int v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  _BYTE *v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[188] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "ZoneState.cpp";
      v7 = 1024;
      v8 = 651;
      v9 = 2048;
      v10 = v3;
      v11 = 1024;
      v12 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetRootKey(%p, %u)", buf, 0x22u);
    }
    CHECK_RANGE<unsigned int>(&v4, 0, 0x7Fu, (uint64_t)"Invalid root key");
    v3[188] = v4;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4202, 0);
  }
  return this;
}

void ZoneState::SetKeyGroup(ZoneState *this, int a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((a2 & 0x10000000) != 0)
  {
    v5 = a2 & 0xEFFFFFFF;
    CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"ZoneState::SetKeyGroup: Invalid key group");
  }
  else
  {
    v3 = *((_DWORD *)this + 45);
    v5 = a2 & 0xEFFFFFFF;
    CHECK_RANGE<unsigned int>(&v5, 0, 0x7Fu, (uint64_t)"ZoneState::SetKeyGroup: Invalid key group");
    if ((v3 & 0x10000000) == 0)
    {
      v4 = v5;
      goto LABEL_6;
    }
  }
  v4 = v5 | 0x10000000;
LABEL_6:
  if (*((_DWORD *)this + 45) != v4)
  {
    *((_DWORD *)this + 45) = v4;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v7 = "ZoneState.cpp";
      v8 = 1024;
      v9 = 669;
      v10 = 1024;
      v11 = v4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetKeyGroup: Group 0x%x", buf, 0x18u);
    }
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4203, 0);
  }
}

_DWORD *ZoneState::SetOutputScope(_DWORD *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;

  v4 = a2;
  if (this[44] != a2)
  {
    v2 = this;
    if (a2 == -1)
    {
      v3 = -1;
    }
    else
    {
      CHECK_RANGE<unsigned int>(&v4, 0, 0x10u, (uint64_t)"Invalid output scope");
      v3 = v4;
    }
    v2[44] = v3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4122, 0);
  }
  return this;
}

_DWORD *ZoneState::SetCoarseTuning(_DWORD *this, int a2)
{
  _DWORD *v3;
  int v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  _DWORD *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[48] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "ZoneState.cpp";
      v7 = 1024;
      v8 = 677;
      v9 = 2048;
      v10 = v3;
      v11 = 1024;
      v12 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetCoarseTuning(%p, %d)", buf, 0x22u);
    }
    CHECK_RANGE<int>(&v4, -24, 24, (uint64_t)"Invalid coarse tuning");
    v3[48] = v4;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4123, 0);
  }
  return this;
}

float *ZoneState::SetFineTuning(float *this, float a2)
{
  float *v3;
  float v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  float *v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[49] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "ZoneState.cpp";
      v7 = 1024;
      v8 = 687;
      v9 = 2048;
      v10 = v3;
      v11 = 2048;
      v12 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetFineTuning(%p, %f)", buf, 0x26u);
    }
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid fine tuning", -99.0, 99.0);
    v3[49] = v4;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4124, 0);
  }
  return this;
}

float *ZoneState::SetGain(float *this, float a2)
{
  float *v3;
  float v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  float *v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (this[50] != a2)
  {
    v3 = this;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v6 = "ZoneState.cpp";
      v7 = 1024;
      v8 = 697;
      v9 = 2048;
      v10 = v3;
      v11 = 2048;
      v12 = a2;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetGain(%p, %f)", buf, 0x26u);
    }
    CHECK_RANGE<float>(&v4, (uint64_t)"Invalid gain", -96.0, 12.0);
    v3[50] = v4;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v3 + 112))(v3, 4125, 0);
  }
  return this;
}

float *ZoneState::SetPan(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[51] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"Invalid pan", -0.5, 0.5);
    v2[51] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4126, 0);
  }
  return this;
}

uint64_t ZoneState::SetKeyRange(ZoneState *this, unsigned int a2, unsigned int a3)
{
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  ZoneState *v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    v9 = "ZoneState.cpp";
    v10 = 1024;
    v11 = 733;
    v12 = 2048;
    v13 = this;
    v14 = 1024;
    v15 = a2;
    v16 = 1024;
    v17 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetKeyRange(%p, [%u, %u])", buf, 0x28u);
  }
  CHECK_RANGE<unsigned int>(&v7, 0, 0x7Fu, (uint64_t)"Invalid key range");
  CHECK_RANGE<unsigned int>(&v7, 0, a3, (uint64_t)"Invalid key range");
  *((_BYTE *)this + 184) = v7;
  *((_BYTE *)this + 185) = a3;
  return (*(uint64_t (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4128, 0);
}

uint64_t ZoneState::SetVelRange(ZoneState *this, unsigned int a2, unsigned int a3)
{
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  ZoneState *v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    v9 = "ZoneState.cpp";
    v10 = 1024;
    v11 = 743;
    v12 = 2048;
    v13 = this;
    v14 = 1024;
    v15 = a2;
    v16 = 1024;
    v17 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetVelRange(%p, [%u, %u])", buf, 0x28u);
  }
  CHECK_RANGE<unsigned int>(&v7, 0, 0x7Fu, (uint64_t)"Invalid velocity range");
  CHECK_RANGE<unsigned int>(&v7, 0, a3, (uint64_t)"Invalid velocity range");
  *((_BYTE *)this + 186) = v7;
  *((_BYTE *)this + 187) = a3;
  return (*(uint64_t (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4129, 0);
}

void ZoneState::SetPitchTracking(ZoneState *this, int a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  ZoneState *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315906;
    v5 = "ZoneState.cpp";
    v6 = 1024;
    v7 = 753;
    v8 = 2048;
    v9 = this;
    v10 = 1024;
    v11 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetPitchTracking(%p, %u)", (uint8_t *)&v4, 0x22u);
  }
  if (*((unsigned __int8 *)this + 189) != a2)
  {
    *((_BYTE *)this + 189) = a2;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4204, 0);
  }
}

void ZoneState::SetSampleEnd(ZoneState *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  ZoneState *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v9 = "ZoneState.cpp";
    v10 = 1024;
    v11 = 791;
    v12 = 2048;
    v13 = this;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetSampleEnd(%p, %llu)", buf, 0x26u);
  }
  if (*((_QWORD *)this + 16) != a2)
  {
    v7 = a2;
    CHECK_RANGE<unsigned long long>(&v7, *((_QWORD *)this + 15), *(_QWORD *)(*((_QWORD *)this + 13) + 184) - 1, (uint64_t)"ZoneState::SetSampleEnd: Invalid sample end");
    v4 = v7;
    if (*((_BYTE *)this + 140))
    {
      v5 = *((_QWORD *)this + 20);
      if (v7 < v5)
      {
        v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
        v4 = v5;
        if (v6)
        {
          *(_DWORD *)buf = 136315394;
          v9 = "ZoneState.cpp";
          v10 = 1024;
          v11 = 797;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetSampleEnd: Capping sample end to loop end", buf, 0x12u);
          v4 = *((_QWORD *)this + 20);
        }
      }
    }
    *((_QWORD *)this + 16) = v4;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4206, 0);
  }
}

void ZoneState::SetSampleStart(ZoneState *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  ZoneState *v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v10 = "ZoneState.cpp";
    v11 = 1024;
    v12 = 773;
    v13 = 2048;
    v14 = this;
    v15 = 2048;
    v16 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetSampleStart(%p, %llu)", buf, 0x26u);
  }
  if (*((_QWORD *)this + 15) != a2)
  {
    v8 = a2;
    CHECK_RANGE<unsigned long long>(&v8, 0, *((_QWORD *)this + 16) - 1, (uint64_t)"ZoneState::SetSampleStart: Invalid sample start");
    v4 = v8;
    if (*((_BYTE *)this + 140))
    {
      v5 = *((_QWORD *)this + 19);
      if (v8 > v5)
      {
        v6 = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT);
        v4 = v5;
        if (v6)
        {
          *(_DWORD *)buf = 136315394;
          v10 = "ZoneState.cpp";
          v11 = 1024;
          v12 = 779;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetSampleStart: Capping sample start to loop start", buf, 0x12u);
          v4 = *((_QWORD *)this + 19);
        }
      }
    }
    *((_QWORD *)this + 15) = v4;
    v7 = *((_QWORD *)this + 13);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4205, 0);
  }
}

_DWORD *ZoneState::SetSampleDirection(_DWORD *this, int a2)
{
  CAXException *exception;
  CAXException *v3;
  _BYTE v4[16];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  _BYTE *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (this[34] != a2)
  {
    if ((a2 - 62) <= 0xFFFFFFFD)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v4, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v6 = "ZoneState.cpp";
        v7 = 1024;
        v8 = 809;
        v9 = 2080;
        v10 = v4;
        v11 = 2080;
        v12 = "ZoneState::SetSampleDirection: Invalid direction";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "ZoneState::SetSampleDirection: Invalid direction", -10851);
    }
    if (a2 != 60)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v4, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v6 = "ZoneState.cpp";
        v7 = 1024;
        v8 = 811;
        v9 = 2080;
        v10 = v4;
        v11 = 2080;
        v12 = "Reverse samples not yet supported";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      v3 = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(v3, "Reverse samples not yet supported", -10851);
    }
    this[34] = 60;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4207, 0);
  }
  return this;
}

void sub_210AF0888(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopEnabled(ZoneState *this, int a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  ZoneState *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = 136315906;
    v5 = "ZoneState.cpp";
    v6 = 1024;
    v7 = 822;
    v8 = 2048;
    v9 = this;
    v10 = 1024;
    v11 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopEnabled(%p, %u)", (uint8_t *)&v4, 0x22u);
  }
  if (*((unsigned __int8 *)this + 140) != a2)
  {
    *((_BYTE *)this + 140) = a2;
    ZoneState::CheckLoops(this);
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4208, 0);
  }
}

void ZoneState::SetLoopType(ZoneState *this, int a2)
{
  CAXException *exception;
  _BYTE v5[16];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  ZoneState *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "ZoneState.cpp";
    v8 = 1024;
    v9 = 832;
    v10 = 2048;
    v11 = this;
    v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopType(%p, %u)", buf, 0x22u);
  }
  if ((a2 - 74) <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v7 = "ZoneState.cpp";
      v8 = 1024;
      v9 = 834;
      v10 = 2080;
      v11 = (ZoneState *)v5;
      v12 = 2080;
      v13 = "ZoneState::SetLoopType: Invalid type";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetLoopType: Invalid type", -10851);
  }
  if (*((_DWORD *)this + 36) != a2)
  {
    *((_DWORD *)this + 36) = a2;
    ZoneState::CheckLoops(this);
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4210, 0);
  }
}

void sub_210AF0B6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopEnd(ZoneState *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  ZoneState *v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "ZoneState.cpp";
    v8 = 1024;
    v9 = 862;
    v10 = 2048;
    v11 = this;
    v12 = 2048;
    v13 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopEnd(%p, %llu)", buf, 0x26u);
  }
  if (*((_QWORD *)this + 20) != a2)
  {
    v5 = a2;
    v4 = *((_QWORD *)this + 16);
    if (v4 < a2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v7 = "ZoneState.cpp";
        v8 = 1024;
        v9 = 867;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetLoopEnd: Capping loop end to sample end", buf, 0x12u);
        v4 = *((_QWORD *)this + 16);
      }
      v5 = v4;
    }
    CHECK_RANGE<unsigned long long>(&v5, *((_QWORD *)this + 15), v4, (uint64_t)"ZoneState::SetLoopEnd: Invalid loop end");
    CHECK_RANGE<unsigned long long>(&v5, *((_QWORD *)this + 19) + 4, *((_QWORD *)this + 16), (uint64_t)"ZoneState::SetLoopEnd: Loop end point too close to or before loop start");
    *((_QWORD *)this + 20) = v5;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4212, 0);
  }
}

void ZoneState::SetLoopStart(ZoneState *this, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  ZoneState *v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v9 = "ZoneState.cpp";
    v10 = 1024;
    v11 = 844;
    v12 = 2048;
    v13 = this;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopStart(%p, %llu)", buf, 0x26u);
  }
  if (*((_QWORD *)this + 19) != a2)
  {
    v7 = a2;
    v4 = *((_QWORD *)this + 15);
    if (v4 > a2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "ZoneState.cpp";
        v10 = 1024;
        v11 = 849;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::SetLoopStart: Capping loop start to sample start", buf, 0x12u);
        v4 = *((_QWORD *)this + 15);
      }
      v7 = v4;
    }
    CHECK_RANGE<unsigned long long>(&v7, v4, *((_QWORD *)this + 16), (uint64_t)"ZoneState::SetLoopStart: Invalid loop start");
    v5 = *((_QWORD *)this + 20);
    if (v5)
      v6 = v5 - 4;
    else
      v6 = 0;
    CHECK_RANGE<unsigned long long>(&v7, 0, v6, (uint64_t)"ZoneState::SetLoopStart: Loop start too close to or after loop end");
    *((_QWORD *)this + 19) = v7;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4211, 0);
  }
}

float *ZoneState::SetLoopTune(float *this, float a2)
{
  float *v2;
  float v3;

  v3 = a2;
  if (this[43] != a2)
  {
    v2 = this;
    CHECK_RANGE<float>(&v3, (uint64_t)"ZoneState::SetLoopTune: Invalid tune", -99.0, 99.0);
    v2[43] = v3;
    return (float *)(*(uint64_t (**)(float *, uint64_t, _QWORD))(*(_QWORD *)v2 + 112))(v2, 4213, 0);
  }
  return this;
}

void CHECK_RANGE<unsigned long long>(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 <= *a1)
    v5 = *a1;
  else
    v5 = a2;
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = v5;
  if (v6 != *a1 && os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315906;
    v9 = "SamplerUtils.h";
    v10 = 1024;
    v11 = 57;
    v12 = 2080;
    v13 = a4;
    v14 = 2080;
    v15 = "value constrained to limits";
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s:  %s", (uint8_t *)&v8, 0x26u);
  }
  *a1 = v6;
}

void ZoneState::CheckLoops(ZoneState *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 140))
  {
    v7 = *((_QWORD *)this + 19);
    v2 = *((_QWORD *)this + 15);
    if (v7 < v2)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "ZoneState.cpp";
        v10 = 1024;
        v11 = 925;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::CheckLoops: Capping loop start to sample start", buf, 0x12u);
        v2 = *((_QWORD *)this + 15);
      }
      v7 = v2;
    }
    CHECK_RANGE<unsigned long long>(&v7, v2, *((_QWORD *)this + 16) - 4, (uint64_t)"ZoneState::CheckLoops: Capping loop start before sample end");
    v3 = *((_QWORD *)this + 20);
    if (v3)
      v4 = v3 - 4;
    else
      v4 = 0;
    CHECK_RANGE<unsigned long long>(&v7, 0, v4, (uint64_t)"ZoneState::CheckLoops: Loop start too close to or after loop end");
    *((_QWORD *)this + 19) = v7;
    v6 = *((_QWORD *)this + 20);
    v5 = *((_QWORD *)this + 16);
    if (v6 > v5)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v9 = "ZoneState.cpp";
        v10 = 1024;
        v11 = 936;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d ZoneState::CheckLoops: Capping loop end to sample end", buf, 0x12u);
        v5 = *((_QWORD *)this + 16);
      }
      v6 = v5;
    }
    CHECK_RANGE<unsigned long long>(&v6, *((_QWORD *)this + 15), v5, (uint64_t)"ZoneState::CheckLoops: Invalid loop end");
    CHECK_RANGE<unsigned long long>(&v6, *((_QWORD *)this + 19) + 4, *((_QWORD *)this + 16), (uint64_t)"ZoneState::CheckLoops: Loop end point too close to or before loop start");
    *((_QWORD *)this + 20) = v6;
  }
}

void ZoneState::LoadSampleInfo(ZoneState *this, Sample *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v4 = (**(uint64_t (***)(ZoneState *))this)(this);
    v5 = *((_QWORD *)a2 + 5);
    v12 = 136315906;
    v13 = "ZoneState.cpp";
    v14 = 1024;
    v15 = 146;
    v16 = 1024;
    v17 = v4;
    v18 = 2112;
    v19 = v5;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::LoadSampleInfo(zone 0x%x): sample: %@", (uint8_t *)&v12, 0x22u);
  }
  *((_DWORD *)this + 28) = 50;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 34) = 60;
  *((_DWORD *)this + 42) = -1;
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 23) - 1;
  ZoneState::SetRootKey(this, *((unsigned __int8 *)a2 + 72));
  *((_BYTE *)this + 184) = *((_BYTE *)a2 + 73);
  *((_BYTE *)this + 185) = *((_BYTE *)a2 + 74);
  *((_BYTE *)this + 186) = *((_BYTE *)a2 + 75);
  *((_BYTE *)this + 187) = *((_BYTE *)a2 + 76);
  v6 = *((_DWORD *)a2 + 22);
  if (v6 > 71)
  {
    if (v6 == 73)
      v9 = 73;
    else
      v9 = 0;
    v7 = v6 == 72 || v6 == 73;
    if (v6 == 72)
      v8 = 72;
    else
      v8 = v9;
  }
  else if (v6)
  {
    v7 = v6 == 71;
    if (v6 == 71)
      v8 = 71;
    else
      v8 = 0;
  }
  else
  {
    ZoneState::SetLoopEnabled(this, 0);
    v7 = 0;
    v8 = 71;
  }
  v11 = *((_QWORD *)a2 + 12);
  v10 = *((_QWORD *)a2 + 13);
  if (v10 <= v11)
  {
    v11 = 0;
    v7 = 0;
    v10 = *((_QWORD *)a2 + 23) - 1;
  }
  ZoneState::SetLoopEnd(this, v10);
  ZoneState::SetLoopStart(this, v11);
  ZoneState::SetLoopEnabled(this, v7);
  ZoneState::SetLoopType(this, v8);
}

void ZoneState::SetGateMode(ZoneState *this, int a2)
{
  CAXException *exception;
  _BYTE v5[16];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  ZoneState *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "ZoneState.cpp";
    v8 = 1024;
    v9 = 897;
    v10 = 2048;
    v11 = this;
    v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetGateMode(%p, %u)", buf, 0x22u);
  }
  if (*((_DWORD *)this + 54) != a2)
  {
    if ((a2 - 13) <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
        *(_DWORD *)buf = 136315906;
        v7 = "ZoneState.cpp";
        v8 = 1024;
        v9 = 901;
        v10 = 2080;
        v11 = (ZoneState *)v5;
        v12 = 2080;
        v13 = "ZoneState::SetGateMode: Invalid gate mode";
        _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
      }
      exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
      CAXException::CAXException(exception, "ZoneState::SetGateMode: Invalid gate mode", -10851);
    }
    *((_DWORD *)this + 54) = a2;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4151, 0);
  }
}

void sub_210AF15F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::SetLoopingMode(ZoneState *this, int a2)
{
  CAXException *exception;
  _BYTE v5[16];
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  ZoneState *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    v7 = "ZoneState.cpp";
    v8 = 1024;
    v9 = 762;
    v10 = 2048;
    v11 = this;
    v12 = 1024;
    LODWORD(v13) = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d ZoneState::SetLoopingMode(%p, %u)", buf, 0x22u);
  }
  if ((a2 - 52) <= 0xFFFFFFFD)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      CAX4CCString::CAX4CCString((CAX4CCString *)v5, 0xFFFFD59D);
      *(_DWORD *)buf = 136315906;
      v7 = "ZoneState.cpp";
      v8 = 1024;
      v9 = 764;
      v10 = 2080;
      v11 = (ZoneState *)v5;
      v12 = 2080;
      v13 = "ZoneState::SetLoopingMode: Invalid mode";
      _os_log_impl(&dword_210A23000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
    }
    exception = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "ZoneState::SetLoopingMode: Invalid mode", -10851);
  }
  if (*((_DWORD *)this + 28) != a2)
  {
    *((_DWORD *)this + 28) = a2;
    (*(void (**)(ZoneState *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, 4209, 0);
  }
}

void sub_210AF17CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ZoneState::ZoneState(ZoneState *this, int a2, SamplerState *a3, unsigned int a4)
{
  uint64_t v6;

  SamplerState::SamplerState(this, 7, a2, a3, 1u);
  *(_DWORD *)(v6 + 88) = 1879048192;
  *(_QWORD *)v6 = &off_24CA947D0;
  *(_DWORD *)(v6 + 96) = -1;
  *(_QWORD *)(v6 + 104) = 0;
  *(_DWORD *)(v6 + 112) = 50;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_DWORD *)(v6 + 136) = 60;
  *(_BYTE *)(v6 + 140) = 0;
  *(_DWORD *)(v6 + 144) = 71;
  *(_QWORD *)(v6 + 152) = 0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = 0xFFFFFFFFLL;
  *(_QWORD *)(v6 + 176) = 0xFFFFFFFFLL;
  *(_WORD *)(v6 + 188) = 316;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0x463B8000C63B8000;
  *(_DWORD *)(v6 + 216) = -1;
  *(_WORD *)(v6 + 220) = 0;
  *(_DWORD *)(v6 + 224) = 0;
  *(_DWORD *)(v6 + 184) = 2130738944;
  if (a4 != -1)
    ZoneState::LoadSample((uint64_t)this, a4);
}

void sub_210AF18BC(_Unwind_Exception *a1)
{
  SamplerState *v1;
  ZoneState::SampleInfo *v2;

  ZoneState::SampleInfo::~SampleInfo(v2);
  SamplerState::~SamplerState(v1);
  _Unwind_Resume(a1);
}

uint64_t ZoneState::GetPropertyInfo(ZoneState *this, int *a2, unsigned int *a3, BOOL *a4)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;

  v4 = (int)this;
  result = 0;
  v6 = 4;
  if (v4 <= 4199)
  {
    v8 = v4 - 4120;
    v9 = 8;
    switch(v8)
    {
      case 0:
        goto LABEL_11;
      case 1:
        v9 = 4;
LABEL_11:
        v6 = v9;
        goto LABEL_12;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 15:
        goto LABEL_12;
      case 8:
      case 9:
        v6 = 2;
        goto LABEL_12;
      default:
        return result;
    }
  }
  if ((v4 - 4200) <= 0xF)
  {
    v7 = 1 << (v4 - 104);
    if ((v7 & 0xE79D) != 0)
    {
LABEL_12:
      *a2 = v6;
      result = 1;
      *(_BYTE *)a3 = 1;
      return result;
    }
    if ((v7 & 0x1860) != 0)
    {
      v6 = 8;
      goto LABEL_12;
    }
  }
  if ((v4 - 4400) < 2)
    goto LABEL_12;
  return result;
}

_QWORD *AUConverterFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x270uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUConverter>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUConverter>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void SamplerBase::PostConstructor(int64x2_t *this)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t Element;
  uint64_t v6;
  ausdk::AUElement *v7;
  ausdk::AUElement **v8;
  uint64_t v9;
  ausdk::AUElement *v10;
  ausdk::AUElement **v11;
  uint64_t v12;
  ausdk::AUElement *v13;
  ausdk::AUElement **v14;
  uint64_t v15;
  ausdk::AUElement *v16;
  ausdk::AUElement **v17;
  _BYTE v18[40];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v18 = 136315650;
    *(_QWORD *)&v18[4] = "SamplerBase.cpp";
    *(_WORD *)&v18[12] = 1024;
    *(_DWORD *)&v18[14] = 197;
    *(_WORD *)&v18[18] = 2048;
    *(_QWORD *)&v18[20] = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::PostConstructor(%p)", v18, 0x1Cu);
  }
  ausdk::AUBase::CreateElements(this);
  v2 = 0;
  *(_QWORD *)v18 = 0x40E5888000000000;
  *(_OWORD *)&v18[8] = xmmword_210B09F40;
  *(_OWORD *)&v18[24] = xmmword_210B09F50;
  while (1)
  {
    v3 = this[10].i64[1];
    if (v3)
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      v4 = (unint64_t)(this[9].i64[1] - this[9].i64[0]) >> 3;
    if (v2 >= v4)
      break;
    Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], v2);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)Element + 56))(Element, v18);
    ++v2;
  }
  (*(void (**)(int64x2_t *, float))(this->i64[0] + 744))(this, 44100.0);
  v6 = this[4].i64[1];
  if (v6)
  {
    v7 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 32))(v6, 0);
  }
  else
  {
    v8 = (ausdk::AUElement **)this[3].i64[0];
    if ((ausdk::AUElement **)this[3].i64[1] == v8)
      v7 = 0;
    else
      v7 = *v8;
  }
  ausdk::AUElement::SetParameter(v7, 0x384u, 0.0, 0);
  v9 = this[4].i64[1];
  if (v9)
  {
    v10 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, 0);
  }
  else
  {
    v11 = (ausdk::AUElement **)this[3].i64[0];
    if ((ausdk::AUElement **)this[3].i64[1] == v11)
      v10 = 0;
    else
      v10 = *v11;
  }
  ausdk::AUElement::SetParameter(v10, 0x385u, 0.0, 0);
  v12 = this[4].i64[1];
  if (v12)
  {
    v13 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, 0);
  }
  else
  {
    v14 = (ausdk::AUElement **)this[3].i64[0];
    if ((ausdk::AUElement **)this[3].i64[1] == v14)
      v13 = 0;
    else
      v13 = *v14;
  }
  ausdk::AUElement::SetParameter(v13, 0x386u, 0.0, 0);
  v15 = this[4].i64[1];
  if (v15)
  {
    v16 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 0);
  }
  else
  {
    v17 = (ausdk::AUElement **)this[3].i64[0];
    if ((ausdk::AUElement **)this[3].i64[1] == v17)
      v16 = 0;
    else
      v16 = *v17;
  }
  ausdk::AUElement::SetParameter(v16, 0x387u, 0.0, 0);
}

uint64_t SamplerBase::Initialize(SamplerBase *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t Note;
  uint64_t v14;
  uint64_t *v15;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v17 = 136315394;
    v18 = "SamplerBase.cpp";
    v19 = 1024;
    v20 = 233;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Initialize", (uint8_t *)&v17, 0x12u);
  }
  v2 = 0;
  atomic_store(0x80u, (unsigned int *)this + 136);
  *((_QWORD *)this + 86) = -1;
  for (*((_DWORD *)this + 202) = 0;
        ;
        *((_DWORD *)this + 202) += *(_DWORD *)(ausdk::AUScope::SafeGetElement((SamplerBase *)((char *)this + 128), v2++)
                                             + 108))
  {
    v3 = *((_QWORD *)this + 21);
    if (v3)
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      v4 = (*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3;
    if (v2 >= v4)
      break;
  }
  v5 = *((__int16 *)this + 414);
  if (!*((_WORD *)this + 414))
  {
    (*(void (**)(SamplerBase *))(*(_QWORD *)this + 720))(this);
    v6 = (*(uint64_t (**)(SamplerBase *))(*(_QWORD *)this + 728))(this);
    v7 = (_QWORD *)operator new[]();
    *v7 = 160;
    v7[1] = v6;
    v8 = v7 + 2;
    if (v6)
    {
      v9 = 0;
      do
      {
        v7[v9 + 18] = 0;
        v10 = (uint64_t)&v7[v9 + 18];
        *(_OWORD *)(v10 - 112) = 0uLL;
        *(_OWORD *)(v10 - 96) = 0uLL;
        *(_QWORD *)(v10 - 80) = 0x7FFFFFFFFLL;
        *(_QWORD *)(v10 - 72) = 0;
        *(_QWORD *)(v10 - 64) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v10 - 52) = 0;
        *(_DWORD *)(v10 - 56) = -1;
        *(_QWORD *)(v10 - 128) = &off_24CA8B5E8;
        *(_QWORD *)(v10 - 120) = &unk_24CA8B650;
        v11 = (uint64_t)&v7[v9 + 13];
        *(_QWORD *)(v10 - 40) = v11;
        *(_QWORD *)(v10 - 32) = v11;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 - 24) = 0;
        *(_QWORD *)(v10 - 16) = 0;
        *(_QWORD *)(v10 - 8) = v10;
        *(_QWORD *)(v10 + 16) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v10 + 24) = 0;
        *(_WORD *)(v10 + 28) = 0;
        LOBYTE(v11) = BYTE6(v7[v9 + 21]) & 0xFC;
        v9 += 20;
        *(_BYTE *)(v10 + 30) = v11;
      }
      while (20 * v6 != v9);
      v12 = 0;
      *((_QWORD *)this + 87) = v8;
      *((_DWORD *)this + 144) = v6;
      *((_DWORD *)this + 146) = v6 - 2;
      *((_DWORD *)this + 156) = 160;
      *((_QWORD *)this + 74) = v7 + 3;
      do
      {
        Note = AUInstrumentBase::GetNote(this, v12);
        (*(void (**)(uint64_t))(*(_QWORD *)Note + 16))(Note);
        *(_DWORD *)(Note + 44) = *((_DWORD *)this + 150);
        v14 = *((_QWORD *)this + 76);
        *(_QWORD *)(Note + 8) = 0;
        *(_QWORD *)(Note + 16) = v14;
        if (v14)
          v15 = (uint64_t *)(v14 + 8);
        else
          v15 = (uint64_t *)((char *)this + 616);
        *v15 = Note;
        *((_QWORD *)this + 76) = Note;
        ++v12;
      }
      while (v12 < *((_DWORD *)this + 144));
    }
    else
    {
      *((_QWORD *)this + 87) = v8;
      *((_DWORD *)this + 144) = 0;
      *((_DWORD *)this + 146) = -2;
      *((_DWORD *)this + 156) = 160;
      *((_QWORD *)this + 74) = v7 + 3;
    }
    (*(void (**)(SamplerBase *))(*(_QWORD *)this + 752))(this);
    return 0;
  }
  return v5;
}

uint64_t SamplerBase::Cleanup(SamplerBase *this)
{
  uint64_t v2;
  InstrumentState **v3;
  InstrumentState **v4;
  InstrumentState *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v13 = 136315394;
    v14 = "SamplerBase.cpp";
    v15 = 1024;
    v16 = 272;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Cleanup", (uint8_t *)&v13, 0x12u);
  }
  (*(void (**)(SamplerBase *, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, 0, 0);
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_BYTE *)this + 825) = 0;
  v2 = *((_QWORD *)this + 92);
  v3 = *(InstrumentState ***)(v2 + 88);
  v4 = *(InstrumentState ***)(v2 + 96);
  while (v3 != v4)
  {
    v5 = *v3++;
    InstrumentState::Cleanup(v5);
  }
  v6 = *((_QWORD *)this + 87);
  if (v6)
  {
    v7 = v6 - 16;
    v8 = *(_QWORD *)(v6 - 8);
    if (v8)
    {
      v9 = v6 - 160;
      v10 = 160 * v8;
      do
      {
        SamplerNote::~SamplerNote((SamplerNote *)(v9 + v10));
        v10 -= 160;
      }
      while (v10);
    }
    MEMORY[0x212BCDF2C](v7, 0x10A1C80263E6CA5);
  }
  *((_QWORD *)this + 87) = 0;
  *((_DWORD *)this + 144) = 0;
  *((_DWORD *)this + 146) = 0;
  *((_DWORD *)this + 156) = 0;
  *((_QWORD *)this + 74) = 0;
  v11 = CADeprecated::TSingleton<CADeprecated::RealtimeDeallocator>::instance();
  MEMORY[0x212BCD578](v11);
  result = (*(uint64_t (**)(SamplerBase *))(*(_QWORD *)this + 736))(this);
  *((_WORD *)this + 414) = 0;
  return result;
}

uint64_t SamplerBase::GetPropertyInfo(SamplerBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (a3)
    {
LABEL_19:
      if (a2 == 1000)
      {
        v6 = 4294956430;
        goto LABEL_22;
      }
    }
    else
    {
      v6 = 4294956417;
      if (a2 > 999)
      {
        switch(a2)
        {
          case 4103:
          case 4122:
          case 4123:
          case 4124:
          case 4125:
          case 4126:
          case 4135:
            v6 = 0;
            *a6 = 1;
            v7 = 4;
            goto LABEL_6;
          case 4104:
          case 4108:
          case 4110:
          case 4111:
          case 4131:
            v6 = 0;
            v10 = 4;
            goto LABEL_33;
          case 4105:
            v6 = 0;
            *a6 = 0;
            v7 = 512;
LABEL_6:
            *a5 = v7;
            return v6;
          case 4106:
            LODWORD(v14) = *((unsigned __int8 *)this + 17);
            if (*((_BYTE *)this + 17))
              LODWORD(v14) = 4 * *(_DWORD *)(*((_QWORD *)this + 92) + 136);
            v6 = 0;
            goto LABEL_27;
          case 4107:
            v6 = 0;
            v10 = 24;
            goto LABEL_33;
          case 4109:
            v6 = 0;
            LODWORD(v14) = 24;
            goto LABEL_27;
          case 4112:
          case 4114:
          case 4115:
          case 4116:
          case 4117:
          case 4118:
          case 4119:
          case 4120:
          case 4121:
          case 4127:
          case 4128:
          case 4129:
          case 4130:
          case 4132:
          case 4133:
          case 4134:
            goto LABEL_22;
          case 4113:
            v6 = 0;
            LODWORD(v14) = 40;
            goto LABEL_27;
          default:
            if (a2 != 1000)
              goto LABEL_22;
            v6 = 0;
            LODWORD(v14) = 4;
            goto LABEL_27;
        }
      }
      if (a2 != 33 && a2 != 38)
      {
        if (a2 == 56)
        {
          v6 = 0;
          v10 = 8;
LABEL_33:
          *a5 = v10;
          v8 = 1;
LABEL_43:
          *a6 = v8;
          return v6;
        }
LABEL_22:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v18 = 136315650;
          v19 = "SamplerBase.cpp";
          v20 = 1024;
          v21 = 511;
          v22 = 2048;
          v23 = (int)v6;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::GetPropertyInfo returning %ld", (uint8_t *)&v18, 0x1Cu);
        }
        return v6;
      }
      *a6 = 0;
      *a5 = 24;
    }
    v6 = 4294956417;
    goto LABEL_22;
  }
  v8 = 1;
  v9 = 8;
  switch(a2)
  {
    case 4120:
    case 4132:
      goto LABEL_42;
    case 4121:
    case 4128:
    case 4129:
    case 4137:
    case 4138:
    case 4139:
      goto LABEL_19;
    case 4122:
    case 4123:
    case 4124:
    case 4125:
    case 4126:
    case 4127:
    case 4130:
    case 4131:
    case 4134:
    case 4135:
    case 4136:
    case 4142:
    case 4145:
    case 4147:
    case 4148:
      v9 = 4;
      goto LABEL_42;
    case 4133:
    case 4141:
    case 4144:
      goto LABEL_24;
    case 4140:
      v15 = *(_QWORD *)(*((_QWORD *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 92) + 96) - v15) >> 3))
        goto LABEL_45;
      v6 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(v15 + 8 * a4) + 232);
      v13 = *(_QWORD *)(*(_QWORD *)(v15 + 8 * a4) + 240);
      goto LABEL_38;
    case 4143:
      v16 = *(_QWORD *)(*((_QWORD *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 92) + 96) - v16) >> 3))
        goto LABEL_45;
      v6 = 0;
      LODWORD(v14) = 4 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8 * a4) + 112) + 16);
      goto LABEL_27;
    case 4146:
      v8 = 0;
      v9 = 80;
      goto LABEL_42;
    default:
      if (a2 == 4231)
      {
LABEL_24:
        v8 = 1;
        v9 = 72;
LABEL_42:
        v6 = 0;
        *a5 = v9;
        goto LABEL_43;
      }
      if (a2 != 4230)
        goto LABEL_19;
      v11 = *(_QWORD *)(*((_QWORD *)this + 92) + 88);
      if (a4 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 92) + 96) - v11) >> 3))
LABEL_45:
        std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
      v6 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * a4) + 208);
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8 * a4) + 216);
LABEL_38:
      v14 = ((unint64_t)(v13 - v12) >> 1) & 0xFFFFFFFC;
LABEL_27:
      *a5 = v14;
      *a6 = 0;
      break;
  }
  return v6;
}

uint64_t SamplerBase::GetProperty(SamplerBase *this, uint64_t a2, int a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t Note;
  uint64_t v13;
  unsigned int v14;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v5 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 0:
      switch((_DWORD)a2)
      {
        case 0x100E:
          v5 = 0;
          v9 = *((_DWORD *)this + 146);
          goto LABEL_17;
        case 0x1009:
          v11 = 0;
          a5[30] = 0u;
          a5[31] = 0u;
          a5[28] = 0u;
          a5[29] = 0u;
          a5[26] = 0u;
          a5[27] = 0u;
          a5[24] = 0u;
          a5[25] = 0u;
          a5[22] = 0u;
          a5[23] = 0u;
          a5[20] = 0u;
          a5[21] = 0u;
          a5[18] = 0u;
          a5[19] = 0u;
          a5[16] = 0u;
          a5[17] = 0u;
          a5[14] = 0u;
          a5[15] = 0u;
          a5[12] = 0u;
          a5[13] = 0u;
          a5[10] = 0u;
          a5[11] = 0u;
          a5[8] = 0u;
          a5[9] = 0u;
          a5[6] = 0u;
          a5[7] = 0u;
          a5[4] = 0u;
          a5[5] = 0u;
          a5[2] = 0u;
          a5[3] = 0u;
          *a5 = 0u;
          a5[1] = 0u;
          do
          {
            Note = AUInstrumentBase::GetNote(this, v11);
            if (*(int *)(Note + 44) <= 4)
            {
              v13 = (int)*(float *)(Note + 68);
              v14 = (int)*(float *)(Note + 72);
              if (*((_DWORD *)a5 + v13) < v14)
                *((_DWORD *)a5 + v13) = v14;
            }
            ++v11;
          }
          while (v11 != 66);
          return 0;
        case 0x1008:
          v5 = 0;
          v9 = *((_DWORD *)this + 145);
          goto LABEL_17;
      }
      if (((*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**((_QWORD **)this + 92) + 16))(*((_QWORD *)this + 92), a2, a5) & 1) != 0)return 0;
      if ((_DWORD)a2 != 1000)
        goto LABEL_29;
      v16 = 0;
      v5 = (*(uint64_t (**)(SamplerBase *, int *))(*(_QWORD *)this + 592))(this, &v16);
      *(_DWORD *)a5 = v16;
      if ((_DWORD)v5)
        goto LABEL_30;
      return v5;
    case 1:
      goto LABEL_12;
    case 2:
      if ((_DWORD)a2 == 1000)
      {
        v5 = 4294956430;
        goto LABEL_30;
      }
      if ((_DWORD)a2 != 11)
      {
LABEL_29:
        v5 = 4294956417;
LABEL_30:
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
        {
          v16 = 136315906;
          v17 = "SamplerBase.cpp";
          v18 = 1024;
          v19 = 618;
          v20 = 2048;
          v21 = (int)v5;
          v22 = 1024;
          v23 = a2;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::GetProperty returning %ld for property %u", (uint8_t *)&v16, 0x22u);
        }
        return v5;
      }
      v5 = 0;
      v9 = 1;
LABEL_17:
      *(_DWORD *)a5 = v9;
      return v5;
    case 4:
      if ((_DWORD)a2 == 4146)
      {
        *(_DWORD *)a5 = a4;
        a4 = 0;
      }
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 92) + 32))(*((_QWORD *)this + 92), a4, 0);
      v5 = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v10 + 16))(v10, a2, a5) & 1) != 0)
        return v5;
LABEL_12:
      if ((_DWORD)a2 == 1000)
        v5 = 4294956430;
      else
        v5 = 4294956417;
      goto LABEL_30;
    default:
      return v5;
  }
}

uint64_t SamplerBase::SetProperty(SamplerBase *this, uint64_t a2, int a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  _BYTE v23[10];
  _BYTE v24[6];
  __int16 v25;
  const void *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v18 = 136316674;
    v19 = "SamplerBase.cpp";
    v20 = 1024;
    v21 = 639;
    v22 = 1024;
    *(_DWORD *)v23 = a2;
    *(_WORD *)&v23[4] = 1024;
    *(_DWORD *)&v23[6] = a3;
    *(_WORD *)v24 = 1024;
    *(_DWORD *)&v24[2] = a4;
    v25 = 2048;
    v26 = a5;
    v27 = 1024;
    v28 = a6;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetProperty(%u, %u, 0x%x, %p, %u)", (uint8_t *)&v18, 0x34u);
  }
  if ((a3 - 1) < 2)
  {
LABEL_15:
    v15 = 4294956417;
    goto LABEL_19;
  }
  if (a3 == 4)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 92) + 32))(*((_QWORD *)this + 92), a4, 0);
    if (v14)
    {
LABEL_13:
      if (((*(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)v14 + 24))(v14, a2, a5, a6) & 1) != 0)return 0;
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v18 = 136315906;
      v19 = "SamplerBase.cpp";
      v20 = 1024;
      v21 = 712;
      v22 = 1024;
      *(_DWORD *)v23 = a4;
      *(_WORD *)&v23[4] = 1024;
      *(_DWORD *)&v23[6] = a4;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR:  SamplerBase::SetProperty: Invalid element ID for Part scope: %u (0x%x)", (uint8_t *)&v18, 0x1Eu);
    }
    goto LABEL_18;
  }
  if (a3)
    return 0;
  if ((_DWORD)a4)
  {
LABEL_18:
    v15 = 4294956419;
    goto LABEL_19;
  }
  if ((_DWORD)a2 == 56)
    return SOFT_CAUI_createCustomViewForAudioUnit(*((OpaqueAudioComponentInstance **)this + 1), a5);
  if ((_DWORD)a2 != 4104)
  {
    if ((_DWORD)a2 == 4111)
    {
      v12 = *((_QWORD *)this + 27);
      if (v12)
        LODWORD(v13) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      else
        v13 = (*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 3;
      if ((int)v13 >= 1)
      {
        v17 = 0;
        do
        {
          (*(void (**)(SamplerBase *, _QWORD))(*(_QWORD *)this + 672))(this, v17);
          v15 = 0;
          ++v17;
        }
        while ((_DWORD)v13 != v17);
        return v15;
      }
      return 0;
    }
    v14 = *((_QWORD *)this + 92);
    goto LABEL_13;
  }
  v15 = 4294956431;
LABEL_19:
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v18 = 136315906;
    v19 = "SamplerBase.cpp";
    v20 = 1024;
    v21 = 720;
    v22 = 2048;
    *(_QWORD *)v23 = (int)v15;
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)v24 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetProperty returning %ld for property %u", (uint8_t *)&v18, 0x22u);
  }
  return v15;
}

uint64_t SamplerBase::GetParameter(GlobalState **this, uint64_t a2, unsigned int a3, uint64_t a4, float *a5)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  ausdk::AUScope *Scope;
  ausdk::AUElement *Element;
  unsigned int v12;
  float Parameter;
  GlobalState *v14;
  unsigned int v15;
  GlobalState *v16;
  ausdk::AUElement *v17;
  GlobalState *v18;
  GlobalState *v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  ausdk::AUElement **v23;
  ausdk::AUElement **v24;
  ausdk::AUElement **v25;
  ausdk::AUElement **v26;
  float v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v6 = a4;
  v7 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if (a3 == 3)
    return (*((uint64_t (**)(GlobalState **, uint64_t, uint64_t, float *))*this + 96))(this, a2, a4, a5);
  if (a3)
  {
    Scope = (ausdk::AUScope *)ausdk::AUBase::GetScope((ausdk::AUBase *)this, a3);
    Element = (ausdk::AUElement *)ausdk::AUScope::SafeGetElement(Scope, v6);
    v12 = v7;
LABEL_9:
    Parameter = ausdk::AUElement::GetParameter(Element, v12);
  }
  else
  {
    if ((_DWORD)a4)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        v28 = 136315650;
        v29 = "SamplerBase.cpp";
        v30 = 1024;
        v31 = 926;
        v32 = 1024;
        v33 = v6;
        _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: SamplerBase::GetParameter: Invalid element for global scope: %u", (uint8_t *)&v28, 0x18u);
      }
      return 4294956419;
    }
    switch((int)a2)
    {
      case 900:
        v14 = this[9];
        if (v14)
        {
          Element = (ausdk::AUElement *)(*(uint64_t (**)(GlobalState *, _QWORD))(*(_QWORD *)v14 + 32))(this[9], 0);
        }
        else
        {
          v23 = (ausdk::AUElement **)this[6];
          if (this[7] == (GlobalState *)v23)
            Element = 0;
          else
            Element = *v23;
        }
        v12 = 900;
        goto LABEL_9;
      case 901:
        v16 = this[9];
        if (v16)
        {
          v17 = (ausdk::AUElement *)(*(uint64_t (**)(GlobalState *, _QWORD))(*(_QWORD *)v16 + 32))(this[9], 0);
        }
        else
        {
          v24 = (ausdk::AUElement **)this[6];
          if (this[7] == (GlobalState *)v24)
            v17 = 0;
          else
            v17 = *v24;
        }
        v27 = ausdk::AUElement::GetParameter(v17, 0x385u);
        v8 = 0;
        Parameter = (float)(int)v27;
        goto LABEL_11;
      case 902:
        v18 = this[9];
        if (v18)
        {
          Element = (ausdk::AUElement *)(*(uint64_t (**)(GlobalState *, _QWORD))(*(_QWORD *)v18 + 32))(this[9], 0);
        }
        else
        {
          v25 = (ausdk::AUElement **)this[6];
          if (this[7] == (GlobalState *)v25)
            Element = 0;
          else
            Element = *v25;
        }
        v12 = 902;
        goto LABEL_9;
      case 903:
        v19 = this[9];
        if (v19)
        {
          Element = (ausdk::AUElement *)(*(uint64_t (**)(GlobalState *, _QWORD))(*(_QWORD *)v19 + 32))(this[9], 0);
        }
        else
        {
          v26 = (ausdk::AUElement **)this[6];
          if (this[7] == (GlobalState *)v26)
            Element = 0;
          else
            Element = *v26;
        }
        v12 = 903;
        goto LABEL_9;
      default:
        if ((_DWORD)a2 == 800)
        {
          if (*((_DWORD *)this + 203))
          {
            if (*((_DWORD *)this + 205) == 1)
              v15 = 2;
            else
              v15 = 1;
          }
          else
          {
            v15 = 0;
          }
          v8 = 0;
          *((_DWORD *)this + 205) = v15;
          Parameter = (float)v15;
          goto LABEL_11;
        }
        if ((a2 & 0xFFFFFFF8) == 0x3E8)
        {
          GlobalState::GetPerformanceParameter(this[92], a2, a5);
          return 0;
        }
        v20 = a2 - 950;
        if (a2 < 0x3B6
          || (v21 = *((_DWORD *)this + 202), v21 + 950 <= a2)
          || v20 > 0xF
          || v20 >= v21)
        {
          ausdk::AUBase::GetParameter((ausdk::AUBase *)this, a2, 0, 0, a5);
          return 0;
        }
        v22 = *((float *)this[88] + v20);
        if (v22 == 0.0)
          Parameter = -120.0;
        else
          Parameter = log10f(v22) * 20.0;
        break;
    }
  }
  v8 = 0;
LABEL_11:
  *a5 = Parameter;
  return v8;
}

uint64_t SamplerBase::SetBusCount(SamplerBase *this, unsigned int a2, unsigned int a3)
{
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v7 = 136315906;
    v8 = "SamplerBase.cpp";
    v9 = 1024;
    v10 = 351;
    v11 = 1024;
    v12 = a2;
    v13 = 1024;
    v14 = a3;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetBusCount(%u, %u)", (uint8_t *)&v7, 0x1Eu);
  }
  if (*((_BYTE *)this + 17))
    return 4294956447;
  if (a2 == 2)
    *((_BYTE *)this + 824) = 1;
  return ausdk::AUBase::SetBusCount(this, a2, a3);
}

uint64_t SamplerBase::GetParameterList(SamplerBase *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  ausdk::AUBase::GetParameterList(this, a2, a3, a4);
  return 0;
}

uint64_t SamplerBase::GetParameterInfo(SamplerBase *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  const __CFString *v8;
  unsigned int v9;
  const __CFString *v10;
  AudioUnitParameterOptions v11;
  _BYTE buf[32];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_OWORD *)buf = xmmword_24CA96DF8;
    *(_OWORD *)&buf[16] = *(_OWORD *)&off_24CA96E08;
    v13 = xmmword_24CA96E18;
    v14 = *(_OWORD *)off_24CA96E28;
    if (!LocalizeAUParameterStringsForClass<SamplerBase>(std::initializer_list<__CFString const**>)::sLocalized)
      LocalizeAUParameterStringsForClass<SamplerBase>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)buf, 8);
    switch(a3)
    {
      case 0x384u:
        buffer->unit = kAudioUnitParameterUnit_Decibels;
        *(_QWORD *)&buffer->minValue = 0x41400000C2C00000;
        *(_QWORD *)&buffer->defaultValue = 0xC800000000000000;
        v8 = (const __CFString *)kSamplerGainParameterName;
        goto LABEL_16;
      case 0x385u:
        buffer->unit = kAudioUnitParameterUnit_RelativeSemiTones;
        *(_QWORD *)&buffer->minValue = 0x41C00000C1C00000;
        *(_QWORD *)&buffer->defaultValue = 0xC800000000000000;
        v8 = (const __CFString *)kSamplerCoarseTuneParameterName;
        goto LABEL_16;
      case 0x386u:
        buffer->unit = kAudioUnitParameterUnit_Cents;
        *(_QWORD *)&buffer->minValue = 0x42C60000C2C60000;
        *(_QWORD *)&buffer->defaultValue = 0xC800000000000000;
        v8 = (const __CFString *)kSamplerFineTuneParameterName;
        goto LABEL_16;
      case 0x387u:
        buffer->unit = kAudioUnitParameterUnit_Pan;
        *(_QWORD *)&buffer->minValue = 0x42C80000C2C80000;
        *(_QWORD *)&buffer->defaultValue = 0xC800000000000000;
        v8 = (const __CFString *)kSamplerPanParameterName;
LABEL_16:
        buffer->cfNameString = v8;
        CFStringGetCString(v8, buffer->name, 52, 0x8000100u);
        result = 0;
        buffer->clumpID = 1;
        buffer->flags |= 0x100000u;
        return result;
      default:
        if (a3 == 800)
        {
          buffer->unit = kAudioUnitParameterUnit_Generic;
          *(_QWORD *)&buffer->minValue = 0x4000000000000000;
          *(_QWORD *)&buffer->defaultValue = 0x4800000000000000;
          buffer->cfNameString = CFSTR("Voice Count (Private)");
          CFStringGetCString(CFSTR("Voice Count (Private)"), buffer->name, 52, 0x8000100u);
          return 0;
        }
        if (a3 >= 0x3B6)
        {
          v9 = *((_DWORD *)this + 202);
          if (v9 + 950 > a3 && a3 - 950 < v9)
          {
            v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("%@ %d"), kSamplerOutputAmpName, a3 - 950, *(_QWORD *)buf, *(_QWORD *)&buf[8], *(_OWORD *)&buf[16], v13, v14);
            buffer->cfNameString = v10;
            buffer->flags = 1207992336;
            CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
            result = 0;
            buffer->clumpID = 3;
            v11 = buffer->flags | 0x100000;
            buffer->unit = kAudioUnitParameterUnit_Decibels;
            *(_QWORD *)&buffer->minValue = 0x41A00000C2F00000;
            buffer->defaultValue = 0.0;
            buffer->flags = v11;
            return result;
          }
        }
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "SamplerBase.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 816;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = a3;
          _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR:  SamplerBase::GetParameterInfo(scope = %u, param %u): Invalid parameter", buf, 0x1Eu);
        }
        break;
    }
  }
  return 4294956418;
}

uint64_t SamplerBase::CopyClumpName(SamplerBase *this, int a2, int a3, unsigned int a4, CFTypeRef *a5)
{
  uint64_t result;
  CFTypeRef *v7;

  if (a2)
    return 4294956430;
  if ((a3 - 1) > 2)
    return 4294956418;
  v7 = (CFTypeRef *)off_24CA96F10[a3 - 1];
  CFRetain(*v7);
  result = 0;
  *a5 = *v7;
  return result;
}

BOOL SamplerBase::StreamFormatWritable(SamplerBase *this, int a2)
{
  return a2 == 2;
}

uint64_t SamplerBase::SupportedNumChannels(SamplerBase *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 1;
}

uint64_t SamplerBase::ChangeStreamFormat(SamplerBase *this, const AudioStreamBasicDescription *a2, uint64_t a3, const AudioStreamBasicDescription *a4, AudioStreamBasicDescription *a5)
{
  float mSampleRate;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a2 != 2)
    return 4294956430;
  if (ausdk::ASBD::IsCommonFloat32((ausdk::ASBD *)a5, a2))
  {
    ausdk::AUBase::ChangeStreamFormat(this, 2, a3, a4, a5);
    mSampleRate = a5->mSampleRate;
    (*(void (**)(SamplerBase *, float))(*(_QWORD *)this + 744))(this, mSampleRate);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v11 = 136315394;
      v12 = "SamplerBase.cpp";
      v13 = 1024;
      v14 = 341;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d SamplerBase::ChangeStreamFormat: Output format not supported", (uint8_t *)&v11, 0x12u);
    }
    return 4294956428;
  }
}

uint64_t SamplerBase::CreateElement@<X0>(SamplerBase *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  InstrumentState *v7;
  uint64_t v8;
  InstrumentState *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2 == 4)
  {
    result = operator new();
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = this;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 40) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = &off_24CA90418;
    *a4 = result;
    return result;
  }
  if (a2 != 3)
    return AUInstrumentBase::CreateElement(this, a2, a3, a4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 92) + 88);
  if (a3 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 92) + 96) - v6) >> 3))
LABEL_19:
    std::vector<InstrumentState *>::__throw_out_of_range[abi:ne180100]();
  v7 = *(InstrumentState **)(v6 + 8 * a3);
  v8 = operator new();
  SamplerBaseElement::SamplerBaseElement((SamplerBaseElement *)v8, this, v9);
  *(_QWORD *)v8 = &off_24CA8DED8;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_DWORD *)(v8 + 360) = -1;
  *(_QWORD *)(v8 + 364) = 0;
  *(_QWORD *)(v8 + 370) = 0;
  result = (uint64_t)SamplerBaseElement::SetInstrument((_QWORD *)v8, v7);
  if (v7)
    *(_QWORD *)(v8 + 296) = *(_QWORD *)(v8 + 296) & 0xFFFFFFFFFFFFFFFELL | (*((_DWORD *)v7 + 31) > 75);
  v11 = *(_QWORD *)(v8 + 336);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 352) - v11) >> 2) > 0x3F)
    goto LABEL_16;
  v12 = *(_QWORD *)(v8 + 344);
  v24 = v8 + 352;
  if (!*MEMORY[0x24BEC6E18])
  {
    __break(1u);
    goto LABEL_19;
  }
  v13 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x24BEC6E18]);
  v15 = *(_QWORD *)(v8 + 336);
  v14 = *(_QWORD *)(v8 + 344);
  if (v14 == v15)
  {
    v19 = vdupq_n_s64(v14);
    v16 = v13 + 12 * ((v12 - v11) / 12);
  }
  else
  {
    v16 = v13 + 12 * ((v12 - v11) / 12);
    do
    {
      v17 = *(_QWORD *)(v14 - 12);
      v14 -= 12;
      v18 = *(_DWORD *)(v14 + 8);
      *(_QWORD *)(v16 - 12) = v17;
      v16 -= 12;
      *(_DWORD *)(v16 + 8) = v18;
    }
    while (v14 != v15);
    v19 = *(int64x2_t *)(v8 + 336);
  }
  *(_QWORD *)(v8 + 336) = v16;
  *(_QWORD *)(v8 + 344) = v13 + 12 * ((v12 - v11) / 12);
  v22 = v19;
  v20 = *(_QWORD *)(v8 + 352);
  *(_QWORD *)(v8 + 352) = v13 + 768;
  v23 = v20;
  v21 = v19.i64[0];
  result = std::__split_buffer<SamplerNoteParams,caulk::rt_allocator<SamplerNoteParams> &>::~__split_buffer((uint64_t)&v21);
LABEL_16:
  *a4 = v8;
  return result;
}

void sub_210AF34D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10E1C40C8C9A2B0);
  _Unwind_Resume(a1);
}

_QWORD *SamplerBase::GetChannelLayoutTags@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;
  _DWORD *exception;

  if (a1 != 2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -10866;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = 0x65000200640001;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t SamplerBase::RealTimeStartNote(SamplerBase *this, SynthGroupElement *a2, uint64_t a3, uint64_t a4, const MusicDeviceNoteParams *a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t PartElement;
  unsigned int v15;
  uint64_t result;

  v10 = *((_DWORD *)this + 146);
  v11 = *((_QWORD *)a2 + 32);
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 24) + 196);
  v13 = *(_DWORD *)(v11 + 144);
  if (v12 < v13)
    v13 = v12;
  if (v13 < v10)
    v10 = v13;
  if (*((_DWORD *)this + 145) >= v10)
    (*(void (**)(SamplerBase *, uint64_t, _QWORD))(*(_QWORD *)this + 680))(this, a4, 0);
  PartElement = AUInstrumentBase::GetPartElement(this);
  v15 = *((_DWORD *)this + 145);
  *((_DWORD *)this + 145) = v15 + 1;
  *((_DWORD *)this + 147) = v15 + 1;
  result = (*(uint64_t (**)(SynthGroupElement *, uint64_t, uint64_t, uint64_t, const MusicDeviceNoteParams *))(*(_QWORD *)a2 + 160))(a2, PartElement, a3, a4, a5);
  if ((result - 777) < 2)
  {
    result = 0;
    --*((_DWORD *)this + 145);
  }
  else if ((_DWORD)result)
  {
    if ((_DWORD)result == 779)
    {
      if (*((_DWORD *)this + 145) > v15)
        __assert_rtn("RealTimeStartNote", "SamplerBase.cpp", 1044, "NumActiveNotes() <= activeCount - 1");
      return 0;
    }
  }
  else
  {
    *((_BYTE *)this + 816) = 1;
  }
  return result;
}

uint64_t SamplerBase::SetSampleRate(SamplerBase *this, float a2)
{
  _QWORD *v4;
  uint64_t v5;
  float v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "SamplerBase.cpp";
    v12 = 1024;
    v13 = 1150;
    v14 = 2048;
    v15 = a2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::SetSampleRate(%f)", buf, 0x1Cu);
  }
  v8[0] = &off_24CA96E48;
  v8[1] = &v7;
  v9 = v8;
  SamplerBase::DoForGroupElements((SamplerBase *)((char *)this + 176), (uint64_t)v8);
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_7;
  }
  if (v9)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  *(float *)buf = v7;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint8_t *, uint64_t))(**((_QWORD **)this + 92) + 24))(*((_QWORD *)this + 92), 2, buf, 4);
}

void sub_210AF3828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

_QWORD *SamplerBase::Configure(SamplerBase *this)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  InstrumentManager ***v6;
  InstrumentManager ***v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v2 = *((unsigned __int8 *)this + 825);
    *(_DWORD *)buf = 136315650;
    v11 = "SamplerBase.cpp";
    v12 = 1024;
    v13 = 1161;
    v14 = 1024;
    v15 = v2;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::Configure() user loaded doc: %d", buf, 0x18u);
  }
  if (!*((_BYTE *)this + 825))
  {
    v5 = *((_QWORD *)this + 92);
    v6 = *(InstrumentManager ****)(v5 + 88);
    v7 = *(InstrumentManager ****)(v5 + 96);
    while (v6 != v7)
      InstrumentState::Initialize(*v6++);
  }
  v8[0] = &off_24CA96E90;
  v9 = v8;
  SamplerBase::DoForGroupElements((SamplerBase *)((char *)this + 176), (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v4 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_210AF39A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t SamplerBase::GetGroupParameter(SamplerBase *this, unsigned int a2, unsigned int a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v7 = *((_QWORD *)this + 27);
  if (v7)
    LODWORD(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  else
    v8 = (*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 3;
  if (v8 <= a3)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v10 = 136315650;
      v11 = "SamplerBase.cpp";
      v12 = 1024;
      v13 = 1003;
      v14 = 1024;
      v15 = a3;
      _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d ERROR: SamplerBase::GetParameter: Invalid element for group scope: %u", (uint8_t *)&v10, 0x18u);
    }
  }
  else
  {
    *a4 = 0.0;
  }
  return 4294956419;
}

uint64_t SamplerBase::DoForGroupElements(ausdk::AUScope *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t Element;

  v4 = *((_QWORD *)a1 + 5);
  if (v4)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = (*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 3;
    if (!(_DWORD)result)
      return result;
  }
  v6 = 0;
  v7 = result - 1;
  do
  {
    Element = ausdk::AUScope::SafeGetElement(a1, v6);
    v8 = *(_QWORD *)(a2 + 24);
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &Element);
    if ((_DWORD)result)
      v9 = 1;
    else
      v9 = v7 == v6;
    ++v6;
  }
  while (!v9);
  return result;
}

void std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA96E90;
  return result;
}

void std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA96E90;
}

uint64_t std::__function::__func<SamplerBase::Configure(void)::$_0,std::allocator<SamplerBase::Configure(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 232);
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 != v5)
  {
    do
    {
      v6 = v4 - 24;
      std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v4 - 16);
      v4 = v6;
    }
    while (v6 != v5);
  }
  *(_QWORD *)(v3 + 24) = v5;
  (*(void (**)(_QWORD *, _QWORD))(*v2 + 128))(v2, v2[32]);
  return 0;
}

void std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA96E48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA96E48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<SamplerBase::SetSampleRate(float)::$_0,std::allocator<SamplerBase::SetSampleRate(float)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, _QWORD *a2)
{
  if (**(float **)(a1 + 8) != *(float *)(*a2 + 252))
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 136))(*a2);
  return 0;
}

uint64_t SOFT_CAUI_createCustomViewForAudioUnit(OpaqueAudioComponentInstance *a1, const void *a2)
{
  uint64_t (*v4)(OpaqueAudioComponentInstance *, const void *);
  _Unwind_Exception *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v4 = (uint64_t (*)(OpaqueAudioComponentInstance *, const void *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  v11 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
  if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
  {
    v7[0] = MEMORY[0x24BDAC760];
    v7[1] = 0x40000000;
    v7[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3604;
    v7[3] = &unk_24CA96DC0;
    v7[4] = &v8;
    ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3604((uint64_t)v7);
    v4 = (uint64_t (*)(OpaqueAudioComponentInstance *, const void *))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v6);
  }
  return v4(a1, a2);
}

void SamplerBase::SamplerBase(SamplerBase *this, OpaqueAudioComponentInstance *a2, int a3, int a4)
{
  ausdk::AUBase *v6;
  _OWORD *v7;
  _OWORD *v8;
  unsigned int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[18];
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = ausdk::AUBase::AUBase(this, a2, 0, 1, a3);
  *((_QWORD *)v6 + 67) = v6;
  *(_QWORD *)v6 = &off_24CA8E9D0;
  *((_QWORD *)v6 + 66) = &unk_24CA8ECA0;
  *((_DWORD *)v6 + 136) = 0;
  *((_DWORD *)v6 + 138) = 0;
  *((_DWORD *)v6 + 139) = 0;
  *((_DWORD *)v6 + 140) = 0;
  v7 = (_OWORD *)operator new[]();
  *v7 = xmmword_210B0A390;
  *((_QWORD *)this + 71) = v7 + 1;
  *((_DWORD *)this + 141) = 1023;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_DWORD *)this + 150) = 7;
  *((_QWORD *)this + 79) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_DWORD *)this + 160) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_DWORD *)this + 156) = 0;
  *((_DWORD *)this + 170) = a4;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((SamplerBase *)((char *)this + 684));
  *((_QWORD *)this + 86) = -1;
  *((_DWORD *)this + 150) = 6;
  if (!*((_BYTE *)this + 264))
    *((_BYTE *)this + 264) = 1;
  *(_QWORD *)this = off_24CA8B218;
  *((_QWORD *)this + 66) = &unk_24CA8B530;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  v8 = operator new(0x40uLL);
  *((_QWORD *)this + 88) = v8;
  *((_QWORD *)this + 90) = v8 + 4;
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *((_QWORD *)this + 89) = v8 + 4;
  *((_BYTE *)this + 728) = 1;
  *((_WORD *)this + 414) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_DWORD *)this + 205) = 0;
  *(_DWORD *)((char *)this + 823) = 0;
  *((_BYTE *)this + 816) = 0;
  do
    v9 = __ldxr(SamplerBase::sInstanceCount);
  while (__stxr(v9 + 1, SamplerBase::sInstanceCount));
  v10 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_24CA95810;
  v10[32] = 1;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *((_DWORD *)v10 + 42) = 0;
  *((_QWORD *)v10 + 3) = off_24CA91680;
  *((_QWORD *)v10 + 24) = &unk_24CA91718;
  *((_DWORD *)v10 + 44) = 900;
  *(_QWORD *)(v10 + 180) = 0x41400000C2C00000;
  *((_DWORD *)v10 + 47) = 0;
  *(_QWORD *)v28 = v10 + 24;
  *(_QWORD *)&v28[8] = v10;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)this + 744, (__int128 *)v28);
  v11 = *(std::__shared_weak_count **)&v28[8];
  if (*(_QWORD *)&v28[8])
  {
    v12 = (unint64_t *)(*(_QWORD *)&v28[8] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA95810;
  v14[32] = 1;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *((_DWORD *)v14 + 42) = 0;
  *((_QWORD *)v14 + 3) = off_24CA91680;
  *((_QWORD *)v14 + 24) = &unk_24CA91718;
  *((_DWORD *)v14 + 44) = 902;
  *(_QWORD *)(v14 + 180) = 0x42C60000C2C60000;
  *((_DWORD *)v14 + 47) = 0;
  *(_QWORD *)v28 = v14 + 24;
  *(_QWORD *)&v28[8] = v14;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)this + 760, (__int128 *)v28);
  v15 = *(std::__shared_weak_count **)&v28[8];
  if (*(_QWORD *)&v28[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v28[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24CA95810;
  v18[32] = 1;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 152) = 0u;
  *((_DWORD *)v18 + 42) = 0;
  *((_QWORD *)v18 + 3) = off_24CA91680;
  *((_QWORD *)v18 + 24) = &unk_24CA91718;
  *((_DWORD *)v18 + 44) = 901;
  *(_QWORD *)(v18 + 180) = 0x41C00000C1C00000;
  *((_DWORD *)v18 + 47) = 0;
  *(_QWORD *)v28 = v18 + 24;
  *(_QWORD *)&v28[8] = v18;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)this + 776, (__int128 *)v28);
  v19 = *(std::__shared_weak_count **)&v28[8];
  if (*(_QWORD *)&v28[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&v28[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (char *)operator new(0xC8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA95810;
  v22[32] = 1;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 104) = 0u;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 152) = 0u;
  *((_DWORD *)v22 + 42) = 0;
  *((_QWORD *)v22 + 3) = off_24CA91680;
  *((_QWORD *)v22 + 24) = &unk_24CA91718;
  *((_DWORD *)v22 + 44) = 903;
  *(_QWORD *)(v22 + 180) = 0x42C80000C2C80000;
  *((_DWORD *)v22 + 47) = 0;
  *(_QWORD *)v28 = v22 + 24;
  *(_QWORD *)&v28[8] = v22;
  std::shared_ptr<ModControlSource>::operator=[abi:ne180100]((uint64_t)this + 792, (__int128 *)v28);
  v23 = *(std::__shared_weak_count **)&v28[8];
  if (*(_QWORD *)&v28[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v28[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = operator new();
  SamplerState::SamplerState((SamplerState *)v26, 0, 0, 0, 0);
  *(_QWORD *)v26 = &off_24CA8B0F0;
  *(_QWORD *)(v26 + 88) = 0;
  *(_QWORD *)(v26 + 96) = 0;
  *(_QWORD *)(v26 + 104) = 0;
  *(_QWORD *)(v26 + 112) = this;
  *(_QWORD *)(v26 + 128) = 0;
  *(_QWORD *)(v26 + 120) = v26 + 128;
  *(_QWORD *)(v26 + 160) = 0;
  *(_QWORD *)(v26 + 152) = 0;
  *(_QWORD *)(v26 + 136) = 0;
  *(_QWORD *)(v26 + 144) = v26 + 152;
  *(_QWORD *)(v26 + 168) = 1;
  *(_BYTE *)(v26 + 176) = 0;
  *(_QWORD *)(v26 + 188) = 0;
  *(_QWORD *)(v26 + 180) = 0;
  *(_QWORD *)(v26 + 196) = 64;
  *(_DWORD *)(v26 + 204) = 1;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v28 = 136315650;
    *(_QWORD *)&v28[4] = "GlobalState.cpp";
    *(_WORD *)&v28[12] = 1024;
    *(_DWORD *)&v28[14] = 49;
    v29 = 2048;
    v30 = v26;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d GlobalState::GlobalState(%p)", v28, 0x1Cu);
  }
  v27 = 0;
  do
    GlobalState::CreateInstrument((GlobalState *)v26, v27++);
  while (a4 != v27);
  *(_BYTE *)(v26 + 176) = 1;
  *((_QWORD *)this + 92) = v26;
  ++*(_DWORD *)(v26 + 8);
}

void sub_210AF4494(_Unwind_Exception *a1)
{
  AUInstrumentBase *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;

  MEMORY[0x212BCDF50](v6, 0x10E1C403010A556);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100](v2);
  v9 = *v7;
  if (*v7)
  {
    *((_QWORD *)v1 + 89) = v9;
    operator delete(v9);
  }
  AUInstrumentBase::~AUInstrumentBase(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ParameterControlSource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ParameterControlSource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA95810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BCDF50);
}

uint64_t std::__shared_ptr_emplace<ParameterControlSource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SamplerBase::~SamplerBase(SamplerBase *this)
{
  uint64_t v2;
  InstrumentState **v3;
  InstrumentState **v4;
  SampleManager *v5;
  unsigned int v6;
  unsigned int v7;
  DLSBankManager *v8;
  void *v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  SamplerBase *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24CA8B218;
  *((_QWORD *)this + 66) = &unk_24CA8B530;
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG))
  {
    v10 = 136315650;
    v11 = "SamplerBase.cpp";
    v12 = 1024;
    v13 = 220;
    v14 = 2048;
    v15 = this;
    _os_log_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEBUG, "%25s:%-5d SamplerBase::~SamplerBase(%p)", (uint8_t *)&v10, 0x1Cu);
  }
  v2 = *((_QWORD *)this + 92);
  v3 = *(InstrumentState ***)(v2 + 88);
  v4 = *(InstrumentState ***)(v2 + 96);
  if (v3 != v4)
  {
    do
      InstrumentState::Cleanup(*v3++);
    while (v3 != v4);
    v2 = *((_QWORD *)this + 92);
  }
  v5 = (SampleManager *)SamplerState::Unref((_DWORD *)v2);
  *((_QWORD *)this + 92) = 0;
  do
  {
    v6 = __ldxr(SamplerBase::sInstanceCount);
    v7 = v6 - 1;
  }
  while (__stxr(v7, SamplerBase::sInstanceCount));
  if (!v7)
  {
    SampleManager::Destroy(v5);
    DLSBankManager::Destroy(v8);
  }
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  std::shared_ptr<MultiRamp>::~shared_ptr[abi:ne180100]((uint64_t)this + 744);
  v9 = (void *)*((_QWORD *)this + 88);
  if (v9)
  {
    *((_QWORD *)this + 89) = v9;
    operator delete(v9);
  }
  AUInstrumentBase::~AUInstrumentBase(this);
}

void sub_210AF4748(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::~__func()
{
  JUMPOUT(0x212BCDF50);
}

_QWORD *std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA96ED8;
  return result;
}

void std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA96ED8;
}

uint64_t std::__function::__func<SamplerBase::UpdateState(void)::$_0,std::allocator<SamplerBase::UpdateState(void)::$_0>,int ()(SamplerElement *)>::operator()(uint64_t a1, uint64_t *a2)
{
  SamplerElement::UpdateState(*a2);
  return 0;
}

void AUiPodEQ::~AUiPodEQ(AUiPodEQ *this)
{
  AUiPodEQ::~AUiPodEQ(this);
  JUMPOUT(0x212BCDF50);
}

{
  OpaqueAudioConverter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24CA93548;
  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 90);
  if (v2)
    AudioConverterDispose(v2);
  v3 = *((_QWORD *)this + 85);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 85) = 0;
  }
  v4 = *((_QWORD *)this + 84);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 84) = 0;
  }
  v5 = *((_QWORD *)this + 83);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *((_QWORD *)this + 83) = 0;
  }
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUiPodEQ::Cleanup(AUiPodEQ *this)
{
  OpaqueAudioConverter *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = (OpaqueAudioConverter *)*((_QWORD *)this + 90);
  if (v2)
  {
    AudioConverterDispose(v2);
    *((_QWORD *)this + 90) = 0;
  }
  v3 = *((_QWORD *)this + 83);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 83) = 0;
  }
  v4 = *((_QWORD *)this + 84);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *((_QWORD *)this + 84) = 0;
  }
  result = *((_QWORD *)this + 85);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 85) = 0;
  }
  return result;
}

uint64_t AUiPodEQ::GetProperty(AUiPodEQ *this, int a2, int a3, unsigned int a4, uint64_t (**a5)(AUiPodEQ *this, const AudioTimeStamp *a2, const AudioTimeStamp *a3, AudioBufferList *a4))
{
  uint64_t result;

  if (a2 == 1850)
  {
    if (a3)
      return 4294956430;
    result = 0;
    *a5 = AUiPodEQ::SpecialRenderProc;
    a5[1] = (uint64_t (*)(AUiPodEQ *, const AudioTimeStamp *, const AudioTimeStamp *, AudioBufferList *))this;
  }
  else
  {
    if (a2 == 21)
    {
      if (!a3)
      {
        result = 0;
        *(_DWORD *)a5 = *((unsigned __int8 *)this + 728);
        return result;
      }
      return 4294956430;
    }
    return 4294956417;
  }
  return result;
}

double AUiPodEQ::GetParameterInfo(AUiPodEQ *this, int a2, unsigned int a3, AudioUnitParameterInfo *buffer)
{
  const __CFString *v5;
  double result;

  buffer->flags = -1073741824;
  if (!a2 && a3 <= 2)
  {
    v5 = *(&off_24CA96F68 + a3);
    buffer->cfNameString = v5;
    buffer->flags = -939524096;
    CFStringGetCString(v5, buffer->name, 52, 0x8000100u);
    buffer->unit = kAudioUnitParameterUnit_Indexed;
    result = 8.24634113e11;
    *(_QWORD *)&buffer->minValue = 0x42680000BF800000;
    buffer->defaultValue = -1.0;
  }
  return result;
}

uint64_t AUiPodEQ::SupportsTail(AUiPodEQ *this)
{
  return 1;
}

uint64_t AUiPodEQ::SupportedNumChannels(AUiPodEQ *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sEQChannels;
  return 1;
}

uint64_t AUiPodEQ::Version(AUiPodEQ *this)
{
  return 0x10000;
}

uint64_t AUiPodEQ::SpecialRenderProc(AUiPodEQ *this, const AudioTimeStamp *a2, const AudioTimeStamp *a3, AudioBufferList *a4)
{
  _DWORD *Element;
  uint64_t result;
  uint64_t BufferList;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;

  Element = (_DWORD *)ausdk::AUScope::SafeGetElement((AUiPodEQ *)((char *)this + 80), 0);
  v14 = 0;
  result = ausdk::AUInputElement::PullInput((ausdk::AUInputElement *)Element, &v14, a2, 0, (uint64_t)a4);
  if ((_DWORD)result)
    return result;
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 36));
  if (Element[27] != LODWORD(a3->mHostTime))
  {
    v11 = *((_QWORD *)this + 85);
    if (v11)
    {
      v12 = (char *)this + 680;
      goto LABEL_7;
    }
    return 4294956428;
  }
  v11 = *((_QWORD *)this + 84);
  if (!v11)
    return 4294956428;
  v12 = (char *)this + 672;
LABEL_7:
  v13 = *((_QWORD *)this + 86);
  if (v13)
  {
    if (v13 != v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      v11 = *(_QWORD *)v12;
    }
  }
  (*(void (**)(uint64_t, AudioBufferList *, uint64_t, const AudioTimeStamp *))(*(_QWORD *)v11 + 32))(v11, a4, BufferList, a3);
  result = 0;
  *((_QWORD *)this + 86) = *(_QWORD *)v12;
  return result;
}

uint64_t IIRFilter::CopyStateFrom()
{
  return 4294967292;
}

void IIRFilter824::~IIRFilter824(IIRFilter824 *this)
{
  void *v2;

  *(_QWORD *)this = &off_24CA8C1A0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24CA8C1A0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BCDF50);
}

uint64_t IIRFilter824::Set(uint64_t a1, unsigned int a2, float64x2_t *a3)
{
  int v4;
  unsigned int v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 12) < a2)
    return 4294967246;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = 0;
  if (a2)
  {
    v6 = a3 + 1;
    v7 = a2;
    v8 = (float64x2_t)vdupq_n_s64(0xC170000000000000);
    do
    {
      v9 = v6[-1];
      v10 = v6[1].f64[0];
      v11 = *v6;
      if (vaddvq_f64(vabsq_f64(v9)) + fabs(v6->f64[1]) + fabs(v10) + fabs(v6->f64[0] + -1.0) >= 1.0e-15)
      {
        v12 = *(_QWORD *)(a1 + 24) + 52 * v5;
        *(int32x2_t *)v12 = vmovn_s64(vcvtq_s64_f64(vmulq_f64(v9, v8)));
        *(int32x2_t *)(v12 + 8) = vmovn_s64(vcvtq_n_s64_f64(v11, 0x18uLL));
        ++v5;
        *(_DWORD *)(v12 + 16) = vcvtd_n_s64_f64(v10, 0x18uLL);
        *(_OWORD *)(v12 + 20) = 0uLL;
        *(_OWORD *)(v12 + 36) = 0uLL;
      }
      v6 = (float64x2_t *)((char *)v6 + 40);
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(a1 + 16) = v5;
  if (v4 != v5)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return 0;
}

uint64_t IIRFilter824::Reset(IIRFilter824 *this)
{
  unint64_t v1;
  uint64_t v2;
  _OWORD *v3;

  if (*((_DWORD *)this + 4))
  {
    v1 = 0;
    v2 = 20;
    do
    {
      v3 = (_OWORD *)(*((_QWORD *)this + 3) + v2);
      *v3 = 0uLL;
      v3[1] = 0uLL;
      ++v1;
      v2 += 52;
    }
    while (v1 < *((unsigned int *)this + 4));
  }
  return 0;
}

uint64_t IIRFilter824::Process(IIRFilter824 *this, uint64_t a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  int v8;
  void *mData;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  if (!*((_DWORD *)this + 4))
    return 4294956428;
  v8 = *((_DWORD *)this + 12);
  switch(v8)
  {
    case 3:
      mData = a3->mBuffers[0].mData;
      (*((void (**)(void *, void *, uint64_t, _QWORD, uint64_t, _QWORD))this + 7))(mData, a4->mBuffers[0].mData, a2, 0, 2, *((_QWORD *)this + 3));
      (*((void (**)(void *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))this + 7))(mData, *(_QWORD *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, 2, *((_QWORD *)this + 3));
      break;
    case 2:
      (*((void (**)(void *, void *, uint64_t, _QWORD, _QWORD))this + 7))(a3->mBuffers[0].mData, a4->mBuffers[0].mData, a2, 0, *((_QWORD *)this + 3));
      (*((void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))this + 7))(*(_QWORD *)&a3[1].mBuffers[0].mNumberChannels, *(_QWORD *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, *((_QWORD *)this + 3));
      break;
    case 1:
      (*((void (**)(void *, void *, uint64_t, _QWORD))this + 7))(a3->mBuffers[0].mData, a4->mBuffers[0].mData, a2, *((_QWORD *)this + 3));
      break;
    default:
      return 4294956428;
  }
  v10 = *((_DWORD *)this + 16);
  if (v10 == 1)
  {
    if (*((_DWORD *)this + 4) >= 2u)
    {
      v14 = 1;
      v15 = 52;
      do
      {
        (*((void (**)(void *, void *, uint64_t, uint64_t))this + 9))(a4->mBuffers[0].mData, a4->mBuffers[0].mData, a2, *((_QWORD *)this + 3) + v15);
        ++v14;
        v15 += 52;
      }
      while (v14 < *((unsigned int *)this + 4));
    }
    return 0;
  }
  if (v10 != 2)
    return 4294956428;
  if (*((_DWORD *)this + 4) >= 2u)
  {
    v11 = 1;
    v12 = 52;
    do
    {
      (*((void (**)(void *, void *, uint64_t, _QWORD, uint64_t))this + 9))(a4->mBuffers[0].mData, a4->mBuffers[0].mData, a2, 0, *((_QWORD *)this + 3) + v12);
      (*((void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))this + 9))(*(_QWORD *)&a4[1].mBuffers[0].mNumberChannels, *(_QWORD *)&a4[1].mBuffers[0].mNumberChannels, a2, 1, *((_QWORD *)this + 3) + v12);
      ++v11;
      v12 += 52;
    }
    while (v11 < *((unsigned int *)this + 4));
  }
  return 0;
}

uint64_t IIRFilter824::CopyStateFrom(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _DWORD *v3;
  int *v4;
  unint64_t v5;
  int v6;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16))
    return 4294956428;
  if (v2 >= 2)
  {
    v3 = (_DWORD *)(*(_QWORD *)(a1 + 24) + 100);
    v4 = (int *)(*(_QWORD *)(a2 + 24) + 100);
    v5 = 1;
    do
    {
      *(v3 - 7) = *(v4 - 7);
      *(v3 - 6) = *(v4 - 6);
      *(v3 - 3) = *(v4 - 3);
      *(v3 - 2) = *(v4 - 2);
      *(v3 - 5) = *(v4 - 5);
      *(v3 - 4) = *(v4 - 4);
      *(v3 - 1) = *(v4 - 1);
      v6 = *v4;
      v4 += 13;
      *v3 = v6;
      v3 += 13;
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return 0;
}

void IIRFilterFloat32::~IIRFilterFloat32(IIRFilterFloat32 *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_24CA8EFC8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BCDF2C](v4, 0x1000C8077774924);
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 4, 0);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 3, 0);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_24CA8EFC8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BCDF2C](v4, 0x1000C8077774924);
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 4, 0);
  std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100]((vDSP_biquadm_SetupStruct **)this + 3, 0);
  JUMPOUT(0x212BCDF50);
}

uint64_t IIRFilterFloat32::Reset(vDSP_biquadm_Setup *this)
{
  vDSP_biquadm_ResetState(this[3]);
  return 0;
}

uint64_t IIRFilterFloat32::Process(IIRFilterFloat32 *this, unsigned int a2, const AudioBufferList *a3, AudioBufferList *a4)
{
  uint64_t mNumberBuffers;
  int v9;
  int v10;
  vDSP_biquadm_SetupStruct *v11;
  const vDSP_biquadm_SetupStruct *v12;
  uint64_t v14;
  void **p_mData;
  void **v16;
  void *v17;
  void *v18;
  char *v19;
  char v20;

  mNumberBuffers = a3->mNumberBuffers;
  if ((_DWORD)mNumberBuffers != a4->mNumberBuffers || (_DWORD)mNumberBuffers != *((_DWORD *)this + 2))
    return 4294967246;
  v19 = (char *)this + 40;
  v9 = caulk::pooled_semaphore_mutex::try_lock((IIRFilterFloat32 *)((char *)this + 40));
  v20 = v9;
  if (v9)
  {
    v10 = *((_DWORD *)this + 11);
    if (v10)
    {
      v12 = (const vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 3);
      v11 = (vDSP_biquadm_SetupStruct *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 3) = v11;
      *((_QWORD *)this + 4) = v12;
      if (v10 == 1)
        vDSP_biquadm_CopyState(v11, v12);
      else
        vDSP_biquadm_ResetState(v11);
      *((_DWORD *)this + 11) = 0;
    }
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v19);
  if ((_DWORD)mNumberBuffers)
  {
    v14 = 0;
    p_mData = &a4->mBuffers[0].mData;
    v16 = &a3->mBuffers[0].mData;
    do
    {
      v17 = *v16;
      v16 += 2;
      *(_QWORD *)(*((_QWORD *)this + 10) + v14) = v17;
      v18 = *p_mData;
      p_mData += 2;
      *(_QWORD *)(*((_QWORD *)this + 13) + v14) = v18;
      v14 += 8;
    }
    while (8 * mNumberBuffers != v14);
  }
  vDSP_biquadm(*((vDSP_biquadm_Setup *)this + 3), *((const float ***)this + 10), 1, *((float ***)this + 13), 1, a2);
  return 0;
}

void sub_210AF5228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<vDSP_biquadm_SetupStruct,applesauce::raii::v1::detail::opaque_deletion_functor<vDSP_biquadm_SetupStruct*,&(vDSP_biquadm_DestroySetup)>>::reset[abi:ne180100](vDSP_biquadm_SetupStruct **a1, vDSP_biquadm_SetupStruct *a2)
{
  vDSP_biquadm_SetupStruct *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    vDSP_biquadm_DestroySetup(v3);
}

void GetFrequencyResponse(uint64_t a1, AudioUnitFrequencyResponseBin *a2, uint64_t a3, const BiquadCoefficients *a4, double a5)
{
  uint64_t v7;
  double v8;
  double *v9;
  double v10;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  AudioUnitFrequencyResponseBin *v17;
  double *v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  __int128 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double __x;

  v7 = 0;
  v8 = a5 * 0.5;
  v9 = (double *)(a3 + 16);
  v34 = 6.28318531 / a5;
  v35 = a5 * 0.5;
  do
  {
    v10 = *(double *)(a1 + 16 * v7);
    if (v10 < 0.0)
      break;
    if (v10 != 0.0 && v10 < v8)
    {
      if (a2)
      {
        v13 = __sincos_stret(v34 * v10);
        v14 = std::operator*[abi:ne180100]<double>(v13.__cosval, v13.__sinval, v13.__cosval, v13.__sinval);
        v16 = v15;
        v17 = a2;
        v18 = v9;
        v19 = xmmword_210B0A3A0;
        do
        {
          v36 = v19;
          v20 = v18[1];
          v21 = v18[2];
          v22 = *(v18 - 1);
          v23 = *v18;
          v24 = *(v18 - 2);
          v39 = v16 * v22 + v13.__sinval * v24;
          __x = v14 * v22 + v13.__cosval * v24 + 1.0;
          v25 = logb(fmax(fabs(__x), fabs(v39)));
          if ((*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            v26 = 0;
            v27 = v39;
          }
          else
          {
            v26 = (int)v25;
            __x = scalbn(__x, -(int)v25);
            v27 = scalbn(v39, -v26);
          }
          v40 = v27;
          v37 = v23 + v14 * v21 + v13.__cosval * v20;
          v38 = v16 * v21 + v13.__sinval * v20;
          v28 = v27 * v27 + __x * __x;
          v29 = scalbn((v38 * v27 + v37 * __x) / v28, -v26);
          v30 = scalbn((v38 * __x - v37 * v40) / v28, -v26);
          v31 = std::operator*[abi:ne180100]<double>(*(double *)&v36, *((double *)&v36 + 1), v29, v30);
          *(double *)&v19 = v31;
          *((long double *)&v19 + 1) = v32;
          v18 += 5;
          v17 = (AudioUnitFrequencyResponseBin *)((char *)v17 - 1);
        }
        while (v17);
        v8 = v35;
      }
      else
      {
        v31 = 1.0;
        v32 = 0.0;
      }
      v33 = hypot(v31, v32);
      if (v33 < 2.22507386e-308)
        v33 = 2.22507386e-308;
      v12 = log10(v33) * 20.0;
    }
    else
    {
      v12 = -200.0;
    }
    *(double *)(a1 + 16 * v7++ + 8) = v12;
  }
  while (v7 != 1024);
}

double std::operator*[abi:ne180100]<double>(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

uint64_t BiquadCoefficients::SetPriv(BiquadCoefficients *this, int a2, long double a3, double a4, double a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  long double v22;
  long double v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  long double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v51;
  long double v52;
  long double v53;
  long double v54;
  long double v55;
  long double v56;
  double v57;
  double v58;
  double v59;

  v10 = cos(a3);
  switch(a2)
  {
    case 1:
      v11 = __exp10(a5 * 0.05);
      v12 = sin(a3) / (a4 + a4);
      v13 = 1.0;
      v14 = (1.0 - v10) * 0.5;
      v15 = v14 + v14;
      v16 = v12 + 1.0;
      v17 = -2.0;
      goto LABEL_5;
    case 2:
      v11 = __exp10(a5 * 0.05);
      v12 = sin(a3) / (a4 + a4);
      v13 = 1.0;
      v14 = (v10 + 1.0) * 0.5;
      v17 = -2.0;
      v15 = v14 * -2.0;
      v16 = v12 + 1.0;
LABEL_5:
      v19 = v10 * v17;
      v20 = v13 - v12;
      v21 = v14;
      goto LABEL_18;
    case 3:
      v11 = __exp10(a5 * 0.05);
      v21 = sin(a3) / (a4 + a4);
      v14 = -v21;
      v16 = v21 + 1.0;
      v19 = v10 * -2.0;
      v20 = 1.0 - v21;
      v15 = 0.0;
      goto LABEL_18;
    case 4:
      v11 = __exp10(a5 * 0.05);
      v22 = sin(a3) / (a4 + a4);
      v15 = v10 * -2.0;
      v14 = 1.0;
      v16 = v22 + 1.0;
      v20 = 1.0 - v22;
      v21 = 1.0;
      goto LABEL_17;
    case 5:
      v11 = __exp10(a5 * 0.05);
      v23 = sin(a3) / (a4 + a4);
      v14 = v23 + 1.0;
      v15 = v10 * -2.0;
      v21 = 1.0 - v23;
      v20 = 1.0 - v23;
      v19 = v10 * -2.0;
      v16 = v23 + 1.0;
      goto LABEL_18;
    case 6:
      v24 = __exp10(a5 * 0.5 * 0.05);
      v25 = sin(a3) / (a4 / v24 + a4 / v24);
      v26 = v24 * v25;
      goto LABEL_16;
    case 7:
      v27 = sin(a3) / (a4 + a4);
      v28 = __exp10(a5 * 0.5 * 0.05);
      v29 = sqrt(v28);
      v11 = 1.0;
      v30 = v27 * (v29 + v29);
      v31 = v10 * (v28 + -1.0);
      v32 = v10 * (v28 + 1.0);
      v33 = v28 + 1.0 + v31;
      v16 = v33 + v30;
      v19 = (v28 + -1.0 + v32) * -2.0;
      v20 = v33 - v30;
      v34 = v28 + 1.0 - v31;
      v21 = v28 * (v34 + v30);
      v35 = v28 + v28;
      v36 = v28 + -1.0 - v32;
      goto LABEL_12;
    case 8:
      v37 = sin(a3) / (a4 + a4);
      v28 = __exp10(a5 * 0.5 * 0.05);
      v38 = sqrt(v28);
      v11 = 1.0;
      v30 = v37 * (v38 + v38);
      v39 = v10 * (v28 + -1.0);
      v40 = v10 * (v28 + 1.0);
      v41 = v28 + 1.0 - v39;
      v16 = v41 + v30;
      v19 = v28 + -1.0 - v40 + v28 + -1.0 - v40;
      v20 = v41 - v30;
      v34 = v28 + 1.0 + v39;
      v21 = v28 * (v34 + v30);
      v35 = v28 * -2.0;
      v36 = v28 + -1.0 + v40;
LABEL_12:
      v15 = v35 * v36;
      v14 = v28 * (v34 - v30);
      goto LABEL_18;
    case 9:
      v42 = a5 * 0.5;
      v43 = __exp10(a5 * 0.5 * 0.25 * 0.05);
      v44 = __exp10(v42 * 0.75 * 0.05);
      result = 0;
      v45 = (1.0 - v44 * v10 - sqrt((1.0 - v10 * v10) * -(v44 * v44) + (v44 + v44) * (1.0 - v10))) / (1.0 - v44);
      *((double *)this + 2) = v43 * (v45 * -2.0 + 1.0 + v45 * v45);
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      __asm { FMOV            V1.2D, #-2.0 }
      _Q1.f64[1] = v45;
      *(float64x2_t *)this = vmulq_n_f64(_Q1, v45);
      return result;
    case 10:
      v51 = __exp10(a5 * 0.05);
      v52 = tan(a3 / (a4 + a4));
      result = 0;
      v53 = (1.0 - v52 * (4.0 / (v51 + 1.0))) * 0.5 / (v52 * (4.0 / (v51 + 1.0)) + 1.0);
      v54 = (v51 + -1.0 + v51 + -1.0) * ((0.5 - v53) * 0.5);
      v55 = v10 * (v53 + 0.5) * -2.0;
      v56 = v53 + v53;
      *(long double *)this = v55;
      *((long double *)this + 1) = v56;
      *((long double *)this + 2) = v54 + 1.0;
      *((long double *)this + 3) = v55;
      v57 = v56 - v54;
      goto LABEL_19;
    case 11:
      v24 = __exp10(a5 * 0.5 * 0.05);
      v25 = sin(a3) / (a4 + a4);
      v26 = v25 * v24;
LABEL_16:
      v58 = v25 / v24;
      v11 = 1.0;
      v16 = v58 + 1.0;
      v15 = v10 * -2.0;
      v20 = 1.0 - v58;
      v21 = v26 + 1.0;
      v14 = 1.0 - v26;
LABEL_17:
      v19 = v15;
LABEL_18:
      result = 0;
      v59 = 1.0 / v16;
      *(double *)this = v19 * v59;
      *((double *)this + 1) = v59 * v20;
      *((double *)this + 2) = v11 * v59 * v21;
      *((double *)this + 3) = v11 * v59 * v15;
      v57 = v11 * v59 * v14;
LABEL_19:
      *((double *)this + 4) = v57;
      break;
    default:
      result = 4294967246;
      break;
  }
  return result;
}

BiquadCoefficients *BiquadCoefficients::SetQ(BiquadCoefficients *this, int a2, long double a3, double a4, double a5)
{
  if (a3 <= 0.0 || a4 <= 0.0)
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = 0x3FF0000000000000;
  }
  else
  {
    if (a3 > 3.11017673)
      a3 = 3.11017673;
    return (BiquadCoefficients *)BiquadCoefficients::SetPriv(this, a2, a3, a4, a5);
  }
  return this;
}

uint64_t IIRFilter824::IIRFilter824(uint64_t a1, int a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _OWORD v13[3];

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24CA8C1A0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = *a4;
  *(_OWORD *)(a1 + 64) = *a5;
  *(_QWORD *)&v13[0] = 0;
  DWORD2(v13[0]) = 0x1000000;
  memset((char *)v13 + 12, 0, 36);
  if (a3)
  {
    v7 = 52 * a3;
    v8 = (char *)operator new(v7);
    v9 = 0;
    v10 = &v8[52 * a3];
    do
    {
      v11 = &v8[v9];
      *(_OWORD *)v11 = v13[0];
      *((_OWORD *)v11 + 1) = v13[1];
      *((_OWORD *)v11 + 2) = v13[2];
      *((_DWORD *)v11 + 12) = 0;
      v9 += 52;
    }
    while (v7 != v9);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v10;
  }
  return a1;
}

_QWORD *ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x380uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,Sampler>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x3A0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,MIDISynth>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

_QWORD *ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Factory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x440uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUMusicLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUMusicLookup,AUHapticSynth>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void AUNewPitch::~AUNewPitch(AUNewPitch *this)
{
  AUNewPitch::~AUNewPitch(this);
  JUMPOUT(0x212BCDF50);
}

{
  *(_QWORD *)this = &off_24CA8A040;
  AUNewPitch::Cleanup(this);
  RampList::~RampList((AUNewPitch *)((char *)this + 568));
  MEMORY[0x212BCD890]((char *)this + 544);
  ausdk::AUBase::~AUBase(this);
}

uint64_t AUNewPitch::Initialize(AUNewPitch *this)
{
  ausdk::AUScope *v2;
  int v3;
  const AudioChannelLayout *v4;
  uint64_t v5;
  const AudioChannelLayout *v6;
  uint64_t v7;
  int v8;
  const AudioChannelLayout *v9;
  double v10;
  int v11;
  uint64_t v13;
  const AudioChannelDescription *v14;
  PhaseVocoderTwo *v15;
  size_t v16;
  void *v17;
  void *v18;
  float *v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;

  v2 = (AUNewPitch *)((char *)this + 128);
  v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 128), 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 80), 0) + 108) != v3)
    return 4294956428;
  v5 = *((_QWORD *)this + 68);
  if (v5 && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), v4))
  {
    v7 = *((_QWORD *)this + 68);
    v8 = v7 ? CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v7 + 16), v6) : 0;
    if (v8 != v3)
      return 4294956428;
  }
  v10 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  if (v10 >= 8192.0)
  {
    if (v10 >= 16384.0)
    {
      if (v10 >= 32768.0)
      {
        if (v10 >= 65536.0)
        {
          *((_DWORD *)this + 140) = 0x2000;
          v11 = 4096;
        }
        else
        {
          *((_DWORD *)this + 140) = 4096;
          v11 = 2048;
        }
      }
      else
      {
        *((_DWORD *)this + 140) = 2048;
        v11 = 1024;
      }
    }
    else
    {
      *((_DWORD *)this + 140) = 1024;
      v11 = 512;
    }
  }
  else
  {
    *((_DWORD *)this + 140) = 512;
    v11 = 256;
  }
  if (*((_DWORD *)this + 138) <= 0x20u)
    *((_DWORD *)this + 140) = v11;
  v13 = *((_QWORD *)this + 68);
  if (v13 && CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v13 + 16), v9))
    v14 = (const AudioChannelDescription *)(*((_QWORD *)this + 68) + 28);
  else
    v14 = 0;
  v15 = (PhaseVocoderTwo *)operator new();
  PhaseVocoderTwo::PhaseVocoderTwo(v15, v10, *((_DWORD *)this + 140), v3, *((_DWORD *)this + 84), 1.0, 8.0, v14, 0, (AUNewPitch *)((char *)this + 568));
  *((_QWORD *)this + 66) = v15;
  v16 = 16 * (v3 - 1) + 24;
  v17 = malloc_type_malloc(v16, 0x2C8E6D5CuLL);
  if (!v17)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v21 = std::bad_alloc::bad_alloc(exception);
  }
  v18 = v17;
  bzero(v17, v16);
  *((_QWORD *)this + 86) = v18;
  *((_QWORD *)this + 88) = 0;
  AUNewPitch::CalcCoeffs(this, v19);
  return 0;
}

void sub_210AF60EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCDF50](v1, 0x10F1C40CF7E226ELL);
  _Unwind_Resume(a1);
}

void AUNewPitch::Cleanup(AUNewPitch *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 66);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 66) = 0;
  free(*((void **)this + 86));
  *((_QWORD *)this + 86) = 0;
}

uint64_t AUNewPitch::Reset(AUNewPitch *this)
{
  const float **v2;

  v2 = (const float **)*((_QWORD *)this + 66);
  if (v2)
    PhaseVocoderTwo::Reset(v2);
  *((_QWORD *)this + 88) = 0;
  return 0;
}

uint64_t AUNewPitch::GetPropertyInfo(AUNewPitch *this, int a2, int a3, int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  unsigned int v7;

  result = 4294956417;
  if (a3)
    return result;
  if (a2 <= 55)
  {
    if (a2 != 21 && a2 != 26)
    {
      if (a2 == 45 && a4 == 6)
      {
        result = 0;
        *a6 = 0;
        *a5 = 8;
      }
      return result;
    }
    result = 0;
    v7 = 4;
LABEL_15:
    *a5 = v7;
    *a6 = 1;
    return result;
  }
  switch(a2)
  {
    case 56:
      result = 0;
      v7 = 8;
      goto LABEL_15;
    case 57:
      result = 0;
      *a5 = 24;
      *a6 = 0;
      return result;
    case 3801:
      result = 0;
      v7 = 256;
      goto LABEL_15;
  }
  return result;
}

uint64_t AUNewPitch::GetProperty(AUNewPitch *this, int a2, int a3, int a4, _QWORD *a5)
{
  uint64_t result;
  int v7;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 > 44)
  {
    if (a2 == 45)
    {
      if (a4 == 6)
      {
        result = 0;
        *a5 = 0x700000000;
      }
    }
    else if (a2 == 57)
    {
      result = 0;
      *a5 = *((_QWORD *)this + 1);
      a5[1] = 1;
      *((_DWORD *)a5 + 4) = 0;
    }
  }
  else
  {
    if (a2 == 21)
    {
      result = 0;
      v7 = *((unsigned __int8 *)this + 556);
    }
    else
    {
      if (a2 != 26)
        return result;
      result = 0;
      v7 = *((_DWORD *)this + 138);
    }
    *(_DWORD *)a5 = v7;
  }
  return result;
}

uint64_t AUNewPitch::SetProperty(AUNewPitch *this, int a2, int a3, unsigned int a4, int *a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, int *);
  int v11;
  int v12;
  _Unwind_Exception *v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;

  if (a3)
    return 4294956417;
  switch(a2)
  {
    case 56:
      v9 = *((_QWORD *)this + 1);
      v15 = 0;
      v16 = &v15;
      v17 = 0x2000000000;
      v10 = (uint64_t (*)(uint64_t, int *))getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      v18 = getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr;
      if (!getCAUI_createCustomViewForAudioUnitSymbolLoc(void)::ptr)
      {
        v14[0] = MEMORY[0x24BDAC760];
        v14[1] = 0x40000000;
        v14[2] = ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3743;
        v14[3] = &unk_24CA96FA8;
        v14[4] = &v15;
        ___ZL45getCAUI_createCustomViewForAudioUnitSymbolLocv_block_invoke_3743((uint64_t)v14);
        v10 = (uint64_t (*)(uint64_t, int *))v16[3];
      }
      _Block_object_dispose(&v15, 8);
      if (!v10)
      {
        dlerror();
        v13 = (_Unwind_Exception *)abort_report_np();
        _Block_object_dispose(&v15, 8);
        _Unwind_Resume(v13);
      }
      return v10(v9, a5);
    case 26:
      v11 = *a5;
      if (*a5 <= 0x7F)
      {
        v12 = *((_DWORD *)this + 138);
        *((_DWORD *)this + 138) = v11;
        if (v12 != v11)
          (*(void (**)(AUNewPitch *, uint64_t, _QWORD))(*(_QWORD *)this + 432))(this, 26, 0);
        return 0;
      }
      else
      {
        return 4294967246;
      }
    case 21:
      if (a6 >= 4)
      {
        v6 = 0;
        *((_BYTE *)this + 556) = *a5 != 0;
      }
      else
      {
        return 4294956445;
      }
      break;
    default:
      return 4294956417;
  }
  return v6;
}

uint64_t AUNewPitch::CanScheduleParameters(AUNewPitch *this)
{
  return 0;
}

uint64_t AUNewPitch::ProcessMultipleBufferLists(AUNewPitch *this, unsigned int *a2, unsigned int a3, int a4, const AudioBufferList **a5, int a6, AudioBufferList **a7)
{
  AudioBufferList *v9;
  uint64_t mNumberBuffers;
  UInt32 *p_mDataByteSize;
  uint64_t v12;
  uint64_t result;

  if (a4 != 1 || a6 != 1)
    return 4294956419;
  *((_DWORD *)this + 174) = 0;
  *((_QWORD *)this + 85) = *a5;
  v9 = *a7;
  mNumberBuffers = (*a7)->mNumberBuffers;
  if ((_DWORD)mNumberBuffers)
  {
    p_mDataByteSize = &v9->mBuffers[0].mDataByteSize;
    do
    {
      *p_mDataByteSize = 4 * a3;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  v12 = *((_QWORD *)this + 66);
  *(_QWORD *)(v12 + 2760) = AUNewPitch::PullForBufferedInputCallback;
  *(_QWORD *)(v12 + 2768) = this;
  result = AUNewPitch::CoreRender(this, (float *)*a2, *((double *)this + 88), a3, v9);
  *((double *)this + 88) = *((double *)this + 88) + (double)a3;
  return result;
}

uint64_t AUNewPitch::Render(AUNewPitch *this, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t Element;
  AudioBufferList *BufferList;

  v8 = *((_QWORD *)this + 66);
  *(_QWORD *)(v8 + 2760) = AUNewPitch::PullForInputCallback;
  *(_QWORD *)(v8 + 2768) = this;
  Element = ausdk::AUScope::SafeGetElement((AUNewPitch *)((char *)this + 128), 0);
  ausdk::AUIOElement::PrepareBuffer((ausdk::AUIOElement *)Element, a4);
  BufferList = (AudioBufferList *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  return AUNewPitch::CoreRender(this, (float *)*a2, a3->mSampleTime, a4, BufferList);
}

uint64_t AUNewPitch::GetParameterInfo(AUNewPitch *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  int v6;
  uint64_t result;
  CFStringRef *v8;
  AudioUnitParameterUnit v9;
  AudioUnitParameterValue v10;
  AudioUnitParameterValue v11;
  AudioUnitParameterValue v12;
  int v13;
  const __CFString *v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  v15[0] = xmmword_24CA96F80;
  v15[1] = *(_OWORD *)off_24CA96F90;
  if (!LocalizeAUParameterStringsForClass<AUNewPitch>(std::initializer_list<__CFString const**>)::sLocalized)
    LocalizeAUParameterStringsForClass<AUNewPitch>(std::initializer_list<__CFString const**>)::sLocalized = LocalizeAUParameterStrings((CFStringRef **)v15, 4);
  v6 = a3 - 1;
  if ((a3 - 1) > 6 || ((0x69u >> v6) & 1) == 0)
    return 4294956418;
  v8 = (CFStringRef *)off_24CA96FE0[v6];
  v9 = dword_210B09A70[v6];
  v10 = flt_210B09A8C[v6];
  v11 = flt_210B09AA8[v6];
  v12 = flt_210B09AC4[v6];
  v13 = dword_210B09AE0[v6];
  v14 = *v8;
  buffer->cfNameString = *v8;
  buffer->flags |= 0x8000000u;
  CFStringGetCString(v14, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v9;
  buffer->minValue = v10;
  buffer->maxValue = v11;
  buffer->defaultValue = v12;
  buffer->flags += v13;
  return result;
}

double AUNewPitch::GetLatency(AUNewPitch *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 66);
  result = 0.0;
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 2777))
      return (1.0 / *(double *)(v1 + 2216) + 1.0) * (double)*(int *)(v1 + 2196) / *(double *)(v1 + 2176);
  }
  return result;
}

double AUNewPitch::GetTailTime(AUNewPitch *this, double a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 66);
  if (!v2)
    return 0.0;
  LODWORD(a2) = *(_DWORD *)(v2 + 2192);
  return (double)*(unint64_t *)&a2 / *(double *)(v2 + 2176);
}

uint64_t AUNewPitch::SupportsTail(AUNewPitch *this)
{
  return 1;
}

BOOL AUNewPitch::StreamFormatWritable(AUNewPitch *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUNewPitch::SupportedNumChannels(AUNewPitch *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&AUNewPitch_sChannels;
  return 1;
}

uint64_t AUNewPitch::ChangeStreamFormat(AUNewPitch *this, uint64_t a2, uint64_t a3, const AudioStreamBasicDescription *__s2, const AudioStreamBasicDescription *__s1)
{
  if (__s1->mChannelsPerFrame != __s2->mChannelsPerFrame)
    (*(void (**)(AUNewPitch *, uint64_t, uint64_t))(*(_QWORD *)this + 544))(this, a2, a3);
  ausdk::AUBase::ChangeStreamFormat(this, a2, a3, __s2, __s1);
  return 0;
}

uint64_t AUNewPitch::GetAudioChannelLayout(AUNewPitch *this, const AudioChannelLayout *a2, unsigned int a3, AudioChannelLayout *a4, BOOL *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  *a5 = 1;
  v5 = *((_QWORD *)this + 68);
  if (!v5)
    return 0;
  if (!CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v5 + 16), a2))
    return 0;
  v8 = *((_QWORD *)this + 68);
  if (!v8)
    return 0;
  v9 = *(unsigned int *)(v8 + 12);
  if (a4 && (_DWORD)v9)
    memcpy(a4, (const void *)(v8 + 16), *(unsigned int *)(v8 + 12));
  return v9;
}

uint64_t AUNewPitch::SetAudioChannelLayout(AUNewPitch *this, int a2, int a3, AudioChannelLayout *a4)
{
  uint64_t Property;
  int v7;
  const AudioChannelLayout *v8;
  uint64_t PropertyInfo;
  AudioChannelLayout *v11;
  UInt32 outPropertyDataSize;
  void *outPropertyData[3];
  int v14;

  if ((a2 - 3) < 0xFFFFFFFE)
    return 4294956430;
  if (a3)
    return 4294956419;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 392))(outPropertyData);
  v7 = v14;
  if (v7 != CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)a4, v8)
    || a4->mChannelLayoutTag == 0x10000)
  {
    return 4294956445;
  }
  if (!a4->mChannelLayoutTag)
  {
    CAAudioChannelLayout::operator=();
    return 0;
  }
  outPropertyDataSize = 0;
  PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a4, &outPropertyDataSize);
  if ((_DWORD)PropertyInfo)
    return PropertyInfo;
  outPropertyData[0] = 0;
  CADeprecated::CAAutoFree<AudioChannelLayout>::allocBytes(outPropertyData, outPropertyDataSize, 1);
  v11 = (AudioChannelLayout *)outPropertyData[0];
  Property = AudioFormatGetProperty(0x636D706Cu, 4u, a4, &outPropertyDataSize, outPropertyData[0]);
  if (!(_DWORD)Property)
    CAAudioChannelLayout::Set((AUNewPitch *)((char *)this + 544), v11);
  if (v11)
    free(v11);
  if (!(_DWORD)Property)
    return 0;
  return Property;
}

void sub_210AF6944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AUNewPitch::RemoveAudioChannelLayout(AUNewPitch *this, int a2, int a3)
{
  if ((a2 - 3) < 0xFFFFFFFE)
    return 4294956430;
  if (a3)
    return 4294956419;
  CAAudioChannelLayout::Clear((AUNewPitch *)((char *)this + 544));
  return 0;
}

double AUNewPitch::GetChannelLayoutTags@<D0>(int a1@<W1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  double result;

  if ((a1 - 3) <= 0xFFFFFFFD)
    ausdk::Throw((ausdk *)0xFFFFD58ELL);
  if (a2)
    ausdk::Throw((ausdk *)0xFFFFD583);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = operator new(0x30uLL);
  a3[1] = v5 + 3;
  a3[2] = v5 + 3;
  *v5 = xmmword_210B09A40;
  v5[1] = unk_210B09A50;
  result = 4.98418446e-306;
  v5[2] = xmmword_210B09A60;
  *a3 = v5;
  return result;
}

uint64_t AUNewPitch::PullForInputCallback(AUNewPitch *this, _QWORD *a2, const AudioBufferList **a3, _QWORD *a4, double *a5)
{
  const AudioTimeStamp *v7;
  unsigned int *v8;
  ausdk::AUScope *v9;
  ausdk::AUInputElement *Element;
  uint64_t v11;
  uint64_t v12;

  v7 = (const AudioTimeStamp *)(a3 + 34);
  *a4 = a3[34];
  v8 = (unsigned int *)(a3 + 67);
  v9 = (ausdk::AUScope *)(a3 + 10);
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 10), 0);
  v11 = ausdk::AUInputElement::PullInput(Element, v8, v7, 0, (uint64_t)this);
  if (!(_DWORD)v11)
  {
    v12 = ausdk::AUScope::SafeGetElement(v9, 0);
    *a2 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v12 + 144));
  }
  return v11;
}

uint64_t AUNewPitch::CoreRender(AUNewPitch *this, float *a2, double a3, unsigned int a4, AudioBufferList *a5)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  double v13;
  BOOL v14;
  double v15;
  unsigned int v16;
  double v17;
  unsigned int v18;

  *((_DWORD *)this + 134) = (_DWORD)a2;
  v9 = AUNewPitch::CalcCoeffs(this, a2);
  if ((_DWORD)v9)
    return v9;
  v11 = *((_QWORD *)this + 66);
  if (!*(_BYTE *)(v11 + 2553) && *(_BYTE *)(v11 + 2552))
  {
    v18 = a4;
    v17 = a3;
    if (*(_BYTE *)(v11 + 2557))
      PhaseVocoderTwo::ResetPhases((PhaseVocoderTwo *)v11);
    v16 = a4;
    *(_DWORD *)(v11 + 2440) = 0;
    v13 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v11, &v16, a5, &v17);
    v12 = *(unsigned __int8 *)(v11 + 2554);
    LODWORD(v13) = *(_DWORD *)(v11 + 2184);
    if (*(_BYTE *)(v11 + 2554))
      v14 = 1;
    else
      v14 = *(float *)&v13 == 1.0;
    if (!v14)
      PhaseVocoderTwo::MakeBinMap(v11, v13);
    v9 = PhaseVocoderTwo::PullInput((PhaseVocoderTwo *)v11, &v18);
    if (!(_DWORD)v9)
    {
      while (v16 && *(_DWORD *)(v11 + 2192) <= *(_DWORD *)(v11 + 2384) - *(_DWORD *)(v11 + 2392))
      {
        PhaseVocoderTwo::ProcessBlock((PhaseVocoderTwo *)v11, v12 != 0, v15);
        v15 = PhaseVocoderTwo::CopyOutput((PhaseVocoderTwo *)v11, &v16, a5, &v17);
      }
    }
    return v9;
  }
  return PhaseVocoderTwo::RenderBypass((PhaseVocoderTwo *)v11, a4, a5, a3);
}

uint64_t AUNewPitch::CalcCoeffs(AUNewPitch *this, float *a2)
{
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  float v7;
  __n128 v8;
  float v9;
  uint64_t v10;
  float v12;
  float v13;
  float v14;
  float v15;

  v15 = 0.0;
  v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 4, 0, 0, &v15);
  if (!(_DWORD)v3)
  {
    v4 = v15;
    if (v15 >= 3.0)
    {
      if (v15 > 32.0)
      {
        v15 = 32.0;
        v4 = 32.0;
      }
    }
    else
    {
      v15 = 3.0;
      v4 = 3.0;
    }
    *(float *)(*((_QWORD *)this + 66) + 2224) = v4;
    v14 = 0.0;
    v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 1, 0, 0, &v14);
    if (!(_DWORD)v3)
    {
      v5 = v14;
      *(float *)&v6 = -2400.0;
      if (v14 < -2400.0 || (*(float *)&v6 = 2400.0, v14 > 2400.0))
      {
        v14 = *(float *)&v6;
        v5 = *(float *)&v6;
      }
      v7 = exp2(v5 / 1200.0);
      *(float *)(*((_QWORD *)this + 66) + 2184) = v7;
      v13 = 0.0;
      v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, _QWORD, _QWORD, float *))(*(_QWORD *)this + 144))(this, 6, 0, 0, &v13);
      if (!(_DWORD)v3)
      {
        v8.n128_f32[0] = v13;
        *(_BYTE *)(*((_QWORD *)this + 66) + 2554) = v13 != 0.0;
        v12 = 0.0;
        v3 = (*(uint64_t (**)(AUNewPitch *, uint64_t, _QWORD, _QWORD, float *, __n128))(*(_QWORD *)this + 144))(this, 7, 0, 0, &v12, v8);
        if (!(_DWORD)v3)
        {
          v9 = v12;
          if (v13 == 0.0 && v12 != 0.0)
          {
            v9 = 0.0;
            (*(void (**)(AUNewPitch *, uint64_t, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)this + 152))(this, 7, 0, 0, 0, 0.0);
          }
          v10 = *((_QWORD *)this + 66);
          *(_BYTE *)(v10 + 2555) = v9 != 0.0;
          *(_BYTE *)(v10 + 2553) = *((_BYTE *)this + 556);
          *(_DWORD *)(v10 + 2236) = *((_DWORD *)this + 138);
        }
      }
    }
  }
  return v3;
}

uint64_t AUNewPitch::PullForBufferedInputCallback(AUNewPitch *this, const AudioBufferList **a2, const AudioBufferList **a3, void *a4, double *a5)
{
  const AudioBufferList *v5;
  uint64_t mNumberBuffers;
  uint64_t v7;
  unint64_t v8;
  const AudioBufferList *v9;
  uint64_t v10;
  void **p_mData;
  char *v12;

  v5 = a3[85];
  mNumberBuffers = v5->mNumberBuffers;
  v7 = *((unsigned int *)a3 + 174);
  if ((_DWORD)mNumberBuffers)
  {
    v8 = 0;
    v9 = a3[86];
    v10 = 16 * mNumberBuffers;
    p_mData = &v5->mBuffers[0].mData;
    do
    {
      v12 = (char *)v9 + v8;
      *((_QWORD *)v12 + 2) = (char *)p_mData[v8 / 8] + 4 * v7;
      *((_DWORD *)v12 + 3) = 4 * (_DWORD)this;
      v8 += 16;
    }
    while (v10 != v8);
  }
  else
  {
    v9 = a3[86];
  }
  *((_DWORD *)a3 + 174) = v7 + (_DWORD)this;
  *a2 = v9;
  return 0;
}

_QWORD *AUNewPitchFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x308uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseProcessMultipleLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNewPitch>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseProcessMultipleLookup,AUNewPitch>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

double Amplifier::Update(Amplifier *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 13);
  result = *(double *)(v1 + 92);
  *(double *)((char *)this + 124) = result;
  *((_BYTE *)this + 132) = *(_BYTE *)(v1 + 100);
  return result;
}

void `virtual thunk to'Amplifier::~Amplifier(Amplifier *this)
{
  Amplifier::~Amplifier((Amplifier *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  Amplifier::~Amplifier((Amplifier *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

float *ProcessMonoInput<1,false>(float *result, int a2, float *a3, float a4, uint64_t a5, float *a6)
{
  float i;
  float v7;

  for (i = *a3; a2; --a2)
  {
    v7 = *result++;
    *a6 = *a6 + (float)(i * v7);
    ++a6;
    i = i + a4;
  }
  *a3 = i;
  return result;
}

float *ProcessMonoInput<2,false>(float *result, int a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  float v8;
  float i;
  float v10;

  v8 = *a3;
  for (i = *a4; a2; --a2)
  {
    v10 = *result++;
    *a5 = *a5 + (float)(v8 * v10);
    ++a5;
    v8 = v8 + a7;
    *a6 = (float)(i * v10) + *a6;
    ++a6;
    i = i + a8;
  }
  *a3 = v8;
  *a4 = i;
  return result;
}

float *ProcessStereoInput<1,false>(float *result, int a2, float *a3, float *a4, float *a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v6 = *a3;
  if (a2)
  {
    v7 = *a4;
    do
    {
      v8 = *result;
      v9 = result[1];
      result += 2;
      v10 = (float)(v6 * v8) + *a5;
      v6 = v6 + a6;
      *a5++ = (float)(v7 * v9) + v10;
      --a2;
    }
    while (a2);
  }
  *a3 = v6;
  return result;
}

float *ProcessStereoInput<2,false>(float *result, int a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  float v8;
  float i;
  float v10;
  float v11;

  v8 = *a3;
  for (i = *a4; a2; --a2)
  {
    v10 = *result;
    v11 = result[1];
    result += 2;
    *a5 = (float)(v8 * v10) + *a5;
    ++a5;
    v8 = v8 + a7;
    *a6 = (float)(i * v11) + *a6;
    ++a6;
    i = i + a8;
  }
  *a3 = v8;
  *a4 = i;
  return result;
}

void AUVarispeed::~AUVarispeed(AUVarispeed *this)
{
  void **v2;

  *(_QWORD *)this = &off_24CA8ADD8;
  CADeprecated::CAMutex::~CAMutex((AUVarispeed *)((char *)this + 1088));
  v2 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  RampList::~RampList((AUVarispeed *)((char *)this + 528));
  ausdk::AUBase::~AUBase(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_24CA8ADD8;
  CADeprecated::CAMutex::~CAMutex((AUVarispeed *)((char *)this + 1088));
  v2 = (void **)((char *)this + 640);
  std::vector<std::unique_ptr<ausdk::AUKernelBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
  RampList::~RampList((AUVarispeed *)((char *)this + 528));
  ausdk::AUBase::~AUBase(this);
  JUMPOUT(0x212BCDF50);
}

uint64_t AUVarispeed::Initialize(int64x2_t *this)
{
  ausdk::AUScope *v2;
  int v3;
  double v4;
  double v5;
  _QWORD v7[2];

  v2 = (ausdk::AUScope *)&this[8];
  v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 108);
  if (*(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0) + 108) != v3)
    return 4294956428;
  AUVarispeed::CreateResamplers(this);
  AUVarispeed::ResetCommon((AUVarispeed *)this);
  v4 = *(double *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0) + 80);
  v5 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  v7[0] = v7;
  v7[1] = this + 33;
  RampList::Writer::ScaleRates((RampList::Writer *)v7, v4 / v5);
  AUVarispeed::UpdateVarispeedRate((AUVarispeed *)this);
  return 0;
}

uint64_t AUVarispeed::Cleanup(AUVarispeed *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD v9[2];

  v2 = (_QWORD *)*((_QWORD *)this + 81);
  v3 = (_QWORD *)*((_QWORD *)this + 80);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 81) = v3;
  if ((*((_DWORD *)this + 264) & 0x80000000) == 0)
  {
    MEMORY[0x212BCD980]();
    *((_DWORD *)this + 264) = -1;
  }
  v6 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 80);
  v7 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 80);
  v9[0] = v9;
  v9[1] = (char *)this + 528;
  return RampList::Writer::ScaleRates((RampList::Writer *)v9, v7 / v6);
}

uint64_t AUVarispeed::Reset(AUVarispeed *this)
{
  AUVarispeed::ResetCommon(this);
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_BYTE *)this + 600) = 1;
  RampList::Writer::clear((AUVarispeed *)((char *)this + 608));
  return 0;
}

uint64_t AUVarispeed::GetPropertyInfo(AUVarispeed *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;
  int v8;

  if (a3)
    return 4294956417;
  result = 4294956417;
  if (a2 <= 56)
  {
    if (a2 == 21 || a2 == 26)
    {
      result = 0;
      v8 = 4;
      goto LABEL_18;
    }
    if (a2 != 49)
      return result;
LABEL_14:
    result = 0;
    v8 = 16;
LABEL_18:
    *a5 = v8;
    *a6 = 1;
    return result;
  }
  if (a2 > 3802)
  {
    if (a2 == 3803)
    {
      result = 0;
      v8 = 48 * *((_DWORD *)this + 138);
      goto LABEL_18;
    }
    if (a2 != 3804)
      return result;
    goto LABEL_14;
  }
  if (a2 == 57)
  {
    result = 0;
    *a6 = 0;
    *a5 = 48;
  }
  else if (a2 == 3802)
  {
    result = 0;
    *a5 = 8;
    *a6 = 0;
  }
  return result;
}

uint64_t AUVarispeed::GetProperty(AUVarispeed *this, int a2, int a3, unsigned int a4, int *a5)
{
  uint64_t result;
  int *v6;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  int v15;
  char v16;
  int v17;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  float Parameter;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int NumberOfSourceFrames;
  BOOL v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  double v39;
  _QWORD v40[2];
  char v41[8];

  if (a3)
    return 4294956417;
  v6 = a5;
  result = 4294956417;
  if (a2 <= 56)
  {
    if (a2 == 21)
    {
      result = 0;
      v9 = *((_DWORD *)this + 262);
    }
    else
    {
      if (a2 != 26)
      {
        if (a2 == 49)
        {
          result = 0;
          *(_OWORD *)a5 = *((_OWORD *)this + 67);
        }
        return result;
      }
      result = 0;
      v9 = *((_DWORD *)this + 263);
    }
    *a5 = v9;
    return result;
  }
  if (a2 == 57)
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 1);
    do
    {
      v12 = overviewParameterIDs[v10];
      *(_QWORD *)v6 = v11;
      v6[3] = 0;
      v6[4] = 0;
      v6[2] = v12;
      ++v10;
      v6 += 6;
    }
    while (v10 != 2);
    return 0;
  }
  if (a2 != 3802)
  {
    if (a2 != 3803)
      return result;
    v8 = (char *)this + 528;
    *(_QWORD *)&v35 = &v35;
    *((_QWORD *)&v35 + 1) = (char *)this + 528;
    if (*((_BYTE *)this + 17))
    {
      ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
      ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
      v8 = (char *)*((_QWORD *)&v35 + 1);
    }
    LODWORD(v31) = *((_QWORD *)v8 + 3);
    RampList::Writer::GetRamps();
    return 0;
  }
  if (!*((_BYTE *)this + 17))
    return 4294956429;
  v13 = *a5;
  if (*((_QWORD *)this + 69))
  {
    AT::Resampler::MockResampler::MockResampler();
    v14 = *((double *)this + 117);
    if (v14 == 0.0)
      v14 = *((double *)this + 72);
    v15 = *((_DWORD *)this + 84);
    v40[0] = v40;
    v40[1] = (char *)this + 528;
    if (v13 < 1)
    {
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = *((_BYTE *)this + 600) != 0;
      v19 = *((double *)this + 73);
      v20 = *((double *)this + 74);
      v21 = (double)v15;
      do
      {
        v39 = (double)v13;
        RateRamp::RateRamp((RateRamp *)&v35);
        if ((RampList::Reader::Segment() & 1) != 0)
        {
          if (!(v16 & 1 | !v18))
          {
            v18 = 0;
            v20 = *(double *)&v36;
            v19 = *(double *)&v37;
          }
        }
        else
        {
          Parameter = AUVarispeed::GetParameter(this);
          if (Parameter < 0.03125)
            Parameter = 0.03125;
          if (Parameter > 32.0)
            Parameter = 32.0;
          v23 = Parameter;
          v24 = v39 * v23;
          if (v39 * v23 > v21)
            v24 = v21;
          RateRamp::RateRamp((RateRamp *)&v31, v23, v23, *((double *)this + 116), *((double *)this + 116) + v24, v14);
          v35 = v31;
          v36 = v32;
          v37 = v33;
          v38 = v34;
        }
        v31 = v35;
        v32 = v36;
        v33 = v37;
        v34 = v38;
        RateRamp::OffsetTimes((RateRamp *)&v31, -v20, -v19);
        RateRamp::OutputDuration((RateRamp *)&v31);
        v26 = v25;
        AT::Resampler::MockResampler::SetRamp();
        v27 = vcvtpd_s64_f64(v26);
        NumberOfSourceFrames = AT::Resampler::MockResampler::GetNumberOfSourceFrames((AT::Resampler::MockResampler *)v41);
        AT::Resampler::MockResampler::Process((AT::Resampler::MockResampler *)v41);
        v17 += NumberOfSourceFrames;
        v14 = v14 + (double)v27;
        v16 = 1;
        v29 = __OFSUB__(v13, v27);
        v13 -= v27;
      }
      while (!((v13 < 0) ^ v29 | (v13 == 0)));
    }
    AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)v41);
    result = 0;
    v6[1] = v17;
  }
  else
  {
    v30 = AUVarispeed::UpstreamPullSize(this, *a5);
    result = 0;
    v6[1] = v30;
  }
  return result;
}

void sub_210AF7764(_Unwind_Exception *a1)
{
  uint64_t v1;

  AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t AUVarispeed::SetProperty(int64x2_t *this, int a2, int a3, uint64_t a4, double *a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  double v12;
  double v13;
  __int32 v14;
  __int32 v15;
  _QWORD v17[10];

  if (a3)
    return 4294956417;
  v17[2] = v9;
  v17[3] = v8;
  v17[8] = v6;
  v17[9] = v7;
  result = 4294956417;
  if (a2 <= 48)
  {
    if (a2 != 21)
    {
      if (a2 != 26)
        return result;
      v14 = *(_DWORD *)a5;
      if (*(_DWORD *)a5 > 0x7Fu)
        return 4294967246;
      v15 = this[65].i32[3];
      this[65].i32[3] = v14;
      if (v15 != v14)
      {
        AUVarispeed::CreateResamplers(this);
        (*(void (**)(int64x2_t *, uint64_t, _QWORD, uint64_t))(this->i64[0] + 432))(this, 26, 0, a4);
      }
      return 0;
    }
    if (a6 >= 4)
    {
      result = 0;
      this[65].i32[2] = *(_DWORD *)a5;
      return result;
    }
    return 4294956445;
  }
  switch(a2)
  {
    case 49:
      if (a6 >= 0x10)
      {
        result = 0;
        this[67] = *(int64x2_t *)a5;
        return result;
      }
      return 4294956445;
    case 3803:
      v17[0] = v17;
      v17[1] = this + 33;
      if (this[1].i8[1])
      {
        ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0);
        ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0);
      }
      RampList::Writer::AddRamps();
      break;
    case 3804:
      v12 = *a5;
      if (a6 == 16)
      {
        v13 = *a5;
        v12 = a5[1];
      }
      else
      {
        v13 = 0.0;
        if (!this[59].i8[8])
          v13 = *a5;
      }
      RampList::Writer::SetOrigin((RampList::Writer *)&this[38], v13, v12);
      break;
    default:
      return result;
  }
  return 0;
}

uint64_t AUVarispeed::SetParameter(AUVarispeed *this, int a2, int a3, float a4)
{
  float v7;
  ausdk::AUEffectBase *v8;
  unsigned int v9;

  if (a3)
    return 4294956430;
  if (a2)
  {
    if (a2 != 1)
      return 4294956418;
    ausdk::AUEffectBase::SetParameter(this, 1u, a4);
    v7 = exp2(a4 / 1200.0);
    v8 = this;
    v9 = 0;
  }
  else
  {
    ausdk::AUEffectBase::SetParameter(this, 0, a4);
    v7 = log2f(a4) * 1200.0;
    v8 = this;
    v9 = 1;
  }
  ausdk::AUEffectBase::SetParameter(v8, v9, v7);
  if (*((_BYTE *)this + 17))
    AUVarispeed::UpdateVarispeedRate(this);
  return 0;
}

uint64_t AUVarispeed::CanScheduleParameters(AUVarispeed *this)
{
  return 0;
}

uint64_t AUVarispeed::Render(AUVarispeed *this, unsigned int *a2, AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t Element;
  uint64_t v11;
  double v12;
  double v13;
  float Parameter;
  float v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  unint64_t v24;
  double v25;
  int v26;
  double v27;
  double v28;
  __n128 v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const AudioTimeStamp *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t BufferList;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  int v54;
  int *v55;
  double v56;
  void (*v57)(_QWORD, AudioTimeStamp *, double, double);
  double v58;
  double v59;
  AudioTimeStamp *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _OWORD v66[3];
  __int128 v67;
  char *v68;
  __int16 v69;

  v68 = (char *)this + 1088;
  v69 = 0;
  v8 = 0;
  HIBYTE(v69) = (*(uint64_t (**)(void))(*((_QWORD *)this + 136) + 32))();
  if ((v69 & 0x100) != 0)
  {
    if (*((_QWORD *)this + 66))
    {
      v8 = (*(uint64_t (**)(AUVarispeed *, unsigned int *, AudioTimeStamp *, uint64_t))(*(_QWORD *)this + 584))(this, a2, a3, a4);
    }
    else
    {
      if (*((_BYTE *)this + 1176))
        *((_BYTE *)this + 1176) = 0;
      Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
      v11 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
      v12 = *(double *)(Element + 80);
      v13 = *(double *)(v11 + 80);
      Parameter = AUVarispeed::GetParameter(this);
      if (Parameter < 0.03125)
        Parameter = 0.03125;
      if (Parameter <= 32.0)
        v15 = Parameter;
      else
        v15 = 32.0;
      v65 = *(_DWORD *)(v11 + 108);
      if (!*((_BYTE *)this + 1020))
        goto LABEL_30;
      if (*((_BYTE *)this + 1060))
      {
        *((_BYTE *)this + 1060) = 0;
        *((_WORD *)this + 476) = 1;
        v16 = (int)(AUVarispeed::GetInternalLatency(this) * v13 + 0.5);
        v17 = *((_DWORD *)this + 84);
        v18 = *(_OWORD *)&a3->mRateScalar;
        v66[0] = *(_OWORD *)&a3->mSampleTime;
        v66[1] = v18;
        v19 = *(_OWORD *)&a3->mSMPTETime.mHours;
        v66[2] = *(_OWORD *)&a3->mSMPTETime.mSubframes;
        v67 = v19;
        *(double *)v66 = *(double *)v66 - (double)v16;
        DWORD2(v67) = 1;
        if (v16 >= 1)
        {
          do
          {
            if (v16 >= v17)
              v20 = v17;
            else
              v20 = v16;
            (*(void (**)(AUVarispeed *, unsigned int *, _OWORD *, uint64_t))(*(_QWORD *)this + 208))(this, a2, v66, v20);
            *(double *)v66 = *(double *)v66 + (double)(int)v20;
            v21 = __OFSUB__(v16, (_DWORD)v20);
            v16 -= v20;
          }
          while (!((v16 < 0) ^ v21 | (v16 == 0)));
        }
      }
      v8 = (*a2 & 0x60) != 0 ? 128 : 4294956448;
      if ((*a2 & 0x60) != 0 && (*a2 & 0x20) == 0)
      {
LABEL_30:
        (*(void (**)(void))(***((_QWORD ***)this + 80) + 64))();
        if (v65 == 2)
        {
          (*(void (**)(_QWORD, void *(*)(float *, float *, unsigned int, _DWORD *), AUVarispeed *))(***((_QWORD ***)this + 80) + 72))(**((_QWORD **)this + 80), InputCallback2, this);
          v62 = 1;
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD, AUVarispeed *))(***((_QWORD ***)this + 80) + 72))(**((_QWORD **)this + 80), 0, this);
          v62 = v65;
        }
        v23 = *((_QWORD *)this + 80);
        if (*((_QWORD *)this + 81) != v23)
        {
          v24 = 0;
          do
          {
            (*(void (**)(_QWORD, double))(**(_QWORD **)(v23 + 8 * v24) + 120))(*(_QWORD *)(v23 + 8 * v24), a3->mSampleTime);
            ++v24;
            v23 = *((_QWORD *)this + 80);
          }
          while (v24 < (*((_QWORD *)this + 81) - v23) >> 3);
        }
        v60 = a3;
        v25 = v15;
        v26 = *((_DWORD *)this + 84);
        v27 = (double)a4;
        if (*((_DWORD *)this + 262))
          v28 = 1.0;
        else
          v28 = 1.0 / v15;
        AUTimestampGenerator::State::AddOutputTime((uint64_t)this + 736, (uint64_t)this + 736, (__int128 *)a3, (double)a4, v13, v28);
        v29.n128_u64[0] = 0;
        AUTimestampGenerator::State::GenerateInputTime((__n128 *)this + 46, 0, v29, v12);
        v31 = *v30;
        v32 = v30[1];
        v33 = v30[3];
        *((_OWORD *)this + 44) = v30[2];
        *((_OWORD *)this + 45) = v33;
        *((_OWORD *)this + 42) = v31;
        *((_OWORD *)this + 43) = v32;
        *((_QWORD *)this + 125) = 0;
        v34 = (*(double (**)(_QWORD))(***((_QWORD ***)this + 80) + 112))(**((_QWORD **)this + 80));
        if ((int)a4 >= 1)
        {
          v35 = v12 / v13 * v25;
          v61 = (int)((double)v26 / v35);
          v64 = 0;
          do
          {
            v63 = a4;
            if ((int)a4 >= v61)
              a4 = v61;
            else
              a4 = a4;
            if (v62 >= 1)
            {
              v36 = 0;
              v37 = 0;
              v38 = 16;
              do
              {
                v39 = *(_QWORD *)(*((_QWORD *)this + 80) + 8 * v37);
                (*(void (**)(uint64_t, double))(*(_QWORD *)v39 + 56))(v39, v35);
                v40 = *(_QWORD *)(*((_QWORD *)this + 80) + 8 * v37);
                (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v40 + 80))(v40, *((_DWORD *)this + 262) != 0);
                if (!v36)
                {
                  v41 = (const AudioTimeStamp *)(*(uint64_t (**)(_QWORD, uint64_t))(***((_QWORD ***)this + 80)
                                                                                           + 136))(**((_QWORD **)this + 80), a4);
                  v42 = v41;
                  LODWORD(v66[0]) = 0;
                  v8 = AUVarispeed::PullInputAndUpdate(this, (unsigned int *)v66, (const AudioTimeStamp *)((char *)this + 672), v41);
                  if ((_DWORD)v8)
                    goto LABEL_4;
                  v43 = __udivti3();
                  *((double *)this + 84) = *((double *)this + 84) + (double)v42;
                  *((double *)this + 125) = *((double *)this + 125) + (double)v42;
                  *((_QWORD *)this + 85) += v43;
                }
                *((_DWORD *)this + 166) = v37;
                *((_DWORD *)this + 252) = 0;
                v44 = *(_DWORD *)(v11 + 92);
                BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
                if ((v44 & 0x20) != 0)
                  v46 = *(_QWORD *)(BufferList + v38);
                else
                  v46 = *(_QWORD *)(BufferList + 16) + v36;
                if (v65 == 2)
                {
                  v47 = *(_QWORD *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144)) + 16);
                  v48 = *(_DWORD *)(v11 + 92);
                  v49 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
                  if ((v48 & 0x20) != 0)
                    v50 = *(_QWORD *)(v49 + 32);
                  else
                    v50 = *(_QWORD *)(v49 + 16) + 4;
                  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(***((_QWORD ***)this + 80) + 48))(**((_QWORD **)this + 80), v47 + 4 * v64, v50 + 4 * v64, a4, 1);
                }
                else
                {
                  v51 = *(_QWORD *)(*((_QWORD *)this + 80) + 8 * v37);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 40))(v51, v46 + 4 * v64, a4, 1);
                }
                ++v37;
                v38 += 16;
                v36 += 4;
              }
              while (v62 != v37);
            }
            v64 += a4;
            v21 = __OFSUB__(v63, (_DWORD)a4);
            LODWORD(a4) = v63 - a4;
          }
          while (!(((int)a4 < 0) ^ v21 | ((_DWORD)a4 == 0)));
        }
        *((double *)this + 116) = *((double *)this + 92) + (double)*((double *)this + 125);
        if (*((_BYTE *)this + 1020))
        {
          if (v60->mSampleTime + v27 >= (double)*((unint64_t *)this + 129))
          {
            *a2 |= 0x80u;
            v52 = (unsigned int *)ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v11 + 144));
            v53 = *v52;
            if ((_DWORD)v53)
            {
              v54 = 4 * (int)((double)*((unint64_t *)this + 129) - v60->mSampleTime);
              v55 = (int *)(v52 + 3);
              do
              {
                *v55 = v54;
                v55 += 4;
                --v53;
              }
              while (v53);
            }
          }
        }
        (*(void (**)(_QWORD))(***((_QWORD ***)this + 80) + 112))(**((_QWORD **)this + 80));
        v57 = (void (*)(_QWORD, AudioTimeStamp *, double, double))*((_QWORD *)this + 134);
        if (v57)
        {
          v58 = *((double *)this + 133);
          if (v34 >= v58)
            v59 = v34;
          else
            v59 = *((double *)this + 133);
          if (v56 < v58)
            v56 = *((double *)this + 133);
          v57(*((_QWORD *)this + 135), v60, v59, v56 - v59);
        }
        v8 = 0;
      }
    }
  }
LABEL_4:
  if ((_BYTE)v69)
    (*(void (**)(char *))(*(_QWORD *)v68 + 24))(v68);
  return v8;
}

void sub_210AF8038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 24))(a26);
  _Unwind_Resume(exception_object);
}

uint64_t AUVarispeed::GetParameterInfo(AUVarispeed *this, int a2, int a3, AudioUnitParameterInfo *buffer)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  AudioUnitParameterValue v8;
  AudioUnitParameterUnit v9;
  const __CFString *v10;

  buffer->flags = -1073741824;
  if (a2)
    return 4294956418;
  if (a3)
  {
    if (a3 != 1)
      return 4294956418;
    v6 = 0x45160000C5160000;
    v7 = 276824064;
    v8 = 0.0;
    v9 = kAudioUnitParameterUnit_Cents;
    v10 = CFSTR("playback pitch");
  }
  else
  {
    v6 = 0x408000003E800000;
    v7 = 281018368;
    v8 = 1.0;
    v9 = kAudioUnitParameterUnit_Rate;
    v10 = CFSTR("playback rate");
  }
  buffer->cfNameString = v10;
  buffer->flags = -939524096;
  CFStringGetCString(v10, buffer->name, 52, 0x8000100u);
  result = 0;
  buffer->unit = v9;
  *(_QWORD *)&buffer->minValue = v6;
  buffer->defaultValue = v8;
  buffer->flags += v7;
  return result;
}

double AUVarispeed::GetLatency(AUVarispeed *this)
{
  if (*((_BYTE *)this + 1020))
    return 0.0;
  else
    return AUVarispeed::GetInternalLatency(this);
}

void AUVarispeed::GetTailTime(AUVarispeed *this)
{
  int v2;

  if (*((_BYTE *)this + 17))
  {
    (*(void (**)(_QWORD, int *))(***((_QWORD ***)this + 80) + 16))(**((_QWORD **)this + 80), &v2);
    ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
    AUVarispeed::GetParameter(this);
  }
}

uint64_t AUVarispeed::SupportsTail(AUVarispeed *this)
{
  return 1;
}

BOOL AUVarispeed::StreamFormatWritable(AUVarispeed *this)
{
  return *((_BYTE *)this + 17) == 0;
}

uint64_t AUVarispeed::SupportedNumChannels(AUVarispeed *this, const AUChannelInfo **a2)
{
  if (a2)
    *a2 = (const AUChannelInfo *)&sChannels;
  return 1;
}

uint64_t AUVarispeed::ReallocateBuffers(int64x2_t *this)
{
  uint64_t Element;
  uint64_t v3;
  uint64_t result;

  ausdk::AUBase::CreateElements(this);
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[5], 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)Element + 64))(Element, (32 * this[21].i32[0] + 1024));
  v3 = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 64))(v3, 0);
  this[27].i8[0] = 1;
  return result;
}

uint64_t AUVarispeed::Version(AUVarispeed *this)
{
  return 0x10000;
}

uint64_t AUVarispeed::RenderRamp(AUVarispeed *this, unsigned int *a2, AudioTimeStamp *a3, uint64_t a4)
{
  AudioTimeStamp *v5;
  uint64_t v7;
  uint64_t Element;
  uint64_t v9;
  int v10;
  int v11;
  double v12;
  int v13;
  double mSampleTime;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  float Parameter;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  const AudioTimeStamp *v33;
  __n128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t BufferList;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  int v58;
  AudioTimeStamp *v59;
  __n128 *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  _OWORD v65[3];
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  double v71;
  _QWORD v72[3];

  v5 = a3;
  v72[0] = v72;
  v72[1] = (char *)this + 528;
  RampList::Reader::AdvanceOutputTime((RampList::Reader *)v72, a3->mSampleTime);
  if (*((_BYTE *)this + 1176))
  {
    *((_BYTE *)this + 1176) = 0;
    RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(v72[0] + 8), v5->mSampleTime);
    *((_WORD *)this + 476) = 256;
    *((_QWORD *)this + 120) = v7;
  }
  Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  v9 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
  v10 = *(_DWORD *)(v9 + 108);
  v63 = v10;
  (*(void (**)(void))(***((_QWORD ***)this + 80) + 64))();
  if (v10 == 2)
  {
    (*(void (**)(_QWORD, void *(*)(float *, float *, unsigned int, _DWORD *), AUVarispeed *))(***((_QWORD ***)this + 80) + 72))(**((_QWORD **)this + 80), InputCallback2, this);
    v11 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, AUVarispeed *))(***((_QWORD ***)this + 80) + 72))(**((_QWORD **)this + 80), 0, this);
    v11 = v10;
  }
  v12 = *(double *)(Element + 80);
  v56 = *(double *)(v9 + 80);
  v13 = *((_DWORD *)this + 84);
  mSampleTime = v5->mSampleTime;
  v15 = *((_QWORD *)this + 80);
  if (*((_QWORD *)this + 81) != v15)
  {
    v16 = 0;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v15 + 8 * v16) + 120))(*(_QWORD *)(v15 + 8 * v16), v5->mSampleTime);
      ++v16;
      v15 = *((_QWORD *)this + 80);
    }
    while (v16 < (*((_QWORD *)this + 81) - v15) >> 3);
  }
  *((_QWORD *)this + 125) = 0;
  v17 = (double)a4;
  if ((int)a4 < 1)
  {
LABEL_55:
    if (*((_QWORD *)this + 134))
    {
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(v72[0] + 8), v5->mSampleTime);
      v54 = v53;
      RampList::RampListTimeFunctions<RampList::Reader>::InputTimeForOutputTime(**(_QWORD **)(v72[0] + 8), v5->mSampleTime + v17);
      (*((void (**)(_QWORD, AudioTimeStamp *, double, double))this + 134))(*((_QWORD *)this + 135), v5, v54, v55 - v54);
    }
    return 0;
  }
  else
  {
    v62 = 0;
    v18 = (double)v13;
    v59 = v5;
    v60 = (__n128 *)((char *)this + 736);
    v19 = (char *)this + 672;
    v20 = 8 * v11;
    v21 = 1;
    v64 = v11;
    v58 = v11;
    v57 = v20;
    while (1)
    {
      v71 = (double)(int)a4;
      RateRamp::RateRamp((RateRamp *)&v67);
      if ((RampList::Reader::Segment() & 1) != 0)
      {
        if ((v21 & 1) != 0)
        {
          if (*((_BYTE *)this + 600))
          {
            *((_BYTE *)this + 600) = 0;
            v22 = v69;
            *((_QWORD *)this + 74) = v68;
            *((_QWORD *)this + 73) = v22;
          }
          v23 = (*(double *)&v67 + *((double *)&v67 + 1)) * 0.5;
          if (v23 < 0.03125)
            v23 = 0.03125;
          if (v23 <= 32.0)
            v24 = 1.0 / v23;
          else
            v24 = 0.03125;
          if (*((_DWORD *)this + 262))
            v25 = 1.0;
          else
            v25 = v24;
          AUTimestampGenerator::State::AddOutputTime((uint64_t)v60, (uint64_t)v60, (__int128 *)v5, v17, v56, v25);
        }
      }
      else
      {
        Parameter = AUVarispeed::GetParameter(this);
        if (Parameter < 0.03125)
          Parameter = 0.03125;
        if (Parameter > 32.0)
          Parameter = 32.0;
        v27 = Parameter;
        if ((v21 & 1) != 0)
        {
          if (*((_DWORD *)this + 262))
            v28 = 1.0;
          else
            v28 = 1.0 / v27;
          AUTimestampGenerator::State::AddOutputTime((uint64_t)v60, (uint64_t)v60, (__int128 *)v5, v17, v56, v28);
        }
        v29 = v71 * v27;
        if (v71 * v27 > v18)
          v29 = v18;
        RateRamp::RateRamp((RateRamp *)v65, v27, v27, *((double *)this + 116), *((double *)this + 116) + v29, v5->mSampleTime);
        v67 = v65[0];
        v68 = v65[1];
        v69 = v65[2];
        v70 = v66;
      }
      v61 = a4;
      RateRamp::OutputDuration((RateRamp *)&v67);
      v31 = v30;
      if (v11 >= 1)
      {
        v32 = 0;
        do
        {
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(*((_QWORD *)this + 80) + v32) + 128))(*(_QWORD *)(*((_QWORD *)this + 80) + v32), &v67);
          v32 += 8;
        }
        while (v20 != v32);
      }
      LODWORD(a4) = vcvtpd_s64_f64(v31);
      v33 = (const AudioTimeStamp *)(*(uint64_t (**)(_QWORD, uint64_t))(***((_QWORD ***)this + 80) + 136))(**((_QWORD **)this + 80), a4);
      LODWORD(v65[0]) = 0;
      v34.n128_f64[0] = (double)v33;
      AUTimestampGenerator::State::GenerateInputTime(v60, 1, v34, v12);
      v36 = v35[3];
      v38 = *v35;
      v37 = v35[1];
      *((_OWORD *)v19 + 2) = v35[2];
      *((_OWORD *)v19 + 3) = v36;
      *(_OWORD *)v19 = v38;
      *((_OWORD *)v19 + 1) = v37;
      if ((_DWORD)v33)
      {
        result = AUVarispeed::PullInputAndUpdate(this, (unsigned int *)v65, (const AudioTimeStamp *)v19, v33);
        if ((_DWORD)result)
          break;
      }
      v40 = v63;
      if (v11 >= 1)
      {
        v41 = 0;
        v42 = 0;
        v43 = 16;
        do
        {
          *((_DWORD *)this + 166) = v42;
          *((_DWORD *)this + 252) = 0;
          v44 = *(_DWORD *)(v9 + 92);
          BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v9 + 144));
          if ((v44 & 0x20) != 0)
            v46 = *(_QWORD *)(BufferList + v43);
          else
            v46 = *(_QWORD *)(BufferList + 16) + v41;
          if (v40 == 2)
          {
            v47 = *(_QWORD *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v9 + 144)) + 16);
            v48 = *(_DWORD *)(v9 + 92);
            v49 = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(v9 + 144));
            if ((v48 & 0x20) != 0)
              v50 = *(_QWORD *)(v49 + 32);
            else
              v50 = *(_QWORD *)(v49 + 16) + 4;
            v40 = v63;
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(***((_QWORD ***)this + 80) + 48))(**((_QWORD **)this + 80), v47 + 4 * v62, v50 + 4 * v62, a4, 1);
          }
          else
          {
            v51 = *(_QWORD *)(*((_QWORD *)this + 80) + 8 * v42);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 40))(v51, v46 + 4 * v62, a4, 1);
          }
          ++v42;
          v43 += 16;
          v41 += 4;
        }
        while (v64 != v42);
      }
      v21 = 0;
      v62 += a4;
      mSampleTime = mSampleTime + (double)(int)a4;
      v52 = __OFSUB__(v61, (_DWORD)a4);
      a4 = (v61 - a4);
      v11 = v58;
      v5 = v59;
      v20 = v57;
      v19 = (char *)this + 672;
      if (((int)a4 < 0) ^ v52 | ((_DWORD)a4 == 0))
        goto LABEL_55;
    }
  }
  return result;
}

uint64_t AUVarispeed::GetPreflightString(AUVarispeed *this, const __CFString **a2)
{
  return 0;
}

void *InputCallback2(float *a1, float *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t Element;
  ausdk::AUBufferList *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t BufferList;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  size_t v16;

  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a4 + 20), 0);
  v9 = (ausdk::AUBufferList *)(Element + 144);
  v10 = *(_QWORD *)(ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144)) + 16);
  v11 = a4[252];
  LODWORD(Element) = *(_DWORD *)(Element + 92);
  BufferList = ausdk::AUBufferList::GetBufferList(v9);
  if ((Element & 0x20) != 0)
    v13 = *(_QWORD *)(BufferList + 32);
  else
    v13 = *(_QWORD *)(BufferList + 16) + 4;
  v14 = a4[252];
  v15 = (const void *)(v13 + 4 * v14);
  a4[252] = v14 + a3;
  v16 = 4 * a3;
  memcpy(a1, (const void *)(v10 + 4 * v11), v16);
  return memcpy(a2, v15, v16);
}

void *InputCallback(float *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t Element;
  int v8;
  uint64_t BufferList;
  uint64_t v10;
  uint64_t v11;

  v6 = a3[166];
  Element = ausdk::AUScope::SafeGetElement((ausdk::AUScope *)(a3 + 20), 0);
  v8 = *(_DWORD *)(Element + 92);
  BufferList = ausdk::AUBufferList::GetBufferList((ausdk::AUBufferList *)(Element + 144));
  if ((v8 & 0x20) != 0)
    v10 = *(_QWORD *)(BufferList + 16 * v6 + 16);
  else
    v10 = *(_QWORD *)(BufferList + 16) + 4 * v6;
  v11 = a3[252];
  a3[252] = v11 + a2;
  return memcpy(a1, (const void *)(v10 + 4 * v11), 4 * a2);
}

float AUVarispeed::GetParameter(AUVarispeed *this)
{
  uint64_t v2;
  ausdk::AUElement *v3;
  ausdk::AUElement **v4;
  ausdk::AUElement ***v5;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (ausdk::AUElement *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, 0);
  }
  else
  {
    v5 = (ausdk::AUElement ***)((char *)this + 48);
    v4 = (ausdk::AUElement **)*((_QWORD *)this + 6);
    if (v5[1] == v4)
      v3 = 0;
    else
      v3 = *v4;
  }
  return ausdk::AUElement::GetParameter(v3, 0);
}

uint64_t AUVarispeed::PullInputAndUpdate(AUVarispeed *this, unsigned int *a2, const AudioTimeStamp *a3, const AudioTimeStamp *a4)
{
  uint64_t v8;
  unint64_t v9;
  ausdk::AUInputElement *Element;

  if (*((double *)this + 133) < 0.0)
    *((_QWORD *)this + 133) = *(_QWORD *)&a3->mSampleTime;
  v8 = *((_QWORD *)this + 80);
  if (*((_QWORD *)this + 81) != v8)
  {
    v9 = 0;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(v8 + 8 * v9) + 104))(*(_QWORD *)(v8 + 8 * v9), a3->mSampleTime);
      ++v9;
      v8 = *((_QWORD *)this + 80);
    }
    while (v9 < (*((_QWORD *)this + 81) - v8) >> 3);
  }
  Element = (ausdk::AUInputElement *)ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  return ausdk::AUInputElement::PullInput(Element, a2, a3, 0, (uint64_t)a4);
}

double AUVarispeed::GetInternalLatency(AUVarispeed *this)
{
  uint64_t Element;
  unint64_t v3;
  double v4;
  float Parameter;
  int v7;

  if (!*((_BYTE *)this + 17))
    return 0.0;
  (*(void (**)(_QWORD, int *))(***((_QWORD ***)this + 80) + 16))(**((_QWORD **)this + 80), &v7);
  Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  LODWORD(v3) = v7;
  v4 = (double)v3 / *(double *)(Element + 80);
  if (!*((_DWORD *)this + 262))
  {
    Parameter = AUVarispeed::GetParameter(this);
    if (Parameter < 0.03125)
      Parameter = 0.03125;
    if (Parameter > 32.0)
      Parameter = 32.0;
    return v4 / Parameter;
  }
  return v4;
}

void AUVarispeed::UpdateVarispeedRate(AUVarispeed *this)
{
  ausdk::AUScope *v2;
  unsigned int v3;
  unsigned int v4;
  double v5;
  double v6;
  float Parameter;
  uint64_t v8;
  double v9;
  uint64_t v10;

  v2 = (AUVarispeed *)((char *)this + 128);
  v3 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0) + 108);
  if (v3 == 2)
    v4 = 1;
  else
    v4 = v3;
  v5 = *(double *)(ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0) + 80);
  v6 = *(double *)(ausdk::AUScope::SafeGetElement(v2, 0) + 80);
  Parameter = AUVarispeed::GetParameter(this);
  if (Parameter < 0.03125)
    Parameter = 0.03125;
  if (Parameter > 32.0)
    Parameter = 32.0;
  if (v4)
  {
    v8 = 0;
    v9 = v5 / v6 * Parameter;
    v10 = 8 * v4;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(*((_QWORD *)this + 80) + v8) + 56))(*(_QWORD *)(*((_QWORD *)this + 80) + v8), v9);
      v8 += 8;
    }
    while (v10 != v8);
  }
}

uint64_t AUVarispeed::CreateResamplers(int64x2_t *this)
{
  char *i8;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t result;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  int64x2_t *v43;

  i8 = this[68].i8;
  v38 = (*(uint64_t (**)(int64x2_t *))(this[68].i64[0] + 16))(this + 68);
  v3 = (_QWORD *)this[40].i64[1];
  v4 = (_QWORD *)this[40].i64[0];
  while (v3 != v4)
  {
    v6 = *--v3;
    v5 = v6;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  this[40].i64[1] = (uint64_t)v4;
  v7 = *(_DWORD *)(ausdk::AUScope::SafeGetElement((ausdk::AUScope *)&this[8], 0) + 108);
  if (v7 == 2)
    v8 = 1;
  else
    v8 = v7;
  v9 = this[40].i64[0];
  if (v8 > (this[41].i64[0] - v9) >> 3)
  {
    v10 = this[40].i64[1];
    v43 = this + 41;
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v8);
    v13 = (_QWORD *)this[40].i64[1];
    v14 = (_QWORD *)this[40].i64[0];
    if (v13 == v14)
    {
      v17 = vdupq_n_s64((unint64_t)v13);
      v15 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v15 = &v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v16 = *--v13;
        *v13 = 0;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v13 != v14);
      v17 = this[40];
    }
    this[40].i64[0] = (uint64_t)v15;
    this[40].i64[1] = (uint64_t)&v11[(v10 - v9) & 0xFFFFFFFFFFFFFFF8];
    v41 = v17;
    v18 = this[41].i64[0];
    this[41].i64[0] = (uint64_t)&v11[8 * v12];
    v42 = v18;
    v40 = v17.i64[0];
    std::__split_buffer<std::unique_ptr<AT::Resampler>>::~__split_buffer((uint64_t)&v40);
  }
  if (this[33].i64[0])
    v19 = 1;
  else
    v19 = 2;
  if ((_DWORD)v8)
  {
    v20 = 0;
    do
    {
      AT::Resampler::create((AT::Resampler *)0x6E6F726D, 1.0, 1.0, 0.0);
      (*(void (**)(uint64_t, void *(*)(float *, unsigned int, unsigned int *), int64x2_t *))(*(_QWORD *)v39 + 64))(v39, InputCallback, this);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 96))(v39, v19);
      v21 = (_QWORD *)this[40].i64[1];
      v22 = this[41].u64[0];
      if ((unint64_t)v21 >= v22)
      {
        v24 = this[40].i64[0];
        v25 = ((uint64_t)v21 - v24) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<void const*>::__throw_length_error[abi:ne180100]();
        v26 = v22 - v24;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        v43 = this + 41;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<PitchShifter3 *>>(v28);
        else
          v29 = 0;
        v30 = (_QWORD *)(v28 + 8 * v25);
        v31 = v28 + 8 * v29;
        v42 = v31;
        *v30 = v39;
        v23 = v30 + 1;
        v41.i64[1] = (uint64_t)(v30 + 1);
        v32 = (_QWORD *)this[40].i64[1];
        v33 = (_QWORD *)this[40].i64[0];
        if (v32 == v33)
        {
          v35 = vdupq_n_s64((unint64_t)v32);
        }
        else
        {
          do
          {
            v34 = *--v32;
            *v32 = 0;
            *--v30 = v34;
          }
          while (v32 != v33);
          v35 = this[40];
          v23 = (_QWORD *)v41.i64[1];
          v31 = v42;
        }
        this[40].i64[0] = (uint64_t)v30;
        this[40].i64[1] = (uint64_t)v23;
        v41 = v35;
        v36 = this[41].i64[0];
        this[41].i64[0] = v31;
        v42 = v36;
        v40 = v35.i64[0];
        std::__split_buffer<std::unique_ptr<AT::Resampler>>::~__split_buffer((uint64_t)&v40);
      }
      else
      {
        *v21 = v39;
        v23 = v21 + 1;
      }
      this[40].i64[1] = (uint64_t)v23;
      v39 = 0;
      ++v20;
    }
    while (v20 != (_DWORD)v8);
  }
  result = this[65].u32[3];
  if (this[66].i32[0] != (_DWORD)result)
  {
    MEMORY[0x212BCD98C]();
    result = this[66].u32[0];
    if ((result & 0x80000000) == 0)
      result = MEMORY[0x212BCD980]();
  }
  this[66].i32[0] = this[65].i32[3];
  if (v38)
    return (*(uint64_t (**)(char *))(*(_QWORD *)i8 + 24))(i8);
  return result;
}

void sub_210AF8E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  uint64_t v12;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t AUVarispeed::UpstreamPullSize(AUVarispeed *this, int a2)
{
  uint64_t Element;
  uint64_t v5;
  double v6;
  double v7;
  float Parameter;
  float v9;
  int v10;
  uint64_t v11;
  signed int v12;
  unsigned int v13;
  BOOL v14;
  double v15;
  int v16;
  int v17;
  int NumberOfSourceFrames;
  _BYTE v20[8];

  AT::Resampler::MockResampler::MockResampler();
  Element = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 80), 0);
  v5 = ausdk::AUScope::SafeGetElement((AUVarispeed *)((char *)this + 128), 0);
  v6 = *(double *)(Element + 80);
  v7 = *(double *)(v5 + 80);
  Parameter = AUVarispeed::GetParameter(this);
  if (Parameter < 0.03125)
    Parameter = 0.03125;
  if (Parameter <= 32.0)
    v9 = Parameter;
  else
    v9 = 32.0;
  if (*((_BYTE *)this + 1020)
    && *((_BYTE *)this + 1060)
    && (v10 = (int)(AUVarispeed::GetInternalLatency(this) * v7 + 0.5), v10 >= 1))
  {
    LODWORD(v11) = 0;
    v12 = *((_DWORD *)this + 84);
    do
    {
      if (v10 >= v12)
        v13 = v12;
      else
        v13 = v10;
      v11 = AUVarispeed::UpstreamPullSize(this, v13) + v11;
      v14 = __OFSUB__(v10, v13);
      v10 -= v13;
    }
    while (!((v10 < 0) ^ v14 | (v10 == 0)));
  }
  else
  {
    v11 = 0;
  }
  if (a2 >= 1)
  {
    v15 = v6 / v7 * v9;
    v16 = (int)((double)*((int *)this + 84) / v15);
    do
    {
      if (a2 >= v16)
        v17 = v16;
      else
        v17 = a2;
      AT::Resampler::MockResampler::SetVarispeedRate((AT::Resampler::MockResampler *)v20, v15);
      AT::Resampler::MockResampler::SetIsBypassed((AT::Resampler::MockResampler *)v20);
      NumberOfSourceFrames = AT::Resampler::MockResampler::GetNumberOfSourceFrames((AT::Resampler::MockResampler *)v20);
      AT::Resampler::MockResampler::Process((AT::Resampler::MockResampler *)v20);
      v11 = (NumberOfSourceFrames + v11);
      v14 = __OFSUB__(a2, v17);
      a2 -= v17;
    }
    while (!((a2 < 0) ^ v14 | (a2 == 0)));
  }
  AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)v20);
  return v11;
}

void sub_210AF9054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AT::Resampler::MockResampler::~MockResampler((AT::Resampler::MockResampler *)va);
  _Unwind_Resume(a1);
}

double AUVarispeed::ResetCommon(AUVarispeed *this)
{
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = *((_QWORD *)this + 80);
  if (*((_QWORD *)this + 81) != v2)
  {
    v3 = 0;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 88))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = *((_QWORD *)this + 80);
    }
    while (v3 < (*((_QWORD *)this + 81) - v2) >> 3);
  }
  result = 0.0;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 122) = 0x3FF0000000000000;
  *((_BYTE *)this + 992) = 1;
  *((_BYTE *)this + 1016) = 1;
  *((_BYTE *)this + 1060) = 1;
  *((_QWORD *)this + 133) = 0xBFF0000000000000;
  *((_BYTE *)this + 1176) = 1;
  return result;
}

_QWORD *AUVarispeedFactory()
{
  _QWORD *result;

  result = malloc_type_malloc(0x4E0uLL, 0xB0CA1167uLL);
  *result = ausdk::ComponentBase::AP_Open;
  result[1] = ausdk::ComponentBase::AP_Close;
  result[2] = ausdk::AUBaseLookup::Lookup;
  result[3] = 0;
  result[4] = ausdk::APFactory<ausdk::AUBaseLookup,AUVarispeed>::Construct;
  result[5] = ausdk::APFactory<ausdk::AUBaseLookup,AUVarispeed>::Destruct;
  result[6] = 0;
  result[7] = 0;
  return result;
}

void ParameterControlSource::~ParameterControlSource(ParameterControlSource *this)
{
  *(_QWORD *)this = off_24CA881A0;
  *((_QWORD *)this + 21) = &unk_24CA88230;
}

void ParameterControlSource::~ParameterControlSource(void *this)
{
  *(_QWORD *)this = off_24CA881A0;
  *((_QWORD *)this + 21) = &unk_24CA88230;
  operator delete(this);
}

uint64_t ParameterControlSource::GetComponentID(ParameterControlSource *this)
{
  return *((unsigned int *)this + 38);
}

void `virtual thunk to'ParameterControlSource::~ParameterControlSource(ParameterControlSource *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_24CA881A0;
  v1[21] = &unk_24CA88230;
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_24CA881A0;
  v1[21] = &unk_24CA88230;
  operator delete(v1);
}

uint64_t `virtual thunk to'ParameterControlSource::GetComponentID(ParameterControlSource *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32) + 152);
}

uint64_t AUIOClient_BypassIO(mach_port_t a1, unsigned int a2, int a3, int a4)
{
  mach_port_t reply_port;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  mach_msg_header_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;

  v12 = *MEMORY[0x24BDAC470];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  reply_port = mig_get_reply_port();
  *(_QWORD *)&v11.msgh_bits = 5395;
  v11.msgh_remote_port = a1;
  v11.msgh_local_port = reply_port;
  *(_QWORD *)&v11.msgh_voucher_port = 0x157CC00000000;
  if (MEMORY[0x24BDB0418])
  {
    voucher_mach_msg_set(&v11);
    reply_port = v11.msgh_local_port;
  }
  v6 = mach_msg(&v11, 275, 0x2Cu, 0x2Cu, reply_port, *MEMORY[0x24BDB6D08], 0);
  v7 = v6;
  if ((v6 - 268435458) > 0xE || ((1 << (v6 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v6)
    {
      if (v11.msgh_id == 71)
      {
        v9 = 4294966988;
      }
      else if (v11.msgh_id == 88112)
      {
        v9 = 4294966996;
        if ((v11.msgh_bits & 0x80000000) == 0 && *(_QWORD *)&v11.msgh_size == 36)
        {
          v9 = v13;
          if (!v13)
            return 0;
        }
      }
      else
      {
        v9 = 4294966995;
      }
LABEL_21:
      mach_msg_destroy(&v11);
      return v9;
    }
    mig_dealloc_reply_port(v11.msgh_local_port);
  }
  else
  {
    mig_put_reply_port(v11.msgh_local_port);
  }
  v9 = 268435460;
  if ((_DWORD)v7 == 268435460)
  {
    if ((v11.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x24BDAEC58], v11.msgh_local_port);
    goto LABEL_21;
  }
  return v7;
}

uint64_t (*AURemoteIOCallbacks_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 89005) >= 0xFFFFFFFB)
    return AURIOCallbackReceiver_AURemoteIOCallbacks_subsystem[5 * (v1 - 89000) + 5];
  else
    return 0;
}

void _XTerminateOwnIOThread(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  _BYTE v9[32];
  unsigned int *v10;
  char v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    v5 = -304;
    goto LABEL_16;
  }
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v9, a1[8]);
  if (v12)
  {
    v3 = *(_QWORD *)(v12 + 16);
    if (kRIOClientSubsystem)
    {
      v4 = *(NSObject **)kRIOClientSubsystem;
      if (!*(_QWORD *)kRIOClientSubsystem)
      {
LABEL_11:
        *(_BYTE *)(v3 + 784) = 1;
        goto LABEL_12;
      }
    }
    else
    {
      v4 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v14 = "AURemoteIO.cpp";
      v15 = 1024;
      v16 = 2314;
      _os_log_impl(&dword_210A23000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURIOCallbackReceiver_TerminateOwnIOThread", buf, 0x12u);
    }
    goto LABEL_11;
  }
LABEL_12:
  if (v11)
  {
    v6 = v10;
    if (v10)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
  }
  v5 = 0;
LABEL_16:
  v8 = (_QWORD *)MEMORY[0x24BDAC470];
  *(_DWORD *)(a2 + 32) = v5;
  *(_QWORD *)(a2 + 24) = *v8;
}

void sub_210AF9518(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x210AF94D0);
  }
  _Unwind_Resume(a1);
}

void _XIOFormatsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  _BYTE v6[24];
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
    return;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (!kRIOClientSubsystem)
  {
    v4 = MEMORY[0x24BDACB70];
LABEL_8:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v6 = 136315394;
      *(_QWORD *)&v6[4] = "AURemoteIO.cpp";
      *(_WORD *)&v6[12] = 1024;
      *(_DWORD *)&v6[14] = 2329;
      _os_log_impl(&dword_210A23000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d IOFormatsChanged, redispatching", v6, 0x12u);
    }
    goto LABEL_10;
  }
  v4 = *(NSObject **)kRIOClientSubsystem;
  if (*(_QWORD *)kRIOClientSubsystem)
    goto LABEL_8;
LABEL_10:
  v5 = *(NSObject **)(gRIOServer + 192);
  if (v5)
  {
    dispatch_retain(*(dispatch_object_t *)(gRIOServer + 192));
    *(_QWORD *)v6 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v6[8] = 0x40000000;
    *(_QWORD *)&v6[16] = __AURIOCallbackReceiver_IOFormatsChanged_block_invoke;
    v7 = &__block_descriptor_tmp_21;
    v8 = v3;
    dispatch_async(v5, v6);
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)v6 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v6[8] = 0x40000000;
    *(_QWORD *)&v6[16] = __AURIOCallbackReceiver_IOFormatsChanged_block_invoke;
    v7 = &__block_descriptor_tmp_21;
    v8 = v3;
    dispatch_async(0, v6);
  }
  *(_DWORD *)(a2 + 32) = 0;
}

uint64_t _XMutedSpeechActivityEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 40)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  }
  else
  {
    v3 = *(unsigned int *)(result + 36);
    result = ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)&v8, *(_DWORD *)(result + 32));
    if (v11)
    {
      v4 = *(_QWORD *)(v11 + 16);
      v5 = *(_QWORD *)(v4 + 472);
      if (v5)
        (*(void (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(v4 + 472));
      result = *(_QWORD *)(v4 + 1288);
      if (result)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v3);
      if (v5)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    if (v10)
    {
      v6 = v9;
      if (v9)
      {
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
      }
    }
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

void sub_210AF97D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  NSObject *v17;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (a13)
  {
    v15 = (unsigned int *)a12;
    if (a12)
    {
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
  }
  __cxa_begin_catch(exception_object);
  if (kRIOClientSubsystem)
  {
    v17 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_13;
  }
  else
  {
    v17 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LODWORD(a9) = 136315394;
    *(_QWORD *)((char *)&a9 + 4) = "AURemoteIO.cpp";
    WORD6(a9) = 1024;
    *(_DWORD *)((char *)&a9 + 14) = 2357;
    _os_log_impl(&dword_210A23000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception caught from redispatching the MutedSpeechActivityEvent", (uint8_t *)&a9, 0x12u);
  }
LABEL_13:
  __cxa_end_catch();
  JUMPOUT(0x210AF9788);
}

void _XSessionDeactivated(_DWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int *v8;
  unsigned int v9;
  _BYTE v10[24];
  void *v11;
  int v12;
  _BYTE v13[32];
  unsigned int *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((*a1 & 0x80000000) != 0 || a1[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
    return;
  }
  v3 = a1[8];
  ResolvedOpaqueRef<TOpaqueRef<AURemoteIO>>::ResolvedOpaqueRef((uint64_t)v13, v3);
  if (!v16)
    goto LABEL_16;
  v4 = *(_QWORD *)(v16 + 16);
  v5 = *(_QWORD *)(v4 + 472);
  if (v5)
    (*(void (**)(_QWORD))(*(_QWORD *)v5 + 16))(*(_QWORD *)(v4 + 472));
  *(_BYTE *)(v4 + 1300) = 1;
  if (!kRIOClientSubsystem)
  {
    v6 = MEMORY[0x24BDACB70];
LABEL_11:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v10 = 136315394;
      *(_QWORD *)&v10[4] = "AURemoteIO.cpp";
      *(_WORD *)&v10[12] = 1024;
      *(_DWORD *)&v10[14] = 2372;
      _os_log_impl(&dword_210A23000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d SessionInterrupted, redispatching", v10, 0x12u);
    }
    goto LABEL_13;
  }
  v6 = *(NSObject **)kRIOClientSubsystem;
  if (*(_QWORD *)kRIOClientSubsystem)
    goto LABEL_11;
LABEL_13:
  v7 = *(NSObject **)(gRIOServer + 192);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(gRIOServer + 192));
    *(_QWORD *)v10 = MEMORY[0x24BDAC760];
    *(_QWORD *)&v10[8] = 0x40000000;
    *(_QWORD *)&v10[16] = __AURIOCallbackReceiver_SessionDeactivated_block_invoke;
    v11 = &__block_descriptor_tmp_22;
    v12 = v3;
    dispatch_async(v7, v10);
    dispatch_release(v7);
    if (!v5)
      goto LABEL_16;
    goto LABEL_15;
  }
  *(_QWORD *)v10 = MEMORY[0x24BDAC760];
  *(_QWORD *)&v10[8] = 0x40000000;
  *(_QWORD *)&v10[16] = __AURIOCallbackReceiver_SessionDeactivated_block_invoke;
  v11 = &__block_descriptor_tmp_22;
  v12 = v3;
  dispatch_async(0, v10);
  if (v5)
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
LABEL_16:
  if (v15)
  {
    v8 = v14;
    if (v14)
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
    }
  }
  *(_DWORD *)(a2 + 32) = 0;
}

void sub_210AF9AD8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, uint64_t a16, uint64_t a17, unsigned int *a18, char a19)
{
  unsigned int *v19;
  unsigned int v20;
  NSObject *v21;

  if (!a2)
    _Unwind_Resume(a1);
  if (a19)
  {
    v19 = a18;
    if (a18)
    {
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
    }
  }
  __cxa_begin_catch(a1);
  if (kRIOClientSubsystem)
  {
    v21 = *(NSObject **)kRIOClientSubsystem;
    if (!*(_QWORD *)kRIOClientSubsystem)
      goto LABEL_11;
  }
  else
  {
    v21 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315394;
    *(_QWORD *)((char *)&buf + 4) = "AURemoteIO.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 2395;
    _os_log_impl(&dword_210A23000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception caught from AURIOCallbackReceiver_SessionDeactivated callback", (uint8_t *)&buf, 0x12u);
  }
LABEL_11:
  __cxa_end_catch();
  JUMPOUT(0x210AF9A60);
}

uint64_t AURemoteIOCallbacks_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 89005) >= 0xFFFFFFFB
    && (v5 = (void (*)(void))AURIOCallbackReceiver_AURemoteIOCallbacks_subsystem[5 * (v4 - 89000) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void IPCAURegClient_SetProcessWakeState(int a1, int a2, int a3, _DWORD *a4)
{
  mach_port_t reply_port;
  mach_msg_return_t v7;
  mach_msg_return_t v8;
  int v10;
  _BYTE rcv_name[44];

  memset(&rcv_name[16], 0, 28);
  *(_OWORD *)rcv_name = 0u;
  *(_QWORD *)&rcv_name[20] = *MEMORY[0x24BDAC470];
  *(_DWORD *)&rcv_name[28] = a2;
  *(_DWORD *)&rcv_name[32] = a3;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = reply_port;
  v10 = 5395;
  *(_QWORD *)&rcv_name[12] = 0x15F9B00000000;
  if (MEMORY[0x24BDB0418])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v10);
    reply_port = *(_DWORD *)&rcv_name[8];
  }
  v7 = mach_msg((mach_msg_header_t *)&v10, 275, 0x28u, 0x30u, reply_port, *MEMORY[0x24BDB6D08], 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (*(_DWORD *)&rcv_name[16] == 90111
        && (v10 & 0x80000000) == 0
        && *(_DWORD *)rcv_name == 40
        && !*(_DWORD *)&rcv_name[4]
        && !*(_DWORD *)&rcv_name[28])
      {
        *a4 = *(_DWORD *)&rcv_name[32];
        return;
      }
      goto LABEL_19;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  else
  {
    mig_put_reply_port(*(mach_port_t *)&rcv_name[8]);
  }
  if (v8 != 268435460)
    return;
  if ((v10 & 0x1F00) == 0x1100)
    mach_port_deallocate(*MEMORY[0x24BDAEC58], *(mach_port_name_t *)&rcv_name[8]);
LABEL_19:
  mach_msg_destroy((mach_msg_header_t *)&v10);
}

uint64_t (*IPCAudioUnit_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 90218) >= 0xFFFFFFEE)
    return IPCAUServer_IPCAudioUnit_subsystem[5 * (v1 - 90200) + 5];
  else
    return 0;
}

uint64_t _XOpen(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  const void *v8;
  __int128 v9;
  AudioComponentDescription v10;
  _OWORD v11[2];

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 108)
  {
    v4 = -304;
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || (v3 = *(_DWORD *)(result + 52), v3 != *(_DWORD *)(result + 88)))
  {
    v4 = -300;
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 108) || *(_DWORD *)(result + 112) <= 0x1Fu)
  {
    v4 = -309;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v4;
    v5 = *MEMORY[0x24BDAC470];
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(result + 28);
  v7 = *(_DWORD *)(result + 64);
  v8 = *(const void **)(result + 40);
  v9 = *(_OWORD *)(result + 144);
  v11[0] = *(_OWORD *)(result + 128);
  v11[1] = v9;
  v10 = *(AudioComponentDescription *)(result + 68);
  result = IPCAUServer_Open(v11, v6, v7, &v10, v8, v3, *(_QWORD *)(result + 92), *(_QWORD *)(result + 100), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = *MEMORY[0x24BDAC470];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void _XClose(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  pid_t v5;
  __int128 v6;
  uint64_t v7;
  pid_t v8;
  NSObject *v9;
  uint64_t i;
  _DWORD *v11;
  NSObject *v12;
  _BOOL4 v13;
  audit_token_t atoken;
  pid_t pidp;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  pid_t v23;
  __int16 v24;
  pid_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40) >= 0x20u)
  {
    v5 = *(_DWORD *)(a1 + 32);
    v6 = *(_OWORD *)(a1 + 72);
    v16 = *(_OWORD *)(a1 + 56);
    v17 = v6;
    pidp = 0;
    *(_OWORD *)atoken.val = v16;
    *(_OWORD *)&atoken.val[4] = v6;
    audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
    v7 = CADeprecated::TSingleton<IPCAUServer>::instance();
    v8 = pidp;
    if (kLocalInterAppAudioScope)
    {
      v9 = *(NSObject **)kLocalInterAppAudioScope;
      if (!*(_QWORD *)kLocalInterAppAudioScope)
      {
LABEL_14:
        for (i = *(_QWORD *)(v7 + 200); ; i += 8)
        {
          if (i == *(_QWORD *)(v7 + 208))
          {
            v3 = -50;
            goto LABEL_7;
          }
          v11 = *(_DWORD **)i;
          if (*(_DWORD *)(*(_QWORD *)i + 8) == v5)
            break;
        }
        if (v11[6] == v8)
        {
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v7 + 24))(v7, v11);
          SearchableVector<AUServerInstanceBase *>::remove((char **)(v7 + 264), (uint64_t)v11);
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
        }
        else
        {
          if (kLocalInterAppAudioScope)
          {
            v12 = *(NSObject **)kLocalInterAppAudioScope;
            if (!*(_QWORD *)kLocalInterAppAudioScope)
              goto LABEL_27;
          }
          else
          {
            v12 = MEMORY[0x24BDACB70];
          }
          v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          v3 = 0;
          if (!v13)
            goto LABEL_7;
          *(_DWORD *)buf = 136315650;
          v19 = "IPCAUServer.cpp";
          v20 = 1024;
          v21 = 383;
          v22 = 1024;
          v23 = v8;
          _os_log_impl(&dword_210A23000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d attempt to close from non-owner pid %d", buf, 0x18u);
        }
LABEL_27:
        v3 = 0;
        goto LABEL_7;
      }
    }
    else
    {
      v9 = MEMORY[0x24BDACB70];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v19 = "IPCAUServer.cpp";
      v20 = 1024;
      v21 = 374;
      v22 = 1024;
      v23 = v5;
      v24 = 1024;
      v25 = v8;
      _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAUServer::AUClose: remoteAU 0x%x from pid %d", buf, 0x1Eu);
    }
    goto LABEL_14;
  }
  v3 = -309;
LABEL_7:
  v4 = (_QWORD *)MEMORY[0x24BDAC470];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

void _XInitialize(uint64_t a1, uint64_t a2)
{
  int v3;
  const audit_token_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t AU;
  uint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  _OWORD v13[2];
  uint8_t v14[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  _BYTE buf[20];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
    return;
  }
  *(_DWORD *)(a2 + 72) = 2;
  *(_QWORD *)(a2 + 32) = 0x13000000000000;
  *(_QWORD *)(a2 + 44) = 0x13000000000000;
  v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
  v5 = *(unsigned int *)(a1 + 36);
  v6 = *(_OWORD *)(a1 + 76);
  v13[0] = *(_OWORD *)(a1 + 60);
  v13[1] = v6;
  AU = IPCAUServer::FindAU((IPCAUServer *)v13, v4);
  if (!AU)
  {
    v10 = -50;
LABEL_26:
    *(_DWORD *)(a2 + 32) = v10;
    goto LABEL_8;
  }
  v8 = AU;
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 68) = 0;
  if (kLocalInterAppAudioScope)
  {
    v9 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_17;
  }
  else
  {
    v9 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "IPCAUServer.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1067;
    *(_WORD *)&buf[18] = 2048;
    v21 = v8;
    _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", buf, 0x1Cu);
  }
LABEL_17:
  *(_QWORD *)buf = &off_24CA949C8;
  *(_QWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[16] = 0;
  LOBYTE(v21) = 1;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v8 + 40))(v8, v5, a2 + 60, a2 + 64, a2 + 68, a2 + 76, a2 + 72, buf, a2 + 40);
  if (!v10)
    *(_DWORD *)(a2 + 28) = *(_DWORD *)&buf[16];
  if (kLocalInterAppAudioScope)
  {
    v11 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_25;
  }
  else
  {
    v11 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v14 = 136315650;
    v15 = "IPCAUServer.cpp";
    v16 = 1024;
    v17 = 1073;
    v18 = 1024;
    v19 = v10;
    _os_log_impl(&dword_210A23000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %d", v14, 0x18u);
  }
LABEL_25:
  if (v10)
    goto LABEL_26;
  *(_QWORD *)(a2 + 52) = *MEMORY[0x24BDAC470];
  v12 = 40 * *(_DWORD *)(a2 + 72) + 76;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 24) = 2;
}

void _XUninitialize(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  const audit_token_t *v5;
  __int128 v6;
  uint64_t AU;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  _OWORD v11[2];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    v3 = -309;
    goto LABEL_7;
  }
  v5 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 72);
  v11[0] = *(_OWORD *)(a1 + 56);
  v11[1] = v6;
  AU = IPCAUServer::FindAU((IPCAUServer *)v11, v5);
  if (!AU)
  {
    v3 = -50;
    goto LABEL_7;
  }
  v8 = AU;
  if (!kLocalInterAppAudioScope)
  {
    v9 = MEMORY[0x24BDACB70];
LABEL_14:
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      v13 = "IPCAUServer.cpp";
      v14 = 1024;
      v15 = 1083;
      v16 = 2048;
      v17 = v8;
      _os_log_impl(&dword_210A23000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", buf, 0x1Cu);
    }
    goto LABEL_16;
  }
  v9 = *(NSObject **)kLocalInterAppAudioScope;
  if (*(_QWORD *)kLocalInterAppAudioScope)
    goto LABEL_14;
LABEL_16:
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  if (kLocalInterAppAudioScope)
  {
    v10 = *(NSObject **)kLocalInterAppAudioScope;
    if (!*(_QWORD *)kLocalInterAppAudioScope)
      goto LABEL_7;
  }
  else
  {
    v10 = MEMORY[0x24BDACB70];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v13 = "IPCAUServer.cpp";
    v14 = 1024;
    v15 = 1085;
    v16 = 1024;
    LODWORD(v17) = v3;
    _os_log_impl(&dword_210A23000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %d", buf, 0x18u);
  }
LABEL_7:
  v4 = (_QWORD *)MEMORY[0x24BDAC470];
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *v4;
}

uint64_t _XReset(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t AU;
  _OWORD v9[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 44)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 44) || *(_DWORD *)(a1 + 48) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(unsigned int *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 80);
    v9[0] = *(_OWORD *)(a1 + 64);
    v9[1] = v7;
    AU = IPCAUServer::FindAU((IPCAUServer *)v9, v4);
    if (AU)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)AU + 56))(AU, v5, v6);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XGetPropertyInfo(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const audit_token_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x24BDAC470];
    goto LABEL_8;
  }
  v5 = (const audit_token_t *)*(unsigned int *)(result + 32);
  v6 = *(unsigned int *)(result + 36);
  v7 = *(unsigned int *)(result + 40);
  v8 = *(unsigned int *)(result + 44);
  v9 = *(_OWORD *)(result + 84);
  v10[0] = *(_OWORD *)(result + 68);
  v10[1] = v9;
  result = IPCAUServer::FindAU((IPCAUServer *)v10, v5);
  if (!result)
  {
    v3 = -50;
    goto LABEL_7;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, v6, v7, v8, a2 + 36, a2 + 40);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x24BDAC470];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_8:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

void _XGetProperty(uint64_t a1, uint64_t a2)
{
  int v3;
  const audit_token_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  __int128 v9;
  uint64_t AU;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  const UInt8 *BytePtr;
  vm_size_t Length;
  int v18;
  uint64_t v19;
  std::bad_alloc *exception;
  std::bad_alloc *v21;
  _OWORD v22[2];
  int v23;
  _QWORD v24[3];
  CFDataRef *v25;
  int v26;
  _QWORD v27[2];
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 52)
  {
    v3 = -304;
    goto LABEL_7;
  }
  v23 = 0;
  if (!*(_DWORD *)(a1 + 52) && *(_DWORD *)(a1 + 56) > 0x1Fu)
  {
    *(_DWORD *)(a2 + 52) = 256;
    *(_DWORD *)(a2 + 36) = 16777473;
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(unsigned int *)(a1 + 40);
    v7 = *(unsigned int *)(a1 + 44);
    v8 = *(unsigned int *)(a1 + 48);
    v9 = *(_OWORD *)(a1 + 88);
    v22[0] = *(_OWORD *)(a1 + 72);
    v22[1] = v9;
    AU = IPCAUServer::FindAU((IPCAUServer *)v22, v4);
    if (!AU)
    {
      v15 = -50;
LABEL_28:
      *(_DWORD *)(a2 + 32) = v15;
      goto LABEL_8;
    }
    v11 = AU;
    v12 = *(_QWORD *)(a2 + 28);
    v27[0] = &off_24CA90EE8;
    v27[1] = 256;
    v28 = v12 != 0;
    v29 = a2 + 56;
    v30 = a2 + 52;
    v31 = a2 + 28;
    v32 = &v23;
    *(_DWORD *)(a2 + 52) = 0;
    *(_QWORD *)(a2 + 28) = 0;
    v23 = 0;
    v13 = malloc_type_malloc(v8, 0x7C51E058uLL);
    v14 = v13;
    if ((_DWORD)v8 && !v13)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v21 = std::bad_alloc::bad_alloc(exception);
    }
    v26 = v8;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, int *))(*(_QWORD *)v11 + 72))(v11, v5, v6, v7, v13, &v26);
    if (v15)
    {
LABEL_25:
      if (v14)
        free(v14);
      MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v27);
      if (!v15)
      {
        v18 = v23;
        *(_DWORD *)(a2 + 40) = v23;
        *(_QWORD *)(a2 + 44) = *MEMORY[0x24BDAC470];
        v19 = (*(_DWORD *)(a2 + 52) + 3) & 0xFFFFFFFC;
        *(_DWORD *)(a2 + 4) = v19 + 60;
        *(_DWORD *)(a2 + v19 + 56) = v18;
        *(_DWORD *)a2 |= 0x80000000;
        *(_DWORD *)(a2 + 24) = 1;
        return;
      }
      goto LABEL_28;
    }
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v24, 0);
    v24[0] = &off_24CA91EE0;
    PropertyMarshaller::Serialize();
    if (v25 && *v25)
    {
      BytePtr = CFDataGetBytePtr(*v25);
      if (v25 && *v25)
      {
        Length = CFDataGetLength(*v25);
LABEL_22:
        v15 = MIGVariableLengthRefs::Write((MIGVariableLengthRefs *)v27, BytePtr, Length);
        if (!v15)
          v28 = 0;
        PropertyMarshaller::~PropertyMarshaller((PropertyMarshaller *)v24);
        goto LABEL_25;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_22;
  }
  v3 = -309;
LABEL_7:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
}

void sub_210AFAA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  if (v22)
    free(v22);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)&a22);
  _Unwind_Resume(a1);
}

uint64_t _XSetProperty(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  const audit_token_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  __int128 v14;
  _OWORD v15[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v3 = -304;
  if (*(_DWORD *)(result + 24) == 1)
  {
    v4 = *(unsigned int *)(result + 4);
    if (v4 >= 0x4C && v4 <= 0x14C)
    {
      if (*(_BYTE *)(result + 39) != 1)
        goto LABEL_15;
      v5 = *(_DWORD *)(result + 68);
      if (v5 > 0x100)
      {
LABEL_2:
        v3 = -304;
        goto LABEL_3;
      }
      v3 = -304;
      if ((int)v4 - 76 >= v5)
      {
        v6 = (v5 + 3) & 0xFFFFFFFC;
        if ((_DWORD)v4 == v6 + 76)
        {
          v7 = *(_DWORD *)(result + 40);
          if (v7 == *(_DWORD *)(result + v6 + 72))
          {
            v8 = ((v4 + 3) & 0x1FFFFFFFCLL) + result;
            if (*(_DWORD *)v8 || *(_DWORD *)(v8 + 4) < 0x20u)
            {
              v3 = -309;
            }
            else
            {
              v9 = (const audit_token_t *)*(unsigned int *)(result + 52);
              v10 = *(unsigned int *)(result + 56);
              v11 = *(unsigned int *)(result + 60);
              v12 = *(unsigned int *)(result + 64);
              v13 = *(const void **)(result + 28);
              v14 = *(_OWORD *)(v8 + 36);
              v15[0] = *(_OWORD *)(v8 + 20);
              v15[1] = v14;
              result = IPCAUServer_SetProperty((IPCAUServer *)v15, v9, v10, v11, v12, (const void *)(result + 72), v5, v13, v7);
              v3 = result;
            }
            goto LABEL_3;
          }
LABEL_15:
          v3 = -300;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XAddPropertyListener(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t AU;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(_OWORD *)(a1 + 76);
    v8[0] = *(_OWORD *)(a1 + 60);
    v8[1] = v6;
    AU = IPCAUServer::FindAU((IPCAUServer *)v8, v4);
    if (AU)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)AU + 136))(AU, v5);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XRemovePropertyListener(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t AU;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 40)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 40) || *(_DWORD *)(a1 + 44) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(_OWORD *)(a1 + 76);
    v8[0] = *(_OWORD *)(a1 + 60);
    v8[1] = v6;
    AU = IPCAUServer::FindAU((IPCAUServer *)v8, v4);
    if (AU)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)AU + 144))(AU, v5);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

void _XGetChangedProperties(uint64_t a1, uint64_t a2)
{
  int v3;
  const audit_token_t *v4;
  __int128 v5;
  uint64_t AU;
  uint64_t v7;
  uint64_t v8;
  const UInt8 *BytePtr;
  vm_size_t Length;
  int v11;
  int v12;
  uint64_t v13;
  _OWORD v14[2];
  int v15;
  CFDataRef theData;
  _QWORD v17[2];
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 36) && *(_DWORD *)(a1 + 40) > 0x1Fu)
  {
    *(_DWORD *)(a2 + 52) = 256;
    *(_DWORD *)(a2 + 36) = 16777473;
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v14[0] = *(_OWORD *)(a1 + 56);
    v14[1] = v5;
    AU = IPCAUServer::FindAU((IPCAUServer *)v14, v4);
    if (!AU)
    {
      v11 = -50;
LABEL_19:
      *(_DWORD *)(a2 + 32) = v11;
      goto LABEL_8;
    }
    v7 = AU;
    v8 = *(_QWORD *)(a2 + 28);
    v17[0] = &off_24CA90EE8;
    v17[1] = 256;
    v18 = v8 != 0;
    v19 = a2 + 56;
    v20 = a2 + 52;
    v21 = a2 + 28;
    v22 = &v15;
    *(_DWORD *)(a2 + 52) = 0;
    *(_QWORD *)(a2 + 28) = 0;
    v15 = 0;
    CASerializer::CASerializer((CASerializer *)&theData, 0);
    v23 = -1431655765 * ((*(_QWORD *)(v7 + 208) - *(_QWORD *)(v7 + 200)) >> 2);
    CASerializer::Write((CASerializer *)&theData, &v23);
    CASerializer::Write((CASerializer *)&theData, *(const void **)(v7 + 200));
    *(_QWORD *)(v7 + 208) = *(_QWORD *)(v7 + 200);
    if (theData)
    {
      BytePtr = CFDataGetBytePtr(theData);
      if (theData)
      {
        Length = CFDataGetLength(theData);
LABEL_17:
        v11 = MIGVariableLengthRefs::Write((MIGVariableLengthRefs *)v17, BytePtr, Length);
        if (!v11)
        {
          v18 = 0;
          MEMORY[0x212BCD6E0](&theData);
          MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v17);
          v12 = v15;
          *(_DWORD *)(a2 + 40) = v15;
          *(_QWORD *)(a2 + 44) = *MEMORY[0x24BDAC470];
          v13 = (*(_DWORD *)(a2 + 52) + 3) & 0xFFFFFFFC;
          *(_DWORD *)(a2 + 4) = v13 + 60;
          *(_DWORD *)(a2 + v13 + 56) = v12;
          *(_DWORD *)a2 |= 0x80000000;
          *(_DWORD *)(a2 + 24) = 1;
          return;
        }
        MEMORY[0x212BCD6E0](&theData);
        MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)v17);
        goto LABEL_19;
      }
    }
    else
    {
      BytePtr = 0;
    }
    Length = 0;
    goto LABEL_17;
  }
  v3 = -309;
LABEL_7:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_8:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
}

void sub_210AFAEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)va);
  _Unwind_Resume(a1);
}

uint64_t _XGetParameter(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const audit_token_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v10[2];

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 48)
  {
    v3 = -304;
    goto LABEL_7;
  }
  if (*(_DWORD *)(result + 48) || *(_DWORD *)(result + 52) <= 0x1Fu)
  {
    v3 = -309;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x24BDAC470];
    goto LABEL_8;
  }
  v5 = (const audit_token_t *)*(unsigned int *)(result + 32);
  v6 = *(unsigned int *)(result + 36);
  v7 = *(unsigned int *)(result + 40);
  v8 = *(unsigned int *)(result + 44);
  v9 = *(_OWORD *)(result + 84);
  v10[0] = *(_OWORD *)(result + 68);
  v10[1] = v9;
  result = IPCAUServer::FindAU((IPCAUServer *)v10, v5);
  if (!result)
  {
    v3 = -50;
    goto LABEL_7;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, v6, v7, v8, a2 + 36);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x24BDAC470];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_8:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XSetParameter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  __int128 v10;
  uint64_t AU;
  _OWORD v12[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 56)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(unsigned int *)(a1 + 40);
    v7 = *(unsigned int *)(a1 + 44);
    v8 = *(float *)(a1 + 48);
    v9 = *(unsigned int *)(a1 + 52);
    v10 = *(_OWORD *)(a1 + 92);
    v12[0] = *(_OWORD *)(a1 + 76);
    v12[1] = v10;
    AU = IPCAUServer::FindAU((IPCAUServer *)v12, v4);
    if (AU)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)AU + 96))(AU, v5, v6, v7, v9, v8);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XConnectInput(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t AU;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 84)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 84) || *(_DWORD *)(a1 + 88) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 36);
    v6 = *(unsigned __int8 *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 120);
    v12[0] = *(_OWORD *)(a1 + 104);
    v12[1] = v7;
    v8 = *(_OWORD *)(a1 + 60);
    v10[0] = *(_OWORD *)(a1 + 44);
    v10[1] = v8;
    v11 = *(_QWORD *)(a1 + 76);
    AU = IPCAUServer::FindAU((IPCAUServer *)v12, v4);
    if (AU)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)AU + 120))(AU, v5, v6, v10);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XRender(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const audit_token_t *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _opaque_pthread_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];
  _OWORD v14[2];

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 100)
  {
    v3 = -304;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_9;
  }
  if (*(_DWORD *)(result + 100) || *(_DWORD *)(result + 104) <= 0x1Fu)
  {
    v3 = -309;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    v4 = *MEMORY[0x24BDAC470];
    goto LABEL_10;
  }
  v5 = (const audit_token_t *)*(unsigned int *)(result + 48);
  v6 = (_DWORD *)(result + 52);
  v7 = *(unsigned int *)(result + 88);
  v8 = *(unsigned int *)(result + 92);
  v9 = (_opaque_pthread_t *)*(unsigned int *)(result + 96);
  v10 = *(unsigned int *)(result + 28);
  v11 = *(_OWORD *)(result + 136);
  v14[0] = *(_OWORD *)(result + 120);
  v14[1] = v11;
  v12 = *(_OWORD *)(result + 72);
  v13[0] = *(_OWORD *)(result + 56);
  v13[1] = v12;
  result = IPCAUServer_Render((IPCAUServer *)v14, v5, result + 52, (uint64_t)v13, v7, v8, v9, v10);
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x24BDAC470];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 36) = *v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XDoControlMessages(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const audit_token_t *v4;
  __int128 v5;
  AUServerInstanceBase *AU;
  _OWORD v7[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 || *(_DWORD *)(a1 + 4) != 36)
  {
    result = 4294966992;
  }
  else if (*(_DWORD *)(a1 + 36) || *(_DWORD *)(a1 + 40) < 0x20u)
  {
    result = 4294966987;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 72);
    v7[0] = *(_OWORD *)(a1 + 56);
    v7[1] = v5;
    AU = (AUServerInstanceBase *)IPCAUServer::FindAU((IPCAUServer *)v7, v4);
    if (AU)
      result = AUServerInstanceBase::DoControlMessages(AU);
    else
      result = 4294967246;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XSysEx(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  const audit_token_t *v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];

  if ((*(_DWORD *)a1 & 0x80000000) != 0 && *(_DWORD *)(a1 + 24) == 1 && *(_DWORD *)(a1 + 4) == 60)
  {
    if (*(_BYTE *)(a1 + 39) == 1 && (v3 = *(unsigned int *)(a1 + 40), (_DWORD)v3 == *(_DWORD *)(a1 + 56)))
    {
      if (*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64) < 0x20u)
      {
        result = 4294966987;
      }
      else
      {
        v5 = (const audit_token_t *)*(unsigned int *)(a1 + 52);
        v6 = *(_QWORD *)(a1 + 28);
        v7 = *(_OWORD *)(a1 + 96);
        v8[0] = *(_OWORD *)(a1 + 80);
        v8[1] = v7;
        result = IPCAUServer_SysEx((IPCAUServer *)v8, v5, v6, v3);
      }
    }
    else
    {
      result = 4294966996;
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t _XStopIOThread(uint64_t result, uint64_t a2)
{
  int v3;
  const audit_token_t *v4;
  __int128 v5;
  _OWORD v6[2];

  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 36)
  {
    v3 = -304;
  }
  else if (*(_DWORD *)(result + 36) || *(_DWORD *)(result + 40) < 0x20u)
  {
    v3 = -309;
  }
  else
  {
    v4 = (const audit_token_t *)*(unsigned int *)(result + 32);
    v5 = *(_OWORD *)(result + 72);
    v6[0] = *(_OWORD *)(result + 56);
    v6[1] = v5;
    result = IPCAUServer::FindAU((IPCAUServer *)v6, v4);
    if (result)
    {
      v3 = 0;
      *(_BYTE *)(result + 56) = 1;
    }
    else
    {
      v3 = -50;
    }
  }
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
  return result;
}

uint64_t IPCAudioUnit_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 90218) >= 0xFFFFFFEE
    && (v5 = (void (*)(void))IPCAUServer_IPCAudioUnit_subsystem[5 * (v4 - 90200) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x24BDAC470];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetPropertyInfo(ausdk::MusicDeviceBase *this, int a2, int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  uint64_t result;

  if (a2 != 1000)
    return 4294956417;
  if (a3)
    return 4294956430;
  result = 0;
  *a5 = 4;
  *a6 = 0;
  return result;
}

uint64_t ausdk::MusicDeviceBase::GetProperty(ausdk::MusicDeviceBase *this, int a2, int a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 != 1000)
    return 4294956417;
  if (a3)
    return 4294956430;
  v10 = v5;
  v11 = v6;
  v9 = 0;
  result = (*(uint64_t (**)(ausdk::MusicDeviceBase *, int *))(*(_QWORD *)this + 592))(this, &v9);
  *a5 = v9;
  return result;
}

uint64_t ausdk::MusicDeviceBase::SetProperty(ausdk::MusicDeviceBase *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 4294956417;
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _DWORD v6[3];
  uint64_t v7;

  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  v7 = 0;
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD *))(*(_QWORD *)this + 480))(this, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(ausdk::MusicDeviceBase *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, a2, a3, a5);
}

uint64_t ausdk::MusicDeviceBase::GetInstrumentCount(ausdk::MusicDeviceBase *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t `non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOn(ausdk::MusicDeviceBase *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _DWORD v6[3];
  uint64_t v7;

  v6[0] = 2;
  *(float *)&v6[1] = (float)a3;
  *(float *)&v6[2] = (float)a4;
  v7 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD *))(*((_QWORD *)this - 66) + 480))((char *)this - 528, 0xFFFFFFFFLL, a2, 0, a5, v6);
}

uint64_t `non-virtual thunk to'ausdk::MusicDeviceBase::HandleNoteOff(ausdk::MusicDeviceBase *this, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*((_QWORD *)this - 66) + 488))((char *)this - 528, a2, a3, a5);
}

uint64_t ausdk::AUElement::GetParameterList(uint64_t this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;

  if (*(_BYTE *)(this + 40))
  {
    v2 = *(_QWORD *)(this + 56) - *(_QWORD *)(this + 48);
    if (v2)
    {
      v3 = 0;
      v4 = 4 * (v2 >> 2);
      do
      {
        a2[v3] = v3;
        ++v3;
        v4 -= 4;
      }
      while (v4);
    }
  }
  else
  {
    v5 = *(unsigned int **)(this + 16);
    v6 = *(unsigned int **)(this + 24);
    while (v5 != v6)
    {
      v7 = *v5;
      v5 += 2;
      *a2++ = v7;
    }
  }
  return this;
}

void ausdk::AUElement::SetScheduledEvent(ausdk::AUElement *this, unsigned int a2, const AudioUnitParameterEvent *a3, unsigned int a4, unsigned int a5, char a6)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a3->eventType == kParameterEvent_Immediate)
  {
    ausdk::AUElement::SetParameter(this, a2, a3->eventValues.immediate.value, a6);
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    v7 = *((_QWORD *)this + 1);
    v8 = (_QWORD *)(v7 + 440);
    if (*(char *)(v7 + 463) < 0)
      v8 = (_QWORD *)*v8;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_210A23000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Warning: %s was passed a ramped parameter event but does not implement them. Ignoring.", (uint8_t *)&v9, 0xCu);
  }
}

void ausdk::AUIOElement::GetChannelLayoutTags(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ausdk::AUIOElement::GetAudioChannelLayout(ausdk::AUIOElement *this, AudioChannelLayout *a2, BOOL *a3)
{
  ausdk::AUChannelLayout *v4;
  int v5;
  uint64_t v6;

  *a3 = 1;
  v4 = (ausdk::AUChannelLayout *)*((_QWORD *)this + 15);
  if (!ausdk::AUChannelLayout::NumberChannels(v4, a2))
    return 0;
  v5 = *((_DWORD *)v4 + 2);
  v6 = (20 * v5 + 12);
  if (a2 && 20 * v5 != -12)
    memcpy(a2, v4, (20 * v5 + 12));
  return v6;
}

uint64_t ausdk::AUIOElement::RemoveAudioChannelLayout(ausdk::AUIOElement *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  __int128 v6;

  std::vector<AudioChannelLayout>::vector(&v5, 1);
  v2 = v5;
  *v5 = 0;
  *((_DWORD *)v2 + 2) = 0;
  v3 = (void *)*((_QWORD *)this + 15);
  if (v3)
  {
    *((_QWORD *)this + 16) = v3;
    operator delete(v3);
    v2 = v5;
  }
  *((_QWORD *)this + 15) = v2;
  *((_OWORD *)this + 8) = v6;
  return 0;
}

_QWORD *std::vector<AudioChannelLayout>::vector(_QWORD *a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v4 = 32 * a2;
    v5 = (char *)operator new(32 * a2);
    *a1 = v5;
    v6 = &v5[32 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

BOOL ausdk::AUScope::HasElementWithName(ausdk::AUScope *this)
{
  unint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  for (i = 0; ; ++i)
  {
    v3 = *((_QWORD *)this + 5);
    if (v3)
      LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    else
      v4 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
    if (i >= v4)
      break;
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 32))(v5, i);
      if (!v6)
        continue;
    }
    else
    {
      v7 = *((_QWORD *)this + 2);
      if (i >= (*((_QWORD *)this + 3) - v7) >> 3)
        continue;
      v6 = *(_QWORD *)(v7 + 8 * i);
      if (!v6)
        continue;
    }
    if (*(_QWORD *)(v6 + 72))
      return i < v4;
  }
  return i < v4;
}

CFTypeRef ausdk::Owned<__CFString const*>::retainRef(CFTypeRef result)
{
  if (result)
    return CFRetain(result);
  return result;
}

void ausdk::Owned<__CFDictionary *>::releaseRef(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void ausdk::AUScope::RestoreElementNames(ausdk::AUScope *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  uint64_t v5;
  uint64_t v6;
  CFIndex Count;
  unint64_t v8;
  void *v9;
  uint64_t i;
  const void *Value;
  const void *v12;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  ausdk::AUScope *v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  ausdk::AUScope *v30;
  unsigned int v31;
  char buffer[16];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *((_QWORD *)a2 + 5);
  if (v5)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = (*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3;
  Count = CFDictionaryGetCount(a3);
  v8 = Count & ~(Count >> 63);
  v30 = this;
  if (Count < 1)
  {
    v9 = 0;
  }
  else
  {
    if (v8 >> 61)
      std::vector<void const*>::__throw_length_error[abi:ne180100]();
    v9 = operator new(8 * v8);
    bzero(v9, 8 * v8);
  }
  CFDictionaryGetKeysAndValues(a3, (const void **)v9, 0);
  if (Count >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      v31 = 0;
      *(_OWORD *)buffer = 0u;
      v33 = 0u;
      CFStringGetCString(*((CFStringRef *)v9 + i), buffer, 32, 0x600u);
      if (sscanf(buffer, "%u", &v31))
      {
        if (v31 < v6)
        {
          Value = CFDictionaryGetValue(a3, *((const void **)v9 + i));
          v12 = Value;
          if (Value)
          {
            v13 = CFGetTypeID(Value);
            if (v13 == CFStringGetTypeID())
            {
              v14 = *((_QWORD *)a2 + 5);
              if (v14)
              {
                v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v31);
                if (v15)
                  goto LABEL_16;
              }
              else
              {
                v20 = *((_QWORD *)a2 + 2);
                if (v31 < (unint64_t)((*((_QWORD *)a2 + 3) - v20) >> 3))
                {
                  v15 = *(_QWORD *)(v20 + 8 * v31);
                  if (v15)
                  {
LABEL_16:
                    ausdk::Owned<__CFString const*>::operator=((const void **)(v15 + 72), v12);
                    v16 = v30;
                    v18 = (unsigned int *)*((_QWORD *)v30 + 1);
                    v17 = *((_QWORD *)v30 + 2);
                    if ((unint64_t)v18 >= v17)
                    {
                      v21 = *(unsigned int **)v30;
                      v22 = ((uint64_t)v18 - *(_QWORD *)v30) >> 2;
                      v23 = v22 + 1;
                      if ((unint64_t)(v22 + 1) >> 62)
                        std::vector<void const*>::__throw_length_error[abi:ne180100]();
                      v24 = v17 - (_QWORD)v21;
                      if (v24 >> 1 > v23)
                        v23 = v24 >> 1;
                      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                        v25 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v25 = v23;
                      if (v25)
                        v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v25);
                      else
                        v26 = 0;
                      v27 = (unsigned int *)(v25 + 4 * v22);
                      *v27 = v31;
                      v19 = v27 + 1;
                      while (v18 != v21)
                      {
                        v28 = *--v18;
                        *--v27 = v28;
                      }
                      *(_QWORD *)v30 = v27;
                      *((_QWORD *)v30 + 1) = v19;
                      *((_QWORD *)v30 + 2) = v25 + 4 * v26;
                      if (v21)
                        operator delete(v21);
                      v16 = v30;
                    }
                    else
                    {
                      *v18 = v31;
                      v19 = v18 + 1;
                    }
                    *((_QWORD *)v16 + 1) = v19;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v9)
    operator delete(v9);
}

