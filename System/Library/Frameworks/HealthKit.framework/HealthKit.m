void _HKInitializeLogging()
{
  if (_HKInitializeLogging_onceToken != -1)
    dispatch_once(&_HKInitializeLogging_onceToken, &__block_literal_global_28);
}

dispatch_queue_t HKCreateSerialDispatchQueue(void *a1, void *a2)
{
  return HKCreateSerialDispatchQueueWithQOSClass(a1, a2, QOS_CLASS_UNSPECIFIED);
}

dispatch_queue_t HKCreateSerialDispatchQueueWithQOSClass(void *a1, void *a2, dispatch_qos_class_t a3)
{
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  dispatch_queue_t v12;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v6, a3, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = a2;
  v9 = a1;

  dispatch_queue_attr_make_with_overcommit();
  v10 = objc_claimAutoreleasedReturnValue();

  v11 = (const char *)HKDispatchQueueName(v9, v8);
  v12 = dispatch_queue_create(v11, v10);

  return v12;
}

uint64_t HKDispatchQueueName(void *a1, void *a2)
{
  id v3;
  __CFString *v4;
  int v5;
  void *v6;
  objc_class *v7;
  uint64_t v8;
  id v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_msgSend((id)objc_opt_class(), "isEqual:", v3);
    v6 = (void *)MEMORY[0x1E0CB3940];
    v7 = (objc_class *)objc_opt_class();
    NSStringFromClass(v7);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (id)v8;
    v10 = CFSTR(".");
    v11 = &stru_1E37FD4C0;
    if (v4)
      v11 = v4;
    else
      v10 = &stru_1E37FD4C0;
    if (v5)
      objc_msgSend(v6, "stringWithFormat:", CFSTR("com.apple.HealthKit.%@%@%@"), v8, v10, v11, v16);
    else
      objc_msgSend(v6, "stringWithFormat:", CFSTR("com.apple.HealthKit.%@%@%@.%p"), v8, v10, v11, v3);
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v13 = objc_msgSend(v14, "UTF8String");

  }
  else
  {
    v12 = &stru_1E37FD4C0;
    if (v4)
      v12 = v4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("com.apple.HealthKit.%@"), v12);
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v13 = objc_msgSend(v9, "UTF8String");
  }

  return v13;
}

void sub_19A0EA434(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&_uniquedRootUnitFromDefinition__lock);
  objc_exception_rethrow();
}

void sub_19A0EA44C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id _HKActivityCacheDateComponentsFromCacheIndex(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _HKCachedImmutableGregorianCalendarWithUTCTimeZone();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _HKActivityCacheDateComponentsFromDate(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _HKActivityCacheDateComponentsFromDate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v8[5];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v3 = a1;
  v4 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__40;
  v15 = __Block_byref_object_dispose__40;
  v16 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___HKActivityCacheDateComponentsFromDate_block_invoke;
  v8[3] = &unk_1E37F2430;
  v10 = &v11;
  v8[4] = v4;
  v5 = v3;
  v9 = v5;
  HKWithAutoreleasePool(0, v8);
  v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_19A0EAACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HKHealthStoreClientInterface()
{
  if (HKHealthStoreClientInterface_onceToken != -1)
    dispatch_once(&HKHealthStoreClientInterface_onceToken, &__block_literal_global_126);
  return (id)HKHealthStoreClientInterface_interface;
}

void sub_19A0EE628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _HKDerivedCacheIndexAndDateComponents(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[8];
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "calendarIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0C996C8]);

  if ((v8 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int64_t _HKDerivedCacheIndexAndDateComponents(const NSCalendar *const __strong, NSDateComponents *const __strong, NSDateComponents * _Nullable __autoreleasing * _Nullable)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("HKActivityCache.m"), 1009, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("[gregorianCalendar.calendarIdentifier isEqualToString:NSCalendarIdentifierGregorian]"));

  }
  objc_msgSend(v5, "timeZone");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "secondsFromGMT");

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "int64_t _HKDerivedCacheIndexAndDateComponents(const NSCalendar *const __strong, NSDateComponents *const __strong, NSDateComponents * _Nullable __autoreleasing * _Nullable)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "timeZone");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("HKActivityCache.m"), 1010, CFSTR("%@ is not a UTC time zone"), v17);

  }
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__40;
  v28 = __Block_byref_object_dispose__40;
  v29 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = -1;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___HKDerivedCacheIndexAndDateComponents_block_invoke;
  v18[3] = &unk_1E37F2498;
  v18[4] = v6;
  v18[5] = v5;
  v19 = a3 != 0;
  v18[6] = &v24;
  v18[7] = &v20;
  HKWithAutoreleasePool(0, v18);
  if (a3)
    *a3 = objc_retainAutorelease((id)v25[5]);
  v11 = v21[3];
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);

  return v11;
}

void sub_19A0EF78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t HKFirstDayOfWeekForWeeklyGoalCalculations()
{
  if (HKFirstDayOfWeekForWeeklyGoalCalculations_onceToken != -1)
    dispatch_once(&HKFirstDayOfWeekForWeeklyGoalCalculations_onceToken, &__block_literal_global_90);
  return HKFirstDayOfWeekForWeeklyGoalCalculations_firstDayOfWeek;
}

void sub_19A0F1354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A0F1B38(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unitForStringCacheLock);
  objc_exception_rethrow();
}

void sub_19A0F1B50(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromPrivateHeartRateContext(unint64_t a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_1E37E9C98[a1];
}

void sub_19A0F24B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id HKLogSafeDescription(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (+[_HKBehavior isAppleInternalInstall](_HKBehavior, "isAppleInternalInstall"))
    objc_msgSend(v1, "description");
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@:%p>"), objc_opt_class(), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_19A0F294C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&_uniquedUnitWithPrefix_conversionConstant_rootUnit__lock);
  objc_exception_rethrow();
}

void sub_19A0F2964(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id _unitStringForUnit(void *a1, void *a2, __CFString *a3)
{
  __CFString *v5;
  id v6;
  const __CFString *v7;
  const __CFString *v8;
  void *v9;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@>"), a3);
    a3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v7 = &stru_1E37FD4C0;
  if (v5)
    v8 = v5;
  else
    v8 = &stru_1E37FD4C0;
  if (a3)
    v7 = a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@"), v8, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

const __CFString *_NSStringFromHeartbeatSequenceContext(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Breathe");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("Background");
}

id _HKMostRecentActivitySnapshotInSnapshots(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  id v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        v8 = objc_msgSend(v7, "snapshotIndex");
        if (v8 > objc_msgSend(v4, "snapshotIndex"))
        {
          v9 = v7;

          v4 = v9;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_19A0F3B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t HKWithAutoreleasePool(_QWORD *a1, void *a2)
{
  uint64_t (**v3)(id, id *);
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v10;

  v3 = a2;
  v4 = (void *)MEMORY[0x19AEC7968]();
  v10 = 0;
  v5 = v3[2](v3, &v10);
  v6 = v10;
  objc_autoreleasePoolPop(v4);
  v7 = v6;
  v8 = v7;
  if (v7)
  {
    if (a1)
      *a1 = objc_retainAutorelease(v7);
    else
      _HKLogDroppedError(v7);
  }

  return v5;
}

BOOL _HKValidDataTypeCode(unint64_t a1)
{
  return a1 < 0x13D;
}

uint64_t _HKCacheIndexFromDateComponents(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _HKCachedImmutableGregorianCalendarWithUTCTimeZone();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = _HKDerivedCacheIndexAndDateComponents(v2, v1, 0);

  return v3;
}

__CFString *HKNSOperatingSystemVersionString(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;

  v2 = a1[2];
  if (*a1 != -1 || (v3 = a1[1], v3 < 0) || v3 > 0 || v2 < 0 || v2 >= 1)
  {
    if (v2)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(".%ld"), v2);
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = &stru_1E37FD4C0;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld.%ld%@"), *a1, a1[1], v5);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = CFSTR("NSOperatingSystemVersionUnknown");
  }
  return v4;
}

HKUnit *_HKWorkoutCanonicalEnergyBurnedUnit()
{
  return +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit");
}

HKUnit *_HKWorkoutCanonicalDistanceUnit()
{
  return +[HKUnit meterUnitWithMetricPrefix:](HKUnit, "meterUnitWithMetricPrefix:", 9);
}

void sub_19A0F4674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKSourceOptionsForConnectedGymSource()
{
  return 18;
}

uint64_t _HKWorkoutGoalTypeAcceptsQuantity(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = a2;
  v4 = v3;
  switch(a1)
  {
    case 0:
      v5 = v3 == 0;
      goto LABEL_9;
    case 1:
      +[HKUnit meterUnit](HKUnit, "meterUnit");
      v7 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 2:
      +[HKUnit secondUnit](HKUnit, "secondUnit");
      v7 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 3:
      +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit");
      v7 = objc_claimAutoreleasedReturnValue();
LABEL_7:
      v6 = (void *)v7;
      break;
    default:
      v6 = 0;
      break;
  }
  v5 = objc_msgSend(v4, "isCompatibleWithUnit:", v6);

LABEL_9:
  return v5;
}

id _HKWorkoutDistanceTypeForActivityType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  __CFString **v6;

  v4 = 0;
  v5 = a1 - 1;
  v6 = HKQuantityTypeIdentifierDistanceCrossCountrySkiing;
  switch(v5)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 17:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 29:
    case 31:
    case 33:
    case 35:
    case 36:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 63:
    case 67:
    case 68:
    case 72:
    case 74:
      v6 = (__CFString **)&HKQuantityTypeIdentifierDistanceWalkingRunning;
      goto LABEL_3;
    case 12:
      v6 = (__CFString **)&HKQuantityTypeIdentifierDistanceCycling;
      goto LABEL_3;
    case 30:
      v6 = HKQuantityTypeIdentifierDistancePaddleSports;
      goto LABEL_3;
    case 34:
      v6 = HKQuantityTypeIdentifierDistanceRowing;
      goto LABEL_3;
    case 38:
      v6 = HKQuantityTypeIdentifierDistanceSkatingSports;
      goto LABEL_3;
    case 45:
      v6 = (__CFString **)&HKQuantityTypeIdentifierDistanceSwimming;
      goto LABEL_3;
    case 59:
      goto LABEL_3;
    case 60:
    case 66:
      v6 = (__CFString **)&HKQuantityTypeIdentifierDistanceDownhillSnowSports;
      goto LABEL_3;
    case 69:
    case 70:
      v6 = (__CFString **)&HKQuantityTypeIdentifierDistanceWheelchair;
LABEL_3:
      +[HKObjectType quantityTypeForIdentifier:](HKObjectType, "quantityTypeForIdentifier:", *v6, v1, v2);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t _HKWorkoutActivityTypeIsRouteable(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  unint64_t v5;

  result = 0;
  if (a1 > 45)
  {
    v5 = a1 - 46;
    if (v5 > 0x24)
      return result;
    if (((1 << v5) & 0x1003000040) == 0)
    {
      if (((1 << v5) & 0x20C000) == 0)
        return !v5 && a3 == 2;
      goto LABEL_14;
    }
    return a2 ^ 1u;
  }
  if (a1 <= 30)
  {
    if (a1 != 13)
    {
      if (a1 == 21)
      {
LABEL_14:
        if ((a2 & 1) != 0)
          return 0;
        else
          return _os_feature_enabled_impl();
      }
      if (a1 != 24)
        return result;
    }
    return a2 ^ 1u;
  }
  switch(a1)
  {
    case 31:
    case 35:
    case 39:
      goto LABEL_14;
    case 37:
      return a2 ^ 1u;
    default:
      return result;
  }
  return result;
}

uint64_t _HKWorkoutActivityTypeIsValid(uint64_t a1)
{
  _BOOL4 v1;

  v1 = (unint64_t)(a1 - 82) < 3 || a1 == 3000;
  return (unint64_t)(a1 - 1) < 0x50 || v1;
}

const __CFString *_HKWorkoutActivityNameForActivityType(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      result = CFSTR("HKWorkoutActivityTypeAmericanFootball");
      break;
    case 1:
      result = CFSTR("HKWorkoutActivityTypeArchery");
      break;
    case 2:
      result = CFSTR("HKWorkoutActivityTypeAustralianFootball");
      break;
    case 3:
      result = CFSTR("HKWorkoutActivityTypeBadminton");
      break;
    case 4:
      result = CFSTR("HKWorkoutActivityTypeBaseball");
      break;
    case 5:
      result = CFSTR("HKWorkoutActivityTypeBasketball");
      break;
    case 6:
      result = CFSTR("HKWorkoutActivityTypeBowling");
      break;
    case 7:
      result = CFSTR("HKWorkoutActivityTypeBoxing");
      break;
    case 8:
      result = CFSTR("HKWorkoutActivityTypeClimbing");
      break;
    case 9:
      result = CFSTR("HKWorkoutActivityTypeCricket");
      break;
    case 10:
      result = CFSTR("HKWorkoutActivityTypeCrossTraining");
      break;
    case 11:
      result = CFSTR("HKWorkoutActivityTypeCurling");
      break;
    case 12:
      result = CFSTR("HKWorkoutActivityTypeCycling");
      break;
    case 13:
      result = CFSTR("HKWorkoutActivityTypeDance");
      break;
    case 14:
      result = CFSTR("HKWorkoutActivityTypeDanceInspiredTraining");
      break;
    case 15:
      result = CFSTR("HKWorkoutActivityTypeElliptical");
      break;
    case 16:
      result = CFSTR("HKWorkoutActivityTypeEquestrianSports");
      break;
    case 17:
      result = CFSTR("HKWorkoutActivityTypeFencing");
      break;
    case 18:
      result = CFSTR("HKWorkoutActivityTypeFishing");
      break;
    case 19:
      result = CFSTR("HKWorkoutActivityTypeFunctionalStrengthTraining");
      break;
    case 20:
      result = CFSTR("HKWorkoutActivityTypeGolf");
      break;
    case 21:
      result = CFSTR("HKWorkoutActivityTypeGymnastics");
      break;
    case 22:
      result = CFSTR("HKWorkoutActivityTypeHandball");
      break;
    case 23:
      result = CFSTR("HKWorkoutActivityTypeHiking");
      break;
    case 24:
      result = CFSTR("HKWorkoutActivityTypeHockey");
      break;
    case 25:
      result = CFSTR("HKWorkoutActivityTypeHunting");
      break;
    case 26:
      result = CFSTR("HKWorkoutActivityTypeLacrosse");
      break;
    case 27:
      result = CFSTR("HKWorkoutActivityTypeMartialArts");
      break;
    case 28:
      result = CFSTR("HKWorkoutActivityTypeMindAndBody");
      break;
    case 29:
      result = CFSTR("HKWorkoutActivityTypeMixedMetabolicCardioTraining");
      break;
    case 30:
      result = CFSTR("HKWorkoutActivityTypePaddleSports");
      break;
    case 31:
      result = CFSTR("HKWorkoutActivityTypePlay");
      break;
    case 32:
      result = CFSTR("HKWorkoutActivityTypePreparationAndRecovery");
      break;
    case 33:
      result = CFSTR("HKWorkoutActivityTypeRacquetball");
      break;
    case 34:
      result = CFSTR("HKWorkoutActivityTypeRowing");
      break;
    case 35:
      result = CFSTR("HKWorkoutActivityTypeRugby");
      break;
    case 36:
      result = CFSTR("HKWorkoutActivityTypeRunning");
      break;
    case 37:
      result = CFSTR("HKWorkoutActivityTypeSailing");
      break;
    case 38:
      result = CFSTR("HKWorkoutActivityTypeSkatingSports");
      break;
    case 39:
      result = CFSTR("HKWorkoutActivityTypeSnowSports");
      break;
    case 40:
      result = CFSTR("HKWorkoutActivityTypeSoccer");
      break;
    case 41:
      result = CFSTR("HKWorkoutActivityTypeSoftball");
      break;
    case 42:
      result = CFSTR("HKWorkoutActivityTypeSquash");
      break;
    case 43:
      result = CFSTR("HKWorkoutActivityTypeStairClimbing");
      break;
    case 44:
      result = CFSTR("HKWorkoutActivityTypeSurfingSports");
      break;
    case 45:
      result = CFSTR("HKWorkoutActivityTypeSwimming");
      break;
    case 46:
      result = CFSTR("HKWorkoutActivityTypeTableTennis");
      break;
    case 47:
      result = CFSTR("HKWorkoutActivityTypeTennis");
      break;
    case 48:
      result = CFSTR("HKWorkoutActivityTypeTrackAndField");
      break;
    case 49:
      result = CFSTR("HKWorkoutActivityTypeTraditionalStrengthTraining");
      break;
    case 50:
      result = CFSTR("HKWorkoutActivityTypeVolleyball");
      break;
    case 51:
      result = CFSTR("HKWorkoutActivityTypeWalking");
      break;
    case 52:
      result = CFSTR("HKWorkoutActivityTypeWaterFitness");
      break;
    case 53:
      result = CFSTR("HKWorkoutActivityTypeWaterPolo");
      break;
    case 54:
      result = CFSTR("HKWorkoutActivityTypeWaterSports");
      break;
    case 55:
      result = CFSTR("HKWorkoutActivityTypeWrestling");
      break;
    case 56:
      result = CFSTR("HKWorkoutActivityTypeYoga");
      break;
    case 57:
      result = CFSTR("HKWorkoutActivityTypeBarre");
      break;
    case 58:
      result = CFSTR("HKWorkoutActivityTypeCoreTraining");
      break;
    case 59:
      result = CFSTR("HKWorkoutActivityTypeCrossCountrySkiing");
      break;
    case 60:
      result = CFSTR("HKWorkoutActivityTypeDownhillSkiing");
      break;
    case 61:
      result = CFSTR("HKWorkoutActivityTypeFlexibility");
      break;
    case 62:
      result = CFSTR("HKWorkoutActivityTypeHighIntensityIntervalTraining");
      break;
    case 63:
      result = CFSTR("HKWorkoutActivityTypeJumpRope");
      break;
    case 64:
      result = CFSTR("HKWorkoutActivityTypeKickboxing");
      break;
    case 65:
      result = CFSTR("HKWorkoutActivityTypePilates");
      break;
    case 66:
      result = CFSTR("HKWorkoutActivityTypeSnowboarding");
      break;
    case 67:
      result = CFSTR("HKWorkoutActivityTypeStairs");
      break;
    case 68:
      result = CFSTR("HKWorkoutActivityTypeStepTraining");
      break;
    case 69:
      result = CFSTR("HKWorkoutActivityTypeWheelchairWalkPace");
      break;
    case 70:
      result = CFSTR("HKWorkoutActivityTypeWheelchairRunPace");
      break;
    case 71:
      result = CFSTR("HKWorkoutActivityTypeTaiChi");
      break;
    case 72:
      result = CFSTR("HKWorkoutActivityTypeMixedCardio");
      break;
    case 73:
      result = CFSTR("HKWorkoutActivityTypeHandCycling");
      break;
    case 74:
      result = CFSTR("HKWorkoutActivityTypeDiscSports");
      break;
    case 75:
      result = CFSTR("HKWorkoutActivityTypeFitnessGaming");
      break;
    case 76:
      result = CFSTR("HKWorkoutActivityTypeCardioDance");
      break;
    case 77:
      result = CFSTR("HKWorkoutActivityTypeSocialDance");
      break;
    case 78:
      result = CFSTR("HKWorkoutActivityTypePickleball");
      break;
    case 79:
      result = CFSTR("HKWorkoutActivityTypeCooldown");
      break;
    case 80:
      return result;
    case 81:
      result = CFSTR("HKWorkoutActivityTypeSwimBikeRun");
      break;
    case 82:
      result = CFSTR("HKWorkoutActivityTypeTransition");
      break;
    case 83:
      result = CFSTR("HKWorkoutActivityTypeUnderwaterDiving");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

const __CFString *_HKWorkoutSessionLocationTypeName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("invalid location");
  else
    return off_1E37EEB58[a1 - 1];
}

__CFString *_HKWorkoutSwimmingLocationTypeName(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37F66A0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("HKWorkoutSwimmingLocationType(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

const __CFString *_HKWorkoutSessionStateName(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 2)
    return CFSTR("Not Started");
  else
    return off_1E37E85B0[a1 - 2];
}

id _HKBaseUnitGrammar()
{
  if (_HKBaseUnitGrammar_onceToken != -1)
    dispatch_once(&_HKBaseUnitGrammar_onceToken, &__block_literal_global_746);
  return (id)_HKBaseUnitGrammar___grammar;
}

void sub_19A0FAB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A0FAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_19A0FB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _Prefixes()
{
  if (_Prefixes_onceToken != -1)
    dispatch_once(&_Prefixes_onceToken, &__block_literal_global_733);
  return (id)_Prefixes_prefixes;
}

void sub_19A0FC888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A0FD184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A0FD27C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _HKLogDroppedError(void *a1)
{
  id v1;
  NSObject *v2;

  v1 = a1;
  _HKInitializeLogging();
  v2 = HKLogDefault;
  if (os_log_type_enabled((os_log_t)HKLogDefault, OS_LOG_TYPE_ERROR))
    _HKLogDroppedError_cold_1((uint64_t)v1, v2);

}

uint64_t HKCompareBuildVersionStrings(char *a1, char *a2)
{
  size_t v4;
  char v5;
  size_t v6;
  char v7;
  char v8;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v10;
  const char **p_first;
  int v12;
  std::vector<std::csub_match>::pointer p_p;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::match_results<const char *>::value_type *p_unmatched;
  char *first;
  char **p_second;
  unint64_t v23;
  BOOL v24;
  std::match_results<const char *>::value_type *v25;
  char *v26;
  char **v27;
  std::vector<std::csub_match>::pointer v28;
  unint64_t v29;
  std::match_results<const char *>::value_type *v30;
  int v31;
  std::vector<std::csub_match>::pointer v32;
  unint64_t v33;
  std::match_results<const char *>::value_type *v34;
  int v35;
  std::match_results<const char *>::value_type *v36;
  const char *v37;
  int v38;
  std::match_results<const char *>::value_type *v39;
  const char *v40;
  int v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::match_results<const char *> __p;
  std::match_results<const char *> v47;
  std::regex_traits<char> v48[2];
  std::__shared_weak_count *v49;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v48, "(\\d+)([a-zA-Z]+)(\\d+)([a-zA-Z]*)", 0);
  memset(&v47.__prefix_, 0, 17);
  memset(&v47.__suffix_, 0, 17);
  v47.__ready_ = 0;
  v47.__position_start_ = 0;
  memset(&v47, 0, 41);
  v4 = strlen(a1);
  if (std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v48, a1, &a1[v4], &v47, 4160))
  {
    if (v47.__suffix_.matched)
    {
      v5 = 0;
      v47.__matches_.__end_ = v47.__matches_.__begin_;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v6 = strlen(a2);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v48, a2, &a2[v6], &__p, 4160);
  if (__p.__suffix_.matched)
    v8 = 0;
  else
    v8 = v7;
  if ((v8 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      v15 = strcmp(a1, a2);
      goto LABEL_23;
    }
LABEL_21:
    v15 = 0xFFFFFFFFLL;
    goto LABEL_23;
  }
  if ((v5 & 1) == 0)
  {
LABEL_19:
    v15 = 1;
    goto LABEL_23;
  }
  begin = v47.__matches_.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47.__matches_.__end_ - (char *)v47.__matches_.__begin_) >> 3);
  if (v10 <= 1)
    p_first = (const char **)&v47;
  else
    p_first = &v47.__matches_.__begin_->first;
  v12 = atoi(p_first[3]);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__matches_.__end_ - (char *)__p.__matches_.__begin_) >> 3) <= 1)
    p_p = (std::vector<std::csub_match>::pointer)&__p;
  else
    p_p = __p.__matches_.__begin_;
  v14 = atoi(p_p[1].first);
  if (v12 < v14)
    goto LABEL_21;
  if (v12 > v14)
    goto LABEL_19;
  p_unmatched = begin + 2;
  if (v10 <= 2)
    p_unmatched = &v47.__unmatched_;
  first = (char *)p_unmatched->first;
  p_second = (char **)&begin[2].second;
  if (v10 <= 2)
    p_second = (char **)&v47.__unmatched_.second;
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v44, first, *p_second, *p_second - first);
  v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__matches_.__end_ - (char *)__p.__matches_.__begin_) >> 3);
  v24 = v23 > 2;
  if (v23 <= 2)
    v25 = &__p.__unmatched_;
  else
    v25 = __p.__matches_.__begin_ + 2;
  v26 = (char *)v25->first;
  v27 = (char **)&__p.__matches_.__begin_[2].second;
  if (!v24)
    v27 = (char **)&__p.__unmatched_.second;
  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v42, v26, *v27, *v27 - v26);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v42) & 0x80) != 0)
    goto LABEL_50;
  if ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v42) << 24) <= 0)
  {
    v28 = v47.__matches_.__begin_;
    v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47.__matches_.__end_ - (char *)v47.__matches_.__begin_) >> 3);
    v30 = v47.__matches_.__begin_ + 3;
    if (v29 <= 3)
      v30 = &v47.__unmatched_;
    v31 = atoi(v30->first);
    v32 = __p.__matches_.__begin_;
    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__matches_.__end_ - (char *)__p.__matches_.__begin_) >> 3);
    v34 = __p.__matches_.__begin_ + 3;
    if (v33 <= 3)
      v34 = &__p.__unmatched_;
    v35 = atoi(v34->first);
    if (v31 >= v35)
    {
      if (v31 > v35)
        goto LABEL_44;
      v36 = v28 + 4;
      if (v29 <= 4)
        v36 = &v47.__unmatched_;
      v37 = v36->first;
      v38 = *(unsigned __int8 *)v36->first;
      v39 = v32 + 4;
      if (v33 <= 4)
        v39 = &__p.__unmatched_;
      v40 = v39->first;
      v41 = *(unsigned __int8 *)v39->first;
      if (v38)
      {
        if (!v41)
          goto LABEL_44;
      }
      if (v38 || !v41)
      {
        v15 = 0;
        if (v38 && v41)
          v15 = strcmp(v37, v40);
        goto LABEL_51;
      }
    }
LABEL_50:
    v15 = 0xFFFFFFFFLL;
    goto LABEL_51;
  }
LABEL_44:
  v15 = 1;
LABEL_51:
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
LABEL_23:
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v47.__matches_.__begin_)
  {
    v47.__matches_.__end_ = v47.__matches_.__begin_;
    operator delete(v47.__matches_.__begin_);
  }
  v16 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::locale::~locale(&v48[0].__loc_);
  return v15;
}

void sub_19A0FF53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;

  if (a17 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a32)
    operator delete(a32);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v33 - 88);
  std::locale::~locale((std::locale *)(v33 - 128));
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x19AEC735C]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_19A0FF5E8(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E37F24C8;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_19A0FF750(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_19A0FFBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2760;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E37F29A0;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2 + 1, a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_19A100108(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEC7398](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E37F2A30;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2AC0;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_19A10054C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E37F29E8;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  __int128 *v19;
  int v20;
  _BYTE *v21;
  char *v22;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  void *v29[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  v9 = 0;
  v10 = 0;
  v31 = 0uLL;
  v32 = 0;
  if (a2 + 1 != a3 && v5 == 91)
  {
    v11 = a2[1];
    switch(v11)
    {
      case '.':
        v4 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v31);
        v9 = HIBYTE(v32);
        v10 = *((_QWORD *)&v31 + 1);
        break;
      case ':':
        v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
        goto LABEL_11;
      case '=':
        v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_11:
        v6 = v12;
        v13 = 0;
        goto LABEL_44;
      default:
        v10 = 0;
        v9 = 0;
        break;
    }
  }
  v14 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  if (v10)
  {
    v15 = v4;
    goto LABEL_28;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
  {
    v16 = *v4;
    if (v16 == 92)
    {
      v17 = v4 + 1;
      if (v14)
        v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v17, a3, (uint64_t *)&v31);
      else
        v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v17, (unsigned __int8 *)a3, (uint64_t)&v31, v6);
      v15 = v18;
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v16) = *v4;
  }
  if ((v9 & 0x80) != 0)
  {
    v19 = (__int128 *)v31;
    *((_QWORD *)&v31 + 1) = 1;
  }
  else
  {
    HIBYTE(v32) = 1;
    v19 = &v31;
  }
  *(_BYTE *)v19 = v16;
  *((_BYTE *)v19 + 1) = 0;
  v15 = v4 + 1;
LABEL_28:
  if (v15 == a3
    || (v20 = *v15, v20 == 93)
    || (v21 = v15 + 1, v15 + 1 == a3)
    || v20 != 45
    || *v21 == 93)
  {
    if (SHIBYTE(v32) < 0)
    {
      if (*((_QWORD *)&v31 + 1))
      {
        if (*((_QWORD *)&v31 + 1) != 1)
        {
          v22 = (char *)v31;
LABEL_42:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, *v22, v22[1]);
          goto LABEL_43;
        }
        v22 = (char *)v31;
        goto LABEL_40;
      }
    }
    else if (HIBYTE(v32))
    {
      v22 = (char *)&v31;
      if (HIBYTE(v32) != 1)
        goto LABEL_42;
LABEL_40:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, *v22);
    }
LABEL_43:
    v13 = 1;
    v4 = v15;
    goto LABEL_44;
  }
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v4 = v15 + 2;
  if (v15 + 2 != a3 && *v21 == 91 && *v4 == 46)
  {
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v15 + 3, a3, (uint64_t)v29);
LABEL_60:
    v4 = (char *)v24;
    goto LABEL_61;
  }
  if ((v14 | 0x40) == 0x40)
  {
    LODWORD(v21) = *v21;
    if ((_DWORD)v21 == 92)
    {
      if (v14)
        v24 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v15 + 2, a3, (uint64_t *)v29);
      else
        v24 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v15 + 2, (unsigned __int8 *)a3, (uint64_t)v29, v6);
      goto LABEL_60;
    }
  }
  else
  {
    LOBYTE(v21) = *v21;
  }
  HIBYTE(v30) = 1;
  LOWORD(v29[0]) = v21;
LABEL_61:
  *(_OWORD *)v27 = v31;
  v28 = v32;
  v32 = 0;
  v31 = 0uLL;
  *(_OWORD *)__p = *(_OWORD *)v29;
  v26 = v30;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)v27, (char *)__p);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  v13 = 1;
LABEL_44:
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if ((v13 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_19A100A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer i;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin;

  begin = this->__begin_;
  for (i = this->__end_; i != begin; i = this->__end_)
  {
    this->__end_ = i - 1;
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)&i[-1]);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v12;
  signed int v13;
  _OWORD *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v43;
  _OWORD *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v43, (uint64_t)v39);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v39[32])
    {
      *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
      operator delete(*(void **)&v39[32]);
    }
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *((_BYTE *)v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 1;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 6;
      if (v16)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 6;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *(v14 - 5);
          *(_OWORD *)v39 = *v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)((char *)v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *v44 = *(_OWORD *)v39;
            v23[1] = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            v23[2] = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 6;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_19A101278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v9;
  uint64_t v10;
  char *p_second;
  std::pair<std::string, std::string> *v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 negate;
  int v17;
  uint64_t v18;
  size_t v19;
  unsigned __int8 v20;
  std::vector<char>::pointer v21;
  unint64_t v22;
  int v23;
  std::regex_traits<char>::char_class_type v24;
  int v25;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v27;
  char *v28;
  std::vector<std::pair<std::string, std::string>>::pointer v29;
  std::vector<std::pair<std::string, std::string>>::pointer v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  std::vector<std::string>::pointer v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  BOOL v43;
  std::string *v44;
  std::string::size_type v45;
  int v46;
  std::string *v47;
  void **v48;
  uint64_t v49;
  size_t v50;
  int v51;
  std::regex_traits<char>::char_class_type v52;
  int v53;
  std::vector<std::string>::pointer v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  size_t v59;
  void *v60;
  size_t v61;
  uint64_t v62;
  BOOL v63;
  std::string *v64;
  std::string::size_type size;
  int v66;
  std::string *v67;
  void **p_p;
  uint64_t v69;
  int v70;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v73;
  std::regex_traits<char>::char_class_type neg_mask;
  int v75;
  std::__node<char> *first;
  int v77;
  std::string *v78;
  _BOOL4 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__p;
  size_t v84;
  char v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  uint64_t v88;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v18 = 0;
    negate = this->__negate_;
    goto LABEL_155;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_27;
  v6 = *current;
  v86 = *current;
  v7 = current[1];
  v87 = v7;
  if (this->__icase_)
  {
    v86 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v87 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88, (uint64_t)&__p);
  if ((v85 & 0x80000000) == 0)
  {
    if (v85)
      goto LABEL_8;
LABEL_27:
    negate = 0;
    v18 = 1;
    goto LABEL_28;
  }
  v19 = v84;
  operator delete(__p);
  if (!v19)
    goto LABEL_27;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v9 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v9)
  {
    v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1)
      v10 = 1;
    p_second = &begin->second;
    do
    {
      if (v86 == *(p_second - 1) && v87 == *p_second)
        goto LABEL_152;
      p_second += 2;
      --v10;
    }
    while (v10);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88);
    v13 = this->__ranges_.__begin_;
    if (this->__ranges_.__end_ == v13)
    {
LABEL_24:
      negate = 0;
      v17 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13[v14].first.__r_.__value_.__r.__words, &__p) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)&this->__ranges_.__begin_[v14].second.__r_.__value_.__l.__data_) << 24) >= 0x1000000)
      {
        ++v15;
        v13 = this->__ranges_.__begin_;
        ++v14;
        if (v15 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v13) >> 4))
          goto LABEL_24;
      }
      negate = 1;
      v17 = 5;
    }
    if (v85 < 0)
      operator delete(__p);
    if (negate)
      goto LABEL_129;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_134;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v88, (uint64_t)&__p);
  v54 = this->__equivalences_.__begin_;
  v55 = v85;
  v56 = (char *)this->__equivalences_.__end_ - (char *)v54;
  if (v56)
  {
    v57 = 0;
    v58 = v56 / 24;
    v60 = __p;
    v59 = v84;
    if (v85 >= 0)
      v61 = v85;
    else
      v61 = v84;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v56 / 24;
    v63 = 1;
    while (1)
    {
      v64 = &v54[v57];
      size = HIBYTE(v64->__r_.__value_.__r.__words[2]);
      v66 = (char)size;
      if ((size & 0x80u) != 0)
        size = v64->__r_.__value_.__l.__size_;
      if (v61 == size)
      {
        if (v66 >= 0)
          v67 = &v54[v57];
        else
          v67 = (std::string *)v64->__r_.__value_.__r.__words[0];
        if ((v55 & 0x80) == 0)
        {
          if ((_DWORD)v55)
          {
            p_p = &__p;
            v69 = v55;
            do
            {
              if (*(unsigned __int8 *)p_p != v67->__r_.__value_.__s.__data_[0])
                goto LABEL_122;
              p_p = (void **)((char *)p_p + 1);
              v67 = (std::string *)((char *)v67 + 1);
              --v69;
            }
            while (v69);
            negate = 1;
            v17 = 5;
            goto LABEL_126;
          }
          negate = 1;
          if (v63)
            goto LABEL_154;
LABEL_134:
          if ((char)v86 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_147;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v73 = tab[v86];
          if ((v73 & mask) == 0 && (v86 != 95 || (mask & 0x80) == 0)
            || (char)v87 < 0
            || (tab[v87] & mask) == 0 && ((mask & 0x80) == 0 || v87 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v73 & neg_mask) != 0 || v86 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_151:
              v75 = negate;
              goto LABEL_153;
            }
LABEL_147:
            if (((char)v87 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v87] & neg_mask) != 0)
                goto LABEL_151;
              v75 = 1;
              if (v87 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_151;
LABEL_153:
              negate = v75;
LABEL_154:
              v18 = 2;
              goto LABEL_155;
            }
          }
LABEL_152:
          v75 = 1;
          goto LABEL_153;
        }
        v80 = v58;
        v82 = v55;
        v70 = memcmp(v60, v67, v59);
        v58 = v80;
        v55 = v82;
        if (!v70)
          break;
      }
LABEL_122:
      v63 = ++v57 < v58;
      if (v57 == v62)
        goto LABEL_125;
    }
    v17 = 5;
    negate = 1;
    goto LABEL_127;
  }
  v63 = 0;
LABEL_125:
  v17 = 0;
LABEL_126:
  if ((v55 & 0x80) != 0)
LABEL_127:
    operator delete(__p);
  if (!v63)
    goto LABEL_134;
LABEL_129:
  if (v17)
    goto LABEL_154;
  v18 = 2;
LABEL_28:
  v20 = *a2->__current_;
  v86 = v20;
  if (this->__icase_)
  {
    v20 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v20);
    v86 = v20;
  }
  v21 = this->__chars_.__begin_;
  v22 = this->__chars_.__end_ - v21;
  if (v22)
  {
    if (v22 <= 1)
      v22 = 1;
    while (1)
    {
      v23 = *v21++;
      if (v23 == v20)
        break;
      if (!--v22)
        goto LABEL_35;
    }
LABEL_46:
    negate = 1;
    goto LABEL_155;
  }
LABEL_35:
  v24 = this->__neg_mask_;
  if (v24 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v20 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v20] & v24) == 0)
      v25 = (v20 == 95) & (v24 >> 7);
    else
      LOBYTE(v25) = 1;
    end = this->__neg_chars_.__end_;
    v27 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v20, end - this->__neg_chars_.__begin_);
    v28 = v27 ? v27 : end;
    if ((v25 & 1) == 0 && v28 == end)
      goto LABEL_46;
  }
  v29 = this->__ranges_.__begin_;
  v30 = this->__ranges_.__end_;
  if (v29 != v30)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v87);
      v29 = this->__ranges_.__begin_;
      v30 = this->__ranges_.__end_;
    }
    else
    {
      v85 = 1;
      LOWORD(__p) = v20;
    }
    if (v30 == v29)
    {
LABEL_57:
      v33 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v29[v31].first.__r_.__value_.__r.__words, &__p) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)&this->__ranges_.__begin_[v31].second.__r_.__value_.__l.__data_) << 24) >= 0x1000000)
      {
        ++v32;
        v29 = this->__ranges_.__begin_;
        ++v31;
        if (v32 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v29) >> 4))
          goto LABEL_57;
      }
      v33 = 1;
      negate = 1;
    }
    if (v85 < 0)
      operator delete(__p);
    if ((v33 & 1) != 0)
      goto LABEL_155;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_90;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v86, (char *)&v87, (uint64_t)&__p);
  v34 = this->__equivalences_.__begin_;
  v35 = v85;
  v36 = (char *)this->__equivalences_.__end_ - (char *)v34;
  if (v36)
  {
    v81 = v18;
    v37 = 0;
    v38 = v36 / 24;
    v39 = __p;
    v40 = v84;
    if (v85 >= 0)
      v41 = v85;
    else
      v41 = v84;
    if (v38 <= 1)
      v42 = 1;
    else
      v42 = v36 / 24;
    v43 = 1;
    while (1)
    {
      v44 = &v34[v37];
      v45 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v46 = (char)v45;
      if ((v45 & 0x80u) != 0)
        v45 = v44->__r_.__value_.__l.__size_;
      if (v41 == v45)
      {
        if (v46 >= 0)
          v47 = &v34[v37];
        else
          v47 = (std::string *)v44->__r_.__value_.__r.__words[0];
        if ((v35 & 0x80) != 0)
        {
          v79 = negate;
          v50 = v41;
          v78 = v34;
          v51 = memcmp(v39, v47, v40);
          v34 = v78;
          v41 = v50;
          negate = v79;
          if (!v51)
          {
            negate = 1;
            v18 = v81;
            goto LABEL_88;
          }
        }
        else
        {
          if (!(_DWORD)v35)
          {
            negate = 1;
            v18 = v81;
            if (!v43)
              goto LABEL_90;
            goto LABEL_155;
          }
          v48 = &__p;
          v49 = v35;
          while (*(unsigned __int8 *)v48 == v47->__r_.__value_.__s.__data_[0])
          {
            v48 = (void **)((char *)v48 + 1);
            v47 = (std::string *)((char *)v47 + 1);
            if (!--v49)
            {
              negate = 1;
              goto LABEL_85;
            }
          }
        }
      }
      v43 = ++v37 < v38;
      if (v37 == v42)
      {
LABEL_85:
        v18 = v81;
        if ((v35 & 0x80) == 0)
          goto LABEL_89;
        goto LABEL_88;
      }
    }
  }
  v43 = 0;
  if (v85 < 0)
LABEL_88:
    operator delete(__p);
LABEL_89:
  if (!v43)
  {
LABEL_90:
    if ((char)v86 < 0)
      goto LABEL_155;
    v52 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v86] & v52) == 0)
    {
      v53 = (v52 >> 7) & 1;
      if (v86 != 95)
        v53 = 0;
      if (v53 != 1)
        goto LABEL_155;
    }
    goto LABEL_46;
  }
LABEL_155:
  if (negate == this->__negate_)
  {
    first = 0;
    v77 = -993;
  }
  else
  {
    a2->__current_ += v18;
    first = this->__first_;
    v77 = -995;
  }
  a2->__do_ = v77;
  a2->__node_ = first;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19AEC7398);
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x19AEC7398](a1, 0x10F1C4061CF1F02);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x19AEC7398);
}

void _HKLogDroppedErrorWithReason(void *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  _HKInitializeLogging();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    _HKLogDroppedErrorWithReason_cold_1((uint64_t)v7, (uint64_t)v5, v6);

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_19A1068E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A106A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A106B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t checkWhetherAllMetadataAlreadyExists(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  if (v5 <= objc_msgSend(v4, "count"))
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v18;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v18 != v10)
            objc_enumerationMutation(v7);
          v12 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
          objc_msgSend(v4, "objectForKey:", v12, (_QWORD)v17);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "objectForKey:", v12);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v13 || (objc_opt_respondsToSelector() & 1) == 0 || (objc_opt_respondsToSelector() & 1) == 0)
          {

LABEL_16:
            v6 = 0;
            goto LABEL_18;
          }
          v15 = objc_msgSend(v13, "isEqual:", v14);

          if (!v15)
            goto LABEL_16;
        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        v6 = 1;
        if (v9)
          continue;
        break;
      }
    }
    else
    {
      v6 = 1;
    }
LABEL_18:

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_19A10B17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__96(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__97(uint64_t a1)
{

}

__CFString *HKWorkoutBuilderConstructionStateToString(unint64_t a1)
{
  if (a1 < 5)
    return off_1E37E6DD8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A10C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_19A10E214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

uint64_t HKMedicalRecordsStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3BD8B0);
}

id HKMedicalRecordsStoreServerInterface()
{
  void *v0;
  id v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E2C8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchMedicalRecordsForClinicalRecordsUUIDs_completion_, 0, 0);
  v2 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchMedicalRecordsForClinicalRecordsUUIDs_completion_, 0, 1);
  return v0;
}

id HKCurrentLocaleCountryCodeIfUnknown(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("XX")) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "hk_testableCurrentLocale");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "countryCode");
    v3 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = v1;
  }

  return v3;
}

id standardizeIdentifier(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v9;

  v1 = a1;
  if (objc_msgSend(v1, "hasSuffix:", CFSTR("/")))
  {
    objc_msgSend(v1, "substringToIndex:", objc_msgSend(v1, "length") - 1);
    v2 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v2;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "URLByStandardizingPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v4, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "scheme");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("https"));

    if (v7)
      objc_msgSend(v5, "setScheme:", CFSTR("http"));
    objc_msgSend(v5, "URL");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "absoluteString");
    v9 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v9;
  }
  return v1;
}

char **HKCodeSystemDefinitionsWithCount(_QWORD *a1)
{
  *a1 = 73;
  return HKCodeSystemDefinitionsWithCount_systemDefinitions;
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id OUTLINED_FUNCTION_2_0(id a1)
{
  return a1;
}

uint64_t HKDataTypeCodeFromTypeIdentifier(uint64_t a1)
{
  return objc_msgSend(&unk_1E389D2B0, "objectForKeyedSubscript:", a1);
}

void sub_19A11BBC0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t HKWorkoutControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3BD010);
}

uint64_t HKWorkoutControlServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E328);
}

BOOL HKCategoryTypeAcceptsValue(uint64_t a1, unint64_t a2)
{
  _BOOL8 result;
  BOOL v4;
  _BOOL4 v6;
  _BOOL4 v7;

  result = 0;
  if (a1 > 275)
  {
    if ((unint64_t)(a1 - 313) < 2)
    {
LABEL_16:
      v4 = a2 - 1 >= 5;
      return !v4;
    }
    else if (a1 == 276 || a1 == 293)
    {
      return a2 == 0;
    }
  }
  else if (a1 <= 90)
  {
    v6 = a2 == 1;
    v7 = a2 < 2;
    if (a1 != 70)
      v7 = 0;
    if (a1 != 68)
      v6 = v7;
    if (a1 == 63)
      return a2 < 6;
    else
      return v6;
  }
  else
  {
    switch(a1)
    {
      case 91:
      case 95:
        goto LABEL_16;
      case 92:
      case 250:
        v4 = a2 - 1 >= 4;
        return !v4;
      case 96:
      case 97:
      case 99:
      case 140:
      case 141:
      case 147:
      case 156:
      case 189:
      case 191:
      case 192:
      case 200:
      case 237:
      case 254:
      case 262:
      case 263:
      case 264:
      case 265:
        return a2 == 0;
      case 98:
        v4 = a2 >= 8;
        return !v4;
      case 112:
        v4 = a2 >= 3;
        return !v4;
      case 116:
      case 164:
      case 169:
        v4 = a2 >= 2;
        return !v4;
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 165:
      case 166:
      case 167:
      case 168:
      case 171:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 211:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 240:
      case 241:
      case 242:
        v4 = a2 >= 5;
        return !v4;
      case 170:
        v4 = a2 >= 4;
        return !v4;
      case 178:
      case 199:
      case 236:
        return a2 == 1;
      case 190:
        v4 = a2 - 1 >= 2;
        return !v4;
      case 193:
        v4 = a2 - 1 >= 7;
        return !v4;
      case 243:
      case 244:
        v4 = a2 - 1 >= 3;
        return !v4;
      default:
        return result;
    }
  }
  return result;
}

uint64_t HKCodableLocationCoordinateSeriesReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  HKCodableLocationCoordinate *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(HKCodableLocationCoordinate);
        objc_msgSend((id)a1, "addCoordinates:", v18);
        if (!PBReaderPlaceMark() || !HKCodableLocationCoordinateReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A11E0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A11E85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_19A11ECF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A11F180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A11F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCloudSyncControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3D0B88);
}

id HKCloudSyncControlServerInterface()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E388);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchCloudDescriptionWithCompletion_, 1, 1);
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  objc_msgSend(v2, "setWithObjects:", v3, v4, v5, v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_remote_syncWithRequest_reason_completion_, 0, 1);

  return v0;
}

void sub_19A121F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A122188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_19A122830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A123798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_19A123B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19A124880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A125194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A125AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19A126AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19A12BC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19A12BF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19A12C1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19A12C3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id HKDescriptionForAnalyticsFileWithName(void *a1)
{
  id v1;
  HKHealthStore *v2;
  HKDiagnosticStore *v3;
  dispatch_semaphore_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  uint64_t v7;
  id *v8;
  void *v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  id obj;
  _QWORD v15[4];
  NSObject *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;

  v1 = a1;
  v2 = objc_alloc_init(HKHealthStore);
  v3 = -[HKDiagnosticStore initWithHealthStore:]([HKDiagnosticStore alloc], "initWithHealthStore:", v2);
  v22 = 0;
  v23[0] = &v22;
  v23[1] = 0x3032000000;
  v23[2] = __Block_byref_object_copy__4;
  v23[3] = __Block_byref_object_dispose__4;
  v24 = 0;
  v19 = 0;
  v20[0] = &v19;
  v20[1] = 0x3032000000;
  v20[2] = __Block_byref_object_copy__4;
  v20[3] = __Block_byref_object_dispose__4;
  v21 = 0;
  v4 = dispatch_semaphore_create(0);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __HKDescriptionForAnalyticsFileWithName_block_invoke;
  v15[3] = &unk_1E37E9590;
  v17 = &v22;
  v18 = &v19;
  v5 = v4;
  v16 = v5;
  -[HKDiagnosticStore fetchURLForAnalyticsFileWithName:completion:](v3, "fetchURLForAnalyticsFileWithName:completion:", v1, v15);
  v6 = dispatch_time(0, 10000000000);
  dispatch_semaphore_wait(v5, v6);
  v7 = *(_QWORD *)(v23[0] + 40);
  if (v7)
  {
    v8 = (id *)(v20[0] + 40);
    obj = *(id *)(v20[0] + 40);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithContentsOfURL:encoding:error:", v7, 4, &obj);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v8, obj);
    if (v9)
    {
      v10 = v9;
    }
    else
    {
      _HKInitializeLogging();
      v12 = HKLogHealthRecords;
      if (os_log_type_enabled((os_log_t)HKLogHealthRecords, OS_LOG_TYPE_ERROR))
        HKDescriptionForAnalyticsFileWithName_cold_2((uint64_t)v23, (uint64_t)v20, v12);
    }

  }
  else
  {
    _HKInitializeLogging();
    v11 = HKLogHealthRecords;
    if (os_log_type_enabled((os_log_t)HKLogHealthRecords, OS_LOG_TYPE_ERROR))
      HKDescriptionForAnalyticsFileWithName_cold_1((uint64_t)v1, (uint64_t)v20, v11);
    v9 = 0;
  }

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v22, 8);

  return v9;
}

void sub_19A131430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

uint64_t HKSubmitAnalyticsFile()
{
  return OSAWriteLogForSubmission();
}

void sub_19A131650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HDStringRepresentationForRecipientIdentifier(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;

  v2 = a1;
  v3 = objc_msgSend(v2, "type");
  if (v3 == 1)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "clinicalAccountIdentifier");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = CFSTR("ClinicalAccount-");
    goto LABEL_5;
  }
  if (!v3)
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v2, "invitationUUID");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    v7 = CFSTR("SharedSummary-");
LABEL_5:
    objc_msgSend(v4, "stringWithFormat:", CFSTR("%@%@"), v7, v5);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

void sub_19A136578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1367CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1();
  getNRPairedDeviceRegistryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t NanoRegistryLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E37E9748;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary)
    NanoRegistryLibrary_cold_1(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return NSRequestConcreteImplementation();
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  uint64_t v0;

  return v0;
}

uint64_t HKDiagnosticStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3E87F8);
}

uint64_t HKDiagnosticStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E4A8);
}

uint64_t HKHeartRateMotionContextForPrivateHeartRateContext(uint64_t a1)
{
  if ((unint64_t)(a1 - 3) > 4)
    return 0;
  else
    return qword_19A3AE040[a1 - 3];
}

uint64_t HKAppleIrregularRhythmNotificationsAlgorithmVersionForPrivateVersionString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("."));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB37F0], "hk_wholeNumberFormatter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "numberFromString:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "integerValue");
  if (v5 >= 3)
    v6 = objc_msgSend(v4, "integerValue");
  else
    v6 = qword_19A3AE068[v5];

  return v6;
}

id HKMetadataAliasesForKey(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const __CFString *v28;
  id v29;
  const __CFString *v30;
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("HKMetadataKeyHeartRateMotionContext")))
  {
    v23 = v3;
    v5 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (!v7)
      goto LABEL_17;
    v8 = v7;
    v9 = *(_QWORD *)v25;
    while (1)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v25 != v9)
          objc_enumerationMutation(v6);
        v11 = objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * i), "integerValue");
        switch(v11)
        {
          case 2:
            objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E3893EE0, &unk_1E3893EF8, &unk_1E3893F10, 0, v18, v19, v20, v21, v22);
            goto LABEL_13;
          case 1:
            objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E3893E08, 0, v16, v17, v18, v19, v20, v21, v22);
            goto LABEL_13;
          case 0:
            objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E3893E50, &unk_1E3893E20, &unk_1E3893E68, &unk_1E3893E80, &unk_1E3893E98, &unk_1E3893EB0, &unk_1E3893EC8, &unk_1E3893E38, 0);
LABEL_13:
            v12 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_15;
        }
        v12 = objc_alloc_init(MEMORY[0x1E0C99E60]);
LABEL_15:
        v13 = v12;
        objc_msgSend(v5, "unionSet:", v12);

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      if (!v8)
      {
LABEL_17:

        v30 = CFSTR("_HKPrivateHeartRateContext");
        v31 = v5;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v3 = v23;
        goto LABEL_18;
      }
    }
  }
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("HKAlgorithmVersion")))
  {
    v28 = CFSTR("_HKPrivateMetadataKeyAppleHeartbeatSeriesAlgorithmVersion");
    v5 = v4;
    if (!v4)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "set");
      v5 = (id)objc_claimAutoreleasedReturnValue();
    }
    v29 = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
LABEL_18:

  }
  else
  {
    v14 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v14;
}

id HKMetadataAliasRangesForKey(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("HKAlgorithmVersion")))
  {
    objc_msgSend(v3, "hk_map:", &__block_literal_global_9);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = CFSTR("_HKPrivateMetadataKeyBackgroundAtrialFibrillationDetectionVersion");
    v8[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = (void *)MEMORY[0x1E0C9AA70];
  }

  return v5;
}

uint64_t _HKBackgroundAndSedentaryPrivateHeartRateContexts()
{
  return objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E3893E08, &unk_1E3893E20, &unk_1E3893E38, 0);
}

const __CFString *NSStringFromPrivateElectrocardiogramClassification(unint64_t a1)
{
  if (a1 > 0xA)
    return CFSTR("Unknown");
  else
    return off_1E37E9CF8[a1];
}

uint64_t _HKMetadataKeyIsReadOnly(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKMetadataKeyAppleECGAlgorithmVersion")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("HKMetadataKeyAppleIrregularRhythmNotificationsAlgorithmVersion")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("HKMetadataKeyAppleDeviceCalibrated")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("HKMetadataKeyAppleFitnessPlusSession"));
  }

  return v2;
}

uint64_t _HKMetadataKeyIsPrivate(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("_HKPrivate"));
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  return NSRequestConcreteImplementation();
}

uint64_t HKWorkoutClusterStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3AABE8);
}

id HKWorkoutClusterStoreServerInterface()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E508);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutsWithFilter_anchor_limit_completion_, 0, 1);
  v2 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutsWithFilter_limit_sortDescriptors_completion_, 2, 0);
  v3 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutsWithFilter_limit_sortDescriptors_completion_, 0, 1);
  v4 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutClustersWithCompletion_, 0, 1);
  v5 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutUUIDsForClusterUUID_completion_, 0, 1);
  v6 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutClustersContainingWorkoutUUIDs_completion_, 0, 0);
  v7 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchWorkoutClustersContainingWorkoutUUIDs_completion_, 0, 1);
  v8 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_updateWorkoutClusterWithUUID_newRelevance_newLastWorkoutUUID_newBestWorkoutUUID_newWorkoutAssociations_workoutAssociationsToRemove_completion_, 4, 0);
  v9 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_updateWorkoutClusterWithUUID_newRelevance_newLastWorkoutUUID_newBestWorkoutUUID_newWorkoutAssociations_workoutAssociationsToRemove_completion_, 5, 0);
  return v0;
}

uint64_t HKCoreMotionSupportsSwimmingWorkoutSessions()
{
  return objc_msgSend(MEMORY[0x1E0CA56E8], "isAvailable");
}

uint64_t HKCoreMotionSupportsSkiingWorkoutSessions()
{
  return objc_msgSend(MEMORY[0x1E0CA56C8], "isAvailable");
}

uint64_t HKCoreMotionSupportsRunningMetrics()
{
  return objc_msgSend(MEMORY[0x1E0CA56B8], "isRunningFormAvailable");
}

uint64_t HKCoreMotionSupportsWaterSubmersion()
{
  return objc_msgSend(MEMORY[0x1E0CA5718], "waterSubmersionAvailable");
}

unint64_t HKCoreMotionSupportsEstimatedWorkoutEffortForActivityType(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v4;
  uint64_t v5;

  if (a1)
  {
    v2 = a1;
    switch(a1)
    {
      case 1:
        v2 = 42;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 3:
        v2 = 41;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 4:
        v2 = 52;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 5:
        v2 = 60;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 6:
        v2 = 50;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 8:
        v2 = 64;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 10:
        v2 = 61;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 13:
        v4 = a2 == 0;
        v5 = 4;
        goto LABEL_40;
      case 16:
        v2 = 9;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 20:
        v2 = 28;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 21:
        v2 = 27;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 23:
        v2 = 57;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 24:
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 25:
        if (a2)
          v2 = 48;
        else
          v2 = 49;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 27:
        v2 = 45;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 31:
        v2 = 38;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 34:
        v2 = 53;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 35:
        if (a2)
          v2 = 12;
        else
          v2 = 35;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 36:
        v2 = 44;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 37:
        v4 = a2 == 0;
        v5 = 17;
        goto LABEL_40;
      case 39:
        v4 = a2 == 0;
        v5 = 46;
        goto LABEL_40;
      case 41:
        v4 = a2 == 0;
        v5 = 39;
        goto LABEL_40;
      case 42:
        v2 = 59;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 43:
        v2 = 56;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 44:
        v2 = 11;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 46:
        v2 = 19;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 47:
        v2 = 62;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 48:
        v2 = 51;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 49:
        v2 = 58;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 51:
        v2 = 55;
        return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
      case 52:
        v4 = a2 == 0;
        v5 = 15;
LABEL_40:
        if (v4)
          v2 = v5;
        else
          v2 = v5 + 1;
        break;
      case 57:
        v2 = 6;
        break;
      case 59:
        v2 = 30;
        break;
      case 60:
        v2 = 36;
        break;
      case 61:
        v2 = 23;
        break;
      case 63:
        v2 = 22;
        break;
      case 64:
        v2 = 63;
        break;
      case 65:
        v2 = 34;
        break;
      case 66:
        v2 = 32;
        break;
      case 67:
        v2 = 37;
        break;
      case 70:
        v2 = 20;
        break;
      case 71:
        v2 = 21;
        break;
      case 72:
        v2 = 31;
        break;
      case 75:
        v2 = 43;
        break;
      case 77:
        v2 = 7;
        break;
      case 79:
        v2 = 54;
        break;
      case 80:
        v2 = 29;
        break;
      case 83:
        v2 = 33;
        break;
      default:
        v2 = 14;
        break;
    }
  }
  else
  {
    v2 = 0;
  }
  return ((unint64_t)objc_msgSend(MEMORY[0x1E0CA5728], "supportedMetricsForWorkoutType:", v2) >> 4) & 1;
}

void sub_19A13B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A13C5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return objc_opt_class();
}

id OUTLINED_FUNCTION_3_0(id a1)
{
  return a1;
}

void sub_19A13DFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKNanoSyncControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3AE820);
}

uint64_t HKNanoSyncControlServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E628);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

double binarysample::ElectrocardiogramLead::ElectrocardiogramLead(binarysample::ElectrocardiogramLead *this)
{
  double result;

  *(_QWORD *)this = &off_1E37EA278;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 7) = 1;
  return result;
}

void binarysample::ElectrocardiogramLead::~ElectrocardiogramLead(binarysample::ElectrocardiogramLead *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E37EA278;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  binarysample::ElectrocardiogramLead::~ElectrocardiogramLead(this);
  JUMPOUT(0x19AEC7398);
}

binarysample::ElectrocardiogramLead *binarysample::ElectrocardiogramLead::ElectrocardiogramLead(binarysample::ElectrocardiogramLead *this, const binarysample::ElectrocardiogramLead *a2)
{
  char *v4;
  int v5;

  *(_QWORD *)this = &off_1E37EA278;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 1;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) = 1;
    *((_DWORD *)this + 14) = v5;
  }
  if (this != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t binarysample::ElectrocardiogramLead::formatText(binarysample::ElectrocardiogramLead *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(a2, "flag");
  }
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "name");
  v7 = (float *)*((_QWORD *)this + 4);
  v8 = (float *)*((_QWORD *)this + 5);
  while (v7 != v8)
  {
    v9 = *v7++;
    PB::TextFormatter::format(a2, "value", v9);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL binarysample::ElectrocardiogramLead::readFrom(binarysample::ElectrocardiogramLead *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char *v106;
  int v107;
  unint64_t v108;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (_QWORD *)((char *)this + 24);
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v18 = 0;
        v19 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v20 = v2 + 1;
          v21 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v20;
          v15 |= (unint64_t)(v21 & 0x7F) << v18;
          if ((v21 & 0x80) == 0)
            goto LABEL_21;
          v18 += 7;
          v2 = v20;
          if (v19++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v46 = v14++ > 8;
        if (v46)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v24 = v15 >> 3;
      if ((v15 >> 3) == 4)
        break;
      if ((_DWORD)v24 == 3)
      {
        if (v23 != 2)
        {
          v79 = (char *)*((_QWORD *)this + 5);
          v78 = *((_QWORD *)this + 6);
          if ((unint64_t)v79 >= v78)
          {
            v87 = (char *)*v10;
            v88 = (v79 - (_BYTE *)*v10) >> 2;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62)
LABEL_183:
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v90 = v78 - (_QWORD)v87;
            if (v90 >> 1 > v89)
              v89 = v90 >> 1;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v11, v91);
              v87 = (char *)*((_QWORD *)this + 4);
              v79 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v92 = 0;
            }
            v106 = &v92[4 * v88];
            *(_DWORD *)v106 = 0;
            v80 = v106 + 4;
            while (v79 != v87)
            {
              v107 = *((_DWORD *)v79 - 1);
              v79 -= 4;
              *((_DWORD *)v106 - 1) = v107;
              v106 -= 4;
            }
            *((_QWORD *)this + 4) = v106;
            *((_QWORD *)this + 5) = v80;
            *((_QWORD *)this + 6) = &v92[4 * v91];
            if (v87)
              operator delete(v87);
          }
          else
          {
            *(_DWORD *)v79 = 0;
            v80 = v79 + 4;
          }
          *((_QWORD *)this + 5) = v80;
          v108 = *((_QWORD *)a2 + 1);
          if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v80 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v108);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_173;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v57 = *((_QWORD *)a2 + 1);
        v58 = *((_QWORD *)a2 + 2);
        while (v57 < v58 && !*((_BYTE *)a2 + 24))
        {
          v60 = (char *)*((_QWORD *)this + 5);
          v59 = *((_QWORD *)this + 6);
          if ((unint64_t)v60 >= v59)
          {
            v62 = (char *)*v10;
            v63 = (v60 - (_BYTE *)*v10) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              goto LABEL_183;
            v65 = v59 - (_QWORD)v62;
            if (v65 >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v11, v66);
              v62 = (char *)*((_QWORD *)this + 4);
              v60 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v67 = 0;
            }
            v68 = &v67[4 * v63];
            *(_DWORD *)v68 = 0;
            v61 = v68 + 4;
            while (v60 != v62)
            {
              v69 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v68 - 1) = v69;
              v68 -= 4;
            }
            *((_QWORD *)this + 4) = v68;
            *((_QWORD *)this + 5) = v61;
            *((_QWORD *)this + 6) = &v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *(_DWORD *)v60 = 0;
            v61 = v60 + 4;
          }
          *((_QWORD *)this + 5) = v61;
          v70 = *((_QWORD *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
          {
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_136;
          }
          *(v61 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v70);
          v58 = *((_QWORD *)a2 + 2);
          v57 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v57;
        }
        goto LABEL_136;
      }
      if ((_DWORD)v24 == 1)
      {
        *((_BYTE *)this + 60) |= 1u;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          v71 = 0;
          v72 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_134;
            }
            v73 = v25 + 1;
            v74 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)a2 + 1) = v73;
            v30 |= (unint64_t)(v74 & 0x7F) << v71;
            if ((v74 & 0x80) == 0)
              break;
            v71 += 7;
            v25 = v73;
            v46 = v72++ > 8;
            if (v46)
            {
LABEL_109:
              LODWORD(v30) = 0;
              goto LABEL_134;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v31 = v25 + 1;
            *((_QWORD *)a2 + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              break;
            v28 += 7;
            v25 = v31;
            v46 = v29++ > 8;
            if (v46)
              goto LABEL_109;
          }
        }
LABEL_134:
        *((_DWORD *)this + 14) = v30;
      }
      else if ((PB::Reader::skip(a2) & 1) == 0)
      {
        return 0;
      }
LABEL_173:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v23 != 2)
    {
      v76 = (char *)*((_QWORD *)this + 2);
      v75 = *((_QWORD *)this + 3);
      if ((unint64_t)v76 >= v75)
      {
        v81 = (char *)*v8;
        v82 = (v76 - (_BYTE *)*v8) >> 2;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
LABEL_184:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v84 = v75 - (_QWORD)v81;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v85);
          v81 = (char *)*((_QWORD *)this + 1);
          v76 = (char *)*((_QWORD *)this + 2);
        }
        else
        {
          v86 = 0;
        }
        v93 = &v86[4 * v82];
        *(_DWORD *)v93 = 0;
        v77 = v93 + 4;
        while (v76 != v81)
        {
          v94 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *((_DWORD *)v93 - 1) = v94;
          v93 -= 4;
        }
        *((_QWORD *)this + 1) = v93;
        *((_QWORD *)this + 2) = v77;
        *((_QWORD *)this + 3) = &v86[4 * v85];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *(_DWORD *)v76 = 0;
        v77 = v76 + 4;
      }
      *((_QWORD *)this + 2) = v77;
      v95 = *((_QWORD *)a2 + 1);
      v96 = *((_QWORD *)a2 + 2);
      v97 = *(_QWORD *)a2;
      v98 = 0;
      v99 = 0;
      if (v95 > 0xFFFFFFFFFFFFFFF5 || v95 + 10 > v96)
      {
        v103 = 0;
        if (v96 <= v95)
          v96 = *((_QWORD *)a2 + 1);
        while (1)
        {
          if (v96 == v95)
          {
            LODWORD(v103) = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_172;
          }
          v101 = v95 + 1;
          v102 = *(_BYTE *)(v97 + v95);
          *((_QWORD *)a2 + 1) = v101;
          v103 |= (unint64_t)(v102 & 0x7F) << v98;
          if ((v102 & 0x80) == 0)
            break;
          v98 += 7;
          v95 = v101;
          v46 = v99++ > 8;
          if (v46)
          {
LABEL_158:
            LODWORD(v103) = 0;
            goto LABEL_172;
          }
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v103) = 0;
      }
      else
      {
        v103 = 0;
        while (1)
        {
          v104 = v95 + 1;
          *((_QWORD *)a2 + 1) = v95 + 1;
          v105 = *(_BYTE *)(v97 + v95);
          v103 |= (unint64_t)(v105 & 0x7F) << v98;
          if ((v105 & 0x80) == 0)
            break;
          v98 += 7;
          v95 = v104;
          v46 = v99++ > 8;
          if (v46)
            goto LABEL_158;
        }
      }
LABEL_172:
      *(v77 - 1) = v103;
      goto LABEL_173;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
    {
      v33 = (char *)*((_QWORD *)this + 2);
      do
      {
        if ((unint64_t)v33 >= *v9)
        {
          v34 = (char *)*v8;
          v35 = (v33 - (_BYTE *)*v8) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            goto LABEL_184;
          v37 = *v9 - (_QWORD)v34;
          if (v37 >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v38);
            v34 = (char *)*((_QWORD *)this + 1);
            v33 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = 0;
          v41 = v40 + 4;
          while (v33 != v34)
          {
            v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v40 - 1) = v42;
            v40 -= 4;
          }
          *((_QWORD *)this + 1) = v40;
          *((_QWORD *)this + 2) = v41;
          *((_QWORD *)this + 3) = &v39[4 * v38];
          if (v34)
            operator delete(v34);
          v33 = v41;
        }
        else
        {
          *(_DWORD *)v33 = 0;
          v33 += 4;
        }
        *((_QWORD *)this + 2) = v33;
        v44 = *((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        v45 = *(_QWORD *)a2;
        v46 = v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v43;
        if (!v46)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (1)
          {
            v55 = v44 + 1;
            *((_QWORD *)a2 + 1) = v44 + 1;
            v56 = *(_BYTE *)(v45 + v44);
            v54 |= (unint64_t)(v56 & 0x7F) << v52;
            if ((v56 & 0x80) == 0)
              goto LABEL_74;
            v52 += 7;
            v44 = v55;
            v46 = v53++ > 8;
            if (v46)
            {
              LODWORD(v54) = 0;
              goto LABEL_74;
            }
          }
        }
        v47 = 0;
        v48 = 0;
        v54 = 0;
        if (v43 <= v44)
          v49 = *((_QWORD *)a2 + 1);
        else
          v49 = *((_QWORD *)a2 + 2);
        while (1)
        {
          if (v49 == v44)
          {
            *((_BYTE *)a2 + 24) = 1;
            *((_DWORD *)v33 - 1) = 0;
            goto LABEL_136;
          }
          v50 = v44++;
          v51 = *(_BYTE *)(v45 + v50);
          *((_QWORD *)a2 + 1) = v44;
          v54 |= (unint64_t)(v51 & 0x7F) << v47;
          if ((v51 & 0x80) == 0)
            break;
          v47 += 7;
          v46 = v48++ > 8;
          if (v46)
          {
            LODWORD(v54) = 0;
            goto LABEL_73;
          }
        }
        if (*((_BYTE *)a2 + 24))
          LODWORD(v54) = 0;
LABEL_73:
        v55 = v50 + 1;
LABEL_74:
        *((_DWORD *)v33 - 1) = v54;
      }
      while (v55 < v43 && !*((_BYTE *)a2 + 24));
    }
LABEL_136:
    PB::Reader::recallMark();
    goto LABEL_173;
  }
  return v4 == 0;
}

uint64_t binarysample::ElectrocardiogramLead::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 60) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6);
  }
  v8 = v3[1];
  v7 = v3[2];
  while (v8 != v7)
  {
    v8 += 4;
    this = PB::Writer::writeVarInt(a2);
  }
  return this;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E37E5BB0, MEMORY[0x1E0DE42D0]);
}

void sub_19A140224(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_19A140944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A140F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

id HKQuantityMin(void *a1, void *a2)
{
  return _HKQuantityComparisonResults(a1, a2, -1);
}

id _HKQuantityComparisonResults(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = v6;
  if (v5)
  {
    v8 = v5;
    if (v6)
    {
      if (objc_msgSend(v5, "compare:", v6) == a3)
        v8 = v5;
      else
        v8 = v7;
    }
  }
  v9 = v8;

  return v9;
}

id HKQuantityMax(void *a1, void *a2)
{
  return _HKQuantityComparisonResults(a1, a2, 1);
}

uint64_t HKCompareUUIDBytes(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  int v2;

  v2 = uuid_compare(a1, a2);
  if (v2 < 0)
    return -1;
  else
    return v2 != 0;
}

void sub_19A142564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

uint64_t _HKEnumerateUUIDsInCollection(void *a1, _QWORD *a2, void *a3)
{
  char v3;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  _QWORD v15[5];
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a3;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = v6;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v23;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v23 != v10)
        objc_enumerationMutation(v8);
      v12 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v11);
      v18 = 0;
      v19 = &v18;
      v20 = 0x2020000000;
      v21 = 0;
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = ___HKEnumerateUUIDsInCollection_block_invoke;
      v15[3] = &unk_1E37EA418;
      v15[4] = v12;
      v16 = v7;
      v17 = &v18;
      if ((HKWithAutoreleasePool(a2, v15) & 1) != 0)
      {
        v13 = *((_BYTE *)v19 + 24) == 0;
        v3 |= *((_BYTE *)v19 + 24) != 0;
      }
      else
      {
        v3 = 0;
        v13 = 0;
      }

      _Block_object_dispose(&v18, 8);
      if (!v13)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v3 = 1;
  }

  return v3 & 1;
}

void sub_19A142898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _ValidatorErrorFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  void *v9;
  const char *v10;
  const char *v11;
  id v12;
  void *v13;
  void *v14;
  char __str[4096];
  uint64_t v16;

  v9 = (void *)MEMORY[0x1E0C80A78]();
  v11 = v10;
  v16 = *MEMORY[0x1E0C80C00];
  v12 = v9;
  if ((unint64_t)objc_msgSend(v12, "errorCount") <= 0x1F)
  {
    vsnprintf(__str, 0x1000uLL, v11, &a9);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __str, &a9);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorMessage");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "appendString:", v13);

    objc_msgSend(v12, "setErrorCount:", objc_msgSend(v12, "errorCount") + 1);
  }

}

uint64_t getgetSleepFeatureAvailabilityProvidingSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = getgetSleepFeatureAvailabilityProvidingSymbolLoc_ptr;
  v6 = getgetSleepFeatureAvailabilityProvidingSymbolLoc_ptr;
  if (!getgetSleepFeatureAvailabilityProvidingSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getgetSleepFeatureAvailabilityProvidingSymbolLoc_block_invoke;
    v2[3] = &unk_1E37E8690;
    v2[4] = &v3;
    __getgetSleepFeatureAvailabilityProvidingSymbolLoc_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19A144018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getgetSleepFeatureAvailabilityProvidingSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SleepLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E37EA438;
    v5 = 0;
    SleepLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SleepLibraryCore_frameworkLibrary)
    __getgetSleepFeatureAvailabilityProvidingSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)SleepLibraryCore_frameworkLibrary, "getSleepFeatureAvailabilityProviding");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getgetSleepFeatureAvailabilityProvidingSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKSingletonDispatchQueueName(objc_class *a1, void *a2)
{
  void *v3;
  __CFString *v4;
  uint64_t v5;
  void *v6;
  const __CFString *v7;
  const __CFString *v8;
  void *v9;
  id v10;
  uint64_t v11;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  NSStringFromClass(a1);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v7 = CFSTR(".");
  v8 = &stru_1E37FD4C0;
  if (v4)
    v8 = v4;
  else
    v7 = &stru_1E37FD4C0;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("com.apple.HealthKit.%@%@%@"), v5, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_retainAutorelease(v9);
  v11 = objc_msgSend(v10, "UTF8String");

  return v11;
}

dispatch_queue_t HKCreateSerialUtilityDispatchQueue(void *a1, void *a2)
{
  return HKCreateSerialDispatchQueueWithQOSClass(a1, a2, QOS_CLASS_UTILITY);
}

dispatch_queue_t HKCreateConcurrentDispatchQueue(void *a1, void *a2)
{
  return HKCreateConcurrentDispatchQueueWithQOSClass(a1, a2, QOS_CLASS_UNSPECIFIED);
}

dispatch_queue_t HKCreateConcurrentDispatchQueueWithQOSClass(void *a1, void *a2, dispatch_qos_class_t a3)
{
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  dispatch_queue_t v12;

  dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x1E0C80D50], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6 = objc_claimAutoreleasedReturnValue();
  dispatch_queue_attr_make_with_qos_class(v6, a3, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = a2;
  v9 = a1;

  dispatch_queue_attr_make_with_overcommit();
  v10 = objc_claimAutoreleasedReturnValue();

  v11 = (const char *)HKDispatchQueueName(v9, v8);
  v12 = dispatch_queue_create(v11, v10);

  return v12;
}

void HKDispatchAsyncOnGlobalConcurrentQueue(unsigned int a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;

  v3 = a2;
  dispatch_get_global_queue(a1, 0);
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __HKDispatchAsyncOnGlobalConcurrentQueue_block_invoke;
  block[3] = &unk_1E37E6CD0;
  v7 = v3;
  v5 = v3;
  dispatch_async(v4, block);

}

uint64_t HKNSOperatingSystemVersionCompare(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _BOOL8 v9;

  if (*a1 < *a2)
    return -1;
  if (*a1 > *a2)
    return 1;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 < v3)
    return -1;
  if (v2 > v3)
    return 1;
  v5 = a1[2];
  v6 = a2[2];
  v8 = __OFSUB__(v5, v6);
  v7 = v5 - v6 < 0;
  v9 = v5 > v6;
  if (v7 != v8)
    return -1;
  else
    return v9;
}

uint64_t HKNSOperatingSystemVersionsEqual(uint64_t a1, uint64_t a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgeq_s64(*(int64x2_t *)(a2 + 8), *(int64x2_t *)(a1 + 8)), (int32x4_t)vcgeq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)))), 0xFuLL))) & (*(_QWORD *)a1 == *(_QWORD *)a2);
}

BOOL HKNSOperatingSystemVersionIsUnknown(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[1];
  v2 = a1[2];
  return *a1 == -1 && v1 >= 0 && v1 < 1 && v2 >= 0 && v2 < 1;
}

void HKNSOperatingSystemVersionFromString(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = v3;
  if (v3 && (v13 = v3, v5 = objc_msgSend(v3, "length"), v4 = v13, v5))
  {
    objc_msgSend(v13, "componentsSeparatedByString:", CFSTR("."));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hk_map:", &__block_literal_global_14);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend(v7, "count") >= 2 && (unint64_t)objc_msgSend(v7, "count") < 4)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      if (objc_msgSend(v7, "count"))
      {
        objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "integerValue");

      }
      else
      {
        v9 = 0;
      }
      *a2 = v9;
      if ((unint64_t)objc_msgSend(v7, "count") < 2)
      {
        v11 = 0;
      }
      else
      {
        objc_msgSend(v7, "objectAtIndexedSubscript:", 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v10, "integerValue");

      }
      a2[1] = v11;
      if ((unint64_t)objc_msgSend(v7, "count") <= 2)
      {
        a2[2] = 0;
      }
      else
      {
        objc_msgSend(v7, "objectAtIndexedSubscript:", 2);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        a2[2] = objc_msgSend(v12, "integerValue");

      }
    }
    else
    {
      a2[2] = 0;
      *(_OWORD *)a2 = HKNSOperatingSystemVersionUnknown;
    }

    v4 = v13;
  }
  else
  {
    a2[2] = 0;
    *(_OWORD *)a2 = HKNSOperatingSystemVersionUnknown;
  }

}

uint64_t HKApplicationSDKVersionToken()
{
  if (HKApplicationSDKVersionToken_onceToken != -1)
    dispatch_once(&HKApplicationSDKVersionToken_onceToken, &__block_literal_global_22);
  return HKApplicationSDKVersionToken__sdkVersionToken;
}

void HKWithUnfairLock(os_unfair_lock_s *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(void);

  v7 = a2;
  if (!v7)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HKWithUnfairLock(os_unfair_lock_t _Nonnull, void (^ _Nonnull __strong)(void))");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKUtilities.m"), 174, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("block != nil"));

    if (a1)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HKWithUnfairLock(os_unfair_lock_t _Nonnull, void (^ _Nonnull __strong)(void))");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("HKUtilities.m"), 175, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("lock != nil"));

    goto LABEL_3;
  }
  if (!a1)
    goto LABEL_5;
LABEL_3:
  os_unfair_lock_lock(a1);
  v7[2]();
  os_unfair_lock_unlock(a1);

}

id HKSafeObject(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;

  v7 = a1;
  v8 = a3;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = v7;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Unexpected class for %@ (expected %@, found %@)"), v8, a2, objc_opt_class());
    v9 = 0;
  }

  return v9;
}

uint64_t HKSafeDivision(uint64_t a1, uint64_t a2)
{
  if (a2)
    return a1 / a2;
  else
    return 0;
}

double HKSeparateTimeIntervalComponents(int a1, uint64_t *a2, _QWORD *a3, double *a4, double result)
{
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  v5 = floor(result / 60.0);
  v6 = round(result / 60.0);
  if (a1)
    v6 = v5;
  v7 = (uint64_t)v6;
  v8 = (uint64_t)v6 / 60;
  if (a2)
    *a2 = v8;
  if (a3)
    *a3 = v7 - 60 * v8;
  if (a4)
  {
    result = result - (double)(60 * v7);
    *a4 = result;
  }
  return result;
}

uint64_t HKSeparateTimeIntervalComponentsWithDays(uint64_t result, uint64_t *a2, _QWORD *a3, _QWORD *a4, double *a5, double a6)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = floor(a6 / 60.0);
  v7 = round(a6 / 60.0);
  if ((_DWORD)result)
    v7 = v6;
  v8 = (uint64_t)v7;
  v9 = (uint64_t)v7 / 60;
  if (a4)
    *a4 = v8 - 60 * v9;
  if (a5)
    *a5 = a6 - (double)(60 * v8);
  v10 = v8 / 1440;
  if (a3)
    *a3 = v9 - 24 * v10;
  if (a2)
    *a2 = v10;
  return result;
}

uint64_t *HKSeparateTimeIntervalComponentsWithWeeks(uint64_t *result, uint64_t *a2, double a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = llround(a3 / 60.0);
  v4 = v3 / 60;
  v5 = v3 % 60;
  v6 = v3 / 1440;
  v7 = v4 - 24 * v6;
  if (v5 > 30)
    ++v7;
  if (v7 <= 12)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (a2)
    *a2 = v8 % 7;
  if (result)
    *result = v8 / 7;
  return result;
}

__CFString *HKDiagnosticStringFromUUID(void *a1)
{
  void *v1;
  __CFString *v2;

  if (a1)
  {
    objc_msgSend(a1, "UUIDString");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "substringToIndex:", 6);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = &stru_1E37FD4C0;
  }
  return v2;
}

__CFString *HKDiagnosticStringFromDate(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;

  v1 = a1;
  v2 = v1;
  if (HKDiagnosticStringFromDate_onceToken != -1)
  {
    dispatch_once(&HKDiagnosticStringFromDate_onceToken, &__block_literal_global_53_0);
    if (v2)
      goto LABEL_3;
LABEL_5:
    v3 = CFSTR("never");
    goto LABEL_6;
  }
  if (!v1)
    goto LABEL_5;
LABEL_3:
  objc_msgSend((id)HKDiagnosticStringFromDate_dateFormatter, "stringFromDate:", v2);
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_6:

  return v3;
}

id HKDateFromDiagnosticString(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;

  v1 = (objc_class *)MEMORY[0x1E0CB3578];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend(v3, "setLocale:", v4);

  objc_msgSend(v3, "setDateStyle:", 1);
  objc_msgSend(v3, "setTimeStyle:", 3);
  objc_msgSend(v3, "dateFromString:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t HKDiagnosticStringFromDuration(double a1)
{
  int64_t v1;

  v1 = vcvtmd_s64_f64(a1 / 60.0);
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02ldh %02ldm %05.3fs"), v1 / 60, v1 % 60, a1 - (double)(60 * v1));
}

__CFString *HKDiagnosticStringForDurationSinceDate(void *a1)
{
  id v1;
  double Current;
  double v3;
  double v4;
  double v5;
  int64_t v6;

  if (!a1)
    return CFSTR("undefined");
  v1 = a1;
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend(v1, "timeIntervalSinceReferenceDate");
  v4 = v3;

  v5 = vabdd_f64(Current, v4);
  v6 = vcvtmd_s64_f64(v5 / 60.0);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%02ldh %02ldm %05.3fs"), v6 / 60, v6 % 60, v5 - (double)(60 * v6));
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

const __CFString *HKStringFromBool(int a1)
{
  if (a1)
    return CFSTR("YES");
  else
    return CFSTR("NO");
}

const __CFString *HKStringFromQoS(uint64_t a1)
{
  if (a1 <= 16)
  {
    if (a1 == -1)
      return CFSTR("Default");
    if (a1 == 9)
      return CFSTR("Background");
  }
  else
  {
    switch(a1)
    {
      case 17:
        return CFSTR("Utility");
      case 33:
        return CFSTR("UserInteractive");
      case 25:
        return CFSTR("UserInitiated");
    }
  }
  return CFSTR("Unknown");
}

id HKSharedResourcesDirectory()
{
  if (HKSharedResourcesDirectory_onceToken != -1)
    dispatch_once(&HKSharedResourcesDirectory_onceToken, &__block_literal_global_80);
  return (id)HKSharedResourcesDirectory_sharedResourcesDirectory;
}

uint64_t HKCompareDoubles(double a1, double a2)
{
  double v2;
  uint64_t v3;

  v2 = a1 - a2;
  if (a1 - a2 < 0.0)
    v2 = -(a1 - a2);
  v3 = -1;
  if (a1 >= a2)
    v3 = 1;
  if (v2 >= 2.22044605e-16)
    return v3;
  else
    return 0;
}

uint64_t HKCompareDoublesWithAccuracy(double a1, double a2, double a3)
{
  double v6;
  uint64_t v7;
  void *v9;
  void *v10;

  if (a3 <= 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSComparisonResult HKCompareDoublesWithAccuracy(double, double, double)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("HKUtilities.m"), 393, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("accuracy > 0"));

  }
  v6 = a1 - a2;
  if (a1 - a2 < 0.0)
    v6 = -(a1 - a2);
  v7 = -1;
  if (a1 >= a2)
    v7 = 1;
  if (v6 >= a3)
    return v7;
  else
    return 0;
}

uint64_t HKCompareIntegers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = -1;
  if (a1 >= a2)
    v2 = 1;
  if (a1 == a2)
    return 0;
  else
    return v2;
}

double HKMachAbsoluteTimeGetCurrent()
{
  return (double)clock_gettime_nsec_np(_CLOCK_UPTIME_RAW) / 1000000000.0;
}

uint64_t HKIsUnitTesting()
{
  if (HKIsUnitTesting_onceToken != -1)
    dispatch_once(&HKIsUnitTesting_onceToken, &__block_literal_global_88);
  return HKIsUnitTesting_result;
}

uint64_t HKMinimumScoreForGAD7AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) >= 3)
    return 0;
  else
    return 5 * (a1 - 2) + 5;
}

uint64_t HKMaximumScoreForGAD7AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 2)
    return 4;
  else
    return qword_19A3AE138[a1 - 2];
}

const __CFString *NSStringFromHKGAD7AssessmentAnswer(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("<unknown>");
  else
    return off_1E37EA510[a1];
}

const __CFString *NSStringFromHKGAD7AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("<unknown>");
  else
    return off_1E37EA530[a1 - 1];
}

void sub_19A1470C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;

  if (a2)
  {
    if (a2 == 2)
    {
      v14 = objc_begin_catch(exception_object);
      _HKInitializeLogging();
      v15 = (id)HKLogDatabase;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        v16 = (void *)objc_opt_class();
        -[_HKZipArchiveExtractor enumerateEntriesWithError:block:].cold.1(v16, (uint64_t)v14, (uint64_t)&a13, v15);
      }

      v17 = (void *)MEMORY[0x1E0CB35C8];
      objc_opt_class();
      objc_msgSend(v17, "hk_assignError:code:format:", v13, 100, CFSTR("Caught exception in %@: %@"));

      objc_end_catch();
      JUMPOUT(0x19A147054);
    }
    objc_begin_catch(exception_object);
    JUMPOUT(0x19A14705CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_19A1472BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A14757C(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    _HKInitializeLogging();
    HKLogInfrastructure();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      -[_HKZipArchiveEntry dataWithMaxSizeBytes:error:].cold.1((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

    objc_msgSend(v2, "raise");
    objc_end_catch();
    JUMPOUT(0x19A147544);
  }
  _Unwind_Resume(exception_object);
}

void sub_19A147768(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    _HKInitializeLogging();
    HKLogInfrastructure();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      -[_HKZipArchiveEntry dataWithMaxSizeBytes:error:].cold.1((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

    objc_msgSend(v2, "raise");
    objc_end_catch();
    JUMPOUT(0x19A1476D0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

__CFString *NSStringFromHKOnboardingCompletionCountryCodeProvenance(uint64_t a1)
{
  __CFString *v2;
  __CFString *result;

  if (a1 > 100)
  {
    switch(a1)
    {
      case 'e':
        return CFSTR("Internal MCC Override");
      case 'f':
        return CFSTR("Demo Data");
      case 'g':
        return CFSTR("Internal Regulatory Domain Override");
      default:
LABEL_13:
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown-%ld"), a1);
        v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
        return v2;
    }
  }
  else
  {
    v2 = CFSTR("Not Set");
    switch(a1)
    {
      case 0:
        return v2;
      case 1:
        v2 = CFSTR("MCC");
        return v2;
      case 2:
        result = CFSTR("Regulatory Domain");
        break;
      case 3:
        result = CFSTR("Copied from Other Completion");
        break;
      default:
        goto LABEL_13;
    }
  }
  return result;
}

void sub_19A14A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A14D690(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t HKHealthStoreProviderClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E808);
}

id HDHealthStoreProviderServerInterface()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40E868);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchAvailableIdentifiersWithCompletion_, 0, 1);
  v2 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_requestAuthorizationToNewIdentifierToShareTypes_readTypes_completion_, 0, 0);
  v3 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_requestAuthorizationToNewIdentifierToShareTypes_readTypes_completion_, 1, 0);
  return v0;
}

void sub_19A14FDA8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

uint64_t HKCodableCondensedWorkoutCollectionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableCondensedWorkout *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableCondensedWorkout);
        objc_msgSend(a1, "addWorkouts:", v17);
        if (!PBReaderPlaceMark() || (HKCodableCondensedWorkoutReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKWheelchairUseDisplayName(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  if (a1)
  {
    if (a1 == 2)
    {
      HKHealthKitFrameworkBundle();
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("WHEELCHAIR_YES");
    }
    else
    {
      if (a1 != 1)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        return v4;
      }
      HKHealthKitFrameworkBundle();
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("WHEELCHAIR_NO");
    }
  }
  else
  {
    HKHealthKitFrameworkBundle();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("WHEELCHAIR_NOT_SET");
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E37FD4C0, CFSTR("Localizable"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t HKDefaultObjectValidationConfiguration()
{
  HKApplicationSDKVersionToken();
  return 0;
}

uint64_t HKDefaultObjectValidationConfigurationIgnoringAllOptions()
{
  HKApplicationSDKVersionToken();
  return -1;
}

uint64_t HKObjectValidationConfigurationWithOptions(uint64_t a1)
{
  HKApplicationSDKVersionToken();
  return a1;
}

uint64_t HKWorkoutSessionStateFromServerState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x10)
    return 3;
  else
    return qword_19A3AE168[a1 - 1];
}

uint64_t HKWorkoutSessionServerStateFromSessionState(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 4)
    return 1;
  else
    return qword_19A3AE1F0[a1 - 2];
}

__CFString *_HKWorkoutSessionServerStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0x11)
    return off_1E37EAA98[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A152EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A153750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19A1538C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

const __CFString *NSStringFromHKFeatureAvailabilityOnboardedCountrySupportedState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("Unknown");
  else
    return off_1E37EB058[a1 - 1];
}

id HKAllFeatureIdentifiers(int a1)
{
  id v2;
  void *v3;
  void *v4;
  int v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  char v16;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if (a1)
    objc_msgSend(v2, "addObject:", CFSTR("AFibBurden"));
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isAppleInternalInstall");

  if (v5)
    objc_msgSend(v3, "addObject:", CFSTR("ExampleFeature"));
  objc_msgSend(v3, "addObject:", CFSTR("MenstrualCycles"));
  objc_msgSend(v3, "addObject:", CFSTR("MenstrualCyclesDeviationDetection"));
  objc_msgSend(v3, "addObject:", CFSTR("MenstrualCyclesHeartRateInput"));
  objc_msgSend(v3, "addObject:", CFSTR("MenstrualCyclesWristTemperatureInput"));
  objc_msgSend(v3, "addObject:", CFSTR("OxygenSaturationRecording"));
  objc_msgSend(v3, "addObject:", CFSTR("CardioFitness"));
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isAppleWatch");

  if ((v7 & 1) == 0)
    objc_msgSend(v3, "addObject:", CFSTR("GlucoseEnhancedCharting"));
  objc_msgSend(v3, "addObject:", CFSTR("ElectrocardiogramRecordingV1"));
  objc_msgSend(v3, "addObject:", CFSTR("ElectrocardiogramV2Recording"));
  objc_msgSend(v3, "addObject:", CFSTR("ElectrocardiogramRecording"));
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "features");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "chamomile");

  if ((v10 & 1) != 0 || a1)
  {
    objc_msgSend(v3, "addObject:", CFSTR("StateOfMindLogging"));
    objc_msgSend(v3, "addObject:", CFSTR("DepressionAndAnxietyAssessments"));
    objc_msgSend(v3, "addObject:", CFSTR("PeriodicDepressionAndAnxietyAssessmentPrompts"));
    objc_msgSend(v3, "addObject:", CFSTR("StateOfMindLoggingPatternEscalations"));
  }
  objc_msgSend(v3, "addObject:", CFSTR("HighHeartRateNotifications"));
  objc_msgSend(v3, "addObject:", CFSTR("IrregularRhythmNotifications"));
  objc_msgSend(v3, "addObject:", CFSTR("IrregularRhythmNotificationsV1"));
  objc_msgSend(v3, "addObject:", CFSTR("IrregularRhythmNotificationsV2"));
  objc_msgSend(v3, "addObject:", CFSTR("LowHeartRateNotifications"));
  objc_msgSend(v3, "addObject:", CFSTR("RespiratoryRateMeasurements"));
  objc_msgSend(v3, "addObject:", CFSTR("SleepingWristTemperatureMeasurements"));
  objc_msgSend(v3, "addObject:", CFSTR("SleepActions"));
  objc_msgSend(v3, "addObject:", CFSTR("SleepCoaching"));
  objc_msgSend(v3, "addObject:", CFSTR("SleepTracking"));
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "features");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "nebula");

  if ((v13 & 1) != 0 || a1)
    objc_msgSend(v3, "addObject:", CFSTR("SleepApneaNotifications"));
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "features");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "harmonia");

  if ((v16 & 1) != 0 || a1)
    objc_msgSend(v3, "addObject:", CFSTR("SleepingSampleAnalysis"));
  objc_msgSend(v3, "addObject:", CFSTR("WalkingSteadinessClassifications"));
  objc_msgSend(v3, "addObject:", CFSTR("WalkingSteadinessNotifications"));
  return v3;
}

uint64_t HKFeatureIdentifierIsProvidedBySleepDaemon(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepCoaching")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("SleepTracking")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("SleepActions"));
  }

  return v2;
}

__CFString *NSStringFromHKFeatureIdentifier(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CardioFitness")) & 1) != 0)
  {
    v2 = CFSTR("Cardio Fitness");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AFibBurden")) & 1) != 0)
  {
    v2 = CFSTR("AFib Burden");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DepressionAndAnxietyAssessments")) & 1) != 0)
  {
    v2 = CFSTR("Depression and Anxiety Assessments");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ElectrocardiogramRecordingV1")) & 1) != 0)
  {
    v2 = CFSTR("ECG 1.0");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ElectrocardiogramV2Recording")) & 1) != 0)
  {
    v2 = CFSTR("ECG 2.0");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ElectrocardiogramRecording")) & 1) != 0)
  {
    v2 = CFSTR("ECG (Combined)");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("GlucoseEnhancedCharting")) & 1) != 0)
  {
    v2 = CFSTR("Glucose Experience");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HighHeartRateNotifications")) & 1) != 0)
  {
    v2 = CFSTR("High Heart Rate Notifications");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("IrregularRhythmNotificationsV1")) & 1) != 0)
  {
    v2 = CFSTR("IRN 1.0");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("IrregularRhythmNotificationsV2")) & 1) != 0)
  {
    v2 = CFSTR("IRN 2.0");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("IrregularRhythmNotifications")) & 1) != 0)
  {
    v2 = CFSTR("IRN (Combined)");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LowHeartRateNotifications")) & 1) != 0)
  {
    v2 = CFSTR("Low Heart Rate Notifications");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MenstrualCycles")) & 1) != 0)
  {
    v2 = CFSTR("Cycle Tracking");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MenstrualCyclesDeviationDetection")) & 1) != 0)
  {
    v2 = CFSTR("Cycle Tracking Deviations");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MenstrualCyclesHeartRateInput")) & 1) != 0)
  {
    v2 = CFSTR("Cycle Tracking Heart Rate Input");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MenstrualCyclesWristTemperatureInput")) & 1) != 0)
  {
    v2 = CFSTR("Cycle Tracking Wrist Temperature Input");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OxygenSaturationRecording")) & 1) != 0)
  {
    v2 = CFSTR("Blood Oxygen");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PeriodicDepressionAndAnxietyAssessmentPrompts")) & 1) != 0)
  {
    v2 = CFSTR("Periodic Depression and Anxiety Assessments Prompts");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepingWristTemperatureMeasurements")) & 1) != 0)
  {
    v2 = CFSTR("Sleeping Wrist Temperature");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepApneaNotifications")) & 1) != 0)
  {
    v2 = CFSTR("Sleep Apnea Notifications");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepActions")) & 1) != 0)
  {
    v2 = CFSTR("Sleep Wind Down Shortcuts");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepCoaching")) & 1) != 0)
  {
    v2 = CFSTR("Sleep");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepTracking")) & 1) != 0)
  {
    v2 = CFSTR("Sleep on Watch Tracking");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("SleepingSampleAnalysis")) & 1) != 0)
  {
    v2 = CFSTR("Sleeping Sample Analysis");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("StateOfMindLogging")) & 1) != 0)
  {
    v2 = CFSTR("State of Mind Logging");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("StateOfMindLoggingPatternEscalations")) & 1) != 0)
  {
    v2 = CFSTR("State of Mind Logging Pattern Escalations");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RespiratoryRateMeasurements")) & 1) != 0)
  {
    v2 = CFSTR("Respiratory Rate");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("WalkingSteadinessClassifications")) & 1) != 0)
  {
    v2 = CFSTR("Walking Steadiness Classifications");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("WalkingSteadinessNotifications")) & 1) != 0)
  {
    v2 = CFSTR("Walking Steadiness Notifications");
  }
  else
  {
    v2 = (__CFString *)v1;
  }

  return v2;
}

id HKAliasesByFeatureIdentifier()
{
  _QWORD v1[30];
  _QWORD v2[31];

  v2[30] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("AFibBurden");
  v1[1] = CFSTR("CardioFitness");
  v2[0] = &unk_1E389D8D0;
  v2[1] = &unk_1E389D8E8;
  v1[2] = CFSTR("DepressionAndAnxietyAssessments");
  v1[3] = CFSTR("ElectrocardiogramRecording");
  v2[2] = &unk_1E389D900;
  v2[3] = &unk_1E389D918;
  v1[4] = CFSTR("ElectrocardiogramRecordingV1");
  v1[5] = CFSTR("ElectrocardiogramV2Recording");
  v2[4] = &unk_1E389D930;
  v2[5] = &unk_1E389D948;
  v1[6] = CFSTR("ExampleFeature");
  v1[7] = CFSTR("GlucoseEnhancedCharting");
  v2[6] = &unk_1E389D960;
  v2[7] = &unk_1E389D978;
  v1[8] = CFSTR("HighHeartRateNotifications");
  v1[9] = CFSTR("IrregularRhythmNotificationsV1");
  v2[8] = &unk_1E389D990;
  v2[9] = &unk_1E389D9A8;
  v1[10] = CFSTR("IrregularRhythmNotificationsV2");
  v1[11] = CFSTR("IrregularRhythmNotifications");
  v2[10] = &unk_1E389D9C0;
  v2[11] = &unk_1E389D9D8;
  v1[12] = CFSTR("LowHeartRateNotifications");
  v1[13] = CFSTR("MenstrualCycles");
  v2[12] = &unk_1E389D9F0;
  v2[13] = &unk_1E389DA08;
  v1[14] = CFSTR("MenstrualCyclesDeviationDetection");
  v1[15] = CFSTR("MenstrualCyclesHeartRateInput");
  v2[14] = &unk_1E389DA20;
  v2[15] = &unk_1E389DA38;
  v1[16] = CFSTR("MenstrualCyclesWristTemperatureInput");
  v1[17] = CFSTR("SleepingWristTemperatureMeasurements");
  v2[16] = &unk_1E389DA50;
  v2[17] = &unk_1E389DA68;
  v1[18] = CFSTR("OxygenSaturationRecording");
  v1[19] = CFSTR("PeriodicDepressionAndAnxietyAssessmentPrompts");
  v2[18] = &unk_1E389DA80;
  v2[19] = &unk_1E389DA98;
  v1[20] = CFSTR("RespiratoryRateMeasurements");
  v1[21] = CFSTR("SleepApneaNotifications");
  v2[20] = &unk_1E389DAB0;
  v2[21] = &unk_1E389DAC8;
  v1[22] = CFSTR("SleepActions");
  v1[23] = CFSTR("SleepCoaching");
  v2[22] = &unk_1E389DAE0;
  v2[23] = &unk_1E389DAF8;
  v1[24] = CFSTR("SleepTracking");
  v1[25] = CFSTR("SleepingSampleAnalysis");
  v2[24] = &unk_1E389DB10;
  v2[25] = &unk_1E389DB28;
  v1[26] = CFSTR("StateOfMindLogging");
  v1[27] = CFSTR("StateOfMindLoggingPatternEscalations");
  v2[26] = &unk_1E389DB40;
  v2[27] = &unk_1E389DB58;
  v1[28] = CFSTR("WalkingSteadinessClassifications");
  v1[29] = CFSTR("WalkingSteadinessNotifications");
  v2[28] = &unk_1E389DB70;
  v2[29] = &unk_1E389DB88;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 30);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t HKFeaturePropertiesChangeNotificationForFeatureIdentifier(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@.change"), _HKFeaturePropertiesDefaultsDomainPrefix, a1);
}

uint64_t HKLocalDeviceHardwareSupportsWristTemperatureMeasurements()
{
  if ((MGIsDeviceOfType() & 1) != 0)
    return 1;
  else
    return MGGetBoolAnswer();
}

id HKRegulatoryDomainEstimateOverrideISOCode()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!+[_HKBehavior isAppleInternalInstall](_HKBehavior, "isAppleInternalInstall"))
    return 0;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringForKey:", CFSTR("HealthRegulatoryDomainISOCountryCodeOverride"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "hk_copyNonEmptyString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    v4 = v2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringForKey:", CFSTR("MobileCountryCodeOverride"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hk_copyNonEmptyString");
    v4 = (id)objc_claimAutoreleasedReturnValue();

  }
  if (!v4)
    return 0;
  _HKInitializeLogging();
  HKLogInfrastructure();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138543362;
    v11 = v4;
    _os_log_impl(&dword_19A0E6000, v7, OS_LOG_TYPE_DEFAULT, "[HKRegulatoryDomainEstimate] Returning overridden ISO %{public}@.", (uint8_t *)&v10, 0xCu);
  }

  objc_msgSend(v4, "uppercaseString");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19A159AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

id HKPrettyPrintedFeatureStatus(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  HKTableFormatter *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  void *v25;
  int v26;
  __CFString *v27;
  __CFString *v28;
  void *v29;
  const __CFString *v30;
  __CFString *v31;
  id v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id obj;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD v56[2];
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "onboardingRecord");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  HKPrettyPrintedFeatureOnboardingRecord(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "appendString:", v9);

  v43 = v5;
  objc_msgSend(v5, "requirementsEvaluationByContext");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "allKeys");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "sortedArrayUsingSelector:", sel_compare_);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  obj = v12;
  v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
  if (v44)
  {
    v41 = v7;
    v42 = *(_QWORD *)v53;
    v46 = a3;
    do
    {
      for (i = 0; i != v44; ++i)
      {
        if (*(_QWORD *)v53 != v42)
          objc_enumerationMutation(obj);
        v14 = *(_QWORD *)(*((_QWORD *)&v52 + 1) + 8 * i);
        objc_msgSend(v7, "appendFormat:", CFSTR("\n======== Evaluation for %@ ========\n"), v14);
        objc_msgSend(v43, "requirementsEvaluationByContext");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "objectForKeyedSubscript:", v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v16, "requirementIdentifiersOrderedByPriority");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = objc_msgSend(v17, "count");

        if (v18)
        {
          v45 = i;
          v19 = -[HKTableFormatter initWithColumnTitles:]([HKTableFormatter alloc], "initWithColumnTitles:", 0);
          v48 = 0u;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          objc_msgSend(v16, "requirementIdentifiersOrderedByPriority");
          v47 = (id)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v48, v57, 16);
          v21 = v46;
          if (v20)
          {
            v22 = v20;
            v23 = *(_QWORD *)v49;
            do
            {
              for (j = 0; j != v22; ++j)
              {
                if (*(_QWORD *)v49 != v23)
                  objc_enumerationMutation(v47);
                v25 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * j);
                v26 = objc_msgSend(v16, "isRequirementSatisfiedWithIdentifier:", v25);
                v27 = CFSTR(" NO");
                if (v26)
                  v27 = CFSTR("YES");
                v28 = v27;
                objc_msgSend(v6, "overriddenSatisfactionOfRequirementWithIdentifier:", v25);
                v29 = (void *)objc_claimAutoreleasedReturnValue();

                if (v29)
                  v30 = CFSTR(" (*)");
                else
                  v30 = &stru_1E37FD4C0;
                -[__CFString stringByAppendingString:](v28, "stringByAppendingString:", v30);
                v31 = (__CFString *)objc_claimAutoreleasedReturnValue();

                if (v21 && HKFeatureAvailabilityRequirementIdentifierReflectsSensitiveData(v25))
                {
                  v32 = v6;
                  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  v34 = objc_msgSend(v33, "showSensitiveLogItems");

                  if ((v34 & 1) == 0)
                  {

                    v31 = CFSTR("<sensitive>");
                  }
                  v6 = v32;
                  v21 = v46;
                }
                objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:"), v25);
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                v56[0] = v35;
                v56[1] = v31;
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v56, 2);
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                -[HKTableFormatter appendRow:](v19, "appendRow:", v36);

              }
              v22 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v48, v57, 16);
            }
            while (v22);
          }

          -[HKTableFormatter formattedTable](v19, "formattedTable");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = v41;
          objc_msgSend(v41, "appendString:", v37);

          i = v45;
        }
        else
        {
          objc_msgSend(v7, "appendString:", CFSTR("<no requirements>\n"));
        }

      }
      v44 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
    }
    while (v44);
  }

  v38 = (void *)objc_msgSend(v7, "copy");
  return v38;
}

uint64_t HKHearingLevelClassificationForSensitivity(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = a1;
  if (v1)
  {
    +[HKUnit decibelHearingLevelUnit](HKUnit, "decibelHearingLevelUnit");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "doubleValueForUnit:", v2);
    v4 = v3;

    v5 = 0;
    do
    {
      v6 = v5 * 8 + 32;
      if (v5 == 20)
        break;
      v7 = _HKHearingLevelClassificationInformationItems[v5 + 2];
      v5 += 4;
    }
    while (v4 >= *(double *)&v7);
    v8 = *(uint64_t *)((char *)&_HKHearingLevelClassificationInformationItems[-4] + v6);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id HKMinimumDecibelQuantityForHearingLevelClassification(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;

  if ((unint64_t)(a1 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v2 = _HKHearingLevelClassificationInformationItems[4 * a1 + 1];
    +[HKUnit decibelHearingLevelUnit](HKUnit, "decibelHearingLevelUnit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v3, *(double *)&v2);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

id HKMaximumDecibelQuantityForHearingLevelClassification(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;

  if ((unint64_t)(a1 - 6) >= 0xFFFFFFFFFFFFFFFBLL)
  {
    v2 = _HKHearingLevelClassificationInformationItems[4 * a1 + 2];
    +[HKUnit decibelHearingLevelUnit](HKUnit, "decibelHearingLevelUnit");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v3, *(double *)&v2);
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

id HKLocalizedStringForHearingLevelClassification(unint64_t a1)
{
  void *v1;
  id v2;
  void *v3;

  if (a1 <= 5)
  {
    v2 = _HKHearingLevelClassificationInformationItems[4 * a1 + 3];
    HKHealthKitFrameworkBundle();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedStringForKey:value:table:", v2, &stru_1E37FD4C0, CFSTR("Localizable-DataTypes"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void sub_19A15F594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HKCodableQuantitySeriesReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableQuantitySeriesDatum *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 3)
      {
        v17 = objc_alloc_init(HKCodableQuantitySeriesDatum);
        objc_msgSend(a1, "addValues:", v17);
        if (!PBReaderPlaceMark() || (HKCodableQuantitySeriesDatumReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKPreferredRegulatoryDomainProvider()
{
  void *v0;
  void *v1;
  int v2;
  __objc2_class **v3;

  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "features");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "regulatoryDomain");

  v3 = off_1E37E5010;
  if (!v2)
    v3 = off_1E37E4E60;
  return objc_alloc_init(*v3);
}

void sub_19A162800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A162ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A162CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRDEstimateClass_block_invoke(uint64_t a1)
{
  Class result;

  RegulatoryDomainLibrary();
  result = objc_getClass("RDEstimate");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getRDEstimateClass_block_invoke_cold_1();
  getRDEstimateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t RegulatoryDomainLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!RegulatoryDomainLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E37EB318;
    v3 = 0;
    RegulatoryDomainLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!RegulatoryDomainLibraryCore_frameworkLibrary)
    RegulatoryDomainLibrary_cold_1(&v1);
  return RegulatoryDomainLibraryCore_frameworkLibrary;
}

__CFString *HKSleepDaySummaryQueryOptionsStringRepresentation(char a1)
{
  id v2;
  void *v3;
  __CFString *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("skipDaysWithoutSleepAnalysis"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("onlySleepAnalysis"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  objc_msgSend(v3, "addObject:", CFSTR("surfaceSleepStages"));
  if ((a1 & 8) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("aggregateWeekly"));
LABEL_6:
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR("|"));
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = CFSTR("none");
  }

  return v4;
}

uint64_t HKMakeSleepDaySummaryQueryOptionsFromStringRepresentation(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("|"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = v1;
    v2 = v1;
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v2);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          v5 |= objc_msgSend(v8, "isEqualToString:", CFSTR("skipDaysWithoutSleepAnalysis"));
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("onlySleepAnalysis")))
            v5 |= 2uLL;
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("surfaceSleepStages")))
            v5 |= 4uLL;
          if (objc_msgSend(v8, "isEqualToString:", CFSTR("aggregateWeekly")))
            v5 |= 8uLL;
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }

    v1 = v10;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19A1683C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void sub_19A1689FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19A168EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *HKStringFromUserDomainConceptStoreMethod(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 3)
    return off_1E37EB5E0[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A169C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

__CFString *HKStringFromUserDomainConceptStoreChangeType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 4)
    return off_1E37EB5F8[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t _IsQuantityKeyPath(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("min")) & 1) != 0
    || (objc_msgSend(v1, "isEqualToString:", CFSTR("max")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("most_recent"));
  }

  return v2;
}

uint64_t _IsDateKeyPath(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("most_recent_start_date")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("most_recent_end_date"));

  return v2;
}

uint64_t _HasValidAggregationStyle(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1;
  v4 = objc_msgSend(v3, "aggregationStyle");
  if ((unint64_t)(v4 - 1) >= 3)
  {
    if (!v4)
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a2, 3, CFSTR("%@ has invalid aggregation style %ld"), v3, objc_msgSend(v3, "aggregationStyle"));
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

id _HKAllObjectTypes()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  id v239;
  id v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  id v258;
  id v259;
  id v260;
  id v261;
  id v262;
  _QWORD v263[263];

  MEMORY[0x1E0C80A78]();
  v263[261] = *MEMORY[0x1E0C80C00];
  v262 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 0);
  v263[0] = v262;
  v261 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 1);
  v263[1] = v261;
  v260 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 2);
  v263[2] = v260;
  v259 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 3);
  v263[3] = v259;
  v258 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 4);
  v263[4] = v258;
  v257 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 5);
  v263[5] = v257;
  v256 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 7);
  v263[6] = v256;
  v255 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 8);
  v263[7] = v255;
  v254 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 9);
  v263[8] = v254;
  v253 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 10);
  v263[9] = v253;
  v252 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 12);
  v263[10] = v252;
  v251 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 13);
  v263[11] = v251;
  v250 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 14);
  v263[12] = v250;
  v249 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 15);
  v263[13] = v249;
  v248 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 16);
  v263[14] = v248;
  v247 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 17);
  v263[15] = v247;
  v246 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 18);
  v263[16] = v246;
  v245 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 19);
  v263[17] = v245;
  v244 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 20);
  v263[18] = v244;
  v243 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 21);
  v263[19] = v243;
  v242 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 22);
  v263[20] = v242;
  v241 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 23);
  v263[21] = v241;
  v240 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 24);
  v263[22] = v240;
  v239 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 25);
  v263[23] = v239;
  v238 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 26);
  v263[24] = v238;
  v237 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 27);
  v263[25] = v237;
  v236 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 28);
  v263[26] = v236;
  v235 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 29);
  v263[27] = v235;
  v234 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 30);
  v263[28] = v234;
  v233 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 31);
  v263[29] = v233;
  v232 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 32);
  v263[30] = v232;
  v231 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 33);
  v263[31] = v231;
  v230 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 34);
  v263[32] = v230;
  v229 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 35);
  v263[33] = v229;
  v228 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 36);
  v263[34] = v228;
  v227 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 37);
  v263[35] = v227;
  v226 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 38);
  v263[36] = v226;
  v225 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 39);
  v263[37] = v225;
  v224 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 40);
  v263[38] = v224;
  v223 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 41);
  v263[39] = v223;
  v222 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 42);
  v263[40] = v222;
  v221 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 43);
  v263[41] = v221;
  v220 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 44);
  v263[42] = v220;
  v219 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 45);
  v263[43] = v219;
  v218 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 46);
  v263[44] = v218;
  v217 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 47);
  v263[45] = v217;
  v216 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 48);
  v263[46] = v216;
  v215 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 49);
  v263[47] = v215;
  v214 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 50);
  v263[48] = v214;
  v213 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 51);
  v263[49] = v213;
  v212 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 52);
  v263[50] = v212;
  v211 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 53);
  v263[51] = v211;
  v210 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 54);
  v263[52] = v210;
  v209 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 55);
  v263[53] = v209;
  v208 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 56);
  v263[54] = v208;
  v207 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 57);
  v263[55] = v207;
  v206 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 58);
  v263[56] = v206;
  v205 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 60);
  v263[57] = v205;
  v204 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 61);
  v263[58] = v204;
  v203 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 62);
  v263[59] = v203;
  v202 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 63);
  v263[60] = v202;
  v201 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 64);
  v263[61] = v201;
  v200 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 65);
  v263[62] = v200;
  v199 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 66);
  v263[63] = v199;
  v198 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 67);
  v263[64] = v198;
  v197 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 68);
  v263[65] = v197;
  v196 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 70);
  v263[66] = v196;
  v195 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 71);
  v263[67] = v195;
  v194 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 72);
  v263[68] = v194;
  v193 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 73);
  v263[69] = v193;
  v192 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 75);
  v263[70] = v192;
  v191 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 76);
  v263[71] = v191;
  v190 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 77);
  v263[72] = v190;
  v189 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 78);
  v263[73] = v189;
  v188 = -[HKObjectType _initWithCode:]([HKWorkoutType alloc], "_initWithCode:", 79);
  v263[74] = v188;
  v187 = -[HKObjectType _initWithCode:]([HKCorrelationType alloc], "_initWithCode:", 80);
  v263[75] = v187;
  v186 = -[HKObjectType _initWithCode:]([HKCorrelationType alloc], "_initWithCode:", 81);
  v263[76] = v186;
  v185 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 83);
  v263[77] = v185;
  v184 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 84);
  v263[78] = v184;
  v183 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 85);
  v263[79] = v183;
  v182 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 86);
  v263[80] = v182;
  v181 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 87);
  v263[81] = v181;
  v180 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 88);
  v263[82] = v180;
  v179 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 89);
  v263[83] = v179;
  v178 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 90);
  v263[84] = v178;
  v177 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 91);
  v263[85] = v177;
  v176 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 92);
  v263[86] = v176;
  v175 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 95);
  v263[87] = v175;
  v174 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 96);
  v263[88] = v174;
  v173 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 97);
  v263[89] = v173;
  v172 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 98);
  v263[90] = v172;
  v171 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 99);
  v263[91] = v171;
  v170 = -[HKObjectType _initWithCode:]([HKActivitySummaryType alloc], "_initWithCode:", 100);
  v263[92] = v170;
  v169 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 101);
  v263[93] = v169;
  v168 = -[HKObjectType _initWithCode:]([HKSeriesType alloc], "_initWithCode:", 102);
  v263[94] = v168;
  v167 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 103);
  v263[95] = v167;
  v166 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 104);
  v263[96] = v166;
  v165 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 105);
  v263[97] = v165;
  v164 = -[HKObjectType _initWithCode:]([HKDocumentType alloc], "_initWithCode:", 107);
  v263[98] = v164;
  v163 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 108);
  v263[99] = v163;
  v162 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 109);
  v263[100] = v162;
  v161 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 110);
  v263[101] = v161;
  v160 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 111);
  v263[102] = v160;
  v159 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 112);
  v263[103] = v159;
  v158 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 113);
  v263[104] = v158;
  v157 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 114);
  v263[105] = v157;
  v156 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 116);
  v263[106] = v156;
  v155 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 118);
  v263[107] = v155;
  v154 = -[HKObjectType _initWithCode:]([HKSeriesType alloc], "_initWithCode:", 119);
  v263[108] = v154;
  v153 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 124);
  v263[109] = v153;
  v152 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 125);
  v263[110] = v152;
  v151 = -[HKObjectType _initWithCode:]([HKMedicationOrderType alloc], "_initWithCode:", 126);
  v263[111] = v151;
  v150 = -[HKObjectType _initWithCode:]([HKMedicationDispenseRecordType alloc], "_initWithCode:", 127);
  v263[112] = v150;
  v149 = -[HKObjectType _initWithCode:]([HKMedicationRecordType alloc], "_initWithCode:", 128);
  v263[113] = v149;
  v148 = -[HKObjectType _initWithCode:]([HKDiagnosticTestResultType alloc], "_initWithCode:", 129);
  v263[114] = v148;
  v147 = -[HKObjectType _initWithCode:]([HKDiagnosticTestReportType alloc], "_initWithCode:", 130);
  v263[115] = v147;
  v146 = -[HKObjectType _initWithCode:]([HKVaccinationRecordType alloc], "_initWithCode:", 131);
  v263[116] = v146;
  v145 = -[HKObjectType _initWithCode:]([HKConditionRecordType alloc], "_initWithCode:", 132);
  v263[117] = v145;
  v144 = -[HKObjectType _initWithCode:]([HKAllergyRecordType alloc], "_initWithCode:", 133);
  v263[118] = v144;
  v143 = -[HKObjectType _initWithCode:]([HKProcedureRecordType alloc], "_initWithCode:", 134);
  v263[119] = v143;
  v142 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 137);
  v263[120] = v142;
  v141 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 138);
  v263[121] = v141;
  v140 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 139);
  v263[122] = v140;
  v139 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 140);
  v263[123] = v139;
  v138 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 141);
  v263[124] = v138;
  v137 = -[HKObjectType _initWithCode:]([HKAccountOwnerType alloc], "_initWithCode:", 142);
  v263[125] = v137;
  v136 = -[HKObjectType _initWithCode:]([HKUnknownRecordType alloc], "_initWithCode:", 143);
  v263[126] = v136;
  v135 = -[HKObjectType _initWithCode:]([HKElectrocardiogramType alloc], "_initWithCode:", 144);
  v263[127] = v135;
  v134 = -[HKObjectType _initWithCode:]([HKAudiogramSampleType alloc], "_initWithCode:", 145);
  v263[128] = v134;
  v133 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 147);
  v263[129] = v133;
  v132 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 149);
  v263[130] = v132;
  v131 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 150);
  v263[131] = v131;
  v130 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 151);
  v263[132] = v130;
  v129 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 152);
  v263[133] = v129;
  v128 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 153);
  v263[134] = v128;
  v127 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 154);
  v263[135] = v127;
  v126 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 155);
  v263[136] = v126;
  v125 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 156);
  v263[137] = v125;
  v124 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 157);
  v263[138] = v124;
  v123 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 158);
  v263[139] = v123;
  v122 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 159);
  v263[140] = v122;
  v121 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 160);
  v263[141] = v121;
  v120 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 161);
  v263[142] = v120;
  v119 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 162);
  v263[143] = v119;
  v118 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 163);
  v263[144] = v118;
  v117 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 164);
  v263[145] = v117;
  v116 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 165);
  v263[146] = v116;
  v115 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 166);
  v263[147] = v115;
  v114 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 167);
  v263[148] = v114;
  v113 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 168);
  v263[149] = v113;
  v112 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 169);
  v263[150] = v112;
  v111 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 170);
  v263[151] = v111;
  v110 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 171);
  v263[152] = v110;
  v109 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 172);
  v263[153] = v109;
  v108 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 173);
  v263[154] = v108;
  v107 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 175);
  v263[155] = v107;
  v106 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 176);
  v263[156] = v106;
  v105 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 177);
  v263[157] = v105;
  v104 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 178);
  v263[158] = v104;
  v103 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 179);
  v263[159] = v103;
  v102 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 180);
  v263[160] = v102;
  v101 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 182);
  v263[161] = v101;
  v100 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 183);
  v263[162] = v100;
  v99 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 186);
  v263[163] = v99;
  v98 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 187);
  v263[164] = v98;
  v97 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 188);
  v263[165] = v97;
  v96 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 189);
  v263[166] = v96;
  v95 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 190);
  v263[167] = v95;
  v94 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 191);
  v263[168] = v94;
  v93 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 192);
  v263[169] = v93;
  v92 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 193);
  v263[170] = v92;
  v91 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 194);
  v263[171] = v91;
  v90 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 195);
  v263[172] = v90;
  v89 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 196);
  v263[173] = v89;
  v88 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 197);
  v263[174] = v88;
  v87 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 198);
  v263[175] = v87;
  v86 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 199);
  v263[176] = v86;
  v85 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 201);
  v263[177] = v85;
  v84 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 202);
  v263[178] = v84;
  v83 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 203);
  v263[179] = v83;
  v82 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 204);
  v263[180] = v82;
  v81 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 205);
  v263[181] = v81;
  v80 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 206);
  v263[182] = v80;
  v79 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 207);
  v263[183] = v79;
  v78 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 211);
  v263[184] = v78;
  v77 = -[HKObjectType _initWithCode:]([HKCoverageRecordType alloc], "_initWithCode:", 216);
  v263[185] = v77;
  v76 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 217);
  v263[186] = v76;
  v75 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 218);
  v263[187] = v75;
  v74 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 220);
  v263[188] = v74;
  v73 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 221);
  v263[189] = v73;
  v72 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 222);
  v263[190] = v72;
  v71 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 223);
  v263[191] = v71;
  v70 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 224);
  v263[192] = v70;
  v69 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 225);
  v263[193] = v69;
  v68 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 226);
  v263[194] = v68;
  v67 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 229);
  v263[195] = v67;
  v66 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 230);
  v263[196] = v66;
  v65 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 231);
  v263[197] = v65;
  v64 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 232);
  v263[198] = v64;
  v63 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 233);
  v263[199] = v63;
  v62 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 234);
  v263[200] = v62;
  v61 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 235);
  v263[201] = v61;
  v60 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 236);
  v263[202] = v60;
  v59 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 237);
  v263[203] = v59;
  v58 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 240);
  v263[204] = v58;
  v57 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 241);
  v263[205] = v57;
  v56 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 242);
  v263[206] = v56;
  v55 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 243);
  v263[207] = v55;
  v54 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 244);
  v263[208] = v54;
  v53 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 248);
  v263[209] = v53;
  v52 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 249);
  v263[210] = v52;
  v51 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 250);
  v263[211] = v51;
  v50 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 251);
  v263[212] = v50;
  v49 = -[HKObjectType _initWithCode:]([HKSignedClinicalDataRecordType alloc], "_initWithCode:", 252);
  v263[213] = v49;
  v48 = -[HKObjectType _initWithCode:]([HKVerifiableClinicalRecordType alloc], "_initWithCode:", 253);
  v263[214] = v48;
  v47 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 256);
  v263[215] = v47;
  v46 = -[HKObjectType _initWithCode:]([HKPrescriptionType alloc], "_initWithCode:", 257);
  v263[216] = v46;
  v45 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 258);
  v263[217] = v45;
  v44 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 259);
  v263[218] = v44;
  v43 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 260);
  v263[219] = v43;
  v42 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 262);
  v263[220] = v42;
  v41 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 263);
  v263[221] = v41;
  v40 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 264);
  v263[222] = v40;
  v39 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 265);
  v263[223] = v39;
  v38 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 266);
  v263[224] = v38;
  v37 = -[HKObjectType _initWithCode:]([HKClinicalNoteRecordType alloc], "_initWithCode:", 267);
  v263[225] = v37;
  v36 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 268);
  v263[226] = v36;
  v35 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 269);
  v263[227] = v35;
  v34 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 270);
  v263[228] = v34;
  v33 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 272);
  v263[229] = v33;
  v32 = -[HKObjectType _initWithCode:]([HKMedicationDoseEventType alloc], "_initWithCode:", 273);
  v263[230] = v32;
  v31 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 274);
  v263[231] = v31;
  v30 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 275);
  v263[232] = v30;
  v29 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 276);
  v263[233] = v29;
  v28 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 277);
  v263[234] = v28;
  v27 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 279);
  v263[235] = v27;
  v26 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 280);
  v263[236] = v26;
  v25 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 281);
  v263[237] = v25;
  v24 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 282);
  v263[238] = v24;
  v23 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 283);
  v263[239] = v23;
  v22 = -[HKObjectType _initWithCode:]([HKStateOfMindType alloc], "_initWithCode:", 284);
  v263[240] = v22;
  v21 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 286);
  v263[241] = v21;
  v20 = -[HKObjectType _initWithCode:]([HKScoredAssessmentType alloc], "_initWithCode:", 287);
  v263[242] = v20;
  v19 = -[HKObjectType _initWithCode:]([HKScoredAssessmentType alloc], "_initWithCode:", 288);
  v263[243] = v19;
  v18 = -[HKObjectType _initWithCode:]([HKWorkoutZonesType alloc], "_initWithCode:", 289);
  v263[244] = v18;
  v17 = -[HKObjectType _initWithCode:]([HKWorkoutZonesType alloc], "_initWithCode:", 290);
  v263[245] = v17;
  v16 = -[HKObjectType _initWithCode:]([HKUserTrackedConceptType alloc], "_initWithCode:", 291);
  v263[246] = v16;
  v15 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 294);
  v263[247] = v15;
  v14 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 295);
  v263[248] = v14;
  v13 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 296);
  v263[249] = v13;
  v12 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 297);
  v263[250] = v12;
  v0 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 298);
  v263[251] = v0;
  v1 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 299);
  v263[252] = v1;
  v2 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 300);
  v263[253] = v2;
  v3 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 301);
  v263[254] = v3;
  v4 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 302);
  v263[255] = v4;
  v5 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 303);
  v263[256] = v5;
  v6 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 304);
  v263[257] = v6;
  v7 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 305);
  v263[258] = v7;
  v8 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 313);
  v263[259] = v8;
  v9 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 314);
  v263[260] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v263, 261);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  return v11;
}

void _HKEnumerateObjectTypes(void (**a1)(_QWORD, _QWORD))
{
  void (**v2)(_QWORD, _QWORD);
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  id v229;
  id v230;
  id v231;
  id v232;
  id v233;
  id v234;
  id v235;
  id v236;
  id v237;
  id v238;
  id v239;
  id v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  id v255;
  id v256;
  id v257;
  id v258;
  id v259;
  id v260;
  id v261;
  id v262;
  id v263;

  v2 = a1;
  v3 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 0);
  ((void (**)(_QWORD, id))a1)[2](v2, v3);

  v4 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 1);
  ((void (**)(_QWORD, id))a1)[2](v2, v4);

  v5 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 2);
  ((void (**)(_QWORD, id))a1)[2](v2, v5);

  v6 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 3);
  ((void (**)(_QWORD, id))a1)[2](v2, v6);

  v7 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 4);
  ((void (**)(_QWORD, id))a1)[2](v2, v7);

  v8 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 5);
  ((void (**)(_QWORD, id))a1)[2](v2, v8);

  v9 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 7);
  ((void (**)(_QWORD, id))a1)[2](v2, v9);

  v10 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 8);
  ((void (**)(_QWORD, id))a1)[2](v2, v10);

  v11 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 9);
  ((void (**)(_QWORD, id))a1)[2](v2, v11);

  v12 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 10);
  ((void (**)(_QWORD, id))a1)[2](v2, v12);

  v13 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 12);
  ((void (**)(_QWORD, id))a1)[2](v2, v13);

  v14 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 13);
  ((void (**)(_QWORD, id))a1)[2](v2, v14);

  v15 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 14);
  ((void (**)(_QWORD, id))a1)[2](v2, v15);

  v16 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 15);
  ((void (**)(_QWORD, id))a1)[2](v2, v16);

  v17 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 16);
  ((void (**)(_QWORD, id))a1)[2](v2, v17);

  v18 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 17);
  ((void (**)(_QWORD, id))a1)[2](v2, v18);

  v19 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 18);
  ((void (**)(_QWORD, id))a1)[2](v2, v19);

  v20 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 19);
  ((void (**)(_QWORD, id))a1)[2](v2, v20);

  v21 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 20);
  ((void (**)(_QWORD, id))a1)[2](v2, v21);

  v22 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 21);
  ((void (**)(_QWORD, id))a1)[2](v2, v22);

  v23 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 22);
  ((void (**)(_QWORD, id))a1)[2](v2, v23);

  v24 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 23);
  ((void (**)(_QWORD, id))a1)[2](v2, v24);

  v25 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 24);
  ((void (**)(_QWORD, id))a1)[2](v2, v25);

  v26 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 25);
  ((void (**)(_QWORD, id))a1)[2](v2, v26);

  v27 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 26);
  ((void (**)(_QWORD, id))a1)[2](v2, v27);

  v28 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 27);
  ((void (**)(_QWORD, id))a1)[2](v2, v28);

  v29 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 28);
  ((void (**)(_QWORD, id))a1)[2](v2, v29);

  v30 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 29);
  ((void (**)(_QWORD, id))a1)[2](v2, v30);

  v31 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 30);
  ((void (**)(_QWORD, id))a1)[2](v2, v31);

  v32 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 31);
  ((void (**)(_QWORD, id))a1)[2](v2, v32);

  v33 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 32);
  ((void (**)(_QWORD, id))a1)[2](v2, v33);

  v34 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 33);
  ((void (**)(_QWORD, id))a1)[2](v2, v34);

  v35 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 34);
  ((void (**)(_QWORD, id))a1)[2](v2, v35);

  v36 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 35);
  ((void (**)(_QWORD, id))a1)[2](v2, v36);

  v37 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 36);
  ((void (**)(_QWORD, id))a1)[2](v2, v37);

  v38 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 37);
  ((void (**)(_QWORD, id))a1)[2](v2, v38);

  v39 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 38);
  ((void (**)(_QWORD, id))a1)[2](v2, v39);

  v40 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 39);
  ((void (**)(_QWORD, id))a1)[2](v2, v40);

  v41 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 40);
  ((void (**)(_QWORD, id))a1)[2](v2, v41);

  v42 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 41);
  ((void (**)(_QWORD, id))a1)[2](v2, v42);

  v43 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 42);
  ((void (**)(_QWORD, id))a1)[2](v2, v43);

  v44 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 43);
  ((void (**)(_QWORD, id))a1)[2](v2, v44);

  v45 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 44);
  ((void (**)(_QWORD, id))a1)[2](v2, v45);

  v46 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 45);
  ((void (**)(_QWORD, id))a1)[2](v2, v46);

  v47 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 46);
  ((void (**)(_QWORD, id))a1)[2](v2, v47);

  v48 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 47);
  ((void (**)(_QWORD, id))a1)[2](v2, v48);

  v49 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 48);
  ((void (**)(_QWORD, id))a1)[2](v2, v49);

  v50 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 49);
  ((void (**)(_QWORD, id))a1)[2](v2, v50);

  v51 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 50);
  ((void (**)(_QWORD, id))a1)[2](v2, v51);

  v52 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 51);
  ((void (**)(_QWORD, id))a1)[2](v2, v52);

  v53 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 52);
  ((void (**)(_QWORD, id))a1)[2](v2, v53);

  v54 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 53);
  ((void (**)(_QWORD, id))a1)[2](v2, v54);

  v55 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 54);
  ((void (**)(_QWORD, id))a1)[2](v2, v55);

  v56 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 55);
  ((void (**)(_QWORD, id))a1)[2](v2, v56);

  v57 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 56);
  ((void (**)(_QWORD, id))a1)[2](v2, v57);

  v58 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 57);
  ((void (**)(_QWORD, id))a1)[2](v2, v58);

  v59 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 58);
  ((void (**)(_QWORD, id))a1)[2](v2, v59);

  v60 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 60);
  ((void (**)(_QWORD, id))a1)[2](v2, v60);

  v61 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 61);
  ((void (**)(_QWORD, id))a1)[2](v2, v61);

  v62 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 62);
  ((void (**)(_QWORD, id))a1)[2](v2, v62);

  v63 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 63);
  ((void (**)(_QWORD, id))a1)[2](v2, v63);

  v64 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 64);
  ((void (**)(_QWORD, id))a1)[2](v2, v64);

  v65 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 65);
  ((void (**)(_QWORD, id))a1)[2](v2, v65);

  v66 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 66);
  ((void (**)(_QWORD, id))a1)[2](v2, v66);

  v67 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 67);
  ((void (**)(_QWORD, id))a1)[2](v2, v67);

  v68 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 68);
  ((void (**)(_QWORD, id))a1)[2](v2, v68);

  v69 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 70);
  ((void (**)(_QWORD, id))a1)[2](v2, v69);

  v70 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 71);
  ((void (**)(_QWORD, id))a1)[2](v2, v70);

  v71 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 72);
  ((void (**)(_QWORD, id))a1)[2](v2, v71);

  v72 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 73);
  ((void (**)(_QWORD, id))a1)[2](v2, v72);

  v73 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 75);
  ((void (**)(_QWORD, id))a1)[2](v2, v73);

  v74 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 76);
  ((void (**)(_QWORD, id))a1)[2](v2, v74);

  v75 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 77);
  ((void (**)(_QWORD, id))a1)[2](v2, v75);

  v76 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 78);
  ((void (**)(_QWORD, id))a1)[2](v2, v76);

  v77 = -[HKObjectType _initWithCode:]([HKWorkoutType alloc], "_initWithCode:", 79);
  ((void (**)(_QWORD, id))a1)[2](v2, v77);

  v78 = -[HKObjectType _initWithCode:]([HKCorrelationType alloc], "_initWithCode:", 80);
  ((void (**)(_QWORD, id))a1)[2](v2, v78);

  v79 = -[HKObjectType _initWithCode:]([HKCorrelationType alloc], "_initWithCode:", 81);
  ((void (**)(_QWORD, id))a1)[2](v2, v79);

  v80 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 83);
  ((void (**)(_QWORD, id))a1)[2](v2, v80);

  v81 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 84);
  ((void (**)(_QWORD, id))a1)[2](v2, v81);

  v82 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 85);
  ((void (**)(_QWORD, id))a1)[2](v2, v82);

  v83 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 86);
  ((void (**)(_QWORD, id))a1)[2](v2, v83);

  v84 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 87);
  ((void (**)(_QWORD, id))a1)[2](v2, v84);

  v85 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 88);
  ((void (**)(_QWORD, id))a1)[2](v2, v85);

  v86 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 89);
  ((void (**)(_QWORD, id))a1)[2](v2, v86);

  v87 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 90);
  ((void (**)(_QWORD, id))a1)[2](v2, v87);

  v88 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 91);
  ((void (**)(_QWORD, id))a1)[2](v2, v88);

  v89 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 92);
  ((void (**)(_QWORD, id))a1)[2](v2, v89);

  v90 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 95);
  ((void (**)(_QWORD, id))a1)[2](v2, v90);

  v91 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 96);
  ((void (**)(_QWORD, id))a1)[2](v2, v91);

  v92 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 97);
  ((void (**)(_QWORD, id))a1)[2](v2, v92);

  v93 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 98);
  ((void (**)(_QWORD, id))a1)[2](v2, v93);

  v94 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 99);
  ((void (**)(_QWORD, id))a1)[2](v2, v94);

  v95 = -[HKObjectType _initWithCode:]([HKActivitySummaryType alloc], "_initWithCode:", 100);
  ((void (**)(_QWORD, id))a1)[2](v2, v95);

  v96 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 101);
  ((void (**)(_QWORD, id))a1)[2](v2, v96);

  v97 = -[HKObjectType _initWithCode:]([HKSeriesType alloc], "_initWithCode:", 102);
  ((void (**)(_QWORD, id))a1)[2](v2, v97);

  v98 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 103);
  ((void (**)(_QWORD, id))a1)[2](v2, v98);

  v99 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 104);
  ((void (**)(_QWORD, id))a1)[2](v2, v99);

  v100 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 105);
  ((void (**)(_QWORD, id))a1)[2](v2, v100);

  v101 = -[HKObjectType _initWithCode:]([HKDocumentType alloc], "_initWithCode:", 107);
  ((void (**)(_QWORD, id))a1)[2](v2, v101);

  v102 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 108);
  ((void (**)(_QWORD, id))a1)[2](v2, v102);

  v103 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 109);
  ((void (**)(_QWORD, id))a1)[2](v2, v103);

  v104 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 110);
  ((void (**)(_QWORD, id))a1)[2](v2, v104);

  v105 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 111);
  ((void (**)(_QWORD, id))a1)[2](v2, v105);

  v106 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 112);
  ((void (**)(_QWORD, id))a1)[2](v2, v106);

  v107 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 113);
  ((void (**)(_QWORD, id))a1)[2](v2, v107);

  v108 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 114);
  ((void (**)(_QWORD, id))a1)[2](v2, v108);

  v109 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 116);
  ((void (**)(_QWORD, id))a1)[2](v2, v109);

  v110 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 118);
  ((void (**)(_QWORD, id))a1)[2](v2, v110);

  v111 = -[HKObjectType _initWithCode:]([HKSeriesType alloc], "_initWithCode:", 119);
  ((void (**)(_QWORD, id))a1)[2](v2, v111);

  v112 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 124);
  ((void (**)(_QWORD, id))a1)[2](v2, v112);

  v113 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 125);
  ((void (**)(_QWORD, id))a1)[2](v2, v113);

  v114 = -[HKObjectType _initWithCode:]([HKMedicationOrderType alloc], "_initWithCode:", 126);
  ((void (**)(_QWORD, id))a1)[2](v2, v114);

  v115 = -[HKObjectType _initWithCode:]([HKMedicationDispenseRecordType alloc], "_initWithCode:", 127);
  ((void (**)(_QWORD, id))a1)[2](v2, v115);

  v116 = -[HKObjectType _initWithCode:]([HKMedicationRecordType alloc], "_initWithCode:", 128);
  ((void (**)(_QWORD, id))a1)[2](v2, v116);

  v117 = -[HKObjectType _initWithCode:]([HKDiagnosticTestResultType alloc], "_initWithCode:", 129);
  ((void (**)(_QWORD, id))a1)[2](v2, v117);

  v118 = -[HKObjectType _initWithCode:]([HKDiagnosticTestReportType alloc], "_initWithCode:", 130);
  ((void (**)(_QWORD, id))a1)[2](v2, v118);

  v119 = -[HKObjectType _initWithCode:]([HKVaccinationRecordType alloc], "_initWithCode:", 131);
  ((void (**)(_QWORD, id))a1)[2](v2, v119);

  v120 = -[HKObjectType _initWithCode:]([HKConditionRecordType alloc], "_initWithCode:", 132);
  ((void (**)(_QWORD, id))a1)[2](v2, v120);

  v121 = -[HKObjectType _initWithCode:]([HKAllergyRecordType alloc], "_initWithCode:", 133);
  ((void (**)(_QWORD, id))a1)[2](v2, v121);

  v122 = -[HKObjectType _initWithCode:]([HKProcedureRecordType alloc], "_initWithCode:", 134);
  ((void (**)(_QWORD, id))a1)[2](v2, v122);

  v123 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 137);
  ((void (**)(_QWORD, id))a1)[2](v2, v123);

  v124 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 138);
  ((void (**)(_QWORD, id))a1)[2](v2, v124);

  v125 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 139);
  ((void (**)(_QWORD, id))a1)[2](v2, v125);

  v126 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 140);
  ((void (**)(_QWORD, id))a1)[2](v2, v126);

  v127 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 141);
  ((void (**)(_QWORD, id))a1)[2](v2, v127);

  v128 = -[HKObjectType _initWithCode:]([HKAccountOwnerType alloc], "_initWithCode:", 142);
  ((void (**)(_QWORD, id))a1)[2](v2, v128);

  v129 = -[HKObjectType _initWithCode:]([HKUnknownRecordType alloc], "_initWithCode:", 143);
  ((void (**)(_QWORD, id))a1)[2](v2, v129);

  v130 = -[HKObjectType _initWithCode:]([HKElectrocardiogramType alloc], "_initWithCode:", 144);
  ((void (**)(_QWORD, id))a1)[2](v2, v130);

  v131 = -[HKObjectType _initWithCode:]([HKAudiogramSampleType alloc], "_initWithCode:", 145);
  ((void (**)(_QWORD, id))a1)[2](v2, v131);

  v132 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 147);
  ((void (**)(_QWORD, id))a1)[2](v2, v132);

  v133 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 149);
  ((void (**)(_QWORD, id))a1)[2](v2, v133);

  v134 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 150);
  ((void (**)(_QWORD, id))a1)[2](v2, v134);

  v135 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 151);
  ((void (**)(_QWORD, id))a1)[2](v2, v135);

  v136 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 152);
  ((void (**)(_QWORD, id))a1)[2](v2, v136);

  v137 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 153);
  ((void (**)(_QWORD, id))a1)[2](v2, v137);

  v138 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 154);
  ((void (**)(_QWORD, id))a1)[2](v2, v138);

  v139 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 155);
  ((void (**)(_QWORD, id))a1)[2](v2, v139);

  v140 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 156);
  ((void (**)(_QWORD, id))a1)[2](v2, v140);

  v141 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 157);
  ((void (**)(_QWORD, id))a1)[2](v2, v141);

  v142 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 158);
  ((void (**)(_QWORD, id))a1)[2](v2, v142);

  v143 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 159);
  ((void (**)(_QWORD, id))a1)[2](v2, v143);

  v144 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 160);
  ((void (**)(_QWORD, id))a1)[2](v2, v144);

  v145 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 161);
  ((void (**)(_QWORD, id))a1)[2](v2, v145);

  v146 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 162);
  ((void (**)(_QWORD, id))a1)[2](v2, v146);

  v147 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 163);
  ((void (**)(_QWORD, id))a1)[2](v2, v147);

  v148 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 164);
  ((void (**)(_QWORD, id))a1)[2](v2, v148);

  v149 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 165);
  ((void (**)(_QWORD, id))a1)[2](v2, v149);

  v150 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 166);
  ((void (**)(_QWORD, id))a1)[2](v2, v150);

  v151 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 167);
  ((void (**)(_QWORD, id))a1)[2](v2, v151);

  v152 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 168);
  ((void (**)(_QWORD, id))a1)[2](v2, v152);

  v153 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 169);
  ((void (**)(_QWORD, id))a1)[2](v2, v153);

  v154 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 170);
  ((void (**)(_QWORD, id))a1)[2](v2, v154);

  v155 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 171);
  ((void (**)(_QWORD, id))a1)[2](v2, v155);

  v156 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 172);
  ((void (**)(_QWORD, id))a1)[2](v2, v156);

  v157 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 173);
  ((void (**)(_QWORD, id))a1)[2](v2, v157);

  v158 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 175);
  ((void (**)(_QWORD, id))a1)[2](v2, v158);

  v159 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 176);
  ((void (**)(_QWORD, id))a1)[2](v2, v159);

  v160 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 177);
  ((void (**)(_QWORD, id))a1)[2](v2, v160);

  v161 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 178);
  ((void (**)(_QWORD, id))a1)[2](v2, v161);

  v162 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 179);
  ((void (**)(_QWORD, id))a1)[2](v2, v162);

  v163 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 180);
  ((void (**)(_QWORD, id))a1)[2](v2, v163);

  v164 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 182);
  ((void (**)(_QWORD, id))a1)[2](v2, v164);

  v165 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 183);
  ((void (**)(_QWORD, id))a1)[2](v2, v165);

  v166 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 186);
  ((void (**)(_QWORD, id))a1)[2](v2, v166);

  v167 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 187);
  ((void (**)(_QWORD, id))a1)[2](v2, v167);

  v168 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 188);
  ((void (**)(_QWORD, id))a1)[2](v2, v168);

  v169 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 189);
  ((void (**)(_QWORD, id))a1)[2](v2, v169);

  v170 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 190);
  ((void (**)(_QWORD, id))a1)[2](v2, v170);

  v171 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 191);
  ((void (**)(_QWORD, id))a1)[2](v2, v171);

  v172 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 192);
  ((void (**)(_QWORD, id))a1)[2](v2, v172);

  v173 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 193);
  ((void (**)(_QWORD, id))a1)[2](v2, v173);

  v174 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 194);
  ((void (**)(_QWORD, id))a1)[2](v2, v174);

  v175 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 195);
  ((void (**)(_QWORD, id))a1)[2](v2, v175);

  v176 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 196);
  ((void (**)(_QWORD, id))a1)[2](v2, v176);

  v177 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 197);
  ((void (**)(_QWORD, id))a1)[2](v2, v177);

  v178 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 198);
  ((void (**)(_QWORD, id))a1)[2](v2, v178);

  v179 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 199);
  ((void (**)(_QWORD, id))a1)[2](v2, v179);

  v180 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 201);
  ((void (**)(_QWORD, id))a1)[2](v2, v180);

  v181 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 202);
  ((void (**)(_QWORD, id))a1)[2](v2, v181);

  v182 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 203);
  ((void (**)(_QWORD, id))a1)[2](v2, v182);

  v183 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 204);
  ((void (**)(_QWORD, id))a1)[2](v2, v183);

  v184 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 205);
  ((void (**)(_QWORD, id))a1)[2](v2, v184);

  v185 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 206);
  ((void (**)(_QWORD, id))a1)[2](v2, v185);

  v186 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 207);
  ((void (**)(_QWORD, id))a1)[2](v2, v186);

  v187 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 211);
  ((void (**)(_QWORD, id))a1)[2](v2, v187);

  v188 = -[HKObjectType _initWithCode:]([HKCoverageRecordType alloc], "_initWithCode:", 216);
  ((void (**)(_QWORD, id))a1)[2](v2, v188);

  v189 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 217);
  ((void (**)(_QWORD, id))a1)[2](v2, v189);

  v190 = -[HKObjectType _initWithCode:]([HKCharacteristicType alloc], "_initWithCode:", 218);
  ((void (**)(_QWORD, id))a1)[2](v2, v190);

  v191 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 220);
  ((void (**)(_QWORD, id))a1)[2](v2, v191);

  v192 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 221);
  ((void (**)(_QWORD, id))a1)[2](v2, v192);

  v193 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 222);
  ((void (**)(_QWORD, id))a1)[2](v2, v193);

  v194 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 223);
  ((void (**)(_QWORD, id))a1)[2](v2, v194);

  v195 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 224);
  ((void (**)(_QWORD, id))a1)[2](v2, v195);

  v196 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 225);
  ((void (**)(_QWORD, id))a1)[2](v2, v196);

  v197 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 226);
  ((void (**)(_QWORD, id))a1)[2](v2, v197);

  v198 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 229);
  ((void (**)(_QWORD, id))a1)[2](v2, v198);

  v199 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 230);
  ((void (**)(_QWORD, id))a1)[2](v2, v199);

  v200 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 231);
  ((void (**)(_QWORD, id))a1)[2](v2, v200);

  v201 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 232);
  ((void (**)(_QWORD, id))a1)[2](v2, v201);

  v202 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 233);
  ((void (**)(_QWORD, id))a1)[2](v2, v202);

  v203 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 234);
  ((void (**)(_QWORD, id))a1)[2](v2, v203);

  v204 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 235);
  ((void (**)(_QWORD, id))a1)[2](v2, v204);

  v205 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 236);
  ((void (**)(_QWORD, id))a1)[2](v2, v205);

  v206 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 237);
  ((void (**)(_QWORD, id))a1)[2](v2, v206);

  v207 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 240);
  ((void (**)(_QWORD, id))a1)[2](v2, v207);

  v208 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 241);
  ((void (**)(_QWORD, id))a1)[2](v2, v208);

  v209 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 242);
  ((void (**)(_QWORD, id))a1)[2](v2, v209);

  v210 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 243);
  ((void (**)(_QWORD, id))a1)[2](v2, v210);

  v211 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 244);
  ((void (**)(_QWORD, id))a1)[2](v2, v211);

  v212 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 248);
  ((void (**)(_QWORD, id))a1)[2](v2, v212);

  v213 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 249);
  ((void (**)(_QWORD, id))a1)[2](v2, v213);

  v214 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 250);
  ((void (**)(_QWORD, id))a1)[2](v2, v214);

  v215 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 251);
  ((void (**)(_QWORD, id))a1)[2](v2, v215);

  v216 = -[HKObjectType _initWithCode:]([HKSignedClinicalDataRecordType alloc], "_initWithCode:", 252);
  ((void (**)(_QWORD, id))a1)[2](v2, v216);

  v217 = -[HKObjectType _initWithCode:]([HKVerifiableClinicalRecordType alloc], "_initWithCode:", 253);
  ((void (**)(_QWORD, id))a1)[2](v2, v217);

  v218 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 256);
  ((void (**)(_QWORD, id))a1)[2](v2, v218);

  v219 = -[HKObjectType _initWithCode:]([HKPrescriptionType alloc], "_initWithCode:", 257);
  ((void (**)(_QWORD, id))a1)[2](v2, v219);

  v220 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 258);
  ((void (**)(_QWORD, id))a1)[2](v2, v220);

  v221 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 259);
  ((void (**)(_QWORD, id))a1)[2](v2, v221);

  v222 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 260);
  ((void (**)(_QWORD, id))a1)[2](v2, v222);

  v223 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 262);
  ((void (**)(_QWORD, id))a1)[2](v2, v223);

  v224 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 263);
  ((void (**)(_QWORD, id))a1)[2](v2, v224);

  v225 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 264);
  ((void (**)(_QWORD, id))a1)[2](v2, v225);

  v226 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 265);
  ((void (**)(_QWORD, id))a1)[2](v2, v226);

  v227 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 266);
  ((void (**)(_QWORD, id))a1)[2](v2, v227);

  v228 = -[HKObjectType _initWithCode:]([HKClinicalNoteRecordType alloc], "_initWithCode:", 267);
  ((void (**)(_QWORD, id))a1)[2](v2, v228);

  v229 = -[HKObjectType _initWithCode:]([HKClinicalType alloc], "_initWithCode:", 268);
  ((void (**)(_QWORD, id))a1)[2](v2, v229);

  v230 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 269);
  ((void (**)(_QWORD, id))a1)[2](v2, v230);

  v231 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 270);
  ((void (**)(_QWORD, id))a1)[2](v2, v231);

  v232 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 272);
  ((void (**)(_QWORD, id))a1)[2](v2, v232);

  v233 = -[HKObjectType _initWithCode:]([HKMedicationDoseEventType alloc], "_initWithCode:", 273);
  ((void (**)(_QWORD, id))a1)[2](v2, v233);

  v234 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 274);
  ((void (**)(_QWORD, id))a1)[2](v2, v234);

  v235 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 275);
  ((void (**)(_QWORD, id))a1)[2](v2, v235);

  v236 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 276);
  ((void (**)(_QWORD, id))a1)[2](v2, v236);

  v237 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 277);
  ((void (**)(_QWORD, id))a1)[2](v2, v237);

  v238 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 279);
  ((void (**)(_QWORD, id))a1)[2](v2, v238);

  v239 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 280);
  ((void (**)(_QWORD, id))a1)[2](v2, v239);

  v240 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 281);
  ((void (**)(_QWORD, id))a1)[2](v2, v240);

  v241 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 282);
  ((void (**)(_QWORD, id))a1)[2](v2, v241);

  v242 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 283);
  ((void (**)(_QWORD, id))a1)[2](v2, v242);

  v243 = -[HKObjectType _initWithCode:]([HKStateOfMindType alloc], "_initWithCode:", 284);
  ((void (**)(_QWORD, id))a1)[2](v2, v243);

  v244 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 286);
  ((void (**)(_QWORD, id))a1)[2](v2, v244);

  v245 = -[HKObjectType _initWithCode:]([HKScoredAssessmentType alloc], "_initWithCode:", 287);
  ((void (**)(_QWORD, id))a1)[2](v2, v245);

  v246 = -[HKObjectType _initWithCode:]([HKScoredAssessmentType alloc], "_initWithCode:", 288);
  ((void (**)(_QWORD, id))a1)[2](v2, v246);

  v247 = -[HKObjectType _initWithCode:]([HKWorkoutZonesType alloc], "_initWithCode:", 289);
  ((void (**)(_QWORD, id))a1)[2](v2, v247);

  v248 = -[HKObjectType _initWithCode:]([HKWorkoutZonesType alloc], "_initWithCode:", 290);
  ((void (**)(_QWORD, id))a1)[2](v2, v248);

  v249 = -[HKObjectType _initWithCode:]([HKUserTrackedConceptType alloc], "_initWithCode:", 291);
  ((void (**)(_QWORD, id))a1)[2](v2, v249);

  v250 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 294);
  ((void (**)(_QWORD, id))a1)[2](v2, v250);

  v251 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 295);
  ((void (**)(_QWORD, id))a1)[2](v2, v251);

  v252 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 296);
  ((void (**)(_QWORD, id))a1)[2](v2, v252);

  v253 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 297);
  ((void (**)(_QWORD, id))a1)[2](v2, v253);

  v254 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 298);
  ((void (**)(_QWORD, id))a1)[2](v2, v254);

  v255 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 299);
  ((void (**)(_QWORD, id))a1)[2](v2, v255);

  v256 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 300);
  ((void (**)(_QWORD, id))a1)[2](v2, v256);

  v257 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 301);
  ((void (**)(_QWORD, id))a1)[2](v2, v257);

  v258 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 302);
  ((void (**)(_QWORD, id))a1)[2](v2, v258);

  v259 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 303);
  ((void (**)(_QWORD, id))a1)[2](v2, v259);

  v260 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 304);
  ((void (**)(_QWORD, id))a1)[2](v2, v260);

  v261 = -[HKObjectType _initWithCode:]([HKSampleType alloc], "_initWithCode:", 305);
  ((void (**)(_QWORD, id))a1)[2](v2, v261);

  v262 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 313);
  ((void (**)(_QWORD, id))a1)[2](v2, v262);

  v263 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 314);
  ((void (**)(_QWORD, id))a1)[2](v2, v263);

}

id _HKAllQuantityTypes()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  _QWORD v127[127];

  v127[125] = *MEMORY[0x1E0C80C00];
  v126 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 0);
  v127[0] = v126;
  v125 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 1);
  v127[1] = v125;
  v124 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 2);
  v127[2] = v124;
  v123 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 3);
  v127[3] = v123;
  v122 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 4);
  v127[4] = v122;
  v121 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 5);
  v127[5] = v121;
  v120 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 7);
  v127[6] = v120;
  v119 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 8);
  v127[7] = v119;
  v118 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 9);
  v127[8] = v118;
  v117 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 10);
  v127[9] = v117;
  v116 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 12);
  v127[10] = v116;
  v115 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 13);
  v127[11] = v115;
  v114 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 14);
  v127[12] = v114;
  v113 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 15);
  v127[13] = v113;
  v112 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 16);
  v127[14] = v112;
  v111 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 17);
  v127[15] = v111;
  v110 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 18);
  v127[16] = v110;
  v109 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 19);
  v127[17] = v109;
  v108 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 20);
  v127[18] = v108;
  v107 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 21);
  v127[19] = v107;
  v106 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 22);
  v127[20] = v106;
  v105 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 23);
  v127[21] = v105;
  v104 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 24);
  v127[22] = v104;
  v103 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 25);
  v127[23] = v103;
  v102 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 26);
  v127[24] = v102;
  v101 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 27);
  v127[25] = v101;
  v100 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 28);
  v127[26] = v100;
  v99 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 29);
  v127[27] = v99;
  v98 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 30);
  v127[28] = v98;
  v97 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 31);
  v127[29] = v97;
  v96 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 32);
  v127[30] = v96;
  v95 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 33);
  v127[31] = v95;
  v94 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 34);
  v127[32] = v94;
  v93 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 35);
  v127[33] = v93;
  v92 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 36);
  v127[34] = v92;
  v91 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 37);
  v127[35] = v91;
  v90 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 38);
  v127[36] = v90;
  v89 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 39);
  v127[37] = v89;
  v88 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 40);
  v127[38] = v88;
  v87 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 41);
  v127[39] = v87;
  v86 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 42);
  v127[40] = v86;
  v85 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 43);
  v127[41] = v85;
  v84 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 44);
  v127[42] = v84;
  v83 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 45);
  v127[43] = v83;
  v82 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 46);
  v127[44] = v82;
  v81 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 47);
  v127[45] = v81;
  v80 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 48);
  v127[46] = v80;
  v79 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 49);
  v127[47] = v79;
  v78 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 50);
  v127[48] = v78;
  v77 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 51);
  v127[49] = v77;
  v76 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 52);
  v127[50] = v76;
  v75 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 53);
  v127[51] = v75;
  v74 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 54);
  v127[52] = v74;
  v73 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 55);
  v127[53] = v73;
  v72 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 56);
  v127[54] = v72;
  v71 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 57);
  v127[55] = v71;
  v70 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 58);
  v127[56] = v70;
  v69 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 60);
  v127[57] = v69;
  v68 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 61);
  v127[58] = v68;
  v67 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 62);
  v127[59] = v67;
  v66 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 67);
  v127[60] = v66;
  v65 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 71);
  v127[61] = v65;
  v64 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 72);
  v127[62] = v64;
  v63 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 73);
  v127[63] = v63;
  v62 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 75);
  v127[64] = v62;
  v61 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 78);
  v127[65] = v61;
  v60 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 83);
  v127[66] = v60;
  v59 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 87);
  v127[67] = v59;
  v58 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 89);
  v127[68] = v58;
  v57 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 90);
  v127[69] = v57;
  v56 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 101);
  v127[70] = v56;
  v55 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 104);
  v127[71] = v55;
  v54 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 105);
  v127[72] = v54;
  v53 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 110);
  v127[73] = v53;
  v52 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 111);
  v127[74] = v52;
  v51 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 113);
  v127[75] = v51;
  v50 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 114);
  v127[76] = v50;
  v49 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 118);
  v127[77] = v49;
  v48 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 124);
  v127[78] = v48;
  v47 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 125);
  v127[79] = v47;
  v46 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 137);
  v127[80] = v46;
  v45 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 138);
  v127[81] = v45;
  v44 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 139);
  v127[82] = v44;
  v43 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 172);
  v127[83] = v43;
  v42 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 173);
  v127[84] = v42;
  v41 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 179);
  v127[85] = v41;
  v40 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 180);
  v127[86] = v40;
  v39 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 182);
  v127[87] = v39;
  v38 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 183);
  v127[88] = v38;
  v37 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 186);
  v127[89] = v37;
  v36 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 187);
  v127[90] = v36;
  v35 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 188);
  v127[91] = v35;
  v34 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 194);
  v127[92] = v34;
  v33 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 195);
  v127[93] = v33;
  v32 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 196);
  v127[94] = v32;
  v31 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 197);
  v127[95] = v31;
  v30 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 248);
  v127[96] = v30;
  v29 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 249);
  v127[97] = v29;
  v28 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 251);
  v127[98] = v28;
  v27 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 256);
  v127[99] = v27;
  v26 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 258);
  v127[100] = v26;
  v25 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 259);
  v127[101] = v25;
  v24 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 260);
  v127[102] = v24;
  v23 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 266);
  v127[103] = v23;
  v22 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 269);
  v127[104] = v22;
  v21 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 270);
  v127[105] = v21;
  v20 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 272);
  v127[106] = v20;
  v19 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 274);
  v127[107] = v19;
  v18 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 275);
  v127[108] = v18;
  v17 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 277);
  v127[109] = v17;
  v16 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 279);
  v127[110] = v16;
  v15 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 280);
  v127[111] = v15;
  v14 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 281);
  v127[112] = v14;
  v13 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 282);
  v127[113] = v13;
  v12 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 283);
  v127[114] = v12;
  v0 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 286);
  v127[115] = v0;
  v1 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 294);
  v127[116] = v1;
  v2 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 295);
  v127[117] = v2;
  v3 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 296);
  v127[118] = v3;
  v4 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 297);
  v127[119] = v4;
  v5 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 298);
  v127[120] = v5;
  v6 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 301);
  v127[121] = v6;
  v7 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 302);
  v127[122] = v7;
  v8 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 303);
  v127[123] = v8;
  v9 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 304);
  v127[124] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v127, 125);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  return v11;
}

void _HKEnumerateQuantityTypes(void (**a1)(_QWORD, _QWORD))
{
  void (**v2)(_QWORD, _QWORD);
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;

  v2 = a1;
  v3 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 0);
  ((void (**)(_QWORD, id))a1)[2](v2, v3);

  v4 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 1);
  ((void (**)(_QWORD, id))a1)[2](v2, v4);

  v5 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 2);
  ((void (**)(_QWORD, id))a1)[2](v2, v5);

  v6 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 3);
  ((void (**)(_QWORD, id))a1)[2](v2, v6);

  v7 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 4);
  ((void (**)(_QWORD, id))a1)[2](v2, v7);

  v8 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 5);
  ((void (**)(_QWORD, id))a1)[2](v2, v8);

  v9 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 7);
  ((void (**)(_QWORD, id))a1)[2](v2, v9);

  v10 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 8);
  ((void (**)(_QWORD, id))a1)[2](v2, v10);

  v11 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 9);
  ((void (**)(_QWORD, id))a1)[2](v2, v11);

  v12 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 10);
  ((void (**)(_QWORD, id))a1)[2](v2, v12);

  v13 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 12);
  ((void (**)(_QWORD, id))a1)[2](v2, v13);

  v14 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 13);
  ((void (**)(_QWORD, id))a1)[2](v2, v14);

  v15 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 14);
  ((void (**)(_QWORD, id))a1)[2](v2, v15);

  v16 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 15);
  ((void (**)(_QWORD, id))a1)[2](v2, v16);

  v17 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 16);
  ((void (**)(_QWORD, id))a1)[2](v2, v17);

  v18 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 17);
  ((void (**)(_QWORD, id))a1)[2](v2, v18);

  v19 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 18);
  ((void (**)(_QWORD, id))a1)[2](v2, v19);

  v20 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 19);
  ((void (**)(_QWORD, id))a1)[2](v2, v20);

  v21 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 20);
  ((void (**)(_QWORD, id))a1)[2](v2, v21);

  v22 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 21);
  ((void (**)(_QWORD, id))a1)[2](v2, v22);

  v23 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 22);
  ((void (**)(_QWORD, id))a1)[2](v2, v23);

  v24 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 23);
  ((void (**)(_QWORD, id))a1)[2](v2, v24);

  v25 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 24);
  ((void (**)(_QWORD, id))a1)[2](v2, v25);

  v26 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 25);
  ((void (**)(_QWORD, id))a1)[2](v2, v26);

  v27 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 26);
  ((void (**)(_QWORD, id))a1)[2](v2, v27);

  v28 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 27);
  ((void (**)(_QWORD, id))a1)[2](v2, v28);

  v29 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 28);
  ((void (**)(_QWORD, id))a1)[2](v2, v29);

  v30 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 29);
  ((void (**)(_QWORD, id))a1)[2](v2, v30);

  v31 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 30);
  ((void (**)(_QWORD, id))a1)[2](v2, v31);

  v32 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 31);
  ((void (**)(_QWORD, id))a1)[2](v2, v32);

  v33 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 32);
  ((void (**)(_QWORD, id))a1)[2](v2, v33);

  v34 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 33);
  ((void (**)(_QWORD, id))a1)[2](v2, v34);

  v35 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 34);
  ((void (**)(_QWORD, id))a1)[2](v2, v35);

  v36 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 35);
  ((void (**)(_QWORD, id))a1)[2](v2, v36);

  v37 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 36);
  ((void (**)(_QWORD, id))a1)[2](v2, v37);

  v38 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 37);
  ((void (**)(_QWORD, id))a1)[2](v2, v38);

  v39 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 38);
  ((void (**)(_QWORD, id))a1)[2](v2, v39);

  v40 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 39);
  ((void (**)(_QWORD, id))a1)[2](v2, v40);

  v41 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 40);
  ((void (**)(_QWORD, id))a1)[2](v2, v41);

  v42 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 41);
  ((void (**)(_QWORD, id))a1)[2](v2, v42);

  v43 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 42);
  ((void (**)(_QWORD, id))a1)[2](v2, v43);

  v44 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 43);
  ((void (**)(_QWORD, id))a1)[2](v2, v44);

  v45 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 44);
  ((void (**)(_QWORD, id))a1)[2](v2, v45);

  v46 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 45);
  ((void (**)(_QWORD, id))a1)[2](v2, v46);

  v47 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 46);
  ((void (**)(_QWORD, id))a1)[2](v2, v47);

  v48 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 47);
  ((void (**)(_QWORD, id))a1)[2](v2, v48);

  v49 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 48);
  ((void (**)(_QWORD, id))a1)[2](v2, v49);

  v50 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 49);
  ((void (**)(_QWORD, id))a1)[2](v2, v50);

  v51 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 50);
  ((void (**)(_QWORD, id))a1)[2](v2, v51);

  v52 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 51);
  ((void (**)(_QWORD, id))a1)[2](v2, v52);

  v53 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 52);
  ((void (**)(_QWORD, id))a1)[2](v2, v53);

  v54 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 53);
  ((void (**)(_QWORD, id))a1)[2](v2, v54);

  v55 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 54);
  ((void (**)(_QWORD, id))a1)[2](v2, v55);

  v56 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 55);
  ((void (**)(_QWORD, id))a1)[2](v2, v56);

  v57 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 56);
  ((void (**)(_QWORD, id))a1)[2](v2, v57);

  v58 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 57);
  ((void (**)(_QWORD, id))a1)[2](v2, v58);

  v59 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 58);
  ((void (**)(_QWORD, id))a1)[2](v2, v59);

  v60 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 60);
  ((void (**)(_QWORD, id))a1)[2](v2, v60);

  v61 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 61);
  ((void (**)(_QWORD, id))a1)[2](v2, v61);

  v62 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 62);
  ((void (**)(_QWORD, id))a1)[2](v2, v62);

  v63 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 67);
  ((void (**)(_QWORD, id))a1)[2](v2, v63);

  v64 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 71);
  ((void (**)(_QWORD, id))a1)[2](v2, v64);

  v65 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 72);
  ((void (**)(_QWORD, id))a1)[2](v2, v65);

  v66 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 73);
  ((void (**)(_QWORD, id))a1)[2](v2, v66);

  v67 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 75);
  ((void (**)(_QWORD, id))a1)[2](v2, v67);

  v68 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 78);
  ((void (**)(_QWORD, id))a1)[2](v2, v68);

  v69 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 83);
  ((void (**)(_QWORD, id))a1)[2](v2, v69);

  v70 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 87);
  ((void (**)(_QWORD, id))a1)[2](v2, v70);

  v71 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 89);
  ((void (**)(_QWORD, id))a1)[2](v2, v71);

  v72 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 90);
  ((void (**)(_QWORD, id))a1)[2](v2, v72);

  v73 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 101);
  ((void (**)(_QWORD, id))a1)[2](v2, v73);

  v74 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 104);
  ((void (**)(_QWORD, id))a1)[2](v2, v74);

  v75 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 105);
  ((void (**)(_QWORD, id))a1)[2](v2, v75);

  v76 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 110);
  ((void (**)(_QWORD, id))a1)[2](v2, v76);

  v77 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 111);
  ((void (**)(_QWORD, id))a1)[2](v2, v77);

  v78 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 113);
  ((void (**)(_QWORD, id))a1)[2](v2, v78);

  v79 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 114);
  ((void (**)(_QWORD, id))a1)[2](v2, v79);

  v80 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 118);
  ((void (**)(_QWORD, id))a1)[2](v2, v80);

  v81 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 124);
  ((void (**)(_QWORD, id))a1)[2](v2, v81);

  v82 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 125);
  ((void (**)(_QWORD, id))a1)[2](v2, v82);

  v83 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 137);
  ((void (**)(_QWORD, id))a1)[2](v2, v83);

  v84 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 138);
  ((void (**)(_QWORD, id))a1)[2](v2, v84);

  v85 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 139);
  ((void (**)(_QWORD, id))a1)[2](v2, v85);

  v86 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 172);
  ((void (**)(_QWORD, id))a1)[2](v2, v86);

  v87 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 173);
  ((void (**)(_QWORD, id))a1)[2](v2, v87);

  v88 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 179);
  ((void (**)(_QWORD, id))a1)[2](v2, v88);

  v89 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 180);
  ((void (**)(_QWORD, id))a1)[2](v2, v89);

  v90 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 182);
  ((void (**)(_QWORD, id))a1)[2](v2, v90);

  v91 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 183);
  ((void (**)(_QWORD, id))a1)[2](v2, v91);

  v92 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 186);
  ((void (**)(_QWORD, id))a1)[2](v2, v92);

  v93 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 187);
  ((void (**)(_QWORD, id))a1)[2](v2, v93);

  v94 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 188);
  ((void (**)(_QWORD, id))a1)[2](v2, v94);

  v95 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 194);
  ((void (**)(_QWORD, id))a1)[2](v2, v95);

  v96 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 195);
  ((void (**)(_QWORD, id))a1)[2](v2, v96);

  v97 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 196);
  ((void (**)(_QWORD, id))a1)[2](v2, v97);

  v98 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 197);
  ((void (**)(_QWORD, id))a1)[2](v2, v98);

  v99 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 248);
  ((void (**)(_QWORD, id))a1)[2](v2, v99);

  v100 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 249);
  ((void (**)(_QWORD, id))a1)[2](v2, v100);

  v101 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 251);
  ((void (**)(_QWORD, id))a1)[2](v2, v101);

  v102 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 256);
  ((void (**)(_QWORD, id))a1)[2](v2, v102);

  v103 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 258);
  ((void (**)(_QWORD, id))a1)[2](v2, v103);

  v104 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 259);
  ((void (**)(_QWORD, id))a1)[2](v2, v104);

  v105 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 260);
  ((void (**)(_QWORD, id))a1)[2](v2, v105);

  v106 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 266);
  ((void (**)(_QWORD, id))a1)[2](v2, v106);

  v107 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 269);
  ((void (**)(_QWORD, id))a1)[2](v2, v107);

  v108 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 270);
  ((void (**)(_QWORD, id))a1)[2](v2, v108);

  v109 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 272);
  ((void (**)(_QWORD, id))a1)[2](v2, v109);

  v110 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 274);
  ((void (**)(_QWORD, id))a1)[2](v2, v110);

  v111 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 275);
  ((void (**)(_QWORD, id))a1)[2](v2, v111);

  v112 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 277);
  ((void (**)(_QWORD, id))a1)[2](v2, v112);

  v113 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 279);
  ((void (**)(_QWORD, id))a1)[2](v2, v113);

  v114 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 280);
  ((void (**)(_QWORD, id))a1)[2](v2, v114);

  v115 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 281);
  ((void (**)(_QWORD, id))a1)[2](v2, v115);

  v116 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 282);
  ((void (**)(_QWORD, id))a1)[2](v2, v116);

  v117 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 283);
  ((void (**)(_QWORD, id))a1)[2](v2, v117);

  v118 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 286);
  ((void (**)(_QWORD, id))a1)[2](v2, v118);

  v119 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 294);
  ((void (**)(_QWORD, id))a1)[2](v2, v119);

  v120 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 295);
  ((void (**)(_QWORD, id))a1)[2](v2, v120);

  v121 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 296);
  ((void (**)(_QWORD, id))a1)[2](v2, v121);

  v122 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 297);
  ((void (**)(_QWORD, id))a1)[2](v2, v122);

  v123 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 298);
  ((void (**)(_QWORD, id))a1)[2](v2, v123);

  v124 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 301);
  ((void (**)(_QWORD, id))a1)[2](v2, v124);

  v125 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 302);
  ((void (**)(_QWORD, id))a1)[2](v2, v125);

  v126 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 303);
  ((void (**)(_QWORD, id))a1)[2](v2, v126);

  v127 = -[HKQuantityType _initWithCode:]([HKQuantityType alloc], "_initWithCode:", 304);
  ((void (**)(_QWORD, id))a1)[2](v2, v127);

}

id _HKAllCategoryTypes()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  _QWORD v77[77];

  v77[75] = *MEMORY[0x1E0C80C00];
  v76 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 63);
  v77[0] = v76;
  v75 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 68);
  v77[1] = v75;
  v74 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 70);
  v77[2] = v74;
  v73 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 91);
  v77[3] = v73;
  v72 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 92);
  v77[4] = v72;
  v71 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 95);
  v77[5] = v71;
  v70 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 96);
  v77[6] = v70;
  v69 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 97);
  v77[7] = v69;
  v68 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 98);
  v77[8] = v68;
  v67 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 99);
  v77[9] = v67;
  v66 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 112);
  v77[10] = v66;
  v65 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 116);
  v77[11] = v65;
  v64 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 140);
  v77[12] = v64;
  v63 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 141);
  v77[13] = v63;
  v62 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 147);
  v77[14] = v62;
  v61 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 156);
  v77[15] = v61;
  v60 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 157);
  v77[16] = v60;
  v59 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 158);
  v77[17] = v59;
  v58 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 159);
  v77[18] = v58;
  v57 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 160);
  v77[19] = v57;
  v56 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 161);
  v77[20] = v56;
  v55 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 162);
  v77[21] = v55;
  v54 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 163);
  v77[22] = v54;
  v53 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 164);
  v77[23] = v53;
  v52 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 165);
  v77[24] = v52;
  v51 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 166);
  v77[25] = v51;
  v50 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 167);
  v77[26] = v50;
  v49 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 168);
  v77[27] = v49;
  v48 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 169);
  v77[28] = v48;
  v47 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 170);
  v77[29] = v47;
  v46 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 171);
  v77[30] = v46;
  v45 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 178);
  v77[31] = v45;
  v44 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 189);
  v77[32] = v44;
  v43 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 190);
  v77[33] = v43;
  v42 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 191);
  v77[34] = v42;
  v41 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 192);
  v77[35] = v41;
  v40 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 193);
  v77[36] = v40;
  v39 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 199);
  v77[37] = v39;
  v38 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 201);
  v77[38] = v38;
  v37 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 202);
  v77[39] = v37;
  v36 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 203);
  v77[40] = v36;
  v35 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 204);
  v77[41] = v35;
  v34 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 205);
  v77[42] = v34;
  v33 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 206);
  v77[43] = v33;
  v32 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 207);
  v77[44] = v32;
  v31 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 211);
  v77[45] = v31;
  v30 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 220);
  v77[46] = v30;
  v29 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 221);
  v77[47] = v29;
  v28 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 222);
  v77[48] = v28;
  v27 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 223);
  v77[49] = v27;
  v26 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 224);
  v77[50] = v26;
  v25 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 225);
  v77[51] = v25;
  v24 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 226);
  v77[52] = v24;
  v23 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 229);
  v77[53] = v23;
  v22 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 230);
  v77[54] = v22;
  v21 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 231);
  v77[55] = v21;
  v20 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 232);
  v77[56] = v20;
  v19 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 233);
  v77[57] = v19;
  v18 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 234);
  v77[58] = v18;
  v17 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 235);
  v77[59] = v17;
  v16 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 236);
  v77[60] = v16;
  v15 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 237);
  v77[61] = v15;
  v14 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 240);
  v77[62] = v14;
  v13 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 241);
  v77[63] = v13;
  v12 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 242);
  v77[64] = v12;
  v0 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 243);
  v77[65] = v0;
  v1 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 244);
  v77[66] = v1;
  v2 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 250);
  v77[67] = v2;
  v3 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 262);
  v77[68] = v3;
  v4 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 263);
  v77[69] = v4;
  v5 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 264);
  v77[70] = v5;
  v6 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 265);
  v77[71] = v6;
  v7 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 276);
  v77[72] = v7;
  v8 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 313);
  v77[73] = v8;
  v9 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 314);
  v77[74] = v9;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v77, 75);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  return v11;
}

void _HKEnumerateCategoryTypes(void (**a1)(_QWORD, _QWORD))
{
  void (**v2)(_QWORD, _QWORD);
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;

  v2 = a1;
  v3 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 63);
  ((void (**)(_QWORD, id))a1)[2](v2, v3);

  v4 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 68);
  ((void (**)(_QWORD, id))a1)[2](v2, v4);

  v5 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 70);
  ((void (**)(_QWORD, id))a1)[2](v2, v5);

  v6 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 91);
  ((void (**)(_QWORD, id))a1)[2](v2, v6);

  v7 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 92);
  ((void (**)(_QWORD, id))a1)[2](v2, v7);

  v8 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 95);
  ((void (**)(_QWORD, id))a1)[2](v2, v8);

  v9 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 96);
  ((void (**)(_QWORD, id))a1)[2](v2, v9);

  v10 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 97);
  ((void (**)(_QWORD, id))a1)[2](v2, v10);

  v11 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 98);
  ((void (**)(_QWORD, id))a1)[2](v2, v11);

  v12 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 99);
  ((void (**)(_QWORD, id))a1)[2](v2, v12);

  v13 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 112);
  ((void (**)(_QWORD, id))a1)[2](v2, v13);

  v14 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 116);
  ((void (**)(_QWORD, id))a1)[2](v2, v14);

  v15 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 140);
  ((void (**)(_QWORD, id))a1)[2](v2, v15);

  v16 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 141);
  ((void (**)(_QWORD, id))a1)[2](v2, v16);

  v17 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 147);
  ((void (**)(_QWORD, id))a1)[2](v2, v17);

  v18 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 156);
  ((void (**)(_QWORD, id))a1)[2](v2, v18);

  v19 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 157);
  ((void (**)(_QWORD, id))a1)[2](v2, v19);

  v20 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 158);
  ((void (**)(_QWORD, id))a1)[2](v2, v20);

  v21 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 159);
  ((void (**)(_QWORD, id))a1)[2](v2, v21);

  v22 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 160);
  ((void (**)(_QWORD, id))a1)[2](v2, v22);

  v23 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 161);
  ((void (**)(_QWORD, id))a1)[2](v2, v23);

  v24 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 162);
  ((void (**)(_QWORD, id))a1)[2](v2, v24);

  v25 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 163);
  ((void (**)(_QWORD, id))a1)[2](v2, v25);

  v26 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 164);
  ((void (**)(_QWORD, id))a1)[2](v2, v26);

  v27 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 165);
  ((void (**)(_QWORD, id))a1)[2](v2, v27);

  v28 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 166);
  ((void (**)(_QWORD, id))a1)[2](v2, v28);

  v29 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 167);
  ((void (**)(_QWORD, id))a1)[2](v2, v29);

  v30 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 168);
  ((void (**)(_QWORD, id))a1)[2](v2, v30);

  v31 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 169);
  ((void (**)(_QWORD, id))a1)[2](v2, v31);

  v32 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 170);
  ((void (**)(_QWORD, id))a1)[2](v2, v32);

  v33 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 171);
  ((void (**)(_QWORD, id))a1)[2](v2, v33);

  v34 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 178);
  ((void (**)(_QWORD, id))a1)[2](v2, v34);

  v35 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 189);
  ((void (**)(_QWORD, id))a1)[2](v2, v35);

  v36 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 190);
  ((void (**)(_QWORD, id))a1)[2](v2, v36);

  v37 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 191);
  ((void (**)(_QWORD, id))a1)[2](v2, v37);

  v38 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 192);
  ((void (**)(_QWORD, id))a1)[2](v2, v38);

  v39 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 193);
  ((void (**)(_QWORD, id))a1)[2](v2, v39);

  v40 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 199);
  ((void (**)(_QWORD, id))a1)[2](v2, v40);

  v41 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 201);
  ((void (**)(_QWORD, id))a1)[2](v2, v41);

  v42 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 202);
  ((void (**)(_QWORD, id))a1)[2](v2, v42);

  v43 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 203);
  ((void (**)(_QWORD, id))a1)[2](v2, v43);

  v44 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 204);
  ((void (**)(_QWORD, id))a1)[2](v2, v44);

  v45 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 205);
  ((void (**)(_QWORD, id))a1)[2](v2, v45);

  v46 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 206);
  ((void (**)(_QWORD, id))a1)[2](v2, v46);

  v47 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 207);
  ((void (**)(_QWORD, id))a1)[2](v2, v47);

  v48 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 211);
  ((void (**)(_QWORD, id))a1)[2](v2, v48);

  v49 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 220);
  ((void (**)(_QWORD, id))a1)[2](v2, v49);

  v50 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 221);
  ((void (**)(_QWORD, id))a1)[2](v2, v50);

  v51 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 222);
  ((void (**)(_QWORD, id))a1)[2](v2, v51);

  v52 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 223);
  ((void (**)(_QWORD, id))a1)[2](v2, v52);

  v53 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 224);
  ((void (**)(_QWORD, id))a1)[2](v2, v53);

  v54 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 225);
  ((void (**)(_QWORD, id))a1)[2](v2, v54);

  v55 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 226);
  ((void (**)(_QWORD, id))a1)[2](v2, v55);

  v56 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 229);
  ((void (**)(_QWORD, id))a1)[2](v2, v56);

  v57 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 230);
  ((void (**)(_QWORD, id))a1)[2](v2, v57);

  v58 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 231);
  ((void (**)(_QWORD, id))a1)[2](v2, v58);

  v59 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 232);
  ((void (**)(_QWORD, id))a1)[2](v2, v59);

  v60 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 233);
  ((void (**)(_QWORD, id))a1)[2](v2, v60);

  v61 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 234);
  ((void (**)(_QWORD, id))a1)[2](v2, v61);

  v62 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 235);
  ((void (**)(_QWORD, id))a1)[2](v2, v62);

  v63 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 236);
  ((void (**)(_QWORD, id))a1)[2](v2, v63);

  v64 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 237);
  ((void (**)(_QWORD, id))a1)[2](v2, v64);

  v65 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 240);
  ((void (**)(_QWORD, id))a1)[2](v2, v65);

  v66 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 241);
  ((void (**)(_QWORD, id))a1)[2](v2, v66);

  v67 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 242);
  ((void (**)(_QWORD, id))a1)[2](v2, v67);

  v68 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 243);
  ((void (**)(_QWORD, id))a1)[2](v2, v68);

  v69 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 244);
  ((void (**)(_QWORD, id))a1)[2](v2, v69);

  v70 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 250);
  ((void (**)(_QWORD, id))a1)[2](v2, v70);

  v71 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 262);
  ((void (**)(_QWORD, id))a1)[2](v2, v71);

  v72 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 263);
  ((void (**)(_QWORD, id))a1)[2](v2, v72);

  v73 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 264);
  ((void (**)(_QWORD, id))a1)[2](v2, v73);

  v74 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 265);
  ((void (**)(_QWORD, id))a1)[2](v2, v74);

  v75 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 276);
  ((void (**)(_QWORD, id))a1)[2](v2, v75);

  v76 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 313);
  ((void (**)(_QWORD, id))a1)[2](v2, v76);

  v77 = -[HKObjectType _initWithCode:]([HKCategoryType alloc], "_initWithCode:", 314);
  ((void (**)(_QWORD, id))a1)[2](v2, v77);

}

uint64_t HKCalendarComponentsFromDayIndex@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 4 * (result + 3 * ((4 * result + 9874281) / 146097) / 4) + 9605459;
  v3 = v2 / 1461;
  LOWORD(v2) = 5 * ((__int16)(v2 % 1461 + (((v2 % 1461) >> 29) & 3)) >> 2) + 2;
  v4 = (__int16)v2 / 153;
  v5 = (__int16)((((26215 * ((__int16)v2 % 153)) >> 16) >> 1)
               + ((unsigned __int16)((26215 * ((__int16)v2 % 153)) >> 16) >> 15)
               + 1);
  v6 = (char)(v4 + 2 - 12
                     * ((((43 * (char)(v4 + 2)) & 0x8000) != 0) + (((43 * (char)(v4 + 2)) >> 8) >> 1)));
  if ((unint64_t)(v6 - 14) < 0xFFFFFFFFFFFFFFF4)
    ++v3;
  *a2 = v3 - 4716;
  a2[1] = v6 + 1;
  a2[2] = v5;
  return result;
}

uint64_t HKDayIndexFromCalendarComponents(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[1];
  v2 = (v1 - 14) / 12;
  v3 = v2 + *a1;
  v4 = 1461 * v3 + 7012803;
  if (1461 * v3 + 7012800 >= 0)
    v4 = 1461 * v3 + 7012800;
  v5 = (unsigned __int128)((367 * (v1 - 12 * v2) - 734) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  return a1[2] + (v4 >> 2) + (v5 >> 1) + ((unint64_t)v5 >> 63) - 3 * ((v3 + 4900) / 100) / 4 - 2432076;
}

void sub_19A176978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::string_view const*,std::string_view const*,std::string,std::__identity,std::__less<void,void>>(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  size_t v9;
  int v10;

  v3 = a2;
  if (a2 != a1)
  {
    v5 = (a2 - a1) >> 4;
    v3 = a1;
    do
    {
      v6 = v3 + 16 * (v5 >> 1);
      v7 = *((char *)a3 + 23);
      if (v7 >= 0)
        v8 = a3;
      else
        v8 = *a3;
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a3 + 23);
      else
        v9 = (size_t)a3[1];
      v10 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(*(const void **)v6, *(_QWORD *)(v6 + 8), v8, v9);
      if (v10 >= 0)
        v5 >>= 1;
      else
        v5 += ~(v5 >> 1);
      if (v10 < 0)
        v3 = v6 + 16;
    }
    while (v5);
  }
  return v3;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void sub_19A177514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A177880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke_0(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_0();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_0();
  getNRPairedDeviceRegistryClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t NanoRegistryLibrary_0()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_0)
  {
    v2 = xmmword_1E37EBBD8;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_0)
    NanoRegistryLibrary_cold_1_0(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_0;
}

char *OUTLINED_FUNCTION_0_6()
{
  return dlerror();
}

void sub_19A17871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void sub_19A1789F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A178FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19A1791EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A17946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromHKQuantitySeriesSampleBuilderState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("NotStarted");
  else
    return off_1E37EBCE8[a1 - 1];
}

__CFString *_HKStringForHealthServiceStatus(unint64_t a1)
{
  if (a1 > 0xA)
    return 0;
  else
    return off_1E37EBD30[a1];
}

void sub_19A17B738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void sub_19A17B8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HKIsLocalizedStringPropertyType(uint64_t a1)
{
  return (unint64_t)(a1 - 160007) <= 0xF && ((1 << (a1 - 7)) & 0x8E3D) != 0 || a1 == 180000;
}

void *HKAllLocalizedStringPropertyTypes()
{
  return &unk_1E389DC00;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

__CFString *_HKCloudSyncObserverStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 7)
    return off_1E37EC150[a1 + 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A182DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A184050(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

id HKAuthorizationIdentifiersFromSharingAuthorizations(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, "hk_map:", &__block_literal_global_31);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

id HKSharingAuthorizationsFromAuthorizationIdentifiers(void *a1)
{
  if (a1)
  {
    objc_msgSend(a1, "hk_map:", &__block_literal_global_52);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_19A1871D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _HKDateFormatterFromPattern(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;

  v1 = (objc_class *)MEMORY[0x1E0CB3578];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setLocale:", v4);

  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTimeZone:", v5);

  objc_msgSend(v3, "setDateFormat:", v2);
  return v3;
}

const __CFString *NSStringFromHKCategoryValueSleepAnalysis(unint64_t a1)
{
  if (a1 > 5)
    return &stru_1E37FD4C0;
  else
    return off_1E37EC448[a1];
}

uint64_t HKCodableQuantitySeriesEnumerationResultCollectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  HKCodableQuantitySeriesEnumerationResult *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(HKCodableQuantitySeriesEnumerationResult);
        objc_msgSend((id)a1, "addResults:", v18);
        if (!PBReaderPlaceMark()
          || (HKCodableQuantitySeriesEnumerationResultReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A18B9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_0_7(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_1_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

BOOL HKAppleWalkingSteadinessClassificationForQuantity(HKQuantity *value, HKAppleWalkingSteadinessClassification *classificationOut, NSError **errorOut)
{
  HKQuantity *v5;
  void *v6;
  double v7;
  char v8;
  HKAppleWalkingSteadinessClassification v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  void *v15;
  void *v16;
  HKAppleWalkingSteadinessClassification v17;

  v5 = value;
  if (!classificationOut)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL HKAppleWalkingSteadinessClassificationForQuantity(HKQuantity *__strong _Nonnull, HKAppleWalkingSteadinessClassification * _Nonnull, NSError *__autoreleasing * _Nullable)");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, CFSTR("HKAppleWalkingSteadinessClassification.m"), 63, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("classificationOut != NULL"));

  }
  +[HKUnit percentUnit](HKUnit, "percentUnit");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[HKQuantity isCompatibleWithUnit:](v5, "isCompatibleWithUnit:", v6))
  {
    -[HKQuantity doubleValueForUnit:](v5, "doubleValueForUnit:", v6);
    v17 = 0;
    v8 = objc_msgSend(MEMORY[0x1E0CA5710], "classificationForScore:classification:", &v17, v7 * 100.0);
    if ((v8 & 1) != 0)
    {
      v9 = v17;
      v10 = 1;
      if (v17 == HKAppleWalkingSteadinessClassificationLow)
        v10 = 2;
      if (v17 != HKAppleWalkingSteadinessClassificationVeryLow)
        v9 = v10;
      *classificationOut = v9;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CA5710], "maximumScoreForClassification:", 1);
      v12 = v11 / 100.0;
      objc_msgSend(MEMORY[0x1E0CA5710], "minimumScoreForClassification:", 3);
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", errorOut, 3, CFSTR("value must be in range %f--%f"), v13 / 100.0, *(_QWORD *)&v12);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:description:", errorOut, 3, CFSTR("value quantity has a unit incompatible with percent"));
    v8 = 0;
  }

  return v8;
}

double hk_maxWalkingSteadinessValueForClassification(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = 1;
  if (a1 == 2)
    v1 = 2;
  if (a1 == 3)
    v2 = 3;
  else
    v2 = v1;
  objc_msgSend(MEMORY[0x1E0CA5710], "maximumScoreForClassification:", v2);
  return v3 / 100.0;
}

double hk_minWalkingSteadinessValueForClassification(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  v1 = 1;
  if (a1 == 2)
    v1 = 2;
  if (a1 == 3)
    v2 = 3;
  else
    v2 = v1;
  objc_msgSend(MEMORY[0x1E0CA5710], "minimumScoreForClassification:", v2);
  return v3 / 100.0;
}

HKQuantity *__cdecl HKAppleWalkingSteadinessMinimumQuantityForClassification(HKAppleWalkingSteadinessClassification classification)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  void *v6;

  v1 = 1;
  if (classification == HKAppleWalkingSteadinessClassificationLow)
    v1 = 2;
  if (classification == HKAppleWalkingSteadinessClassificationVeryLow)
    v2 = 3;
  else
    v2 = v1;
  objc_msgSend(MEMORY[0x1E0CA5710], "minimumScoreForClassification:", v2);
  v4 = v3 / 100.0;
  +[HKUnit percentUnit](HKUnit, "percentUnit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (HKQuantity *)v6;
}

HKQuantity *__cdecl HKAppleWalkingSteadinessMaximumQuantityForClassification(HKAppleWalkingSteadinessClassification classification)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  void *v5;
  void *v6;

  v1 = 1;
  if (classification == HKAppleWalkingSteadinessClassificationLow)
    v1 = 2;
  if (classification == HKAppleWalkingSteadinessClassificationVeryLow)
    v2 = 3;
  else
    v2 = v1;
  objc_msgSend(MEMORY[0x1E0CA5710], "maximumScoreForClassification:", v2);
  v4 = v3 / 100.0;
  +[HKUnit percentUnit](HKUnit, "percentUnit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return (HKQuantity *)v6;
}

id HKHealthWrapDERDataFromString(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0C99D50];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithBase64EncodedString:options:", v2, 0);

  return v3;
}

SecCertificateRef HKHealthWrapCertificateFromString(void *a1)
{
  const __CFData *v1;
  SecCertificateRef v2;

  HKHealthWrapDERDataFromString(a1);
  v1 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v2 = SecCertificateCreateWithData(0, v1);

  return v2;
}

uint64_t HKNotificationSyncStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3BE9E0);
}

uint64_t HKNotificationSyncStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EBC8);
}

uint64_t HKSourceOptionsForAppleDevice()
{
  return 2;
}

id HKConnectedGymSourceName()
{
  void *v0;
  void *v1;

  HKHealthKitFrameworkBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("CONNECTED_GYM_SOURCE_NAME"), &stru_1E37FD4C0, CFSTR("Localizable"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id HKBLEPeripheralSourceName()
{
  void *v0;
  void *v1;

  HKHealthKitFrameworkBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("BLE_PERIPHERAL_SOURCE_NAME"), &stru_1E37FD4C0, CFSTR("Localizable"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t HKSourceOptionsForBLEPeripheralSource()
{
  return 18;
}

uint64_t HKSourceOptionsForClinicalSource()
{
  return 8;
}

uint64_t _HKCurrentTaskIsAppExtension()
{
  void *v0;
  char isKindOfClass;

  objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordForCurrentProcess");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t HKMinimumScoreForPHQ9AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) >= 4)
    return 0;
  else
    return 5 * (a1 - 2) + 5;
}

uint64_t HKMaximumScoreForPHQ9AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 3)
    return 4;
  else
    return qword_19A44B928[a1 - 2];
}

const __CFString *NSStringFromHKPHQ9AssessmentAnswer(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("<unknown>");
  else
    return off_1E37EC698[a1];
}

const __CFString *NSStringFromHKPHQ9AssessmentRisk(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("<unknown>");
  else
    return off_1E37EC6C0[a1 - 1];
}

__CFString *NSStringFromHKCountrySetProvenance(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  void *v3;

  v1 = CFSTR("Unknown");
  switch(a1)
  {
    case 0:
      return v1;
    case 1:
      v1 = CFSTR("Operating System Plist");
      break;
    case 2:
      v1 = CFSTR("NanoRegistry Device");
      break;
    case 3:
      v1 = CFSTR("Operating System Binary");
      break;
    case 4:
      v1 = CFSTR("Over the Air (OTA)");
      break;
    default:
      if (a1 == 100)
      {
        v1 = CFSTR("Internal Override");
      }
      else
      {
        v2 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "stringWithFormat:", CFSTR("Unknown (%@)"), v3);
        v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

      }
      break;
  }
  return v1;
}

uint64_t HKTypeIsCollectibleWithStoreDemoModeEnabled(void *a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = objc_msgSend(a1, "code");
  result = 1;
  if (v3 > 257)
  {
    v9 = v3 - 258;
    if (v9 > 0x2D)
      return 0;
    v7 = 1 << v9;
    v8 = 0x39F013E95807;
    goto LABEL_8;
  }
  v5 = v3 + 116;
  if ((unint64_t)(v3 - 140) <= 0x36)
  {
    if (((1 << v5) & 0x41848300000000) != 0)
      return result;
    if (((1 << v5) & 0x81) != 0)
      return a2 ^ 1u;
  }
  if ((unint64_t)v3 > 0x3D)
  {
LABEL_4:
    v6 = v3 - 75;
    if (v6 > 0x3F)
      return 0;
    v7 = 1 << v6;
    v8 = 0x8000005804000101;
LABEL_8:
    if ((v7 & v8) != 0)
      return result;
    return 0;
  }
  if (((1 << v3) & 0x2000000000001780) == 0)
  {
    if (v3 != 5)
      goto LABEL_4;
    return a2 ^ 1u;
  }
  return result;
}

id HKAllCollectibleTypesWithStoreDemoModeEnabled(char a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  _QWORD v52[3];
  _QWORD v53[44];

  v53[42] = *MEMORY[0x1E0C80C00];
  v38 = objc_alloc(MEMORY[0x1E0C99E20]);
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierStepCount"));
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v53[0] = v50;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceWalkingRunning"));
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v53[1] = v49;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierBasalEnergyBurned"));
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v53[2] = v48;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierActiveEnergyBurned"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v53[3] = v47;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierFlightsClimbed"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v53[4] = v46;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRespiratoryRate"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v53[5] = v45;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierAppleExerciseTime"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v53[6] = v44;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceCycling"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v53[7] = v43;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierPushCount"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v53[8] = v42;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceSwimming"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v53[9] = v41;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierSwimmingStrokeCount"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v53[10] = v40;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceWheelchair"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v53[11] = v39;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceDownhillSnowSports"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v53[12] = v37;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierEnvironmentalAudioExposure"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v53[13] = v36;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierHeadphoneAudioExposure"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v53[14] = v35;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierAppleMoveTime"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v53[15] = v34;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierWalkingDoubleSupportPercentage"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v53[16] = v33;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierWalkingSpeed"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v53[17] = v32;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierWalkingStepLength"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v53[18] = v31;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierWalkingAsymmetryPercentage"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v53[19] = v30;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRunningStrideLength"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v53[20] = v29;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRunningVerticalOscillation"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v53[21] = v28;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRunningGroundContactTime"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v53[22] = v27;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierUnderwaterDepth"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v53[23] = v26;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRunningPower"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v53[24] = v25;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierEnvironmentalSoundReduction"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v53[25] = v24;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRunningSpeed"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v53[26] = v23;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierWaterTemperature"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v53[27] = v22;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierTimeInDaylight"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v53[28] = v21;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierCyclingPower"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v53[29] = v20;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierCyclingSpeed"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v53[30] = v19;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierCyclingCadence"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v53[31] = v18;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierCyclingFunctionalThresholdPower"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v53[32] = v17;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierPhysicalEffort"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v53[33] = v16;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistancePaddleSports"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v53[34] = v15;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceRowing"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v53[35] = v1;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceCrossCountrySkiing"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v53[36] = v2;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierDistanceSkatingSports"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v53[37] = v3;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierEstimatedWorkoutEffortScore"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v53[38] = v4;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierRowingSpeed"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v53[39] = v5;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierCrossCountrySkiingSpeed"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v53[40] = v6;
  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierPaddleSportsSpeed"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v53[41] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v53, 42);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v38, "initWithArray:", v8);

  if ((a1 & 1) == 0)
  {
    +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKQuantityTypeIdentifierHeartRate"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v10;
    +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKCategoryTypeIdentifierHighHeartRateEvent"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v52[1] = v11;
    +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", CFSTR("HKCategoryTypeIdentifierLowHeartRateEvent"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v52[2] = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v52, 3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "addObjectsFromArray:", v13);

  }
  return v9;
}

double HKDefaultAggregationIntervalForType(uint64_t a1)
{
  double result;

  result = 600.0;
  if (a1 > 257)
  {
    if ((unint64_t)(a1 - 258) <= 0x2D)
    {
      if (((1 << (a1 - 2)) & 0x39F013E91807) != 0)
        return result;
      if (a1 == 272)
        return 300.0;
    }
    return 3600.0;
  }
  if ((unint64_t)(a1 - 140) > 0x36 || ((1 << (a1 + 116)) & 0x41848300000081) == 0)
  {
    if ((unint64_t)a1 <= 0x3D)
    {
      if (((1 << a1) & 0x20000000000015A0) != 0)
        return result;
      if (a1 == 9)
        return 900.0;
    }
    if ((unint64_t)(a1 - 75) > 0x3F || ((1 << (a1 - 75)) & 0x8000005804000101) == 0)
      return 3600.0;
  }
  return result;
}

double HKDefaultCollectionLatencyForType(uint64_t a1)
{
  double result;
  uint64_t v2;
  unint64_t v3;

  result = 600.0;
  if (a1 > 257)
  {
    if ((unint64_t)(a1 - 258) > 0x2D)
      return 3600.0;
    v2 = 1 << (a1 - 2);
    v3 = 0x39F013E95807;
    goto LABEL_8;
  }
  if ((unint64_t)(a1 - 140) > 0x36 || ((1 << (a1 + 116)) & 0x41848300000081) == 0)
  {
    if ((unint64_t)a1 > 0x3D)
    {
LABEL_4:
      if ((unint64_t)(a1 - 75) > 0x3F)
        return 3600.0;
      v2 = 1 << (a1 - 75);
      v3 = 0x8000005804000101;
LABEL_8:
      if ((v2 & v3) != 0)
        return result;
      return 3600.0;
    }
    if (((1 << a1) & 0x1780) == 0)
    {
      if (((1 << a1) & 0x2000000000000020) != 0)
        return 1.0;
      goto LABEL_4;
    }
  }
  return result;
}

double HKDefaultMaximumSeriesDurationForType(uint64_t a1)
{
  double result;
  uint64_t v2;
  unint64_t v3;

  result = 1800.0;
  if (a1 > 257)
  {
    if ((unint64_t)(a1 - 258) > 0x2D)
      return 3600.0;
    v2 = 1 << (a1 - 2);
    v3 = 0x39F013E95807;
    goto LABEL_8;
  }
  if (((unint64_t)(a1 - 140) > 0x36 || ((1 << (a1 + 116)) & 0x41848300000081) == 0)
    && ((unint64_t)a1 > 0x3D || ((1 << a1) & 0x20000000000017A0) == 0))
  {
    if ((unint64_t)(a1 - 75) > 0x3F)
      return 3600.0;
    v2 = 1 << (a1 - 75);
    v3 = 0x8000005804000101;
LABEL_8:
    if ((v2 & v3) != 0)
      return result;
    return 3600.0;
  }
  return result;
}

BOOL HKHealthWrapCodableMessageKeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A194B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKFeatureFlagBloodOxygenSaturationEnabled()
{
  return 1;
}

uint64_t HKFeatureFlagHFDInSQLiteEnabled()
{
  return 1;
}

uint64_t HKFeatureFlagWorkoutSeriesAggregation()
{
  return _os_feature_enabled_impl();
}

id _HKStartDateForSnapshotIndex(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _HKActivityCacheDateComponentsFromCacheIndex(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _GregorianCalendar();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateFromComponents:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  _GregorianCalendar();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startOfDayForDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _GregorianCalendar()
{
  if (_GregorianCalendar_onceToken != -1)
    dispatch_once(&_GregorianCalendar_onceToken, &__block_literal_global_37);
  return (id)_GregorianCalendar___gregorianCalendar;
}

id _HKEndDateForSnapshotIndex(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _HKStartDateForSnapshotIndex(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _GregorianCalendar();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateByAddingUnit:value:toDate:options:", 16, 1, v1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  _GregorianCalendar();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startOfDayForDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  _GregorianCalendar();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingUnit:value:toDate:options:", 128, -1, v5, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t HKUnionDayIndexRange(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a3)
    return a3;
  return result;
}

uint64_t HKIntersectionDayIndexRange(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 > result || result >= a3 + a4)
  {
    if (result <= a3 && a3 < result + a2)
      return a3;
    else
      return 0;
  }
  return result;
}

__CFString *NSStringFromHKDayIndexRange(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  uint64_t v3;

  if (a1 | a2)
  {
    v3 = a2 + a1 - 1;
    if (a2 <= 0)
      v3 = 0x7FFFFFFFFFFFFFFFLL;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld - %ld (%ld)"), a1, v3, a2);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = CFSTR("All Time");
  }
  return v2;
}

void sub_19A197CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void sub_19A199E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A199F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRDevicePropertyProductType()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRDevicePropertyProductTypeSymbolLoc_ptr;
  v6 = getNRDevicePropertyProductTypeSymbolLoc_ptr;
  if (!getNRDevicePropertyProductTypeSymbolLoc_ptr)
  {
    v1 = (void *)NanoRegistryLibrary_1();
    v0 = (id *)dlsym(v1, "NRDevicePropertyProductType");
    v4[3] = (uint64_t)v0;
    getNRDevicePropertyProductTypeSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRDevicePropertyProductType_cold_1();
  return *v0;
}

void sub_19A19A024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A19A0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A19A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A19A264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A19A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRPairedDeviceRegistryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNRPairedDeviceRegistryClass_softClass_1;
  v7 = getNRPairedDeviceRegistryClass_softClass_1;
  if (!getNRPairedDeviceRegistryClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNRPairedDeviceRegistryClass_block_invoke_1;
    v3[3] = &unk_1E37E8690;
    v3[4] = &v4;
    __getNRPairedDeviceRegistryClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19A19A610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NanoRegistryLibrary_1()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_1)
  {
    v2 = xmmword_1E37ECA68;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_1)
    NanoRegistryLibrary_cold_1_1(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_1;
}

Class __getNRPairedDeviceRegistryClass_block_invoke_1(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_1();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_1();
  getNRPairedDeviceRegistryClass_softClass_1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19A19A88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification()
{
  id *v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_ptr;
  v6 = getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_ptr;
  if (!getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_block_invoke;
    v2[3] = &unk_1E37E8690;
    v2[4] = &v3;
    __getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_block_invoke((uint64_t)v2);
    v0 = (id *)v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification_cold_1();
  return *v0;
}

void sub_19A19A9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_2)
  {
    v4 = xmmword_1E37ECAD0;
    v5 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_2)
    __getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)NanoRegistryLibraryCore_frameworkLibrary_2, "NRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

__CFString *HKActivityMoveModeToString(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37ED0B0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t HKIsFitnessTrackingEnabled()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = HKIsFitnessTrackingEnabledWithUserDefaults(v0);

  return v1;
}

uint64_t HKIsFitnessTrackingEnabledWithUserDefaults(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL4 v20;
  NSObject *v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAppleWatch");

  if (!v3)
  {
    _HKInitializeLogging();
    HKLogInfrastructure();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);

    if (v8)
    {
      HKLogInfrastructure();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        HKIsFitnessTrackingEnabledWithUserDefaults_cold_3(v9);

    }
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v4 = (id)TCCAccessCopyInformationForBundleId();
    v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    v11 = (_QWORD *)MEMORY[0x1E0DB1170];
    if (v10)
    {
      v12 = v10;
      v13 = *(_QWORD *)v24;
      v14 = (_QWORD *)MEMORY[0x1E0DB10B8];
LABEL_10:
      v15 = 0;
      while (1)
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v4);
        v16 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v15);
        objc_msgSend(v16, "objectForKeyedSubscript:", *v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v17, "isEqualToString:", *v11) & 1) != 0)
          break;

        if (v12 == ++v15)
        {
          v12 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
          if (v12)
            goto LABEL_10;
          goto LABEL_16;
        }
      }
      objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0DB10A8]);
      v5 = objc_claimAutoreleasedReturnValue();

      if (v5)
        goto LABEL_19;
    }
    else
    {
LABEL_16:

    }
    v5 = MEMORY[0x1E0C9AAB0];
LABEL_19:
    if (TCCAccessGetOverride())
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[NSObject BOOLValue](v5, "BOOLValue"));
      v18 = v5;
      v5 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      _HKInitializeLogging();
      HKLogInfrastructure();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        HKIsFitnessTrackingEnabledWithUserDefaults_cold_2(v18);
    }

    _HKInitializeLogging();
    HKLogInfrastructure();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);

    if (v20)
    {
      HKLogInfrastructure();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        HKIsFitnessTrackingEnabledWithUserDefaults_cold_1(v5, v21);

    }
    goto LABEL_27;
  }
  objc_msgSend(v1, "persistentDomainForName:", CFSTR("com.apple.nanolifestyle.privacy"));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("EnableFitnessTracking"));
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
LABEL_27:
    v6 = -[NSObject BOOLValue](v5, "BOOLValue");
    goto LABEL_28;
  }
  v6 = 1;
LABEL_28:

  return v6;
}

uint64_t HKIsHeartRateEnabled()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.nanolifestyle.privacy"));
  v1 = objc_msgSend(v0, "hk_BOOLForKey:defaultValue:", CFSTR("EnableHeartRate"), 1);

  return v1;
}

id HKOxygenSaturationLowBarometricPressureThresholdQuantity()
{
  void *v0;
  void *v1;

  +[HKUnit pascalUnitWithMetricPrefix:](HKUnit, "pascalUnitWithMetricPrefix:", 9);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v0, 85.0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t HKIsDaylightTimeEnabledInPrivacy()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.nanolifestyle.privacy"));
  v1 = objc_msgSend(v0, "hk_BOOLForKey:defaultValue:", CFSTR("EnableDaylightTime"), 1);

  return v1;
}

void HKSetDaylightTimeEnabledInPrivacy(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.nanolifestyle.privacy"));
  objc_msgSend(v3, "setBool:forKey:", a1, CFSTR("EnableDaylightTime"));
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", CFSTR("EnableDaylightTime"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  HKSynchronizeNanoPreferencesUserDefaults(CFSTR("com.apple.nanolifestyle.privacy"), v2);

}

unint64_t HKObjectAuthorizationStatusForNumber(void *a1)
{
  unint64_t result;
  void *v2;
  void *v3;

  result = objc_msgSend(a1, "integerValue");
  if (result >= 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKObjectAuthorizationStatus HKObjectAuthorizationStatusForNumber(NSNumber *__strong)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKDefines.m"), 411, CFSTR("Number passed into HKObjectAuthorizationStatusForNumber was not a valid HKObjectAuthorizationStatus"));

    return 0;
  }
  return result;
}

__CFString *HKSyncProtocolVersionToString(int a1)
{
  int v1;
  __CFString *v2;

  v1 = a1 - 5;
  if ((a1 - 5) < 0xC && ((0xFFBu >> v1) & 1) != 0)
  {
    v2 = off_1E37ED0C8[v1];
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown (%ld)"), a1);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

__CFString *HKCloudSyncDataUploadRequestStatusToString(unint64_t a1)
{
  if (a1 < 6)
    return off_1E37ED128[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("invalid (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKCloudSyncOptionsToString(uint64_t a1)
{
  __int16 v1;
  id v2;
  void *v3;
  __CFString *v4;

  if (!a1)
  {
    v4 = CFSTR("none");
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("speculative"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_18;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("exclude-pull"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  objc_msgSend(v3, "addObject:", CFSTR("exclude-push"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  objc_msgSend(v3, "addObject:", CFSTR("rebase"));
  if ((v1 & 0x40) == 0)
  {
LABEL_7:
    if ((v1 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  objc_msgSend(v3, "addObject:", CFSTR("rebase-prohibited"));
  if ((v1 & 0x80) == 0)
  {
LABEL_8:
    if ((v1 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  objc_msgSend(v3, "addObject:", CFSTR("lite push"));
  if ((v1 & 0x100) == 0)
  {
LABEL_9:
    if ((v1 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  objc_msgSend(v3, "addObject:", CFSTR("separate-tombstones"));
  if ((v1 & 0x200) == 0)
  {
LABEL_10:
    if ((v1 & 0x400) == 0)
      goto LABEL_11;
LABEL_24:
    objc_msgSend(v3, "addObject:", CFSTR("cellular"));
    if ((v1 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_23:
  objc_msgSend(v3, "addObject:", CFSTR("no-profile-deletion"));
  if ((v1 & 0x400) != 0)
    goto LABEL_24;
LABEL_11:
  if ((v1 & 0x1000) != 0)
LABEL_12:
    objc_msgSend(v3, "addObject:", CFSTR("lite pull"));
LABEL_13:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v4;
}

__CFString *HKStaticSyncOptionsToString(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  __CFString *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("DoNotResetAnchors"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("ExportToDisk"));
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = CFSTR("none");
  }
  return v4;
}

id HKCloudSyncSharingTypeToString(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("tinker"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("summary-sharing"));
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

__CFString *HKCloudSyncReasonToString(unint64_t a1)
{
  if (a1 < 0x21)
    return off_1E37ED158[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id HKHealthKitFrameworkBundle()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)HKHealthKitFrameworkBundle_bundle;
  if (!HKHealthKitFrameworkBundle_bundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)HKHealthKitFrameworkBundle_bundle;
    HKHealthKitFrameworkBundle_bundle = v1;

    v0 = (void *)HKHealthKitFrameworkBundle_bundle;
  }
  return v0;
}

id HKLocalizedStringsURLForLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  HKHealthKitFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB34D0];
  objc_msgSend(v2, "localizations");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localeIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferredLocalizationsFromArray:forPreferences:", v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    while (2)
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(v2, "URLForResource:withExtension:subdirectory:localization:", CFSTR("Localizable-DataTypes"), CFSTR("strings"), 0, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v12), (_QWORD)v16);
        v13 = objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          v14 = (void *)v13;
          goto LABEL_11;
        }
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v10)
        continue;
      break;
    }
  }
  v14 = 0;
LABEL_11:

  return v14;
}

void HKSessionTrackerAriadneTrigger(unsigned int a1)
{
  CFAbsoluteTime Current;
  __CFString *v3;
  NSObject *v4;
  uint8_t buf[4];
  __CFString *v6;
  __int16 v7;
  CFAbsoluteTime v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  if (a1 - 1 >= 0x3C)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INVALID_IDENTIFIER(%lu)"), a1);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = off_1E37ED260[a1 - 1];
  }
  _HKInitializeLogging();
  v4 = HKLogGymKit;
  if (os_log_type_enabled((os_log_t)HKLogGymKit, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v6 = v3;
    v7 = 2048;
    v8 = Current;
    _os_log_impl(&dword_19A0E6000, v4, OS_LOG_TYPE_DEFAULT, "GymKitPerf: timestamp for signpost %@: %f", buf, 0x16u);
  }
  kdebug_trace();

}

__CFString *HKClinicalContentAnalyticsTriggerReasonToString(uint64_t a1)
{
  __CFString *v1;

  switch(a1)
  {
    case 0:
      return CFSTR("periodic activity");
    case 3:
      return CFSTR("unit test");
    case 2:
      v1 = CFSTR("hkctl command");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%zd)"), a1);
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
  }
  return v1;
}

__CFString *HKClinicalContentAnalyticsTriggerOptionsToString(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  __CFString *v4;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("do not reset accumulator"));
    if ((v1 & 2) != 0)
      objc_msgSend(v3, "addObject:", CFSTR("ignore anchors"));
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = CFSTR("none");
  }
  return v4;
}

__CFString *HKClinicalDataCollectionReasonToString(unint64_t a1)
{
  if (a1 < 5)
    return off_1E37ED440[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKClinicalReferencedActorTypeToString(unint64_t a1)
{
  if (a1 < 6)
    return off_1E37ED468[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown HKClinicalReferencedActorType (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringFromWorkoutCondenserReason(unint64_t a1)
{
  if (a1 < 4)
    return off_1E37ED498[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown reason (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringFromFailableBooleanResult(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37ED4B8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown result (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringFromAuthorizationBooleanResult(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37ED4D0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown authorization result (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringFromOptionalBooleanResult(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37ED4E8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown result (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id HKConditionallyRedactedHeartRhythmString(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.private.health.heart-rhythm"));
  v3 = objc_msgSend(v2, "BOOLForKey:", CFSTR("EnableHFEMode"));

  if (v3)
  {
    v4 = v1;
    if (HKRedactedHeartRhythmStringForTesting_onceToken != -1)
      dispatch_once(&HKRedactedHeartRhythmStringForTesting_onceToken, &__block_literal_global_39);
    if (objc_msgSend(v4, "rangeOfString:options:", CFSTR("%#@"), 8) == 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = (id)objc_msgSend(v4, "mutableCopy");
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v6 = (id)HKRedactedHeartRhythmStringForTesting_caseSensitiveReplacements;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v26 != v9)
              objc_enumerationMutation(v6);
            v11 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend((id)HKRedactedHeartRhythmStringForTesting_caseSensitiveReplacements, "objectForKeyedSubscript:", v11);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "replaceOccurrencesOfString:withString:options:range:", v11, v12, 0, 0, objc_msgSend(v5, "length"));

          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
        }
        while (v8);
      }

      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v13 = (id)HKRedactedHeartRhythmStringForTesting_caseInsensitiveReplacements;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v22;
        do
        {
          for (j = 0; j != v15; ++j)
          {
            if (*(_QWORD *)v22 != v16)
              objc_enumerationMutation(v13);
            v18 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * j);
            objc_msgSend((id)HKRedactedHeartRhythmStringForTesting_caseInsensitiveReplacements, "objectForKeyedSubscript:", v18, (_QWORD)v21);
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "replaceOccurrencesOfString:withString:options:range:", v18, v19, 1, 0, objc_msgSend(v5, "length"));

          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        }
        while (v15);
      }

    }
    else
    {
      v5 = v4;
    }

  }
  else
  {
    v5 = v1;
  }

  return v5;
}

uint64_t HKSupportedUnitPreferencesVersion(uint64_t a1, uint64_t a2)
{
  return HKProgramSDKAtLeast(0x7E40901FFFFFFFFLL, a2);
}

uint64_t _HKCategoryValueSleepAnalysisDefaultAsleepValue()
{
  return 1;
}

void *_HKCategoryValueSleepAnalysisAsleepValues()
{
  return &unk_1E389DC30;
}

NSSet *HKCategoryValueSleepAnalysisAsleepValues(void)
{
  return (NSSet *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", &unk_1E389DC30);
}

uint64_t _HKCategoryValueSleepAnalysisIsAsleep(unint64_t a1)
{
  return (a1 < 6) & (0x3Au >> a1);
}

void sub_19A19BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A19C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void sub_19A19D8F4(_Unwind_Exception *exception_object, int a2, ...)
{
  uint64_t *v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    if (a2 == 2)
    {
      v3 = objc_begin_catch(exception_object);
      _HKInitializeLogging();
      HKLogHealthOntology();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = objc_opt_class();
        -[HKUserDomainConceptNamedQuantity quantity].cold.1(v5, v2, (uint8_t *)va, v4);
      }

      objc_end_catch();
      JUMPOUT(0x19A19D8A8);
    }
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

BOOL HKIsNamedQuantityPropertyType(uint64_t a1)
{
  return a1 == 160021;
}

void *HKAllNamedQuantityPropertyTypes()
{
  return &unk_1E389DC48;
}

id HKHealthStoreServerInterface()
{
  if (HKHealthStoreServerInterface_onceToken != -1)
    dispatch_once(&HKHealthStoreServerInterface_onceToken, &__block_literal_global_40);
  return (id)HKHealthStoreServerInterface_interface;
}

id HKHealthStoreEndpointInterface()
{
  if (HKHealthStoreEndpointInterface_onceToken != -1)
    dispatch_once(&HKHealthStoreEndpointInterface_onceToken, &__block_literal_global_197);
  return (id)HKHealthStoreEndpointInterface_interface;
}

id HKUDIDeviceIdentifierFromDeviceIdentifierAndBatchNumber(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a1;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("(10)%@"), a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t HKFeatureUpdateVersionFromMajorVersionAndBuildVersion(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), a1, a2);
}

id HKIrregularRhythmNotificationsV1UpdateVersion()
{
  void *v0;
  void *v1;
  void *v2;

  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "currentOSBuild");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("1"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id HKIrregularRhythmNotificationsV1UDIDeviceIdentifier()
{
  void *v0;
  void *v1;
  int v2;
  __CFString *v3;
  __CFString *v4;
  void *v5;

  HKIrregularRhythmNotificationsV1UpdateVersion();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isAppleWatch");
  v3 = CFSTR("(01)00190198909527");
  if (v2)
    v3 = CFSTR("(01)00190198909510");
  v4 = v3;

  HKUDIDeviceIdentifierFromDeviceIdentifierAndBatchNumber(v4, (uint64_t)v0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

const __CFString *HKDiagnosticTestResultCategoryFromNSString(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  v2 = CFSTR("laboratory");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("laboratory")) & 1) == 0)
  {
    v2 = CFSTR("vital-signs");
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("vital-signs")))
      v2 = 0;
  }

  return v2;
}

id HKClinicalTypeForDiagnosticTestResultCategory(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("laboratory"))
  {
    +[HKClinicalType labResultRecordType](HKClinicalType, "labResultRecordType");
    v4 = objc_claimAutoreleasedReturnValue();
LABEL_6:
    v3 = (void *)v4;
    goto LABEL_7;
  }
  if (v1 == CFSTR("vital-signs"))
  {
    +[HKClinicalType vitalSignRecordType](HKClinicalType, "vitalSignRecordType");
    v4 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  v3 = 0;
LABEL_7:

  return v3;
}

id HKAllFeatureAvailabilityRequirementTypes()
{
  _QWORD v1[49];

  v1[48] = *MEMORY[0x1E0C80C00];
  v1[0] = objc_opt_class();
  v1[1] = objc_opt_class();
  v1[2] = objc_opt_class();
  v1[3] = objc_opt_class();
  v1[4] = objc_opt_class();
  v1[5] = objc_opt_class();
  v1[6] = objc_opt_class();
  v1[7] = objc_opt_class();
  v1[8] = objc_opt_class();
  v1[9] = objc_opt_class();
  v1[10] = objc_opt_class();
  v1[11] = objc_opt_class();
  v1[12] = objc_opt_class();
  v1[13] = objc_opt_class();
  v1[14] = objc_opt_class();
  v1[15] = objc_opt_class();
  v1[16] = objc_opt_class();
  v1[17] = objc_opt_class();
  v1[18] = objc_opt_class();
  v1[19] = objc_opt_class();
  v1[20] = objc_opt_class();
  v1[21] = objc_opt_class();
  v1[22] = objc_opt_class();
  v1[23] = objc_opt_class();
  v1[24] = objc_opt_class();
  v1[25] = objc_opt_class();
  v1[26] = objc_opt_class();
  v1[27] = objc_opt_class();
  v1[28] = objc_opt_class();
  v1[29] = objc_opt_class();
  v1[30] = objc_opt_class();
  v1[31] = objc_opt_class();
  v1[32] = objc_opt_class();
  v1[33] = objc_opt_class();
  v1[34] = objc_opt_class();
  v1[35] = objc_opt_class();
  v1[36] = objc_opt_class();
  v1[37] = objc_opt_class();
  v1[38] = objc_opt_class();
  v1[39] = objc_opt_class();
  v1[40] = objc_opt_class();
  v1[41] = objc_opt_class();
  v1[42] = objc_opt_class();
  v1[43] = objc_opt_class();
  v1[44] = objc_opt_class();
  v1[45] = objc_opt_class();
  v1[46] = objc_opt_class();
  v1[47] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 48);
  return (id)objc_claimAutoreleasedReturnValue();
}

id HKAllFeatureAvailabilityRequirementIdentifiers()
{
  void *v0;
  void *v1;

  HKAllFeatureAvailabilityRequirementTypes();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "hk_map:", &__block_literal_global_41);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t HKFeatureAvailabilityRequirementIdentifierReflectsSensitiveData(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NoOngoingPregnancy")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("NotInPostPregnancy"));

  return v2;
}

void sub_19A1A2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1A3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_19A1A37E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1A3AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A1A3CF0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19A1A4540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *HKQueryActivationStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("inactive");
  else
    return *(&off_1E37ED998 + a1 - 1);
}

id HKCopyQueryDescription(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  objc_class *v12;
  __CFString *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;
  __CFString *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const __CFString *v24;
  void *v25;

  v10 = a3;
  v11 = a4;
  v12 = (objc_class *)MEMORY[0x1E0CB3940];
  v13 = a6;
  v14 = a2;
  v15 = a1;
  v16 = [v12 alloc];
  v17 = objc_opt_class();

  HKDiagnosticStringFromUUID(v14);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" (%@)"), v10);
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v19 = &stru_1E37FD4C0;
  }
  if (v11)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" \"%@\""), v11);
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20 = &stru_1E37FD4C0;
  }
  HKStringFromQoS(a5);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)v21;
  v23 = " state=";
  if (v13)
  {
    v24 = v13;
  }
  else
  {
    v23 = "";
    v24 = &stru_1E37FD4C0;
  }
  v25 = (void *)objc_msgSend(v16, "initWithFormat:", CFSTR("<%@ %@%@%@ QoS=%@%s%@>"), v17, v18, v19, v20, v21, v23, v24, 0);

  if (v11)
  if (v10)

  return v25;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id _HKCreateRecalibrateEstimatesPresentationController()
{
  Class v0;
  objc_class *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!NSClassFromString(CFSTR("UIApplication")))
  {
    _HKInitializeLogging();
    v4 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_1(v4);
    return 0;
  }
  v8 = 0;
  if (!HealthUILibraryCore_frameworkLibrary)
  {
    v9 = xmmword_1E37ED9B0;
    v10 = 0;
    HealthUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HealthUILibraryCore_frameworkLibrary)
    _HKCreateRecalibrateEstimatesPresentationController_cold_2(&v8);
  v0 = NSClassFromString(CFSTR("HKRecalibrateEstimatesPresentationController"));
  if (!v0)
  {
    _HKInitializeLogging();
    v5 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_3(v5);
    return 0;
  }
  v1 = v0;
  v2 = &unk_1EE40ED48;
  if ((-[objc_class conformsToProtocol:](v1, "conformsToProtocol:", v2) & 1) != 0)
  {
    v3 = objc_alloc_init(v1);
  }
  else
  {
    _HKInitializeLogging();
    v7 = (void *)HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_4((uint64_t)v1, v7, (Protocol *)v2);
    v3 = 0;
  }

  return v3;
}

uint64_t HKHealthServicesManagerClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3EF998);
}

id HKHealthServicesServerInterface()
{
  void *v0;
  id v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EDA8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_getHealthPeripheralsWithFilter_handler_, 0, 1);
  v2 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchSupportedServiceIDsWithCompletion_, 0, 1);
  return v0;
}

double _CurrentTimeForClock(uint64_t a1)
{
  double result;
  void *v3;
  void *v4;

  if (a1 == 1)
    return (double)(mach_absolute_time() / 0x3B9ACA00);
  if (!a1)
    return CFAbsoluteTimeGetCurrent();
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFTimeInterval _CurrentTimeForClock(_HKDelayedOperationClock)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("_HKDelayedOperation.m"), 34, CFSTR("Invalid clock value for delayed operation: %ld"), a1);

  return result;
}

uint64_t HKCountryMonitorControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C6858);
}

uint64_t HKCountryMonitorControlServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EE08);
}

uint64_t HKFitnessMachineConnectionInitiatorClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3B2028);
}

id HKFitnessMachineConnectionInitiatorServerInterface()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EE68);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3B2028), sel_remote_registerConnectionInitiatorClient_, 0, 0);
  return v0;
}

void sub_19A1A7854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 HKIntervalTree<double>::insertInterval(uint64_t *a1, double *a2, __n128 a3)
{
  __n128 result;
  __n128 v5;
  char v6;
  __n128 v7;
  char v8;

  HKIntervalTree<double>::_insert(a1, a1, a2, (uint64_t)&v7, a3);
  if (v8)
  {
    do
    {
      HKIntervalTree<double>::_insert(a1, a1, v7.n128_f64, (uint64_t)&v5, result);
      v8 = v6;
      result = v5;
      v7 = v5;
    }
    while (v6);
  }
  return result;
}

void sub_19A1A7998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19A1A7A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t HKIntervalTree<double>::hasOverlapWithInterval(uint64_t *a1, double *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *a2;
  while (1)
  {
    v4 = v2;
    if (v3 <= *(double *)(v2 + 8) && a2[1] >= *(double *)v2)
      break;
    v2 = *(_QWORD *)(v2 + 24);
    if (!v2 || *(double *)(v2 + 16) <= v3)
    {
      v2 = *(_QWORD *)(v4 + 32);
      if (!v2)
        return 0;
    }
  }
  return 1;
}

void sub_19A1A7BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<HKIntervalTree<double>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x19AEC7398);
  }
  return result;
}

uint64_t *std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](v2 + 32, 0);
    std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](v2 + 24, 0);
    JUMPOUT(0x19AEC7398);
  }
  return result;
}

uint64_t *HKIntervalTree<double>::_insert@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  __n128 *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  double v17;
  double v18;
  char v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  char v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v8 = (__n128 *)*a2;
  if (!*a2)
  {
    v16 = operator new();
    *(_OWORD *)v16 = *(_OWORD *)a3;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 40) = 1;
    *(_QWORD *)&v32 = 0;
    std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](a2, v16);
    result = std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)&v32, 0);
LABEL_17:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return result;
  }
  a5.n128_u64[0] = v8->n128_u64[0];
  v9 = v8->n128_f64[1];
  v10 = *a3;
  v11 = a3[1];
  if (*a3 == v8->n128_f64[0] && v11 == v9)
    goto LABEL_17;
  v13 = (uint64_t)result;
  if (*((_BYTE *)result + 8))
    v14 = v10 > v9;
  else
    v14 = 1;
  if (v14 || v11 < a5.n128_f64[0])
  {
    if (v10 >= a5.n128_f64[0])
      result = HKIntervalTree<double>::_insert(&v32, result, &v8[2], a3);
    else
      result = HKIntervalTree<double>::_insert(&v32, result, &v8[1].n128_i8[8], a3);
    v19 = v32;
    v34[0] = *(_QWORD *)((char *)&v32 + 1);
    *(_QWORD *)((char *)v34 + 7) = *((_QWORD *)&v32 + 1);
    v20 = v33;
    v21 = *a2;
    if (!*a2)
    {
LABEL_56:
      *(_BYTE *)a4 = v19;
      *(_QWORD *)(a4 + 1) = v34[0];
      *(_QWORD *)(a4 + 8) = *(_QWORD *)((char *)v34 + 7);
      *(_BYTE *)(a4 + 16) = v20;
      return result;
    }
    v22 = a3[1];
    if (*(double *)(v21 + 16) < v22)
      *(double *)(v21 + 16) = v22;
    v23 = (uint64_t *)(v21 + 24);
    v24 = *(_QWORD *)(v21 + 24);
    if (v24)
      v25 = *(_DWORD *)(v24 + 40);
    else
      v25 = 0;
    v26 = (uint64_t *)(v21 + 32);
    v27 = *(_QWORD *)(v21 + 32);
    if (v27)
      v28 = *(_DWORD *)(v27 + 40);
    else
      v28 = 0;
    if (v25 <= v28)
      v25 = v28;
    *(_DWORD *)(v21 + 40) = v25 + 1;
    if (v24)
    {
      v29 = *(_DWORD *)(v24 + 40);
      if (v27)
      {
LABEL_43:
        v30 = *(_DWORD *)(v27 + 40);
        goto LABEL_46;
      }
    }
    else
    {
      v29 = 0;
      if (v27)
        goto LABEL_43;
    }
    v30 = 0;
LABEL_46:
    v31 = v29 - v30;
    if (v31 < 2)
    {
      if (v31 <= -2)
      {
        if (*a3 <= *(double *)v27)
        {
          if (*a3 < *(double *)v27)
          {
            HKIntervalTree<double>::_rightRotate(v13, v26);
            result = HKIntervalTree<double>::_leftRotate(v13, a2);
          }
        }
        else
        {
          result = HKIntervalTree<double>::_leftRotate(v13, a2);
        }
      }
    }
    else if (*a3 >= *(double *)v24)
    {
      if (*a3 > *(double *)v24)
      {
        HKIntervalTree<double>::_leftRotate(v13, v23);
        result = HKIntervalTree<double>::_rightRotate(v13, a2);
      }
    }
    else
    {
      result = HKIntervalTree<double>::_rightRotate(v13, a2);
    }
    goto LABEL_56;
  }
  if (a5.n128_f64[0] >= v10)
    a5.n128_f64[0] = *a3;
  if (v11 >= v9)
    v9 = a3[1];
  if (v9 >= a5.n128_f64[0])
    v17 = a5.n128_f64[0];
  else
    v17 = v9;
  if (a5.n128_f64[0] >= v9)
    v18 = a5.n128_f64[0];
  else
    v18 = v9;
  result = HKIntervalTree<double>::_delete(result, result, v8, a5);
  *(double *)a4 = v17;
  *(double *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t *HKIntervalTree<double>::_delete(uint64_t *result, uint64_t *a2, __n128 *a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __n128 v31;

  v4 = *a2;
  if (!*a2)
    return result;
  v6 = (uint64_t)result;
  a4.n128_u64[0] = a3->n128_u64[0];
  if (a3->n128_f64[0] < *(double *)v4)
  {
    v7 = v4 + 24;
LABEL_11:
    result = (uint64_t *)HKIntervalTree<double>::_delete(result, v7, a3, a4);
    goto LABEL_12;
  }
  if (a3->n128_f64[0] > *(double *)v4)
  {
    v7 = v4 + 32;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 32);
  if (v9)
  {
    if (v8)
    {
      v31 = 0uLL;
      do
      {
        v10 = (__n128 *)v8;
        v8 = *(_QWORD *)(v8 + 24);
      }
      while (v8);
      v31 = *v10;
      a4 = v31;
      *(__n128 *)v4 = v31;
      v7 = *a2 + 32;
      a3 = &v31;
      goto LABEL_11;
    }
    *(_QWORD *)(v4 + 24) = 0;
    v26 = a2;
    v8 = v9;
  }
  else
  {
    if (v8)
      *(_QWORD *)(v4 + 32) = 0;
    v26 = a2;
  }
  result = std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](v26, v8);
LABEL_12:
  v11 = *a2;
  if (!*a2)
    return result;
  v12 = (uint64_t *)(v11 + 24);
  v13 = *(_QWORD *)(v11 + 24);
  if (!v13)
  {
    v15 = *(_QWORD *)(v11 + 32);
    v19 = *(double *)(v11 + 8);
    if (!v15)
    {
      *(double *)(v11 + 16) = v19;
      *(_DWORD *)(v11 + 40) = 1;
      return result;
    }
    if (*(double *)(v15 + 16) >= v19)
      v19 = *(double *)(v15 + 16);
    *(double *)(v11 + 16) = v19;
    *(_DWORD *)(v11 + 40) = (*(_DWORD *)(v15 + 40) & ~(*(int *)(v15 + 40) >> 31)) + 1;
    v20 = *(_DWORD *)(v15 + 40);
    if (v20 < -1)
      return HKIntervalTree<double>::_rightRotate(v6, a2);
    v18 = -v20;
    goto LABEL_28;
  }
  v14 = *(double *)(v11 + 8);
  v15 = *(_QWORD *)(v11 + 32);
  if (!v15)
  {
    if (*(double *)(v13 + 16) >= v14)
      v14 = *(double *)(v13 + 16);
    *(double *)(v11 + 16) = v14;
    *(_DWORD *)(v11 + 40) = (*(_DWORD *)(v13 + 40) & ~(*(int *)(v13 + 40) >> 31)) + 1;
    v23 = *(_DWORD *)(v13 + 40);
    if (v23 >= 2)
      goto LABEL_34;
    if (v23 >= -1)
      return result;
    return HKIntervalTree<double>::_leftRotate(v6, a2);
  }
  v16 = *(double *)(v15 + 16);
  if (*(double *)(v13 + 16) >= v16)
    v16 = *(double *)(v13 + 16);
  if (v16 >= v14)
    v14 = v16;
  *(double *)(v11 + 16) = v14;
  v17 = *(_DWORD *)(v13 + 40);
  if (v17 <= *(_DWORD *)(v15 + 40))
    v17 = *(_DWORD *)(v15 + 40);
  *(_DWORD *)(v11 + 40) = v17 + 1;
  v18 = *(_DWORD *)(v13 + 40) - *(_DWORD *)(v15 + 40);
  if (v18 <= 1)
  {
LABEL_28:
    if (v18 >= -1)
      return result;
    v21 = *(_QWORD *)(v15 + 24);
    if (v21)
      v22 = *(_DWORD *)(v21 + 40);
    else
      v22 = 0;
    v29 = *(_QWORD *)(v15 + 32);
    if (v29)
      v30 = *(_DWORD *)(v29 + 40);
    else
      v30 = 0;
    if (v22 > v30)
    {
      if (v21)
        LODWORD(v21) = *(_DWORD *)(v21 + 40);
      if (v29)
        LODWORD(v29) = *(_DWORD *)(v29 + 40);
      if ((int)v21 <= (int)v29)
        return result;
      HKIntervalTree<double>::_rightRotate(v6, v12 + 1);
    }
    return HKIntervalTree<double>::_leftRotate(v6, a2);
  }
LABEL_34:
  v24 = *(_QWORD *)(v13 + 24);
  if (v24)
    v25 = *(_DWORD *)(v24 + 40);
  else
    v25 = 0;
  v27 = *(_QWORD *)(v13 + 32);
  if (v27)
    v28 = *(_DWORD *)(v27 + 40);
  else
    v28 = 0;
  if (v25 >= v28)
    return HKIntervalTree<double>::_rightRotate(v6, a2);
  if (v24)
    LODWORD(v24) = *(_DWORD *)(v24 + 40);
  if (v27)
    LODWORD(v27) = *(_DWORD *)(v27 + 40);
  if ((int)v24 < (int)v27)
  {
    HKIntervalTree<double>::_leftRotate(v6, v12);
    return HKIntervalTree<double>::_rightRotate(v6, a2);
  }
  return result;
}

uint64_t *HKIntervalTree<double>::_rightRotate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(*a2 + 24);
  if (!v2)
    HKIntervalTree<double>::_rightRotate();
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  v30 = 0;
  v31 = v4;
  v5 = *(_QWORD *)(*a2 + 24);
  v6 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  v7 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)(*a2 + 24) = 0;
  v29 = v7;
  v8 = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(*a2 + 32) = 0;
  v9 = *a2;
  *a2 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v9 + 24), v6);
  v10 = (uint64_t *)(v9 + 32);
  v28 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v9 + 32), v8);
  v11 = *(_QWORD *)(v9 + 24);
  if (v11)
    v12 = *(_DWORD *)(v11 + 40);
  else
    v12 = 0;
  v13 = *v10;
  if (*v10)
  {
    if (v12 <= *(_DWORD *)(v13 + 40))
      v12 = *(_DWORD *)(v13 + 40);
    *(_DWORD *)(v9 + 40) = v12 + 1;
    v14 = *(double *)(v9 + 8);
    v15 = (double *)(v13 + 16);
    if (v11)
    {
      v17 = *(double *)(v11 + 16);
      v16 = (double *)(v11 + 16);
      if (v17 >= *v15)
        v15 = v16;
    }
  }
  else
  {
    *(_DWORD *)(v9 + 40) = (v12 & ~(v12 >> 31)) + 1;
    v14 = *(double *)(v9 + 8);
    if (!v11)
      goto LABEL_16;
    v15 = (double *)(v11 + 16);
  }
  if (*v15 >= v14)
    v14 = *v15;
LABEL_16:
  *(double *)(v9 + 16) = v14;
  v31 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v7 + 24), v4);
  v18 = (uint64_t *)(v7 + 32);
  v27 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v7 + 32), v9);
  v19 = *(_QWORD *)(v7 + 24);
  if (v19)
    v20 = *(_DWORD *)(v19 + 40);
  else
    v20 = 0;
  v21 = *v18;
  if (*v18)
  {
    if (v20 <= *(_DWORD *)(v21 + 40))
      v20 = *(_DWORD *)(v21 + 40);
    *(_DWORD *)(v7 + 40) = v20 + 1;
    v22 = *(double *)(v7 + 8);
    v23 = (double *)(v21 + 16);
    if (v19)
    {
      v25 = *(double *)(v19 + 16);
      v24 = (double *)(v19 + 16);
      if (v25 >= *v23)
        v23 = v24;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 40) = (v20 & ~(v20 >> 31)) + 1;
    v22 = *(double *)(v7 + 8);
    if (!v19)
      goto LABEL_30;
    v23 = (double *)(v19 + 16);
  }
  if (*v23 >= v22)
    v22 = *v23;
LABEL_30:
  *(double *)(v7 + 16) = v22;
  v29 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](a2, v7);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v27, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v28, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v29, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v30, 0);
  return std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v31, 0);
}

uint64_t *HKIntervalTree<double>::_leftRotate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  double *v24;
  double *v25;
  double v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *a2;
  if (!*(_QWORD *)(*a2 + 32))
    HKIntervalTree<double>::_leftRotate();
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  v5 = *(_QWORD *)(*a2 + 32);
  v6 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = 0;
  v7 = *(_QWORD *)(*a2 + 32);
  v8 = *(_QWORD *)(v7 + 32);
  *(_QWORD *)(v7 + 32) = 0;
  v9 = *(_QWORD *)(*a2 + 32);
  *(_QWORD *)(*a2 + 32) = 0;
  v29 = v9;
  v10 = *a2;
  *a2 = 0;
  v32 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v10 + 24), v4);
  v11 = (uint64_t *)(v10 + 32);
  v31 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v10 + 32), v6);
  v12 = *(_QWORD *)(v10 + 24);
  if (v12)
    v13 = *(_DWORD *)(v12 + 40);
  else
    v13 = 0;
  v14 = *v11;
  if (*v11)
  {
    if (v13 <= *(_DWORD *)(v14 + 40))
      v13 = *(_DWORD *)(v14 + 40);
    *(_DWORD *)(v10 + 40) = v13 + 1;
    v15 = *(double *)(v10 + 8);
    v16 = (double *)(v14 + 16);
    if (v12)
    {
      v18 = *(double *)(v12 + 16);
      v17 = (double *)(v12 + 16);
      if (v18 >= *v16)
        v16 = v17;
    }
  }
  else
  {
    *(_DWORD *)(v10 + 40) = (v13 & ~(v13 >> 31)) + 1;
    v15 = *(double *)(v10 + 8);
    if (!v12)
      goto LABEL_16;
    v16 = (double *)(v12 + 16);
  }
  if (*v16 >= v15)
    v15 = *v16;
LABEL_16:
  *(double *)(v10 + 16) = v15;
  v28 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v9 + 24), v10);
  v19 = (uint64_t *)(v9 + 32);
  v30 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100]((uint64_t *)(v9 + 32), v8);
  v20 = *(_QWORD *)(v9 + 24);
  if (v20)
    v21 = *(_DWORD *)(v20 + 40);
  else
    v21 = 0;
  v22 = *v19;
  if (*v19)
  {
    if (v21 <= *(_DWORD *)(v22 + 40))
      v21 = *(_DWORD *)(v22 + 40);
    *(_DWORD *)(v9 + 40) = v21 + 1;
    v23 = *(double *)(v9 + 8);
    v24 = (double *)(v22 + 16);
    if (v20)
    {
      v26 = *(double *)(v20 + 16);
      v25 = (double *)(v20 + 16);
      if (v26 >= *v24)
        v24 = v25;
    }
  }
  else
  {
    *(_DWORD *)(v9 + 40) = (v21 & ~(v21 >> 31)) + 1;
    v23 = *(double *)(v9 + 8);
    if (!v20)
      goto LABEL_30;
    v24 = (double *)(v20 + 16);
  }
  if (*v24 >= v23)
    v23 = *v24;
LABEL_30:
  *(double *)(v9 + 16) = v23;
  v29 = 0;
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](a2, v9);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v28, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v29, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v30, 0);
  std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v31, 0);
  return std::unique_ptr<HKIntervalTreeNode<double>>::reset[abi:ne180100](&v32, 0);
}

uint64_t HKIntervalTree<double>::_enumeratePreOrder(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v5 = result;
    v7 = a2;
    v6 = *(_QWORD *)(a3 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v7);
    HKIntervalTree<double>::_enumeratePreOrder(v5, *(_QWORD *)(a2 + 24), a3);
    return HKIntervalTree<double>::_enumeratePreOrder(v5, *(_QWORD *)(a2 + 32), a3);
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19AEC7398);
}

void sub_19A1A8788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

__CFString *HKStringFromOntologyLocalizedEducationContentSectionType(unint64_t a1)
{
  if (a1 < 7)
    return off_1E37EDAB8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A1A9E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HKDateMin(void *a1, void *a2)
{
  return _HKQuantityComparisonResults(a1, a2, -1);
}

uint64_t HKDateMid(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  v5 = v4;
  objc_msgSend(v3, "timeIntervalSinceReferenceDate");
  v7 = v6;

  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (v5 + v7) * 0.5);
}

id HKDateMax(void *a1, void *a2)
{
  return _HKQuantityComparisonResults(a1, a2, 1);
}

uint64_t HKSleepTestCalendar()
{
  return objc_msgSend(MEMORY[0x1E0C99D48], "hk_gregorianCalendarWithCupertinoTimeZone");
}

uint64_t HKSleepTestMorningIndex(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  HKSleepTestDate(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "hk_gregorianCalendarWithCupertinoTimeZone");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "hk_morningIndexWithCalendar:", v2);

  return v3;
}

id HKSleepTestDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = HKSleepTestDate_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&HKSleepTestDate_onceToken, &__block_literal_global_44);
  objc_msgSend((id)HKSleepTestDate_dateFormatter, "dateFromString:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKSleepTestDateWithSeconds(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = HKSleepTestDateWithSeconds_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&HKSleepTestDateWithSeconds_onceToken, &__block_literal_global_7);
  objc_msgSend((id)HKSleepTestDateWithSeconds_dateFormatter, "dateFromString:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKSleepTestDateInterval(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0CB3588];
  v4 = a2;
  v5 = a1;
  v6 = [v3 alloc];
  HKSleepTestDate(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  HKSleepTestDate(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(v6, "initWithStartDate:endDate:", v7, v8);
  return v9;
}

id HKSleepTestDateIntervalWithSeconds(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (objc_class *)MEMORY[0x1E0CB3588];
  v4 = a2;
  v5 = a1;
  v6 = [v3 alloc];
  HKSleepTestDateWithSeconds(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  HKSleepTestDateWithSeconds(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (void *)objc_msgSend(v6, "initWithStartDate:endDate:", v7, v8);
  return v9;
}

id HKSleepTestSegment(void *a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;

  HKSleepTestDateInterval(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepPeriodSegment sleepPeriodSegmentWithDateInterval:category:](HKSleepPeriodSegment, "sleepPeriodSegmentWithDateInterval:category:", v4, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id HKAppleSleepTrackingTestSegment(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  HKSleepTestDateInterval(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepPeriodSegment sleepPeriodSegmentWithDateInterval:sampleIntervals:category:containsAppleSleepTrackingData:](HKSleepPeriodSegment, "sleepPeriodSegmentWithDateInterval:sampleIntervals:category:containsAppleSleepTrackingData:", v2, v3, _HKCategoryValueSleepAnalysisDefaultAsleepValue(), 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKSleepTestPeriod(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a3;
  HKSleepTestDateInterval(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepPeriod sleepPeriodWithDateInterval:segments:](HKSleepPeriod, "sleepPeriodWithDateInterval:segments:", v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKSleepTestDaySummary(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  void *v23;
  void *v24;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  if (a6)
  {
    v18 = a6;
    +[HKUnit hourUnit](HKUnit, "hourUnit");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "doubleValue");
    v21 = v20;

    +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v19, v21);
    a6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  HKSleepTestDateInterval(v13, v14);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "hk_gregorianCalendarWithCupertinoTimeZone");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepDaySummary daySummaryWithMorningIndex:dateInterval:calendar:periods:schedules:sleepDurationGoal:creationInterval:](HKSleepDaySummary, "daySummaryWithMorningIndex:dateInterval:calendar:periods:schedules:sleepDurationGoal:creationInterval:", a1, v22, v23, v15, v16, a6, v17);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

id HKSleepTestSleepSampleWithValue(uint64_t a1, void *a2, void *a3)
{
  return HKSleepTestSleepSampleWithValueAndMetadata(a1, a2, a3, 0);
}

id HKSleepTestSleepSampleWithValueAndMetadata(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  +[HKCategoryType _categoryTypeWithCode:](HKCategoryType, "_categoryTypeWithCode:", 63);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKCategorySample categorySampleWithType:value:startDate:endDate:metadata:](HKCategorySample, "categorySampleWithType:value:startDate:endDate:metadata:", v10, a1, v9, v8, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id HKTestSleepSampleWithValueAndSource(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void *v8;

  v7 = a4;
  HKSleepTestSleepSampleWithValueAndMetadata(a1, a2, a3, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_setSourceRevision:", v7);

  return v8;
}

id HKSleepTestAsleepSample(void *a1, void *a2)
{
  return HKSleepTestAsleepSampleWithSourceRevision(a1, a2, 0);
}

id HKSleepTestAsleepSampleWithSourceRevision(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v8 = _HKCategoryValueSleepAnalysisDefaultAsleepValue();
  HKSleepTestSleepSampleWithValueAndMetadata(v8, v7, v6, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    objc_msgSend(v9, "_setSourceRevision:", v5);

  return v9;
}

id HKSleepTestInBedSample(void *a1, void *a2)
{
  return HKSleepTestSleepSampleWithValueAndMetadata(0, a1, a2, 0);
}

id HKSleepTestInBedSampleWithMetadata(void *a1, void *a2, void *a3)
{
  return HKSleepTestSleepSampleWithValueAndMetadata(0, a1, a2, a3);
}

id HKSleepTestAwakeSample(void *a1, void *a2)
{
  return HKSleepTestSleepSampleWithValueAndMetadata(2, a1, a2, 0);
}

id HKSleepTestGoalSample(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a1;
  +[HKObjectType sleepDurationGoalType](HKQuantityType, "sleepDurationGoalType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKUnit hourUnit](HKUnit, "hourUnit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:", v4, v6, v3, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKSleepTestSchedule(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = (void *)MEMORY[0x1E0C99D78];
  v8 = a1;
  objc_msgSend(v7, "hk_componentsWithHour:minute:", a4, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_componentsWithHour:minute:", a3, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepSchedule sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:](HKSleepSchedule, "sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:", v8, a2, v9, v10, 0, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id HKSleepTestOverrideSchedule(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v7 = (void *)MEMORY[0x1E0C99D78];
  v8 = a1;
  objc_msgSend(v7, "hk_componentsWithHour:minute:", a4, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_componentsWithHour:minute:", a3, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKSleepSchedule sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:](HKSleepSchedule, "sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:", v8, 0, v9, v10, v11, 0, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

HKSleepSchedule *HKSleepTestEmptySchedule(uint64_t a1, uint64_t a2)
{
  return +[HKSleepSchedule sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:](HKSleepSchedule, "sleepScheduleWithDate:weekdays:wakeTimeComponents:bedTimeComponents:overrideDayIndex:device:metadata:", a1, a2, 0, 0, 0, 0, 0);
}

id HKCreationInterval(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  if (objc_msgSend(v1, "count"))
  {
    objc_msgSend(v1, "hk_map:", &__block_literal_global_25);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_alloc(MEMORY[0x1E0CB3588]);
    objc_msgSend(v2, "firstObject");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "lastObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v3, "initWithStartDate:endDate:", v4, v5);

  }
  else
  {
    v6 = objc_alloc_init(MEMORY[0x1E0CB3588]);
  }

  return v6;
}

unint64_t HKFeatureAvailabilityOnboardingIneligibilityReasonsForRescindedStatus(unint64_t a1)
{
  if (a1 >= 3)
    return 0;
  else
    return a1 << 6;
}

void sub_19A1AE870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void sub_19A1AEE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKHealthWrapCodableMessageHeaderReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 76) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_59:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_55;
        case 3u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
          goto LABEL_55;
        case 4u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 64;
          goto LABEL_55;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
          goto LABEL_55;
        case 6u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_55;
        case 7u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 76) |= 2u;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_63:
          v44 = 56;
          goto LABEL_68;
        case 8u:
          v32 = 0;
          v33 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 76) |= 4u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v28 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v28) = 0;
LABEL_67:
          v44 = 60;
LABEL_68:
          *(_DWORD *)(a1 + v44) = v28;
          continue;
        case 9u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 76) |= 8u;
          break;
        case 0xAu:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 48;
LABEL_55:
          v43 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          break;
        v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
        *(_QWORD *)(a2 + v40) = v41 + 1;
        v39 |= (unint64_t)(v42 & 0x7F) << v37;
        if ((v42 & 0x80) == 0)
          goto LABEL_70;
        v37 += 7;
        v14 = v38++ >= 9;
        if (v14)
        {
          v39 = 0;
          goto LABEL_72;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
      if (*(_BYTE *)(a2 + *v5))
        v39 = 0;
LABEL_72:
      *(_BYTE *)(a1 + 72) = v39 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A1B33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKHealthRecordsAccountsEventFromNSNumber(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "integerValue");
  if ((unint64_t)(result - 1) >= 5)
    return 0;
  return result;
}

const __CFString *NSStringFromHKHealthRecordsAccountsEvent(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E37EDF18[a1 - 1];
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_19A1B747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

const __CFString *NSStringForSignedClinicalDataRecordSignatureStatus(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unrecognized status code");
  else
    return off_1E37EE248[a1];
}

const __CFString *NSStringForSignedClinicalDataSourceType(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 2)
    v1 = CFSTR("EU DCC");
  if (a1 == 1)
    return CFSTR("SMART Health Card");
  else
    return v1;
}

void sub_19A1BA808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A1BAB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  binarysample::Electrocardiogram::~Electrocardiogram((binarysample::Electrocardiogram *)&a9);

  binarysample::Electrocardiogram::~Electrocardiogram((binarysample::Electrocardiogram *)&a15);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<binarysample::ElectrocardiogramLead>::emplace_back<binarysample::ElectrocardiogramLead const>(binarysample::ElectrocardiogramLead ***a1, const binarysample::ElectrocardiogramLead *a2)
{
  binarysample::ElectrocardiogramLead *v4;
  uint64_t result;
  unint64_t v6;
  binarysample::ElectrocardiogramLead **v7;
  binarysample::ElectrocardiogramLead **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  binarysample::ElectrocardiogramLead **v14;
  char *v15;
  binarysample::ElectrocardiogramLead **v16;
  binarysample::ElectrocardiogramLead **v17;
  binarysample::ElectrocardiogramLead *v18;
  int64x2_t v19;
  binarysample::ElectrocardiogramLead **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (binarysample::ElectrocardiogramLead *)operator new();
  binarysample::ElectrocardiogramLead::ElectrocardiogramLead(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(result, v12);
    else
      v13 = 0;
    v14 = (binarysample::ElectrocardiogramLead **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (binarysample::ElectrocardiogramLead **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (binarysample::ElectrocardiogramLead **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<binarysample::ElectrocardiogramLead>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_19A1BACC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::__emplace_unique_key_args<binarysample::ElectrocardiogramLead_Name,std::piecewise_construct_t const&,std::tuple<binarysample::ElectrocardiogramLead_Name const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  uint64_t *v12;
  uint64_t v14[2];
  char v15;

  v7 = (uint64_t)(a1 + 1);
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x68uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    binarysample::ElectrocardiogramLead::ElectrocardiogramLead((binarysample::ElectrocardiogramLead *)(v12 + 5));
    v15 = 1;
    std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,void *>>>>::reset[abi:ne180100](v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      binarysample::ElectrocardiogramLead::~ElectrocardiogramLead((binarysample::ElectrocardiogramLead *)(v2 + 40));
    operator delete((void *)v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__split_buffer<std::unique_ptr<binarysample::ElectrocardiogramLead>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::__map_value_compare<binarysample::ElectrocardiogramLead_Name,std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>,std::less<binarysample::ElectrocardiogramLead_Name>,true>,std::allocator<std::__value_type<binarysample::ElectrocardiogramLead_Name,binarysample::ElectrocardiogramLead>>>::destroy(a1, a2[1]);
    binarysample::ElectrocardiogramLead::~ElectrocardiogramLead((binarysample::ElectrocardiogramLead *)(a2 + 5));
    operator delete(a2);
  }
}

void sub_19A1BB6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a32);
  _Unwind_Resume(a1);
}

void sub_19A1BC5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return NSRequestConcreteImplementation();
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return objc_opt_class();
}

id _HKCreateAuthorizationPresentationController()
{
  Class v0;
  objc_class *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!NSClassFromString(CFSTR("UIApplication")))
  {
    _HKInitializeLogging();
    v4 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_1(v4);
    return 0;
  }
  v8 = 0;
  if (!HealthUILibraryCore_frameworkLibrary_0)
  {
    v9 = xmmword_1E37EE398;
    v10 = 0;
    HealthUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!HealthUILibraryCore_frameworkLibrary_0)
    _HKCreateAuthorizationPresentationController_cold_2(&v8);
  v0 = NSClassFromString(CFSTR("HKAuthorizationPresentationController"));
  if (!v0)
  {
    _HKInitializeLogging();
    v5 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateAuthorizationPresentationController_cold_3(v5);
    return 0;
  }
  v1 = v0;
  v2 = &unk_1EE40EF28;
  if ((-[objc_class conformsToProtocol:](v1, "conformsToProtocol:", v2) & 1) != 0)
  {
    v3 = objc_alloc_init(v1);
  }
  else
  {
    _HKInitializeLogging();
    v7 = (void *)HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_4((uint64_t)v1, v7, (Protocol *)v2);
    v3 = 0;
  }

  return v3;
}

__CFString *HKDataCollectionTypeToString(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37EE3B0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id HKSleepDaySummarySampleTypes()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierSleepAnalysis"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKObjectType sleepScheduleType](HKObjectType, "sleepScheduleType", v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  +[HKObjectType sleepDurationGoalType](HKObjectType, "sleepDurationGoalType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[2] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_19A1C0BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKHealthRecordsStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C3410);
}

id HKHealthRecordsStoreServerInterface()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40EF88);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2 = objc_opt_class();
  v3 = (void *)objc_msgSend(v1, "initWithObjects:", v2, objc_opt_class(), 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_remote_fetchClinicalConnectedAccountsWithCompletion_, 0, 1);
  objc_msgSend(MEMORY[0x1E0CB36D8], "hk_JSONObjectSecureCodingClasses");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_remote_fetchFHIRJSONDocumentWithAccountIdentifier_completion_, 0, 1);

  return v0;
}

void sub_19A1C3B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

id OUTLINED_FUNCTION_0_9(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_1_7(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_19A1C814C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A1C867C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _HKCreateActivityForSampleType(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const __CFString *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0CA5920];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithActivityType:", CFSTR("com.apple.health.dataType"));
  objc_msgSend(v3, "setEligibleForHandoff:", 1);
  objc_msgSend(v3, "setEligibleForSearch:", 0);
  objc_msgSend(v3, "setEligibleForPublicIndexing:", 0);
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", CFSTR("HKSampleTypeActivityKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setRequiredUserInfoKeys:", v4);
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = objc_msgSend(v2, "code");

  objc_msgSend(v5, "numberWithInteger:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = CFSTR("HKSampleTypeActivityKey");
  v11[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setUserInfo:", v8);

  return v3;
}

id _HKCreateActivityForCHRAPIAppSettings(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0CA5920];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithActivityType:", CFSTR("com.apple.health.plugin"));
  objc_msgSend(v3, "setEligibleForHandoff:", 0);
  objc_msgSend(v3, "setEligibleForPrediction:", 0);
  objc_msgSend(v3, "setEligibleForPublicIndexing:", 0);
  objc_msgSend(v3, "setEligibleForSearch:", 0);
  v10[0] = CFSTR("bundleIdentifier");
  v10[1] = CFSTR("bundleName");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", v4);
  objc_msgSend(v3, "setRequiredUserInfoKeys:", v5);

  v8[0] = CFSTR("bundleIdentifier");
  v8[1] = CFSTR("bundleName");
  v9[0] = v2;
  v9[1] = CFSTR("HealthRecords");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "setUserInfo:", v6);
  return v3;
}

id _HKCreateURLForSampleType(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0CB3998];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "setScheme:", CFSTR("x-apple-health"));
  objc_msgSend(v3, "setHost:", CFSTR("SampleType"));
  objc_msgSend(v2, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1E0CB3940];
  v10[0] = CFSTR("/");
  v10[1] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "pathWithComponents:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "setPath:", v7);
  objc_msgSend(v3, "URL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id _HKSampleTypeFromURL(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;

  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "scheme");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "host");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "path");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "pathComponents");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }
  if (objc_msgSend(v2, "isEqualToString:", CFSTR("x-apple-health"))
    && (objc_msgSend(v3, "isEqualToString:", CFSTR("SampleType")) ? (v7 = v6 == 0) : (v7 = 1),
        !v7 && objc_msgSend(v6, "count") == 2))
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("/"));

    v10 = 0;
    if (v9)
    {
      objc_msgSend(v6, "objectAtIndexedSubscript:", 1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", v11);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

__CFString *HKStringFromOntologyShardSettings(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("Manual Override"));
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("[%@]"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = CFSTR("none");
  }
  return v6;
}

__CFString *HKStringFromOntologyShardState(unint64_t a1)
{
  if (a1 < 4)
    return off_1E37EEC08[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringFromOntologyShardVersion(uint64_t a1)
{
  __CFString *v1;

  if (a1 == -1)
    return CFSTR("Undetermined");
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("v%ld"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = CFSTR("None");
  }
  return v1;
}

__CFString *HKStringFromOntologyFeatureRequestOptions(uint64_t a1)
{
  __CFString *v1;
  char v2;
  id v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;

  v1 = CFSTR("Mark Not Required");
  if (a1)
  {
    v2 = a1;
    v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v4 = v3;
    if ((v2 & 1) != 0)
      v5 = CFSTR("Mark Required");
    else
      v5 = CFSTR("Mark Not Required");
    objc_msgSend(v3, "addObject:", v5);
    if ((v2 & 2) != 0)
      objc_msgSend(v4, "addObject:", CFSTR("First Launch"));
    if ((v2 & 4) != 0)
      objc_msgSend(v4, "addObject:", CFSTR("User Initiated"));
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("[%@]"), v7);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v1;
}

__CFString *HKStringFromHKOntologyPruneOptions(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("Force"));
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("[%@]"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = CFSTR("None");
  }
  return v6;
}

__CFString *HKStringFromOntologyUpdateReason(unint64_t a1)
{
  if (a1 < 6)
    return off_1E37EEC28[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown reason (%zd)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t HKIsKnownOntologyShardIdentifier(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v6 = CFSTR("manifest");
  v7 = CFSTR("CoreMeds");
  v8 = CFSTR("Interactions");
  v9 = CFSTR("MedsEducation");
  v10 = CFSTR("CHR");
  v11 = CFSTR("MedsScanning");
  v12 = CFSTR("Universal");
  v1 = (void *)MEMORY[0x1E0C99D20];
  v2 = a1;
  objc_msgSend(v1, "arrayWithObjects:count:", &v6, 7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "containsObject:", v2, v6, v7, v8, v9, v10, v11, v12, v13);

  return v4;
}

const __CFString *HKOntologyShardSchemaTypeForShardIdentifier(void *a1)
{
  id v1;
  const __CFString *v2;
  void *v4;
  void *v5;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("manifest")) & 1) != 0)
  {
    v2 = CFSTR("manifestCSV");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CoreMeds")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("Interactions")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("MedsEducation")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("CHR")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("MedsDemoData")) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CFSTR("Universal")) & 1) != 0)
  {
    v2 = CFSTR("MercuryZipTSV");
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MedsScanning")) & 1) != 0)
  {
    v2 = CFSTR("MedsScanningResourcesZip");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKOntologyShardSchemaType  _Nonnull HKOntologyShardSchemaTypeForShardIdentifier(HKOntologyShardIdentifier  _Nonnull __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("HKOntologyShardRegistryEntry.m"), 802, CFSTR("Unreachable code has been executed"));

    v2 = &stru_1E37FD4C0;
  }

  return v2;
}

uint64_t HKCurrentSchemaVersionForShardIdentifier(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  HKOntologyShardSchemaTypeForShardIdentifier(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("manifestCSV")) & 1) != 0)
  {
    v3 = 1;
  }
  else if (objc_msgSend(v2, "isEqualToString:", CFSTR("MercuryZipTSV")))
  {
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("MedsEducation")))
      v3 = 3;
    else
      v3 = 2;
  }
  else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("MedsScanningResourcesZip")) & 1) != 0)
  {
    v3 = 2;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger HKCurrentSchemaVersionForShardIdentifier(HKOntologyShardIdentifier  _Nonnull __strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("HKOntologyShardRegistryEntry.m"), 819, CFSTR("Unreachable code has been executed"));

    v3 = -1;
  }

  return v3;
}

__CFString *HKDefaultOntologyServerBaseURL()
{
  void *v0;
  __CFString *v1;
  __CFString *v2;

  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "isAppleInternalInstall"))
    v1 = CFSTR("https://ontology-carry.health.apple.com");
  else
    v1 = CFSTR("https://ontology.health.apple.com");
  v2 = v1;

  return v2;
}

id HKFeatureAvailabilityHealthDataRequirementStoreClientInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C9848);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  HKAllFeatureAvailabilityRequirementTypes();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setByAddingObjectsFromArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_client_featureAvailabilityRequirement_didUpdateSatisfaction_, 0, 0);
  return v0;
}

id HKFeatureAvailabilityHealthDataRequirementStoreServerInterface()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F0A8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  HKAllFeatureAvailabilityRequirementTypes();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setByAddingObjectsFromArray:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_remote_getEvaluationOfRequirements_completion_, 0, 0);
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  HKAllFeatureAvailabilityRequirementTypes();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setByAddingObjectsFromArray:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_remote_getEvaluationOfRequirements_completion_, 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_remote_startObservingChangesInRequirements_completion_, 0, 0);

  return v0;
}

void OUTLINED_FUNCTION_0_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_19A1D1DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void *HKStateOfMindAllActiveLabels()
{
  return &unk_1E389DC90;
}

BOOL HKStateOfMindLabelIsKnown(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x26;
}

void *HKStateOfMindAllActiveDomains()
{
  return &unk_1E389DCA8;
}

BOOL HKStateOfMindDomainIsKnown(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x12;
}

BOOL HKStateOfMindAssociationIsKnown(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x12;
}

void *HKStateOfMindValenceClassificationForValence(double a1)
{
  void *v2;
  void *v3;
  double (**v4)(void *, uint64_t);
  _QWORD aBlock[5];

  +[HKStateOfMind validateValence:](HKStateOfMind, "validateValence:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    return 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __HKStateOfMindValenceClassificationForValence_block_invoke;
  aBlock[3] = &__block_descriptor_40_e8_d16__0q8l;
  aBlock[4] = 0x3FD2492492492492;
  v4 = (double (**)(void *, uint64_t))_Block_copy(aBlock);
  if (v4[2](v4, 1) <= a1)
  {
    if (v4[2](v4, 2) <= a1)
    {
      if (v4[2](v4, 3) <= a1)
      {
        if (v4[2](v4, 4) >= a1)
        {
          v3 = &unk_1E3894798;
        }
        else if (v4[2](v4, 5) >= a1)
        {
          v3 = &unk_1E38947B0;
        }
        else if (v4[2](v4, 6) >= a1)
        {
          v3 = &unk_1E38947C8;
        }
        else
        {
          v3 = &unk_1E38947E0;
        }
      }
      else
      {
        v3 = &unk_1E3894780;
      }
    }
    else
    {
      v3 = &unk_1E3894768;
    }
  }
  else
  {
    v3 = &unk_1E3894750;
  }

  return v3;
}

void *HKStateOfMindLabelOptionsForValence(double a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  HKStateOfMindValenceClassificationForValence(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "integerValue");
    if ((unint64_t)(v3 - 4) > 3)
      v4 = &unk_1E389DCC0;
    else
      v4 = (void *)qword_1E37EF160[v3 - 4];
  }
  else
  {
    v4 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v4;
}

void *HKStateOfMindDomainsInCategory(uint64_t a1)
{
  void *v1;

  v1 = &unk_1E389DD08;
  if (a1 == 1)
    v1 = &unk_1E389DD20;
  if (a1 == 2)
    return &unk_1E389DD38;
  else
    return v1;
}

void *HKStateOfMindAllDomainCategories()
{
  return &unk_1E389DD50;
}

const __CFString *NSStringFromHKStateOfMindReflectiveInterval(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("<unknown>");
  if (a1 == 2)
    v1 = CFSTR("daily");
  if (a1 == 1)
    return CFSTR("momentary");
  else
    return v1;
}

const __CFString *NSStringFromHKStateOfMindLabel(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x25)
    return CFSTR("<unknown>");
  else
    return off_1E37EF180[a1 - 1];
}

const __CFString *NSStringFromHKStateOfMindDomain(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x11)
    return CFSTR("<unknown>");
  else
    return off_1E37EF2B0[a1 - 1];
}

void *HKStateOfMindReflectiveIntervalFromNSString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("momentary")) & 1) != 0)
  {
    v2 = &unk_1E3894750;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("daily")))
  {
    v2 = &unk_1E3894768;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void *HKStateOfMindLabelFromNSString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("amazed")) & 1) != 0)
  {
    v2 = &unk_1E3894750;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("amused")) & 1) != 0)
  {
    v2 = &unk_1E3894768;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("angry")) & 1) != 0)
  {
    v2 = &unk_1E3894780;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("anxious")) & 1) != 0)
  {
    v2 = &unk_1E3894798;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ashamed")) & 1) != 0)
  {
    v2 = &unk_1E38947B0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("brave")) & 1) != 0)
  {
    v2 = &unk_1E38947C8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("calm")) & 1) != 0)
  {
    v2 = &unk_1E38947E0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("content")) & 1) != 0)
  {
    v2 = &unk_1E38947F8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disappointed")) & 1) != 0)
  {
    v2 = &unk_1E3894810;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("discouraged")) & 1) != 0)
  {
    v2 = &unk_1E3894828;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disgusted")) & 1) != 0)
  {
    v2 = &unk_1E3894840;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("embarrassed")) & 1) != 0)
  {
    v2 = &unk_1E3894858;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("excited")) & 1) != 0)
  {
    v2 = &unk_1E3894870;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("frustrated")) & 1) != 0)
  {
    v2 = &unk_1E3894888;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("grateful")) & 1) != 0)
  {
    v2 = &unk_1E38948A0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("guilty")) & 1) != 0)
  {
    v2 = &unk_1E38948B8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("happy")) & 1) != 0)
  {
    v2 = &unk_1E38948D0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hopeless")) & 1) != 0)
  {
    v2 = &unk_1E38948E8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("irritated")) & 1) != 0)
  {
    v2 = &unk_1E3894900;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("jealous")) & 1) != 0)
  {
    v2 = &unk_1E3894918;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("joyful")) & 1) != 0)
  {
    v2 = &unk_1E3894930;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("lonely")) & 1) != 0)
  {
    v2 = &unk_1E3894948;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("passionate")) & 1) != 0)
  {
    v2 = &unk_1E3894960;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("peaceful")) & 1) != 0)
  {
    v2 = &unk_1E3894978;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("proud")) & 1) != 0)
  {
    v2 = &unk_1E3894990;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("relieved")) & 1) != 0)
  {
    v2 = &unk_1E38949A8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sad")) & 1) != 0)
  {
    v2 = &unk_1E38949C0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scared")) & 1) != 0)
  {
    v2 = &unk_1E38949D8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("stressed")) & 1) != 0)
  {
    v2 = &unk_1E38949F0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("surprised")) & 1) != 0)
  {
    v2 = &unk_1E3894A08;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("worried")) & 1) != 0)
  {
    v2 = &unk_1E3894A20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("annoyed")) & 1) != 0)
  {
    v2 = &unk_1E3894A38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("confident")) & 1) != 0)
  {
    v2 = &unk_1E3894A50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("drained")) & 1) != 0)
  {
    v2 = &unk_1E3894A68;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hopeful")) & 1) != 0)
  {
    v2 = &unk_1E3894A80;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("indifferent")) & 1) != 0)
  {
    v2 = &unk_1E3894A98;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("overwhelmed")) & 1) != 0)
  {
    v2 = &unk_1E3894AB0;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("satisfied")))
  {
    v2 = &unk_1E3894AC8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void *HKStateOfMindDomainFromNSString(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("community")) & 1) != 0)
  {
    v2 = &unk_1E3894750;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("current_events")) & 1) != 0)
  {
    v2 = &unk_1E3894768;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("dating")) & 1) != 0)
  {
    v2 = &unk_1E3894780;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("education")) & 1) != 0)
  {
    v2 = &unk_1E3894798;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("family")) & 1) != 0)
  {
    v2 = &unk_1E38947B0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fitness")) & 1) != 0)
  {
    v2 = &unk_1E38947C8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("friends")) & 1) != 0)
  {
    v2 = &unk_1E38947E0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("health")) & 1) != 0)
  {
    v2 = &unk_1E38947F8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hobbies")) & 1) != 0)
  {
    v2 = &unk_1E3894810;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("identity")) & 1) != 0)
  {
    v2 = &unk_1E3894828;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("money")) & 1) != 0)
  {
    v2 = &unk_1E3894840;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("partner")) & 1) != 0)
  {
    v2 = &unk_1E3894858;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("self_care")) & 1) != 0)
  {
    v2 = &unk_1E3894870;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("spirituality")) & 1) != 0)
  {
    v2 = &unk_1E3894888;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("tasks")) & 1) != 0)
  {
    v2 = &unk_1E38948A0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("travel")) & 1) != 0)
  {
    v2 = &unk_1E38948B8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("work")) & 1) != 0)
  {
    v2 = &unk_1E38948D0;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("weather")))
  {
    v2 = &unk_1E38948E8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_19A1D5A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void sub_19A1D64A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HKPrettyPrintedFeatureOnboardingRecord(void *a1)
{
  id v1;
  void *v2;
  HKTableFormatter *v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  HKTableFormatter *v19;
  uint64_t v20;
  void *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  HKTableFormatter *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  __CFString *v49;
  void *v50;
  void *v51;
  HKTableFormatter *v52;
  id v53;
  id obj;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[2];
  _BYTE v68[128];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  _BYTE v73[128];
  _QWORD v74[2];
  _QWORD v75[4];

  v75[2] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = -[HKTableFormatter initWithColumnTitles:]([HKTableFormatter alloc], "initWithColumnTitles:", 0);
  v4 = objc_msgSend(v1, "onboardingState");
  v5 = CFSTR("YES");
  if (v4 == 1)
    v5 = CFSTR("NO");
  v75[0] = CFSTR("Onboarding record present:");
  v75[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKTableFormatter appendRow:](v3, "appendRow:", v6);

  if (v4 == 1)
  {
    -[HKTableFormatter formattedTable](v3, "formattedTable");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v7);
  }
  else
  {
    objc_msgSend(v1, "allOnboardedCountryCodesRegardlessOfSupportedState");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "allObjects");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "sortedArrayUsingSelector:", sel_compare_);
    v9 = objc_claimAutoreleasedReturnValue();

    v50 = (void *)v9;
    objc_msgSend(MEMORY[0x1E0CB3738], "localizedStringByJoiningStrings:", v9);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (!-[__CFString length](v10, "length"))
    {

      v10 = CFSTR("<none>");
    }
    v74[0] = CFSTR("Onboarded countries:");
    v74[1] = v10;
    v49 = v10;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v74, 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HKTableFormatter appendRow:](v3, "appendRow:", v11);

    v52 = v3;
    -[HKTableFormatter formattedTable](v3, "formattedTable");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendString:", v12);

    objc_msgSend(v2, "appendString:", CFSTR("\n"));
    v53 = v1;
    objc_msgSend(v1, "allOnboardingCompletionsRegardlessOfSupportedState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (id)objc_msgSend(v13, "count");
    v58 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v58, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss Z"));
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    obj = v13;
    v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
    if (v14)
    {
      v15 = v14;
      v55 = *(_QWORD *)v64;
      v16 = 1;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v64 != v55)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
          objc_msgSend(v2, "appendFormat:", CFSTR("======== Onboarding Completion (%ld/%ld) ========\n"), v16 + i, v56);
          v19 = -[HKTableFormatter initWithColumnTitles:]([HKTableFormatter alloc], "initWithColumnTitles:", 0);
          v72[0] = CFSTR("Country code:");
          objc_msgSend(v18, "countryCode");
          v20 = objc_claimAutoreleasedReturnValue();
          v21 = (void *)v20;
          v22 = CFSTR("<none>");
          if (v20)
            v22 = (const __CFString *)v20;
          v72[1] = v22;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v72, 2);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          -[HKTableFormatter appendRow:](v19, "appendRow:", v23);

          v71[0] = CFSTR("Version:");
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v18, "version"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v71[1] = v24;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v71, 2);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          -[HKTableFormatter appendHeterogenousRow:](v19, "appendHeterogenousRow:", v25);

          v70[0] = CFSTR("Date onboarding completed:");
          objc_msgSend(v18, "completionDate");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v58, "stringFromDate:", v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v70[1] = v27;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v70, 2);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          -[HKTableFormatter appendRow:](v19, "appendRow:", v28);

          v69[0] = CFSTR("Country code provenance:");
          NSStringFromHKOnboardingCompletionCountryCodeProvenance(objc_msgSend(v18, "countryCodeProvenance"));
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          v69[1] = v29;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 2);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          -[HKTableFormatter appendRow:](v19, "appendRow:", v30);

          -[HKTableFormatter formattedTable](v19, "formattedTable");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "appendString:", v31);

          objc_msgSend(v2, "appendString:", CFSTR("\n"));
        }
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v63, v73, 16);
        v16 += i;
      }
      while (v15);
    }

    objc_msgSend(v2, "appendString:", CFSTR("======== Settings ========\n"));
    objc_msgSend(v1, "featureSettings");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = v32;
    if (v32
      && (objc_msgSend(v32, "keyValueStorage"),
          v34 = (void *)objc_claimAutoreleasedReturnValue(),
          v35 = objc_msgSend(v34, "count"),
          v34,
          v35))
    {
      v36 = -[HKTableFormatter initWithColumnTitles:]([HKTableFormatter alloc], "initWithColumnTitles:", 0);
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      objc_msgSend(v33, "keyValueStorage");
      v57 = (id)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v60;
        do
        {
          for (j = 0; j != v38; ++j)
          {
            if (*(_QWORD *)v60 != v39)
              objc_enumerationMutation(v57);
            v41 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * j);
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@:"), v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v67[0] = v42;
            objc_msgSend(v33, "keyValueStorage");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "objectForKeyedSubscript:", v41);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            v67[1] = v44;
            objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v67, 2);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            -[HKTableFormatter appendHeterogenousRow:](v36, "appendHeterogenousRow:", v45);

          }
          v38 = objc_msgSend(v57, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
        }
        while (v38);
      }

      -[HKTableFormatter formattedTable](v36, "formattedTable");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "appendString:", v46);

      v1 = v53;
    }
    else
    {
      objc_msgSend(v2, "appendString:", CFSTR("<none>\n"));
    }
    v3 = v52;

    v7 = v51;
  }

  v47 = (void *)objc_msgSend(v2, "copy");
  return v47;
}

uint64_t HKAuthorizationStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F108);
}

id HKAuthorizationStoreReadServerInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v24;
  void *v25;
  void *v26;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F168);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, v3, v4, objc_opt_class(), 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v26, sel_remote_fetchAuthorizationRecordsForSourceBundleIdentifier_completion_, 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v26, sel_remote_fetchAuthorizationRecordsForType_completion_, 0, 1);
  v5 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchSourcesRequestingAuthorizationForTypes_completion_, 0, 0);
  v6 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchSourcesRequestingAuthorizationForTypes_completion_, 0, 1);
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  objc_msgSend(v7, "setWithObjects:", v8, v9, objc_opt_class(), 0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v25, sel_remote_fetchAuthorizationStatusesForDocumentType_sourceBundleIdentifier_completion_, 0, 1);
  v10 = (void *)MEMORY[0x1E0C99E60];
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  objc_msgSend(v10, "setWithObjects:", v11, v12, objc_opt_class(), 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_remote_fetchAuthorizationStatusesForSampleUUID_completion_, 0, 1);
  v24 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  v16 = objc_opt_class();
  v17 = objc_opt_class();
  v18 = objc_opt_class();
  v19 = objc_opt_class();
  v20 = objc_opt_class();
  v21 = objc_opt_class();
  objc_msgSend(v24, "setWithObjects:", v14, v15, v16, v17, v18, v19, v20, v21, objc_opt_class(), 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v22, sel_remote_fetchAuthorizationContextForPromptSession_completion_, 0, 1);

  return v0;
}

id HKAuthorizationStoreWriteServerInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F1C8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, v3, v4, objc_opt_class(), 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_remote_setAuthorizationStatuses_authorizationModes_forBundleIdentifier_options_completion_, 0, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_remote_setAuthorizationStatuses_authorizationModes_forBundleIdentifier_options_completion_, 1, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_remote_setRequestedAuthorizationForBundleIdentifier_shareTypes_readTypes_completion_, 1, 0);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v5, sel_remote_setRequestedAuthorizationForBundleIdentifier_shareTypes_readTypes_completion_, 2, 0);
  v6 = (void *)MEMORY[0x1E0C99E60];
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  objc_msgSend(v6, "setWithObjects:", v7, v8, objc_opt_class(), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_remote_setObjectAuthorizationStatuses_objectType_bundleIdentifier_sessionIdentifier_completion_, 0, 0);

  return v0;
}

id HKAuthorizationStoreResetServerInterface()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F228);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_resetAuthorizationStatusesForObjects_completion_, 0, 0);
  return v0;
}

void sub_19A1D986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DA5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _HKPredicateMatchingPredicates(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    v6 = (void *)MEMORY[0x1E0CB3528];
    v11[0] = v3;
    v11[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "andPredicateWithSubpredicates:", v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (v3)
      v9 = v3;
    else
      v9 = v4;
    v8 = v9;
  }

  return v8;
}

id _HKDateIntervalCreate(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (v9)
  {
    objc_msgSend(v7, "laterDate:", v9);
    v11 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "laterDate:", v9);
    v12 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v12;
    v7 = (id)v11;
  }
  if (v10)
  {
    objc_msgSend(v7, "earlierDate:", v10);
    v13 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "earlierDate:", v10);
    v14 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v14;
    v7 = (id)v13;
  }
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3588]), "initWithStartDate:endDate:", v7, v8);

  return v15;
}

void sub_19A1DDB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DE5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void sub_19A1DE964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A1DEE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19A1DF814(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRDevicePropertySystemBuildVersion()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRDevicePropertySystemBuildVersionSymbolLoc_ptr_0;
  v6 = getNRDevicePropertySystemBuildVersionSymbolLoc_ptr_0;
  if (!getNRDevicePropertySystemBuildVersionSymbolLoc_ptr_0)
  {
    v1 = (void *)NanoRegistryLibrary_2();
    v0 = (id *)dlsym(v1, "NRDevicePropertySystemBuildVersion");
    v4[3] = (uint64_t)v0;
    getNRDevicePropertySystemBuildVersionSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRDevicePropertySystemBuildVersion_cold_1();
  return *v0;
}

void sub_19A1DFBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1DFFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1E00C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A1E022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke_2(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_2();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_2();
  getNRPairedDeviceRegistryClass_softClass_2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t NanoRegistryLibrary_2()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_3)
  {
    v2 = xmmword_1E37F00F0;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_3 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_3)
    NanoRegistryLibrary_cold_1_2(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_3;
}

void sub_19A1E05C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

uint64_t HKHealthRecordsAccountInfoStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F468);
}

uint64_t HKHealthRecordsAccountInfoStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F4C8);
}

void sub_19A1E416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void sub_19A1E43CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL HKIndexableObjectCheckCardinalityForIndexRestore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Failed to restore %lu elements to key path '%@' which only has %lu underlying codeable objects"), a1, a3, a2);
  return a1 == a2;
}

void sub_19A1E52D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *NSStringFromHKElectrocardiogramSessionEndReason(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("Unknown");
  else
    return off_1E37F0360[a1];
}

uint64_t HKEntitlementStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3D79E0);
}

uint64_t HKEntitlementStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F588);
}

uint64_t HKCodableQuantitySeriesDatumReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_DWORD *)(a1 + 24) = v24;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 28) |= 2u;
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v28 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          *(_BYTE *)(a1 + 28) |= 1u;
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v28 = 8;
        }
        *(_QWORD *)(a1 + v28) = v21;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id SetNoDataErrorIfNeeded(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v10;
  void *v11;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
    goto LABEL_2;
  if (v6)
  {
    if (a3)
      *a3 = objc_retainAutorelease(v6);
    else
      _HKLogDroppedError(v6);
LABEL_2:
    v8 = v5;
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "hk_error:format:", 11, CFSTR("Nil value returned; not an error!"));
  v10 = (id)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
  {
    if (a3)
      *a3 = objc_retainAutorelease(v10);
    else
      _HKLogDroppedError(v10);
  }

LABEL_3:
  return v5;
}

void sub_19A1E7740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A1E7A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

__CFString *_HKStringForFitnessMachineConnectionState(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E37F04E0[a1];
}

__CFString *_HKStringForFitnessMachineState(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E37F0518[a1];
}

void sub_19A1E816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A1E88D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t HKTypeIsEnabled(uint64_t a1)
{
  char v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1 - 28;
  if ((unint64_t)(a1 - 284) <= 0x1E)
  {
    if (((1 << v1) & 0x19) != 0)
    {
      +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "features");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "chamomile");
      goto LABEL_12;
    }
    if (((1 << v1) & 0x60000000) != 0)
    {
      +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "features");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "seahorse");
      goto LABEL_12;
    }
    if (a1 == 305)
    {
      +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "features");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "harmonia");
      goto LABEL_12;
    }
  }
  if ((unint64_t)(a1 - 275) >= 2)
  {
    if (a1 != 257)
      return 1;
    +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "features");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "vrx");
  }
  else
  {
    +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "features");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "nebula");
  }
LABEL_12:
  v5 = v4;

  return v5;
}

BOOL HKDataTypeRequiresAuthorization(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) != 80;
}

BOOL HKDataTypeRequiresPerObjectAuthorization(uint64_t a1)
{
  return a1 == 107 || a1 == 257;
}

BOOL HKDataTypeAllowsPerObjectAuthorizationAPI(uint64_t a1)
{
  return a1 == 257;
}

BOOL HKPromptForLegacyPerObjectAuthorizationDuringQueries(uint64_t a1)
{
  return a1 == 107;
}

uint64_t HKAllowShareAuthorizationForTypeWithEntitlements(uint64_t a1, void *a2)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 11:
    case 59:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 75:
    case 76:
    case 77:
    case 80:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 88:
    case 93:
    case 94:
    case 98:
    case 100:
    case 103:
    case 104:
    case 105:
    case 106:
    case 108:
    case 109:
    case 112:
    case 115:
    case 116:
    case 117:
    case 120:
    case 121:
    case 122:
    case 123:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 184:
    case 185:
    case 186:
    case 190:
    case 194:
    case 197:
    case 198:
    case 199:
    case 208:
    case 211:
    case 215:
    case 216:
    case 217:
    case 218:
    case 227:
    case 228:
    case 236:
    case 238:
    case 239:
    case 247:
    case 248:
    case 249:
    case 250:
    case 252:
    case 253:
    case 256:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 267:
    case 268:
    case 271:
    case 273:
    case 275:
    case 276:
    case 289:
    case 290:
    case 291:
    case 299:
    case 300:
    case 305:
      return result;
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 60:
    case 61:
    case 62:
    case 63:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 83:
    case 87:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 99:
    case 101:
    case 102:
    case 107:
    case 110:
    case 111:
    case 113:
    case 114:
    case 118:
    case 119:
    case 124:
    case 125:
    case 138:
    case 139:
    case 145:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 182:
    case 183:
    case 187:
    case 188:
    case 189:
    case 191:
    case 192:
    case 193:
    case 195:
    case 196:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 209:
    case 210:
    case 212:
    case 213:
    case 214:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 237:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 251:
    case 254:
    case 255:
    case 257:
    case 258:
    case 259:
    case 260:
    case 266:
    case 269:
    case 270:
    case 272:
    case 274:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 301:
    case 302:
    case 303:
    case 304:
      goto LABEL_4;
    case 13:
      result = objc_msgSend(a2, "hasEntitlement:", CFSTR("com.apple.developer.healthkit.nikefuel-source"));
      break;
    default:
      if (a1 != 6)
LABEL_4:
        result = 1;
      break;
  }
  return result;
}

uint64_t HKAllowReadAuthorizationForTypeWithEntitlements(unint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = a2;
  v4 = v3;
  v5 = 0;
  switch(a1)
  {
    case 0x43uLL:
    case 0x44uLL:
    case 0x45uLL:
    case 0x4AuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x5DuLL:
    case 0x5EuLL:
    case 0x62uLL:
    case 0x68uLL:
    case 0x69uLL:
    case 0x6AuLL:
    case 0x6CuLL:
    case 0x6DuLL:
    case 0x70uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7EuLL:
    case 0x7FuLL:
    case 0x80uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x83uLL:
    case 0x84uLL:
    case 0x85uLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
    case 0x8DuLL:
    case 0x8EuLL:
    case 0x8FuLL:
    case 0x92uLL:
    case 0x94uLL:
    case 0xAEuLL:
    case 0xAFuLL:
    case 0xB0uLL:
    case 0xB4uLL:
    case 0xB5uLL:
    case 0xB8uLL:
    case 0xB9uLL:
    case 0xBEuLL:
    case 0xD0uLL:
    case 0xD7uLL:
    case 0xD8uLL:
    case 0xE3uLL:
    case 0xE4uLL:
    case 0xEEuLL:
    case 0xEFuLL:
      goto LABEL_2;
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4BuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x53uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
    case 0x5CuLL:
    case 0x5FuLL:
    case 0x60uLL:
    case 0x61uLL:
    case 0x63uLL:
    case 0x64uLL:
    case 0x65uLL:
    case 0x66uLL:
    case 0x67uLL:
    case 0x6BuLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x71uLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x77uLL:
    case 0x7CuLL:
    case 0x7DuLL:
    case 0x89uLL:
    case 0x8AuLL:
    case 0x8BuLL:
    case 0x8CuLL:
    case 0x90uLL:
    case 0x91uLL:
    case 0x93uLL:
    case 0x9CuLL:
    case 0x9DuLL:
    case 0x9EuLL:
    case 0x9FuLL:
    case 0xA0uLL:
    case 0xA1uLL:
    case 0xA2uLL:
    case 0xA3uLL:
    case 0xA4uLL:
    case 0xA5uLL:
    case 0xA6uLL:
    case 0xA7uLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xACuLL:
    case 0xADuLL:
    case 0xB1uLL:
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB6uLL:
    case 0xB7uLL:
    case 0xBAuLL:
    case 0xBBuLL:
    case 0xBCuLL:
    case 0xBDuLL:
    case 0xBFuLL:
    case 0xC0uLL:
    case 0xC1uLL:
    case 0xC2uLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0xC7uLL:
    case 0xC8uLL:
    case 0xC9uLL:
    case 0xCAuLL:
    case 0xCBuLL:
    case 0xCCuLL:
    case 0xCDuLL:
    case 0xCEuLL:
    case 0xCFuLL:
    case 0xD1uLL:
    case 0xD2uLL:
    case 0xD3uLL:
    case 0xD4uLL:
    case 0xD5uLL:
    case 0xD6uLL:
    case 0xDBuLL:
    case 0xDCuLL:
    case 0xDDuLL:
    case 0xDEuLL:
    case 0xDFuLL:
    case 0xE0uLL:
    case 0xE1uLL:
    case 0xE2uLL:
    case 0xE5uLL:
    case 0xE6uLL:
    case 0xE7uLL:
    case 0xE8uLL:
    case 0xE9uLL:
    case 0xEAuLL:
    case 0xEBuLL:
    case 0xECuLL:
    case 0xEDuLL:
      goto LABEL_7;
    case 0x95uLL:
    case 0x96uLL:
    case 0x97uLL:
    case 0x98uLL:
    case 0x99uLL:
    case 0x9AuLL:
    case 0x9BuLL:
    case 0xD9uLL:
      goto LABEL_6;
    case 0xC5uLL:
    case 0xC6uLL:
      v7 = &HKPrivateHealthKitAccessIdentifierSleep;
      goto LABEL_14;
    case 0xDAuLL:
      v7 = &HKPrivateHealthKitAccessIdentifierCardioFitnessMedicationUse;
      goto LABEL_14;
    default:
      if (a1 - 247 > 0x3A)
        goto LABEL_9;
      if (((1 << (a1 + 9)) & 0x4300C0001104461) != 0)
        goto LABEL_2;
      if (a1 == 268)
      {
LABEL_6:
        if ((objc_msgSend(v3, "hasAccessEntitlementWithIdentifier:", CFSTR("health-records")) & 1) != 0)
        {
LABEL_7:
          v5 = 1;
          goto LABEL_2;
        }
        v7 = &HKPrivateHealthKitAccessIdentifierHealthRecordsPrivate;
LABEL_14:
        v5 = objc_msgSend(v4, "hasPrivateAccessEntitlementWithIdentifier:", *v7);
      }
      else
      {
LABEL_9:
        if (a1 > 0x3B || ((1 << a1) & 0x800000000000840) == 0)
          goto LABEL_7;
      }
LABEL_2:

      return v5;
  }
}

const __CFString *HKAuthorizationSchemaProviderForType(void *a1)
{
  if (objc_msgSend(a1, "code") == 257)
    return CFSTR("HDVisionPrescriptionAuthorizationSchemaProvider");
  else
    return CFSTR("HDDefaultAuthorizationSchemaProvider");
}

double HKMinimumSampleDurationForType(uint64_t a1)
{
  double result;

  result = 0.001;
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) != 0xAC)
    return 0.0;
  return result;
}

double HKMaximumSampleDurationForType(uint64_t a1)
{
  double result;
  char v2;

  result = 1209600.0;
  if (a1 <= 145)
  {
    if (a1 > 134)
    {
      if ((unint64_t)(a1 - 135) < 2)
        return -1.0;
      else
        return 345600.0;
    }
    else
    {
      switch(a1)
      {
        case ';':
        case '@':
        case 'A':
        case 'B':
        case 'E':
        case 'J':
        case 'R':
        case 'T':
        case 'U':
        case 'V':
        case 'X':
        case ']':
        case '^':
        case '_':
        case 'g':
        case 'j':
        case 'm':
        case 's':
        case 'u':
        case 'x':
        case 'y':
        case 'z':
        case '{':
          return -1.0;
        case '<':
        case '=':
        case '>':
        case '?':
        case 'C':
        case 'D':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'S':
        case 'W':
        case 'Y':
        case 'Z':
        case 'b':
        case 'd':
        case 'e':
        case 'f':
        case 'h':
        case 'i':
        case 'k':
        case 'l':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'r':
        case 't':
        case 'v':
        case 'w':
          return 345600.0;
        case '[':
        case '\\':
        case 'a':
          return result;
        case 'c':
          result = 2419200.0;
          break;
        default:
          if (a1 == 6 || a1 == 11)
            return -1.0;
          return 345600.0;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 146:
      case 148:
      case 174:
      case 175:
      case 176:
      case 177:
      case 181:
      case 184:
      case 185:
      case 191:
      case 192:
      case 193:
      case 208:
      case 215:
      case 218:
      case 227:
      case 228:
      case 238:
      case 239:
      case 247:
        return -1.0;
      case 147:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 172:
      case 173:
      case 178:
      case 179:
      case 180:
      case 182:
      case 183:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 216:
      case 217:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 237:
      case 240:
      case 241:
      case 242:
      case 245:
      case 246:
        return 345600.0;
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 243:
      case 244:
        return result;
      case 199:
      case 248:
        return 691200.0;
      case 236:
        return 7344000.0;
      case 249:
      case 250:
        return 864000.0;
      default:
        v2 = a1 - 1;
        if ((unint64_t)(a1 - 257) > 0x39)
          return 345600.0;
        if (((1 << v2) & 0x300000400004011) != 0)
          return -1.0;
        if (((1 << v2) & 0x1E0) != 0)
          return 31536000.0;
        if (a1 != 276)
          return 345600.0;
        result = 2678400.0;
        break;
    }
  }
  return result;
}

BOOL HKComparisonResultMatchesPredicateOperator(unint64_t a1, uint64_t a2)
{
  BOOL v2;
  _BOOL8 result;
  BOOL v4;

  switch(a2)
  {
    case 0:
      v2 = a1 == -1;
      goto LABEL_11;
    case 1:
      v4 = a1 + 1 >= 2;
      goto LABEL_7;
    case 2:
      v2 = a1 == 1;
      goto LABEL_11;
    case 3:
      v4 = a1 >= 2;
LABEL_7:
      result = !v4;
      break;
    case 4:
      v2 = a1 == 0;
LABEL_11:
      result = v2;
      break;
    case 5:
      result = a1 != 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

__CFString *HKStringFromPredicateOperatorType(uint64_t a1)
{
  __CFString *v3;

  v3 = CFSTR("Less Than");
  switch(a1)
  {
    case 0:
      return v3;
    case 1:
      v3 = CFSTR("Less Than Or Equal To");
      return v3;
    case 2:
      return CFSTR("Greater Than");
    case 3:
      return CFSTR("Greater Than or Equal To");
    case 4:
      return CFSTR("Equal To");
    case 5:
      return CFSTR("Not Equal To");
    case 6:
      return CFSTR("Matches");
    case 7:
      return CFSTR("Like");
    case 8:
      return CFSTR("Begins With");
    case 9:
      return CFSTR("Ends With");
    case 10:
      return CFSTR("In");
    case 11:
      return CFSTR("Custom Selector");
    default:
      if (a1 == 99)
        return CFSTR("Contains");
      if (a1 == 100)
        return CFSTR("Between");
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown predicate operator type (%ld)"), a1);
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      return v3;
  }
}

__CFString *HKStringFromCompoundOperatorType(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37F0648[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown compound operator type (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id HKAllPredicateOperatorTypes()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", &unk_1E3894B28, &unk_1E3894B40, &unk_1E3894B58, &unk_1E3894B70, &unk_1E3894B88, &unk_1E3894BA0, &unk_1E3894BB8, &unk_1E3894BD0, &unk_1E3894BE8, &unk_1E3894C00, &unk_1E3894C18, &unk_1E3894C30, &unk_1E3894C48, &unk_1E3894C60, 0);
}

uint64_t HKImproveHealthAndActivityAnalyticsAllowed()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isHealthDataSubmissionAllowed");

  return v1;
}

uint64_t HKCurrentOptInVersionOnDiskForOnBoardingBundle(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v3 = a1;
  v4 = a2;
  if (!objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger HKCurrentOptInVersionOnDiskForOnBoardingBundle(NSString * _Nonnull __strong, NSString * _Nonnull __strong)");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, CFSTR("HKAnalytics.m"), 34, CFSTR("bundleName cannot be empty"));

  }
  if (!objc_msgSend(v4, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger HKCurrentOptInVersionOnDiskForOnBoardingBundle(NSString * _Nonnull __strong, NSString * _Nonnull __strong)");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("HKAnalytics.m"), 35, CFSTR("plistName cannot be empty"));

  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/System/Library/OnBoardingBundles/%@.bundle/%@.plist"), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)GSSystemRootDirectory(), "stringByAppendingPathComponent:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:error:", v7, &v18);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v18;
  if (v8)
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("ContentVersion"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "integerValue");

  }
  else
  {
    _HKInitializeLogging();
    v12 = HKLogDataCollection;
    if (os_log_type_enabled((os_log_t)HKLogDataCollection, OS_LOG_TYPE_FAULT))
      HKCurrentOptInVersionOnDiskForOnBoardingBundle_cold_1((uint64_t)v3, (uint64_t)v9, v12);
    v11 = 0;
  }

  return v11;
}

id HKQuantityRangeInclusive(void *a1, double a2, double a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = a1;
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  +[HKQuantityRange inclusiveRangeWithMinimum:maximum:](HKQuantityRange, "inclusiveRangeWithMinimum:maximum:", v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19A1ED754(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_19A1EDA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringForHealthRecordsAccountInfoStatus(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37F0958[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown status %zd"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A1EF694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a32);
  _Unwind_Resume(a1);
}

uint64_t HKFeatureAvailabilityStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3DA098);
}

uint64_t HKFeatureAvailabilityStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F5E8);
}

void *HKAllRegisteredLoggingUnitStrings()
{
  return &unk_1E389DD98;
}

void sub_19A1F1330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_19A1F5838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void sub_19A1F5A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

BOOL HKWorkoutEventValidateAlpineSlopeGradeMetadata(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;

  v5 = a2;
  if (HKValidateWorkoutEventTypeSegment(a1, CFSTR("HKAlpineSlopeGrade"), a3))
  {
    +[HKUnit percentUnit](HKUnit, "percentUnit");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = +[HKMetadataValidationUtilities hk_validateQuantityMetadataValue:value:compatibleUnit:error:](HKMetadataValidationUtilities, "hk_validateQuantityMetadataValue:value:compatibleUnit:error:", CFSTR("HKAlpineSlopeGrade"), v5, v6, a3);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL HKValidateWorkoutEventTypeSegment(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;

  if (a1 != 7)
  {
    v5 = (void *)MEMORY[0x1E0CB35C8];
    v6 = a2;
    _HKWorkoutEventTypeName(a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "hk_assignError:code:format:", a3, 3, CFSTR("Invalid metadata key %@ for %@"), v6, v7);

  }
  return a1 == 7;
}

__CFString *HKSeriesBuilderStateToString(unint64_t a1)
{
  if (a1 < 4)
    return off_1E37F0C60[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A1F6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void sub_19A1F6E98(void *a1, uint64_t a2)
{
  uint64_t v2;

  __26__HKSeriesBuilder_discard__block_invoke_cold_1(a1, a2, v2);
  JUMPOUT(0x19A1F6E88);
}

uint64_t _HKDeepBreathingSessionClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3CD7E0);
}

uint64_t _HKDeepBreathingSessionServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40F648);
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void OUTLINED_FUNCTION_2_7(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t binarysample::Electrocardiogram::Electrocardiogram(uint64_t this)
{
  *(_QWORD *)this = off_1E37F0E58;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void binarysample::Electrocardiogram::~Electrocardiogram(binarysample::Electrocardiogram *this)
{
  void **v2;

  *(_QWORD *)this = off_1E37F0E58;
  v2 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E37F0E58;
  v2 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x19AEC7398]();
}

binarysample::Electrocardiogram *binarysample::Electrocardiogram::Electrocardiogram(binarysample::Electrocardiogram *this, const binarysample::Electrocardiogram *a2)
{
  binarysample::ElectrocardiogramLead ***v4;
  const binarysample::ElectrocardiogramLead **v5;
  const binarysample::ElectrocardiogramLead **v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E37F0E58;
  *((_QWORD *)this + 2) = 0;
  v4 = (binarysample::ElectrocardiogramLead ***)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  v5 = (const binarysample::ElectrocardiogramLead **)*((_QWORD *)a2 + 2);
  v6 = (const binarysample::ElectrocardiogramLead **)*((_QWORD *)a2 + 3);
  while (v5 != v6)
    PB::PtrVector<binarysample::ElectrocardiogramLead>::emplace_back<binarysample::ElectrocardiogramLead const&>(v4, *v5++);
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 40) |= 1u;
    *((_QWORD *)this + 1) = v7;
  }
  return this;
}

uint64_t PB::PtrVector<binarysample::ElectrocardiogramLead>::emplace_back<binarysample::ElectrocardiogramLead const&>(binarysample::ElectrocardiogramLead ***a1, const binarysample::ElectrocardiogramLead *a2)
{
  binarysample::ElectrocardiogramLead *v4;
  uint64_t result;
  unint64_t v6;
  binarysample::ElectrocardiogramLead **v7;
  binarysample::ElectrocardiogramLead **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  binarysample::ElectrocardiogramLead **v14;
  char *v15;
  binarysample::ElectrocardiogramLead **v16;
  binarysample::ElectrocardiogramLead **v17;
  binarysample::ElectrocardiogramLead *v18;
  int64x2_t v19;
  binarysample::ElectrocardiogramLead **v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = (binarysample::ElectrocardiogramLead *)operator new();
  binarysample::ElectrocardiogramLead::ElectrocardiogramLead(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(result, v12);
    else
      v13 = 0;
    v14 = (binarysample::ElectrocardiogramLead **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (binarysample::ElectrocardiogramLead **)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (binarysample::ElectrocardiogramLead **)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<binarysample::ElectrocardiogramLead>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_19A1FBDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t binarysample::Electrocardiogram::operator=(uint64_t a1, const binarysample::Electrocardiogram *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(binarysample::Electrocardiogram *__hidden);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  void **v13;

  if ((const binarysample::Electrocardiogram *)a1 != a2)
  {
    binarysample::Electrocardiogram::Electrocardiogram((binarysample::Electrocardiogram *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v6;
    v8 = off_1E37F0E58;
    v13 = (void **)&v10;
    std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__destroy_vector::operator()[abi:ne180100](&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t binarysample::Electrocardiogram::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  void **v15;

  if (a1 != a2)
  {
    v11[0] = off_1E37F0E58;
    v12 = 0uLL;
    v13 = 0;
    v14 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__vdeallocate(&v12);
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v5;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4;
    v13 = v9;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    v11[1] = v5;
    v11[0] = off_1E37F0E58;
    v15 = (void **)&v12;
    std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__destroy_vector::operator()[abi:ne180100](&v15);
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t binarysample::Electrocardiogram::formatText(binarysample::Electrocardiogram *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 40) & 1) != 0)
    PB::TextFormatter::format(a2, "frequency", *((double *)this + 1));
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "lead");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t binarysample::Electrocardiogram::readFrom(binarysample::Electrocardiogram *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  binarysample::ElectrocardiogramLead ***v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (binarysample::ElectrocardiogramLead ***)((char *)this + 16);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *((_BYTE *)this + 40) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v22);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((v12 >> 3) == 1)
      {
        PB::PtrVector<binarysample::ElectrocardiogramLead>::emplace_back<>(v8);
        v21 = *(_QWORD *)(*((_QWORD *)this + 3) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t PB::PtrVector<binarysample::ElectrocardiogramLead>::emplace_back<>(binarysample::ElectrocardiogramLead ***a1)
{
  binarysample::ElectrocardiogramLead *v2;
  uint64_t result;
  unint64_t v4;
  binarysample::ElectrocardiogramLead **v5;
  binarysample::ElectrocardiogramLead **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  binarysample::ElectrocardiogramLead **v12;
  char *v13;
  binarysample::ElectrocardiogramLead **v14;
  binarysample::ElectrocardiogramLead **v15;
  binarysample::ElectrocardiogramLead *v16;
  int64x2_t v17;
  binarysample::ElectrocardiogramLead **v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = (binarysample::ElectrocardiogramLead *)operator new();
  binarysample::ElectrocardiogramLead::ElectrocardiogramLead(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(result, v10);
    else
      v11 = 0;
    v12 = (binarysample::ElectrocardiogramLead **)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (binarysample::ElectrocardiogramLead **)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (binarysample::ElectrocardiogramLead **)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<binarysample::ElectrocardiogramLead>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_19A1FC310(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t binarysample::Electrocardiogram::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 16);
  v5 = *(const PB::Base ***)(this + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6);
  }
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8));
  return this;
}

void std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<binarysample::ElectrocardiogramLead>>::__vdeallocate(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v1);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *HKMedicalRecordAllSupportedCategoryTypes()
{
  return &unk_1E389DDC8;
}

__CFString *HKStringFromMedicalRecordCategoryType(unint64_t a1)
{
  if (a1 < 0xB)
    return off_1E37F0F38[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown medical record category type (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id _HKCreateObjectPickerPresentationController()
{
  Class v0;
  objc_class *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!NSClassFromString(CFSTR("UIApplication")))
  {
    _HKInitializeLogging();
    v4 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_1(v4);
    return 0;
  }
  v8 = 0;
  if (!HealthUILibraryCore_frameworkLibrary_1)
  {
    v9 = xmmword_1E37F1128;
    v10 = 0;
    HealthUILibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!HealthUILibraryCore_frameworkLibrary_1)
    _HKCreateObjectPickerPresentationController_cold_2(&v8);
  v0 = NSClassFromString(CFSTR("HKObjectPickerPresentationController"));
  if (!v0)
  {
    _HKInitializeLogging();
    v5 = HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateObjectPickerPresentationController_cold_3(v5);
    return 0;
  }
  v1 = v0;
  v2 = &unk_1EE40F7C8;
  if ((-[objc_class conformsToProtocol:](v1, "conformsToProtocol:", v2) & 1) != 0)
  {
    v3 = objc_alloc_init(v1);
  }
  else
  {
    _HKInitializeLogging();
    v7 = (void *)HKLogAuthorization;
    if (os_log_type_enabled((os_log_t)HKLogAuthorization, OS_LOG_TYPE_ERROR))
      _HKCreateRecalibrateEstimatesPresentationController_cold_4((uint64_t)v1, v7, (Protocol *)v2);
    v3 = 0;
  }

  return v3;
}

BOOL _HKDataTypeCodeIsDeprecated(uint64_t a1)
{
  _BOOL8 v1;
  _OWORD v3[3];

  memset(v3, 0, sizeof(v3));
  __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w4((uint64_t)v3, (uint64_t)&HKDataTypeDefinitions[6 * a1]);
  v1 = *(_QWORD *)&v3[0] == 0;
  __destructor_8_s0_s8_s16_s24_s32((id *)v3);
  return v1;
}

void sub_19A1FFF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  __destructor_8_s0_s8_s16_s24_s32(&a9);
  _Unwind_Resume(a1);
}

id __copy_constructor_8_8_s0_s8_s16_s24_s32_t40w4(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(id *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(id *)(a2 + 24);
  result = *(id *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

void __destructor_8_s0_s8_s16_s24_s32(id *a1)
{

}

void sub_19A200594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __destructor_8_s0_s8_s16_s24_s32((id *)va);
  _Unwind_Resume(a1);
}

uint64_t _HKTypeIdentifierToTypeCode(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  +[HKObjectType _typeWithIdentifier:](HKObjectType, "_typeWithIdentifier:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "code");

  return v2;
}

BOOL _HKValidateFileSize(unint64_t a1, _QWORD *a2)
{
  id v4;
  void *v5;

  if (a1 >= 0x1900001)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_error:format:", 3, CFSTR("File size is too large"));
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      if (a2)
        *a2 = objc_retainAutorelease(v4);
      else
        _HKLogDroppedError(v4);
    }

  }
  return a1 < 0x1900001;
}

void sub_19A203800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

__CFString *HKStringFromUserDomainConceptLinkType(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("None");
  if (a1 == 1)
  {
    v1 = CFSTR("Is Associated With");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void *HKWeakConceptLinkTypes()
{
  return &unk_1E389DDE0;
}

void _HKRemoveRunningWorkoutSessionUUID(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    os_unfair_lock_lock((os_unfair_lock_t)&_HKRunningWorkoutSessionLock);
    objc_msgSend((id)_HKRunningWorkoutSessionUUIDs, "removeObject:", v1);

    os_unfair_lock_unlock((os_unfair_lock_t)&_HKRunningWorkoutSessionLock);
  }
}

__CFString *HKWorkoutSessionStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 6)
    return off_1E37F15B0[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKWorkoutSessionTypeToString(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("Primary");
  if (a1 == 1)
  {
    v1 = CFSTR("Mirrored");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown(%ld)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

__CFString *HKWorkoutSessionEventToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 7)
    return off_1E37F15E0[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void sub_19A20BC28(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_19A20BCFC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id _HKPausedIntervalsWithWorkoutEvents(void *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "sortedArrayUsingSelector:", sel_compare_);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v22;
    while (1)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v3);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (objc_msgSend(v9, "type", (_QWORD)v21) == 1)
        {
          objc_msgSend(v9, "dateInterval");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "startDate");
          v11 = objc_claimAutoreleasedReturnValue();
          v12 = v6;
          v6 = v10;
LABEL_13:

          v6 = (void *)v11;
          continue;
        }
        if (objc_msgSend(v9, "type") == 2 && v6 != 0)
        {
          v14 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(v9, "dateInterval");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "startDate");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = (void *)objc_msgSend(v14, "initWithStartDate:endDate:", v6, v15);
          objc_msgSend(v2, "addObject:", v16);

          v11 = 0;
          goto LABEL_13;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      if (!v5)
      {

        if (v6)
        {
          v17 = objc_alloc(MEMORY[0x1E0CB3588]);
          objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = (void *)objc_msgSend(v17, "initWithStartDate:endDate:", v6, v18);
          objc_msgSend(v2, "addObject:", v19);

          goto LABEL_19;
        }
        goto LABEL_20;
      }
    }
  }
  v6 = 0;
  v18 = v3;
LABEL_19:

LABEL_20:
  return v2;
}

unint64_t _HKStatisticsOptionSleepStages()
{
  return 0xFFFFFFFF80000000;
}

uint64_t _HKStatisticOptionsAverageSampleDuration()
{
  return 0x40000000;
}

uint64_t _HKStatisticsOptionPercentile()
{
  return 0x20000000;
}

uint64_t _HKStatisticsOptionPresence()
{
  return 0x10000000;
}

uint64_t _HKStatisticsOptionBaselineRelativeQuantities()
{
  return 0x8000000;
}

uint64_t _HKStatisticsOptionAttenuateSamples()
{
  return 0x4000000;
}

BOOL _AcceptsDataObject(uint64_t a1, void *a2, uint64_t a3, double a4, double a5, double a6)
{
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  _BOOL8 v17;
  void *v18;
  void *v19;

  v11 = a2;
  v12 = v11;
  if (a1 == 2)
  {
    v13 = a5;
  }
  else
  {
    if (a1 == 1)
    {
      if (!objc_msgSend(v11, "isMaximumDurationRestricted"))
      {
        v17 = 1;
        goto LABEL_12;
      }
      objc_msgSend(v12, "maximumAllowedDuration");
      v14 = a6 - v15;
      v13 = a4;
      goto LABEL_9;
    }
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _AcceptsDataObject(_KeyPathEnumValue, NSTimeInterval, NSTimeInterval, NSTimeInterval, HKSampleType * _Nonnull __strong, NSPredicateOperatorType)");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("_HKSampleComparisonFilter.m"), 58, CFSTR("Unreachable code has been executed"));

      v17 = 0;
      goto LABEL_12;
    }
    v13 = a4;
  }
  v14 = a6;
LABEL_9:
  v16 = HKCompareDoubles(v13, v14);
  v17 = HKComparisonResultMatchesPredicateOperator(v16, a3);
LABEL_12:

  return v17;
}

void sub_19A214E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void sub_19A2165F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A218720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void sub_19A218970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_6_0(uint64_t a1, void *a2)
{
  return a2;
}

void sub_19A219D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A219FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void sub_19A21A488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19A21A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19A21AD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_19A21B1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21B8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21BC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21BFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21C370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A21CB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A21CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A21D52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

__CFString *HKSensitiveLogItem(void *a1)
{
  id v1;
  __CFString *v2;
  uint64_t v3;
  void *v4;
  __CFString *v5;

  v1 = a1;
  if (HKSensitiveLogItem_onceToken != -1)
    dispatch_once(&HKSensitiveLogItem_onceToken, &__block_literal_global_85);
  if (HKSensitiveLogItem_showSensitiveLogItems)
  {
    v2 = (__CFString *)v1;
  }
  else
  {
    _HKSensitiveRedactedDescription(v1);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    v5 = CFSTR("<sensitive>");
    if (v3)
      v5 = (__CFString *)v3;
    v2 = v5;

  }
  return v2;
}

id _HKSensitiveRedactedDescription(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (!objc_msgSend(v1, "conformsToProtocol:", &unk_1EE3BCD30))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = &__block_literal_global_15_1;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_11;
      v3 = &__block_literal_global_17_0;
    }
    objc_msgSend(v1, "hk_map:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "count") || !objc_msgSend(v1, "count"))
    {
      objc_msgSend(v4, "description");
      v2 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_12;
    }

LABEL_11:
    v2 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v1, "hk_redactedDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_12:

  return v2;
}

id _HKLoggingActionCompletion(void *a1, void *a2, uint64_t a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  _QWORD v15[4];
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  _HKInitializeLogging();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    v21 = v8;
    v22 = 2082;
    v23 = a3;
    _os_log_impl(&dword_19A0E6000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: %{public}s", buf, 0x16u);
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___HKLoggingActionCompletion_block_invoke;
  v15[3] = &unk_1E37F1CB8;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = a3;
  v10 = v9;
  v11 = v8;
  v12 = v7;
  v13 = _Block_copy(v15);

  return v13;
}

id _HKLoggingObjectCompletion(void *a1, void *a2, uint64_t a3, void *a4)
{
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  _QWORD v15[4];
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  _HKInitializeLogging();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    v21 = v8;
    v22 = 2082;
    v23 = a3;
    _os_log_impl(&dword_19A0E6000, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: %{public}s", buf, 0x16u);
  }
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = ___HKLoggingObjectCompletion_block_invoke;
  v15[3] = &unk_1E37F1CE0;
  v16 = v7;
  v17 = v8;
  v18 = v9;
  v19 = a3;
  v10 = v9;
  v11 = v8;
  v12 = v7;
  v13 = _Block_copy(v15);

  return v13;
}

void HKSetTemporaryDirectorySuffix(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = objc_retainAutorelease(a1);
  objc_msgSend(v1, "UTF8String");
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    _HKInitializeLogging();
    HKLogInfrastructure();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 138412290;
      v5 = v1;
      _os_log_impl(&dword_19A0E6000, v2, OS_LOG_TYPE_DEFAULT, "Failed to set temporary directory suffix \"%@\"", (uint8_t *)&v4, 0xCu);
    }

  }
  v3 = NSTemporaryDirectory();

}

void *HKCalendarDateTransformNone()
{
  return &__block_literal_global_87;
}

void *HKCalendarDateTransformPreceding6PM()
{
  return &__block_literal_global_4;
}

id HKHearingLevelClassificationPureToneAverageFrequencies()
{
  return (id)objc_msgSend(&unk_1E389DDF8, "copy");
}

id _HKAudiogramStandardFrequencies()
{
  return (id)objc_msgSend(&unk_1E389DE10, "copy");
}

id HKSupportedMetricsForMachineType(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  switch(a1)
  {
    case 0:
      _HKInitializeLogging();
      v4 = HKLogServices;
      if (os_log_type_enabled((os_log_t)HKLogServices, OS_LOG_TYPE_ERROR))
        HKSupportedMetricsForMachineType_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
      return v3;
    case 1:
      objc_msgSend(v2, "addObject:", &unk_1E3895350);
      objc_msgSend(v3, "addObject:", &unk_1E3895368);
      objc_msgSend(v3, "addObject:", &unk_1E3895380);
      objc_msgSend(v3, "addObject:", &unk_1E3895398);
      objc_msgSend(v3, "addObject:", &unk_1E38953B0);
      objc_msgSend(v3, "addObject:", &unk_1E38953C8);
      v12 = &unk_1E38953E0;
      goto LABEL_12;
    case 2:
      objc_msgSend(v2, "addObject:", &unk_1E3895350);
      objc_msgSend(v3, "addObject:", &unk_1E3895368);
      objc_msgSend(v3, "addObject:", &unk_1E3895428);
      objc_msgSend(v3, "addObject:", &unk_1E3895440);
      objc_msgSend(v3, "addObject:", &unk_1E38953B0);
      v13 = &unk_1E3895398;
      goto LABEL_11;
    case 3:
      objc_msgSend(v2, "addObject:", &unk_1E38954A0);
      objc_msgSend(v3, "addObject:", &unk_1E38954B8);
      v12 = &unk_1E38953B0;
      goto LABEL_12;
    case 4:
      objc_msgSend(v2, "addObject:", &unk_1E38954A0);
      objc_msgSend(v3, "addObject:", &unk_1E38953B0);
      v12 = &unk_1E38954B8;
      goto LABEL_12;
    case 5:
      _HKInitializeLogging();
      v14 = HKLogServices;
      if (os_log_type_enabled((os_log_t)HKLogServices, OS_LOG_TYPE_ERROR))
        HKSupportedMetricsForMachineType_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
      return v3;
    case 6:
      objc_msgSend(v2, "addObject:", &unk_1E3895350);
      objc_msgSend(v3, "addObject:", &unk_1E3895368);
      objc_msgSend(v3, "addObject:", &unk_1E38954D0);
      objc_msgSend(v3, "addObject:", &unk_1E38954E8);
      v13 = &unk_1E3895500;
LABEL_11:
      objc_msgSend(v3, "addObject:", v13);
      objc_msgSend(v3, "addObject:", &unk_1E3895458);
      objc_msgSend(v3, "addObject:", &unk_1E3895470);
      v12 = &unk_1E3895488;
LABEL_12:
      objc_msgSend(v3, "addObject:", v12);
      objc_msgSend(v3, "addObject:", &unk_1E38953F8);
      objc_msgSend(v3, "addObject:", &unk_1E3895410);
      break;
    default:
      return v3;
  }
  return v3;
}

void OUTLINED_FUNCTION_0_13(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_19A22D320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void sub_19A231274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A231BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A232238(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

__CFString *HKDataCollectionOptionsToString(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    if (a1 == 1)
    {
      v2 = CFSTR("(HKDataCollectionOptionTransient)");
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull HKDataCollectionOptionsToString(HKDataCollectionOptions)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKDataCollector.m"), 1431, CFSTR("Missing case in HKDataCollectionOptionsToString"));

      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(Unknown(%ld))"), a1);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v2 = CFSTR("(HKDataCollectionOptionDefault)");
  }
  return v2;
}

void OUTLINED_FUNCTION_2_8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

id OUTLINED_FUNCTION_4_3(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t HKCodableQuantitySeriesEnumerationResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 88) |= 8u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_69;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_71;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_69:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_71:
          v60 = 32;
          goto LABEL_88;
        case 2u:
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 88) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v15 = v27++ >= 9;
                if (v15)
                {
                  v20 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_75:
          v60 = 16;
          goto LABEL_88;
        case 3u:
          PBReaderReadData();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = 80;
          goto LABEL_67;
        case 4u:
          *(_BYTE *)(a1 + 88) |= 0x80u;
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          v61 = 64;
          goto LABEL_95;
        case 5u:
          v37 = 0;
          v38 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 88) |= 1u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v20 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v15 = v38++ >= 9;
                if (v15)
                {
                  v20 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_79:
          v60 = 8;
          goto LABEL_88;
        case 6u:
          *(_BYTE *)(a1 + 88) |= 0x40u;
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          v61 = 56;
          goto LABEL_95;
        case 7u:
          *(_BYTE *)(a1 + 88) |= 4u;
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v36 = 0;
          }
          v61 = 24;
LABEL_95:
          *(_QWORD *)(a1 + v61) = v36;
          continue;
        case 8u:
          v47 = 0;
          v48 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 88) |= 0x20u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v20 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                v15 = v48++ >= 9;
                if (v15)
                {
                  v20 = 0;
                  goto LABEL_83;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_83:
          v60 = 48;
          goto LABEL_88;
        case 9u:
          v53 = 0;
          v54 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 88) |= 0x10u;
          break;
        case 0xAu:
          PBReaderReadData();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = 72;
LABEL_67:
          v59 = *(void **)(a1 + v33);
          *(_QWORD *)(a1 + v33) = v32;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        v57 = v56 + 1;
        if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
          break;
        v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
        *(_QWORD *)(a2 + v55) = v57;
        v20 |= (unint64_t)(v58 & 0x7F) << v53;
        if ((v58 & 0x80) == 0)
          goto LABEL_85;
        v53 += 7;
        v15 = v54++ >= 9;
        if (v15)
        {
          v20 = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v5))
        v20 = 0;
LABEL_87:
      v60 = 40;
LABEL_88:
      *(_QWORD *)(a1 + v60) = v20;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKNotificationDomainIsDeprecated(unint64_t a1)
{
  return (a1 < 0x11) & (0x14206u >> a1);
}

__CFString *NSStringFromHKNotificationDomain(uint64_t a1)
{
  __CFString *result;

  switch(a1)
  {
    case 1:
      result = CFSTR("Deprecated1");
      break;
    case 2:
      result = CFSTR("Deprecated2");
      break;
    case 3:
      result = CFSTR("Health Records Data");
      break;
    case 4:
      result = CFSTR("Heart Rhythm Phone-Only");
      break;
    case 5:
      result = CFSTR("Menstrual Cycles");
      break;
    case 6:
      result = CFSTR("Sleep");
      break;
    case 7:
      result = CFSTR("Walking Steadiness");
      break;
    case 8:
      result = CFSTR("AFib History");
      break;
    case 9:
      result = CFSTR("Reserved9");
      break;
    case 10:
      result = CFSTR("Summaries Notifications");
      break;
    case 11:
      result = CFSTR("Profile Notifications");
      break;
    case 12:
      result = CFSTR("Medications");
      break;
    case 13:
      result = CFSTR("Mental Health");
      break;
    case 14:
      result = CFSTR("Reserved14");
      break;
    case 15:
      result = CFSTR("Vitals Notifications");
      break;
    case 16:
      result = CFSTR("Reserved16");
      break;
    case 17:
      result = (__CFString *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("Invalid notification domain: %zd"), 17);
      break;
    default:
      result = CFSTR("Emergency SOS");
      break;
  }
  return result;
}

void sub_19A23688C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRPairedDeviceRegistryClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNRPairedDeviceRegistryClass_softClass_3;
  v7 = getNRPairedDeviceRegistryClass_softClass_3;
  if (!getNRPairedDeviceRegistryClass_softClass_3)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNRPairedDeviceRegistryClass_block_invoke_3;
    v3[3] = &unk_1E37E8690;
    v3[4] = &v4;
    __getNRPairedDeviceRegistryClass_block_invoke_3((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19A2369B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A236C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t NanoRegistryLibrary_3()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_4)
  {
    v2 = xmmword_1E37F2208;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_4 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_4)
    NanoRegistryLibrary_cold_1_3(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_4;
}

Class __getNRPairedDeviceRegistryClass_block_invoke_3(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_3();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_3();
  getNRPairedDeviceRegistryClass_softClass_3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

const __CFString *NSStringFromQuantitySeriesSampleEditorState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("Not Started");
  else
    return off_1E37F22D0[a1 - 1];
}

void sub_19A237544(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

const __CFString *HKMedicationDoseEventLogOriginToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("scheduled");
  if (a1 == 1)
    return CFSTR("asNeeded");
  else
    return v1;
}

const __CFString *HKMedicationDoseEventStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E37F2370[a1 - 1];
}

id _HKCachedImmutableGregorianCalendarWithUTCTimeZone()
{
  if (_HKCachedImmutableGregorianCalendarWithUTCTimeZone_onceToken != -1)
    dispatch_once(&_HKCachedImmutableGregorianCalendarWithUTCTimeZone_onceToken, &__block_literal_global_341);
  return (id)_HKCachedImmutableGregorianCalendarWithUTCTimeZone_gregorianCalendarWithUTCTimeZone;
}

uint64_t _HKCacheIndexFromDate(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD v8[5];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___HKCacheIndexFromDate_block_invoke;
  v8[3] = &unk_1E37F2408;
  v8[4] = v4;
  v5 = v3;
  v9 = v5;
  v10 = &v11;
  HKWithAutoreleasePool(0, v8);
  v6 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_19A23ACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

uint64_t _HKFirstDayOfWeekForLocale(void *a1)
{
  id v1;
  void *v2;
  int v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v10;
  double v11;

  v1 = a1;
  v10 = 0;
  v11 = 0.0;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "nextWeekendStartDate:interval:options:afterDate:", &v10, &v11, 0, v2);
  v4 = v10;

  if (v3)
  {
    objc_msgSend(v4, "dateByAddingTimeInterval:", v11 + -1.0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dateByAddingUnit:value:toDate:options:", 16, 1, v5, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "components:fromDate:", 512, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "weekday");

  }
  else
  {
    v8 = 2;
  }

  return v8;
}

unint64_t HKLastDayOfWeekForWeeklyGoalCalculations()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (HKFirstDayOfWeekForWeeklyGoalCalculations_onceToken != -1)
    dispatch_once(&HKFirstDayOfWeekForWeeklyGoalCalculations_onceToken, &__block_literal_global_90);
  v0 = HKFirstDayOfWeekForWeeklyGoalCalculations_firstDayOfWeek;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "maximumRangeOfUnit:", 512);
  if (v0 - 1 <= v3)
    v4 = v0 - 1;
  else
    v4 = v2;
  if (v0 - 1 >= v2)
    v5 = v4;
  else
    v5 = v3;

  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_19A23B2CC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23B320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E37F2640;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E37F2688;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23B878(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E37F2520;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_19A23B8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x19AEC7398);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2B08;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2B50;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E37F26D0;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_19A23BC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEC7398](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23BCAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F26D0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F26D0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E37F2718;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2718;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2718;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19AEC7398);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_19A23C348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23C4A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23C4F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_19A23C63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __n128 result;
  uint64_t v12;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_OWORD *)(v8 - 96) = *(_OWORD *)(a3 + v7 - 96);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 64) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(a3 + v7 - 64);
      *(_QWORD *)(v8 - 48) = *(_QWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      result = *(__n128 *)(a3 + v7 - 40);
      *(__n128 *)(v8 - 40) = result;
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v12 = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v8 - 11) = *(_QWORD *)(a3 + v7 - 11);
      *(_QWORD *)(v8 - 16) = v12;
      v7 -= 96;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19A23C7F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19A23C868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23C96C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23CAC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  char v7;
  int v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  std::basic_regex<char>::value_type v15;
  unsigned __int8 v16;
  std::basic_regex<char>::value_type v17;
  __int16 v18;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      v7 = 0;
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v18 = 10;
          goto LABEL_81;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v18 = 13;
          goto LABEL_81;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v18 = 9;
          goto LABEL_81;
        case 'u':
          if (v4 + 1 == a3)
            goto LABEL_91;
          v8 = v4[1];
          if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 && (v8 | 0x20u) - 97 >= 6)
            goto LABEL_91;
          v4 += 2;
          if (v4 == a3)
            goto LABEL_91;
          v9 = *v4;
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_28;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6)
            goto LABEL_91;
          v10 = -87;
LABEL_28:
          v7 = 16 * (v10 + v9);
LABEL_29:
          if (v4 + 1 == a3)
            goto LABEL_91;
          v11 = v4[1];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_34;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6)
            goto LABEL_91;
          v12 = -87;
LABEL_34:
          if (v4 + 2 == a3)
            goto LABEL_91;
          v13 = v4[2];
          v14 = -48;
          if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
            goto LABEL_39;
          v13 |= 0x20u;
          if ((v13 - 97) >= 6)
            goto LABEL_91;
          v14 = -87;
LABEL_39:
          v15 = v14 + v13 + 16 * (v12 + v11 + v7);
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v15;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
          }
          v4 += 3;
          return v4;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v18 = 11;
          break;
        case 'x':
          goto LABEL_29;
        default:
          goto LABEL_53;
      }
      goto LABEL_81;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_69;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v18 = 12;
LABEL_81:
          *(_WORD *)a4 = v18;
          return ++v4;
        }
        v6 = 12;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_53:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_69;
      }
LABEL_91:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_91;
    v16 = v4[1];
    if (((v16 & 0xDF) - 65) > 0x19u)
      goto LABEL_91;
    v17 = v16 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
    }
    v4 += 2;
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E37F27F0;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E37F2838;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_19A23CFA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19AEC7398](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23D004(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E37F2910;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E37F27A8;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_19A23D180(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F27A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F27A8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F27F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F27F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F2880;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F2880;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F28C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E37F28C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_19A23DC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_19A23DFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_19A23E11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_19A23E228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23E27C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_19A23E434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v6;
  int v7;
  int v8;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 != 87)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((char **)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_19A23EDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23F084(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_19A23F238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_19A23F344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_19A23F3B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_19A23F4C8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23F7B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_19A23F860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  int64x2_t v24;
  std::pair<std::string, std::string> *v25;
  std::__split_buffer<std::pair<std::string, std::string>> v26;

  v6 = (unint64_t)a1[2];
  v4 = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v26.__end_cap_.__value_ = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = *a1;
    v19 = (unint64_t)a1[1];
    if ((char *)v19 == *a1)
    {
      v24 = vdupq_n_s64(v19);
      v21 = &v15[48 * v11];
    }
    else
    {
      v21 = &v15[48 * v11];
      do
      {
        v22 = *(_OWORD *)(v19 - 48);
        *((_QWORD *)v21 - 4) = *(_QWORD *)(v19 - 32);
        *((_OWORD *)v21 - 3) = v22;
        *(_QWORD *)(v19 - 40) = 0;
        *(_QWORD *)(v19 - 32) = 0;
        *(_QWORD *)(v19 - 48) = 0;
        v23 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v21 - 1) = *(_QWORD *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *(_QWORD *)(v19 - 16) = 0;
        *(_QWORD *)(v19 - 8) = 0;
        *(_QWORD *)(v19 - 24) = 0;
        v19 -= 48;
      }
      while ((char *)v19 != v20);
      v24 = *(int64x2_t *)a1;
    }
    v10 = v16 + 48;
    *a1 = v21;
    a1[1] = v16 + 48;
    *(int64x2_t *)&v26.__begin_ = v24;
    v25 = (std::pair<std::string, std::string> *)a1[2];
    a1[2] = &v15[48 * v14];
    v26.__end_cap_.__value_ = v25;
    v26.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v24.i64[0];
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v26);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_19A23FCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23FD30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23FF14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A23FF60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19AEC7398);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E37F2A90;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x19AEC7398);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x19AEC7308](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_19A240288(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2B98;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x19AEC7398);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, a2, a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E37F2B98;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = this;
  if (this == a3)
    return (char *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (char *)v3;
  }
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    return (char *)v3 + 2;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    return (char *)v3 + v10;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (char *)a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v57[40];
  __int128 v58;
  void *__p[2];
  _QWORD v60[3];
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v57 = 0;
    memset(&v57[8], 0, 32);
    v58 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v51 = a4;
    if (*(_QWORD *)&v57[32])
    {
      *(_QWORD *)&v58 = *(_QWORD *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    v12 = *((_QWORD *)&v61 + 1);
    v13 = *((_QWORD *)&v63 + 1) + v63 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v55 = 0;
    v18 = 0;
    v53 = 0;
    v54 = a2;
    v19 = *((_QWORD *)&v63 + 1);
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v63 + 1) + v63 - 1;
    v22 = v21 / 0x2A;
    v23 = 3 * (v21 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * v22) + 32 * v23 + 80) = v6;
    v24 = *(_QWORD *)(v20 + 8 * v22) + 32 * v23;
    v25 = a3 - a2;
    *(_DWORD *)(v24 + 88) = a5;
    *(_BYTE *)(v24 + 92) = a6;
    v52 = a3;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v25)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v19 + v63 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == v52;
          v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v53;
          if ((v55 & (v53 >= v37)) == 0)
            v38 = v37;
          if (v38 != v25)
          {
            v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            v55 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v61 + 1);
          v40 = v62;
          if ((_QWORD)v62 == *((_QWORD *)&v61 + 1))
          {
            v40 = *((_QWORD *)&v61 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * ((*((_QWORD *)&v63 + 1) + (_QWORD)v63) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v63 + 1) + (_QWORD)v63) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v61 + 1);
              v40 = v62;
            }
          }
          *((_QWORD *)&v63 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v61 + 1) + 8);
              *((_QWORD *)&v61 + 1) = v39;
              v47 = v62 - (_QWORD)v39;
            }
            while ((_QWORD)v62 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v63 = v48;
LABEL_53:
          v55 = 1;
          v53 = v25;
LABEL_38:
          v19 = *((_QWORD *)&v63 + 1);
          if (*((_QWORD *)&v63 + 1))
            continue;
          if ((v55 & 1) != 0)
          {
            v49 = *v51;
            *(_QWORD *)v49 = v54;
            *(_QWORD *)(v49 + 8) = v54 + v53;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          v58 = 0uLL;
          *(_QWORD *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v60[1] + 5) = *(_QWORD *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v57[32])
          {
            *(_QWORD *)&v58 = *(_QWORD *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v6;
}

void sub_19A241184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  const char *v40;
  const char *v41;
  char v42;
  _BYTE v45[56];
  void *__p[2];
  _QWORD v47[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v49[40];
  __int128 v50;
  void *v51[6];
  _OWORD *v52;
  _OWORD *v53;
  unint64_t v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  *(_DWORD *)v49 = 0;
  memset(&v49[8], 0, 32);
  v50 = 0u;
  memset(v51, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 48);
    *(_OWORD *)__p = 0uLL;
    memset(v47, 0, 21);
    v53 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v52, (uint64_t)v45);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v11 = v53;
    *((_DWORD *)v53 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v53 - 40), *(unsigned int *)(a1 + 32));
    v40 = a3;
    v41 = 0;
    v42 = 0;
    v12 = 0;
    v13 = (const char *)(a3 - a2);
    v14 = v53;
    *((_QWORD *)v53 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *((_BYTE *)v14 - 4) = a6;
    do
    {
      v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
      if (!v15)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 1;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 6;
      if (v16)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v40)
            goto LABEL_19;
          v26 = &v19[-*((_QWORD *)v14 - 11)];
          v27 = v41;
          if ((v42 & ((uint64_t)v41 >= (uint64_t)v26)) == 0)
          {
            v28 = *(v14 - 5);
            *(_OWORD *)v49 = *(_OWORD *)v18;
            *(_OWORD *)&v49[16] = v28;
            if (v49 != v18)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v49[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v51, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
            }
            v29 = (void *)*v17;
            *(void **)((char *)&v51[3] + 5) = *(void **)((char *)v14 - 11);
            v51[3] = v29;
            v27 = v26;
          }
          v30 = v53;
          if (v27 == v13)
          {
            v31 = (uint64_t)v52;
            while (v30 != (_QWORD *)v31)
            {
              v30 -= 12;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v30);
            }
            v53 = (_OWORD *)v31;
            v42 = 1;
            v41 = v13;
          }
          else
          {
            v41 = v27;
            v32 = v53 - 6;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v53 - 12);
            v53 = v32;
            v42 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          v20 = v53 - 6;
          std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v53 - 12);
          v53 = v20;
          break;
        case 0xFFFFFC20:
          v21 = *(v14 - 5);
          *(_OWORD *)v45 = *(_OWORD *)v18;
          *(_OWORD *)&v45[16] = v21;
          memset(&v45[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v45[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v47[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = (void *)*v17;
          *(_QWORD *)((char *)&v47[1] + 5) = *(_QWORD *)((char *)v14 - 11);
          v47[1] = v22;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v47[1] + 24))(v47[1], 0, v45);
          v23 = v53;
          if ((unint64_t)v53 >= v54)
          {
            v53 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v52, (uint64_t)v45);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v45[16];
            *v53 = *(_OWORD *)v45;
            v23[1] = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            v23[2] = *(_OWORD *)&v45[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v47[0];
            __p[0] = 0;
            __p[1] = 0;
            v47[0] = 0;
            v25 = v47[1];
            *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v47[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v53 = v23 + 6;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      v14 = v53;
    }
    while (v52 != v53);
    if ((v42 & 1) != 0)
    {
      v33 = *a4;
      *(_QWORD *)v33 = a2;
      *(_QWORD *)(v33 + 8) = &v41[(_QWORD)a2];
      *(_BYTE *)(v33 + 16) = 1;
      if ((_QWORD)v50 != *(_QWORD *)&v49[32])
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(_QWORD *)&v49[32]) >> 3);
        v35 = (_BYTE *)(*(_QWORD *)&v49[32] + 16);
        v36 = 1;
        do
        {
          v37 = v33 + 24 * v36;
          *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
          v38 = *v35;
          v35 += 24;
          *(_BYTE *)(v37 + 16) = v38;
          v15 = v34 > v36++;
        }
        while (v15);
      }
      v6 = 1;
    }
    else
    {
      v6 = 0;
    }
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  if (*(_QWORD *)&v49[32])
  {
    *(_QWORD *)&v50 = *(_QWORD *)&v49[32];
    operator delete(*(void **)&v49[32]);
  }
  *(_QWORD *)v49 = &v52;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  return v6;
}

void sub_19A2416BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  --a1[5];
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_19A44C5C0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_19A241C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<binarysample::ElectrocardiogramLead>>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_19A242430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t HKDeviceStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C83B0);
}

id HKDeviceStoreServerInterface()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40FBE8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchDevicesMatchingValues_forProperty_completion_, 0, 1);
  v2 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchDevicesMatchingValues_forProperty_completion_, 1, 0);
  v3 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchAllDevicesWithCompletion_, 0, 1);
  v4 = (id)objc_msgSend(v0, "hk_setSetOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchGymkitAndBluetoothDevicesMatchingValues_forProperty_completion_, 0, 1);
  return v0;
}

uint64_t HKSourceStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C62C8);
}

id HKSourceStoreServerInterface()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40FC48);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchAllSourcesWithCompletion_, 0, 1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v1, sel_remote_fetchOrderedSourcesForObjectType_completion_, 0, 1);
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v1, sel_remote_updateOrderedSources_forObjectType_completion_, 0, 0);

  return v0;
}

const __CFString *HKAnalyticsPropertyValueForBiologicalSex(void *a1)
{
  unint64_t v1;

  v1 = objc_msgSend(a1, "biologicalSex");
  if (v1 > 3)
    return CFSTR("male");
  else
    return off_1E37F2D90[v1];
}

id HKAnalyticsDecadeBucketedAgeForAge(void *a1)
{
  return HKAnalyticsDecadeBucketedAgeForAgeWithBoundsAndBucketRange(a1, 0, 0, 0, 0);
}

id HKAnalyticsDecadeBucketedAgeForAgeWithMinimumAge(void *a1, void *a2)
{
  return HKAnalyticsDecadeBucketedAgeForAgeWithBoundsAndBucketRange(a1, a2, 0, 0, 0);
}

id HKAnalyticsDecadeBucketedAgeForAgeWithMinimumAgeAndMaximumAge(void *a1, void *a2, void *a3)
{
  return HKAnalyticsDecadeBucketedAgeForAgeWithBoundsAndBucketRange(a1, a2, a3, 0, 0);
}

id HKAnalyticsDecadeBucketedAgeForAgeWithBoundsAndBucketRange(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  if (v9)
  {
    v14 = objc_msgSend(v9, "integerValue");
    v15 = 10 * (v14 / 10);
    if (v10)
    {
      v16 = objc_msgSend(v10, "integerValue");
      if (v14 < v16)
      {
        v17 = (void *)MEMORY[0x1E0CB37E8];
        v18 = v16 - 1;
LABEL_11:
        v21 = v17;
LABEL_24:
        objc_msgSend(v21, "numberWithInteger:", v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_25;
      }
      if (v14 / 10 == v16 / 10)
        v15 = v16;
    }
    if (v11)
    {
      v20 = objc_msgSend(v11, "integerValue");
      if (v14 > v20)
      {
        v17 = (void *)MEMORY[0x1E0CB37E8];
        v18 = v20 + 1;
        goto LABEL_11;
      }
    }
    if (v12)
    {
      v22 = objc_msgSend(v12, "integerValue");
      if (v13)
      {
LABEL_14:
        v23 = objc_msgSend(v13, "integerValue");
LABEL_17:
        if (v15 <= v22)
          v24 = v22;
        else
          v24 = v15;
        if (v24 >= v23)
          v18 = v23;
        else
          v18 = v24;
        v21 = (void *)MEMORY[0x1E0CB37E8];
        goto LABEL_24;
      }
    }
    else
    {
      v22 = 0xFFFFFFFF80000000;
      if (v13)
        goto LABEL_14;
    }
    v23 = 90;
    goto LABEL_17;
  }
  v19 = 0;
LABEL_25:

  return v19;
}

__CFString *HKAnalyticsErrorCategoryForFeatureAvailabilityOnboardingEligibility(void *a1)
{
  if (!a1)
    return CFSTR("-1");
  HKAnalyticsErrorCategoryForFeatureAvailabilityOnboardingIneligibilityReasons(objc_msgSend(a1, "ineligibilityReasons"));
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

const __CFString *HKAnalyticsErrorCategoryForFeatureAvailabilityOnboardingIneligibilityReasons(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;

  v1 = CFSTR("missingCountryCode");
  v2 = CFSTR("rescinded");
  v3 = CFSTR("unknown");
  if ((a1 & 0x80) != 0)
    v3 = CFSTR("rescinded");
  if ((a1 & 0x40) == 0)
    v2 = v3;
  if ((a1 & 0x38) != 0)
    v2 = CFSTR("regionUnavailable");
  if ((a1 & 6) != 0)
    v2 = CFSTR("incapable");
  if ((a1 & 1) == 0)
    v1 = v2;
  if (a1)
    return v1;
  else
    return CFSTR("none");
}

__CFString *HKAnalyticsErrorDetailsForFeatureAvailabilityOnboardingEligibility(void *a1)
{
  if (!a1)
    return CFSTR("-1");
  HKAnalyticsErrorDetailsForFeatureAvailabilityOnboardingIneligibilityReasons(objc_msgSend(a1, "ineligibilityReasons"));
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKAnalyticsErrorDetailsForFeatureAvailabilityOnboardingIneligibilityReasons(uint64_t a1)
{
  char v1;
  void *v2;
  void *v3;
  __CFString *v4;

  if (!a1)
  {
    v4 = CFSTR("none");
    return v4;
  }
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("missingCountryCode"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_18;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("missingActiveRemoteDevice"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  objc_msgSend(v3, "addObject:", CFSTR("capabilityUnsupportedOnActiveRemoteDevice"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  objc_msgSend(v3, "addObject:", CFSTR("countryUnsupportedOnLocalDevice"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  objc_msgSend(v3, "addObject:", CFSTR("countryListMissingForActiveRemoteDevice"));
  if ((v1 & 0x20) == 0)
  {
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_9;
LABEL_22:
    objc_msgSend(v3, "addObject:", CFSTR("remotelyDisabled"));
    if ((v1 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_21:
  objc_msgSend(v3, "addObject:", CFSTR("countryUnsupportedOnActiveRemoteDevice"));
  if ((v1 & 0x40) != 0)
    goto LABEL_22;
LABEL_9:
  if (v1 < 0)
LABEL_10:
    objc_msgSend(v3, "addObject:", CFSTR("seedExpired"));
LABEL_11:
  if (!objc_msgSend(v3, "count"))
    objc_msgSend(v3, "addObject:", CFSTR("unknown"));
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(","));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKAnalyticsSigFigBinnedValue(void *a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;

  v5 = a3;
  if (a1)
  {
    v6 = objc_msgSend(a1, "integerValue");
    if (!v5 || v6 > objc_msgSend(v5, "integerValue"))
    {
      v7 = log10((double)v6);
      v8 = __exp10((double)(a2 - (uint64_t)(floor(v7) + 1.0)));
      v6 = (uint64_t)((double)(uint64_t)(v8 * (double)v6) / v8);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t HKSemanticVersionCompare(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return HKNSOperatingSystemVersionCompare(&v5, &v3);
}

BOOL HKSemanticVersionsEqual(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return HKNSOperatingSystemVersionCompare(&v5, &v3) == 0;
}

BOOL HKSemanticVersionIsUnknown(__int128 *a1)
{
  __int128 v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  return HKNSOperatingSystemVersionIsUnknown(&v2);
}

uint64_t HKSemanticVersionByParsingString(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (a2)
    {
      objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setCharactersToBeSkipped:", 0);
      v12 = 0;
      v13 = 0;
      v11 = 0;
      if ((objc_msgSend(v6, "scanInteger:", &v13) & 1) != 0)
      {
        if ((objc_msgSend(v6, "scanString:intoString:", CFSTR("."), 0) & 1) != 0)
        {
          if ((objc_msgSend(v6, "scanInteger:", &v12) & 1) != 0)
          {
            if (objc_msgSend(v6, "scanString:intoString:", CFSTR("."), 0)
              && (objc_msgSend(v6, "scanInteger:", &v11) & 1) == 0)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string, failed to parse patch version"), v5);
            }
            else
            {
              if ((objc_msgSend(v6, "isAtEnd") & 1) != 0)
              {
                v7 = v12;
                v8 = v11;
                *a2 = v13;
                a2[1] = v7;
                a2[2] = v8;
                v9 = 1;
LABEL_19:

                goto LABEL_20;
              }
              objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string, there are extra characters"), v5);
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string, failed to parse minor version"), v5);
          }
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string, expecting a period after major version"), v5);
        }
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string, failed to parse major version"), v5);
      }
      v9 = 0;
      goto LABEL_19;
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("No HKSemanticVersion pointer provided, cannot return parsed version \"%@\""), v5);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("\"%@\" is not a valid semantic version string"), v5);
  }
  v9 = 0;
LABEL_20:

  return v9;
}

void sub_19A249C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A24A048(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_19A24A260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getNRPairedDeviceRegistryClass_block_invoke_4(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_4();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_4();
  getNRPairedDeviceRegistryClass_softClass_4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t NanoRegistryLibrary_4()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_5)
  {
    v2 = xmmword_1E37F2EA8;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_5 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_5)
    NanoRegistryLibrary_cold_1_4(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_5;
}

id HKRollingBaselineConfigurationForQuantityType(void *a1)
{
  id v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v1 = a1;
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAppleInternalInstall");

  if ((v3 & 1) != 0)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.health.shared"));
    _HKRollingBaselineConfigurationKeyForQuantityType(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "dataForKey:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v6, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        v9 = v7;
      }
      else
      {
        objc_msgSend(v1, "_rollingBaselineConfiguration");
        v9 = (id)objc_claimAutoreleasedReturnValue();
      }
      v10 = v9;

    }
    else
    {
      objc_msgSend(v1, "_rollingBaselineConfiguration");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    objc_msgSend(v1, "_rollingBaselineConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

id _HKRollingBaselineConfigurationKeyForQuantityType(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(a1, "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("RollingBaselineConfiguration_%@"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void _HKSetRollingBaselineConfigurationForQuantityType(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99EA0]), "initWithSuiteName:", CFSTR("com.apple.health.shared"));
    _HKRollingBaselineConfigurationKeyForQuantityType(v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v3, v5);

  }
}

void sub_19A24BDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

uint64_t HKFitnessMachineConnectionClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3CAE08);
}

id HKFitnessMachineConnectionServerInterface()
{
  void *v0;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE40FCA8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setInterface:forSelector:argumentIndex:ofReply:", objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3CAE08), sel_remote_registerClient_, 0, 0);
  return v0;
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;

  return v0;
}

void sub_19A2651C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void sub_19A265568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A266960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

Class __getASDAppQueryClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!AppStoreDaemonLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E37F3108;
    v5 = 0;
    AppStoreDaemonLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AppStoreDaemonLibraryCore_frameworkLibrary)
    __getASDAppQueryClass_block_invoke_cold_1(&v3);
  result = objc_getClass("ASDAppQuery");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getASDAppQueryClass_block_invoke_cold_2();
  getASDAppQueryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL HKIsDeprecatedPropertyType(uint64_t a1)
{
  return (unint64_t)(a1 - 150000) <= 8 && ((1 << (a1 + 16)) & 0x1CF) != 0 || a1 == 160006;
}

__CFString *HKStringFromUserDomainConceptPropertyType(uint64_t a1)
{
  __CFString *v1;
  __CFString *result;

  if (a1 <= 159999)
  {
    if (a1 <= 149999)
    {
      if (a1)
      {
        if (a1 == 1)
        {
          return CFSTR("Prune Date");
        }
        else if (a1 == 2)
        {
          return CFSTR("Is Hidden From Enumeration");
        }
        else
        {
LABEL_48:
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
          v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
          return v1;
        }
      }
      else
      {
        return CFSTR("None");
      }
    }
    else
    {
      switch(a1)
      {
        case 150000:
          result = CFSTR("[DEPRECATED] Preferred Name");
          break;
        case 150001:
          result = CFSTR("[DEPRECATED] Preferred Name en_US");
          break;
        case 150002:
          result = CFSTR("[DEPRECATED] Preferred Name en_GB");
          break;
        case 150003:
          result = CFSTR("[DEPRECATED] Preferred Name en_CA");
          break;
        case 150004:
          result = CFSTR("Charts Blood Pressure");
          break;
        case 150005:
          result = CFSTR("Hides Out of Range Filter");
          break;
        case 150006:
          result = CFSTR("[DEPRECATED] Education Title");
          break;
        case 150007:
          result = CFSTR("[DEPRECATED] Education Description");
          break;
        case 150008:
          result = CFSTR("[DEPRECATED] Education Abstract");
          break;
        case 150009:
          result = CFSTR("Low Utility");
          break;
        default:
          goto LABEL_48;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 160000:
        v1 = CFSTR("User Specified Name");
        return v1;
      case 160001:
        result = CFSTR("User Specified Notes");
        break;
      case 160002:
        result = CFSTR("Free Text Brand Name");
        break;
      case 160003:
        result = CFSTR("Free Text Generic Name");
        break;
      case 160004:
        result = CFSTR("Free Text Manufactured Dose Form");
        break;
      case 160005:
        result = CFSTR("Free Text Medication Route");
        break;
      case 160006:
        result = CFSTR("[DEPRECATED] Free Text Medication Ingredient");
        break;
      case 160007:
        result = CFSTR("Ontology Brand Name");
        break;
      case 160008:
        result = CFSTR("User Specified Medication Visualization");
        break;
      case 160009:
        result = CFSTR("Ontology Generic Name");
        break;
      case 160010:
        result = CFSTR("Ontology Manufactured Dose Form");
        break;
      case 160011:
        result = CFSTR("Ontology Route");
        break;
      case 160012:
        result = CFSTR("Ontology Localized Preferred Name");
        break;
      case 160013:
        result = CFSTR("Unlocalized Quantified Strength");
        break;
      case 160014:
        result = CFSTR("Free Text Medication Form Code");
        break;
      case 160015:
        result = CFSTR("Free Text Quantified Strength");
        break;
      case 160016:
        result = CFSTR("Ontology Basic Dose Form");
        break;
      case 160017:
        result = CFSTR("Ontology Singular Unit");
        break;
      case 160018:
        result = CFSTR("Ontology Plural Unit");
        break;
      case 160019:
        result = CFSTR("Localized Ontology Education Content");
        break;
      case 160020:
        result = CFSTR("Free Text Medication Name");
        break;
      case 160021:
        result = CFSTR("Free Text Medication Named Strength Quantity");
        break;
      case 160022:
        result = CFSTR("Localized Ontology Component Name");
        break;
      default:
        if (a1 != 180000)
          goto LABEL_48;
        result = CFSTR("Localized Pregnancy Trimester / Lactation Ratings");
        break;
    }
  }
  return result;
}

int64_t MaximumVersionForListOfProperties(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t i;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    v5 = 0xFFFFFFFF80000000;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "version");
        if (v5 <= v7)
          v5 = v7;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0xFFFFFFFF80000000;
  }

  return v5;
}

double MaximumTimestampForListOfProperties(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t i;
  double v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    v5 = -1.79769313e308;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "timestamp");
        if (v5 < v7)
          v5 = v7;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }
  else
  {
    v5 = -1.79769313e308;
  }

  return v5;
}

void *HKAllDeprecatedPropertyTypes()
{
  return &unk_1E389DE28;
}

__CFString *HKStringFromUserDomainConceptPropertyMergeOptions(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = v2;
    if ((v1 & 1) != 0)
      objc_msgSend(v2, "addObject:", CFSTR("Ignore Timestamps"));
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("(%@)"), v5);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = &stru_1E37FD4C0;
  }
  return v6;
}

__CFString *_HKStringForFitnessMachineType(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E37F3190[a1];
}

void sub_19A26A0C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19A26AFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void sub_19A26B310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26B588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A26B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19A26BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26BC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26BF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26C1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26C604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_19A26C818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A26C8E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_19A26CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

BOOL _HKActivityMoveModeIsValid(unint64_t a1)
{
  return a1 < 3;
}

void sub_19A26F960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void sub_19A270A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_15(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void HKSynchronizeNanoPreferencesUserDefaults(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  id v6;

  v3 = (objc_class *)MEMORY[0x1E0D51618];
  v4 = a2;
  v5 = a1;
  v6 = objc_alloc_init(v3);
  objc_msgSend(v6, "synchronizeUserDefaultsDomain:keys:", v5, v4);

}

id HKObjectForNanoPreferencesUserDefaultsKey(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;

  v3 = (objc_class *)MEMORY[0x1E0D51610];
  v4 = a2;
  v5 = a1;
  v6 = (void *)objc_msgSend([v3 alloc], "initWithDomain:", v5);

  v7 = (id)objc_msgSend(v6, "synchronize");
  objc_msgSend(v6, "objectForKey:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

uint64_t HKBoolValueForNanoPreferencesUserDefaultsKey(void *a1, void *a2, uint64_t a3)
{
  objc_class *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;

  v5 = (objc_class *)MEMORY[0x1E0D51610];
  v6 = a2;
  v7 = a1;
  v8 = (void *)objc_msgSend([v5 alloc], "initWithDomain:", v7);

  v9 = (id)objc_msgSend(v8, "synchronize");
  v10 = objc_msgSend(v8, "BOOLForKey:keyExistsAndHasValidFormat:", v6, a3);

  return v10;
}

void sub_19A276DC4(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x19A276DB0);
  }
  objc_end_catch();
  JUMPOUT(0x19A276DACLL);
}

id HKComparisonFilterRelationalOperatorTypes()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", &unk_1E3895620, &unk_1E3895638, &unk_1E3895650, &unk_1E3895668, &unk_1E3895680, &unk_1E3895698, 0);
}

uint64_t HKIsValueOrContainerValidForOperatorType(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v10;

  v7 = a2;
  if (a1 == 10)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Expected value of class NSArray or NSSet, received %@"), objc_opt_class(), v10);
LABEL_8:
        v8 = 0;
        goto LABEL_9;
      }
    }
  }
  else if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a4, 3, CFSTR("Expected value of type %@, received %@"), a3, objc_opt_class());
    goto LABEL_8;
  }
  v8 = 1;
LABEL_9:

  return v8;
}

id HKComparisonFilterClasses()
{
  if (HKComparisonFilterClasses_onceToken != -1)
    dispatch_once(&HKComparisonFilterClasses_onceToken, &__block_literal_global_101);
  return (id)HKComparisonFilterClasses_filterClasses;
}

uint64_t OUTLINED_FUNCTION_1_10(void *a1, const char *a2)
{
  return objc_msgSend(a1, "set");
}

void sub_19A279C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;
  id *v27;
  id *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 128), 8);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getNRPairedDeviceRegistryClass_1()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNRPairedDeviceRegistryClass_softClass_5;
  v7 = getNRPairedDeviceRegistryClass_softClass_5;
  if (!getNRPairedDeviceRegistryClass_softClass_5)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNRPairedDeviceRegistryClass_block_invoke_5;
    v3[3] = &unk_1E37E8690;
    v3[4] = &v4;
    __getNRPairedDeviceRegistryClass_block_invoke_5((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19A279E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A27AF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A27B3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A27B708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t getNRRawVersionFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getNRRawVersionFromStringSymbolLoc_ptr_1;
  v9 = getNRRawVersionFromStringSymbolLoc_ptr_1;
  if (!getNRRawVersionFromStringSymbolLoc_ptr_1)
  {
    v3 = (void *)NanoRegistryLibrary_5();
    v2 = dlsym(v3, "NRRawVersionFromString");
    v7[3] = (uint64_t)v2;
    getNRRawVersionFromStringSymbolLoc_ptr_1 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
    getNRRawVersionFromString_cold_1();
  v4 = ((uint64_t (*)(id))v2)(v1);

  return v4;
}

void sub_19A27BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A27C558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A27D1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getNRDevicePropertyName()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRDevicePropertyNameSymbolLoc_ptr;
  v6 = getNRDevicePropertyNameSymbolLoc_ptr;
  if (!getNRDevicePropertyNameSymbolLoc_ptr)
  {
    v1 = (void *)NanoRegistryLibrary_5();
    v0 = (id *)dlsym(v1, "NRDevicePropertyName");
    v4[3] = (uint64_t)v0;
    getNRDevicePropertyNameSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRDevicePropertyName_cold_1();
  return *v0;
}

void sub_19A27D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRDevicePropertyIsAltAccount()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRDevicePropertyIsAltAccountSymbolLoc_ptr;
  v6 = getNRDevicePropertyIsAltAccountSymbolLoc_ptr;
  if (!getNRDevicePropertyIsAltAccountSymbolLoc_ptr)
  {
    v1 = (void *)NanoRegistryLibrary_5();
    v0 = (id *)dlsym(v1, "NRDevicePropertyIsAltAccount");
    v4[3] = (uint64_t)v0;
    getNRDevicePropertyIsAltAccountSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRDevicePropertyIsAltAccount_cold_1();
  return *v0;
}

void sub_19A27D2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getNRDevicePropertySystemVersion()
{
  id *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (id *)getNRDevicePropertySystemVersionSymbolLoc_ptr_1;
  v6 = getNRDevicePropertySystemVersionSymbolLoc_ptr_1;
  if (!getNRDevicePropertySystemVersionSymbolLoc_ptr_1)
  {
    v1 = (void *)NanoRegistryLibrary_5();
    v0 = (id *)dlsym(v1, "NRDevicePropertySystemVersion");
    v4[3] = (uint64_t)v0;
    getNRDevicePropertySystemVersionSymbolLoc_ptr_1 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getNRDevicePropertySystemVersion_cold_1();
  return *v0;
}

void sub_19A27F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getNRVersionIsGreaterThanOrEqual(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr;
  v8 = getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr;
  if (!getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr)
  {
    v3 = (void *)NanoRegistryLibrary_5();
    v2 = dlsym(v3, "NRVersionIsGreaterThanOrEqual");
    v6[3] = (uint64_t)v2;
    getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
    getNRVersionIsGreaterThanOrEqual_cold_1();
  return ((uint64_t (*)(uint64_t, uint64_t))v2)(a1, 786689);
}

void sub_19A27F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_19A27FF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NanoRegistryLibrary_5()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_6)
  {
    v2 = xmmword_1E37F48C8;
    v3 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_6 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_6)
    NanoRegistryLibrary_cold_1_5(&v1);
  return NanoRegistryLibraryCore_frameworkLibrary_6;
}

Class __getNRPairedDeviceRegistryClass_block_invoke_5(uint64_t a1)
{
  Class result;

  NanoRegistryLibrary_5();
  result = objc_getClass("NRPairedDeviceRegistry");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getNRPairedDeviceRegistryClass_block_invoke_cold_1_5();
  getNRPairedDeviceRegistryClass_softClass_5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getASDSystemAppMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  AppStoreDaemonLibrary();
  result = objc_getClass("ASDSystemAppMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getASDSystemAppMetadataClass_block_invoke_cold_1();
  getASDSystemAppMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void AppStoreDaemonLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!AppStoreDaemonLibraryCore_frameworkLibrary_0)
  {
    v1 = xmmword_1E37F48E0;
    v2 = 0;
    AppStoreDaemonLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!AppStoreDaemonLibraryCore_frameworkLibrary_0)
    AppStoreDaemonLibrary_cold_1(&v0);
}

Class __getASDInstallAppsClass_block_invoke(uint64_t a1)
{
  Class result;

  AppStoreDaemonLibrary();
  result = objc_getClass("ASDInstallApps");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getASDInstallAppsClass_block_invoke_cold_1();
  getASDInstallAppsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void OUTLINED_FUNCTION_7_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_10()
{
  return objc_opt_class();
}

id _HKFormattedMedicalIDNameForContact(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C97218], "stringFromContact:style:", v1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "linkedContacts");
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "isPreferredForName", (_QWORD)v11))
        {
          objc_msgSend(MEMORY[0x1E0C97218], "stringFromContact:style:", v8, 0);
          v9 = objc_claimAutoreleasedReturnValue();

          v2 = (void *)v9;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

  return v2;
}

void _HKMedicalIDPhoneNumberForContact(void *a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, void *, void *, void *);
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v16 = a1;
  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(v5, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "formattedStringValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "label");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v16, "linkedContacts");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "phoneNumbers");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "count"))
    {
      objc_msgSend(MEMORY[0x1E0C97200], "unifyContacts:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "phoneNumbers");
      v13 = objc_claimAutoreleasedReturnValue();

      v11 = (void *)v13;
    }
    objc_msgSend(v11, "firstObject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "value");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "formattedStringValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "label");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "identifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v6[2](v6, v8, v9, v10);

}

id _HKMedicalIDSimNumberForContact(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  NSObject *v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  uint8_t buf[8];
  id v54;
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc(MEMORY[0x1E0CA6E38]);
  v3 = (void *)objc_msgSend(v2, "initWithQueue:", MEMORY[0x1E0C80D38]);
  v54 = 0;
  objc_msgSend(v3, "getSubscriptionInfoWithError:", &v54);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v54;
  if (!v5)
  {
    objc_msgSend(v4, "subscriptionsInUse");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "firstObject");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      if (!objc_msgSend(v16, "isSimDataOnly"))
      {
        objc_msgSend(v1, "linkedContacts");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "phoneNumbers");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v19, "count"))
        {
          objc_msgSend(MEMORY[0x1E0C97200], "unifyContacts:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "phoneNumbers");
          v22 = objc_claimAutoreleasedReturnValue();

          v20 = (void *)v22;
        }
        v52 = 0;
        objc_msgSend(v3, "getPhoneNumber:error:", v16, &v52);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v52;
        if (v6)
        {
          _HKInitializeLogging();
          v24 = HKLogMedicalID;
          if (os_log_type_enabled((os_log_t)HKLogMedicalID, OS_LOG_TYPE_ERROR))
            _HKMedicalIDSimNumberForContact_cold_2((uint64_t)v6, v24, v25, v26, v27, v28, v29, v30);
          v14 = 0;
        }
        else
        {
          v44 = v19;
          v45 = v16;
          v31 = (void *)MEMORY[0x1E0C97398];
          v46 = v23;
          objc_msgSend(v23, "displayPhoneNumber");
          v32 = v20;
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "phoneNumberWithStringValue:", v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();

          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = v32;
          v35 = v32;
          v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v48, v55, 16);
          if (v36)
          {
            v37 = v36;
            v38 = *(_QWORD *)v49;
LABEL_20:
            v39 = 0;
            while (1)
            {
              if (*(_QWORD *)v49 != v38)
                objc_enumerationMutation(v35);
              objc_msgSend(*(id *)(*((_QWORD *)&v48 + 1) + 8 * v39), "value");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v40, "isLikePhoneNumber:", v34) & 1) != 0)
                break;

              if (v37 == ++v39)
              {
                v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v48, v55, 16);
                if (v37)
                  goto LABEL_20;
                goto LABEL_26;
              }
            }
            objc_msgSend(v40, "formattedStringValue");
            v41 = (void *)objc_claimAutoreleasedReturnValue();

            v19 = v44;
            v16 = v45;
            if (v41)
              goto LABEL_31;
          }
          else
          {
LABEL_26:

            v19 = v44;
            v16 = v45;
          }
          _HKInitializeLogging();
          v42 = HKLogMedicalID;
          if (os_log_type_enabled((os_log_t)HKLogMedicalID, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19A0E6000, v42, OS_LOG_TYPE_DEFAULT, "The sim number did not match any phone number in ME contact.", buf, 2u);
          }
          v41 = 0;
LABEL_31:
          v14 = v41;

          v23 = v46;
          v20 = v47;
        }

        goto LABEL_33;
      }
      _HKInitializeLogging();
      v17 = HKLogMedicalID;
      if (os_log_type_enabled((os_log_t)HKLogMedicalID, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19A0E6000, v17, OS_LOG_TYPE_DEFAULT, "CTXPCServiceSubscriptionContext is a data only sim.", buf, 2u);
      }
    }
    else
    {
      _HKInitializeLogging();
      v18 = HKLogMedicalID;
      if (os_log_type_enabled((os_log_t)HKLogMedicalID, OS_LOG_TYPE_ERROR))
        _HKMedicalIDSimNumberForContact_cold_1(v18);
    }
    v6 = 0;
    v14 = 0;
LABEL_33:

    goto LABEL_34;
  }
  v6 = v5;
  _HKInitializeLogging();
  v7 = HKLogMedicalID;
  if (os_log_type_enabled((os_log_t)HKLogMedicalID, OS_LOG_TYPE_ERROR))
    -[HKCoreTelephonyClient isEmergencyServicePhoneNumber:].cold.2((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
  v14 = 0;
LABEL_34:

  return v14;
}

__CFString *HKStringFromProfileType(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  v1 = a1 - 1;
  v2 = CFSTR("Primary");
  switch(v1)
  {
    case 0:
      return v2;
    case 1:
      v2 = CFSTR("Summary Sharing");
      return v2;
    case 2:
      return CFSTR("Tinker");
    case 3:
      return CFSTR("Deviceless");
    default:
      if (CFSTR("Primary") == (__CFString *)100)
        return CFSTR("Testing");
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), CFSTR("Primary"));
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
      return v2;
  }
}

uint64_t HKHealthWrapCodablePayloadHeaderReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  void *v33;
  int *v34;
  int *v35;
  HKHealthWrapCodableKeyValue *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___HKStatistics__dataCountBySource;
  v8 = &OBJC_IVAR___HKStatistics__dataCountBySource;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      if (v14 == -1 || v14 >= *(_QWORD *)(a2 + *v4))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
      *(_QWORD *)(a2 + v13) = v14 + 1;
      v12 |= (unint64_t)(v15 & 0x7F) << v10;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v16 = v11++ >= 9;
      if (v16)
      {
        v12 = 0;
        v17 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v17 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v17 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = v7[602];
        goto LABEL_40;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = v8[603];
        goto LABEL_40;
      case 3u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 64;
        goto LABEL_40;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        a1[72] |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v16 = v23++ >= 9;
              if (v16)
              {
                v24 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_47:
        v37 = 16;
        goto LABEL_52;
      case 5u:
        v28 = 0;
        v29 = 0;
        v24 = 0;
        a1[72] |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v24 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              v16 = v29++ >= 9;
              if (v16)
              {
                v24 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_51:
        v37 = 8;
LABEL_52:
        *(_QWORD *)&a1[v37] = v24;
        goto LABEL_53;
      case 6u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 48;
        goto LABEL_40;
      case 7u:
        PBReaderReadData();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 24;
LABEL_40:
        v33 = *(void **)&a1[v20];
        *(_QWORD *)&a1[v20] = v19;

        goto LABEL_53;
      case 8u:
        v34 = v8;
        v35 = v7;
        v36 = objc_alloc_init(HKHealthWrapCodableKeyValue);
        objc_msgSend(a1, "addKeyValuePairs:", v36);
        if (PBReaderPlaceMark() && HKHealthWrapCodableKeyValueReadFrom((uint64_t)v36, a2))
        {
          PBReaderRecallMark();

          v7 = v35;
          v8 = v34;
LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

uint64_t HKLogAnalytics()
{
  if (HKLogAnalytics_onceToken != -1)
    dispatch_once(&HKLogAnalytics_onceToken, &__block_literal_global_105);
  return HKLogAnalytics_category;
}

uint64_t HKLogAssertions()
{
  if (HKLogAssertions_onceToken != -1)
    dispatch_once(&HKLogAssertions_onceToken, &__block_literal_global_4_0);
  return HKLogAssertions_category;
}

uint64_t HKLogInfrastructure()
{
  if (HKLogInfrastructure_onceToken != -1)
    dispatch_once(&HKLogInfrastructure_onceToken, &__block_literal_global_7_1);
  return HKLogInfrastructure_category;
}

uint64_t HKLogTesting()
{
  if (HKLogTesting_onceToken != -1)
    dispatch_once(&HKLogTesting_onceToken, &__block_literal_global_10);
  return HKLogTesting_testingCategory;
}

uint64_t HKLogHealthOntology()
{
  if (HKLogHealthOntology_onceToken != -1)
    dispatch_once(&HKLogHealthOntology_onceToken, &__block_literal_global_13_0);
  return HKLogHealthOntology_ontologyCategory;
}

uint64_t HKLogConceptIndex()
{
  if (HKLogConceptIndex_onceToken != -1)
    dispatch_once(&HKLogConceptIndex_onceToken, &__block_literal_global_16_0);
  return HKLogConceptIndex_conceptIndexCategory;
}

uint64_t _HKLogPersistedSignposts()
{
  if (_HKLogPersistedSignposts_onceToken != -1)
    dispatch_once(&_HKLogPersistedSignposts_onceToken, &__block_literal_global_19_0);
  return _HKLogPersistedSignposts_persistedSignpostsCategory;
}

uint64_t HKLogMedication()
{
  if (HKLogMedication_onceToken != -1)
    dispatch_once(&HKLogMedication_onceToken, &__block_literal_global_22_1);
  return HKLogMedication_medicationCategory;
}

uint64_t HKLogSharing()
{
  if (HKLogSharing_onceToken != -1)
    dispatch_once(&HKLogSharing_onceToken, &__block_literal_global_25_0);
  return HKLogSharing_sharingCategory;
}

os_signpost_id_t _HKLogSignpostIDGenerate(os_log_t log)
{
  if (_HKInitializeLogging_onceToken != -1)
    dispatch_once(&_HKInitializeLogging_onceToken, &__block_literal_global_28);
  return os_signpost_id_generate(log);
}

os_signpost_id_t _HKLogSignpostIDWithPointer(os_log_t log, void *ptr)
{
  if (_HKInitializeLogging_onceToken != -1)
    dispatch_once(&_HKInitializeLogging_onceToken, &__block_literal_global_28);
  return os_signpost_id_make_with_pointer(log, ptr);
}

void sub_19A28A508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_19A28AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void sub_19A28ADAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19A28B388(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19A28B3A8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x19A28B320);
}

void sub_19A28C6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__47(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void sub_19A28CEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void sub_19A28D290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t HKHeartbeatSeriesAppendDatum(uint64_t a1, char a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v4 = a1;
  if ((a2 & 1) != 0)
    LOBYTE(v5) = 1;
  return objc_msgSend(a3, "appendBytes:length:", &v4, 16);
}

unint64_t HKHeartbeatSeriesDatumCountFromData(void *a1)
{
  return (unint64_t)objc_msgSend(a1, "length") >> 4;
}

uint64_t HKHeartbeatSeriesDatumAtIndex(void *a1, uint64_t a2)
{
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "getBytes:range:", v3, 16 * a2, 16);
  return v3[0];
}

void sub_19A290DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableCondensedWorkoutReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 80) |= 0x20u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_59;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_61;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_61:
          v51 = 48;
          goto LABEL_70;
        case 2u:
          PBReaderReadData();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v26;

          continue;
        case 3u:
          *(_BYTE *)(a1 + 80) |= 4u;
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v52 = 24;
          goto LABEL_81;
        case 4u:
          *(_BYTE *)(a1 + 80) |= 0x40u;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v52 = 56;
          goto LABEL_81;
        case 5u:
          *(_BYTE *)(a1 + 80) |= 0x10u;
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v52 = 40;
          goto LABEL_81;
        case 6u:
          v35 = 0;
          v36 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 80) |= 0x80u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v39;
              v20 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (v15)
                {
                  v20 = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_65:
          v51 = 64;
          goto LABEL_70;
        case 7u:
          *(_BYTE *)(a1 + 80) |= 8u;
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v52 = 32;
          goto LABEL_81;
        case 8u:
          v43 = 0;
          v44 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 80) |= 2u;
          break;
        case 9u:
          *(_BYTE *)(a1 + 80) |= 1u;
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v52 = 8;
LABEL_81:
          *(_QWORD *)(a1 + v52) = v30;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v45 = *v3;
        v46 = *(_QWORD *)(a2 + v45);
        v47 = v46 + 1;
        if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
          break;
        v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
        *(_QWORD *)(a2 + v45) = v47;
        v20 |= (unint64_t)(v48 & 0x7F) << v43;
        if ((v48 & 0x80) == 0)
          goto LABEL_67;
        v43 += 7;
        v15 = v44++ >= 9;
        if (v15)
        {
          v20 = 0;
          goto LABEL_69;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
      if (*(_BYTE *)(a2 + *v5))
        v20 = 0;
LABEL_69:
      v51 = 16;
LABEL_70:
      *(_QWORD *)(a1 + v51) = v20;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HKHealthWrapCodableKeyValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  HKHealthWrapCodableValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(HKHealthWrapCodableValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HKHealthWrapCodableValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || (HKHealthWrapCodableValueReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A2996CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

id OUTLINED_FUNCTION_1_13(uint64_t a1, void *a2)
{
  return a2;
}

__CFString *NSStringFromHKNotificationInstructionAction(uint64_t a1)
{
  __CFString *v1;
  void *v2;
  void *v3;

  if ((unint64_t)(a1 - 1) >= 3)
  {
    v2 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringWithFormat:", CFSTR("unknown:%@"), v3);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v1 = off_1E37F5390[a1 - 1];
  }
  return v1;
}

void sub_19A29B0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__50(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

__CFString *HKStringForSharingType(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("Invite");
  if (a1 == 1)
  {
    v1 = CFSTR("Request");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

__CFString *HKStringForSharingStatus(unint64_t a1)
{
  if (a1 < 5)
    return off_1E37F5430[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringForNotificationStatus(unint64_t a1)
{
  if (a1 < 3)
    return off_1E37F5458[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

__CFString *HKStringForMessageDirection(uint64_t a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("Outgoing");
  if (a1 == 1)
  {
    v1 = CFSTR("Incoming");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void sub_19A29E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

uint64_t HKRequirementSatisfactionOverrideKeyForFeatureAndRequirement(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), a1, a2);
}

void OUTLINED_FUNCTION_0_16(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id getGEOLocationShifterClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGEOLocationShifterClass_softClass;
  v7 = getGEOLocationShifterClass_softClass;
  if (!getGEOLocationShifterClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGEOLocationShifterClass_block_invoke;
    v3[3] = &unk_1E37E8690;
    v3[4] = &v4;
    __getGEOLocationShifterClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19A2A15E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getGEOLocationShifterClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!GeoServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E37F55A0;
    v5 = 0;
    GeoServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!GeoServicesLibraryCore_frameworkLibrary)
    __getGEOLocationShifterClass_block_invoke_cold_1(&v3);
  result = objc_getClass("GEOLocationShifter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGEOLocationShifterClass_block_invoke_cold_2();
  getGEOLocationShifterClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id HKSafeConcept(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a1;
  v4 = a2;
  if (!v4)
    HKSafeConcept_cold_1();
  v5 = v4;
  if (v3)
  {
    v6 = v3;
  }
  else
  {
    +[HKConceptIdentifier inMemoryConceptIdentifier](HKConceptIdentifier, "inMemoryConceptIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    +[HKConceptSynthesizer synthesizeConceptWithIdentifier:forCodingCollection:](HKConceptSynthesizer, "synthesizeConceptWithIdentifier:forCodingCollection:", v7, v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

void sub_19A2A3860(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

void HKIntegerSetEnumerateEntry(uint64_t a1, void *aBlock)
{
  void (**v3)(id, _QWORD);

  v3 = (void (**)(id, _QWORD))_Block_copy(aBlock);
  v3[2](v3, a1);

}

void sub_19A2A4378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2A44B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CopySet(_QWORD *a1, void *a2)
{
  const __CFSet *v3;
  _QWORD *v4;
  CFIndex Count;
  const __CFAllocator *v6;
  const __CFSet *v7;
  CFMutableSetRef MutableCopy;
  CFTypeRef *v9;

  v3 = (const __CFSet *)a1[1];
  v9 = a2;
  v4 = a1;
  Count = CFSetGetCount(v3);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (const __CFSet *)a1[1];

  MutableCopy = CFSetCreateMutableCopy(v6, Count, v7);
  CFRelease(v9[1]);
  v9[1] = MutableCopy;

}

void sub_19A2A5004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2A5344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void sub_19A2A5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2A5B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2A7E78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void sub_19A2A8840(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19A2A8914(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t HKNotificationStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3E8D80);
}

uint64_t HKNotificationStoreServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE410008);
}

void sub_19A2A99FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKIsValidUserDomainConceptPropertyValueType(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

__CFString *HKStringFromUserDomainConceptPropertyValueType(unint64_t a1)
{
  if (a1 < 8)
    return off_1E37F5AB8[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

BOOL HKIsBasicUserDomainConceptPropertyType(unint64_t a1)
{
  BOOL v1;

  v1 = a1 - 160000 > 0x14 || ((1 << a1) & 0x10E13F) == 0;
  return !v1 || a1 - 150004 <= 5 && ((1 << (a1 + 12)) & 0x23) != 0 || a1 < 3;
}

void *HKAllBasicUserDomainConceptPropertyTypes()
{
  return &unk_1E389DE58;
}

void sub_19A2AF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A2AFB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2AFD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2AFEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B06A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B09E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B0EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B13A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B170C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B18AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B1EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B223C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B23DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B257C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B271C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B28BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B2A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B2BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B2D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B2F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B3098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B3238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B3534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B36D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B3874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2B39D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x19AEC7398);
}

uint64_t std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::__clone()
{
  return 0;
}

void *std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &unk_1E37F61A0;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL({block_pointer} {__strong})(void),std::allocator<BOOL({block_pointer} {__strong})(void)>,BOOL ()(void)>::target_type()
{
}

void sub_19A2B3D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void sub_19A2B41BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSOSManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SOSLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E37F6268;
    v5 = 0;
    SOSLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary)
    __getSOSManagerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SOSManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSManagerClass_block_invoke_cold_2();
  getSOSManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19A2B5D24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_19A2B60A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _HDValidatePositiveQuantityValue(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  double v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v20;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v8, "isCompatibleWithUnit:", v9) & 1) != 0)
  {
    objc_msgSend(v8, "doubleValueForUnit:", v9);
    if (v10 >= 0.0)
    {
      v18 = 1;
      goto LABEL_11;
    }
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v12 = objc_opt_class();
    objc_msgSend(v7, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "hk_errorForInvalidArgument:class:selector:format:", CFSTR("value"), v12, sel__validateCharacteristic_error_, CFSTR("Invalid value %@ for %@: must be >= 0"), v8, v13, v20);
  }
  else
  {
    v14 = (void *)MEMORY[0x1E0CB35C8];
    v15 = objc_opt_class();
    objc_msgSend(v7, "identifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "hk_errorForInvalidArgument:class:selector:format:", CFSTR("value"), v15, sel__validateCharacteristic_error_, CFSTR("Invalid value %@ for %@: expected parameter of class %@"), v8, v13, objc_opt_class());
  }
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v17 = v16;
  if (v16)
  {
    if (a4)
    {
      v17 = objc_retainAutorelease(v16);
      *a4 = v17;
    }
    else
    {
      _HKLogDroppedError(v16);
    }
  }

  v18 = 0;
LABEL_11:

  return v18;
}

uint64_t _ClassSupportsConceptIndexableKeyPath(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  if (objc_msgSend(a1, "conformsToProtocol:", &unk_1EE3A9240))
  {
    objc_msgSend(a1, "indexableConceptKeyPaths");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v4, "containsObject:", v3) & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      objc_msgSend(a1, "cachedConceptRelationshipKeyPaths");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v6, "containsObject:", v3);

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_19A2B82A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2B849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *_allHKWorkoutMetrics()
{
  return &unk_1E389DE70;
}

HKStatistics *_HKStatisticsForTotal(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  HKStatistics *v11;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  v11 = -[HKStatistics initWithDataType:startDate:endDate:]([HKStatistics alloc], "initWithDataType:startDate:endDate:", v10, v8, v7);

  -[HKStatistics setSumQuantity:](v11, "setSumQuantity:", v9);
  return v11;
}

double _HKCalculateWorkoutDuration(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  double v8;
  _QWORD v10[5];
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v11 = 0;
  v12 = (double *)&v11;
  v13 = 0x2020000000;
  v14 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___HKCalculateWorkoutDuration_block_invoke;
  v10[3] = &unk_1E37F6640;
  v10[4] = &v11;
  _HKEnumerateActiveWorkoutIntervalsStartingPaused(v5, v6, v7, 0, v10);
  v8 = v12[3];
  _Block_object_dispose(&v11, 8);

  return v8;
}

void sub_19A2BB180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

HKWorkoutConfiguration *_HKWorkoutConfigurationWithActivityTypeAndMetadata(uint64_t a1, void *a2)
{
  id v3;
  HKWorkoutConfiguration *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;

  v3 = a2;
  v4 = objc_alloc_init(HKWorkoutConfiguration);
  -[HKWorkoutConfiguration setActivityType:](v4, "setActivityType:", a1);
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("HKIndoorWorkout"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "BOOLValue"))
    v6 = 2;
  else
    v6 = 3;
  -[HKWorkoutConfiguration setLocationType:](v4, "setLocationType:", v6);

  if (a1 == 46)
  {
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("HKSwimmingLocationType"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && +[HKMetadataValidationUtilities hk_validateSwimmingLocationTypeMetadataValue:error:](HKMetadataValidationUtilities, "hk_validateSwimmingLocationTypeMetadataValue:error:", v7, 0))
    {
      v8 = objc_msgSend(v7, "integerValue");
    }
    else
    {
      v8 = 2;
    }
    -[HKWorkoutConfiguration setSwimmingLocationType:](v4, "setSwimmingLocationType:", v8);

  }
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("HKLapLength"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[HKUnit meterUnit](HKUnit, "meterUnit");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v9, "isCompatibleWithUnit:", v10);

    if (v11)
      -[HKWorkoutConfiguration setLapLength:](v4, "setLapLength:", v9);
  }

  return v4;
}

void sub_19A2BC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__55(uint64_t a1)
{

}

void sub_19A2BC640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

HKUnit *_HKWorkoutCanonicalSwimmingStrokeCountUnit()
{
  return +[HKUnit countUnit](HKUnit, "countUnit");
}

HKUnit *_HKWorkoutCanonicalFlightsClimbedUnit()
{
  return +[HKUnit countUnit](HKUnit, "countUnit");
}

id _HKWorkoutCanonicalUnitForGoalType(uint64_t a1)
{
  void *v1;

  switch(a1)
  {
    case 1:
      +[HKUnit meterUnitWithMetricPrefix:](HKUnit, "meterUnitWithMetricPrefix:", 9);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 2:
      +[HKUnit secondUnit](HKUnit, "secondUnit");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 3:
      +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit");
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

void _HKEnumerateActiveWorkoutIntervalsStartingPaused(void *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void (**v29)(id, void *, void *);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v29 = a5;
  if (!v29)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _HKEnumerateActiveWorkoutIntervalsStartingPaused(NSDate *__strong, NSDate *__strong, NSArray<HKWorkoutEvent *> *__strong, BOOL, void (^__strong)(NSDate *__strong, NSDate *__strong))");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, CFSTR("HKWorkout.m"), 1861, CFSTR("enumeration block must not be nil"));

  }
  v12 = v9;
  v13 = a4 ^ 1;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v14 = v11;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  v28 = v12;
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v31;
    v18 = v12;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v31 != v17)
          objc_enumerationMutation(v14);
        v20 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
        if (objc_msgSend(v20, "type", v28) == 1 || objc_msgSend(v20, "type") == 2)
        {
          objc_msgSend(v20, "dateInterval");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "startDate");
          v22 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v22, "compare:", v18) != -1 && objc_msgSend(v22, "compare:", v10) != 1)
          {
            if ((v13 & 1) != 0 && objc_msgSend(v22, "compare:", v18) == 1)
              v29[2](v29, v18, v22);
            v23 = v22;

            v24 = objc_msgSend(v20, "type");
            if (v24 == 1)
              v25 = 0;
            else
              v25 = v13;
            if (v24 == 2)
              v13 = 1;
            else
              v13 = v25;
            v18 = v23;
          }

        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v16);
  }
  else
  {
    v18 = v12;
  }

  if ((v13 & 1) != 0 && objc_msgSend(v10, "compare:", v18) == 1)
    v29[2](v29, v18, v10);

}

__CFString *_HKWorkoutEventTypeName(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return 0;
  else
    return off_1E37F6660[a1 - 1];
}

BOOL _HKWorkoutEventTypeIsValid(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

id _HKWorkoutSpeedTypeForActivityType(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  __CFString **v5;

  v4 = 0;
  if (a1 <= 34)
  {
    if (a1 == 13)
    {
      v5 = (__CFString **)&HKQuantityTypeIdentifierCyclingSpeed;
      goto LABEL_12;
    }
    if (a1 == 31)
    {
      v5 = HKQuantityTypeIdentifierPaddleSportsSpeed;
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case '#':
        v5 = HKQuantityTypeIdentifierRowingSpeed;
        goto LABEL_12;
      case '%':
        v5 = (__CFString **)&HKQuantityTypeIdentifierRunningSpeed;
        goto LABEL_12;
      case '<':
        v5 = HKQuantityTypeIdentifierCrossCountrySkiingSpeed;
LABEL_12:
        +[HKObjectType quantityTypeForIdentifier:](HKObjectType, "quantityTypeForIdentifier:", *v5, v1, v2);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        break;
    }
  }
  return v4;
}

uint64_t _HKWorkoutActivityTypeIsDeprecated(unint64_t a1)
{
  return (a1 < 0x1F) & (0x4000C000u >> a1);
}

BOOL _HKWorkoutSwimmingLocationTypeIsValid(unint64_t a1)
{
  return a1 < 3;
}

uint64_t _HKWorkoutLapLengthIsValid(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  +[HKUnit meterUnit](HKUnit, "meterUnit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "isCompatibleWithUnit:", v2);

  return v3;
}

BOOL _HKWorkoutGoalTypeIsValid(unint64_t a1)
{
  return a1 < 4;
}

BOOL _HKWorkoutGoalTypeIsValidForGoal(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 3;
}

uint64_t _HKWorkoutValidGoalQuantity(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (!v1)
  {
LABEL_4:
    v2 = 1;
    goto LABEL_6;
  }
  v2 = 1;
  if ((_HKWorkoutGoalTypeAcceptsQuantity(1, v1) & 1) == 0)
  {
    if ((_HKWorkoutGoalTypeAcceptsQuantity(3, v1) & 1) == 0)
    {
      v2 = _HKWorkoutGoalTypeAcceptsQuantity(2, v1);
      goto LABEL_6;
    }
    goto LABEL_4;
  }
LABEL_6:

  return v2;
}

void _HKEnumerateActiveWorkoutIntervals(void *a1, void *a2, void *a3, void *a4)
{
  _HKEnumerateActiveWorkoutIntervalsStartingPaused(a1, a2, a3, 0, a4);
}

HKUnit *_HKWorkoutCanonicalMoveMinutesUnit()
{
  return +[HKUnit minuteUnit](HKUnit, "minuteUnit");
}

HKUnit *_HKWorkoutCanonicalBriskMinutesUnit()
{
  return +[HKUnit minuteUnit](HKUnit, "minuteUnit");
}

HKUnit *_HKWorkoutCanonicalActiveHoursUnit()
{
  return +[HKUnit countUnit](HKUnit, "countUnit");
}

__CFString *_HKSwimmingStrokeStyleName(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E37F66B8[a1];
}

__CFString *_HKStringForWorkoutMetric(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0x15)
    return off_1E37F66F0[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown Workout Metric (%tu)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

id _HKStringRepresentationsForWorkoutMetrics(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v3, "objectForKeyedSubscript:", v8, (_QWORD)v12);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        _HKStringForWorkoutMetric(objc_msgSend(v8, "integerValue"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, v10);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return v2;
}

uint64_t _HKWorkoutFlooredValueForQuantity(void *a1, uint64_t a2)
{
  double v2;

  objc_msgSend(a1, "doubleValueForUnit:", a2);
  return (int)(v2 + 0.0001);
}

const __CFString *HKFHIRReleaseFromNSString(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  v2 = CFSTR("DSTU2");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("DSTU2")) & 1) == 0)
  {
    v2 = CFSTR("R4");
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("R4")))
      v2 = CFSTR("unknown");
  }

  return v2;
}

const __CFString *NSStringFromHKFeatureAvailabilityRescindedStatus(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E37F67D8[a1];
}

uint64_t HKFeatureAvailabilityRescindedStatusFromHKFeatureAvailabilityOnboardedCountrySupportedState(uint64_t a1)
{
  if (a1 == 5)
    return 2;
  else
    return a1 == 4;
}

id OUTLINED_FUNCTION_2_11(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t HKDatabaseControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C4630);
}

uint64_t HKDatabaseControlServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE410188);
}

id _HKBarometricPressureUnit()
{
  void *v0;
  void *v1;
  int v2;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", *MEMORY[0x1E0C99840]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  if (v2)
    +[HKUnit pascalUnitWithMetricPrefix:](HKUnit, "pascalUnitWithMetricPrefix:", 8);
  else
    +[HKUnit inchesOfMercuryUnit](HKUnit, "inchesOfMercuryUnit");
  return (id)objc_claimAutoreleasedReturnValue();
}

id _HKBloodGlucoseMillimolesPerLiterUnit()
{
  if (_HKBloodGlucoseMillimolesPerLiterUnit_onceToken != -1)
    dispatch_once(&_HKBloodGlucoseMillimolesPerLiterUnit_onceToken, &__block_literal_global_124);
  return (id)_HKBloodGlucoseMillimolesPerLiterUnit_glucoseUnit;
}

id _HKWeatherTemperatureUnit()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", *MEMORY[0x1E0C99828]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0C99838]))
    +[HKUnit degreeFahrenheitUnit](HKUnit, "degreeFahrenheitUnit");
  else
    +[HKUnit degreeCelsiusUnit](HKUnit, "degreeCelsiusUnit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _HKEnergyUnitForLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  int UnitsForUsage;
  int v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localeIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_retainAutorelease(v3);
  v5 = objc_msgSend(v4, "cStringUsingEncoding:", 4);

  UnitsForUsage = uameasfmt_getUnitsForUsage();
  if (UnitsForUsage != 1)
  {
    v7 = UnitsForUsage;
    _HKInitializeLogging();
    v8 = HKLogDefault;
    if (os_log_type_enabled((os_log_t)HKLogDefault, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v11 = v5;
      v12 = 1024;
      v13 = v7;
      v14 = 1024;
      v15 = 0;
      _os_log_error_impl(&dword_19A0E6000, v8, OS_LOG_TYPE_ERROR, "Failed to retrieve preferred energy unit for locale %{public}s (%d, error: %d)", buf, 0x18u);
    }
  }
  return v2;
}

id _HKBloodGlucoseUnitForLocale(void *a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  void *v4;

  objc_msgSend(a1, "regionCode");
  v1 = objc_claimAutoreleasedReturnValue();
  if (!v1)
    goto LABEL_6;
  v2 = (void *)v1;
  if (_BloodGlucoseMilligramsPerDeciliterCountryCodes_onceToken != -1)
    dispatch_once(&_BloodGlucoseMilligramsPerDeciliterCountryCodes_onceToken, &__block_literal_global_12_1);
  v3 = objc_msgSend((id)_BloodGlucoseMilligramsPerDeciliterCountryCodes_milligramsPerDeciliterCountryCodes, "containsObject:", v2);

  if (v3)
  {
    +[HKUnit unitFromString:](HKUnit, "unitFromString:", CFSTR("mg/dL"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_6:
    _HKBloodGlucoseMillimolesPerLiterUnit();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v4;
}

id _HKGenerateDefaultUnitForQuantityType(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  v3 = HKSupportedUnitPreferencesVersion((uint64_t)v1, v2);
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "defaultUnitForLocale:version:", v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t _HKGenerateDefaultUnitForQuantityTypeWithVersion(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "defaultUnitForLocale:version:", a3, a2);
}

id _HKUnitPreferencesVersionToUnitDictionaryForQuantityType(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  id *v10;
  void **v11;
  void *v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    v8 = (void *)MEMORY[0x1E0C9AA70];
    goto LABEL_9;
  }
  if ((unint64_t)(objc_msgSend(v3, "code") - 9) > 1)
  {
    v13 = &unk_1E3896598;
    v14 = v4;
    v9 = (void *)MEMORY[0x1E0C99D80];
    v10 = &v14;
    v11 = &v13;
LABEL_8:
    objc_msgSend(v9, "dictionaryWithObjects:forKeys:count:", v10, v11, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  +[HKUnit largeCalorieUnit](HKUnit, "largeCalorieUnit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if (!v6)
  {
    v15 = &unk_1E3896598;
    v16 = v4;
    v9 = (void *)MEMORY[0x1E0C99D80];
    v10 = &v16;
    v11 = &v15;
    goto LABEL_8;
  }
  v17[0] = &unk_1E3896580;
  v17[1] = &unk_1E3896598;
  v18[0] = v4;
  +[HKUnit kilocalorieUnit](HKUnit, "kilocalorieUnit");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_9:
  return v8;
}

void sub_19A2C7704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19A2C7C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__56(uint64_t a1)
{

}

void sub_19A2C80C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_19A2C8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_19A2C989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__57(uint64_t a1)
{

}

uint64_t HKRaceRouteClusterStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3E3110);
}

id HKRaceRouteClusterStoreServerInterface()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE4101E8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_fetchRaceRouteClustersForActivityType_completion_, 0, 1);
  return v0;
}

BOOL HKCharacteristicTypeAcceptsValue(uint64_t a1, unint64_t a2)
{
  _BOOL4 v2;
  _BOOL4 v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a2 < 7;
  v3 = a2 < 3;
  v4 = a2 - 1 < 2;
  if (a1 != 177)
    v4 = 0;
  if (a1 != 103)
    v3 = v4;
  if (a1 != 88)
    v2 = v3;
  v5 = a2 < 4;
  v6 = a2 < 9;
  if (a1 != 66)
    v6 = 0;
  if (a1 != 64)
    v5 = v6;
  if (a1 <= 87)
    return v5;
  else
    return v2;
}

void sub_19A2C9E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A2CB338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__58(uint64_t a1)
{

}

BOOL HKAuthorizationStatusAllowsSharing(uint64_t a1)
{
  return (unint64_t)(a1 - 101) < 2;
}

BOOL HKAuthorizationStatusAllowsReading(uint64_t a1)
{
  return ((a1 - 101) & 0xFFFFFFFFFFFFFFFDLL) == 0;
}

__CFString *HKAuthorizationStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 100) > 4)
    return 0;
  else
    return off_1E37F7018[a1 - 100];
}

const __CFString *HKSelectedAuthorizationModeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("anchor-limited");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("unlimited");
}

uint64_t HKInternalAuthorizationStatusMake(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 103;
  if (!a2)
    v2 = 104;
  v3 = 101;
  if (!a2)
    v3 = 102;
  if (a1)
    return v3;
  else
    return v2;
}

BOOL HKCodableLocationCoordinateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v23 = &OBJC_IVAR___HKCodableLocationCoordinate__latitude;
LABEL_32:
        *(_QWORD *)(a1 + *v23) = v20;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 24) |= 2u;
    v21 = *v3;
    v22 = *(_QWORD *)(a2 + v21);
    if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
      *(_QWORD *)(a2 + v21) = v22 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v20 = 0;
    }
    v23 = &OBJC_IVAR___HKCodableLocationCoordinate__longitude;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_19A2CE6B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CE8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CE950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id getNRPairedDeviceRegistryClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNRPairedDeviceRegistryClass(void)::softClass;
  v7 = getNRPairedDeviceRegistryClass(void)::softClass;
  if (!getNRPairedDeviceRegistryClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZL30getNRPairedDeviceRegistryClassv_block_invoke;
    v3[3] = &unk_1E37F7130;
    v3[4] = &v4;
    ___ZL30getNRPairedDeviceRegistryClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_19A2CEA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2CEB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CEC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CED70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CEE00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void getNRWatchOSVersionForRemoteDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v1 = a1;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getNRWatchOSVersionForRemoteDeviceSymbolLoc(void)::ptr;
  v9 = getNRWatchOSVersionForRemoteDeviceSymbolLoc(void)::ptr;
  if (!getNRWatchOSVersionForRemoteDeviceSymbolLoc(void)::ptr)
  {
    v3 = NanoRegistryLibrary();
    v2 = dlsym(v3, "NRWatchOSVersionForRemoteDevice");
    v7[3] = (uint64_t)v2;
    getNRWatchOSVersionForRemoteDeviceSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(id))v2)(v1);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NRProductVersion getNRWatchOSVersionForRemoteDevice(NRDevice *__strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_HKBehavior.mm"), 46, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19A2CEF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void getNRVersionIsGreaterThanOrEqual(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getNRVersionIsGreaterThanOrEqualSymbolLoc(void)::ptr;
  v9 = getNRVersionIsGreaterThanOrEqualSymbolLoc(void)::ptr;
  if (!getNRVersionIsGreaterThanOrEqualSymbolLoc(void)::ptr)
  {
    v3 = NanoRegistryLibrary();
    v2 = dlsym(v3, "NRVersionIsGreaterThanOrEqual");
    v7[3] = (uint64_t)v2;
    getNRVersionIsGreaterThanOrEqualSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t, uint64_t))v2)(a1, 327680);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL getNRVersionIsGreaterThanOrEqual(NRProductVersion, NRProductVersion)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_HKBehavior.mm"), 47, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_19A2CF044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2CF198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CF400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void sub_19A2CF5B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CF7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2CF890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF8D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CF978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19A2CF9D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFA20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFAF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFB40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFC60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2CFCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19A2CFDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2CFF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_19A2D047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D05FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D07C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D0878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D0A00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2D0B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D0CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D0ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_19A2D1108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2D117C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2D133C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D14C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D1694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D1850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D1A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D1C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D1E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  os_unfair_lock_s *v17;
  char *v19;
  uint64_t v20;

  os_unfair_lock_unlock(v17);
  v19 = a17;
  if (a17 == &a14)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  os_unfair_lock_s *v13;
  char *v15;
  uint64_t v16;

  os_unfair_lock_unlock(v13);
  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_19A2D21EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D22C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D238C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19A2D2618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19A2D2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19A2D2814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19A2D28D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_19A2D29B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2AD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2D2C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A2D2C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A2D2CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL30getNRPairedDeviceRegistryClassv_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  NanoRegistryLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("NRPairedDeviceRegistry");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getNRPairedDeviceRegistryClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass()_block_invoke");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKBehavior.mm"), 44, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

    __break(1u);
  }
}

void sub_19A2D3194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *NanoRegistryLibrary(void)
{
  void *v0;
  void *v2;
  void *v3;

  if (!NanoRegistryLibraryCore(char **)::frameworkLibrary)
    NanoRegistryLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)NanoRegistryLibraryCore(char **)::frameworkLibrary;
  if (!NanoRegistryLibraryCore(char **)::frameworkLibrary)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary()");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKBehavior.mm"), 43, CFSTR("%s"), 0);

    __break(1u);
    free(v2);
  }
  return v0;
}

void sub_19A2D32B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _Unwind_Exception *exception_object)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::~__func(uint64_t a1)
{

  return a1;
}

void std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::~__func(uint64_t a1)
{

  JUMPOUT(0x19AEC7398);
}

uint64_t std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::__clone()
{
  return 0;
}

void *std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *result;

  *a2 = &unk_1E37F7178;
  result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<_HKFeatureFlags *({block_pointer} {__strong})(void),std::allocator<_HKFeatureFlags *({block_pointer} {__strong})(void)>,_HKFeatureFlags * ()(void)>::target_type()
{
}

CFIndex ___ZZ41___HKBehavior_runningInStoreDemoModeF201_ENK3__2clEv_block_invoke()
{
  uint64_t v0;
  CFIndex AppIntegerValue;
  Boolean keyExistsAndHasValidFormat;

  v0 = 0x7FFFFFFFFFFFFFFFLL;
  if (CFPreferencesGetAppBooleanValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"), 0))
  {
    keyExistsAndHasValidFormat = 0;
    AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("FProgramNumber"), CFSTR("com.apple.demo-settings"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      return AppIntegerValue;
  }
  return v0;
}

uint64_t HKLogCameraAccess()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v3[16];

  ct_green_tea_logger_create();
  getCTGreenTeaOsLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0 && os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_19A0E6000, v1, OS_LOG_TYPE_INFO, "Accessing camera", v3, 2u);
  }

  return ct_green_tea_logger_destroy();
}

uint64_t HKLogPhotoAccess()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v3[16];

  ct_green_tea_logger_create();
  getCTGreenTeaOsLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0 && os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_19A0E6000, v1, OS_LOG_TYPE_INFO, "Accessing photos", v3, 2u);
  }

  return ct_green_tea_logger_destroy();
}

uint64_t HKLogPhotoTransmitted()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v3[16];

  ct_green_tea_logger_create();
  getCTGreenTeaOsLogHandle();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0 && os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_19A0E6000, v1, OS_LOG_TYPE_INFO, "Transmitting photos", v3, 2u);
  }

  return ct_green_tea_logger_destroy();
}

void sub_19A2D792C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19A2D7AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKHealthWrapCodableValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_41:
          *(_DWORD *)(a1 + 32) = v19;
          continue;
        case 2u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_30;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
LABEL_30:
          v26 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        case 4u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
          goto LABEL_43;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          v29 = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        v29 = 0;
LABEL_45:
      *(_QWORD *)(a1 + 8) = v29;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *HKStringFromListUserDomainType(unint64_t a1)
{
  if (a1 < 4)
    return off_1E37F78D0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t _IsWatchLowPowerModeEnabledWithCarouselDomainAccessor(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  id v6;

  v1 = a1;
  +[_HKBehavior sharedBehavior](_HKBehavior, "sharedBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isAppleWatch");

  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isLowPowerModeEnabled");

  }
  else if (v1)
  {
    v6 = (id)objc_msgSend(v1, "synchronize");
    v5 = objc_msgSend(v1, "BOOLForKey:", CFSTR("LowPowerMode"));
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t _IsValidQuantityForTypeWithIdentifier(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  +[HKObjectType quantityTypeForIdentifier:](HKObjectType, "quantityTypeForIdentifier:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_unit");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "isCompatibleWithUnit:", v5);
  return v6;
}

const __CFString *NSStringFromHKElectrocardiogramSupportedState(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("Unknown");
  else
    return off_1E37F7B90[a1];
}

uint64_t HKElectrocardiogramIsAvailableForGeolocatedCountryCode(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  HKElectrocardiogramSupportedCountries();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", v1);

  return v3;
}

id HKElectrocardiogramSupportedCountries()
{
  if (HKElectrocardiogramSupportedCountries_onceToken != -1)
    dispatch_once(&HKElectrocardiogramSupportedCountries_onceToken, &__block_literal_global_133);
  return (id)HKElectrocardiogramSupportedCountries_electrocardiogramSupportedCountryCodes;
}

uint64_t HKShouldAdvertiseElectrocardiogramBeforeGeolocationInLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t IsAvailableForGeolocatedCountryCode;

  v1 = a1;
  objc_msgSend(v1, "countryCode");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "countryCode");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    IsAvailableForGeolocatedCountryCode = HKElectrocardiogramIsAvailableForGeolocatedCountryCode(v3);

  }
  else
  {
    IsAvailableForGeolocatedCountryCode = 0;
  }

  return IsAvailableForGeolocatedCountryCode;
}

uint64_t HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndWatchOSVersion(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 IsGreaterThanOrEqual_0;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1;
  if (HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndWatchOSVersion_onceToken != -1)
    dispatch_once(&HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndWatchOSVersion_onceToken, &__block_literal_global_14);
  HKMinimumSupportedOSVersionForCurrentVersion((void *)HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndWatchOSVersion_cinnamonSupportedCountries, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "unsignedIntValue");
    v9 = v8;
    IsGreaterThanOrEqual_0 = getNRVersionIsGreaterThanOrEqual_0(a2, v8);
    v11 = 3;
    if (a3)
      v12 = 3;
    else
      v12 = 1;
    if ((((_DWORD)a2 != -1) & IsGreaterThanOrEqual_0) != 0)
      v11 = 1;
    if (v9 == (_DWORD)a2)
      v13 = v12;
    else
      v13 = v11;
  }
  else
  {
    v13 = 2;
  }

  return v13;
}

id HKMinimumSupportedOSVersionForCurrentVersion(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v12[4];
  id v13;
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v3 = a1;
  v4 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x3032000000;
  v20 = __Block_byref_object_copy__59;
  v21 = __Block_byref_object_dispose__59;
  v22 = 0;
  objc_msgSend(v3, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "sortedArrayUsingSelector:", sel_compare_);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __HKMinimumSupportedOSVersionForCurrentVersion_block_invoke;
  v12[3] = &unk_1E37F7B58;
  v7 = v3;
  v13 = v7;
  v8 = v6;
  v14 = v8;
  v9 = v4;
  v15 = v9;
  v16 = &v17;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v12);
  v10 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_19A2E6ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndIOSVersion(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 IsGreaterThanOrEqual_0;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1;
  if (HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndIOSVersion_onceToken != -1)
    dispatch_once(&HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndIOSVersion_onceToken, &__block_literal_global_30_4);
  HKMinimumSupportedOSVersionForCurrentVersion((void *)HKElectrocardiogramSupportedStatedForGeolocatedCountryCodeAndIOSVersion_cinnamonSupportedCountries, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "unsignedIntValue");
    v9 = v8;
    IsGreaterThanOrEqual_0 = getNRVersionIsGreaterThanOrEqual_0(a2, v8);
    v11 = 3;
    if (a3)
      v12 = 3;
    else
      v12 = 1;
    if ((((_DWORD)a2 != -1) & IsGreaterThanOrEqual_0) != 0)
      v11 = 1;
    if (v9 == (_DWORD)a2)
      v13 = v12;
    else
      v13 = v11;
  }
  else
  {
    v13 = 2;
  }

  return v13;
}

const __CFString *NSStringFromHKAtrialFibrillationDetectionSupportedState(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1E37F7BC0[a1];
}

uint64_t HKAtrialFibrillationDetectionSupportedStateForGeolocatedCountryCodeAndWatchOSVersion(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 IsGreaterThanOrEqual_0;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a1;
  if (HKAtrialFibrillationDetectionSupportedStateForGeolocatedCountryCodeAndWatchOSVersion_onceToken != -1)
    dispatch_once(&HKAtrialFibrillationDetectionSupportedStateForGeolocatedCountryCodeAndWatchOSVersion_onceToken, &__block_literal_global_41_0);
  HKMinimumSupportedOSVersionForCurrentVersion((void *)HKAtrialFibrillationDetectionSupportedStateForGeolocatedCountryCodeAndWatchOSVersion_antimonySupportedCountries, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    v8 = objc_msgSend(v6, "unsignedIntValue");
    v9 = v8;
    IsGreaterThanOrEqual_0 = getNRVersionIsGreaterThanOrEqual_0(a2, v8);
    v11 = 3;
    if (a3)
      v12 = 3;
    else
      v12 = 1;
    if ((((_DWORD)a2 != -1) & IsGreaterThanOrEqual_0) != 0)
      v11 = 1;
    if (v9 == (_DWORD)a2)
      v13 = v12;
    else
      v13 = v11;
  }
  else
  {
    v13 = 2;
  }

  return v13;
}

uint64_t HKAtrialFibrillationDetectionIsAvailableForGeolocatedCountryCode(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  HKAtrialFibrillationDetectionSupportedCountries();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsObject:", v1);

  return v3;
}

id HKAtrialFibrillationDetectionSupportedCountries()
{
  if (HKAtrialFibrillationDetectionSupportedCountries_onceToken != -1)
    dispatch_once(&HKAtrialFibrillationDetectionSupportedCountries_onceToken, &__block_literal_global_47_1);
  return (id)HKAtrialFibrillationDetectionSupportedCountries_atrialFibrillationDetectionSupportedCountryCodes;
}

uint64_t HKShouldAdvertiseAtrialFibrillationDetectionBeforeGeolocationInLocale(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t IsAvailableForGeolocatedCountryCode;

  v1 = a1;
  objc_msgSend(v1, "countryCode");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(v1, "countryCode");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    IsAvailableForGeolocatedCountryCode = HKAtrialFibrillationDetectionIsAvailableForGeolocatedCountryCode(v3);

  }
  else
  {
    IsAvailableForGeolocatedCountryCode = 0;
  }

  return IsAvailableForGeolocatedCountryCode;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__59(uint64_t a1)
{

}

uint64_t getNRVersionIsGreaterThanOrEqual_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v4 = (uint64_t (*)(uint64_t, uint64_t))getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr_0;
  v10 = getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr_0;
  if (!getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr_0)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __getNRVersionIsGreaterThanOrEqualSymbolLoc_block_invoke;
    v6[3] = &unk_1E37E8690;
    v6[4] = &v7;
    __getNRVersionIsGreaterThanOrEqualSymbolLoc_block_invoke((uint64_t)v6);
    v4 = (uint64_t (*)(uint64_t, uint64_t))v8[3];
  }
  _Block_object_dispose(&v7, 8);
  if (!v4)
    getNRVersionIsGreaterThanOrEqual_cold_1_0();
  return v4(a1, a2);
}

void sub_19A2E8BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNRVersionIsGreaterThanOrEqualSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!NanoRegistryLibraryCore_frameworkLibrary_7)
  {
    v4 = xmmword_1E37F7B78;
    v5 = 0;
    NanoRegistryLibraryCore_frameworkLibrary_7 = _sl_dlopen();
  }
  if (!NanoRegistryLibraryCore_frameworkLibrary_7)
    __getNRVersionIsGreaterThanOrEqualSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)NanoRegistryLibraryCore_frameworkLibrary_7, "NRVersionIsGreaterThanOrEqual");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getNRVersionIsGreaterThanOrEqualSymbolLoc_ptr_0 = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__60(uint64_t a1)
{

}

__CFString *HKStringForDeviceType(unint64_t a1)
{
  if (a1 < 4)
    return off_1E37F7E80[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown(%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_19A2F4B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void *HKAppleSleepingBreathingDisturbancesClassificationForQuantity(void *a1)
{
  id v1;
  void *v2;
  double v3;
  void *v4;
  void *v5;

  v1 = a1;
  +[HKUnit countUnit](HKUnit, "countUnit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "isCompatibleWithUnit:", v2))
  {
    objc_msgSend(v1, "doubleValueForUnit:", v2);
    v4 = &unk_1E3896850;
    if (v3 < 11.0)
      v4 = &unk_1E3896868;
    if (v3 >= 0.0)
      v5 = v4;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id HKAppleSleepingBreathingDisturbancesMinimumQuantityForClassification(void *a1)
{
  void *v1;
  void *v2;
  double v3;
  void *v4;

  if (a1 == (void *)1)
  {
    +[HKUnit countUnit](HKUnit, "countUnit");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = 11.0;
  }
  else
  {
    v1 = a1;
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKQuantity * _Nonnull HKAppleSleepingBreathingDisturbancesMinimumQuantityForClassification(HKAppleSleepingBreathingDisturbancesClassification)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKAppleSleepingBreathingDisturbancesClassification.m"), 47, CFSTR("Invalid classification: %ld"), v1);

      goto LABEL_7;
    }
    +[HKUnit countUnit](HKUnit, "countUnit");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = 0.0;
  }
  +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", v2, v3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_7:

  return v1;
}

void sub_19A2F6964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__61(uint64_t a1)
{

}

void sub_19A2F7384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19A2F7F8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19A2F8204(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_15(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x26u);
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return objc_opt_class();
}

uint64_t HKProfileStoreClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3E2B08);
}

id HKProfileStoreServerInterface()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE410308);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_remote_getAllProfilesWithCompletion_, 0, 1);
  return v0;
}

uint64_t HKSleepScheduleWeekdayFromWeekdayComponent(uint64_t a1)
{
  void *v3;
  void *v4;

  if ((unint64_t)(a1 - 1) < 7)
    return qword_19A44D2D0[a1 - 1];
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKSleepScheduleWeekdays HKSleepScheduleWeekdayFromWeekdayComponent(NSInteger)");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKSleepSchedule.m"), 44, CFSTR("Invalid weekday component: %ld"), a1);

  return 0;
}

uint64_t NSWeekdayComponentFromHKSleepScheduleWeekday(uint64_t a1)
{
  uint64_t result;
  void *v3;
  void *v4;
  uint64_t v5;

  result = 1;
  switch(a1)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger NSWeekdayComponentFromHKSleepScheduleWeekday(HKSleepScheduleWeekdays)");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKSleepSchedule.m"), 52, CFSTR("None does not have an equivalent weekday component"));

      result = 0;
      break;
    case 1:
      result = 2;
      break;
    case 2:
      result = 3;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      result = 4;
      break;
    case 8:
      result = 5;
      break;
    default:
      v5 = 7;
      if (a1 != 32)
        v5 = 1;
      if (a1 == 16)
        result = 6;
      else
        result = v5;
      break;
  }
  return result;
}

BOOL HKSleepScheduleWeekdaysIsSingleDay(uint64_t a1)
{
  return (a1 & (a1 - 1)) == 0;
}

id HKSleepScheduleWeekdayArrayFromWeekdays(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if (!a1)
  {
    v4 = &unk_1E3896898;
LABEL_18:
    objc_msgSend(v3, "addObject:", v4);
    return v3;
  }
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", &unk_1E38968B0);
    if ((a1 & 2) == 0)
    {
LABEL_4:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", &unk_1E38968C8);
  if ((a1 & 4) == 0)
  {
LABEL_5:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  objc_msgSend(v3, "addObject:", &unk_1E38968E0);
  if ((a1 & 8) == 0)
  {
LABEL_6:
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  objc_msgSend(v3, "addObject:", &unk_1E38968F8);
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", &unk_1E3896910);
  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0)
      return v3;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", &unk_1E3896928);
  if ((a1 & 0x40) != 0)
  {
LABEL_17:
    v4 = &unk_1E3896940;
    goto LABEL_18;
  }
  return v3;
}

__CFString *NSStringFromHKSleepScheduleWeekdays(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  const __CFString *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return CFSTR("-");
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  HKSleepScheduleWeekdayArrayFromWeekdays(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "integerValue", (_QWORD)v12);
        if (v8 > 15)
        {
          switch(v8)
          {
            case 16:
              v9 = CFSTR("F");
              break;
            case 32:
              v9 = CFSTR("S");
              break;
            case 64:
              v9 = CFSTR("U");
              break;
            default:
LABEL_19:
              v9 = &stru_1E37FD4C0;
              break;
          }
        }
        else
        {
          v9 = CFSTR("M");
          switch(v8)
          {
            case 0:
              v9 = CFSTR("-");
              break;
            case 1:
              break;
            case 2:
              v9 = CFSTR("T");
              break;
            case 4:
              v9 = CFSTR("W");
              break;
            case 8:
              v9 = CFSTR("R");
              break;
            default:
              goto LABEL_19;
          }
        }
        objc_msgSend(v2, "appendString:", v9);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return (__CFString *)v10;
}

uint64_t HKSleepScheduleWeekdaysFromNSString(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = 0;
  if (objc_msgSend(v1, "length"))
  {
    v3 = 0;
    do
    {
      objc_msgSend(v1, "substringWithRange:", v3, 1);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      v5 = 1;
      if ((objc_msgSend(v4, "isEqualToString:", CFSTR("M")) & 1) == 0)
      {
        if ((objc_msgSend(v4, "isEqualToString:", CFSTR("T")) & 1) != 0)
        {
          v5 = 2;
        }
        else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("W")) & 1) != 0)
        {
          v5 = 4;
        }
        else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("R")) & 1) != 0)
        {
          v5 = 8;
        }
        else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("F")) & 1) != 0)
        {
          v5 = 16;
        }
        else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("S")) & 1) != 0)
        {
          v5 = 32;
        }
        else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("U")) & 1) != 0)
        {
          v5 = 64;
        }
        else
        {
          if ((objc_msgSend(v4, "isEqualToString:", CFSTR("-")) & 1) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKSleepScheduleWeekdays _WeekdayFromCharacterString(NSString * _Nonnull __strong)");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("HKSleepSchedule.m"), 146, CFSTR("Invalid character string: %@"), v4);

          }
          v5 = 0;
        }
      }

      v2 |= v5;
      ++v3;
    }
    while (v3 < objc_msgSend(v1, "length"));
  }

  return v2;
}

uint64_t HKSleepScheduleWeekdaysMake(unsigned int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;

  v7 = a1;
  if (a2)
    v7 = a1 | 2;
  if (a3)
    v7 |= 4uLL;
  if (a4)
    v7 |= 8uLL;
  if (a5)
    v7 |= 0x10uLL;
  if (a6)
    v7 |= 0x20uLL;
  if (a7)
    return v7 | 0x40;
  else
    return v7;
}

void sub_19A2FEEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_16(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

id OUTLINED_FUNCTION_3_8(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return objc_opt_class();
}

uint64_t _IsValueValidForDevicePropertyKeyPath(void *a1, uint64_t a2)
{
  id v3;
  char isKindOfClass;
  void *v5;
  uint64_t v6;

  v3 = a1;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    v5 = (void *)MEMORY[0x1E0CB35C8];
    v6 = objc_opt_class();
    objc_msgSend(v5, "hk_assignError:code:format:", a2, 3, CFSTR("Expected value of type %@, received %@"), v6, objc_opt_class());
  }

  return isKindOfClass & 1;
}

uint64_t _IsMetadataValueValidForOperatorType(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v5 = a2;
  v6 = v5;
  if (a1 != 10)
  {
    if (v5)
    {
      if ((objc_msgSend(MEMORY[0x1E0C99D80], "hk_acceptsMetadataValue:allowPrivateMetadata:", v5, 0) & 1) != 0)
        goto LABEL_9;
      v7 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(MEMORY[0x1E0C99D80], "hk_acceptedPublicMetadataValueClasses");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "hk_assignError:code:format:", a3, 3, CFSTR("Expected constant value of type from set %@ received %@"), v8, objc_opt_class());
    }
    else
    {
      if (a1 == 5)
        goto LABEL_9;
      v10 = (void *)MEMORY[0x1E0CB35C8];
      HKStringFromPredicateOperatorType(5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "hk_assignError:code:format:", a3, 3, CFSTR("Nil constant value only supported with operator type /'%@/'"), v8, v12);
    }

    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "hk_assignError:code:format:", a3, 3, CFSTR("Expected value of class NSArray or NSSet, received %@"), objc_opt_class());
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
  }
LABEL_9:
  v9 = 1;
LABEL_13:

  return v9;
}

id _HKPrivateElectrocardiogramSymptomsGetList(__int16 a1)
{
  id v2;
  void *v3;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 0x80) != 0)
    objc_msgSend(v2, "addObject:", &unk_1E3896958);
  if ((a1 & 0x200) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E3896970);
  if ((a1 & 8) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E3896988);
  if ((a1 & 0x100) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E38969A0);
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E38969B8);
  if ((a1 & 0x10) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E38969D0);
  if ((a1 & 4) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E38969E8);
  if ((a1 & 0x40) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E3896A00);
  if ((a1 & 1) != 0)
    objc_msgSend(v3, "addObject:", &unk_1E3896A18);
  return v3;
}

void sub_19A30308C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A303150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_19A30320C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A3032C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A30339C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A30344C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A3036FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19A303858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A3038D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_19A303B7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_19A303C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A303DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_19A304074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_19A30436C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A3047AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A3048D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_19A304A98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_19A304BD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL _HKECGCPrivateClassificationIsValid(unint64_t a1)
{
  return a1 < 0xB;
}

BOOL _HKECGCPublicClassificationIsValid(unint64_t a1)
{
  return a1 < 7 || a1 == 100;
}

BOOL _HKECGSymptomsStatusIsValid(unint64_t a1)
{
  return a1 < 3;
}

id _HKAllECGSymptomTypes()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierFainting"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v0;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierDizziness"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v10[1] = v1;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierRapidPoundingOrFlutteringHeartbeat"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10[2] = v2;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierChestTightnessOrPain"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10[3] = v3;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierShortnessOfBreath"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v10[4] = v4;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierFatigue"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10[5] = v5;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierSkippedHeartbeat"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10[6] = v6;
  +[HKObjectType categoryTypeForIdentifier:](HKCategoryType, "categoryTypeForIdentifier:", CFSTR("HKCategoryTypeIdentifierECGOtherSymptom"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[7] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 8);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_19A304E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

id _HKCategoryTypesForSymptomsBitmask(__int16 a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  _HKAllECGSymptomTypes();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        v8 = objc_msgSend(v7, "code", (_QWORD)v10);
        switch(v8)
        {
          case 201:
            if ((a1 & 0x80) != 0)
              goto LABEL_23;
            break;
          case 202:
            if ((a1 & 0x200) != 0)
              goto LABEL_23;
            break;
          case 203:
          case 208:
          case 209:
          case 210:
            continue;
          case 204:
            if ((a1 & 0x100) != 0)
              goto LABEL_23;
            break;
          case 205:
            if ((a1 & 2) != 0)
              goto LABEL_23;
            break;
          case 206:
            if ((a1 & 0x10) != 0)
              goto LABEL_23;
            break;
          case 207:
            if ((a1 & 4) != 0)
              goto LABEL_23;
            break;
          case 211:
            if ((a1 & 0x40) != 0)
              goto LABEL_23;
            break;
          default:
            if (v8 == 167 && (a1 & 8) != 0)
LABEL_23:
              objc_msgSend(v2, "addObject:", v7);
            break;
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }

  return v2;
}

void sub_19A305018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t HKElectrocardiogramSymptomsStatusFromPrivateElectrocardiogramSymptoms(uint64_t a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 != 1)
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t HKStaticSyncControlClientInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE3C4D48);
}

uint64_t HKStaticSyncControlServerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE410428);
}

uint64_t HKMCPregnancyStateQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

__n128 HKMCPregnancyStateQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *v1 = v4;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKMCPregnancyStateQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKMCPregnancyStateQueryDescriptor.init(debugIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  a3[1] = a2;
  a3[2] = -1;
  *a3 = result;
  return result;
}

uint64_t HKMCPregnancyStateQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_19A306218(0, &qword_1EE396AA8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A305DB8;
  return sub_19A3535A4();
}

uint64_t sub_19A305DB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A305E1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_19A305E28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_19A305E34()
{
  unint64_t result;

  result = qword_1EE399220;
  if (!qword_1EE399220)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE399220);
  }
  return result;
}

uint64_t sub_19A305E88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_19A306218(0, &qword_1EE396AA8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v2 = v1;
  v2[1] = sub_19A305F14;
  return sub_19A3535A4();
}

uint64_t sub_19A305F14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A305F78()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A305F8C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A305F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  sub_19A306218(0, &qword_1EE396AA8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v5 = v4;
  v5[1] = sub_19A306028;
  return sub_19A3535A4();
}

uint64_t sub_19A306028()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A30608C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A3060F4()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A30610C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A30616C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 24) = v1;
  sub_19A305E34();
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKMCPregnancyStateQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_19A306218(0, &qword_1EE396AC0, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return sub_19A353598();
}

void sub_19A306218(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v8 = sub_19A308AE4(255, a3);
    v9 = sub_19A305E34();
    v10 = a5(a1, v8, v9, MEMORY[0x1E0DEDB38]);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_19A306290()
{
  uint64_t v0;

  sub_19A306218(0, &qword_1EE396AC0, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  return sub_19A3088C8(v0);
}

uint64_t HKMCPregnancyStateQueryDescriptor.results(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  _QWORD v15[8];

  v15[1] = a2;
  sub_19A306218(0, qword_1EE396AC8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v15 - v7;
  v10 = *v2;
  v9 = v2[1];
  v11 = v2[2];
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v10;
  v12[3] = v9;
  v12[4] = v11;
  v15[4] = sub_19A306618;
  v15[5] = v12;
  v15[6] = a1;
  sub_19A308AE4(0, (unint64_t *)&unk_1EE396AB0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DF0A50], v5);
  swift_bridgeObjectRetain();
  v13 = a1;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A306428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  _QWORD aBlock[6];

  sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)aBlock - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - v10, a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, v11, v8);
  v14 = objc_allocWithZone((Class)HKMCPregnancyStateQuery);
  aBlock[4] = sub_19A308C00;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A3078D8;
  aBlock[3] = &block_descriptor;
  v15 = _Block_copy(aBlock);
  v16 = objc_msgSend(v14, sel_initWithUpdateHandler_, v15);
  _Block_release(v15);
  swift_release();
  if (a3)
  {
    swift_bridgeObjectRetain();
    v17 = (void *)sub_19A353400();
  }
  else
  {
    v17 = 0;
  }
  objc_msgSend(v16, sel_setDebugIdentifier_, v17);

  objc_msgSend(v16, sel_setQualityOfService_, a4);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_19A3065F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_19A306618(uint64_t a1)
{
  uint64_t *v1;

  return sub_19A306428(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_19A306624(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;

  sub_19A306218(0, &qword_1EE396FE0, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v14 - v8;
  if (a2)
  {
    v15 = a2;
    sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    v10 = a2;
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v12 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      v14 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v12 = v15;
    }
    v15 = v12;
    v13 = a3;
    sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    return sub_19A353580();
  }
}

uint64_t sub_19A3067BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  _QWORD v15[8];

  v15[1] = a2;
  sub_19A306218(0, qword_1EE396AC8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)v15 - v7;
  v10 = *v2;
  v9 = v2[1];
  v11 = v2[2];
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v10;
  v12[3] = v9;
  v12[4] = v11;
  v15[4] = sub_19A308F38;
  v15[5] = v12;
  v15[6] = a1;
  sub_19A308AE4(0, (unint64_t *)&unk_1EE396AB0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DF0A50], v5);
  swift_bridgeObjectRetain();
  v13 = a1;
  sub_19A3535C8();

  return swift_release();
}

void sub_19A306904(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = (void *)a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = v5;
  sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v7 = a4;
  v8 = v5;
  sub_19A35355C();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_19A3069D0(uint64_t a1)
{
  uint64_t v1;

  sub_19A306904(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19A3069DC()
{
  return MEMORY[0x1E0DEDB38];
}

uint64_t sub_19A3069E8()
{
  return sub_19A306A54(&qword_1EE396AE0, type metadata accessor for HKMCPregnancyStateQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKMCPregnancyStateQueryDescriptor.Results.Iterator);
}

uint64_t type metadata accessor for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE396C00);
}

uint64_t sub_19A306A28()
{
  return sub_19A306A54(&qword_1EE396AE8, type metadata accessor for HKMCPregnancyStateQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKMCPregnancyStateQueryDescriptor.Results);
}

uint64_t sub_19A306A54(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x19AEC7FB0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE396B70);
}

uint64_t sub_19A306AA8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t destroy for HKQueryAttributes()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s9HealthKit17HKQueryAttributesVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for HKQueryAttributes(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for HKQueryAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKQueryAttributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKQueryAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKMCPregnancyStateQueryDescriptor()
{
  return &type metadata for HKMCPregnancyStateQueryDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306D70(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t destroy for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_19A306DD8(a1, a2, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithCopy for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306E38(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithCopy for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306EA8(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithTake for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306F18(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithTake for HKMCPregnancyStateQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306F88(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t getEnumTagSinglePayload for HKMCPregnancyStateQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A306D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t)&unk_1EE396B10, (uint64_t)type metadata accessor for HKQueryAsyncStream, (uint64_t (*)(_QWORD, uint64_t, void *, __objc2_class **))sub_19A308A74);
}

uint64_t storeEnumTagSinglePayload for HKMCPregnancyStateQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A306D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t)&unk_1EE396B10, (uint64_t)type metadata accessor for HKQueryAsyncStream, (uint64_t (*)(_QWORD, uint64_t, void *, __objc2_class **, uint64_t))sub_19A308A74);
}

void sub_19A306D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A3070F4(a1, a2, a3, &qword_1EE396AC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeBufferWithCopyOfBuffer for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306D70(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306D70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A306218(0, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1, a2, v7);
}

uint64_t destroy for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  return sub_19A306DD8(a1, a2, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306DD8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v5;

  sub_19A306218(0, a3, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t initializeWithCopy for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306E38(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306E38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A306218(0, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  return a1;
}

uint64_t assignWithCopy for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306EA8(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306EA8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A306218(0, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  return a1;
}

uint64_t initializeWithTake for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306F18(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306F18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A306218(0, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  return a1;
}

uint64_t assignWithTake for HKMCPregnancyStateQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A306F88(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A306F88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A306218(0, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKMCPregnancyStateQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A306FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t)&qword_1EE396AA8, (uint64_t)MEMORY[0x1E0DF0AB0], (uint64_t (*)(_QWORD, uint64_t, void *, __objc2_class **))sub_19A306218);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, void *, __objc2_class **))
{
  uint64_t v8;

  v8 = a6(0, a4, &unk_1EE396AB0, off_1E37E4D58);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1, a2, v8);
}

uint64_t storeEnumTagSinglePayload for HKMCPregnancyStateQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30706C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t)&qword_1EE396AA8, (uint64_t)MEMORY[0x1E0DF0AB0], (uint64_t (*)(_QWORD, uint64_t, void *, __objc2_class **, uint64_t))sub_19A306218);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD, uint64_t, void *, __objc2_class **, uint64_t))
{
  uint64_t v9;

  v9 = a7(0, a5, &unk_1EE396AB0, off_1E37E4D58, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, a2, a2, v9);
}

void sub_19A3070E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A3070F4(a1, a2, a3, &qword_1EE396AA8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

void sub_19A3070F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  unint64_t v5;

  sub_19A306218(319, a4, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for HKWorkoutEffortRelationshipQueryOptions(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396C98);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CA0);
}

void type metadata accessor for HKVerifiableClinicalRecordSourceType(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CA8);
}

void type metadata accessor for HKVerifiableClinicalRecordCredentialType(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CB0);
}

void type metadata accessor for HKStatisticsOptions(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CB8);
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CC0);
}

void type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CC8);
}

void type metadata accessor for HKFeatureAvailabilityContext(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CD0);
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CD8);
}

void type metadata accessor for HKCategoryValueVaginalBleeding(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CE0);
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CE8);
}

void type metadata accessor for HKCategoryValueSeverity(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CF0);
}

void type metadata accessor for HKCategoryValueProgesteroneTestResult(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396CF8);
}

void type metadata accessor for HKCategoryValuePresence(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D00);
}

void type metadata accessor for HKCategoryValuePregnancyTestResult(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D08);
}

void type metadata accessor for HKCategoryValueOvulationTestResult(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D10);
}

void type metadata accessor for HKCategoryValueMenstrualFlow(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D18);
}

void type metadata accessor for HKCategoryValueLowCardioFitnessEvent(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D20);
}

void type metadata accessor for HKCategoryValueHeadphoneAudioExposureEvent(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D28);
}

void type metadata accessor for HKCategoryValueEnvironmentalAudioExposureEvent(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D30);
}

void type metadata accessor for HKCategoryValueContraceptive(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D38);
}

void type metadata accessor for HKCategoryValueCervicalMucusQuality(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D40);
}

void type metadata accessor for HKCategoryValueAppleWalkingSteadinessEvent(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D48);
}

void type metadata accessor for HKCategoryValueAppleStandHour(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D50);
}

void type metadata accessor for HKCategoryValueAppetiteChanges(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D58);
}

void type metadata accessor for HKCategoryValue(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D60);
}

void type metadata accessor for HKAppleWalkingSteadinessClassification(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D68);
}

void type metadata accessor for HKAppleSleepingBreathingDisturbancesClassification(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D70);
}

void type metadata accessor for __HKStateOfMindDomain(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D78);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_19A3073C4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_19A3073E4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D80);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D88);
}

void type metadata accessor for HKActivityMoveMode(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D90);
}

void type metadata accessor for HKWheelchairUse(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396D98);
}

void type metadata accessor for HKFitzpatrickSkinType(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396DA0);
}

void type metadata accessor for HKBiologicalSex(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396DA8);
}

void type metadata accessor for HKBloodType(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396DB0);
}

void sub_19A307498(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  sub_19A3074BC(a1, a2, a3, a4, (uint64_t)&unk_1E37F8D38, &qword_1EE396FD0);
}

void sub_19A3074BC(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4, uint64_t a5, unint64_t *a6)
{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v8 = (void *)a2();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a4;
  *(_QWORD *)(v9 + 24) = v8;
  sub_19A308B1C(0, a6);
  v10 = a4;
  v11 = v8;
  sub_19A35355C();
  objc_msgSend(v10, sel_executeQuery_, v11);

}

void sub_19A307580(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = (void *)a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = v5;
  sub_19A3089F0(0, &qword_1EE396FB8, &qword_1EE396FC0, (unint64_t *)&qword_1EE396FC8, 0x1E0C9E3B8);
  v7 = a4;
  v8 = v5;
  sub_19A35355C();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_19A30764C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  sub_19A3074BC(a1, a2, a3, a4, (uint64_t)&unk_1E37F8CE8, &qword_1EE396FB0);
}

void sub_19A307670(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = (void *)a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = v5;
  sub_19A3089F0(0, &qword_1EE396F98, &qword_1EE396FA0, (unint64_t *)&qword_1EE396FA8, (uint64_t)off_1E37E46C8);
  v7 = a4;
  v8 = v5;
  sub_19A35355C();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_19A30773C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = (void *)a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = v5;
  sub_19A306218(0, &qword_1EE396F88, &qword_1EE396F90, (uint64_t)off_1E37E4AA0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v7 = a4;
  v8 = v5;
  sub_19A35355C();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_19A307808(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  sub_19A3074BC(a1, a2, a3, a4, (uint64_t)&unk_1E37F8C70, &qword_1EE396F80);
}

void sub_19A30782C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4)
{
  void *v5;
  uint64_t v6;
  id v7;
  id v8;

  v5 = (void *)a2();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = v5;
  sub_19A308930();
  v7 = a4;
  v8 = v5;
  sub_19A35355C();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_19A3078D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

uint64_t sub_19A307960()
{
  sub_19A306A54(&qword_1EE397040, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EEB4);
  return sub_19A353AFC();
}

uint64_t sub_19A3079A0()
{
  sub_19A306A54(&qword_1EE397040, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EEB4);
  return sub_19A353AF0();
}

uint64_t sub_19A3079E4()
{
  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  return sub_19A352E60();
}

id sub_19A307A24()
{
  id *v0;

  return *v0;
}

uint64_t sub_19A307A2C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_19A307A34(uint64_t a1, uint64_t a2)
{
  return sub_19A3081FC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_19A307A54()
{
  return sub_19A353B44();
}

uint64_t sub_19A307A7C()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A307AC0()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A307B04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_19A353430();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_19A307B2C(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_19A353418();
  *a2 = 0;
  return result;
}

uint64_t sub_19A307BA0(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_19A353424();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_19A307C1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_19A353430();
  v2 = sub_19A353400();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_19A307C5C()
{
  return sub_19A353430();
}

uint64_t sub_19A307C6C()
{
  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  return sub_19A352EA8();
}

uint64_t sub_19A307CAC()
{
  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  return sub_19A352E78();
}

uint64_t sub_19A307CEC(void *a1)
{
  id v2;

  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  v2 = a1;
  return sub_19A352E6C();
}

uint64_t sub_19A307D50()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_19A353754();

  return v2;
}

uint64_t sub_19A307D84()
{
  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  return sub_19A352E9C();
}

uint64_t sub_19A307DD4()
{
  sub_19A353B38();
  sub_19A35337C();
  return sub_19A353B68();
}

_QWORD *sub_19A307E30@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_19A307E40(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_19A307E4C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19A307E60()
{
  sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
  return sub_19A352E84();
}

uint64_t sub_19A307EB8()
{
  sub_19A306A54(&qword_1EE396ED0, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordCredentialType, (uint64_t)&unk_19A44E190);
  sub_19A306A54(&qword_1EE396ED8, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordCredentialType, (uint64_t)&unk_19A44E130);
  return sub_19A3539F4();
}

uint64_t sub_19A307F3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_19A353400();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_19A307F80()
{
  sub_19A306A54(&qword_1EE396EC0, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordSourceType, (uint64_t)&unk_19A44E2E8);
  sub_19A306A54(&qword_1EE396EC8, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordSourceType, (uint64_t)&unk_19A44E288);
  return sub_19A3539F4();
}

uint64_t sub_19A308004()
{
  sub_19A306A54(&qword_1EE396F00, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DDC0);
  sub_19A306A54(&qword_1EE396F08, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD68);
  return sub_19A3539F4();
}

uint64_t sub_19A308088()
{
  return sub_19A306A54(&qword_1EE396DB8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD30);
}

uint64_t sub_19A3080B4()
{
  return sub_19A306A54(&qword_1EE396DC0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD08);
}

uint64_t sub_19A3080E0()
{
  sub_19A306A54(&qword_1EE396EF0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DF00);
  sub_19A306A54(&qword_1EE396EF8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DEA8);
  return sub_19A3539F4();
}

uint64_t sub_19A308164()
{
  sub_19A306A54(&qword_1EE396EE0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44E040);
  sub_19A306A54(&qword_1EE396EE8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44DFE8);
  return sub_19A3539F4();
}

uint64_t sub_19A3081F0(uint64_t a1, uint64_t a2)
{
  return sub_19A3081FC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_19A3081FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_19A353430();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_19A308238()
{
  sub_19A353430();
  sub_19A353448();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19A308278()
{
  uint64_t v0;

  sub_19A353430();
  sub_19A353B38();
  sub_19A353448();
  v0 = sub_19A353B68();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_19A3082EC()
{
  return sub_19A306A54(&qword_1EE396DC8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD98);
}

uint64_t sub_19A308318()
{
  return sub_19A306A54(&qword_1EE396DD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DE70);
}

uint64_t sub_19A308344()
{
  return sub_19A306A54(&qword_1EE396DD8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DE48);
}

uint64_t sub_19A308370()
{
  return sub_19A306A54(&qword_1EE396DE0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DED8);
}

uint64_t sub_19A30839C()
{
  return sub_19A306A54(&qword_1EE396DE8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44DFB0);
}

uint64_t sub_19A3083C8()
{
  return sub_19A306A54(&qword_1EE396DF0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44DF88);
}

uint64_t sub_19A3083F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_19A353430();
  v2 = v1;
  if (v0 == sub_19A353430() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_19A353AC0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_19A30847C()
{
  return sub_19A306A54(&qword_1EE396DF8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44E018);
}

uint64_t sub_19A3084A8()
{
  return sub_19A306A54(&qword_1EE396E00, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordCredentialType, (uint64_t)&unk_19A44E0F4);
}

uint64_t sub_19A3084D4()
{
  return sub_19A306A54(&qword_1EE396E08, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordCredentialType, (uint64_t)&unk_19A44E0C8);
}

uint64_t sub_19A308500()
{
  return sub_19A306A54(&qword_1EE396E10, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordCredentialType, (uint64_t)&unk_19A44E164);
}

uint64_t sub_19A30852C()
{
  return sub_19A306A54(&qword_1EE396E18, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordSourceType, (uint64_t)&unk_19A44E24C);
}

uint64_t sub_19A308558()
{
  return sub_19A306A54(&qword_1EE396E20, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordSourceType, (uint64_t)&unk_19A44E220);
}

uint64_t sub_19A308584()
{
  return sub_19A306A54(&qword_1EE396E28, (uint64_t (*)(uint64_t))type metadata accessor for HKVerifiableClinicalRecordSourceType, (uint64_t)&unk_19A44E2BC);
}

uint64_t sub_19A3085B0()
{
  return sub_19A306A54(&qword_1EE396E30, (uint64_t (*)(uint64_t))type metadata accessor for QualityOfService, (uint64_t)&unk_19A44E3C8);
}

uint64_t sub_19A3085DC()
{
  return sub_19A306A54(&qword_1EE396E38, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueVaginalBleeding, (uint64_t)&unk_19A44DCDC);
}

uint64_t sub_19A308608()
{
  return sub_19A306A54(&qword_1EE396E40, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_19A44DCB0);
}

uint64_t sub_19A308634()
{
  return sub_19A306A54(&qword_1EE396E48, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSeverity, (uint64_t)&unk_19A44DC84);
}

uint64_t sub_19A308660()
{
  return sub_19A306A54(&qword_1EE396E50, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueProgesteroneTestResult, (uint64_t)&unk_19A44DC58);
}

uint64_t sub_19A30868C()
{
  return sub_19A306A54(&qword_1EE396E58, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePresence, (uint64_t)&unk_19A44DC2C);
}

uint64_t sub_19A3086B8()
{
  return sub_19A306A54(&qword_1EE396E60, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePregnancyTestResult, (uint64_t)&unk_19A44DC00);
}

uint64_t sub_19A3086E4()
{
  return sub_19A306A54(&qword_1EE396E68, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueOvulationTestResult, (uint64_t)&unk_19A44DBD4);
}

uint64_t sub_19A308710()
{
  return sub_19A306A54(&qword_1EE396E70, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueMenstrualFlow, (uint64_t)&unk_19A44DBA8);
}

uint64_t sub_19A30873C()
{
  return sub_19A306A54(&qword_1EE396E78, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueLowCardioFitnessEvent, (uint64_t)&unk_19A44DB7C);
}

uint64_t sub_19A308768()
{
  return sub_19A306A54(&qword_1EE396E80, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueHeadphoneAudioExposureEvent, (uint64_t)&unk_19A44DB50);
}

uint64_t sub_19A308794()
{
  return sub_19A306A54(&qword_1EE396E88, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueEnvironmentalAudioExposureEvent, (uint64_t)&unk_19A44DB24);
}

uint64_t sub_19A3087C0()
{
  return sub_19A306A54(&qword_1EE396E90, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueContraceptive, (uint64_t)&unk_19A44DAF8);
}

uint64_t sub_19A3087EC()
{
  return sub_19A306A54(&qword_1EE396E98, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCervicalMucusQuality, (uint64_t)&unk_19A44DACC);
}

uint64_t sub_19A308818()
{
  return sub_19A306A54(&qword_1EE396EA0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleWalkingSteadinessEvent, (uint64_t)&unk_19A44DAA0);
}

uint64_t sub_19A308844()
{
  return sub_19A306A54(&qword_1EE396EA8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleStandHour, (uint64_t)&unk_19A44DA74);
}

uint64_t sub_19A308870()
{
  return sub_19A306A54(&qword_1EE396EB0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppetiteChanges, (uint64_t)&unk_19A44DA48);
}

uint64_t sub_19A30889C()
{
  return sub_19A306A54(&qword_1EE396EB8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValue, (uint64_t)&unk_19A44DA1C);
}

uint64_t sub_19A3088C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKMCPregnancyStateQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A308904()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_19A308930()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE396F10)
  {
    sub_19A30899C();
    sub_19A305E34();
    v0 = sub_19A35358C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE396F10);
  }
}

void sub_19A30899C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE396F18)
  {
    type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(255);
    v0 = sub_19A3534FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE396F18);
  }
}

void sub_19A3089F0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_19A308A74(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_19A305E34();
    v6 = sub_19A35358C();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_19A308A74(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_19A308AE4(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

id sub_19A308AD4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_stopQuery_, *(_QWORD *)(v0 + 24));
}

uint64_t sub_19A308AE4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_19A308B1C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_19A305E34();
    v3 = sub_19A35358C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_19A308B80()
{
  uint64_t v0;
  uint64_t v1;

  sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19A308C00(uint64_t a1, void *a2, void *a3)
{
  sub_19A306218(0, &qword_1EE396FD8, (unint64_t *)&unk_1EE396AB0, (uint64_t)off_1E37E4D58, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  return sub_19A306624(a1, a2, a3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void type metadata accessor for HKError(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE397020);
}

void type metadata accessor for Label(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396FF0);
}

void type metadata accessor for Association(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE396FF8);
}

void type metadata accessor for __HKStateOfMindDomainCategory(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE397000);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE397008);
}

void type metadata accessor for Answer(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE397010);
}

void _s3__C6AnswerOMa_0(uint64_t a1)
{
  sub_19A308D18(a1, &qword_1EE397018);
}

void sub_19A308D18(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_19A308D5C()
{
  return sub_19A306A54(&qword_1EE397028, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EDCC);
}

uint64_t sub_19A308D88()
{
  return sub_19A306A54(&qword_1EE397030, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EDF8);
}

uint64_t sub_19A308DB4()
{
  return sub_19A306A54(&qword_1EE397038, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_19A44EEF8);
}

uint64_t sub_19A308DE0()
{
  return sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
}

uint64_t sub_19A308E0C()
{
  return sub_19A306A54(&qword_1EE397040, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EEB4);
}

uint64_t sub_19A308E38()
{
  return sub_19A306A54(&qword_1EE397048, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EE80);
}

uint64_t sub_19A308E64()
{
  return sub_19A306A54(&qword_1EE397050, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EE3C);
}

uint64_t sub_19A308E90()
{
  return sub_19A306A54(&qword_1EE397058, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_19A44EF60);
}

uint64_t sub_19A308EBC()
{
  return sub_19A306A54(&qword_1EE397060, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_19A44EF24);
}

unint64_t sub_19A308EEC()
{
  unint64_t result;

  result = qword_1EE397068;
  if (!qword_1EE397068)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EE397068);
  }
  return result;
}

uint64_t HKSampleQueryDescriptor.predicates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19A308F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Descriptor;
  uint64_t v5;

  Descriptor = type metadata accessor for HKSampleQueryDescriptor(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = swift_bridgeObjectRetain();
  return HKSampleQueryDescriptor.predicates.setter(v5, Descriptor);
}

uint64_t HKSampleQueryDescriptor.predicates.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  *v2 = a1;
  return sub_19A309000(a2, v5, v6, v7);
}

uint64_t sub_19A309000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19A309058(a1, a2, a3, a4);
}

uint64_t sub_19A309058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  type metadata accessor for HKSamplePredicate(255, *(_QWORD *)(a1 + 16), a3, a4);
  v4 = sub_19A3534FC();
  MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v4);
  result = sub_19A35367C();
  if ((result & 1) != 0)
    __break(1u);
  return result;
}

uint64_t *(*HKSampleQueryDescriptor.predicates.modify(_QWORD *a1, uint64_t a2))(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = v2;
  return sub_19A3090D8;
}

uint64_t *sub_19A3090D8(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 1) == 0)
    return (uint64_t *)sub_19A309000(*result, a2, a3, a4);
  return result;
}

uint64_t HKSampleQueryDescriptor.sortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKSampleQueryDescriptor.sortDescriptors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*HKSampleQueryDescriptor.sortDescriptors.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKSampleQueryDescriptor.limit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*HKSampleQueryDescriptor.limit.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

__n128 HKSampleQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  v1[2] = v4;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKSampleQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleQueryDescriptor.includeAutomaticTimeZones.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t HKSampleQueryDescriptor.includeAutomaticTimeZones.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*HKSampleQueryDescriptor.includeAutomaticTimeZones.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleQueryDescriptor.init(predicates:sortDescriptors:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10;
  uint64_t Descriptor;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = a4 & 1;
  Descriptor = type metadata accessor for HKSampleQueryDescriptor(0, a5, a3, a4);
  result = sub_19A309058(Descriptor, v12, v13, v14);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = -1;
  *(_BYTE *)(a6 + 56) = 0;
  return result;
}

uint64_t type metadata accessor for HKSampleQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKSampleQueryDescriptor);
}

uint64_t HKSampleQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = a2;
  v4 = v2[1];
  *(_OWORD *)(v3 + 16) = *v2;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = v2[2];
  *(_OWORD *)(v3 + 57) = *(_OWORD *)((char *)v2 + 41);
  return swift_task_switch();
}

uint64_t sub_19A3092C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v0[11];
  v1 = v0[12];
  v3 = (_QWORD *)swift_task_alloc();
  v0[13] = v3;
  v3[2] = *(_QWORD *)(v1 + 16);
  v3[3] = v0 + 2;
  v3[4] = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EE397138 + dword_1EE397138);
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = v4;
  sub_19A3534FC();
  *v4 = v0;
  v4[1] = sub_19A30937C;
  return v6((uint64_t)(v0 + 10), 0, 0, (uint64_t)sub_19A309714, (uint64_t)v3);
}

uint64_t sub_19A30937C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A3093E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 80));
}

uint64_t sub_19A3093F8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_19A30942C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t (*v24)(uint64_t, void *, uint64_t, void *);
  _QWORD v25[4];
  __int128 aBlock;
  uint64_t (*v27)(uint64_t, void *, uint64_t, void *);
  void *v28;
  uint64_t (*v29)(uint64_t, void *, void *);
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  void *v33;

  *(_QWORD *)&aBlock = *(_QWORD *)(a2 + 8);
  v25[2] = a4;
  sub_19A352D4C();
  v8 = sub_19A3534FC();
  v9 = (char *)sub_19A308AE4(0, &qword_1EE3971E0);
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v8);
  sub_19A332214((void (*)(char *, char *))sub_19A309E70, (uint64_t)v25, v8, v9, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  swift_bridgeObjectRelease();
  sub_19A308AE4(0, (unint64_t *)&qword_1EE3971E8);
  sub_19A3111F4(*(_QWORD *)a2, a4, v12, v13);
  if (*(_BYTE *)(a2 + 24))
    v14 = 0;
  else
    v14 = *(_QWORD *)(a2 + 16);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a4;
  *(_QWORD *)(v15 + 24) = a3;
  *(_QWORD *)(v15 + 32) = a1;
  v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 56) = v16;
  *(_OWORD *)(v15 + 72) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v15 + 81) = *(_OWORD *)(a2 + 41);
  v17 = objc_allocWithZone((Class)HKSampleQuery);
  v18 = a3;
  sub_19A309ED8(a2);
  v19 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v20 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v29 = sub_19A309EC8;
  v30 = v15;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v27 = sub_19A309DD0;
  v28 = &block_descriptor_0;
  v21 = _Block_copy(&aBlock);
  v22 = objc_msgSend(v17, sel_initWithQueryDescriptors_limit_sortDescriptors_resultsHandler_, v19, v14, v20, v21);

  _Block_release(v21);
  swift_release();
  objc_msgSend(v22, sel_setIncludeAutomaticTimeZones_, *(unsigned __int8 *)(a2 + 56));
  aBlock = *(_OWORD *)(a2 + 32);
  v27 = *(uint64_t (**)(uint64_t, void *, uint64_t, void *))(a2 + 48);
  sub_19A309F34((uint64_t)&aBlock, (uint64_t)v31);
  sub_19A309F34((uint64_t)v31, (uint64_t)&v32);
  v23 = v33;
  if (v33)
  {
    sub_19A309FF4((uint64_t)&aBlock);
    v23 = (void *)sub_19A353400();
  }
  v24 = v27;
  objc_msgSend(v22, sel_setDebugIdentifier_, v23);

  objc_msgSend(v22, sel_setQualityOfService_, v24);
  sub_19A309FCC((uint64_t)&aBlock);
  objc_msgSend(v18, sel_executeQuery_, v22);

}

void sub_19A309714(uint64_t a1)
{
  uint64_t v1;

  sub_19A30942C(a1, *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_19A309720@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v4 = sub_19A352D4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v9 - v6;
  sub_19A308AE4(0, &qword_1EE3971E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  result = sub_19A3536B8();
  *a2 = result;
  return result;
}

uint64_t sub_19A3097E0(uint64_t a1, void *a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v8;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    v14 = a2;
    v8 = sub_19A3534FC();
    sub_19A305E34();
    swift_bridgeObjectRetain();
    return sub_19A325398((uint64_t)&v14, a5, v8);
  }
  else
  {
    if (a3)
    {
      v10 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v10 = v14;
    }
    v14 = v10;
    v11 = a3;
    v12 = sub_19A3534FC();
    v13 = sub_19A305E34();
    return sub_19A325334((uint64_t)&v14, a5, v12, v13);
  }
}

uint64_t sub_19A30990C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A309974()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_19A3099E0;
  v2 = swift_continuation_init();
  sub_19A305E34();
  v1(v2);
  return swift_continuation_await();
}

uint64_t sub_19A3099E0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_19A309A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = sub_19A309ABC;
  *(_QWORD *)(v7 + 88) = a2;
  *(_QWORD *)(v7 + 96) = a3;
  *(_OWORD *)(v7 + 57) = *(__int128 *)((char *)v3 + 41);
  v8 = v3[2];
  v9 = *v3;
  *(_OWORD *)(v7 + 32) = v3[1];
  *(_OWORD *)(v7 + 48) = v8;
  *(_OWORD *)(v7 + 16) = v9;
  return swift_task_switch();
}

uint64_t sub_19A309ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_19A309B18@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_19A309B28()
{
  return 8;
}

_QWORD *sub_19A309B34(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_19A309B40()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for HKVerifiableClinicalRecordQueryDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_19A309B78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19A309BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19A309C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_19A309CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t sub_19A309D38(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19A309D80(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_19A309DD0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A308AE4(0, &qword_1EE3971F8);
    v5 = sub_19A3534CC();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19A309E70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_19A309720(a1, a2);
}

uint64_t sub_19A309E8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19A309EC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  return sub_19A3097E0(a1, a2, a3, *(id *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_19A309ED8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_19A309F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A309F78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_19A309F78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE3971F0)
  {
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE3971F0);
  }
}

uint64_t sub_19A309FCC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19A309FF4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_19A30A01C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE396FE8;
  if (!qword_1EE396FE8)
  {
    type metadata accessor for HKError(255);
    result = MEMORY[0x19AEC7FB0](&unk_19A44EF9C, v1);
    atomic_store(result, (unint64_t *)&qword_1EE396FE8);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x19AEC7F50](a1, v6, a5);
}

id HKStatisticsCollectionQueryDescriptor.predicate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)(v1 + 8);
  v5 = *(id *)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  v3 = v2;
  return v5;
}

void HKStatisticsCollectionQueryDescriptor.predicate.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(void **)(v1 + 8);

  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.options.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKStatisticsCollectionQueryDescriptor.options.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.options.modify())()
{
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.anchorDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 24);
  v4 = sub_19A352FD4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HKStatisticsCollectionQueryDescriptor(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE3972F0);
}

uint64_t HKStatisticsCollectionQueryDescriptor.anchorDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 24);
  v4 = sub_19A352FD4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.anchorDate.modify())()
{
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.intervalComponents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 28);
  v4 = sub_19A352D40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t HKStatisticsCollectionQueryDescriptor.intervalComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 28);
  v4 = sub_19A352D40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.intervalComponents.modify())()
{
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.CacheSettings.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.CacheSettings.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.CacheSettings.identifier.modify())()
{
  return nullsub_1;
}

HealthKit::HKStatisticsCollectionQueryDescriptor::CacheSettings::Mode_optional __swiftcall HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (HealthKit::HKStatisticsCollectionQueryDescriptor::CacheSettings::Mode_optional)rawValue;
}

uint64_t HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL sub_19A30A338(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_19A30A350()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A30A394()
{
  return sub_19A353B44();
}

uint64_t sub_19A30A3BC()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

_QWORD *sub_19A30A3FC@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_19A30A41C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void HKStatisticsCollectionQueryDescriptor.CacheSettings.mode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *HKStatisticsCollectionQueryDescriptor.CacheSettings.mode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.CacheSettings.mode.modify())()
{
  return nullsub_1;
}

HealthKit::HKStatisticsCollectionQueryDescriptor::CacheSettings __swiftcall HKStatisticsCollectionQueryDescriptor.CacheSettings.init(identifier:mode:)(Swift::String identifier, HealthKit::HKStatisticsCollectionQueryDescriptor::CacheSettings::Mode mode)
{
  uint64_t v2;
  char v3;
  HealthKit::HKStatisticsCollectionQueryDescriptor::CacheSettings result;

  v3 = *(_BYTE *)mode;
  *(Swift::String *)v2 = identifier;
  *(_BYTE *)(v2 + 16) = v3;
  result.identifier = identifier;
  result.mode = mode;
  return result;
}

uint64_t HKStatisticsCollectionQueryDescriptor.cacheSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 32));
  v5 = *v3;
  v4 = v3[1];
  LOBYTE(v3) = *((_BYTE *)v3 + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = (_BYTE)v3;
  return swift_bridgeObjectRetain();
}

uint64_t HKStatisticsCollectionQueryDescriptor.cacheSettings.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 16) = v4;
  return result;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.cacheSettings.modify())()
{
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return sub_19A30B600(v1 + *(int *)(Descriptor + 36), a1, (uint64_t (*)(_QWORD))sub_19A30A548);
}

void sub_19A30A548()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397200)
  {
    sub_19A352CB0();
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397200);
  }
}

uint64_t HKStatisticsCollectionQueryDescriptor.dateInterval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 36);
  return sub_19A30A5CC(a1, v3);
}

uint64_t sub_19A30A5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30A548();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.dateInterval.modify())()
{
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 40);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
  return swift_bridgeObjectRetain();
}

__n128 HKStatisticsCollectionQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 *v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) + 40));
  swift_bridgeObjectRelease();
  result = v5;
  *v3 = v5;
  v3[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKStatisticsCollectionQueryDescriptor.queryAttributes.modify())()
{
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  return nullsub_1;
}

uint64_t HKStatisticsCollectionQueryDescriptor.init(predicate:options:anchorDate:intervalComponents:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int *Descriptor;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v9 = *a1;
  v10 = a1[1];
  Descriptor = (int *)type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v12 = (char *)a5 + Descriptor[8];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v13 = (char *)a5 + Descriptor[9];
  v14 = sub_19A352CB0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (_QWORD *)((char *)a5 + Descriptor[10]);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = -1;
  *a5 = v9;
  a5[1] = v10;
  a5[2] = a2;
  v16 = (char *)a5 + Descriptor[6];
  v17 = sub_19A352FD4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  v18 = (char *)a5 + Descriptor[7];
  v19 = sub_19A352D40();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a4, v19);
}

void sub_19A30A7E4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *Descriptor;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  sub_19A30A548();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Descriptor = (int *)type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v7 = v1 + Descriptor[10];
  v8 = *(_QWORD *)(v7 + 16);
  if (*(_QWORD *)(v7 + 8))
  {
    swift_bridgeObjectRetain();
    v9 = (void *)sub_19A353400();
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(a1, sel_setDebugIdentifier_, v9);

  objc_msgSend(a1, sel_setQualityOfService_, v8);
  swift_bridgeObjectRelease();
  v10 = v1 + Descriptor[8];
  if (*(_QWORD *)(v10 + 8))
  {
    v11 = *(_BYTE *)(v10 + 16) & 1;
    v12 = objc_allocWithZone((Class)HKStatisticsCollectionCacheSettings);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_19A353400();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v12, sel_initWithIdentifier_mode_, v13, v11);

    objc_msgSend(a1, sel_setCacheSettings_, v14);
  }
  sub_19A30B600(v1 + Descriptor[9], (uint64_t)v5, (uint64_t (*)(_QWORD))sub_19A30A548);
  v15 = sub_19A352CB0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v5, 1, v15) != 1)
  {
    v17 = (void *)sub_19A352C5C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v15);
  }
  objc_msgSend(a1, sel_setDateInterval_, v17);

}

uint64_t HKStatisticsCollectionQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch();
}

uint64_t sub_19A30A9DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[11];
  v1 = v0[12];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AA40;
  v3 = swift_continuation_init();
  sub_19A30AAB0(v3, v1, v2);
  return swift_continuation_await();
}

uint64_t sub_19A30AA40()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 80));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_19A30AAB0(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD aBlock[6];

  v5 = *(void **)a2;
  objc_opt_self();
  v6 = swift_dynamicCastObjCClassUnconditional();
  v7 = *(void **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v9 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
  v10 = v7;
  v11 = v5;
  v12 = (void *)sub_19A352F5C();
  v13 = (void *)sub_19A352CE0();
  v14 = objc_msgSend(v9, sel_initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents_, v6, v10, v8, v12, v13);

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a1;
  aBlock[4] = sub_19A30D560;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A3078D8;
  aBlock[3] = &block_descriptor_32;
  v16 = _Block_copy(aBlock);
  v17 = a3;
  swift_release();
  objc_msgSend(v14, sel_setInitialResultsHandler_, v16);
  _Block_release(v16);
  sub_19A30A7E4(v14);
  objc_msgSend(v17, sel_executeQuery_, v14);

}

uint64_t sub_19A30AC60(uint64_t a1, void *a2, void *a3, id a4, uint64_t a5)
{
  id v8;
  void *v10;
  _QWORD *v11;
  id v12;
  void *v13;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    v8 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v10 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v10 = v13;
    }
    sub_19A305E34();
    swift_allocError();
    *v11 = v10;
    v12 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A30AD80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_19A30AD9C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[12];
  v1 = v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AE00;
  v3 = swift_continuation_init();
  sub_19A30AAB0(v3, v1, v2);
  return swift_continuation_await();
}

uint64_t sub_19A30AE00()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    *(_QWORD *)(v1 + 112) = *(_QWORD *)(v1 + 80);
    return swift_task_switch();
  }
}

uint64_t sub_19A30AE80()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 88) = *(_QWORD *)(v0 + 112);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id HKStatisticsCollectionQueryDescriptor.Result.statisticsCollection.getter()
{
  id *v0;

  return *v0;
}

uint64_t HKStatisticsCollectionQueryDescriptor.Result.updatedStatistics.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKStatisticsCollectionQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A30D490(0, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30AF20;
  return sub_19A3535A4();
}

uint64_t sub_19A30AF20()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19A30AF68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A30D490(0, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30D568;
  return sub_19A3535A4();
}

uint64_t sub_19A30AFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  sub_19A30D490(0, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v5 = v4;
  v5[1] = sub_19A30B060;
  return sub_19A3535A4();
}

uint64_t sub_19A30B060()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  if (*(_QWORD *)(v2 + 24))
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A30B0F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD **)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A305E34();
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKStatisticsCollectionQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_19A30D490(0, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return sub_19A353598();
}

uint64_t sub_19A30B194()
{
  uint64_t v0;

  sub_19A30D490(0, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  return sub_19A30D2EC(v0);
}

uint64_t HKStatisticsCollectionQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t Descriptor;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  unint64_t v13;
  uint64_t v14;
  id v15;
  _BYTE v17[16];
  uint64_t (*v18)();
  uint64_t v19;
  void *v20;

  v2 = v1;
  sub_19A30D490(0, &qword_1EE397228, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v17[-v7];
  Descriptor = type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v10 = *(_QWORD *)(Descriptor - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](Descriptor);
  sub_19A30B600(v2, (uint64_t)&v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v12);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  sub_19A30B648((uint64_t)&v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], v14 + v13);
  v18 = sub_19A30B68C;
  v19 = v14;
  v20 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DF0A50], v5);
  v15 = a1;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A30B340(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t aBlock;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  v28 = a1;
  sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v27 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v26 - v5;
  v7 = *(void **)a2;
  objc_opt_self();
  v8 = swift_dynamicCastObjCClassUnconditional();
  v9 = *(void **)(a2 + 8);
  v26 = *(id *)(a2 + 16);
  type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v29 = a2;
  v10 = objc_allocWithZone((Class)HKStatisticsCollectionQuery);
  v11 = v9;
  v12 = v7;
  v13 = (void *)sub_19A352F5C();
  v14 = (void *)sub_19A352CE0();
  v26 = objc_msgSend(v10, sel_initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents_, v8, v11, v26, v13, v14);

  v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v17 = v27;
  v16 = v28;
  v15(v6, v28, v27);
  v18 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v19 = swift_allocObject();
  v20 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
  v20(v19 + v18, v6, v17);
  v34 = sub_19A30D32C;
  v35 = v19;
  aBlock = MEMORY[0x1E0C809B0];
  v31 = 1107296256;
  v32 = sub_19A3078D8;
  v33 = &block_descriptor_1;
  v21 = _Block_copy(&aBlock);
  swift_release();
  v22 = v26;
  objc_msgSend(v26, sel_setInitialResultsHandler_, v21);
  _Block_release(v21);
  v15(v6, v16, v17);
  v23 = swift_allocObject();
  v20(v23 + v18, v6, v17);
  v34 = sub_19A30D41C;
  v35 = v23;
  aBlock = MEMORY[0x1E0C809B0];
  v31 = 1107296256;
  v32 = sub_19A30B9EC;
  v33 = &block_descriptor_26;
  v24 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v22, sel_setStatisticsUpdateHandler_, v24);
  _Block_release(v24);
  sub_19A30A7E4(v22);
  return v22;
}

uint64_t sub_19A30B600(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_19A30B648(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Descriptor - 8) + 32))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_19A30B690(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  sub_19A30D490(0, &qword_1EE397468, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  if (a2)
  {
    v15 = a2;
    v16 = 0;
    sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    v10 = a2;
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v12 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      v17 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v12 = v15;
    }
    v15 = v12;
    v13 = a3;
    sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    return sub_19A353580();
  }
}

uint64_t sub_19A30B7F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;

  sub_19A30D490(0, &qword_1EE397468, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  if (a3)
  {
    if (a2)
    {
      sub_19A30D4F8(0, &qword_1EE397470, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_19A44F0A0;
      *(_QWORD *)(v12 + 32) = a2;
      v21 = (void *)v12;
      sub_19A3534E4();
      v13 = v21;
      v21 = a3;
      v22 = v13;
      sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
      v14 = a3;
      v15 = a2;
    }
    else
    {
      v21 = a3;
      v22 = 0;
      sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
      v19 = a3;
    }
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v16 = a4;
    if (!a4)
    {
      type metadata accessor for HKError(0);
      v23 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v16 = v21;
    }
    v21 = v16;
    v17 = a4;
    sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    return sub_19A353580();
  }
}

void sub_19A30B9EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  void (*v9)(id, void *, void *, void *);
  id v10;
  id v11;
  id v12;
  id v13;

  v9 = *(void (**)(id, void *, void *, void *))(a1 + 32);
  swift_retain();
  v13 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v9(v13, a3, a4, a5);
  swift_release();

}

uint64_t sub_19A30BA90(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  _BYTE v19[16];
  uint64_t (*v20)();
  uint64_t v21;
  void *v22;

  v4 = v2;
  sub_19A30D490(0, &qword_1EE397228, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = &v19[-v10];
  v12 = *(_QWORD *)(a2 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v9);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_19A30B600(v4, (uint64_t)v14, type metadata accessor for HKStatisticsCollectionQueryDescriptor);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = swift_allocObject();
  sub_19A30B648((uint64_t)v14, v16 + v15);
  v20 = sub_19A30B68C;
  v21 = v16;
  v22 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0DF0A50], v7);
  v17 = a1;
  sub_19A3535C8();

  return swift_release();
}

void sub_19A30BBF8(uint64_t a1)
{
  uint64_t v1;

  sub_19A307498(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_19A30BC08()
{
  unint64_t result;

  result = qword_1EE397230;
  if (!qword_1EE397230)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode, &type metadata for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode);
    atomic_store(result, (unint64_t *)&qword_1EE397230);
  }
  return result;
}

uint64_t sub_19A30BC4C()
{
  return sub_19A306A54(&qword_1EE397268, type metadata accessor for HKStatisticsCollectionQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKStatisticsCollectionQueryDescriptor.Results.Iterator);
}

uint64_t type metadata accessor for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397430);
}

uint64_t sub_19A30BC8C()
{
  return sub_19A306A54(&qword_1EE397270, type metadata accessor for HKStatisticsCollectionQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKStatisticsCollectionQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE3973A0);
}

char *initializeBufferWithCopyOfBuffer for HKStatisticsCollectionQueryDescriptor(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v10 = a3[6];
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    v13 = sub_19A352FD4();
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v4;
    v16 = v9;
    v14(v11, v12, v13);
    v17 = a3[7];
    v18 = &v7[v17];
    v19 = (uint64_t)a2 + v17;
    v20 = sub_19A352D40();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[8];
    v22 = a3[9];
    v23 = &v7[v21];
    v24 = (uint64_t)a2 + v21;
    v25 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    v23[16] = *(_BYTE *)(v24 + 16);
    v26 = &v7[v22];
    v27 = (char *)a2 + v22;
    v28 = sub_19A352CB0();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      sub_19A30A548();
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v32 = a3[10];
    v33 = &v7[v32];
    v34 = (char **)((char *)a2 + v32);
    v35 = v34[1];
    *(_QWORD *)v33 = *v34;
    *((_QWORD *)v33 + 1) = v35;
    *((_QWORD *)v33 + 2) = v34[2];
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for HKStatisticsCollectionQueryDescriptor(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a1 + a2[6];
  v5 = sub_19A352FD4();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[7];
  v7 = sub_19A352D40();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = (char *)a1 + a2[9];
  v9 = sub_19A352CB0();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HKStatisticsCollectionQueryDescriptor(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(const void *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_19A352FD4();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v14 = v7;
  v12(v9, v10, v11);
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = a2 + v15;
  v18 = sub_19A352D40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a3[9];
  v21 = (char *)a1 + v19;
  v22 = a2 + v19;
  v23 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = v23;
  v21[16] = *(_BYTE *)(v22 + 16);
  v24 = (char *)a1 + v20;
  v25 = (const void *)(a2 + v20);
  v26 = sub_19A352CB0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    sub_19A30A548();
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v30 = a3[10];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v31[2] = v32[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKStatisticsCollectionQueryDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_19A352D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(a2 + v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  v23 = a3[9];
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = sub_19A352CB0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    sub_19A30A548();
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_7:
  v32 = a3[10];
  v33 = (_QWORD *)(a1 + v32);
  v34 = a2 + v32;
  *v33 = *(_QWORD *)(a2 + v32);
  v33[1] = *(_QWORD *)(a2 + v32 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[2] = *(_QWORD *)(v34 + 16);
  return a1;
}

uint64_t initializeWithTake for HKStatisticsCollectionQueryDescriptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_19A352D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  v18 = (void *)(a1 + v15);
  v19 = (const void *)(a2 + v15);
  v20 = sub_19A352CB0();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_19A30A548();
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(v25 + 16);
  return a1;
}

uint64_t assignWithTake for HKStatisticsCollectionQueryDescriptor(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_19A352FD4();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_19A352D40();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(_QWORD *)((char *)a2 + v16 + 8);
  *(_QWORD *)v17 = *(_QWORD *)((char *)a2 + v16);
  *(_QWORD *)(v17 + 8) = v19;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v17 + 16) = v18[16];
  v20 = a3[9];
  v21 = (void *)(a1 + v20);
  v22 = (char *)a2 + v20;
  v23 = sub_19A352CB0();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_19A30A548();
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  v29 = a3[10];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  v30[2] = v31[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30C608(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_19A352FD4();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_19A352D40();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        sub_19A30A548();
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_19A30C6D8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_19A352FD4();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_19A352D40();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        sub_19A30A548();
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[9];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_19A30C798()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_19A352FD4();
  if (v0 <= 0x3F)
  {
    sub_19A352D40();
    if (v1 <= 0x3F)
    {
      sub_19A30A548();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_19A30C864(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKStatisticsCollectionQueryDescriptor.CacheSettings(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HKStatisticsCollectionQueryDescriptor.CacheSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.CacheSettings(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.CacheSettings(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKStatisticsCollectionQueryDescriptor.CacheSettings()
{
  return &type metadata for HKStatisticsCollectionQueryDescriptor.CacheSettings;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19A30CABC + 4 * byte_19A44F0B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19A30CAF0 + 4 * byte_19A44F0B0[v4]))();
}

uint64_t sub_19A30CAF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A30CAF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A30CB00);
  return result;
}

uint64_t sub_19A30CB0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A30CB14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19A30CB18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A30CB20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A30CB2C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_19A30CB34(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode()
{
  return &type metadata for HKStatisticsCollectionQueryDescriptor.CacheSettings.Mode;
}

_QWORD *initializeBufferWithCopyOfBuffer for HKStatisticsCollectionQueryDescriptor.Result(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for HKStatisticsCollectionQueryDescriptor.Result(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for HKStatisticsCollectionQueryDescriptor.Result(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for HKStatisticsCollectionQueryDescriptor.Result(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Result(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Result(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKStatisticsCollectionQueryDescriptor.Result()
{
  return &type metadata for HKStatisticsCollectionQueryDescriptor.Result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CE38(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t destroy for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_19A30CE90(a1, a2, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithCopy for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CEE0(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithCopy for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CF40(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithTake for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CFA0(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithTake for HKStatisticsCollectionQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30D000(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30CD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D4F8(0, &qword_1EE397340, (uint64_t)&type metadata for HKStatisticsCollectionQueryDescriptor.Result, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30CDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D4F8(0, &qword_1EE397340, (uint64_t)&type metadata for HKStatisticsCollectionQueryDescriptor.Result, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A30CE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A30D114(a1, a2, a3, &qword_1EE397220, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeBufferWithCopyOfBuffer for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CE38(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30CE38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A30D490(0, a4, a5);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1, a2, v7);
}

uint64_t destroy for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  return sub_19A30CE90(a1, a2, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30CE90(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v5;

  sub_19A30D490(0, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t initializeWithCopy for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CEE0(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30CEE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A30D490(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  return a1;
}

uint64_t assignWithCopy for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CF40(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30CF40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A30D490(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  return a1;
}

uint64_t initializeWithTake for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30CFA0(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30CFA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A30D490(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  return a1;
}

uint64_t assignWithTake for HKStatisticsCollectionQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A30D000(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A30D000(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A30D490(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30D058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D490(0, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKStatisticsCollectionQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30D0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D490(0, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A30D100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A30D114(a1, a2, a3, &qword_1EE397218, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

void sub_19A30D114(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v5;

  sub_19A30D490(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  int *Descriptor;
  uint64_t v2;
  id *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  Descriptor = (int *)type metadata accessor for HKStatisticsCollectionQueryDescriptor(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)Descriptor - 1) + 80);
  v3 = (id *)(v0 + ((v2 + 16) & ~v2));

  v4 = (char *)v3 + Descriptor[6];
  v5 = sub_19A352FD4();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)v3 + Descriptor[7];
  v7 = sub_19A352D40();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  v8 = (char *)v3 + Descriptor[9];
  v9 = sub_19A352CB0();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_19A30D2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HKStatisticsCollectionQueryDescriptor(0) - 8) + 80);
  return sub_19A30B340(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_19A30D2EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKStatisticsCollectionQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A30D32C(uint64_t a1, void *a2, void *a3)
{
  sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  return sub_19A30B690(a1, a2, a3);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;
  uint64_t v1;

  sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19A30D41C(uint64_t a1, void *a2, void *a3, void *a4)
{
  sub_19A30D490(0, &qword_1EE396FD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  return sub_19A30B7F8(a1, a2, a3, a4);
}

void sub_19A30D490(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A305E34();
    v7 = a3(a1, &type metadata for HKStatisticsCollectionQueryDescriptor.Result, v6, MEMORY[0x1E0DEDB38]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_19A30D4F8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_19A30D53C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A30D560(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  return sub_19A30AC60(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.recordTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.recordTypes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HKVerifiableClinicalRecordQueryDescriptor.recordTypes.modify())()
{
  return nullsub_1;
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.sourceTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.sourceTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*HKVerifiableClinicalRecordQueryDescriptor.sourceTypes.modify())()
{
  return nullsub_1;
}

void *HKVerifiableClinicalRecordQueryDescriptor.predicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void HKVerifiableClinicalRecordQueryDescriptor.predicate.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*HKVerifiableClinicalRecordQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 HKVerifiableClinicalRecordQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*HKVerifiableClinicalRecordQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.init(recordTypes:sourceTypes:predicate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  a4[4] = 0;
  a4[5] = -1;
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  return result;
}

uint64_t HKVerifiableClinicalRecordQueryDescriptor.result(for:)(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 136) = a1;
  v3 = v1[1];
  *(_OWORD *)(v2 + 80) = *v1;
  *(_OWORD *)(v2 + 96) = v3;
  *(_OWORD *)(v2 + 112) = v1[2];
  return swift_task_switch();
}

uint64_t sub_19A30D704()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A30D76C;
  v2 = swift_continuation_init();
  sub_19A30D7DC(v2, v0 + 10, v1);
  return swift_continuation_await();
}

uint64_t sub_19A30D76C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 128));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_19A30D7DC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t (*v26)(uint64_t, void *, uint64_t, void *);
  __int128 aBlock;
  uint64_t (*v29)(uint64_t, void *, uint64_t, void *);
  void *v30;
  uint64_t (*v31)(uint64_t, uint64_t, void *);
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v5 = a1;
  v6 = *a2;
  v34 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_19A314910(0, v7, 0);
    v8 = aBlock;
    v9 = v6 + 32;
    do
    {
      v10 = sub_19A353430();
      v12 = v11;
      *(_QWORD *)&aBlock = v8;
      v14 = *(_QWORD *)(v8 + 16);
      v13 = *(_QWORD *)(v8 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_19A314910(v13 > 1, v14 + 1, 1);
        v8 = aBlock;
      }
      *(_QWORD *)(v8 + 16) = v14 + 1;
      v15 = v8 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v10;
      *(_QWORD *)(v15 + 40) = v12;
      v9 += 8;
      --v7;
    }
    while (v7);
    sub_19A30DF70((uint64_t)&v34);
    v5 = a1;
  }
  v16 = (void *)a2[2];
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = v5;
  v18 = objc_allocWithZone((Class)HKVerifiableClinicalRecordQuery);
  v19 = v16;
  swift_bridgeObjectRetain();
  v20 = a3;
  v21 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  type metadata accessor for HKVerifiableClinicalRecordSourceType(0);
  v22 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v31 = sub_19A30DFBC;
  v32 = v17;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v29 = sub_19A30DEE0;
  v30 = &block_descriptor_2;
  v23 = _Block_copy(&aBlock);
  v24 = objc_msgSend(v18, sel_initWithRecordTypes_sourceTypes_predicate_resultsHandler_, v21, v22, v19, v23);

  _Block_release(v23);
  swift_release();
  aBlock = *(_OWORD *)(a2 + 3);
  v29 = (uint64_t (*)(uint64_t, void *, uint64_t, void *))a2[5];
  sub_19A309F34((uint64_t)&aBlock, (uint64_t)v33);
  sub_19A309F34((uint64_t)v33, (uint64_t)&v35);
  v25 = v36;
  if (v36)
  {
    sub_19A309FF4((uint64_t)&aBlock);
    v25 = (void *)sub_19A353400();
  }
  v26 = v29;
  objc_msgSend(v24, sel_setDebugIdentifier_, v25);

  objc_msgSend(v24, sel_setQualityOfService_, v26);
  sub_19A309FCC((uint64_t)&aBlock);
  objc_msgSend(v20, sel_executeQuery_, v24);

}

uint64_t sub_19A30DA78(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v9 = v12;
    }
    sub_19A305E34();
    swift_allocError();
    *v10 = v9;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A30DB74(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = a2;
  v4 = v2[1];
  *(_OWORD *)(v3 + 80) = *v2;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 112) = v2[2];
  return swift_task_switch();
}

uint64_t sub_19A30DB9C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)v0[18];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A30DC04;
  v2 = swift_continuation_init();
  sub_19A30D7DC(v2, v0 + 10, v1);
  return swift_continuation_await();
}

uint64_t sub_19A30DC04()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    *(_QWORD *)(v1 + 152) = *(_QWORD *)(v1 + 128);
    return swift_task_switch();
  }
}

uint64_t sub_19A30DC84()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 136) = *(_QWORD *)(v0 + 152);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for HKVerifiableClinicalRecordQueryDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HKVerifiableClinicalRecordQueryDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = (void *)a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for HKVerifiableClinicalRecordQueryDescriptor(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HKVerifiableClinicalRecordQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKVerifiableClinicalRecordQueryDescriptor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HKVerifiableClinicalRecordQueryDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKVerifiableClinicalRecordQueryDescriptor()
{
  return &type metadata for HKVerifiableClinicalRecordQueryDescriptor;
}

uint64_t sub_19A30DEE0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A30DFDC();
    v5 = sub_19A3534CC();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19A30DF70(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_19A30DF98()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A30DFBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_19A30DA78(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t sub_19A30DFDC()
{
  unint64_t result;

  result = qword_1EE3974A0;
  if (!qword_1EE3974A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE3974A0);
  }
  return result;
}

void HKAttachmentStore.addAttachment(to:name:contentType:url:metadata:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[6];

  v9 = v8;
  v13 = (void *)sub_19A353400();
  v14 = (void *)sub_19A35310C();
  v15 = (void *)sub_19A352EE4();
  v16 = (void *)sub_19A35331C();
  v18[4] = a7;
  v18[5] = a8;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = sub_19A30E150;
  v18[3] = &block_descriptor_3;
  v17 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_addAttachmentToObject_name_contentType_URL_metadata_completion_, a1, v13, v14, v15, v16, v17);
  _Block_release(v17);

}

void sub_19A30E150(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t HKAttachmentStore.addAttachment(to:name:contentType:url:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[21] = a6;
  v7[22] = v6;
  v7[19] = a4;
  v7[20] = a5;
  v7[17] = a2;
  v7[18] = a3;
  v7[16] = a1;
  return swift_task_switch();
}

uint64_t sub_19A30E200()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)v0[22];
  v2 = v0[16];
  v3 = sub_19A353400();
  v0[23] = v3;
  v4 = sub_19A35310C();
  v0[24] = v4;
  v5 = sub_19A352EE4();
  v0[25] = v5;
  v6 = sub_19A35331C();
  v0[26] = v6;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A30E32C;
  v7 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v0[11] = 0x40000000;
  v0[12] = sub_19A30E43C;
  v0[13] = &block_descriptor_1;
  v0[14] = v7;
  objc_msgSend(v1, sel_addAttachmentToObject_name_contentType_URL_metadata_completion_, v2, v3, v4, v5, v6, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_19A30E32C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 216) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19A30E38C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 200);
  v3 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_19A30E3E0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(void **)(v0 + 208);
  v3 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 200);
  v4 = *(void **)(v0 + 184);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A30E43C(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    sub_19A305E34();
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *HKAttachmentStore.dataReader(for:)(void *a1)
{
  void *v1;

  type metadata accessor for HKAttachmentDataReader();
  swift_allocObject();
  return sub_19A332A38(v1, a1);
}

id HKWorkoutRouteQueryDescriptor.workoutRoute.getter()
{
  id *v0;

  return *v0;
}

void HKWorkoutRouteQueryDescriptor.workoutRoute.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKWorkoutRouteQueryDescriptor.workoutRoute.modify())()
{
  return nullsub_1;
}

uint64_t HKWorkoutRouteQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 HKWorkoutRouteQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*HKWorkoutRouteQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKWorkoutRouteQueryDescriptor.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = -1;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t HKWorkoutRouteQueryDescriptor.Results.Iterator.locationIterator.getter()
{
  type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397608);
}

uint64_t HKWorkoutRouteQueryDescriptor.Results.Iterator.locationIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HKWorkoutRouteQueryDescriptor.Results.Iterator.locationIterator.modify())()
{
  type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0);
  return nullsub_1;
}

uint64_t HKWorkoutRouteQueryDescriptor.Results.Iterator.nextLocationIterator()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30E700;
  return sub_19A3535A4();
}

uint64_t sub_19A30E700()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A30E764()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), 0);
}

void sub_19A30E774(uint64_t a1)
{
  sub_19A30FA98(a1, &qword_1EE396FC0, (uint64_t (*)(uint64_t))sub_19A30E790, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_19A30E790()
{
  unint64_t result;

  result = qword_1EE396FC8;
  if (!qword_1EE396FC8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE396FC8);
  }
  return result;
}

uint64_t HKWorkoutRouteQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  return swift_task_switch();
}

void (*sub_19A30E7E4())(uint64_t, _QWORD)
{
  uint64_t v0;
  void (*result)(uint64_t, _QWORD);
  unint64_t *v2;
  void (*v3)(uint64_t, _QWORD);
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  id v10;

  result = (void (*)(uint64_t, _QWORD))HKWorkoutRouteQueryDescriptor.Results.Iterator.locationIterator.modify();
  v3 = result;
  v4 = *v2;
  if (!*v2)
    goto LABEL_4;
  v5 = v2;
  v6 = v2[1];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_19A3539B8();
    result = (void (*)(uint64_t, _QWORD))swift_bridgeObjectRelease();
    if (v6 == v8)
      goto LABEL_4;
  }
  else if (v6 == *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v3(v0 + 16, 0);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v7;
    sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    *v7 = v0;
    v7[1] = sub_19A30E964;
    return (void (*)(uint64_t, _QWORD))sub_19A3535A4();
  }
  v9 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    result = (void (*)(uint64_t, _QWORD))sub_19A30F444(v6, v9);
LABEL_10:
    v10 = result;
    if (!__OFADD__(v6, 1))
    {
      v5[1] = v6 + 1;
      v3(v0 + 16, 0);
      return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(id))(v0 + 8))(v10);
    }
    goto LABEL_14;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    result = (void (*)(uint64_t, _QWORD))*(id *)(v9 + 8 * v6 + 32);
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_19A30E964()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

void (*sub_19A30E9C8())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*result)(uint64_t, _QWORD);
  unint64_t *v5;
  void (*v6)(uint64_t, _QWORD);
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = (_QWORD *)(v1 + *(int *)(type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0) + 20));
  swift_bridgeObjectRelease();
  *v3 = v2;
  v3[1] = 0;
  result = (void (*)(uint64_t, _QWORD))HKWorkoutRouteQueryDescriptor.Results.Iterator.locationIterator.modify();
  v6 = result;
  v7 = *v5;
  if (!*v5)
    goto LABEL_12;
  v8 = v5;
  v9 = v5[1];
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_19A3539B8();
    result = (void (*)(uint64_t, _QWORD))swift_bridgeObjectRelease();
    if (v9 == v10)
      goto LABEL_4;
  }
  else if (v9 == *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v7 = 0;
LABEL_12:
    v6(v0 + 48, 0);
    return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
  }
  v11 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    result = (void (*)(uint64_t, _QWORD))sub_19A30F444(v9, v11);
LABEL_10:
    v7 = (unint64_t)result;
    if (!__OFADD__(v9, 1))
    {
      v8[1] = v9 + 1;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v9 < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    result = (void (*)(uint64_t, _QWORD))*(id *)(v11 + 8 * v9 + 32);
    goto LABEL_10;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_19A30EAF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A30EB04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_19A309ABC;
  v3[11] = v1;
  return swift_task_switch();
}

uint64_t sub_19A30EB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v5[5] = a3;
  v5[6] = a4;
  v5[3] = a1;
  v5[4] = a2;
  v6 = (_QWORD *)swift_task_alloc();
  v5[7] = v6;
  *v6 = v5;
  v6[1] = sub_19A30EBC8;
  v6[11] = v4;
  return swift_task_switch();
}

uint64_t sub_19A30EBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    if (v5)
    {
      swift_getObjectType();
      sub_19A35352C();
    }
  }
  else
  {
    if (v5)
    {
      swift_getObjectType();
      sub_19A35352C();
    }
    *(_QWORD *)(v4 + 72) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_19A30EC94()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A30ECAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD **)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A305E34();
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKWorkoutRouteQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  result = type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0);
  v3 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v3 = 0;
  v3[1] = 0;
  return result;
}

uint64_t sub_19A30ED60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator(0) + 20));
  *v3 = 0;
  v3[1] = 0;
  return sub_19A3100B8(v1);
}

uint64_t HKWorkoutRouteQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A310218(0, qword_1EE3974D0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v9 = *(void **)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = a1;
  v17 = sub_19A30F620;
  v18 = v12;
  v19 = a1;
  sub_19A30E774(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v9;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A30EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[2];
  _QWORD aBlock[6];

  v25[1] = a3;
  sub_19A310218(0, &qword_1EE396FB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v25 - v15, a1, v12);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v16, v12);
  *(_QWORD *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a6;
  v19 = objc_allocWithZone((Class)HKWorkoutRouteQuery);
  aBlock[4] = sub_19A310178;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A30F3A4;
  aBlock[3] = &block_descriptor_4;
  v20 = _Block_copy(aBlock);
  v21 = a6;
  v22 = objc_msgSend(v19, sel_initWithRoute_dataHandler_, a2, v20);
  _Block_release(v20);
  swift_release();
  if (a4)
  {
    swift_bridgeObjectRetain();
    v23 = (void *)sub_19A353400();
  }
  else
  {
    v23 = 0;
  }
  objc_msgSend(v22, sel_setDebugIdentifier_, v23);

  objc_msgSend(v22, sel_setQualityOfService_, a5);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_19A30F0C4(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;

  sub_19A310218(0, &qword_1EE397640, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  if (a2)
  {
    v20 = a2;
    sub_19A310218(0, &qword_1EE396FB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    swift_bridgeObjectRetain();
    sub_19A353574();
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((a3 & 1) == 0)
      return result;
    objc_msgSend(a6, sel_stopQuery_, a1);
    v20 = 0;
  }
  else
  {
    v17 = a4;
    if (!a4)
    {
      type metadata accessor for HKError(0);
      v19 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v17 = v20;
    }
    v20 = v17;
    v18 = a4;
    sub_19A310218(0, &qword_1EE396FB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  }
  return sub_19A353580();
}

uint64_t sub_19A30F270(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A310218(0, qword_1EE3974D0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v9 = *(void **)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = a1;
  v17 = sub_19A30F620;
  v18 = v12;
  v19 = a1;
  sub_19A30E774(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v9;
  sub_19A3535C8();

  return swift_release();
}

uint64_t sub_19A30F3A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, uint64_t, void *);
  id v10;
  id v11;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A30E790();
    v7 = sub_19A3534CC();
  }
  swift_retain();
  v10 = a2;
  v11 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19A30F444(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  sub_19A30E790();
  if (a2 >> 62)
  {
    v4 = sub_19A3539C4();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      return v4;
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
      swift_unknownObjectRetain();
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
        goto LABEL_10;
      return v4;
    }
    __break(1u);
  }
LABEL_10:
  sub_19A353898();
  sub_19A353454();
  sub_19A353CAC();
  sub_19A353454();
  swift_bridgeObjectRelease();
  sub_19A353454();
  swift_getObjectType();
  swift_unknownObjectRelease();
  sub_19A353CAC();
  sub_19A353454();
  swift_bridgeObjectRelease();
  result = sub_19A353994();
  __break(1u);
  return result;
}

void sub_19A30F624(uint64_t a1)
{
  uint64_t v1;

  sub_19A307580(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19A30F630()
{
  return sub_19A306A54(&qword_1EE3974E8, type metadata accessor for HKWorkoutRouteQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKWorkoutRouteQueryDescriptor.Results.Iterator);
}

uint64_t sub_19A30F65C()
{
  return sub_19A306A54(&qword_1EE3974F0, type metadata accessor for HKWorkoutRouteQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKWorkoutRouteQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397578);
}

uint64_t destroy for HKWorkoutRouteQueryDescriptor(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HKWorkoutRouteQueryDescriptor(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  v6 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKWorkoutRouteQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for HKWorkoutRouteQueryDescriptor(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKWorkoutRouteQueryDescriptor()
{
  return &type metadata for HKWorkoutRouteQueryDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1)
{
  uint64_t v2;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKWorkoutRouteQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A310218(0, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30FA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, &qword_1EE397518, (uint64_t (*)(uint64_t))sub_19A30E774, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

void sub_19A30FA98(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t storeEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30FAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, &qword_1EE397518, (uint64_t (*)(uint64_t))sub_19A30E774, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A30FB54()
{
  unint64_t v0;

  sub_19A310218(319, &qword_1EE3974C8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    *v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1)
{
  uint64_t v2;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  *v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t initializeWithTake for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for HKWorkoutRouteQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A30FEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HKWorkoutRouteQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_19A30FF68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_19A310218(0, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void sub_19A30FFF0()
{
  unint64_t v0;

  sub_19A310218(319, &qword_1EE3974B8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_19A3100A8(uint64_t a1)
{
  uint64_t v1;

  return sub_19A30EEE8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_19A3100B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKWorkoutRouteQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A3100F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_19A310218(0, &qword_1EE396FB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_19A310178(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  sub_19A310218(0, &qword_1EE396FB8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_19A30F0C4(a1, a2, a3, a4, v4 + v11, *(void **)(v4 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void sub_19A310218(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_19A30E774(255);
    v7 = v6;
    v8 = sub_19A305E34();
    v9 = a3(a1, v7, v8, MEMORY[0x1E0DEDB38]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

BOOL static HKDayIndexRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL HKEqualDayIndexRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

BOOL sub_19A3102AC(uint64_t *a1, uint64_t *a2)
{
  return HKEqualDayIndexRanges(*a1, a1[1], *a2, a2[1]);
}

uint64_t HKDayIndexRange.init(range:)(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (__OFSUB__(a1[1], result))
    __break(1u);
  return result;
}

uint64_t HKDayIndexRange.init(closedRange:)(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  result = *a1;
  v3 = a1[1];
  v4 = __OFSUB__(v3, result);
  v5 = v3 - result;
  if (v4)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFADD__(v5, 1))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t HKDayIndexRange.last.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2 <= 0)
    v2 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v2 = a1 + a2 - 1;
  if (v2 == sub_19A352C20())
    return 0;
  else
    return v2;
}

uint64_t HKDayIndexRange.dayIndexClosedRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  if (a2 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = a1 + a2 - 1;
  result = sub_19A352C20();
  if (v5 == result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else if (v5 < a1)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v5;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_19A3103BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = HKLastDayIndexRange(*a1, a1[1]);
  result = sub_19A352C20();
  if (v4 == result)
  {
    v3 = 0;
    v6 = 0;
LABEL_5:
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v4 == result;
    return result;
  }
  if (v4 >= v3)
  {
    v6 = v4;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t HKDayIndexRange.dayIndexClosedRange.setter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    *v1 = 0;
    v1[1] = 0;
    return result;
  }
  v2 = *(_QWORD *)(result + 8);
  v3 = __OFSUB__(v2, *(_QWORD *)result);
  v4 = v2 - *(_QWORD *)result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v3 = __OFADD__(v4, 1);
    v5 = v4 + 1;
    if (!v3)
    {
      *v1 = *(_QWORD *)result;
      v1[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *(*HKDayIndexRange.dayIndexClosedRange.modify(uint64_t a1))(uint64_t *result, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *(*result)(uint64_t *, char);

  *(_QWORD *)(a1 + 24) = v1;
  v4 = *v1;
  v3 = v1[1];
  if (v3 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = *v1 + v3 - 1;
  result = (uint64_t *(*)(uint64_t *, char))sub_19A352C20();
  if ((uint64_t *(*)(uint64_t *, char))v5 == result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return sub_19A3104E4;
  }
  if (v5 >= v4)
  {
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 0;
    return sub_19A3104E4;
  }
  __break(1u);
  return result;
}

uint64_t *sub_19A3104E4(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *result;
  LOBYTE(v3) = *((_BYTE *)result + 16);
  if ((a2 & 1) != 0)
  {
    if ((result[2] & 1) != 0)
    {
LABEL_8:
      v2 = 0;
      v3 = 0;
LABEL_11:
      v9 = (_QWORD *)result[3];
      *v9 = v2;
      v9[1] = v3;
      return result;
    }
    v4 = result[1];
    v5 = __OFSUB__(v4, v2);
    v6 = v4 - v2;
    if (v5)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    v5 = __OFADD__(v6, 1);
    v3 = v6 + 1;
    if (!v5)
      goto LABEL_11;
    __break(1u);
  }
  if ((v3 & 1) != 0)
    goto LABEL_8;
  v7 = result[1];
  v5 = __OFSUB__(v7, v2);
  v8 = v7 - v2;
  if (v5)
    goto LABEL_13;
  v5 = __OFADD__(v8, 1);
  v3 = v8 + 1;
  if (!v5)
    goto LABEL_11;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t HKDayIndexRange.dayIndexRange.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  if (a2 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = a1 + a2 - 1;
  result = sub_19A352C20();
  if (v5 == result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if (v7 >= a1)
  {
    *(_QWORD *)a3 = a1;
    *(_QWORD *)(a3 + 8) = v7;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_19A3105C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = HKLastDayIndexRange(*a1, a1[1]);
  result = sub_19A352C20();
  if (v4 == result)
  {
    v3 = 0;
    v6 = 0;
LABEL_5:
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v4 == result;
    return result;
  }
  v6 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else if (v6 >= v3)
  {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t HKDayIndexRange.dayIndexRange.setter(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    *v1 = 0;
    v1[1] = 0;
  }
  else
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = __OFSUB__(v2, *(_QWORD *)result);
    v4 = v2 - *(_QWORD *)result;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *v1 = *(_QWORD *)result;
      v1[1] = v4;
    }
  }
  return result;
}

uint64_t *(*HKDayIndexRange.dayIndexRange.modify(uint64_t a1))(uint64_t *result, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *(*result)(uint64_t *, char);
  uint64_t v7;

  *(_QWORD *)(a1 + 24) = v1;
  v4 = *v1;
  v3 = v1[1];
  if (v3 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = *v1 + v3 - 1;
  result = (uint64_t *(*)(uint64_t *, char))sub_19A352C20();
  if ((uint64_t *(*)(uint64_t *, char))v5 == result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return sub_19A3106F4;
  }
  v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if (v7 >= v4)
  {
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = 0;
    return sub_19A3106F4;
  }
  __break(1u);
  return result;
}

uint64_t *sub_19A3106F4(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *result;
  LOBYTE(v3) = *((_BYTE *)result + 16);
  if ((a2 & 1) != 0)
  {
    if ((result[2] & 1) != 0)
    {
LABEL_7:
      v2 = 0;
      v3 = 0;
LABEL_9:
      v7 = (_QWORD *)result[3];
      *v7 = v2;
      v7[1] = v3;
      return result;
    }
    v4 = result[1];
    v5 = __OFSUB__(v4, v2);
    v3 = v4 - v2;
    if (!v5)
      goto LABEL_9;
    __break(1u);
  }
  if ((v3 & 1) != 0)
    goto LABEL_7;
  v6 = result[1];
  v5 = __OFSUB__(v6, v2);
  v3 = v6 - v2;
  if (!v5)
    goto LABEL_9;
  __break(1u);
  return result;
}

uint64_t HKDayIndexRange.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = a1;
  if (a2 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v5 = a1 + a2 - 1;
  result = sub_19A352C20();
  if (v5 == result)
  {
    v3 = 0;
    v7 = 1;
LABEL_8:
    *a3 = v3;
    a3[1] = v7;
    a3[2] = v3;
    return result;
  }
  v7 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if (v7 >= v3)
  {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall HKDayIndexRange.contains(_:)(HealthKit::DayIndex a1)
{
  uint64_t v1;
  uint64_t v2;

  return *(_QWORD *)a1.value >= v1 && *(_QWORD *)a1.value - v1 < v2;
}

Swift::Bool __swiftcall HKDayIndexRange.contains(_:)(Swift::Int a1)
{
  Swift::Int v1;
  Swift::Int v2;

  return a1 >= v1 && a1 - v1 < v2;
}

uint64_t sub_19A3107DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *v1;
  v4 = HKLastDayIndexRange(*v1, v1[1]);
  result = sub_19A352C20();
  if (v4 == result)
  {
    v3 = 0;
    v6 = 1;
LABEL_5:
    *a1 = v3;
    a1[1] = v6;
    a1[2] = v3;
    return result;
  }
  v6 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else if (v6 >= v3)
  {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_19A310848()
{
  return 0;
}

uint64_t sub_19A310850()
{
  return 2;
}

uint64_t sub_19A310858()
{
  uint64_t *v0;

  return sub_19A310B34(*v0, v0[1]);
}

uint64_t sub_19A310860(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_19A310CE8(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_19A310868()
{
  return sub_19A353478();
}

uint64_t HKLastDayIndexRange(uint64_t a1, uint64_t a2)
{
  if (a2 <= 0)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return a2 + a1 - 1;
}

uint64_t sub_19A3108A0()
{
  return sub_19A306A54(&qword_1EE397648, (uint64_t (*)(uint64_t))sub_19A3108CC, MEMORY[0x1E0DEC908]);
}

void sub_19A3108CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397650)
  {
    sub_19A31092C();
    sub_19A3109C8();
    v0 = sub_19A353970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397650);
  }
}

void sub_19A31092C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397658)
  {
    sub_19A310984();
    v0 = sub_19A353694();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397658);
  }
}

unint64_t sub_19A310984()
{
  unint64_t result;

  result = qword_1EE397660;
  if (!qword_1EE397660)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for DayIndex, &type metadata for DayIndex);
    atomic_store(result, (unint64_t *)&qword_1EE397660);
  }
  return result;
}

unint64_t sub_19A3109C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EE397668;
  if (!qword_1EE397668)
  {
    sub_19A31092C();
    v2 = v1;
    v3[0] = sub_19A310A30();
    v3[1] = sub_19A310A74();
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEB8C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EE397668);
  }
  return result;
}

unint64_t sub_19A310A30()
{
  unint64_t result;

  result = qword_1EE397670;
  if (!qword_1EE397670)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for DayIndex, &type metadata for DayIndex);
    atomic_store(result, (unint64_t *)&qword_1EE397670);
  }
  return result;
}

unint64_t sub_19A310A74()
{
  unint64_t result;

  result = qword_1EE397678;
  if (!qword_1EE397678)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EE397678);
  }
  return result;
}

uint64_t sub_19A310ABC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  v2 = *(_QWORD *)(result + 8);
  v3 = __OFSUB__(v2, *(_QWORD *)result);
  v4 = v2 - *(_QWORD *)result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    v3 = __OFADD__(v4, 1);
    v5 = v4 + 1;
    if (!v3)
    {
      *a2 = *(_QWORD *)result;
      a2[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_19A310B00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 16) & 1) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = __OFSUB__(v2, *(_QWORD *)result);
    v4 = v2 - *(_QWORD *)result;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *a2 = *(_QWORD *)result;
      a2[1] = v4;
    }
  }
  return result;
}

uint64_t sub_19A310B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = a1;
  if (a2 <= 0)
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v4 = a1 + a2 - 1;
  result = sub_19A352C20();
  if (v4 != result)
  {
    v6 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
LABEL_41:
      __break(1u);
    }
    else if (v6 >= v3)
    {
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_43;
  }
  v3 = 0;
  v6 = 1;
LABEL_8:
  if (__OFSUB__(v6, v3))
  {
LABEL_32:
    __break(1u);
  }
  else
  {
    v2 = 0;
    if (v6 <= v3)
      v7 = v3;
    else
      v7 = v6;
    v4 = MEMORY[0x1E0DEE9D8];
    v8 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    v9 = v3;
    while (v6 != v9)
    {
      if (v6 < v3)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v7 == v9)
        goto LABEL_38;
      if (!v2)
      {
        v10 = *(_QWORD *)(v4 + 24);
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_40;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        sub_19A310DF0();
        v13 = (_QWORD *)swift_allocObject();
        v14 = _swift_stdlib_malloc_size(v13);
        v15 = v14 - 32;
        if (v14 < 32)
          v15 = v14 - 25;
        v16 = v15 >> 3;
        v13[2] = v12;
        v13[3] = 2 * (v15 >> 3);
        v17 = (unint64_t)(v13 + 4);
        v18 = *(_QWORD *)(v4 + 24) >> 1;
        if (*(_QWORD *)(v4 + 16))
        {
          v19 = (const void *)(v4 + 32);
          if (v13 != (_QWORD *)v4 || v17 >= (unint64_t)v19 + 8 * v18)
            memmove(v13 + 4, v19, 8 * v18);
          *(_QWORD *)(v4 + 16) = 0;
        }
        v8 = (uint64_t *)(v17 + 8 * v18);
        v2 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        result = swift_release();
        v4 = (uint64_t)v13;
      }
      v20 = __OFSUB__(v2--, 1);
      if (v20)
        goto LABEL_39;
      *v8++ = v9;
      if (__OFSUB__(v6, ++v9))
        goto LABEL_32;
    }
  }
  v21 = *(_QWORD *)(v4 + 24);
  if (v21 < 2)
    return v4;
  v22 = v21 >> 1;
  v20 = __OFSUB__(v22, v2);
  v23 = v22 - v2;
  if (!v20)
  {
    *(_QWORD *)(v4 + 16) = v23;
    return v4;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_19A310CE8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a4;
  if (a5 <= 0)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = a4 + a5 - 1;
  result = sub_19A352C20();
  if (v9 == result)
  {
    v5 = 0;
    v11 = 1;
  }
  else
  {
    v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v11 < v5)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
  }
  if (a2)
  {
    if (!a3)
      goto LABEL_24;
    if (a3 < 0)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    if (v11 <= v5)
      v12 = v5;
    else
      v12 = v11;
    if (!__OFSUB__(v11, v5))
    {
      v13 = 1;
      v14 = v5;
      while (1)
      {
        if (v11 == v14)
        {
          v15 = v11;
          a3 = v11 - v5;
          goto LABEL_26;
        }
        if (v11 < v5)
          break;
        if (v12 == v14)
          goto LABEL_28;
        v15 = v14 + 1;
        *a2 = v14;
        if (a3 == v13)
          goto LABEL_26;
        ++a2;
        ++v13;
        ++v14;
        if (__OFSUB__(v11, v15))
          goto LABEL_22;
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_22:
    __break(1u);
  }
  a3 = 0;
LABEL_24:
  v15 = v5;
LABEL_26:
  *a1 = v5;
  a1[1] = v11;
  a1[2] = v15;
  return a3;
}

void sub_19A310DF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397680)
  {
    v0 = sub_19A353A9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397680);
  }
}

_QWORD *sub_19A310E48(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;

  v4 = a4;
  v6 = a2;
  v7 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    v10 = 0;
    v20 = -1 << *(_BYTE *)(a4 + 32);
    v8 = a4 + 56;
    v9 = ~v20;
    v21 = -v20;
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v11 = v22 & *(_QWORD *)(a4 + 56);
    v24 = result;
    if (a2)
      goto LABEL_3;
LABEL_36:
    v12 = 0;
    goto LABEL_46;
  }
  sub_19A3537E4();
  sub_19A311148();
  sub_19A306A54(&qword_1EE397690, (uint64_t (*)(uint64_t))sub_19A311148, MEMORY[0x1E0DEFCF8]);
  result = (_QWORD *)sub_19A353610();
  v4 = v27;
  v8 = v28;
  v9 = v29;
  v10 = v30;
  v11 = v31;
  v24 = v7;
  if (!v6)
    goto LABEL_36;
LABEL_3:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0)
    goto LABEL_48;
  v12 = 0;
  v25 = (unint64_t)(v9 + 64) >> 6;
  v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!sub_19A353838())
        goto LABEL_45;
      sub_19A311148();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v15 = v26;
      result = (_QWORD *)swift_unknownObjectRelease();
      if (!v26)
        goto LABEL_45;
      goto LABEL_8;
    }
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v16 >= v25)
    {
      v11 = 0;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v16);
    if (v17)
      goto LABEL_23;
    v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    v17 = *(_QWORD *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25)
        goto LABEL_42;
      v17 = *(_QWORD *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        v16 = v10 + 3;
        goto LABEL_23;
      }
      v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      v17 = *(_QWORD *)(v8 + 8 * v18);
      if (!v17)
        break;
    }
    v16 = v18;
LABEL_23:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
LABEL_7:
    result = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v15 = result;
    if (!result)
      goto LABEL_45;
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      v12 = a3;
LABEL_45:
      v9 = v23;
      goto LABEL_46;
    }
  }
  v16 = v10 + 5;
  if (v10 + 5 >= v25)
  {
LABEL_42:
    v11 = 0;
    v10 = v18;
    goto LABEL_45;
  }
  v17 = *(_QWORD *)(v8 + 8 * v16);
  if (v17)
    goto LABEL_23;
  v19 = v10 + 6;
  while (v25 != v19)
  {
    v17 = *(_QWORD *)(v8 + 8 * v19++);
    if (v17)
    {
      v16 = v19 - 1;
      goto LABEL_23;
    }
  }
  v11 = 0;
  v10 = v25 - 1;
  v9 = v23;
LABEL_46:
  *v24 = v4;
  v24[1] = v8;
  v24[2] = v9;
  v24[3] = v10;
  v24[4] = v11;
  return (_QWORD *)v12;
}

unint64_t sub_19A311148()
{
  unint64_t result;

  result = qword_1EE397688;
  if (!qword_1EE397688)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE397688);
  }
  return result;
}

uint64_t HKQueryAttributes.init(debugIdentifier:qualityOfService:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

id HKQuery.setAttributes(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 8))
    v3 = (void *)sub_19A353400();
  else
    v3 = 0;
  objc_msgSend(v1, sel_setDebugIdentifier_, v3);

  return objc_msgSend(v1, sel_setQualityOfService_, v2);
}

uint64_t sub_19A3111F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[5] = a1;
  v9[2] = a2;
  type metadata accessor for HKSamplePredicate(255, a2, a3, a4);
  v4 = sub_19A3534FC();
  v5 = (char *)sub_19A3116D4();
  v6 = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v4);
  return sub_19A332214((void (*)(char *, char *))sub_19A311674, (uint64_t)v9, v4, v5, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
}

uint64_t static HKQuery.effectiveLimit(for:)(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return 0;
  return result;
}

uint64_t HKQueryAttributes.debugIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKQueryAttributes.debugIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HKQueryAttributes.debugIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t HKQueryAttributes.qualityOfService.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKQueryAttributes.qualityOfService.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKQueryAttributes.qualityOfService.modify())()
{
  return nullsub_1;
}

uint64_t HKQueryAttributes.hash(into:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    sub_19A353B50();
    swift_bridgeObjectRetain();
    sub_19A353448();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19A353B50();
  }
  return sub_19A353B44();
}

uint64_t HKQueryAttributes.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_19A353B38();
  sub_19A353B50();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_19A353448();
    swift_bridgeObjectRelease();
  }
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A311428()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_19A353B38();
  sub_19A353B50();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_19A353448();
    swift_bridgeObjectRelease();
  }
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A3114B4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    sub_19A353B50();
    swift_bridgeObjectRetain();
    sub_19A353448();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_19A353B50();
  }
  return sub_19A353B44();
}

uint64_t sub_19A311524()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_19A353B38();
  sub_19A353B50();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_19A353448();
    swift_bridgeObjectRelease();
  }
  sub_19A353B44();
  return sub_19A353B68();
}

BOOL _s9HealthKit17HKQueryAttributesV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  _BOOL8 result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a2[1];
  v6 = a2[2];
  if (!v3)
  {
    if (!v5)
      return v4 == v6;
    return 0;
  }
  if (!v5)
    return 0;
  if (*a1 == *a2 && v3 == v5)
    return v4 == v6;
  v8 = sub_19A353AC0();
  result = 0;
  if ((v8 & 1) != 0)
    return v4 == v6;
  return result;
}

unint64_t sub_19A311620()
{
  unint64_t result;

  result = qword_1EE397698;
  if (!qword_1EE397698)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKQueryAttributes, &type metadata for HKQueryAttributes);
    atomic_store(result, (unint64_t *)&qword_1EE397698);
  }
  return result;
}

ValueMetadata *type metadata accessor for HKQueryAttributes()
{
  return &type metadata for HKQueryAttributes;
}

id sub_19A311674@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *a1;
  v8 = a1[1];
  type metadata accessor for HKSamplePredicate(0, v6, a2, a3);
  result = objc_msgSend(objc_allocWithZone((Class)HKQueryDescriptor), sel_initWithSampleType_predicate_, v7, v8);
  *a4 = result;
  return result;
}

unint64_t sub_19A3116D4()
{
  unint64_t result;

  result = qword_1EE3971E8;
  if (!qword_1EE3971E8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE3971E8);
  }
  return result;
}

id HKHeartbeatSeriesQueryDescriptor.sample.getter()
{
  id *v0;

  return *v0;
}

void HKHeartbeatSeriesQueryDescriptor.sample.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKHeartbeatSeriesQueryDescriptor.sample.modify())()
{
  return nullsub_1;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 HKHeartbeatSeriesQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*HKHeartbeatSeriesQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = -1;
  *a2 = result;
  a2[1] = 0;
  return result;
}

double HKHeartbeatSeriesQueryDescriptor.Heartbeat.timeIntervalSinceStart.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Heartbeat.precededByGap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

HealthKit::HKHeartbeatSeriesQueryDescriptor::Heartbeat __swiftcall HKHeartbeatSeriesQueryDescriptor.Heartbeat.init(timeIntervalSinceStart:precededByGap:)(Swift::Double timeIntervalSinceStart, Swift::Bool precededByGap)
{
  uint64_t v2;
  HealthKit::HKHeartbeatSeriesQueryDescriptor::Heartbeat result;

  *(Swift::Double *)v2 = timeIntervalSinceStart;
  *(_BYTE *)(v2 + 8) = precededByGap;
  result.timeIntervalSinceStart = timeIntervalSinceStart;
  result.precededByGap = precededByGap;
  return result;
}

uint64_t static HKHeartbeatSeriesQueryDescriptor.Heartbeat.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Heartbeat.hash(into:)()
{
  sub_19A353B5C();
  return sub_19A353B50();
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Heartbeat.hashValue.getter()
{
  sub_19A353B38();
  sub_19A353B5C();
  sub_19A353B50();
  return sub_19A353B68();
}

uint64_t sub_19A3118B8(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  else
    return 0;
}

uint64_t sub_19A3118EC()
{
  sub_19A353B5C();
  return sub_19A353B50();
}

uint64_t sub_19A311930()
{
  sub_19A353B38();
  sub_19A353B5C();
  sub_19A353B50();
  return sub_19A353B68();
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Results.Iterator.heartbeatIterator.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0) + 20));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return sub_19A3119DC(v4, v5);
}

uint64_t type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397800);
}

uint64_t sub_19A3119DC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19A3119F0(a1, a2);
  return a1;
}

uint64_t sub_19A3119F0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

__n128 HKHeartbeatSeriesQueryDescriptor.Results.Iterator.heartbeatIterator.setter(__n128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __n128 result;
  __n128 v6;

  v6 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0) + 20));
  sub_19A311A90(*v4, v4[1]);
  result = v6;
  *(__n128 *)v4 = v6;
  v4[2] = v2;
  v4[3] = v3;
  return result;
}

uint64_t sub_19A311A90(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_19A311AA4(a1, a2);
  return a1;
}

uint64_t sub_19A311AA4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t (*HKHeartbeatSeriesQueryDescriptor.Results.Iterator.heartbeatIterator.modify())()
{
  type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0);
  return nullsub_1;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Results.Iterator.nextHeartbeatIterator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 32) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 40) = v2;
  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v2 = v1;
  v2[1] = sub_19A311B8C;
  return sub_19A3535A4();
}

uint64_t sub_19A311B8C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A311BF0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t *v5;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    v2 = 0;
    v3 = 0;
    v1 = 0xF000000000000000;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    sub_19A3119F0(v2, *(_QWORD *)(v0 + 24));
    v4 = (void *)sub_19A352F08();
    v3 = HKHeartbeatSeriesDatumCountFromData(v4);

    sub_19A311A90(v2, v1);
  }
  v5 = *(uint64_t **)(v0 + 32);
  *v5 = v2;
  v5[1] = v1;
  v5[2] = v3;
  v5[3] = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A311C8C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Results.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = v1;
  return swift_task_switch();
}

uint64_t sub_19A311CB0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)();
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *v11;

  v2 = HKHeartbeatSeriesQueryDescriptor.Results.Iterator.heartbeatIterator.modify();
  v3 = v1;
  if (v1[1] >> 60 == 15 || (v4 = v1[3], v4 >= v1[2]))
  {
    ((void (*)(uint64_t, _QWORD))v2)(v0 + 16, 0);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v11;
    sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    *v11 = v0;
    v11[1] = sub_19A311DE4;
    return sub_19A3535A4();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = (void *)sub_19A352F08();
    v7 = HKHeartbeatSeriesDatumAtIndex(v6, v4);
    v9 = v8;

    v3[3] = v4 + 1;
    ((void (*)(uint64_t, _QWORD))v2)(v0 + 16, 0);
    *(_QWORD *)v5 = v7;
    *(_BYTE *)(v5 + 8) = v9 & 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19A311DE4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A311E48()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t (*v8)();
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1 >> 60 == 15)
  {
    v2 = 0;
    v3 = 0;
    v1 = 0xF000000000000000;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 80);
    sub_19A3119F0(v2, *(_QWORD *)(v0 + 88));
    v4 = (void *)sub_19A352F08();
    v3 = HKHeartbeatSeriesDatumCountFromData(v4);

    sub_19A311A90(v2, v1);
  }
  v5 = *(_QWORD *)(v0 + 104);
  v6 = (uint64_t *)(v5 + *(int *)(type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0) + 20));
  sub_19A311A90(*v6, v6[1]);
  *v6 = v2;
  v6[1] = v1;
  v6[2] = v3;
  v6[3] = 0;
  v8 = HKHeartbeatSeriesQueryDescriptor.Results.Iterator.heartbeatIterator.modify();
  v9 = v7;
  if (v7[1] >> 60 == 15)
  {
    v10 = *(_QWORD *)(v0 + 96);
    ((void (*)(uint64_t, _QWORD))v8)(v0 + 48, 0);
    *(_QWORD *)v10 = 0;
    *(_BYTE *)(v10 + 8) = 2;
  }
  else
  {
    v11 = v7[3];
    if (v11 >= v7[2])
    {
      v13 = 0;
      v16 = 2;
    }
    else
    {
      v12 = (void *)sub_19A352F08();
      v13 = HKHeartbeatSeriesDatumAtIndex(v12, v11);
      v15 = v14;

      v9[3] = v11 + 1;
      v16 = v15 & 1;
    }
    v17 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)v17 = v13;
    *(_BYTE *)(v17 + 8) = v16;
    ((void (*)(uint64_t, _QWORD))v8)(v0 + 48, 0);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A311FB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

HealthKit::HKHeartbeatSeriesQueryDescriptor::Heartbeat_optional __swiftcall HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  Swift::Bool v8;
  double v9;
  char v10;
  HealthKit::HKHeartbeatSeriesQueryDescriptor::Heartbeat_optional result;

  v2 = v0;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >= *(_QWORD *)(v1 + 16))
  {
    v5 = 0;
    v10 = 2;
  }
  else
  {
    v4 = (void *)sub_19A352F08();
    v5 = HKHeartbeatSeriesDatumAtIndex(v4, v3);
    v7 = v6;

    *(_QWORD *)(v1 + 24) = v3 + 1;
    v10 = v7 & 1;
  }
  *(_QWORD *)v2 = v5;
  *(_BYTE *)(v2 + 8) = v10;
  result.value.timeIntervalSinceStart = v9;
  result.value.precededByGap = v8;
  return result;
}

uint64_t sub_19A312034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_19A30AF20;
  v4[12] = a1;
  v4[13] = v1;
  return swift_task_switch();
}

uint64_t sub_19A312094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v5[4] = a3;
  v5[5] = a4;
  v5[3] = a2;
  v7 = (_QWORD *)swift_task_alloc();
  v5[6] = v7;
  *v7 = v5;
  v7[1] = sub_19A30B060;
  v7[12] = a1;
  v7[13] = v4;
  return swift_task_switch();
}

double HKHeartbeatSeriesQueryDescriptor.Results.makeAsyncIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  v2 = a1 + *(int *)(type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0) + 20);
  result = 0.0;
  *(_OWORD *)v2 = xmmword_19A44F5C0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  return result;
}

void sub_19A312158(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3 >= *(_QWORD *)(v1 + 16))
  {
    v5 = 0;
    v8 = 2;
  }
  else
  {
    v4 = (void *)sub_19A352F08();
    v5 = HKHeartbeatSeriesDatumAtIndex(v4, v3);
    v7 = v6;

    *(_QWORD *)(v1 + 24) = v3 + 1;
    v8 = v7 & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v8;
}

uint64_t HKHeartbeatSeriesQueryDescriptor.Results.init(stream:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_19A3121D8(a1, a4, a2, a3);
}

uint64_t sub_19A3121D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_19A31221C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_19A31221C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EE3976C0)
  {
    v4 = type metadata accessor for HKQueryAsyncStream(0, MEMORY[0x1E0CB0338], a3, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EE3976C0);
  }
}

uint64_t sub_19A312270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  v3 = a1 + *(int *)(type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(0) + 20);
  *(_OWORD *)v3 = xmmword_19A44F5C0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  return sub_19A313510(v1);
}

uint64_t HKHeartbeatSeriesQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A313730(0, &qword_1EE3976C8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v8 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v8;
  v12[3] = v9;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = a1;
  v17 = sub_19A3125DC;
  v18 = v12;
  v19 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v8;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A3123FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[2];
  _QWORD aBlock[6];

  v25[1] = a3;
  sub_19A313730(0, &qword_1EE396FB0, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v25 - v15, a1, v12);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v16, v12);
  *(_QWORD *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a6;
  v19 = objc_allocWithZone((Class)HKHeartbeatSeriesQuery);
  aBlock[4] = sub_19A3135D0;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A313660;
  aBlock[3] = &block_descriptor_5;
  v20 = _Block_copy(aBlock);
  v21 = a6;
  v22 = objc_msgSend(v19, sel_initWithHeartbeatSeries_bufferHandler_, a2, v20);
  _Block_release(v20);
  swift_release();
  if (a4)
  {
    swift_bridgeObjectRetain();
    v23 = (void *)sub_19A353400();
  }
  else
  {
    v23 = 0;
  }
  objc_msgSend(v22, sel_setDebugIdentifier_, v23);

  objc_msgSend(v22, sel_setQualityOfService_, a5);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_19A3125E0(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  sub_19A313730(0, &qword_1EE397838, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v21 - v16;
  if (a3 >> 60 == 15)
  {
    v18 = (uint64_t)a5;
    if (!a5)
    {
      type metadata accessor for HKError(0);
      v24 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v18 = v22;
    }
    v22 = v18;
    v19 = a5;
    sub_19A313730(0, &qword_1EE396FB0, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  }
  else
  {
    v22 = a2;
    v23 = a3;
    sub_19A3119F0(a2, a3);
    sub_19A313730(0, &qword_1EE396FB0, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    sub_19A353574();
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((a4 & 1) == 0)
      return result;
    objc_msgSend(a7, sel_stopQuery_, a1);
    v22 = 0;
  }
  return sub_19A353580();
}

uint64_t sub_19A31279C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A313730(0, &qword_1EE3976C8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v8 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v8;
  v12[3] = v9;
  v12[4] = v10;
  v12[5] = v11;
  v12[6] = a1;
  v17 = sub_19A3125DC;
  v18 = v12;
  v19 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v8;
  sub_19A3535C8();

  return swift_release();
}

void sub_19A3128C8(uint64_t a1)
{
  uint64_t v1;

  sub_19A30764C(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_19A3128D8()
{
  unint64_t result;

  result = qword_1EE3976D0[0];
  if (!qword_1EE3976D0[0])
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKHeartbeatSeriesQueryDescriptor.Heartbeat, &type metadata for HKHeartbeatSeriesQueryDescriptor.Heartbeat);
    atomic_store(result, qword_1EE3976D0);
  }
  return result;
}

uint64_t sub_19A31291C()
{
  return sub_19A306A54(&qword_1EE3976E8, type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKHeartbeatSeriesQueryDescriptor.Results.Iterator);
}

uint64_t sub_19A312948()
{
  return sub_19A306A54(&qword_1EE3976F0, type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKHeartbeatSeriesQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397770);
}

ValueMetadata *type metadata accessor for HKHeartbeatSeriesQueryDescriptor()
{
  return &type metadata for HKHeartbeatSeriesQueryDescriptor;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Heartbeat(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Heartbeat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Heartbeat()
{
  return &type metadata for HKHeartbeatSeriesQueryDescriptor.Heartbeat;
}

uint64_t initializeBufferWithCopyOfBuffer for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1)
{
  uint64_t v2;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKHeartbeatSeriesQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A313730(0, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A312C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_19A31221C(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A312C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_19A31221C(0, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

void sub_19A312CC8()
{
  unint64_t v0;

  sub_19A313730(319, &qword_1EE3976B8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      v12 = *((_OWORD *)v10 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v12;
    }
    else
    {
      v14 = *(_QWORD *)v10;
      sub_19A3119F0(*(_QWORD *)v10, v11);
      *(_QWORD *)v9 = v14;
      *((_QWORD *)v9 + 1) = v11;
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    }
  }
  return a1;
}

uint64_t destroy for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_19A311AA4(*v6, v7);
  return result;
}

uint64_t initializeWithCopy for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    v11 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v11;
  }
  else
  {
    v12 = *v9;
    sub_19A3119F0(*v9, v10);
    *(_QWORD *)v8 = v12;
    *(_QWORD *)(v8 + 8) = v10;
    *(_OWORD *)(v8 + 16) = *((_OWORD *)v9 + 1);
  }
  return a1;
}

uint64_t assignWithCopy for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 == 15)
    {
      sub_19A31303C(v8);
      v12 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16) = v12;
      return a1;
    }
    v14 = *v9;
    sub_19A3119F0(*v9, v10);
    v15 = *(_QWORD *)v8;
    v16 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v8 = v14;
    *(_QWORD *)(v8 + 8) = v10;
    sub_19A311AA4(v15, v16);
LABEL_8:
    *(_QWORD *)(v8 + 16) = v9[2];
    *(_QWORD *)(v8 + 24) = v9[3];
    return a1;
  }
  if (v10 >> 60 != 15)
  {
    v13 = *v9;
    sub_19A3119F0(*v9, v10);
    *(_QWORD *)v8 = v13;
    *(_QWORD *)(v8 + 8) = v10;
    goto LABEL_8;
  }
  v11 = *((_OWORD *)v9 + 1);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  return a1;
}

uint64_t sub_19A31303C(uint64_t a1)
{
  sub_19A311AA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t initializeWithTake for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for HKHeartbeatSeriesQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11 >> 60 != 15)
    {
      v13 = *(_QWORD *)v8;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_QWORD *)(v8 + 8) = v11;
      sub_19A311AA4(v13, v10);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      return a1;
    }
    sub_19A31303C(v8);
  }
  v12 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A3131A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t storeEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_19A313244(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_19A313730(0, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  }
  else
  {
    v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v10 = 0;
    v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
}

void sub_19A3132DC()
{
  unint64_t v0;

  sub_19A313730(319, &qword_1EE3976A8, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t destroy for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t a1)
{
  return sub_19A311AA4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_19A3119F0(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t *assignWithCopy for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_19A3119F0(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_19A311AA4(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_19A311AA4(v4, v5);
  *(_OWORD *)(a1 + 16) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator()
{
  return &type metadata for HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator;
}

id sub_19A313500(uint64_t a1)
{
  uint64_t v1;

  return sub_19A3123FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_19A313510(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKHeartbeatSeriesQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A31354C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_19A313730(0, &qword_1EE396FB0, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_19A3135D0(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  sub_19A313730(0, &qword_1EE396FB0, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  return sub_19A3125E0(a1, a2, a3, a4, a5, v5 + v13, *(void **)(v5 + ((*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_19A313660(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  void *v7;
  void (*v9)(void *, void *, unint64_t, uint64_t, void *);
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;

  v7 = a3;
  v9 = *(void (**)(void *, void *, unint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    swift_retain();
    v10 = a2;
    v11 = v7;
    v7 = (void *)sub_19A352F20();
    v13 = v12;

  }
  else
  {
    swift_retain();
    v14 = a2;
    v13 = 0xF000000000000000;
  }
  v15 = a5;
  v9(a2, v7, v13, a4, a5);

  sub_19A311A90((uint64_t)v7, v13);
  return swift_release();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void sub_19A313730(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A305E34();
    v7 = a3(a1, MEMORY[0x1E0CB0338], v6, MEMORY[0x1E0DEDB38]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

id static HKSamplePredicate.stateOfMind(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_19A308AE4(0, &qword_1EE397840);
  *a2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
  a2[1] = a1;
  return a1;
}

id HKStateOfMindValenceClassification.init(valence:)(double a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = HKStateOfMindValenceClassificationForValence(a1);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_integerValue);

  return v3;
}

uint64_t static HKStateOfMindLabel.optionsForValence(_:)(double a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;

  v1 = HKStateOfMindLabelOptionsForValence(a1);
  sub_19A308AE4(0, (unint64_t *)&qword_1EE399280);
  v2 = sub_19A3534CC();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_15:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  result = sub_19A3539B8();
  v3 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x19AEC6A20](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_integerValue);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_19A3145C4(0, v6[2] + 1, 1, v6, &qword_1EE397890, type metadata accessor for Label);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_19A3145C4((_QWORD *)(v10 > 1), v11 + 1, 1, v6, &qword_1EE397890, type metadata accessor for Label);
      ++v5;
      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
    }
    while (v3 != v5);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t static HKStateOfMindLabel.allActiveCases.getter()
{
  return sub_19A3141D4((uint64_t (*)(void))HKStateOfMindAllActiveLabels, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_19A31492C);
}

uint64_t HKStateOfMind.labels.getter()
{
  return sub_19A313FFC((SEL *)&selRef_labels, &qword_1EE397890, type metadata accessor for Label);
}

uint64_t HKStateOfMind.associations.getter()
{
  return sub_19A313FFC((SEL *)&selRef_associations, &qword_1EE397888, type metadata accessor for Association);
}

id HKStateOfMind.init(date:kind:valence:labels:associations:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v18;

  v12 = sub_19A352FD4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = HKStateOfMind.init(date:kind:valence:labels:associations:context:metadata:)((uint64_t)v15, a2, a3, a4, a6, 0, 0, a5);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v16;
}

id HKStateOfMind.init(date:kind:valence:labels:associations:context:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7, void *a8)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v28;

  v13 = (void *)sub_19A352F5C();
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    sub_19A35391C();
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      sub_19A353628();
      sub_19A3538F8();
      sub_19A353928();
      sub_19A353934();
      sub_19A353904();
      v15 = v16;
    }
    while (v14 != v16);
  }
  swift_bridgeObjectRelease();
  sub_19A308AE4(0, (unint64_t *)&qword_1EE399280);
  v17 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a4 + 16);
  if (v18)
  {
    v28 = a8;
    v19 = v13;
    v20 = a1;
    sub_19A35391C();
    v21 = 0;
    do
    {
      v22 = v21 + 1;
      sub_19A353628();
      sub_19A3538F8();
      sub_19A353928();
      sub_19A353934();
      sub_19A353904();
      v21 = v22;
    }
    while (v18 != v22);
    swift_bridgeObjectRelease();
    a1 = v20;
    v13 = v19;
    a8 = v28;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v23 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  if (!a7)
  {
    v24 = 0;
    if (!a8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v24 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  if (a8)
  {
LABEL_11:
    a8 = (void *)sub_19A35331C();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v25 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindWithDate_kind_valence_labels_associations_context_metadata_, v13, a2, v17, v23, v24, a8, a5);

  v26 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
  return v25;
}

id HKStateOfMind.init(date:reflectiveInterval:valence:labels:domains:context:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, double a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a5;
  v37 = a3;
  v15 = sub_19A352FD4();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(char *, uint64_t))(v16 + 16);
  v38 = v20;
  v19(v18, a1);
  v21 = HKStateOfMindKindFromReflectiveInterval(a2);
  v22 = v21;
  v23 = *(_QWORD *)(a4 + 16);
  if (v23)
  {
    v32 = v21;
    v33 = a6;
    v34 = a7;
    v35 = a1;
    v36 = v8;
    v40 = MEMORY[0x1E0DEE9D8];
    sub_19A314958(0, v23, 0);
    v24 = 0;
    v25 = v40;
    do
    {
      v26 = HKStateOfMindAssociationFromDomain(*(_QWORD *)(a4 + 8 * v24 + 32));
      v40 = v25;
      v28 = *(_QWORD *)(v25 + 16);
      v27 = *(_QWORD *)(v25 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_19A314958(v27 > 1, v28 + 1, 1);
        v25 = v40;
      }
      ++v24;
      *(_QWORD *)(v25 + 16) = v28 + 1;
      *(_QWORD *)(v25 + 8 * v28 + 32) = v26;
    }
    while (v23 != v24);
    swift_bridgeObjectRelease();
    a1 = v35;
    a6 = v33;
    a7 = v34;
    v22 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
  }
  v29 = HKStateOfMind.init(date:kind:valence:labels:associations:context:metadata:)((uint64_t)v18, v22, v37, v25, a8, v39, a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v38);
  return v29;
}

uint64_t HKStateOfMind.domains.getter()
{
  return sub_19A313FFC((SEL *)&selRef_domains, &qword_1EE397880, type metadata accessor for __HKStateOfMindDomain);
}

uint64_t sub_19A313FFC(SEL *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  void *v3;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t);

  v6 = objc_msgSend(v3, *a1);
  sub_19A308AE4(0, (unint64_t *)&qword_1EE399280);
  v7 = sub_19A3534CC();

  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_15:
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v11;
  }
  swift_bridgeObjectRetain();
  result = sub_19A3539B8();
  v8 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v8 >= 1)
  {
    v17 = a3;
    v10 = 0;
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x19AEC6A20](v10, v7);
      else
        v12 = *(id *)(v7 + 8 * v10 + 32);
      v13 = v12;
      v14 = objc_msgSend(v12, sel_integerValue);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = sub_19A3145C4(0, v11[2] + 1, 1, v11, a2, v17);
      v16 = v11[2];
      v15 = v11[3];
      if (v16 >= v15 >> 1)
        v11 = sub_19A3145C4((_QWORD *)(v15 > 1), v16 + 1, 1, v11, a2, v17);
      ++v10;
      v11[2] = v16 + 1;
      v11[v16 + 4] = v14;
    }
    while (v8 != v10);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t static HKStateOfMindDomain.allActiveCases.getter()
{
  return sub_19A3141D4((uint64_t (*)(void))HKStateOfMindAllActiveDomains, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_19A314984);
}

uint64_t sub_19A3141D4(uint64_t (*a1)(void), uint64_t (*a2)(BOOL, uint64_t, uint64_t))
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = (id)a1();
  sub_19A308AE4(0, (unint64_t *)&qword_1EE399280);
  v4 = sub_19A3534CC();

  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v5 = sub_19A3539B8();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_13;
LABEL_3:
  v14 = MEMORY[0x1E0DEE9D8];
  result = a2(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v8 = v14;
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x19AEC6A20](v7, v4);
      else
        v9 = *(id *)(v4 + 8 * v7 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_integerValue);

      v13 = *(_QWORD *)(v14 + 16);
      v12 = *(_QWORD *)(v14 + 24);
      if (v13 >= v12 >> 1)
        a2(v12 > 1, v13 + 1, 1);
      ++v7;
      *(_QWORD *)(v14 + 16) = v13 + 1;
      *(_QWORD *)(v14 + 8 * v13 + 32) = v11;
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t HKStateOfMindDomainCategory.domains.getter(uint64_t a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = HKStateOfMindDomainsInCategory(a1);
  sub_19A308AE4(0, (unint64_t *)&qword_1EE399280);
  v2 = sub_19A3534CC();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v3 = sub_19A3539B8();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_13;
LABEL_3:
  v12 = MEMORY[0x1E0DEE9D8];
  result = sub_19A314984(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v6 = v12;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x19AEC6A20](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_integerValue);

      v11 = *(_QWORD *)(v12 + 16);
      v10 = *(_QWORD *)(v12 + 24);
      if (v11 >= v10 >> 1)
        sub_19A314984(v10 > 1, v11 + 1, 1);
      ++v5;
      *(_QWORD *)(v12 + 16) = v11 + 1;
      *(_QWORD *)(v12 + 8 * v11 + 32) = v9;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t static HKStateOfMindDomainCategory.allCases.getter()
{
  return sub_19A3141D4((uint64_t (*)(void))HKStateOfMindAllDomainCategories, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_19A3149B0);
}

uint64_t sub_19A31451C()
{
  sub_19A3149DC();
  return sub_19A3534B4();
}

uint64_t sub_19A314578()
{
  sub_19A3149DC();
  return sub_19A35349C();
}

_QWORD *sub_19A3145C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, void (*a6)(uint64_t))
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      sub_19A31511C(0, a5, a6);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v15 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4])
          memmove(v15, a4 + 4, 8 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_19A315034(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_19A3146D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_19A31511C(0, &qword_1EE397868, (void (*)(uint64_t))type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result);
  v10 = *(_QWORD *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_19A35397C();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_19A314F1C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

_QWORD *sub_19A3148E8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19A3145C4(a1, a2, a3, a4, &qword_1EE397860, type metadata accessor for Answer);
}

_QWORD *sub_19A3148FC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_19A3145C4(a1, a2, a3, a4, &qword_1EE397850, _s3__C6AnswerOMa_0);
}

uint64_t sub_19A314910(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314A6C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19A31492C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314BD0(a1, a2, a3, *v3, &qword_1EE397890, type metadata accessor for Label);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19A314958(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314BD0(a1, a2, a3, *v3, &qword_1EE397888, type metadata accessor for Association);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19A314984(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314BD0(a1, a2, a3, *v3, &qword_1EE397880, type metadata accessor for __HKStateOfMindDomain);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19A3149B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314BD0(a1, a2, a3, *v3, &qword_1EE397878, type metadata accessor for __HKStateOfMindDomainCategory);
  *v3 = (char *)result;
  return result;
}

unint64_t sub_19A3149DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE397848;
  if (!qword_1EE397848)
  {
    type metadata accessor for __HKStateOfMindDomain(255);
    result = MEMORY[0x19AEC7FB0](&unk_19A44D9E4, v1);
    atomic_store(result, (unint64_t *)&qword_1EE397848);
  }
  return result;
}

uint64_t sub_19A314A24(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_19A314D30(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_19A314A40(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_19A314BD0(a1, a2, a3, *v3, &qword_1EE397858, type metadata accessor for HKCategoryValueSleepAnalysis);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_19A314A6C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19A315168();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_19A3539E8();
  __break(1u);
  return result;
}

uint64_t sub_19A314BD0(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    sub_19A31511C(0, a5, a6);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10])
      memmove(v15, v16, 8 * v10);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v10] || v15 >= &v16[8 * v10])
  {
    memcpy(v15, v16, 8 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = sub_19A3539E8();
  __break(1u);
  return result;
}

uint64_t sub_19A314D30(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_19A31511C(0, &qword_1EE397870, (void (*)(uint64_t))type metadata accessor for UserDomainConceptLinkStruct);
  v10 = *(_QWORD *)(type metadata accessor for UserDomainConceptLinkStruct(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for UserDomainConceptLinkStruct(0) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_19A3539E8();
  __break(1u);
  return result;
}

uint64_t sub_19A314F1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_19A3539E8();
  __break(1u);
  return result;
}

char *sub_19A315034(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_19A3539E8();
  __break(1u);
  return result;
}

void sub_19A31511C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_19A353A9C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_19A315168()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397898)
  {
    v0 = sub_19A353A9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397898);
  }
}

id HKStatisticsQueryDescriptor.predicate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)(v1 + 8);
  v5 = *(id *)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  v3 = v2;
  return v5;
}

void HKStatisticsQueryDescriptor.predicate.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(void **)(v1 + 8);

  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
}

uint64_t (*HKStatisticsQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKStatisticsQueryDescriptor.options.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKStatisticsQueryDescriptor.options.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKStatisticsQueryDescriptor.options.modify())()
{
  return nullsub_1;
}

uint64_t HKStatisticsQueryDescriptor.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsQueryDescriptor() + 24);
  return sub_19A3152B8(v3, a1);
}

uint64_t type metadata accessor for HKStatisticsQueryDescriptor()
{
  uint64_t result;

  result = qword_1EE397920;
  if (!qword_1EE397920)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19A3152B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HKStatisticsQueryDescriptor.dateInterval.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsQueryDescriptor() + 24);
  return sub_19A30A5CC(a1, v3);
}

uint64_t (*HKStatisticsQueryDescriptor.dateInterval.modify())()
{
  type metadata accessor for HKStatisticsQueryDescriptor();
  return nullsub_1;
}

uint64_t HKStatisticsQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKStatisticsQueryDescriptor() + 28);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v3 + 8);
  return swift_bridgeObjectRetain();
}

__n128 HKStatisticsQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 *v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for HKStatisticsQueryDescriptor() + 28));
  swift_bridgeObjectRelease();
  result = v5;
  *v3 = v5;
  v3[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKStatisticsQueryDescriptor.queryAttributes.modify())()
{
  type metadata accessor for HKStatisticsQueryDescriptor();
  return nullsub_1;
}

uint64_t HKStatisticsQueryDescriptor.init(predicate:options:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t Descriptor;
  char *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  v5 = *a1;
  v6 = a1[1];
  Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  v8 = (char *)a3 + *(int *)(Descriptor + 24);
  v9 = sub_19A352CB0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = (_QWORD *)((char *)a3 + *(int *)(Descriptor + 28));
  *v11 = 0;
  v11[1] = 0;
  v11[2] = -1;
  *a3 = v5;
  a3[1] = v6;
  a3[2] = a2;
  return result;
}

uint64_t HKStatisticsQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch();
}

uint64_t sub_19A3154BC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[11];
  v1 = v0[12];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AA40;
  v3 = swift_continuation_init();
  sub_19A315520(v3, v1, v2);
  return swift_continuation_await();
}

void sub_19A315520(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t Descriptor;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[6];

  sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)aBlock - v7;
  objc_opt_self();
  v9 = swift_dynamicCastObjCClassUnconditional();
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = objc_allocWithZone((Class)HKStatisticsQuery);
  aBlock[4] = sub_19A316248;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A3078D8;
  aBlock[3] = &block_descriptor_6;
  v14 = _Block_copy(aBlock);
  v15 = a3;
  v16 = objc_msgSend(v13, sel_initWithQuantityType_quantitySamplePredicate_options_completionHandler_, v9, v10, v11, v14);
  _Block_release(v14);
  swift_release();
  Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  v18 = a2 + *(int *)(Descriptor + 28);
  v19 = *(_QWORD *)(v18 + 16);
  if (*(_QWORD *)(v18 + 8))
  {
    swift_bridgeObjectRetain();
    v20 = (void *)sub_19A353400();
  }
  else
  {
    v20 = 0;
  }
  objc_msgSend(v16, sel_setDebugIdentifier_, v20);

  objc_msgSend(v16, sel_setQualityOfService_, v19);
  swift_bridgeObjectRelease();
  sub_19A3152B8(a2 + *(int *)(Descriptor + 24), (uint64_t)v8);
  v21 = sub_19A352CB0();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v21) != 1)
  {
    v23 = (void *)sub_19A352C5C();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  }
  objc_msgSend(v16, sel__setDateInterval_, v23);

  objc_msgSend(v15, sel_executeQuery_, v16);
}

void sub_19A315788(uint64_t a1, void *a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v8;
  id v9;
  id v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    v13 = (uint64_t)a2;
    v8 = *(_QWORD *)(*(_QWORD *)(a5 + 64) + 40);
    v9 = a2;
    sub_19A316268((uint64_t)&v13, v8);
    swift_continuation_throwingResume();
    return;
  }
  if (a3)
  {
    type metadata accessor for Code(0);
    v13 = 11;
    v10 = a3;
    sub_19A306A54(&qword_1EE397058, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_19A44EF60);
    if ((sub_19A352DF4() & 1) != 0)
    {
      v13 = 0;
      sub_19A316268((uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(a5 + 64) + 40));
      swift_continuation_throwingResume();

      return;
    }
    sub_19A305E34();
    swift_allocError();
    *v12 = a3;
  }
  else
  {
    type metadata accessor for HKError(0);
    sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
    sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
    sub_19A352EB4();
    sub_19A305E34();
    swift_allocError();
    *v11 = v13;
  }
  swift_continuation_throwingResumeWithError();
}

uint64_t sub_19A31592C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_19A315948()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[12];
  v1 = v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AE00;
  v3 = swift_continuation_init();
  sub_19A315520(v3, v1, v2);
  return swift_continuation_await();
}

char *initializeBufferWithCopyOfBuffer for HKStatisticsQueryDescriptor(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v10 = *(int *)(a3 + 24);
    v11 = &a1[v10];
    v12 = (char *)a2 + v10;
    v13 = sub_19A352CB0();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v16 = v4;
    v17 = v9;
    if (v15(v12, 1, v13))
    {
      sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v19 = *(int *)(a3 + 28);
    v20 = &v7[v19];
    v21 = (char **)((char *)a2 + v19);
    v22 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 2) = v21[2];
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for HKStatisticsQueryDescriptor(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = sub_19A352CB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HKStatisticsQueryDescriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (const void *)(a2 + v8);
  v11 = sub_19A352CB0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v6;
  v15 = v7;
  if (v13(v10, 1, v11))
  {
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKStatisticsQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(int *)(a3 + 24);
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_19A352CB0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = *(int *)(a3 + 28);
  v22 = (_QWORD *)(a1 + v21);
  v23 = a2 + v21;
  *v22 = *(_QWORD *)(a2 + v21);
  v22[1] = *(_QWORD *)(a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[2] = *(_QWORD *)(v23 + 16);
  return a1;
}

uint64_t initializeWithTake for HKStatisticsQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_19A352CB0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
  return a1;
}

uint64_t assignWithTake for HKStatisticsQueryDescriptor(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = sub_19A352CB0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKStatisticsQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A316070(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HKStatisticsQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_19A316108(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_19A3162BC(0, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_19A31618C()
{
  unint64_t v0;

  sub_19A3162BC(319, (unint64_t *)&qword_1EE397200, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_19A316224()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_19A316248(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_19A315788(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_19A316268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3162BC(0, &qword_1EE397960, (void (*)(uint64_t))sub_19A316308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_19A3162BC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_19A353760();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_19A316308()
{
  unint64_t result;

  result = qword_1EE397968;
  if (!qword_1EE397968)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE397968);
  }
  return result;
}

id HKActivitySummaryQueryDescriptor.predicate.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void HKActivitySummaryQueryDescriptor.predicate.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKActivitySummaryQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKActivitySummaryQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 HKActivitySummaryQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*HKActivitySummaryQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKActivitySummaryQueryDescriptor.init(predicate:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = -1;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t HKActivitySummaryQueryDescriptor.result(for:)(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;

  *(_QWORD *)(v2 + 136) = a1;
  v3 = v1[1];
  *(_OWORD *)(v2 + 144) = *v1;
  *(_OWORD *)(v2 + 160) = v3;
  return swift_task_switch();
}

uint64_t sub_19A316438()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v1 = v0[20];
  v3 = (void *)v0[17];
  v2 = v0[18];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A30D76C;
  v4 = swift_continuation_init();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = objc_allocWithZone((Class)HKActivitySummaryQuery);
  v0[10] = MEMORY[0x1E0C809B0];
  v0[14] = sub_19A316714;
  v0[15] = v5;
  v0[11] = 1107296256;
  v0[12] = sub_19A316E28;
  v0[13] = &block_descriptor_7;
  v7 = _Block_copy(v0 + 10);
  v8 = v3;
  v9 = objc_msgSend(v6, sel_initWithPredicate_resultsHandler_, v2, v7);
  _Block_release(v7);
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRetain();
    v10 = (void *)sub_19A353400();
  }
  else
  {
    v10 = 0;
  }
  v11 = v0[21];
  v12 = (void *)v0[17];
  objc_msgSend(v9, sel_setDebugIdentifier_, v10);

  objc_msgSend(v9, sel_setQualityOfService_, v11);
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_executeQuery_, v9);

  return swift_continuation_await();
}

uint64_t sub_19A3165CC(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v9 = v12;
    }
    sub_19A305E34();
    swift_allocError();
    *v10 = v9;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A3166F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A316714(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_19A3165CC(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_19A31671C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *(_QWORD *)v5 = v3;
  *(_QWORD *)(v5 + 8) = sub_19A309ABC;
  *(_QWORD *)(v5 + 136) = a2;
  v6 = v2[1];
  *(_OWORD *)(v5 + 144) = *v2;
  *(_OWORD *)(v5 + 160) = v6;
  return swift_task_switch();
}

uint64_t HKActivitySummaryQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_19A316ED0(0);
  *v1 = v0;
  v1[1] = sub_19A305DB8;
  return sub_19A3535A4();
}

uint64_t sub_19A3167F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_19A316ED0(0);
  *v2 = v1;
  v2[1] = sub_19A305F14;
  return sub_19A3535A4();
}

uint64_t sub_19A31685C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  sub_19A316ED0(0);
  *v5 = v4;
  v5[1] = sub_19A306028;
  return sub_19A3535A4();
}

uint64_t HKActivitySummaryQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_19A316F3C(0);
  return sub_19A353598();
}

uint64_t sub_19A3168F4()
{
  uint64_t v0;

  sub_19A316F3C(0);
  sub_19A353598();
  return sub_19A317644(v0);
}

uint64_t HKActivitySummaryQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  id (*v17)(uint64_t);
  _QWORD *v18;
  void *v19;

  sub_19A317760(0, &qword_1EE397990, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v9 = *(void **)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  v17 = sub_19A316F54;
  v18 = v12;
  v19 = a1;
  sub_19A316EE4(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v9;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A316A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, char *, uint64_t);
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t aBlock;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, void *, uint64_t, void *);
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;

  v27 = a4;
  v28 = a5;
  v25 = a3;
  v26 = a1;
  sub_19A317760(0, &qword_1EE396F98, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v25 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v12((char *)&v25 - v10, a1, v8);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  v15 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 32);
  v15(v14 + v13, v11, v8);
  v16 = objc_allocWithZone((Class)HKActivitySummaryQuery);
  v33 = sub_19A317684;
  v34 = v14;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_19A316E28;
  v32 = &block_descriptor_25;
  v17 = _Block_copy(&aBlock);
  v18 = objc_msgSend(v16, sel_initWithPredicate_resultsHandler_, a2, v17, v25);
  _Block_release(v17);
  swift_release();
  v12(v11, v26, v8);
  v19 = swift_allocObject();
  v20 = v19 + v13;
  v21 = v27;
  v15(v20, v11, v8);
  v33 = sub_19A317684;
  v34 = v19;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = sub_19A316E28;
  v32 = &block_descriptor_32_0;
  v22 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v18, sel_setUpdateHandler_, v22);
  _Block_release(v22);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v23 = (void *)sub_19A353400();
  }
  else
  {
    v23 = 0;
  }
  objc_msgSend(v18, sel_setDebugIdentifier_, v23);

  objc_msgSend(v18, sel_setQualityOfService_, v28);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t sub_19A316CBC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;

  sub_19A317760(0, &qword_1EE397B20, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - v8;
  if (a2)
  {
    v14 = a2;
    sub_19A317760(0, &qword_1EE396F98, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    swift_bridgeObjectRetain();
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v11 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      v13 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v11 = v14;
    }
    v14 = v11;
    v12 = a3;
    sub_19A317760(0, &qword_1EE396F98, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    return sub_19A353580();
  }
}

uint64_t sub_19A316E28(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A316F00();
    v5 = sub_19A3534CC();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void sub_19A316ED0(uint64_t a1)
{
  sub_19A317760(a1, &qword_1EE397980, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

void sub_19A316EE4(uint64_t a1)
{
  sub_19A30FA98(a1, &qword_1EE396FA0, (uint64_t (*)(uint64_t))sub_19A316F00, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

unint64_t sub_19A316F00()
{
  unint64_t result;

  result = qword_1EE396FA8;
  if (!qword_1EE396FA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE396FA8);
  }
  return result;
}

void sub_19A316F3C(uint64_t a1)
{
  sub_19A317760(a1, &qword_1EE397988, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

id sub_19A316F54(uint64_t a1)
{
  uint64_t *v1;

  return sub_19A316A50(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_19A316F60(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  id (*v17)(uint64_t);
  _QWORD *v18;
  void *v19;

  sub_19A317760(0, &qword_1EE397990, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v9 = *(void **)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  v17 = sub_19A3177D4;
  v18 = v12;
  v19 = a1;
  sub_19A316EE4(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v9;
  sub_19A3535C8();

  return swift_release();
}

void sub_19A31708C(uint64_t a1)
{
  uint64_t v1;

  sub_19A307670(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19A317098()
{
  return sub_19A306A54(&qword_1EE3979C8, type metadata accessor for HKActivitySummaryQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKActivitySummaryQueryDescriptor.Results.Iterator);
}

uint64_t type metadata accessor for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397AE8);
}

uint64_t sub_19A3170D8()
{
  return sub_19A306A54(&qword_1EE3979D0, type metadata accessor for HKActivitySummaryQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKActivitySummaryQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKActivitySummaryQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397A58);
}

uint64_t assignWithCopy for HKActivitySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for HKActivitySummaryQueryDescriptor(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKActivitySummaryQueryDescriptor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKActivitySummaryQueryDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKActivitySummaryQueryDescriptor()
{
  return &type metadata for HKActivitySummaryQueryDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317338(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t destroy for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_19A317380(a1, a2, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t initializeWithCopy for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3173C0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t assignWithCopy for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317410(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t initializeWithTake for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317460(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t assignWithTake for HKActivitySummaryQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3174B0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316F3C);
}

uint64_t getEnumTagSinglePayload for HKActivitySummaryQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A3172E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A3172EC);
}

void sub_19A3172EC(uint64_t a1)
{
  sub_19A30FA98(a1, &qword_1EE3979F8, (uint64_t (*)(uint64_t))sub_19A316EE4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKQueryAsyncStream);
}

uint64_t storeEnumTagSinglePayload for HKActivitySummaryQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A317314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_19A3172EC);
}

uint64_t sub_19A317320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3175AC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_19A316F3C);
}

uint64_t initializeBufferWithCopyOfBuffer for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317338(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A317338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1, a2, v6);
}

uint64_t destroy for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  return sub_19A317380(a1, a2, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A317380(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3173C0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A3173C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317410(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A317410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A317460(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A317460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for HKActivitySummaryQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3174B0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t sub_19A3174B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKActivitySummaryQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A317500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for HKActivitySummaryQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A317554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_19A316ED0);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_19A3175A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3175AC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_19A316ED0);
}

uint64_t sub_19A3175AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19A317644(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKActivitySummaryQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroy_21Tm()
{
  uint64_t v0;
  uint64_t v1;

  sub_19A317760(0, &qword_1EE396F98, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19A3176FC(uint64_t a1, void *a2, void *a3)
{
  sub_19A317760(0, &qword_1EE396F98, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  return sub_19A316CBC(a1, a2, a3);
}

void sub_19A317760(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_19A316EE4(255);
    v7 = v6;
    v8 = sub_19A305E34();
    v9 = a3(a1, v7, v8, MEMORY[0x1E0DEDB38]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

id HKElectrocardiogramQueryDescriptor.electrocardiogram.getter()
{
  id *v0;

  return *v0;
}

void HKElectrocardiogramQueryDescriptor.electrocardiogram.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKElectrocardiogramQueryDescriptor.electrocardiogram.modify())()
{
  return nullsub_1;
}

uint64_t HKElectrocardiogramQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

__n128 HKElectrocardiogramQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*HKElectrocardiogramQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKElectrocardiogramQueryDescriptor.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = -1;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t HKElectrocardiogramQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_19A3178B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(int *)(type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0) + 20);
  *(_DWORD *)(v0 + 152) = v2;
  v3 = *(void **)(v1 + v2);
  if (v3)
  {
    if (objc_msgSend(v3, sel_nextObject))
    {
      sub_19A35379C();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)(v0 + 80) = 0u;
      *(_OWORD *)(v0 + 96) = 0u;
    }
    sub_19A317DCC(v0 + 80, v0 + 48);
    if (*(_QWORD *)(v0 + 72))
    {
      sub_19A317E10((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
      sub_19A308AE4(0, &qword_1EE397B38);
      swift_dynamicCast();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
    }
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_19A318F00(v0 + 48, (uint64_t (*)(_QWORD))sub_19A317D74);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v5 = v0;
  v5[1] = sub_19A317A2C;
  return sub_19A3535A4();
}

uint64_t sub_19A317A2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A317A90()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  HKElectrocardiogramVoltageMeasurement_optional v6;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = *(int *)(v0 + 152);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = objc_msgSend(*(id *)(v0 + 112), sel_voltageMeasurementEnumerator);

    *(_QWORD *)(v3 + v2) = v4;
  }
  v6 = HKElectrocardiogramQueryDescriptor.Results.Iterator.nextMeasurement()();
  return (*(uint64_t (**)(Class, __n128))(v0 + 8))(v6.value.super.isa, *(__n128 *)&v6.value._timeSinceSampleStart);
}

uint64_t sub_19A317B0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKElectrocardiogramQueryDescriptor.Results.Iterator.awaitMeasurementEnumerator()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v2 = v1;
  v2[1] = sub_19A317B94;
  return sub_19A3535A4();
}

uint64_t sub_19A317B94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A317BF8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
    v3 = objc_msgSend(*(id *)(v0 + 16), sel_voltageMeasurementEnumerator);

    v4 = *(int *)(type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0) + 20);
    *(_QWORD *)(v2 + v4) = v3;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

HKElectrocardiogramVoltageMeasurement_optional __swiftcall HKElectrocardiogramQueryDescriptor.Results.Iterator.nextMeasurement()()
{
  uint64_t v0;
  void *v1;
  HKQuantity *v2;
  Swift::Bool v3;
  double v4;
  objc_class *v5;
  objc_class *v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  HKElectrocardiogramVoltageMeasurement_optional result;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0) + 20));
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_8:
    sub_19A318F00((uint64_t)&v7, (uint64_t (*)(_QWORD))sub_19A317D74);
    v5 = 0;
    goto LABEL_9;
  }
  if (objc_msgSend(v1, sel_nextObject))
  {
    sub_19A35379C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_19A317DCC((uint64_t)v9, (uint64_t)&v7);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_8;
  sub_19A317E10(&v7, v9);
  sub_19A308AE4(0, &qword_1EE397B38);
  swift_dynamicCast();
  v5 = v6;
LABEL_9:
  result.value._timeSinceSampleStart = v4;
  result.value._leadIVoltage = v2;
  result.value.super.isa = v5;
  result.is_nil = v3;
  return result;
}

uint64_t type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397C88);
}

void sub_19A317D74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398640)
  {
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398640);
  }
}

uint64_t sub_19A317DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317D74();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_19A317E10(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_19A317E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_19A309ABC;
  v3[16] = v1;
  return swift_task_switch();
}

uint64_t sub_19A317E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE398C98 + dword_1EE398C98);
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = sub_19A317EF4;
  return v9(a2, a3);
}

uint64_t sub_19A317EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    **(_QWORD **)(v4 + 24) = v1;
  else
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t HKElectrocardiogramQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  result = type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0);
  *(_QWORD *)(a1 + *(int *)(result + 20)) = 0;
  return result;
}

void sub_19A317FB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_19A308AE4(255, &qword_1EE396F90);
    v7 = sub_19A305E34();
    v8 = a3(a1, v6, v7, MEMORY[0x1E0DEDB38]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_19A318030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  *(_QWORD *)(a1 + *(int *)(type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0) + 20)) = 0;
  return sub_19A318F00(v1, type metadata accessor for HKElectrocardiogramQueryDescriptor.Results);
}

uint64_t HKElectrocardiogramQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A317FB0(0, qword_1EE397B50, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v8 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v8;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = v10;
  v12[6] = a1;
  v17 = sub_19A3183B0;
  v18 = v12;
  v19 = a1;
  sub_19A308AE4(0, &qword_1EE396F90);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v8;
  sub_19A3535C8();

  return swift_release();
}

id sub_19A3181D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  _QWORD v25[2];
  _QWORD aBlock[6];

  v25[1] = a3;
  sub_19A317FB0(0, &qword_1EE396F88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v25 - v15, a1, v12);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v16, v12);
  *(_QWORD *)(v18 + ((v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a6;
  v19 = objc_allocWithZone((Class)HKElectrocardiogramQuery);
  aBlock[4] = sub_19A318FC0;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A3078D8;
  aBlock[3] = &block_descriptor_8;
  v20 = _Block_copy(aBlock);
  v21 = a6;
  v22 = objc_msgSend(v19, sel_initWithElectrocardiogram_sampleHandler_, a2, v20);
  _Block_release(v20);
  swift_release();
  if (a4)
  {
    swift_bridgeObjectRetain();
    v23 = (void *)sub_19A353400();
  }
  else
  {
    v23 = 0;
  }
  objc_msgSend(v22, sel_setDebugIdentifier_, v23);

  objc_msgSend(v22, sel_setQualityOfService_, a5);
  swift_bridgeObjectRelease();
  return v22;
}

void sub_19A3183B4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;

  sub_19A317FB0(0, &qword_1EE397CC0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - v12;
  if (a2)
  {
    v14 = a2;
    objc_msgSend(a5, sel_stopQuery_, a1);
    v19 = v14;
    sub_19A317FB0(0, &qword_1EE396F88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    v15 = v14;
    sub_19A353574();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v19 = 0;
    sub_19A353580();

  }
  else
  {
    v16 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      v18 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v16 = v19;
    }
    v19 = v16;
    v17 = a3;
    sub_19A317FB0(0, &qword_1EE396F88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    sub_19A353580();
  }
}

uint64_t sub_19A318560(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  _BYTE v16[16];
  uint64_t (*v17)();
  _QWORD *v18;
  void *v19;

  sub_19A317FB0(0, qword_1EE397B50, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v16[-v6];
  v8 = *(void **)v1;
  v9 = *(_QWORD *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v8;
  v12[3] = v9;
  v12[4] = v11;
  v12[5] = v10;
  v12[6] = a1;
  v17 = sub_19A3183B0;
  v18 = v12;
  v19 = a1;
  sub_19A308AE4(0, &qword_1EE396F90);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  swift_bridgeObjectRetain();
  v13 = a1;
  v14 = v8;
  sub_19A3535C8();

  return swift_release();
}

void sub_19A3186A4(uint64_t a1)
{
  uint64_t v1;

  sub_19A30773C(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19A3186B0()
{
  return sub_19A306A54(&qword_1EE397B68, type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKElectrocardiogramQueryDescriptor.Results.Iterator);
}

uint64_t sub_19A3186DC()
{
  return sub_19A306A54(&qword_1EE397B70, type metadata accessor for HKElectrocardiogramQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKElectrocardiogramQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397BF8);
}

ValueMetadata *type metadata accessor for HKElectrocardiogramQueryDescriptor()
{
  return &type metadata for HKElectrocardiogramQueryDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1)
{
  uint64_t v2;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKElectrocardiogramQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKElectrocardiogramQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A318918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A318954(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

void sub_19A318954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EE397B98)
  {
    v2 = sub_19A308AE4(255, &qword_1EE396F90);
    v5 = type metadata accessor for HKQueryAsyncStream(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EE397B98);
  }
}

uint64_t storeEnumTagSinglePayload for HKElectrocardiogramQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A3189C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A318954(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A318A04()
{
  unint64_t v0;

  sub_19A317FB0(319, &qword_1EE397B48, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void destroy for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t initializeWithCopy for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = v9;

  return a1;
}

uint64_t initializeWithTake for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for HKElectrocardiogramQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for HKElectrocardiogramQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A318D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HKElectrocardiogramQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_19A318DE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_19A317FB0(0, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void sub_19A318E6C()
{
  unint64_t v0;

  sub_19A317FB0(319, (unint64_t *)&qword_1EE397B30, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

id sub_19A318EF0(uint64_t a1)
{
  uint64_t v1;

  return sub_19A3181D0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_19A318F00(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_19A318F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_19A317FB0(0, &qword_1EE396F88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_19A318FC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_19A317FB0(0, &qword_1EE396F88, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_19A3183B4(a1, a2, a3, v3 + v9, *(void **)(v3 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t sub_19A319054()
{
  _BYTE *v0;

  if (*v0)
    return 0x746567726174;
  else
    return 1701869940;
}

uint64_t sub_19A319084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19A31EDB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_19A3190A8()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_19A3190B4@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

void sub_19A3190D0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E37F84C8;
}

uint64_t sub_19A3190E0()
{
  sub_19A31EBD8();
  sub_19A31EC20();
  return sub_19A353C88();
}

uint64_t sub_19A319124()
{
  sub_19A31EC20();
  return sub_19A353C94();
}

uint64_t sub_19A31914C()
{
  sub_19A31EC20();
  return sub_19A353CA0();
}

uint64_t sub_19A319174(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_19A31EECC(0, &qword_1EE397EB8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A31EC20();
  sub_19A353B98();
  v9[15] = 0;
  sub_19A353A6C();
  if (!v1)
  {
    type metadata accessor for UserDomainConceptLinkStruct(0);
    v9[14] = 1;
    sub_19A353010();
    sub_19A306A54(&qword_1EE397EC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_19A353A78();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_19A3192D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v19 = a2;
  v21 = sub_19A353010();
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A31EECC(0, &qword_1EE397EA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A31EC20();
  sub_19A353B80();
  if (v2)
  {
    v16 = (uint64_t)a1;
  }
  else
  {
    v17 = a1;
    v12 = v6;
    v14 = v20;
    v13 = v21;
    v24 = 0;
    *v11 = sub_19A353A24();
    v23 = 1;
    sub_19A306A54(&qword_1EE397EB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    sub_19A353A30();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v22);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))((char *)v11 + *(int *)(v9 + 20), v14, v13);
    sub_19A31E498((uint64_t)v11, v19);
    v16 = (uint64_t)v17;
  }
  return __swift_destroy_boxed_opaque_existential_1(v16);
}

uint64_t sub_19A3194FC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_19A352FEC();
  else
    return 0;
}

uint64_t sub_19A319524()
{
  sub_19A353B38();
  sub_19A353B44();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_19A35337C();
  return sub_19A353B68();
}

uint64_t sub_19A3195B4()
{
  sub_19A353B44();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return sub_19A35337C();
}

uint64_t sub_19A31962C()
{
  sub_19A353B38();
  sub_19A353B44();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_19A35337C();
  return sub_19A353B68();
}

uint64_t sub_19A3196B8()
{
  return 0;
}

uint64_t sub_19A3196C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19A3192D0(a1, a2);
}

uint64_t sub_19A3196D4(_QWORD *a1)
{
  return sub_19A319174(a1);
}

uint64_t sub_19A3196E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_19A319A60(v1, a1);
}

uint64_t sub_19A3196F4()
{
  sub_19A306A54(&qword_1EE397CF0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FE0C);
  sub_19A306A54(&qword_1EE397E98, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FDA4);
  return sub_19A3532D4();
}

uint64_t sub_19A31978C()
{
  sub_19A306A54(&qword_1EE397EC8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FC24);
  return sub_19A353280();
}

uint64_t sub_19A3197F0()
{
  sub_19A306A54(&qword_1EE397EC8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FC24);
  return sub_19A35328C();
}

uint64_t sub_19A319850()
{
  sub_19A306A54(&qword_1EE397EC8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FC24);
  return sub_19A353274();
}

uint64_t UserDomainConceptLinkStructWrapper.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value);
}

uint64_t UserDomainConceptLinkStructWrapper.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A319A60(v1 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v5);
  v6 = &v5[*(int *)(v3 + 20)];
  v7 = sub_19A353010();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v6, v7);
}

uint64_t type metadata accessor for UserDomainConceptLinkStruct(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397E08);
}

uint64_t sub_19A319A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserDomainConceptLinkStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id UserDomainConceptLinkStructWrapper.__allocating_init(target:type:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value];
  v7 = &v6[*(int *)(type metadata accessor for UserDomainConceptLinkStruct(0) + 20)];
  v8 = sub_19A353010();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  *(_QWORD *)v6 = a2;
  v12.receiver = v5;
  v12.super_class = v2;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v10;
}

id UserDomainConceptLinkStructWrapper.init(target:type:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = &v2[OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value];
  v7 = &v6[*(int *)(type metadata accessor for UserDomainConceptLinkStruct(0) + 20)];
  v8 = sub_19A353010();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  *(_QWORD *)v6 = a2;
  v12.receiver = v2;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v10;
}

uint64_t UserDomainConceptLinkStructWrapper.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19A353010();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 40;
  v13 = 0xE100000000000000;
  v9 = v0 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value;
  v11[1] = *(_QWORD *)(v0 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value);
  sub_19A353A90();
  sub_19A353454();
  swift_bridgeObjectRelease();
  sub_19A353454();
  sub_19A319A60(v9, (uint64_t)v3);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, &v3[*(int *)(v1 + 20)], v4);
  sub_19A306A54(&qword_1EE397CD8, v5, MEMORY[0x1E0CB09F0]);
  sub_19A353A90();
  sub_19A353454();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  sub_19A353454();
  return v12;
}

uint64_t UserDomainConceptLinkStructWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v5;
  _BYTE v6[24];
  uint64_t v7;

  swift_getObjectType();
  sub_19A319FD8(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_19A31EF74((uint64_t)v6, (uint64_t)&qword_1EE398640, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30D4F8);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v3 = 0;
    return v3 & 1;
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value) != *(_QWORD *)&v5[OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value])
  {

    goto LABEL_7;
  }
  type metadata accessor for UserDomainConceptLinkStruct(0);
  v3 = sub_19A352FEC();

  return v3 & 1;
}

uint64_t sub_19A319FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D4F8(0, (unint64_t *)&qword_1EE398640, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t UserDomainConceptLinkStructWrapper.hash.getter()
{
  sub_19A353B38();
  sub_19A353B44();
  type metadata accessor for UserDomainConceptLinkStruct(0);
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_19A35337C();
  return sub_19A353B68();
}

void UserDomainConceptLinkStructWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LinkSetWrapper.__allocating_init(_:)(unint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return LinkSetWrapper.init(_:)(a1);
}

id LinkSetWrapper.init(_:)(unint64_t a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id result;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t j;
  unint64_t v24;
  unint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  objc_class *v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_super v35;
  uint64_t v36;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = type metadata accessor for UserDomainConceptLinkStruct(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  sub_19A31A58C(0);
  v13 = v12;
  v32 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v31 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v1;
    v33 = v13;
    v34 = v5;
    if (v15)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    v36 = v18;
    sub_19A30FA98(0, &qword_1EE397D00, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_19A306A54(&qword_1EE397CF0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FE0C);
    sub_19A306A54(&qword_1EE397CF8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FDCC);
    sub_19A31E4DC();
    v27 = v31;
    sub_19A353250();
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))((uint64_t)v2 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v27, v33);

    v35.receiver = v2;
    v35.super_class = ObjectType;
    return objc_msgSendSuper2(&v35, sel_init);
  }
  v26 = v1;
  v15 = sub_19A3539B8();
  v33 = v13;
  v34 = v5;
  if (!v15)
    goto LABEL_16;
LABEL_3:
  v36 = MEMORY[0x1E0DEE9D8];
  result = (id)sub_19A314A24(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v29 = ObjectType;
    v30 = v1;
    v18 = v36;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v15; ++i)
      {
        v20 = MEMORY[0x19AEC6A20](i, a1);
        sub_19A319A60(v20 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v11);
        swift_unknownObjectRelease();
        v36 = v18;
        v22 = *(_QWORD *)(v18 + 16);
        v21 = *(_QWORD *)(v18 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_19A314A24(v21 > 1, v22 + 1, 1);
          v18 = v36;
        }
        *(_QWORD *)(v18 + 16) = v22 + 1;
        sub_19A31E498((uint64_t)v11, v18+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22);
      }
    }
    else
    {
      for (j = 0; j != v15; ++j)
      {
        sub_19A319A60(*(_QWORD *)(a1 + 8 * j + 32) + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v9);
        v36 = v18;
        v25 = *(_QWORD *)(v18 + 16);
        v24 = *(_QWORD *)(v18 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_19A314A24(v24 > 1, v25 + 1, 1);
          v18 = v36;
        }
        *(_QWORD *)(v18 + 16) = v25 + 1;
        sub_19A31E498((uint64_t)v9, v18+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v25);
      }
    }
    swift_bridgeObjectRelease();
    ObjectType = v29;
    v2 = v30;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

void sub_19A31A58C(uint64_t a1)
{
  sub_19A31E5A4(a1, &qword_1EE397CE8, MEMORY[0x1E0D11D98]);
}

id LinkSetWrapper.__allocating_init(serializedData:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  uint64_t v3;
  id v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  objc_super v14;

  v4 = v2;
  sub_19A31A58C(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_allocWithZone(v2);
  sub_19A3119F0(a1, a2);
  sub_19A306A54(&qword_1EE397D18, (uint64_t (*)(uint64_t))sub_19A31A58C, MEMORY[0x1E0D11DB0]);
  sub_19A3532B0();
  if (v3)
  {
    sub_19A311AA4(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v12 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v11, v8);

    v14.receiver = v12;
    v14.super_class = v2;
    v4 = objc_msgSendSuper2(&v14, sel_init);
    sub_19A311AA4(a1, a2);
  }
  return v4;
}

void (**LinkSetWrapper.init(serializedData:)(uint64_t a1, unint64_t a2))(uint64_t, char *, _QWORD)
{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(uint64_t, char *, _QWORD);
  uint64_t v9;
  char *v10;
  id v11;
  objc_super v13;
  objc_class *ObjectType;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v7 = v6;
  v8 = *(void (***)(uint64_t, char *, _QWORD))(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2;
  sub_19A3119F0(a1, a2);
  sub_19A306A54(&qword_1EE397D18, (uint64_t (*)(uint64_t))sub_19A31A58C, MEMORY[0x1E0D11DB0]);
  sub_19A3532B0();
  if (v3)
  {
    sub_19A311AA4(a1, a2);

    swift_deallocPartialClassInstance();
  }
  else
  {
    v8[4]((uint64_t)v11 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v10, v7);

    v13.receiver = v11;
    v13.super_class = ObjectType;
    v8 = (void (**)(uint64_t, char *, _QWORD))objc_msgSendSuper2(&v13, sel_init);
    sub_19A311AA4(a1, a2);
  }
  return v8;
}

uint64_t LinkSetWrapper.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_19A353298();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EE396A70 != -1)
    swift_once();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D12378], v0);
  sub_19A31A58C(0);
  sub_19A306A54(&qword_1EE397D18, (uint64_t (*)(uint64_t))sub_19A31A58C, MEMORY[0x1E0D11DB0]);
  v4 = sub_19A3532A4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t LinkSetWrapper.elements.getter()
{
  sub_19A31A58C(0);
  type metadata accessor for UserDomainConceptLinkStructWrapper(0);
  return sub_19A3531C0();
}

uint64_t sub_19A31AE54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  id v8;
  id v9;
  uint64_t result;
  objc_super v11;

  v4 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A319A60(a1, (uint64_t)v6);
  v7 = (objc_class *)type metadata accessor for UserDomainConceptLinkStructWrapper(0);
  v8 = objc_allocWithZone(v7);
  sub_19A319A60((uint64_t)v6, (uint64_t)v8 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value);
  v11.receiver = v8;
  v11.super_class = v7;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  result = sub_19A31E550((uint64_t)v6);
  *a2 = v9;
  return result;
}

uint64_t LinkSetWrapper.count.getter()
{
  sub_19A31A58C(0);
  return sub_19A3531CC();
}

id LinkSetWrapper.appendingElement(_:)()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  id v13;
  void (*v14)(char *, uint64_t);
  objc_super v16;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, v1 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v4);
  sub_19A3531E4();
  v11(v8, (uint64_t)v10, v4);
  v12 = (char *)objc_allocWithZone(ObjectType);
  v11(&v12[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v8, v4);
  v16.receiver = v12;
  v16.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  return v13;
}

uint64_t LinkSetWrapper.appendingElements(_:)(unint64_t a1)
{
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(void);
  char *v29;
  id v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  void (*v35)(void);
  char *v36;
  char *v37;
  uint64_t v38;
  objc_super v39;
  uint64_t v40;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = type metadata accessor for UserDomainConceptLinkStruct(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v32 - v8;
  sub_19A31A58C(0);
  v11 = v10;
  v12 = MEMORY[0x1E0C80A78](v10);
  v37 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v38 = v14;
  v35 = *(void (**)(void))(v14 + 16);
  v36 = (char *)&v32 - v15;
  v35();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_19A3539B8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = MEMORY[0x1E0DEE9D8];
  if (!v16)
  {
LABEL_16:
    v40 = v17;
    sub_19A30FA98(0, &qword_1EE397D00, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_19A31E4DC();
    v26 = v36;
    sub_19A3531D8();
    swift_bridgeObjectRelease();
    v27 = v37;
    v28 = v35;
    ((void (*)(char *, char *, uint64_t))v35)(v37, v26, v11);
    v29 = (char *)objc_allocWithZone(ObjectType);
    ((void (*)(char *, char *, uint64_t))v28)(&v29[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v27, v11);
    v39.receiver = v29;
    v39.super_class = ObjectType;
    v30 = objc_msgSendSuper2(&v39, sel_init);
    v31 = *(void (**)(char *, uint64_t))(v38 + 8);
    v31(v27, v11);
    v31(v26, v11);
    return (uint64_t)v30;
  }
  v40 = MEMORY[0x1E0DEE9D8];
  result = sub_19A314A24(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v33 = v11;
    v34 = ObjectType;
    v17 = v40;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v16; ++i)
      {
        v20 = MEMORY[0x19AEC6A20](i, a1);
        sub_19A319A60(v20 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v9);
        swift_unknownObjectRelease();
        v40 = v17;
        v22 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_19A314A24(v21 > 1, v22 + 1, 1);
          v17 = v40;
        }
        *(_QWORD *)(v17 + 16) = v22 + 1;
        sub_19A31E498((uint64_t)v9, v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v22);
      }
    }
    else
    {
      v23 = (_QWORD *)(a1 + 32);
      do
      {
        sub_19A319A60(*v23 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v7);
        v40 = v17;
        v25 = *(_QWORD *)(v17 + 16);
        v24 = *(_QWORD *)(v17 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_19A314A24(v24 > 1, v25 + 1, 1);
          v17 = v40;
        }
        *(_QWORD *)(v17 + 16) = v25 + 1;
        sub_19A31E498((uint64_t)v7, v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v25);
        ++v23;
        --v16;
      }
      while (v16);
    }
    v11 = v33;
    ObjectType = v34;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

id LinkSetWrapper.insertingElement(_:index:)()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  id v13;
  void (*v14)(char *, uint64_t);
  objc_super v16;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, v1 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v4);
  sub_19A3531F0();
  v11(v8, (uint64_t)v10, v4);
  v12 = (char *)objc_allocWithZone(ObjectType);
  v11(&v12[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v8, v4);
  v16.receiver = v12;
  v16.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  return v13;
}

char *LinkSetWrapper.movingElement(from:to:)(uint64_t a1, uint64_t a2)
{
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  id v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  objc_super v23;

  ObjectType = (objc_class *)swift_getObjectType();
  v5 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A31A58C(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v21 - v14;
  if (a1 == a2)
    return v22;
  v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v17((char *)&v21 - v14, &v22[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v9);
  sub_19A35325C();
  sub_19A3531FC();
  sub_19A3531F0();
  v17(v13, v15, v9);
  v18 = (char *)objc_allocWithZone(ObjectType);
  v17(&v18[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v13, v9);
  v23.receiver = v18;
  v23.super_class = ObjectType;
  v19 = objc_msgSendSuper2(&v23, sel_init);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  sub_19A31E550((uint64_t)v7);
  v20(v15, v9);
  return (char *)v19;
}

id LinkSetWrapper.removingAtIndex(_:)()
{
  uint64_t v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, v0 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v3);
  sub_19A3531FC();
  v10(v7, (uint64_t)v9, v3);
  v11 = (char *)objc_allocWithZone(ObjectType);
  v10(&v11[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v7, v3);
  v15.receiver = v11;
  v15.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v9, v3);
  return v12;
}

id LinkSetWrapper.removingLinksWithUUID(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  id v15;
  void (*v16)(char *, uint64_t);
  _BYTE v18[16];
  uint64_t v19;
  objc_super v20;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v18[-v11];
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(&v18[-v11], v2 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v6);
  v19 = a1;
  sub_19A353238();
  v13(v10, (uint64_t)v12, v6);
  v14 = (char *)objc_allocWithZone(ObjectType);
  v13(&v14[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v10, v6);
  v20.receiver = v14;
  v20.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v20, sel_init);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v16(v12, v6);
  return v15;
}

id LinkSetWrapper.removingAll()()
{
  uint64_t v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, v0 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v3);
  sub_19A353244();
  v10(v7, (uint64_t)v9, v3);
  v11 = (char *)objc_allocWithZone(ObjectType);
  v10(&v11[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v7, v3);
  v15.receiver = v11;
  v15.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v9, v3);
  return v12;
}

id LinkSetWrapper.replacingElementAt(_:withElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  id v18;
  void (*v19)(char *, uint64_t);
  objc_super v21;

  ObjectType = (objc_class *)swift_getObjectType();
  v5 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A31A58C(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v21 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)&v21 - v14, v2 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v9);
  sub_19A319A60(a2 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v7);
  sub_19A353268();
  v16(v13, (uint64_t)v15, v9);
  v17 = (char *)objc_allocWithZone(ObjectType);
  v16(&v17[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v13, v9);
  v21.receiver = v17;
  v21.super_class = ObjectType;
  v18 = objc_msgSendSuper2(&v21, sel_init);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v19(v15, v9);
  return v18;
}

id LinkSetWrapper.retargetingLinksWithUUID(_:newUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  objc_class *v31;
  char *v32;
  id v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t *, _QWORD);
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  Class ObjectType;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  objc_super v57;

  v49 = a2;
  ObjectType = (Class)swift_getObjectType();
  v4 = type metadata accessor for UserDomainConceptLinkStruct(0);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (void (**)(char *, uint64_t, uint64_t))((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (void (**)(char *, uint64_t, uint64_t))((char *)&v42 - v9);
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v42 - v11);
  sub_19A30FA98(0, &qword_1EE397D20, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v15 = MEMORY[0x1E0C80A78](v14);
  v48 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v42 - v17;
  sub_19A31E5A4(0, &qword_1EE397D28, MEMORY[0x1E0D11D60]);
  v52 = v19;
  v43 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v42 - v20;
  sub_19A31A58C(0);
  v23 = v22;
  v24 = MEMORY[0x1E0C80A78](v22);
  v44 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v42 - v26;
  v45 = v28;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v42((char *)&v42 - v26, v2 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v23);
  sub_19A3531A8();
  v51 = v21;
  sub_19A353220();
  v50 = *(_QWORD *)(v50 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v50)(v18, 1, v4) != 1)
  {
    v47 = a1;
    do
    {
      sub_19A31E498((uint64_t)v18, (uint64_t)v12);
      if ((sub_19A352FEC() & 1) != 0)
      {
        v37 = *v12;
        v38 = (char *)v10 + *(int *)(v4 + 20);
        v39 = sub_19A353010();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v38, v49, v39);
        *v10 = v37;
        if ((sub_19A35322C() & 1) == 0)
        {
          sub_19A306A54(&qword_1EE397D30, (uint64_t (*)(uint64_t))sub_19A31A58C, MEMORY[0x1E0D11DC8]);
          sub_19A35364C();
          if ((v55 & 1) != 0)
          {
            sub_19A353640();
            while (1)
            {
              sub_19A353664();
              if (v56 == v53)
                break;
              v40 = (void (*)(uint64_t *, _QWORD))sub_19A353688();
              sub_19A319A60(v41, (uint64_t)v7);
              v40(&v53, 0);
              if (*v7 == *v12 && (sub_19A352FEC() & 1) != 0)
              {
                sub_19A31E550((uint64_t)v7);
                goto LABEL_4;
              }
              sub_19A31E550((uint64_t)v7);
              sub_19A353670();
            }
          }
          else if ((v54 & 1) == 0)
          {
LABEL_4:
            sub_19A3531F0();
          }
        }
        v36 = (uint64_t)v48;
        sub_19A353208();
        sub_19A31EF74(v36, (uint64_t)&qword_1EE397D20, (uint64_t)type metadata accessor for UserDomainConceptLinkStruct, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30FA98);
        sub_19A31E550((uint64_t)v10);
      }
      sub_19A31E550((uint64_t)v12);
      sub_19A353220();
    }
    while (((unsigned int (*)(char *, uint64_t, uint64_t))v50)(v18, 1, v4) != 1);
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v52);
  v29 = v44;
  v30 = (void (*)(char *, char *, uint64_t))v42;
  v42(v44, (uint64_t)v27, v23);
  v31 = ObjectType;
  v32 = (char *)objc_allocWithZone(ObjectType);
  v30(&v32[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v29, v23);
  v57.receiver = v32;
  v57.super_class = v31;
  v33 = objc_msgSendSuper2(&v57, sel_init);
  v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  v34(v29, v23);
  v34(v27, v23);
  return v33;
}

id LinkSetWrapper.swappingElementsAt(_:andAt:)()
{
  uint64_t v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)&v15 - v8, v0 + OBJC_IVAR___HKLinkSetWrapper_orderedSet, v3);
  sub_19A353214();
  v10(v7, (uint64_t)v9, v3);
  v11 = (char *)objc_allocWithZone(ObjectType);
  v10(&v11[OBJC_IVAR___HKLinkSetWrapper_orderedSet], (uint64_t)v7, v3);
  v15.receiver = v11;
  v15.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v9, v3);
  return v12;
}

id LinkSetWrapper.mergingLinkSet(_:)()
{
  objc_class *ObjectType;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t);
  void (*v10)(char *, char *, uint64_t);
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_19A31A58C(0);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  sub_19A306A54(&qword_1EE397D18, v9, MEMORY[0x1E0D11DB0]);
  sub_19A3532BC();
  v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v10(v6, v8, v2);
  v11 = (char *)objc_allocWithZone(ObjectType);
  v10(&v11[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v6, v2);
  v15.receiver = v11;
  v15.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v15, sel_init);
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  return v12;
}

uint64_t LinkSetWrapper.mergingLegacyElementsArray(_:)(unint64_t a1)
{
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(void);
  char *v30;
  id v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  objc_class *v34;
  void (*v35)(void);
  char *v36;
  char *v37;
  uint64_t v38;
  objc_super v39;
  uint64_t v40;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = type metadata accessor for UserDomainConceptLinkStruct(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v33 - v8;
  sub_19A31A58C(0);
  v11 = v10;
  v12 = MEMORY[0x1E0C80A78](v10);
  v37 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v38 = v14;
  v35 = *(void (**)(void))(v14 + 16);
  v36 = (char *)&v33 - v15;
  v35();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_19A3539B8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v17 = MEMORY[0x1E0DEE9D8];
  if (!v16)
  {
LABEL_16:
    v40 = v17;
    sub_19A30FA98(0, &qword_1EE397D00, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_19A31E4DC();
    v26 = v36;
    v27 = sub_19A3531D8();
    MEMORY[0x1E0C80A78](v27);
    *(&v33 - 2) = v17;
    sub_19A353238();
    swift_bridgeObjectRelease();
    v28 = v37;
    v29 = v35;
    ((void (*)(char *, char *, uint64_t))v35)(v37, v26, v11);
    v30 = (char *)objc_allocWithZone(ObjectType);
    ((void (*)(char *, char *, uint64_t))v29)(&v30[OBJC_IVAR___HKLinkSetWrapper_orderedSet], v28, v11);
    v39.receiver = v30;
    v39.super_class = ObjectType;
    v31 = objc_msgSendSuper2(&v39, sel_init);
    v32 = *(void (**)(char *, uint64_t))(v38 + 8);
    v32(v28, v11);
    v32(v26, v11);
    return (uint64_t)v31;
  }
  v40 = MEMORY[0x1E0DEE9D8];
  result = sub_19A314A24(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v33 = v11;
    v34 = ObjectType;
    v17 = v40;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v16; ++i)
      {
        v20 = MEMORY[0x19AEC6A20](i, a1);
        sub_19A319A60(v20 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v9);
        swift_unknownObjectRelease();
        v40 = v17;
        v22 = *(_QWORD *)(v17 + 16);
        v21 = *(_QWORD *)(v17 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_19A314A24(v21 > 1, v22 + 1, 1);
          v17 = v40;
        }
        *(_QWORD *)(v17 + 16) = v22 + 1;
        sub_19A31E498((uint64_t)v9, v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v22);
      }
    }
    else
    {
      v23 = (_QWORD *)(a1 + 32);
      do
      {
        sub_19A319A60(*v23 + OBJC_IVAR___HKUserDomainConceptLinkStructWrapper_value, (uint64_t)v7);
        v40 = v17;
        v25 = *(_QWORD *)(v17 + 16);
        v24 = *(_QWORD *)(v17 + 24);
        if (v25 >= v24 >> 1)
        {
          sub_19A314A24(v24 > 1, v25 + 1, 1);
          v17 = v40;
        }
        *(_QWORD *)(v17 + 16) = v25 + 1;
        sub_19A31E498((uint64_t)v7, v17+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v25);
        ++v23;
        --v16;
      }
      while (v16);
    }
    v11 = v33;
    ObjectType = v34;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_19A31D2D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for UserDomainConceptLinkStruct(0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
    return 1;
  v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v10 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  do
  {
    sub_19A319A60(v9, (uint64_t)v7);
    if (*v7 == *a1 && (sub_19A352FEC() & 1) != 0)
    {
      sub_19A31E550((uint64_t)v7);
      v11 = 0;
      goto LABEL_8;
    }
    sub_19A31E550((uint64_t)v7);
    v9 += v10;
    --v8;
  }
  while (v8);
  v11 = 1;
LABEL_8:
  swift_bridgeObjectRelease();
  return v11;
}

id sub_19A31D3F0(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  id v7;
  void *v8;

  type metadata accessor for UserDomainConceptLinkStructWrapper(0);
  v6 = sub_19A3534CC();
  v7 = a1;
  v8 = (void *)a4(v6);

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t LinkSetWrapper.description.getter()
{
  uint64_t v0;

  sub_19A31A58C(0);
  type metadata accessor for UserDomainConceptLinkStructWrapper(0);
  sub_19A3531C0();
  v0 = MEMORY[0x19AEC6648]();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkSetWrapper.isEqual(_:)(uint64_t a1)
{
  char v2;
  void *v4;
  _BYTE v5[24];
  uint64_t v6;

  swift_getObjectType();
  sub_19A319FD8(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_19A31EF74((uint64_t)v5, (uint64_t)&qword_1EE398640, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30D4F8);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    v2 = 0;
    return v2 & 1;
  }
  type metadata accessor for UserDomainConceptLinkStruct(0);
  sub_19A306A54(&qword_1EE397CF0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FE0C);
  sub_19A306A54(&qword_1EE397CF8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FDCC);
  v2 = sub_19A3531B4();

  return v2 & 1;
}

uint64_t sub_19A31D6C4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    sub_19A35379C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  sub_19A31EF74((uint64_t)v10, (uint64_t)&qword_1EE398640, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30D4F8);
  return v8 & 1;
}

uint64_t LinkSetWrapper.hash.getter()
{
  uint64_t v0;

  sub_19A31A58C(0);
  type metadata accessor for UserDomainConceptLinkStructWrapper(0);
  sub_19A3531C0();
  sub_19A306A54(&qword_1EE397D38, type metadata accessor for UserDomainConceptLinkStructWrapper, MEMORY[0x1E0DEFCF8]);
  v0 = sub_19A353514();
  swift_bridgeObjectRelease();
  return v0;
}

id LinkSetWrapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LinkSetWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id _s9HealthKit34UserDomainConceptLinkStructWrapperCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19A31D9C4()
{
  uint64_t result;

  result = sub_19A31D9E0();
  qword_1EE397CC8 = result;
  return result;
}

uint64_t sub_19A31D9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  id v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  sub_19A30FA98(0, &qword_1EE397ED0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v54 - v4;
  v6 = sub_19A352EFC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v54 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v54 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v54 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v54 - v20;
  MEMORY[0x1E0C80A78](v19);
  v61 = (char *)&v54 - v21;
  v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v23 = objc_msgSend(v22, sel_URLsForDirectory_inDomains_, 13, 1);

  v24 = sub_19A3534CC();
  if (*(_QWORD *)(v24 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, v24 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v25(v5, 0, 1, v6);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v25(v5, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_19A31EF74((uint64_t)v5, (uint64_t)&qword_1EE397ED0, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30FA98);
LABEL_12:
    if (qword_1EE396A80 != -1)
      swift_once();
    v29 = sub_19A353130();
    __swift_project_value_buffer(v29, (uint64_t)qword_1EE3A2FA8);
    v30 = sub_19A353118();
    v31 = sub_19A3536AC();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_19A0E6000, v30, v31, "Create transient CRContext", v32, 2u);
      MEMORY[0x19AEC804C](v32, -1, -1);
    }

    sub_19A353310();
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
    v33 = MEMORY[0x19AEC6468](0, &v63);
    sub_19A31EF74((uint64_t)&v63, (uint64_t)&unk_1EE397ED8, (uint64_t)sub_19A31EFD4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_19A30FA98);
    return v33;
  }
  v26 = v61;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v61, v5, v6);
  v27 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v28 = objc_msgSend(v27, sel_bundleIdentifier);

  if (!v28)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    goto LABEL_12;
  }
  sub_19A353430();

  if (qword_1EE396A78 != -1)
    swift_once();
  if ((byte_1EE3A2FA0 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v61, v6);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_19A352EF0();
  swift_bridgeObjectRelease();
  v35 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v36 = objc_msgSend(v35, sel_processName);

  v37 = sub_19A353430();
  v39 = v38;

  *(_QWORD *)&v63 = v37;
  *((_QWORD *)&v63 + 1) = v39;
  sub_19A353454();
  v40 = v60;
  sub_19A352EF0();
  swift_bridgeObjectRelease();
  v58 = *(void (**)(char *, uint64_t))(v7 + 8);
  v58(v18, v6);
  if (qword_1EE396A80 != -1)
    swift_once();
  v41 = sub_19A353130();
  v42 = __swift_project_value_buffer(v41, (uint64_t)qword_1EE3A2FA8);
  v43 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v43(v15, v40, v6);
  v57 = v42;
  v44 = sub_19A353118();
  v45 = sub_19A3536AC();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    v56 = swift_slowAlloc();
    *(_QWORD *)&v63 = v56;
    v55 = v46;
    *(_DWORD *)v46 = 136315138;
    v54 = v46 + 4;
    sub_19A306A54(&qword_1EE397EE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v47 = sub_19A353A90();
    v62 = sub_19A334B08(v47, v48, (uint64_t *)&v63);
    sub_19A353778();
    swift_bridgeObjectRelease();
    v58(v15, v6);
    v49 = v55;
    _os_log_impl(&dword_19A0E6000, v44, v45, "Create CRContext at %s", v55, 0xCu);
    v50 = v56;
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v50, -1, -1);
    MEMORY[0x19AEC804C](v49, -1, -1);
  }
  else
  {
    v58(v15, v6);
  }

  v51 = v61;
  sub_19A353310();
  v52 = v60;
  v43(v12, v60, v6);
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  v25(v3, 1, 1, v6);
  v33 = sub_19A353304();
  v53 = v58;
  v58(v52, v6);
  v53(v51, v6);
  return v33;
}

id static CRContext.sharedCoherenceContext.getter()
{
  if (qword_1EE396A70 != -1)
    swift_once();
  return (id)qword_1EE397CC8;
}

void sub_19A31E3C4()
{
  NSString *v0;
  Class v1;
  BOOL v2;

  v0 = (NSString *)sub_19A353400();
  v1 = NSClassFromString(v0);

  if (v1)
    v2 = swift_getObjCClassMetadata() != 0;
  else
    v2 = 0;
  byte_1EE3A2FA0 = v2;
}

uint64_t sub_19A31E424()
{
  uint64_t v0;

  v0 = sub_19A353130();
  __swift_allocate_value_buffer(v0, qword_1EE3A2FA8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE3A2FA8);
  return sub_19A353124();
}

uint64_t sub_19A31E498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserDomainConceptLinkStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_19A31E4DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE397D08;
  if (!qword_1EE397D08)
  {
    sub_19A30FA98(255, &qword_1EE397D00, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EE397D08);
  }
  return result;
}

uint64_t type metadata accessor for UserDomainConceptLinkStructWrapper(uint64_t a1)
{
  return sub_19A306AA8(a1, (uint64_t *)&unk_1EE397D68);
}

uint64_t sub_19A31E550(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UserDomainConceptLinkStruct(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A31E58C()
{
  return sub_19A31EF28() & 1;
}

void sub_19A31E5A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for UserDomainConceptLinkStruct(255);
    v7 = sub_19A306A54(&qword_1EE397CF0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FE0C);
    v8 = sub_19A306A54(&qword_1EE397CF8, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FDCC);
    v9 = a3(a1, v6, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_19A31E64C(_QWORD *a1)
{
  uint64_t v1;

  return sub_19A31D2D4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_19A31E668()
{
  return type metadata accessor for UserDomainConceptLinkStructWrapper(0);
}

uint64_t sub_19A31E670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A31E6B8(a1, a2, a3, type metadata accessor for UserDomainConceptLinkStruct);
}

uint64_t method lookup function for UserDomainConceptLinkStructWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UserDomainConceptLinkStructWrapper.__allocating_init(target:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_19A31E690()
{
  return type metadata accessor for LinkSetWrapper(0);
}

uint64_t type metadata accessor for LinkSetWrapper(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE397DA0);
}

uint64_t sub_19A31E6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A31E6B8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_19A31A58C);
}

uint64_t sub_19A31E6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for LinkSetWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkSetWrapper.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of LinkSetWrapper.__allocating_init(serializedData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *sub_19A31E750(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_19A353010();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_19A31E7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_19A353010();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_19A31E810(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_19A353010();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_19A31E86C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_19A353010();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_19A31E8C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_19A353010();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_19A31E924(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_19A353010();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_19A31E980()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A31E98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_19A353010();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_19A31E9CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A31E9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_19A353010();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_19A31EA1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19A353010();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_19A31EA94()
{
  return sub_19A306A54(&qword_1EE397E40, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FB2C);
}

uint64_t sub_19A31EAC0()
{
  return sub_19A306A54(&qword_1EE397CF0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FE0C);
}

uint64_t sub_19A31EAEC()
{
  return sub_19A306A54(&qword_1EE397E48, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FBFC);
}

uint64_t sub_19A31EB18()
{
  return sub_19A306A54(&qword_1EE397E50, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FBD4);
}

unint64_t sub_19A31EB48()
{
  unint64_t result;

  result = qword_1EE397E58;
  if (!qword_1EE397E58)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FC6C, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E58);
  }
  return result;
}

unint64_t sub_19A31EB90()
{
  unint64_t result;

  result = qword_1EE397E60;
  if (!qword_1EE397E60)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FD7C, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E60);
  }
  return result;
}

unint64_t sub_19A31EBD8()
{
  unint64_t result;

  result = qword_1EE397E68;
  if (!qword_1EE397E68)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FD44, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E68);
  }
  return result;
}

unint64_t sub_19A31EC20()
{
  unint64_t result;

  result = qword_1EE397E70;
  if (!qword_1EE397E70)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FCA4, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E70);
  }
  return result;
}

unint64_t sub_19A31EC68()
{
  unint64_t result;

  result = qword_1EE397E78;
  if (!qword_1EE397E78)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FD1C, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E78);
  }
  return result;
}

unint64_t sub_19A31ECB0()
{
  unint64_t result;

  result = qword_1EE397E80;
  if (!qword_1EE397E80)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FCF4, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397E80);
  }
  return result;
}

unint64_t sub_19A31ECF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE397E88;
  if (!qword_1EE397E88)
  {
    sub_19A30D4F8(255, &qword_1EE397E90, (uint64_t)&type metadata for UserDomainConceptLinkStruct.CodingKeys, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE397E88);
  }
  return result;
}

uint64_t sub_19A31ED58()
{
  return sub_19A306A54(&qword_1EE397E98, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FDA4);
}

uint64_t sub_19A31ED84()
{
  return sub_19A306A54(&qword_1EE397EA0, type metadata accessor for UserDomainConceptLinkStruct, (uint64_t)&unk_19A44FB74);
}

uint64_t sub_19A31EDB0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_19A353AC0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746567726174 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_19A353AC0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_19A31EECC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A31EC20();
    v7 = a3(a1, &type metadata for UserDomainConceptLinkStruct.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_19A31EF28()
{
  type metadata accessor for UserDomainConceptLinkStruct(0);
  return sub_19A352FEC() & 1;
}

uint64_t sub_19A31EF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_19A31EFD4()
{
  unint64_t result;

  result = qword_1EE397EE0;
  if (!qword_1EE397EE0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE397EE0);
  }
  return result;
}

unint64_t sub_19A31F028()
{
  unint64_t result;

  result = qword_1EE398630;
  if (!qword_1EE398630)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE398630);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t storeEnumTagSinglePayload for UserDomainConceptLinkStruct.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_19A31F0F0 + 4 * byte_19A44FAA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_19A31F124 + 4 * byte_19A44FAA0[v4]))();
}

uint64_t sub_19A31F124(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A31F12C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A31F134);
  return result;
}

uint64_t sub_19A31F140(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A31F148);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_19A31F14C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A31F154(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserDomainConceptLinkStruct.CodingKeys()
{
  return &type metadata for UserDomainConceptLinkStruct.CodingKeys;
}

unint64_t sub_19A31F174()
{
  unint64_t result;

  result = qword_1EE397EF8;
  if (!qword_1EE397EF8)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A44FEC8, &type metadata for UserDomainConceptLinkStruct.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE397EF8);
  }
  return result;
}

uint64_t HKHealthStore.dateOfBirthComponents.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch();
}

uint64_t sub_19A31F1D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0[16];
  v0[2] = v0;
  v0[3] = sub_19A3099E0;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31F390;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F398;
  v4[3] = &block_descriptor_9;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__dateOfBirthWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

uint64_t sub_19A31F2AC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  id v11;
  uint64_t v13;

  sub_19A31FB0C();
  MEMORY[0x1E0C80A78](v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v13 - v8;
  if (a2)
  {
    sub_19A305E34();
    swift_allocError();
    *v10 = a2;
    v11 = a2;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_19A31FB9C(a1, (uint64_t)&v13 - v8);
    sub_19A31FBE0((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(a3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_19A31F380()
{
  return swift_deallocObject();
}

uint64_t sub_19A31F390(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_19A31F2AC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_19A31F398(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  sub_19A31FB0C();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_19A352CEC();
    v10 = sub_19A352D40();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    v11 = sub_19A352D40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_19A31FB60((uint64_t)v8);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t HKHealthStore.bloodType.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch();
}

uint64_t sub_19A31F4BC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A31FC24;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31F5A8;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F5C8;
  v4[3] = &block_descriptor_7;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__bloodTypeWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

uint64_t sub_19A31F598()
{
  return swift_deallocObject();
}

void sub_19A31F5A8(void *a1, void *a2)
{
  uint64_t v2;

  sub_19A31FA2C(a1, a2, *(_QWORD *)(v2 + 16), (SEL *)&selRef_bloodType);
}

uint64_t HKHealthStore.biologicalSex.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch();
}

uint64_t sub_19A31F5E4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A30D76C;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31F6D0;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F5C8;
  v4[3] = &block_descriptor_14;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__biologicalSexWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

uint64_t sub_19A31F6C0()
{
  return swift_deallocObject();
}

void sub_19A31F6D0(void *a1, void *a2)
{
  uint64_t v2;

  sub_19A31FA2C(a1, a2, *(_QWORD *)(v2 + 16), (SEL *)&selRef_biologicalSex);
}

uint64_t HKHealthStore.fitzpatrickSkinType.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch();
}

uint64_t sub_19A31F708()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A31FC24;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31F7F4;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F5C8;
  v4[3] = &block_descriptor_21;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__fitzpatrickSkinTypeWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

uint64_t sub_19A31F7E4()
{
  return swift_deallocObject();
}

void sub_19A31F7F4(void *a1, void *a2)
{
  uint64_t v2;

  sub_19A31FA2C(a1, a2, *(_QWORD *)(v2 + 16), (SEL *)&selRef_skinType);
}

uint64_t HKHealthStore.wheelchairUse.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch();
}

uint64_t sub_19A31F82C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A31FC24;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31F918;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F5C8;
  v4[3] = &block_descriptor_28;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__wheelchairUseWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

uint64_t sub_19A31F908()
{
  return swift_deallocObject();
}

void sub_19A31F918(void *a1, void *a2)
{
  uint64_t v2;

  sub_19A31FA2C(a1, a2, *(_QWORD *)(v2 + 16), (SEL *)&selRef_wheelchairUse);
}

uint64_t HKHealthStore.activityMoveMode.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch();
}

uint64_t sub_19A31F950()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A31FC24;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  *(_QWORD *)(v3 + 16) = v2;
  v4[4] = sub_19A31FAEC;
  v4[5] = v3;
  v4[1] = 1107296256;
  v4[2] = sub_19A31F5C8;
  v4[3] = &block_descriptor_35;
  v5 = _Block_copy(v4);
  swift_release();
  objc_msgSend(v1, sel__activityMoveModeObjectWithCompletion_, v5);
  _Block_release(v5);
  return swift_continuation_await();
}

void sub_19A31FA2C(void *a1, void *a2, uint64_t a3, SEL *a4)
{
  _QWORD *v7;
  id v8;
  id v9;

  if (a1)
  {
    v9 = a1;
    **(_QWORD **)(*(_QWORD *)(a3 + 64) + 40) = objc_msgSend(v9, *a4);
    swift_continuation_throwingResume();

  }
  else if (a2)
  {
    sub_19A305E34();
    swift_allocError();
    *v7 = a2;
    v8 = a2;
    swift_continuation_throwingResumeWithError();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_19A31FADC()
{
  return swift_deallocObject();
}

void sub_19A31FAEC(void *a1, void *a2)
{
  uint64_t v2;

  sub_19A31FA2C(a1, a2, *(_QWORD *)(v2 + 16), (SEL *)&selRef_activityMoveMode);
}

void sub_19A31FB0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397F30)
  {
    sub_19A352D40();
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397F30);
  }
}

uint64_t sub_19A31FB60(uint64_t a1)
{
  uint64_t v2;

  sub_19A31FB0C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A31FB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A31FB0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19A31FBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A31FB0C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t HKMCPregnancyDatesFactory.Trimester.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_19A31FC5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_19A31FC70@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _sSo25HKMCPregnancyDatesFactoryC9HealthKitE9TrimesterO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.recentPregnancyEndThresholdInDays.getter()
{
  return 28;
}

uint64_t static HKMCPregnancyDatesFactory.recentPregnancyStartThresholdInDays.getter()
{
  return 21;
}

id HKMCPregnancyDatesFactory.init(pregnancySample:state:)(void *a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPregnancySample_state_, a1, a2);

  return v3;
}

id HKMCPregnancyDatesFactory.init(pregnancySample:state:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  objc_super v4;

  *(_QWORD *)(v2 + OBJC_IVAR___HKMCPregnancyDatesFactory_pregnancySample) = a1;
  *(_QWORD *)(v2 + OBJC_IVAR___HKMCPregnancyDatesFactory_state) = a2;
  v4.super_class = (Class)HKMCPregnancyDatesFactory;
  return objc_msgSendSuper2(&v4, sel_init);
}

id HKMCPregnancyDatesFactory.generateModel(educationalStepsCompletedDate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  char *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t started;
  uint64_t v69;
  id v70;
  uint64_t (*v71)(uint64_t);
  char *v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v2 = v1;
  v84 = a1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_19A30FA98(0, (unint64_t *)&qword_1EE397200, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v86 = (char *)&v73 - v5;
  v85 = sub_19A352CB0();
  v6 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v87 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19A352FD4();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v73 - v13;
  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, v15, v3);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v73 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v73 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v90 = (uint64_t)&v73 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v73 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v73 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  MEMORY[0x1E0C80A78](v33);
  v83 = v2;
  v38 = *(void **)(v2 + OBJC_IVAR___HKMCPregnancyDatesFactory_pregnancySample);
  if (v38)
  {
    v88 = (uint64_t)&v73 - v34;
    v89 = v35;
    v78 = v37;
    v79 = v36;
    v80 = v29;
    v81 = v21;
    v76 = v32;
    v77 = v38;
    v82 = v6;
    v39 = v38;
    v40 = objc_msgSend(v39, sel_endDate);
    sub_19A352FA4();

    sub_19A352F38();
    LOBYTE(v40) = sub_19A352F98();
    v41 = *(void (**)(char *, uint64_t))(v9 + 8);
    v41(v12, v8);
    v41(v14, v8);
    if ((v40 & 1) != 0)
    {
      v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
      v43 = v88;
      v44 = 1;
    }
    else
    {
      v51 = objc_msgSend(v39, sel_endDate);
      v52 = v88;
      sub_19A352FA4();

      v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
      v43 = v52;
      v44 = 0;
    }
    v75 = v42;
    v42(v43, v44, 1, v8);
    v53 = (uint64_t)v24;
    v73 = v24;
    v54 = objc_msgSend(v39, sel_startDate);
    sub_19A352FA4();

    v55 = objc_msgSend(v39, sel_endDate);
    sub_19A352FA4();

    v56 = v87;
    static HKMCPregnancyDatesFactory.calculateDuration(pregnancyStart:pregnancyEnd:)((uint64_t)v14, (uint64_t)v12);
    v74 = v41;
    v41(v12, v8);
    v41(v14, v8);
    static HKMCPregnancyDatesFactory.calculateBehavioralWashout(for:)(v39, v89);
    v57 = (uint64_t)v76;
    static HKMCPregnancyDatesFactory.calculatePhysiologicalWashout(for:)(v39, (uint64_t)v76);
    v83 = *(_QWORD *)(v83 + OBJC_IVAR___HKMCPregnancyDatesFactory_state);
    v58 = objc_msgSend(v39, sel_startDate);
    v59 = (uint64_t)v80;
    sub_19A352FA4();

    v60 = v75;
    v75(v59, 0, 1, v8);
    sub_19A322DB4(v88, v90);
    static HKMCPregnancyDatesFactory.calculateEstimatedDueDate(sample:)(v39, v53);
    v60(v53, 0, 1, v8);
    v61 = v56;
    v62 = v82;
    v64 = v85;
    v63 = (uint64_t)v86;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v86, v61, v85);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v64);
    v65 = (uint64_t)v81;
    sub_19A322DB4(v57, (uint64_t)v81);
    v66 = v79;
    sub_19A322DB4(v89, v79);
    v67 = objc_msgSend(v39, sel_startDate);
    sub_19A352FA4();

    started = _sSo25HKMCPregnancyDatesFactoryC9HealthKitE19calculateTrimesters14pregnancyStartSay10Foundation4DateVGAH_tFZ_0();
    v74(v14, v8);
    v69 = v78;
    sub_19A322DB4(v84, v78);
    v70 = objc_allocWithZone((Class)HKMCPregnancyModel);
    v50 = sub_19A322AEC(v83, v59, v90, (uint64_t)v73, v63, v65, v66, started, v77, v69);
    v71 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_19A323268(v57, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_19A323268(v89, (unint64_t *)&qword_1ECE27680, v71);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v87, v64);
    sub_19A323268(v88, (unint64_t *)&qword_1ECE27680, v71);
  }
  else
  {
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v46 = v35;
    v45(v35, 1, 1, v8);
    v45((uint64_t)v32, 1, 1, v8);
    v45((uint64_t)v29, 1, 1, v8);
    v47 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v86, 1, 1, v85);
    v48 = v90;
    v45(v90, 1, 1, v8);
    v45((uint64_t)v24, 1, 1, v8);
    v45((uint64_t)v21, 1, 1, v8);
    v49 = objc_allocWithZone((Class)HKMCPregnancyModel);
    return sub_19A322AEC(0, v46, (uint64_t)v32, (uint64_t)v29, v47, v48, (uint64_t)v24, 0, 0, (uint64_t)v21);
  }
  return v50;
}

uint64_t static HKMCPregnancyDatesFactory.calculateDuration(pregnancyStart:pregnancyEnd:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;

  v4 = sub_19A352FD4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - v9;
  sub_19A352F38();
  v11 = sub_19A352F98();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  if ((v11 & 1) != 0)
  {
    sub_19A352FB0();
    sub_19A352F44();
    v12(v10, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v4);
    return sub_19A352C98();
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1, v4);
    v14(v8, a2, v4);
    return sub_19A352C8C();
  }
}

uint64_t static HKMCPregnancyDatesFactory.calculateBehavioralWashout(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v4 = sub_19A352FD4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - v10;
  v12 = objc_msgSend(a1, sel_endDate);
  sub_19A352FA4();

  sub_19A352F38();
  sub_19A306A54(&qword_1EE397F48, v5, MEMORY[0x1E0CB08B8]);
  LOBYTE(v5) = sub_19A3533F4();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  if ((v5 & 1) != 0)
  {
    v14 = 1;
  }
  else
  {
    v15 = objc_msgSend(a1, sel_endDate);
    sub_19A352FA4();

    v16 = objc_msgSend(a1, sel_startDate);
    sub_19A352FA4();

    sub_19A352F44();
    v13(v9, v4);
    v13(v11, v4);
    v17 = objc_msgSend(a1, sel_endDate);
    sub_19A352FA4();

    sub_19A352F50();
    v13(v11, v4);
    v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v14, 1, v4);
}

uint64_t static HKMCPregnancyDatesFactory.calculatePhysiologicalWashout(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t);
  id v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v4 = sub_19A352FD4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v21 - v10;
  v12 = objc_msgSend(a1, sel_endDate);
  sub_19A352FA4();

  sub_19A352F38();
  sub_19A306A54(&qword_1EE397F48, v5, MEMORY[0x1E0CB08B8]);
  LOBYTE(v5) = sub_19A3533F4();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  if ((v5 & 1) != 0)
    goto LABEL_3;
  v14 = objc_msgSend(a1, sel_endDate);
  sub_19A352FA4();

  v15 = objc_msgSend(a1, sel_startDate);
  sub_19A352FA4();

  sub_19A352F44();
  v17 = v16;
  v13(v9, v4);
  v13(v11, v4);
  if (v17 < 12096000.0)
  {
LABEL_3:
    v18 = 1;
  }
  else
  {
    v19 = objc_msgSend(a1, sel_endDate);
    sub_19A352FA4();

    sub_19A352F50();
    v13(v11, v4);
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v18, 1, v4);
}

uint64_t static HKMCPregnancyDatesFactory.calculateEstimatedDueDate(sample:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v33 = a2;
  v3 = sub_19A352FD4();
  MEMORY[0x1E0C80A78](v3);
  v38 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_19A353028();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19A3530B8();
  v36 = *(_QWORD *)(v9 - 8);
  v37 = (char *)v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v34 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v32 - v12;
  sub_19A30FA98(0, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - v15;
  v17 = sub_19A353100();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v32 - v22;
  v35 = a1;
  v24 = objc_msgSend(a1, sel__timeZone);
  if (!v24)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_7;
  }
  v25 = v24;
  sub_19A3530E8();

  v26 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v26(v16, v21, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    v26(v23, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CB0EF8], v5);
    sub_19A353034();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
    sub_19A3530A0();
    v27 = objc_msgSend(v35, sel_startDate);
    v28 = (uint64_t)v38;
    sub_19A352FA4();

    v29 = v36;
    v16 = v37;
    v30 = v34;
    (*(void (**)(char *, char *, char *))(v36 + 16))(v34, v13, v37);
    DayIndex.init(date:calendar:)(v28, v30, &v39);
    if (!__OFADD__(v39, 280))
    {
      v39 += 280;
      DayIndex.startDate(in:)((uint64_t)v13, v33);
      (*(void (**)(char *, char *))(v29 + 8))(v13, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_7:
  sub_19A323268((uint64_t)v16, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470]);
  result = sub_19A353988();
  __break(1u);
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.calculatePregnancyStart(for:)()
{
  return sub_19A352F50();
}

uint64_t static HKMCPregnancyDatesFactory.estimatedDueDateNumberOfDays()()
{
  return 280;
}

uint64_t static HKMCPregnancyDatesFactory.gestationalAgeString(on:pregnancySample:)(uint64_t a1, void *a2)
{
  return sub_19A323A5C(a1, a2, (SEL *)&selRef_gestationalAgeStringOnDate_pregnancyStartDate_startTimeZoneName_);
}

uint64_t static HKMCPregnancyDatesFactory.gestationalAgeDurationForDisplay(on:pregnancyStart:startTimeZoneName:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t result;
  double v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v33 = a2;
  v34 = a1;
  v6 = sub_19A352FD4();
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  v12 = sub_19A353100();
  MEMORY[0x1E0C80A78](v12);
  sub_19A30FA98(0, (unint64_t *)&qword_1EE397F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - v14;
  v16 = sub_19A3530B8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A3221F8(a3, a4, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_19A323268((uint64_t)v15, (unint64_t *)&qword_1EE397F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    return sub_19A353C70();
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  sub_19A3530F4();
  sub_19A3530A0();
  sub_19A35304C();
  sub_19A35304C();
  if (!_sSo25HKMCPregnancyDatesFactoryC9HealthKitE42isPregnancyDurationPhysiologicallyPossible3for16pregnancyEndDateSb10Foundation0N0V_AItFZ_0((uint64_t)v11, (uint64_t)v9))
  {
    v35 = 0;
    v36 = 0xE000000000000000;
    sub_19A353898();
    sub_19A353454();
    sub_19A353CAC();
    sub_19A353454();
    swift_bridgeObjectRelease();
    sub_19A353454();
    v26 = v35;
    v27 = v36;
    sub_19A323A18();
    swift_allocError();
    *v28 = v26;
    v28[1] = v27;
    swift_willThrow();
    v29 = v32;
    v20 = *(void (**)(char *, uint64_t))(v31 + 8);
    v20(v9, v32);
    v20(v11, v29);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return (uint64_t)v20;
  }
  result = sub_19A352F44();
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v22 < 9.22337204e18)
  {
    v20 = (void (*)(char *, uint64_t))sub_19A353C58();
    v23 = *(void (**)(char *, uint64_t))(v31 + 8);
    v24 = v9;
    v25 = v32;
    v23(v24, v32);
    v23(v11, v25);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return (uint64_t)v20;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.weeksAndDaysFormat(width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a2;
  v12[1] = a1;
  v2 = sub_19A353BEC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_19A353BBC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A30FA98(0, &qword_1EE397F68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  sub_19A353C10();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_19A44FF00;
  sub_19A353C04();
  sub_19A353BF8();
  sub_19A323428(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_19A353BB0();
  sub_19A353BE0();
  sub_19A352C2C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static HKMCPregnancyDatesFactory.gestationalAgeCompactString(on:pregnancySample:)(uint64_t a1, void *a2)
{
  return sub_19A323A5C(a1, a2, (SEL *)&selRef_gestationalAgeCompactStringOnDate_pregnancyStartDate_startTimeZoneName_);
}

id sub_19A321420(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v14;

  v7 = sub_19A352FD4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A352FA4();
  v11 = a4;
  sub_19A323A5C((uint64_t)v10, v11, a5);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v12 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_19A3214F0()
{
  sub_19A3251B8();
  return sub_19A3533F4() & 1;
}

id sub_19A321550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  uint64_t v19;

  v7 = sub_19A352FD4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  sub_19A352FA4();
  sub_19A352FA4();
  v14 = sub_19A353430();
  a6(v13, v11, v14, v15);
  swift_bridgeObjectRelease();
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  v17 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t static HKMCPregnancyDatesFactory.gestationalAgeInComponents(on:pregnancyStart:startTimeZoneName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_19A30FA98(0, (unint64_t *)&qword_1EE397F30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - v11;
  type metadata accessor for HKMCPregnancyDatesFactory();
  static HKMCPregnancyDatesFactory.calculateGestationalAgeComponentsForDisplay(fromPregnancyStart:startTimeZoneName:end:)(a2, a3, a4, a1, (uint64_t)v12);
  v13 = sub_19A352D40();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_19A323268((uint64_t)v12, (unint64_t *)&qword_1EE397F30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    v15 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v12, v13);
    v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a5, v15, 1, v13);
}

uint64_t static HKMCPregnancyDatesFactory.calculateGestationalAgeComponentsForDisplay(fromPregnancyStart:startTimeZoneName:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, _QWORD, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a1;
  v44 = a4;
  v8 = sub_19A352FD4();
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v41 - v12;
  sub_19A30FA98(0, (unint64_t *)&qword_1EE397F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v41 - v15;
  v17 = sub_19A3530B8();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v41 - v22;
  sub_19A3221F8(a2, a3, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_19A323268((uint64_t)v16, (unint64_t *)&qword_1EE397F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
    v24 = sub_19A352D40();
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v26 = a5;
  }
  else
  {
    v42 = a5;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
    sub_19A35304C();
    sub_19A35304C();
    if (_sSo25HKMCPregnancyDatesFactoryC9HealthKitE42isPregnancyDurationPhysiologicallyPossible3for16pregnancyEndDateSb10Foundation0N0V_AItFZ_0((uint64_t)v13, (uint64_t)v11))
    {
      sub_19A353088();
      sub_19A30FA98(0, &qword_1EE397F70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v27 = sub_19A3530AC();
      v28 = *(_QWORD *)(v27 - 8);
      v44 = *(_QWORD *)(v28 + 72);
      v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_19A44FF00;
      v31 = v30 + v29;
      v32 = *(void (**)(unint64_t, _QWORD, uint64_t))(v28 + 104);
      v32(v31, *MEMORY[0x1E0CB1108], v27);
      v32(v31 + v44, *MEMORY[0x1E0CB1130], v27);
      sub_19A322E10(v30);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v33 = v42;
      sub_19A353058();
      swift_bridgeObjectRelease();
      v34 = *(void (**)(char *, uint64_t))(v18 + 8);
      v34(v21, v17);
      v35 = v46;
      v36 = *(void (**)(char *, uint64_t))(v45 + 8);
      v36(v11, v46);
      v36(v13, v35);
      v34(v23, v17);
      v37 = sub_19A352D40();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v33, 0, 1, v37);
    }
    v39 = v46;
    v40 = *(void (**)(char *, uint64_t))(v45 + 8);
    v40(v11, v46);
    v40(v13, v39);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v24 = sub_19A352D40();
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v26 = v42;
  }
  return v25(v26, 1, 1, v24);
}

uint64_t static HKMCPregnancyDatesFactory.maximumNumberOfWeeksPregnant()()
{
  return 44;
}

uint64_t static HKMCPregnancyDatesFactory.isPregnancyDurationPhysiologicallyPossible(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_19A352FD4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A352FC8();
  LOBYTE(a1) = _sSo25HKMCPregnancyDatesFactoryC9HealthKitE42isPregnancyDurationPhysiologicallyPossible3for16pregnancyEndDateSb10Foundation0N0V_AItFZ_0(a1, (uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return a1 & 1;
}

BOOL static HKMCPregnancyDatesFactory.isPregnancyDurationPhysiologicallyPossible(_:)()
{
  sub_19A353C7C();
  return (sub_19A353C64() & 1) == 0;
}

void __swiftcall HKMCPregnancyDatesFactory.init()(HKMCPregnancyDatesFactory *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void HKMCPregnancyDatesFactory.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static HKMCPregnancyDatesFactory.calculateEstimatedDueDate(pregnancyStart:)()
{
  return sub_19A352F50();
}

uint64_t static HKMCPregnancyDatesFactory.calculateStartDateFromGestationalAge(weeks:days:on:)(uint64_t result, uint64_t a2)
{
  if ((unsigned __int128)(result * (__int128)7) >> 64 == (7 * result) >> 63)
  {
    if (!__OFADD__(7 * result, a2))
      return sub_19A352F50();
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.calculateStartDateFromEmbryoTransfer(date:embryonicAgeInDays:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (__OFSUB__(0, a2))
  {
    __break(1u);
  }
  else if (!__OFSUB__(-a2, 14))
  {
    return sub_19A352F50();
  }
  __break(1u);
  return result;
}

id sub_19A3221F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id result;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a3;
  v5 = sub_19A353028();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A30FA98(0, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v31 - v10;
  v12 = sub_19A353100();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v31 - v17;
  v31 = a1;
  sub_19A3530D0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v19 = v32;
    sub_19A323268((uint64_t)v11, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470]);
    result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
    if (result)
    {
      v21 = result;
      v22 = objc_msgSend(result, sel_showSensitiveLogItems);

      if (v22)
      {
        if (qword_1EE396A88 != -1)
          swift_once();
        v23 = sub_19A353130();
        __swift_project_value_buffer(v23, (uint64_t)qword_1EE3A2FC0);
        swift_bridgeObjectRetain_n();
        v24 = sub_19A353118();
        v25 = sub_19A3536A0();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc();
          v27 = swift_slowAlloc();
          v34 = v27;
          *(_DWORD *)v26 = 136315394;
          v33 = sub_19A334B08(0x7261646E656C6143, 0xE800000000000000, &v34);
          sub_19A353778();
          *(_WORD *)(v26 + 12) = 2080;
          swift_bridgeObjectRetain();
          v33 = sub_19A334B08(v31, a2, &v34);
          sub_19A353778();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_19A0E6000, v24, v25, "[%s] Error: Not a valid timezone - %s", (uint8_t *)v26, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x19AEC804C](v27, -1, -1);
          MEMORY[0x19AEC804C](v26, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      v30 = sub_19A3530B8();
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v19, 1, 1, v30);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CB0EF8], v5);
    v28 = v32;
    sub_19A353034();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
    sub_19A3530A0();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v29 = sub_19A3530B8();
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
  }
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.calculateEmbryoTransferDate(fromPregnancyStart:embryonicAgeInDays:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!__OFADD__(a2, 14))
    return sub_19A352F50();
  __break(1u);
  return result;
}

uint64_t static HKMCPregnancyDatesFactory.currentTrimester(on:pregnancyStart:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t started;
  uint64_t result;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  char v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v26;
  char v27;
  char *v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v2 = sub_19A352FD4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v35 - v7;
  v9 = MEMORY[0x1E0C80A78](v6);
  v38 = (char *)&v35 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v35 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v35 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  started = _sSo25HKMCPregnancyDatesFactoryC9HealthKitE19calculateTrimesters14pregnancyStartSay10Foundation4DateVGAH_tFZ_0();
  v39 = v18;
  result = sub_19A352F50();
  if (!*(_QWORD *)(started + 16))
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v36 = v8;
  v21 = started + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v22 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v22(v16, v21, v2);
  v40 = sub_19A306A54((unint64_t *)&qword_1EE399230, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v23 = sub_19A3533A0();
  v24 = *(void (**)(char *, uint64_t))(v3 + 8);
  v24(v16, v2);
  result = ((uint64_t (*)(char *, unint64_t, uint64_t))v22)(v13, a1, v2);
  if ((v23 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v24)(v13, v2);
  }
  else
  {
    if (*(_QWORD *)(started + 16) < 2uLL)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v22(v16, v21 + *(_QWORD *)(v3 + 72), v2);
    v25 = sub_19A352F74();
    v24(v16, v2);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v13, v2);
    if ((v25 & 1) != 0)
    {
      v24(v39, v2);
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  if (*(_QWORD *)(started + 16) < 2uLL)
    goto LABEL_21;
  v26 = *(_QWORD *)(v3 + 72);
  v22(v16, v21 + v26, v2);
  v27 = sub_19A3533A0();
  v24(v16, v2);
  v28 = v38;
  result = ((uint64_t (*)(char *, unint64_t, uint64_t))v22)(v38, a1, v2);
  if ((v27 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, uint64_t))v24)(v28, v2);
  }
  else
  {
    if (*(_QWORD *)(started + 16) < 3uLL)
    {
LABEL_24:
      __break(1u);
      return result;
    }
    v22(v16, v21 + 2 * v26, v2);
    v29 = sub_19A352F74();
    v24(v16, v2);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v28, v2);
    if ((v29 & 1) != 0)
    {
      v24(v39, v2);
      swift_bridgeObjectRelease();
      return 2;
    }
  }
  if (*(_QWORD *)(started + 16) < 3uLL)
    goto LABEL_22;
  v22(v16, v21 + 2 * v26, v2);
  swift_bridgeObjectRelease();
  v30 = sub_19A3533A0();
  v24(v16, v2);
  v31 = v36;
  v22(v36, a1, v2);
  v32 = v37;
  v33 = v39;
  v22(v37, (unint64_t)v39, v2);
  if ((v30 & 1) != 0)
  {
    v24(v32, v2);
    v24(v31, v2);
    v24(v33, v2);
    return 0;
  }
  v34 = sub_19A3533A0();
  v24(v32, v2);
  v24(v31, v2);
  v24(v33, v2);
  if ((v34 & 1) != 0)
    return 0;
  return 3;
}

uint64_t sub_19A322A64()
{
  uint64_t v0;

  v0 = sub_19A353130();
  __swift_allocate_value_buffer(v0, qword_1EE3A2FC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE3A2FC0);
  return sub_19A353124();
}

uint64_t static HKMCPregnancyDatesConstants.physiologicalWashoutDuration.getter()
{
  return 84;
}

id sub_19A322AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v29;
  void *v30;
  void *v33;
  void *v34;

  v16 = sub_19A352FD4();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v19 = 0;
  if (v18(a2, 1, v16) != 1)
  {
    v19 = sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  }
  if (v18(a3, 1, v16) == 1)
  {
    v30 = 0;
  }
  else
  {
    v30 = (void *)sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  }
  v34 = (void *)v19;
  if (v18(a4, 1, v16) == 1)
  {
    v29 = 0;
  }
  else
  {
    v29 = (void *)sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a4, v16);
  }
  v20 = sub_19A352CB0();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(a5, 1, v20) != 1)
  {
    v22 = (void *)sub_19A352C5C();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a5, v20);
  }
  if (v18(a6, 1, v16) == 1)
  {
    v23 = 0;
  }
  else
  {
    v23 = (void *)sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a6, v16);
  }
  if (v18(a7, 1, v16) == 1)
  {
    v24 = 0;
    if (a8)
    {
LABEL_16:
      v25 = (void *)sub_19A3534C0();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  else
  {
    v24 = (void *)sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a7, v16);
    if (a8)
      goto LABEL_16;
  }
  v25 = 0;
LABEL_19:
  if (v18(a10, 1, v16) == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = (void *)sub_19A352F5C();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a10, v16);
  }
  v27 = objc_msgSend(v33, sel_initWithState_pregnancyStartDate_pregnancyEndDate_estimatedDueDate_pregnancyDuration_physiologicalWashoutEndDate_behavioralWashoutEndDate_trimesters_sample_educationalStepsCompletedDate_, a1, v34, v30, v29, v22, v23, v24, v25, a9, v26);

  return v27;
}

unint64_t _sSo25HKMCPregnancyDatesFactoryC9HealthKitE9TrimesterO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t sub_19A322DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19A322E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = sub_19A3530AC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_19A325214(0, &qword_1EE397FB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], sub_19A324F08, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v9 = sub_19A353880();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      sub_19A324F08();
      v14 = sub_19A353370();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v6, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          sub_19A306A54(&qword_1EE397FC0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
          v20 = sub_19A3533F4();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t _sSo25HKMCPregnancyDatesFactoryC9HealthKitE19calculateTrimesters14pregnancyStartSay10Foundation4DateVGAH_tFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v0 = sub_19A3530B8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_19A352FD4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v22 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v22 - v13;
  sub_19A353088();
  sub_19A35304C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_19A352F50();
  sub_19A352F50();
  sub_19A30FA98(0, &qword_1EE398070, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = *(_QWORD *)(v6 + 72);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_19A44FF10;
  v18 = v17 + v16;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 16);
  v19(v18, v14, v4);
  v19(v18 + v15, v12, v4);
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v18 + 2 * v15, v9, v4);
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v12, v4);
  v20(v14, v4);
  return v17;
}

uint64_t sub_19A323268(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_19A30FA98(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

BOOL _sSo25HKMCPregnancyDatesFactoryC9HealthKitE42isPregnancyDurationPhysiologicallyPossible3for16pregnancyEndDateSb10Foundation0N0V_AItFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  char v12;
  void (*v13)(char *, uint64_t);
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;

  v3 = sub_19A352FD4();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  sub_19A306A54((unint64_t *)&qword_1EE399230, v10, MEMORY[0x1E0CB08B0]);
  if ((sub_19A3533A0() & 1) != 0)
    return 0;
  sub_19A352F38();
  v12 = sub_19A352F98();
  v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if ((v12 & 1) != 0)
    sub_19A352FC8();
  else
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, a2, v3);
  sub_19A352F50();
  sub_19A352F44();
  v15 = v14;
  sub_19A352F44();
  v17 = v16;
  v13(v7, v3);
  v13(v9, v3);
  return v17 <= v15;
}

uint64_t sub_19A323428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = sub_19A353C10();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_19A325214(0, &qword_1EE398050, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], sub_19A325284, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
    v9 = sub_19A353880();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      sub_19A325284();
      v14 = sub_19A353370();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v6, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          sub_19A306A54(&qword_1EE398060, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2808]);
          v20 = sub_19A3533F4();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t _sSo25HKMCPregnancyDatesFactoryC9HealthKitE20gestationalAgeString2on14pregnancyStart17startTimeZoneNameSS10Foundation4DateV_AJSStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = sub_19A353BEC();
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19A353BBC();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_19A353C34();
  v24 = *(_QWORD *)(v14 - 8);
  v25 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_19A353C40();
  v26 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HKMCPregnancyDatesFactory();
  static HKMCPregnancyDatesFactory.gestationalAgeDurationForDisplay(on:pregnancyStart:startTimeZoneName:)(a1, a2, a3, a4);
  v23[1] = v20;
  sub_19A353C1C();
  sub_19A30FA98(0, &qword_1EE397F68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  sub_19A353C10();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_19A44FF00;
  sub_19A353C04();
  sub_19A353BF8();
  sub_19A323428(v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_19A353BB0();
  sub_19A353BE0();
  sub_19A352C2C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v28);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v16, v25);
  sub_19A306A54(&qword_1EE398068, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB2840], MEMORY[0x1E0CB2838]);
  sub_19A353C4C();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v17);
  return v31;
}

unint64_t sub_19A323A18()
{
  unint64_t result;

  result = qword_1EE397F60;
  if (!qword_1EE397F60)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A45001C, &_s13DurationErrorON);
    atomic_store(result, (unint64_t *)&qword_1EE397F60);
  }
  return result;
}

uint64_t sub_19A323A5C(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v22;
  SEL *v23;

  v23 = a3;
  v4 = sub_19A353100();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_19A352FD4();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)sub_19A352F5C();
  v13 = objc_msgSend(a2, sel_startDate);
  sub_19A352FA4();

  v14 = (void *)sub_19A352F5C();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v15 = objc_msgSend(a2, sel__timeZoneName);
  if (v15)
  {
    v16 = v15;
    sub_19A353430();

  }
  else
  {
    sub_19A3530F4();
    sub_19A3530DC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v17 = (void *)objc_opt_self();
  v18 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, *v23, v12, v14, v18);

  v20 = sub_19A353430();
  return v20;
}

uint64_t _sSo25HKMCPregnancyDatesFactoryC9HealthKitE27gestationalAgeCompactString2on14pregnancyStart17startTimeZoneNameSS10Foundation4DateV_AJSStFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v69)(_QWORD *, _QWORD);
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t KeyPath;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, _QWORD, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[2];
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;

  v142 = (char *)a4;
  v141 = a3;
  v124 = sub_19A352C44();
  v122 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124);
  v131 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_19A352D7C();
  MEMORY[0x1E0C80A78](v130);
  v129 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_19A352E0C();
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v126 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A324F24(0);
  v125 = v9;
  MEMORY[0x1E0C80A78](v9);
  v123 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_19A30FA98(0, &qword_1EE397FD8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAED48], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12);
  v145 = (char *)&v107 - v13;
  v14 = sub_19A352D58();
  v15 = *(_QWORD *)(v14 - 8);
  v143 = v14;
  v144 = v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v121 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v120 = (char *)&v107 - v18;
  v132 = sub_19A352DA0();
  v152 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v151 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A30FA98(0, &qword_1EE397FE0, v20, v11);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v107 - v22;
  v24 = sub_19A352DAC();
  v147 = *(_QWORD *)(v24 - 8);
  v148 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v107 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v146 = (char *)&v107 - v28;
  v133 = sub_19A352DB8();
  v135 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133);
  v149 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A324F64(0);
  v137 = v30;
  v31 = MEMORY[0x1E0C80A78](v30);
  v134 = (char *)&v107 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v150 = (uint64_t)&v107 - v33;
  v139 = sub_19A353BC8();
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139);
  v136 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_19A353BEC();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119);
  v117 = (char *)&v107 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_19A353BBC();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v114 = (char *)&v107 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_19A353C34();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113);
  v38 = (char *)&v107 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_19A353C40();
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111);
  v40 = (char *)&v107 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_19A352DD0();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v107 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HKMCPregnancyDatesFactory();
  static HKMCPregnancyDatesFactory.gestationalAgeDurationForDisplay(on:pregnancyStart:startTimeZoneName:)(a1, a2, v141, (unint64_t)v142);
  v108 = v42;
  v141 = v41;
  v140 = v27;
  v142 = v23;
  v109 = v46;
  sub_19A353C28();
  sub_19A30FA98(0, &qword_1EE397F68, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  sub_19A353C10();
  v47 = swift_allocObject();
  v107 = xmmword_19A44FF00;
  *(_OWORD *)(v47 + 16) = xmmword_19A44FF00;
  sub_19A353C04();
  sub_19A353BF8();
  sub_19A323428(v47);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v48 = v114;
  sub_19A353BB0();
  v49 = v117;
  sub_19A353BE0();
  sub_19A352C2C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v49, v119);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v48, v116);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v38, v113);
  v50 = v136;
  sub_19A353BD4();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v40, v111);
  sub_19A306A54(&qword_1EE397FF8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27A0], MEMORY[0x1E0CB2798]);
  v51 = v139;
  sub_19A353C4C();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v50, v51);
  v157 = 0;
  v158 = 0xE000000000000000;
  v155 = 0;
  v156 = 0xE000000000000000;
  v52 = v149;
  v139 = (uint64_t)v44;
  sub_19A352DC4();
  v53 = v135;
  v54 = (uint64_t)v134;
  v55 = v133;
  v136 = *(char **)(v135 + 16);
  ((void (*)(char *, char *, uint64_t))v136)(v134, v52, v133);
  v56 = sub_19A324F88();
  v57 = v146;
  v138 = v56;
  sub_19A353640();
  v135 = *(_QWORD *)(v53 + 8);
  ((void (*)(char *, uint64_t))v135)(v52, v55);
  v58 = v137;
  v59 = v147;
  v60 = v148;
  (*(void (**)(uint64_t, char *, uint64_t))(v147 + 32))(v54 + *(int *)(v137 + 36), v57, v148);
  v61 = v150;
  sub_19A324FA4(v54, v150);
  v62 = (char *)(v61 + *(int *)(v58 + 36));
  v137 = *(_QWORD *)(v59 + 16);
  LODWORD(v119) = *MEMORY[0x1E0CAED38];
  LODWORD(v118) = *MEMORY[0x1E0CAED28];
  v63 = v132;
  v134 = v62;
  ((void (*)(char *, char *, uint64_t))v137)(v57, v62, v60);
  while (1)
  {
    v65 = v140;
    sub_19A353664();
    sub_19A306A54(&qword_1EE398000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v66 = sub_19A3533F4();
    v67 = *(void (**)(char *, uint64_t))(v59 + 8);
    v67(v65, v60);
    v68 = v55;
    v67(v57, v60);
    if ((v66 & 1) != 0)
      break;
    v69 = (void (*)(_QWORD *, _QWORD))sub_19A353688();
    v70 = v152;
    v71 = (unint64_t)v142;
    (*(void (**)(char *))(v152 + 16))(v142);
    v69(v154, 0);
    v72 = v149;
    ((void (*)(char *, uint64_t, uint64_t))v136)(v149, v61, v68);
    v73 = v70;
    sub_19A353670();
    v55 = v68;
    ((void (*)(char *, uint64_t))v135)(v72, v68);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v71, 0, 1, v63);
    v74 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v63);
    v75 = v141;
    if (v74 == 1)
      goto LABEL_15;
    v76 = v151;
    (*(void (**)(char *, unint64_t, uint64_t))(v73 + 32))(v151, v71, v63);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    swift_getKeyPath();
    sub_19A32509C();
    v78 = (uint64_t)v145;
    sub_19A352D88();
    swift_release();
    v79 = v63;
    v80 = v143;
    v81 = v144;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v78, 1, v143) == 1)
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v79);
      sub_19A323268(v78, &qword_1EE397FD8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAED48]);
      v63 = v79;
      v59 = v147;
      v60 = v148;
      v57 = v146;
      v61 = v150;
      v64 = v134;
      goto LABEL_4;
    }
    v82 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v120, v78, v80);
    v83 = (uint64_t)v123;
    sub_19A352D94();
    sub_19A306A54(&qword_1EE398028, (uint64_t (*)(uint64_t))sub_19A324F24, MEMORY[0x1E0DEB8A8]);
    v84 = v126;
    sub_19A352DDC();
    sub_19A318F00(v83, (uint64_t (*)(_QWORD))sub_19A324F24);
    sub_19A352E00();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v84, v128);
    sub_19A306A54(&qword_1EE398030, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEF10], MEMORY[0x1E0CAEF28]);
    v154[0] = sub_19A35346C();
    v154[1] = v85;
    v86 = v131;
    sub_19A352C38();
    sub_19A325174();
    v133 = sub_19A353790();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v86, v124);
    swift_bridgeObjectRelease();
    v87 = *(void (**)(char *, _QWORD, uint64_t))(v81 + 104);
    v88 = v121;
    v87(v121, v119, v80);
    sub_19A306A54(&qword_1EE398040, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAED48], MEMORY[0x1E0CAED50]);
    sub_19A353484();
    sub_19A353484();
    v90 = v153;
    v89 = v154[0];
    v91 = *(void (**)(char *, uint64_t))(v81 + 8);
    v91(v88, v80);
    if (v89 == v90)
    {
      v92 = v151;
      v60 = v148;
      v64 = v134;
    }
    else
    {
      v87(v88, v118, v80);
      sub_19A353484();
      sub_19A353484();
      v94 = v153;
      v93 = v154[0];
      v91(v88, v80);
      v95 = v93 == v94;
      v92 = v151;
      v60 = v148;
      v64 = v134;
      if (!v95)
        goto LABEL_13;
    }
    sub_19A353454();
LABEL_13:
    swift_bridgeObjectRelease();
    v91(v82, v80);
    v63 = v132;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v92, v132);
    v57 = v146;
    v59 = v147;
    v61 = v150;
LABEL_4:
    ((void (*)(char *, char *, uint64_t))v137)(v57, v64, v60);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v152 + 56))(v142, 1, 1, v63);
  v75 = v141;
LABEL_15:
  sub_19A318F00(v150, (uint64_t (*)(_QWORD))sub_19A324F64);
  v97 = v157;
  v96 = v158;
  v98 = HIBYTE(v158) & 0xF;
  if ((v158 & 0x2000000000000000) == 0)
    v98 = v157 & 0xFFFFFFFFFFFFLL;
  v99 = v139;
  if (v98)
  {
    v101 = v155;
    v100 = v156;
    v102 = HIBYTE(v156) & 0xF;
    if ((v156 & 0x2000000000000000) == 0)
      v102 = v155 & 0xFFFFFFFFFFFFLL;
    if (v102)
    {
      sub_19A30FA98(0, &qword_1EE398008, (uint64_t (*)(uint64_t))sub_19A324FE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v103 = swift_allocObject();
      *(_OWORD *)(v103 + 16) = v107;
      v104 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v103 + 56) = MEMORY[0x1E0DEA968];
      v105 = sub_19A32503C();
      *(_QWORD *)(v103 + 32) = v97;
      *(_QWORD *)(v103 + 40) = v96;
      *(_QWORD *)(v103 + 96) = v104;
      *(_QWORD *)(v103 + 104) = v105;
      *(_QWORD *)(v103 + 64) = v105;
      *(_QWORD *)(v103 + 72) = v101;
      *(_QWORD *)(v103 + 80) = v100;
      v106 = sub_19A35340C();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v99, v75);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v99, v75);
      return v157;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v99, v75);
    return v155;
  }
  return v106;
}

unint64_t type metadata accessor for HKMCPregnancyDatesFactory()
{
  unint64_t result;

  result = qword_1EE397FA8;
  if (!qword_1EE397FA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE397FA8);
  }
  return result;
}

unint64_t sub_19A324C20()
{
  unint64_t result;

  result = qword_1EE397F78;
  if (!qword_1EE397F78)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKMCPregnancyDatesFactory.Trimester, &type metadata for HKMCPregnancyDatesFactory.Trimester);
    atomic_store(result, (unint64_t *)&qword_1EE397F78);
  }
  return result;
}

uint64_t _s9TrimesterOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s9TrimesterOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19A324D40 + 4 * byte_19A44FF25[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19A324D74 + 4 * byte_19A44FF20[v4]))();
}

uint64_t sub_19A324D74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A324D7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A324D84);
  return result;
}

uint64_t sub_19A324D90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A324D98);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19A324D9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A324DA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_19A324DB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HKMCPregnancyDatesFactory.Trimester()
{
  return &type metadata for HKMCPregnancyDatesFactory.Trimester;
}

ValueMetadata *type metadata accessor for HKMCPregnancyDatesConstants()
{
  return &type metadata for HKMCPregnancyDatesConstants;
}

_QWORD *_s13DurationErrorOwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s13DurationErrorOwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s13DurationErrorOwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s13DurationErrorOwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13DurationErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13DurationErrorOMa()
{
  return &_s13DurationErrorON;
}

uint64_t sub_19A324F08()
{
  return sub_19A306A54(&qword_1EE397FB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
}

void sub_19A324F24(uint64_t a1)
{
  sub_19A325214(a1, &qword_1EE397FC8, MEMORY[0x1E0CAF1B0], sub_19A324F48, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
}

uint64_t sub_19A324F48()
{
  return sub_19A306A54(&qword_1EE397FD0, MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
}

void sub_19A324F64(uint64_t a1)
{
  sub_19A325214(a1, &qword_1EE397FE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], sub_19A324F88, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

uint64_t sub_19A324F88()
{
  return sub_19A306A54(&qword_1EE397FF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
}

uint64_t sub_19A324FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A324F64(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_19A324FE8()
{
  unint64_t result;

  result = qword_1EE398010;
  if (!qword_1EE398010)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE398010);
  }
  return result;
}

unint64_t sub_19A32503C()
{
  unint64_t result;

  result = qword_1EE398018;
  if (!qword_1EE398018)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE398018);
  }
  return result;
}

void sub_19A325080()
{
  sub_19A352D64();
  __break(1u);
}

unint64_t sub_19A32509C()
{
  unint64_t result;

  result = qword_1EE398020;
  if (!qword_1EE398020)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CAED58], MEMORY[0x1E0CAED68]);
    atomic_store(result, (unint64_t *)&qword_1EE398020);
  }
  return result;
}

void sub_19A3250E0()
{
  sub_19A32509C();
  sub_19A352EC0();
  __break(1u);
}

uint64_t sub_19A325104()
{
  return 8;
}

uint64_t sub_19A325110()
{
  return swift_release();
}

uint64_t sub_19A325118(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_19A325128()
{
  sub_19A3251B8();
  return sub_19A353388();
}

_QWORD *sub_19A325168(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_19A325174()
{
  unint64_t result;

  result = qword_1EE398038;
  if (!qword_1EE398038)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EE398038);
  }
  return result;
}

void sub_19A3251B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398048)
  {
    sub_19A352D70();
    v0 = sub_19A353BA4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398048);
  }
}

void sub_19A325214(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_19A325284()
{
  return sub_19A306A54(&qword_1EE398058, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2800]);
}

uint64_t dispatch thunk of HKAsyncQuery.result(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_19A30AF20;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of HKAsyncSequenceQuery.results(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_19A325334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v6, a1, a4);
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_19A325398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_throwingResume();
}

uint64_t HKAnchoredObjectQueryDescriptor.predicates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_19A3253D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Descriptor;
  uint64_t v5;

  Descriptor = type metadata accessor for HKAnchoredObjectQueryDescriptor(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = swift_bridgeObjectRetain();
  return HKAnchoredObjectQueryDescriptor.predicates.setter(v5, Descriptor);
}

uint64_t HKAnchoredObjectQueryDescriptor.predicates.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  *v2 = a1;
  return sub_19A32545C(a2, v5, v6, v7);
}

uint64_t sub_19A32545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19A309058(a1, a2, a3, a4);
}

uint64_t *(*HKAnchoredObjectQueryDescriptor.predicates.modify(_QWORD *a1, uint64_t a2))(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = v2;
  return sub_19A3254C0;
}

uint64_t *sub_19A3254C0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 1) == 0)
    return (uint64_t *)sub_19A32545C(*result, a2, a3, a4);
  return result;
}

void *HKAnchoredObjectQueryDescriptor.anchor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void HKAnchoredObjectQueryDescriptor.anchor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*HKAnchoredObjectQueryDescriptor.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKAnchoredObjectQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKAnchoredObjectQueryDescriptor.limit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*HKAnchoredObjectQueryDescriptor.limit.modify())()
{
  return nullsub_1;
}

uint64_t HKAnchoredObjectQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 40);
  return swift_bridgeObjectRetain();
}

__n128 HKAnchoredObjectQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  v1[2] = v4;
  v1[3].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKAnchoredObjectQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKAnchoredObjectQueryDescriptor.Result.addedSamples.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKAnchoredObjectQueryDescriptor.Result.deletedObjects.getter()
{
  return swift_bridgeObjectRetain();
}

id HKAnchoredObjectQueryDescriptor.Result.newAnchor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t HKAnchoredObjectQueryDescriptor.init(predicates:anchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10;
  uint64_t Descriptor;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = a4 & 1;
  Descriptor = type metadata accessor for HKAnchoredObjectQueryDescriptor(0, a5, a3, a4);
  result = sub_19A309058(Descriptor, v12, v13, v14);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = -1;
  return result;
}

uint64_t type metadata accessor for HKAnchoredObjectQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKAnchoredObjectQueryDescriptor);
}

uint64_t HKAnchoredObjectQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = a3;
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 72) = a1;
  return swift_task_switch();
}

uint64_t sub_19A3256B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;

  v2 = v0[10];
  v1 = v0[11];
  v3 = (_QWORD *)swift_task_alloc();
  v0[12] = v3;
  v4 = *(_QWORD *)(v1 + 16);
  v3[2] = v4;
  v3[3] = v0 + 2;
  v3[4] = v2;
  v10 = (char *)&dword_1EE397138 + dword_1EE397138;
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  v8 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(0, v4, v6, v7);
  *v5 = v0;
  v5[1] = sub_19A325768;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, void (*)(uint64_t), _QWORD *, uint64_t))v10)(v0[9], 0, 0, sub_19A325A38, v3, v8);
}

uint64_t sub_19A325768()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_19A3257DC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_19A325810(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t (*v21)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  __int128 v22;
  uint64_t (*v23)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, void *, void *);
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  void *v29;

  if (*(_BYTE *)(a2 + 24))
    v8 = 0;
  else
    v8 = *(_QWORD *)(a2 + 16);
  sub_19A308AE4(0, (unint64_t *)&qword_1EE3971E8);
  sub_19A3111F4(*(_QWORD *)a2, a4, v9, v10);
  v11 = *(void **)(a2 + 8);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a1;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)a2;
  *(_OWORD *)(v12 + 56) = v13;
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v12 + 88) = *(_QWORD *)(a2 + 48);
  v14 = objc_allocWithZone((Class)HKAnchoredObjectQuery);
  v15 = v11;
  v16 = a3;
  sub_19A326470(a2);
  v17 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v25 = sub_19A32732C;
  v26 = v12;
  *(_QWORD *)&v22 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v22 + 1) = 1107296256;
  v23 = sub_19A326678;
  v24 = &block_descriptor_28_0;
  v18 = _Block_copy(&v22);
  v19 = objc_msgSend(v14, sel_initWithQueryDescriptors_anchor_limit_resultsHandler_, v17, v15, v8, v18);

  _Block_release(v18);
  swift_release();
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, void *, void *))(a2 + 48);
  sub_19A309F34((uint64_t)&v22, (uint64_t)v27);
  sub_19A309F34((uint64_t)v27, (uint64_t)&v28);
  v20 = v29;
  if (v29)
  {
    sub_19A309FF4((uint64_t)&v22);
    v20 = (void *)sub_19A353400();
  }
  v21 = v23;
  objc_msgSend(v19, sel_setDebugIdentifier_, v20);

  objc_msgSend(v19, sel_setQualityOfService_, v21);
  sub_19A309FCC((uint64_t)&v22);
  objc_msgSend(v16, sel_executeQuery_, v19);

}

void sub_19A325A38(uint64_t a1)
{
  uint64_t v1;

  sub_19A325810(a1, *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKAnchoredObjectQueryDescriptor.Result);
}

uint64_t sub_19A325A50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, id a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD *, uint64_t);
  id v20;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  objc_msgSend(a6, sel_stopQuery_, a1);
  if (a2 && a4)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    if (a3)
      v16 = a3;
    v26[0] = a2;
    v26[1] = v16;
    v26[2] = a4;
    v17 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(0, a9, v14, v15);
    sub_19A305E34();
    v18 = *(_QWORD *)(*(_QWORD *)(a7 + 64) + 40);
    v19 = *(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    swift_bridgeObjectRetain();
    v20 = a4;
    swift_bridgeObjectRetain();
    v19(v18, v26, v17);
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a5)
    {
      v22 = a5;
    }
    else
    {
      type metadata accessor for HKError(0);
      v26[3] = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v22 = (void *)v26[0];
    }
    v26[0] = v22;
    v23 = a5;
    v24 = sub_19A305E34();
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD *, unint64_t))(*(_QWORD *)(v24 - 8) + 32))(v25, v26, v24);
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A325BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v8 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *(_QWORD *)v8 = v4;
  *(_QWORD *)(v8 + 8) = sub_19A30D568;
  *(_QWORD *)(v8 + 80) = a2;
  *(_QWORD *)(v8 + 88) = a3;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)v3 + 6);
  *(_QWORD *)(v8 + 72) = a1;
  v9 = v3[2];
  v10 = *v3;
  *(_OWORD *)(v8 + 32) = v3[1];
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)(v8 + 16) = v10;
  return swift_task_switch();
}

uint64_t HKAnchoredObjectQueryDescriptor.Results.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a2 + 16), v5, v6);
  sub_19A305E34();
  sub_19A3535B0();
  *v4 = v2;
  v4[1] = sub_19A30AF20;
  return sub_19A3535A4();
}

uint64_t sub_19A325CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, a2, a3, a4);
  sub_19A305E34();
  v7 = sub_19A3535B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a5, a1, v7);
}

uint64_t sub_19A325D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_19A30D568;
  return HKAnchoredObjectQueryDescriptor.Results.Iterator.next()(a1, a2);
}

uint64_t sub_19A325DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_19A325E44;
  return sub_19A353538();
}

uint64_t sub_19A325E44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t HKAnchoredObjectQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, v5, a2, a3);
  sub_19A305E34();
  v7 = sub_19A3535B0();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - v8;
  type metadata accessor for HKQueryAsyncStream(0, v6, v10, v11);
  HKQueryAsyncStream.makeAsyncIterator()();
  return sub_19A325CE4((uint64_t)v9, v5, v12, v13, a4);
}

uint64_t sub_19A325F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  HKAnchoredObjectQueryDescriptor.Results.makeAsyncIterator()(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v4, a1);
}

uint64_t HKAnchoredObjectQueryDescriptor.results(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  id v19;
  _OWORD v21[3];
  uint64_t v22;

  v8 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, v8, a3, a4);
  v12 = type metadata accessor for HKQueryAsyncStream(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v21 - v14;
  v16 = *(_OWORD *)(v5 + 16);
  v21[0] = *(_OWORD *)v5;
  v21[1] = v16;
  v21[2] = *(_OWORD *)(v5 + 32);
  v22 = *(_QWORD *)(v5 + 48);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v8;
  v18 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)v5;
  *(_OWORD *)(v17 + 40) = v18;
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v17 + 72) = *(_QWORD *)(v5 + 48);
  v19 = a1;
  sub_19A326470((uint64_t)v21);
  HKQueryAsyncStream.init(healthStore:queryBuilder:)(v19, (uint64_t)sub_19A326464, v17, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a5, v15, v12);
}

id sub_19A3260A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, char *, uint64_t);
  unint64_t v21;
  __int128 v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  void *v31;
  void *v32;
  uint64_t (*v33)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  __int128 aBlock;
  uint64_t (*v44)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  _BYTE v48[16];
  uint64_t v49;
  void *v50;

  v42 = a1;
  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, a3, a3, a4);
  sub_19A305E34();
  v7 = sub_19A35358C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v35 - v10;
  sub_19A308AE4(0, (unint64_t *)&qword_1EE3971E8);
  v12 = *(_QWORD *)a2;
  v40 = a3;
  sub_19A3111F4(v12, a3, v13, v14);
  v15 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 24))
    v15 = 0;
  v35 = *(id *)(a2 + 8);
  v36 = v15;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v41(v11, a1, v7);
  v16 = *(unsigned __int8 *)(v8 + 80);
  v38 = v16 | 7;
  v39 = (v16 + 24) & ~v16;
  v17 = v39;
  v18 = (v9 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = v18 + 56;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v20(v19 + v17, v11, v7);
  v21 = v19 + v18;
  v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v21 = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 16) = v22;
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v21 + 48) = *(_QWORD *)(a2 + 48);
  v23 = objc_allocWithZone((Class)HKAnchoredObjectQuery);
  v24 = v35;
  sub_19A326470(a2);
  v25 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  v46 = sub_19A327168;
  v47 = v19;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v44 = sub_19A326678;
  v45 = &block_descriptor_10;
  v26 = _Block_copy(&aBlock);
  v27 = objc_msgSend(v23, sel_initWithQueryDescriptors_anchor_limit_resultsHandler_, v25, v24, v36, v26);

  _Block_release(v26);
  swift_release();
  v41(v11, v42, v7);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v40;
  v20(v28 + v39, v11, v7);
  v29 = v28 + v18;
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v29 = *(_OWORD *)a2;
  *(_OWORD *)(v29 + 16) = v30;
  *(_OWORD *)(v29 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v29 + 48) = *(_QWORD *)(a2 + 48);
  v46 = sub_19A327168;
  v47 = v28;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v44 = sub_19A326678;
  v45 = &block_descriptor_22;
  v31 = _Block_copy(&aBlock);
  sub_19A326470(a2);
  swift_release();
  objc_msgSend(v27, sel_setUpdateHandler_, v31);
  _Block_release(v31);
  aBlock = *(_OWORD *)(a2 + 32);
  v44 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, void *, void *))(a2 + 48);
  sub_19A309F34((uint64_t)&aBlock, (uint64_t)v48);
  sub_19A309F34((uint64_t)v48, (uint64_t)&v49);
  v32 = v50;
  if (v50)
  {
    sub_19A309FF4((uint64_t)&aBlock);
    v32 = (void *)sub_19A353400();
  }
  v33 = v44;
  objc_msgSend(v27, sel_setDebugIdentifier_, v32);

  objc_msgSend(v27, sel_setQualityOfService_, v33);
  sub_19A309FCC((uint64_t)&aBlock);
  return v27;
}

uint64_t sub_19A326430()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_19A326464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_19A3260A4(a1, v4 + 24, *(_QWORD *)(v4 + 16), a4);
}

uint64_t sub_19A326470(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

void sub_19A3264B0()
{
  JUMPOUT(0x19AEC7FB0);
}

void sub_19A3264C0()
{
  JUMPOUT(0x19AEC7FB0);
}

uint64_t sub_19A3264D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v19;
  id v20;
  _QWORD v21[4];

  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, a8, a3, (uint64_t)a4);
  sub_19A305E34();
  v12 = sub_19A353550();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v21 - v14;
  if (a2 && a4)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    if (a3)
      v16 = a3;
    v21[0] = a2;
    v21[1] = v16;
    v21[2] = a4;
    sub_19A35358C();
    swift_bridgeObjectRetain();
    v17 = a4;
    swift_bridgeObjectRetain();
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    v19 = a5;
    if (!a5)
    {
      type metadata accessor for HKError(0);
      v21[3] = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v19 = (void *)v21[0];
    }
    v21[0] = v19;
    v20 = a5;
    sub_19A35358C();
    return sub_19A353580();
  }
}

uint64_t sub_19A326678(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v9;
  void (*v11)(id, uint64_t, uint64_t, void *, void *);
  id v12;
  id v13;
  id v14;

  v9 = a3;
  v11 = *(void (**)(id, uint64_t, uint64_t, void *, void *))(a1 + 32);
  if (a3)
  {
    sub_19A308AE4(0, &qword_1EE3971F8);
    v9 = sub_19A3534CC();
  }
  if (a4)
  {
    sub_19A308AE4(0, &qword_1EE3982E0);
    a4 = sub_19A3534CC();
  }
  swift_retain();
  v12 = a2;
  v13 = a5;
  v14 = a6;
  v11(v12, v9, a4, a5, a6);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_19A32677C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_19A32678C()
{
  return 8;
}

_QWORD *sub_19A326798(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_19A3267A4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19A3267AC(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_19A3267DC(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19A32683C(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_19A3268E8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_19A32694C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19A326994(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void sub_19A3269E4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *sub_19A326A14(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *sub_19A326A5C(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  return a1;
}

uint64_t sub_19A326ACC(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t sub_19A326B18(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19A326B60(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_19A326BA0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_19A326BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326CC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326D70(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19A326DEC(a1, a2, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0], a4);
}

uint64_t sub_19A326BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326E60(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326EE4(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326F68(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326FEC(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_19A326BFC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A326C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, a4);
  v9 = type metadata accessor for HKQueryAsyncStream(0, v6, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, a2, v9);
}

uint64_t sub_19A326C54()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A326C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a4 + 16), a3, a4);
  v9 = type metadata accessor for HKQueryAsyncStream(0, v6, v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, a2, a2, v9);
}

uint64_t type metadata accessor for HKAnchoredObjectQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKAnchoredObjectQueryDescriptor.Results);
}

uint64_t sub_19A326CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326CC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;

  v5 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a1 + 16), a3, (uint64_t)a4);
  v6 = sub_19A305E34();
  result = a4(319, v5, v6, MEMORY[0x1E0DEDB38]);
  if (v8 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_19A326D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326D70(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  v8 = sub_19A305E34();
  v9 = a4(0, v7, v8, MEMORY[0x1E0DEDB38]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1, a2, v9);
}

uint64_t sub_19A326DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_19A326DEC(a1, a2, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0], a4);
}

uint64_t sub_19A326DEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a2 + 16), (uint64_t)a3, a4);
  v7 = sub_19A305E34();
  v8 = a3(0, v6, v7, MEMORY[0x1E0DEDB38]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

uint64_t sub_19A326E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326E60(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  v8 = sub_19A305E34();
  v9 = a4(0, v7, v8, MEMORY[0x1E0DEDB38]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
  return a1;
}

uint64_t sub_19A326ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326EE4(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  v8 = sub_19A305E34();
  v9 = a4(0, v7, v8, MEMORY[0x1E0DEDB38]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(a1, a2, v9);
  return a1;
}

uint64_t sub_19A326F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326F68(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  v8 = sub_19A305E34();
  v9 = a4(0, v7, v8, MEMORY[0x1E0DEDB38]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
  return a1;
}

uint64_t sub_19A326FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A326FEC(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A326FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, (uint64_t)a4);
  v8 = sub_19A305E34();
  v9 = a4(0, v7, v8, MEMORY[0x1E0DEDB38]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(a1, a2, v9);
  return a1;
}

uint64_t sub_19A327064()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A327070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a3 + 16), a3, a4);
  sub_19A305E34();
  v6 = sub_19A3535B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t sub_19A3270DC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A3270E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(a4 + 16), a3, a4);
  sub_19A305E34();
  v6 = sub_19A3535B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, a2, a2, v6);
}

uint64_t type metadata accessor for HKAnchoredObjectQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKAnchoredObjectQueryDescriptor.Results.Iterator);
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t objectdestroy_14Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, *(_QWORD *)(v4 + 16), a3, a4);
  sub_19A305E34();
  v5 = sub_19A35358C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4 + v7, v5);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19A327238(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v11 = *(_QWORD *)(v5 + 16);
  type metadata accessor for HKAnchoredObjectQueryDescriptor.Result(255, v11, a3, (uint64_t)a4);
  sub_19A305E34();
  v12 = *(_QWORD *)(sub_19A35358C() - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  return sub_19A3264D0(a1, a2, a3, a4, a5, v5 + v13, v5 + ((*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8), v11);
}

uint64_t sub_19A3272F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19A32732C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;

  return sub_19A325A50(a1, a2, a3, a4, a5, *(id *)(v5 + 24), *(_QWORD *)(v5 + 32), (int)v5 + 40, *(_QWORD *)(v5 + 16));
}

uint64_t HKAttachment.AsyncBytes.makeAsyncIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = v1;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = (uint64_t)objc_msgSend(Strong, sel_size);

  sub_19A3279E0(v2, (uint64_t)v10, MEMORY[0x1E0DEEEF0]);
  v6 = swift_allocObject();
  sub_19A3279E0((uint64_t)v10, v6 + 16, MEMORY[0x1E0DEEF18]);
  type metadata accessor for _AsyncBytesBuffer.Storage();
  result = swift_allocObject();
  *(_BYTE *)(result + 48) = 0;
  if (v5 < 1)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    *(_QWORD *)(result + 16) = &unk_1EE3982F0;
    *(_QWORD *)(result + 24) = v6;
    swift_retain();
    v9 = swift_slowAlloc();
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v9 + v5;
    result = swift_release();
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v9;
    a1[3] = 0;
  }
  return result;
}

uint64_t sub_19A327464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  return swift_task_switch();
}

uint64_t sub_19A3274CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[19];
  v1 = v0[20];
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v0[21] = Strong;
  v4 = swift_unknownObjectUnownedLoadStrong();
  v0[22] = v4;
  v5 = *(_QWORD *)(v1 + 16);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A3275D4;
  v6 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = sub_19A327AA8;
  v7[3] = &block_descriptor_11;
  v7[4] = v6;
  objc_msgSend(Strong, sel_getDataChunkForAttachment_chunkSize_offset_completion_, v4, v5, v2, v7);
  return swift_continuation_await();
}

uint64_t sub_19A3275D4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void sub_19A327678()
{
  __asm { BR              X11 }
}

uint64_t sub_19A3276DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)(v3 + 192) = v1;
  *(_WORD *)(v3 + 200) = v2;
  *(_BYTE *)(v3 + 202) = BYTE2(v2);
  *(_BYTE *)(v3 + 203) = BYTE3(v2);
  *(_BYTE *)(v3 + 204) = BYTE4(v2);
  *(_BYTE *)(v3 + 205) = BYTE5(v2);
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = a1 + BYTE6(v2);
  sub_19A327EE8();
  sub_19A352C50();
  sub_19A311AA4(v1, v2);
  v4 = *(void **)(v3 + 176);

  return (*(uint64_t (**)(_QWORD))(v3 + 8))(BYTE6(v2));
}

uint64_t sub_19A327968()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 168);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A3279E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  a3(a2, a1);
  a3(a2 + 8, a1 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return a2;
}

uint64_t sub_19A327A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_19A327F2C;
  v8[19] = a3;
  v8[20] = v3 + 16;
  v8[17] = a1;
  v8[18] = a2;
  return swift_task_switch();
}

uint64_t sub_19A327AA8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_19A305E34();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = a2;
    v9 = sub_19A352F20();
    v11 = v10;

    v12 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v12 = v9;
    v12[1] = v11;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_19A327B44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *Strong;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v4 = objc_msgSend(Strong, sel_size);

  sub_19A3279E0(v1, (uint64_t)v14, MEMORY[0x1E0DEEEF0]);
  v5 = swift_allocObject();
  sub_19A3279E0((uint64_t)v14, v5 + 16, MEMORY[0x1E0DEEF18]);
  v6 = sub_19A333D6C((uint64_t)v4, (uint64_t)&unk_1EE398300, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_release();
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  a1[3] = v12;
  return sub_19A327EBC(v1);
}

unint64_t sub_19A327C20()
{
  unint64_t result;

  result = qword_1EE3982F8;
  if (!qword_1EE3982F8)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for BufferedAsyncByteIterator, &type metadata for BufferedAsyncByteIterator);
    atomic_store(result, (unint64_t *)&qword_1EE3982F8);
  }
  return result;
}

uint64_t _s10AsyncBytesVwxx()
{
  swift_unknownObjectUnownedDestroy();
  return swift_unknownObjectUnownedDestroy();
}

uint64_t _s10AsyncBytesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A327CE8(a1, a2, a3, MEMORY[0x1E0DEEEF0]);
}

uint64_t _s10AsyncBytesVwca(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectUnownedCopyAssign();
  swift_unknownObjectUnownedCopyAssign();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t _s10AsyncBytesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A327CE8(a1, a2, a3, MEMORY[0x1E0DEEF18]);
}

uint64_t _s10AsyncBytesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A327CE8(a1, a2, a3, MEMORY[0x1E0DEEF10]);
}

uint64_t sub_19A327CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;

  v7 = a4();
  ((void (*)(uint64_t, uint64_t))a4)(v7 + 8, a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t _s10AsyncBytesVwet(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t _s10AsyncBytesVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKAttachment.AsyncBytes()
{
  return &type metadata for HKAttachment.AsyncBytes;
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

uint64_t sub_19A327DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_19A327E6C;
  v8[19] = a3;
  v8[20] = v3 + 16;
  v8[17] = a1;
  v8[18] = a2;
  return swift_task_switch();
}

uint64_t sub_19A327E6C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_19A327EBC(uint64_t a1)
{
  swift_unknownObjectUnownedDestroy();
  swift_unknownObjectUnownedDestroy();
  return a1;
}

unint64_t sub_19A327EE8()
{
  unint64_t result;

  result = qword_1EE398308;
  if (!qword_1EE398308)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CB1AA0], MEMORY[0x1E0DEAC20]);
    atomic_store(result, (unint64_t *)&qword_1EE398308);
  }
  return result;
}

HealthKit::DayIndex __swiftcall DayIndex.init(value:)(HealthKit::DayIndex value)
{
  HealthKit::DayIndex *v1;

  v1->value = value.value;
  return value;
}

uint64_t Range<>.dayIndexRange.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (a2 < result)
  {
    __break(1u);
  }
  else
  {
    *a3 = result;
    a3[1] = a2;
  }
  return result;
}

uint64_t DayIndex.init(date:calendar:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t (*v20)(char *, uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, _QWORD, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD v42[3];

  v40 = a3;
  v41 = a1;
  v4 = sub_19A352D40();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_19A353028();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v37 - v12;
  v14 = sub_19A3530B8();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, a2, v14);
  sub_19A353040();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0CB0EF8], v7);
  v18 = sub_19A35301C();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v19(v13, v7);
  v20 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  result = v20(v17, v14);
  if ((v18 & 1) != 0)
  {
    sub_19A30FA98(0, &qword_1EE397F70, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v22 = sub_19A3530AC();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(_QWORD *)(v23 + 72);
    v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_19A44FF10;
    v27 = v26 + v25;
    v28 = *(void (**)(unint64_t, _QWORD, uint64_t))(v23 + 104);
    v28(v27, *MEMORY[0x1E0CB1158], v22);
    v28(v27 + v24, *MEMORY[0x1E0CB1160], v22);
    v28(v27 + 2 * v24, *MEMORY[0x1E0CB1130], v22);
    sub_19A322E10(v26);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v29 = v41;
    sub_19A353064();
    swift_bridgeObjectRelease();
    result = sub_19A352D10();
    if ((v30 & 1) == 0)
    {
      v31 = result;
      result = sub_19A352D1C();
      if ((v32 & 1) == 0)
      {
        v33 = result;
        result = sub_19A352CF8();
        if ((v34 & 1) == 0)
        {
          v42[0] = v31;
          v42[1] = v33;
          v42[2] = result;
          v35 = HKDayIndexFromCalendarComponents(v42);
          v20(a2, v14);
          v36 = sub_19A352FD4();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v29, v36);
          result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v6, v39);
          *v40 = v35;
          return result;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

HealthKit::DayIndex __swiftcall DayIndex.advanced(by:)(HealthKit::DayIndex by)
{
  _QWORD *v1;
  _QWORD *v2;

  if (__OFADD__(*v2, by.value))
    __break(1u);
  else
    *v1 = *v2 + by.value;
  return by;
}

uint64_t DayIndex.startDate(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v33 = a2;
  v4 = sub_19A3530B8();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v28 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v27 - v10;
  sub_19A30FA98(0, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], v8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - v13;
  sub_19A30FA98(0, (unint64_t *)&qword_1EE397F58, v5, v8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v27 - v16;
  v18 = sub_19A352D40();
  v31 = *(_QWORD *)(v18 - 8);
  v32 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  HKCalendarComponentsFromDayIndex(*v2, &v34);
  v30 = v35;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v27(v17, a1, v4);
  v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56);
  v29 = v4;
  v21(v17, 0, 1, v4);
  v22 = sub_19A353100();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v14, 1, 1, v22);
  sub_19A352D28();
  sub_19A353094();
  v23(v14, 0, 1, v22);
  sub_19A352D34();
  sub_19A352D04();
  v24 = sub_19A352FD4();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v11, 1, v24) == 1)
  {
    sub_19A3294E8((uint64_t)v11);
    v27(v28, a1, v29);
    v34 = 0;
    v35 = 0xE000000000000000;
    sub_19A353898();
    swift_bridgeObjectRelease();
    v34 = 0xD000000000000012;
    v35 = 0x800000019A3AD480;
    sub_19A306A54(&qword_1EE398310, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
    sub_19A353A90();
    sub_19A353454();
    swift_bridgeObjectRelease();
    sub_19A353454();
    sub_19A306A54(&qword_1EE398318, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CB1220]);
    sub_19A353A90();
    sub_19A353454();
    swift_bridgeObjectRelease();
    result = sub_19A353988();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v32);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33, v11, v24);
  }
  return result;
}

uint64_t DayIndex.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DayIndex.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*DayIndex.value.modify())()
{
  return nullsub_1;
}

uint64_t DayIndex.daysSinceToday(gregorianCalendar:__today:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_19A3530B8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_19A352FD4();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  (*(void (**)(char *, uint64_t))(v13 + 16))(v11, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  DayIndex.init(date:calendar:)((uint64_t)v11, v8, &v16);
  result = v12 - v16;
  if (__OFSUB__(v12, v16))
    __break(1u);
  return result;
}

_QWORD *static DayIndex.- infix(_:_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFSUB__(*result, *a2))
    __break(1u);
  else
    *a3 = *result - *a2;
  return result;
}

uint64_t DayIndex.init(daysSinceToday:gregorianCalendar:__today:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_19A3530B8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_19A352FD4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  DayIndex.init(date:calendar:)((uint64_t)v15, v11, &v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  if (__OFADD__(v18, a1))
    __break(1u);
  else
    *a4 = v18 + a1;
  return result;
}

HealthKit::DayIndex __swiftcall DayIndex.init(integerLiteral:)(HealthKit::DayIndex integerLiteral)
{
  HealthKit::DayIndex *v1;

  v1->value = integerLiteral.value;
  return integerLiteral;
}

uint64_t DayIndex.hash(into:)()
{
  return sub_19A353B44();
}

uint64_t sub_19A328960()
{
  return 1;
}

uint64_t sub_19A328968()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A3289A8()
{
  return sub_19A353B44();
}

uint64_t sub_19A3289CC()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A328A08()
{
  return 0x65756C6176;
}

uint64_t sub_19A328A1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_19A353AC0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_19A328AA8()
{
  return 0;
}

void sub_19A328AB4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_19A328AC0()
{
  sub_19A32953C();
  return sub_19A353C94();
}

uint64_t sub_19A328AE8()
{
  sub_19A32953C();
  return sub_19A353CA0();
}

uint64_t DayIndex.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_19A329580(0, &qword_1EE398320, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A32953C();
  sub_19A353B98();
  sub_19A353A6C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t DayIndex.hashValue.getter()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t DayIndex.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  sub_19A329580(0, &qword_1EE398330, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A32953C();
  sub_19A353B80();
  if (!v2)
  {
    v10 = sub_19A353A24();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

_QWORD *sub_19A328D64@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_19A328D70(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 == *result);
  __break(1u);
  return result;
}

uint64_t sub_19A328D8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DayIndex.init(from:)(a1, a2);
}

uint64_t sub_19A328DA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_19A329580(0, &qword_1EE398320, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A32953C();
  sub_19A353B98();
  sub_19A353A6C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

BOOL static DayIndex.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_19A328EA4(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_19A328EB8(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_19A328ECC(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_19A328EE0(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

Swift::Int __swiftcall DayIndex.distance(to:)(HealthKit::DayIndex to)
{
  _QWORD *v1;
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(*(_QWORD *)to.value, *v1);
  result = *(_QWORD *)to.value - *v1;
  if (v2)
    __break(1u);
  return result;
}

_QWORD *sub_19A328F0C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *sub_19A328F28@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
    __break(1u);
  else
    *a2 = *v2 + *result;
  return result;
}

_QWORD *sub_19A328F44(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t DayIndex.description.getter()
{
  return sub_19A353A90();
}

uint64_t sub_19A328FA8()
{
  return sub_19A353A90();
}

_QWORD *static DayIndex.- infix(_:_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFSUB__(*result, a2))
    __break(1u);
  else
    *a3 = *result - a2;
  return result;
}

_QWORD *static DayIndex.+ infix(_:_:)@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, *a2))
    __break(1u);
  else
    *a3 = *result + *a2;
  return result;
}

_QWORD *static DayIndex.+ infix(_:_:)@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

uint64_t DayIndex.gregorianDateComponents(calendar:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_19A30FA98(0, &qword_1EE397F50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - v5;
  sub_19A30FA98(0, (unint64_t *)&qword_1EE397F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v3);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - v8;
  HKCalendarComponentsFromDayIndex(*v1, &v15);
  v10 = sub_19A3530B8();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v12 = sub_19A353100();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  return sub_19A352D28();
}

void DayIndex.sleepDayInterval(in:)()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *v0;
  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_19A353070();
  v4 = objc_msgSend(v2, sel_hk_sleepDayIntervalForMorningIndex_calendar_, v1, v3);

  sub_19A352C74();
}

uint64_t Range<>.indexSet.getter()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  if (v0[1] >= *v0)
    return sub_19A3530C4();
  __break(1u);
  return result;
}

uint64_t Range<>.dateInterval(inGregorianCalendar:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_19A352FD4();
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = v1[1];
  v11 = *v1;
  DayIndex.startDate(in:)(a1, (uint64_t)&v10 - v8);
  v11 = v7;
  DayIndex.startDate(in:)(a1, (uint64_t)v6);
  return sub_19A352C8C();
}

uint64_t ClosedRange<>.dateInterval(inGregorianCalendar:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = sub_19A352FD4();
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = v1[1];
  v11 = *v1;
  result = DayIndex.startDate(in:)(a1, (uint64_t)&v10 - v8);
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    v11 = v7 + 1;
    DayIndex.startDate(in:)(a1, (uint64_t)v6);
    return sub_19A352C8C();
  }
  return result;
}

void ClosedRange<>.sleepDayInterval(inGregorianCalendar:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *v0;
  v1 = v0[1];
  v3 = objc_opt_self();
  v4 = v1 - v2;
  if (__OFSUB__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    v5 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      v6 = (void *)v3;
      v7 = (void *)sub_19A353070();
      v8 = objc_msgSend(v6, sel_hk_sleepDayIntervalForMorningIndexRange_calendar_, v2, v5, v7);

      sub_19A352C74();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_19A3294E8(uint64_t a1)
{
  uint64_t v2;

  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_19A32953C()
{
  unint64_t result;

  result = qword_1EE398328;
  if (!qword_1EE398328)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450594, &type metadata for DayIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398328);
  }
  return result;
}

void sub_19A329580(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A32953C();
    v7 = a3(a1, &type metadata for DayIndex.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_19A3295DC()
{
  return MEMORY[0x1E0DEB488];
}

unint64_t sub_19A3295EC()
{
  unint64_t result;

  result = qword_1EE398338;
  if (!qword_1EE398338)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for DayIndex, &type metadata for DayIndex);
    atomic_store(result, (unint64_t *)&qword_1EE398338);
  }
  return result;
}

uint64_t sub_19A329634()
{
  return MEMORY[0x1E0DEB430];
}

uint64_t sub_19A329640()
{
  return MEMORY[0x1E0DEB468];
}

ValueMetadata *type metadata accessor for DayIndex()
{
  return &type metadata for DayIndex;
}

uint64_t getEnumTagSinglePayload for DayIndex.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DayIndex.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19A3296F0 + 4 * asc_19A4502F8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19A329710 + 4 * byte_19A4502FD[v4]))();
}

_BYTE *sub_19A3296F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19A329710(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A329718(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A329720(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A329728(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A329730(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DayIndex.CodingKeys()
{
  return &type metadata for DayIndex.CodingKeys;
}

unint64_t sub_19A329750()
{
  unint64_t result;

  result = qword_1EE398340;
  if (!qword_1EE398340)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A45056C, &type metadata for DayIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398340);
  }
  return result;
}

unint64_t sub_19A329798()
{
  unint64_t result;

  result = qword_1EE398348;
  if (!qword_1EE398348)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A4504DC, &type metadata for DayIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398348);
  }
  return result;
}

unint64_t sub_19A3297E0()
{
  unint64_t result;

  result = qword_1EE398350;
  if (!qword_1EE398350)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450504, &type metadata for DayIndex.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398350);
  }
  return result;
}

uint64_t HKHealthStore.requestAuthorization(toShare:read:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return swift_task_switch();
}

uint64_t sub_19A329840()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[17];
  sub_19A308AE4(0, &qword_1EE397840);
  sub_19A329A70(&qword_1EE398360, &qword_1EE397840);
  v2 = sub_19A3535D4();
  v0[18] = v2;
  sub_19A308AE4(0, &qword_1EE398368);
  sub_19A329A70(&qword_1EE398370, &qword_1EE398368);
  v3 = sub_19A3535D4();
  v0[19] = v3;
  v0[2] = v0;
  v0[3] = sub_19A329990;
  v4 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_19A329AB0;
  v5[3] = &block_descriptor_12;
  v5[4] = v4;
  objc_msgSend(v1, sel_requestAuthorizationToShareTypes_readTypes_completion_, v2, v3, v5);
  return swift_continuation_await();
}

uint64_t sub_19A329990()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19A3299F0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A329A28()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A329A70(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_19A308AE4(255, a2);
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_19A329AB0(uint64_t a1, int a2, void *a3)
{
  uint64_t result;
  _QWORD *v5;
  id v6;

  if (a2)
    return swift_continuation_throwingResume();
  if (a3)
  {
    sub_19A305E34();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKWorkoutEffortRelationshipQueryDescriptor.predicate.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void HKWorkoutEffortRelationshipQueryDescriptor.predicate.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKWorkoutEffortRelationshipQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

void *HKWorkoutEffortRelationshipQueryDescriptor.anchor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void HKWorkoutEffortRelationshipQueryDescriptor.anchor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*HKWorkoutEffortRelationshipQueryDescriptor.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.option.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.option.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKWorkoutEffortRelationshipQueryDescriptor.option.modify())()
{
  return nullsub_1;
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 HKWorkoutEffortRelationshipQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*HKWorkoutEffortRelationshipQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.Result.relationships.getter()
{
  return swift_bridgeObjectRetain();
}

id HKWorkoutEffortRelationshipQueryDescriptor.Result.newAnchor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.init(predicate:anchor:option:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  a4[4] = 0;
  a4[5] = -1;
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = 0;
  return result;
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = a2;
  v4 = v2[1];
  *(_OWORD *)(v3 + 160) = *v2;
  *(_OWORD *)(v3 + 176) = v4;
  *(_OWORD *)(v3 + 192) = v2[2];
  return swift_task_switch();
}

uint64_t sub_19A329CB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v16;

  v1 = v0[24];
  v3 = v0[21];
  v2 = v0[22];
  v4 = (void *)v0[19];
  v5 = v0[20];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_19A329E5C;
  v16 = v0 + 2;
  v6 = swift_continuation_init();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = objc_allocWithZone((Class)HKWorkoutEffortRelationshipQuery);
  v0[10] = MEMORY[0x1E0C809B0];
  v0[14] = sub_19A32A014;
  v0[15] = v7;
  v0[11] = 1107296256;
  v0[12] = sub_19A32A828;
  v0[13] = &block_descriptor_13;
  v9 = _Block_copy(v0 + 10);
  v10 = v4;
  v11 = objc_msgSend(v8, sel_initWithPredicate_anchor_options_resultsHandler_, v5, v3, v2, v9);
  _Block_release(v9);
  swift_release();
  if (v1)
  {
    swift_bridgeObjectRetain();
    v12 = (void *)sub_19A353400();
  }
  else
  {
    v12 = 0;
  }
  v13 = v0[25];
  v14 = (void *)v0[19];
  objc_msgSend(v11, sel_setDebugIdentifier_, v12, v16);

  objc_msgSend(v11, sel_setQualityOfService_, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_executeQuery_, v11);

  return swift_continuation_await();
}

uint64_t sub_19A329E5C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
    swift_willThrow();
  else
    *(_OWORD *)*(_QWORD *)(v1 + 144) = *(_OWORD *)(v1 + 128);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_19A329EC0(uint64_t a1, uint64_t a2, void *a3, void *a4, id a5, uint64_t a6)
{
  _QWORD *v10;
  id v11;
  void *v13;
  _QWORD *v14;
  id v15;
  void *v16;

  objc_msgSend(a5, sel_stopQuery_, a1);
  if (a2 && a3)
  {
    v10 = *(_QWORD **)(*(_QWORD *)(a6 + 64) + 40);
    *v10 = a2;
    v10[1] = a3;
    swift_bridgeObjectRetain();
    v11 = a3;
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a4)
    {
      v13 = a4;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v13 = v16;
    }
    sub_19A305E34();
    swift_allocError();
    *v14 = v13;
    v15 = a4;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A329FF0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A32A014(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  return sub_19A329EC0(a1, a2, a3, a4, *(id *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_19A32A01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_19A30D568;
  return HKWorkoutEffortRelationshipQueryDescriptor.result(for:)(a1, a2);
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A32B2F0(0, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30AF20;
  return sub_19A3535A4();
}

uint64_t sub_19A32A0F4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_19A32B2F0(0, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30D568;
  return sub_19A3535A4();
}

uint64_t sub_19A32A16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  sub_19A32B2F0(0, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v5 = v4;
  v5[1] = sub_19A30B060;
  return sub_19A3535A4();
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_19A32B2F0(0, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return sub_19A353598();
}

uint64_t sub_19A32A224()
{
  uint64_t v0;

  sub_19A32B2F0(0, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  return sub_19A32B1D0(v0);
}

uint64_t HKWorkoutEffortRelationshipQueryDescriptor.results(for:)(void *a1)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  id v11;
  _BYTE v13[16];
  id (*v14)(uint64_t);
  _OWORD *v15;
  void *v16;
  _OWORD v17[3];

  sub_19A32B2F0(0, &qword_1EE398398, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v13[-v6];
  v8 = v1[1];
  v17[0] = *v1;
  v17[1] = v8;
  v17[2] = v1[2];
  v9 = (_OWORD *)swift_allocObject();
  v10 = v1[1];
  v9[1] = *v1;
  v9[2] = v10;
  v9[3] = v1[2];
  v14 = sub_19A32A8F0;
  v15 = v9;
  v16 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  v11 = a1;
  sub_19A32A904((uint64_t)v17);
  sub_19A3535C8();

  return swift_release();
}

id sub_19A32A38C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t (*v18)(uint64_t, void *, uint64_t, void *, void *);
  __int128 aBlock;
  uint64_t (*v21)(uint64_t, void *, uint64_t, void *, void *);
  void *v22;
  uint64_t (*v23)(uint64_t, void *, void *, void *);
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  void *v27;

  sub_19A32B2F0(0, &qword_1EE396F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&aBlock - v7;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&aBlock - v7, a1, v5);
  v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v8, v5);
  v14 = objc_allocWithZone((Class)HKWorkoutEffortRelationshipQuery);
  v23 = sub_19A32B27C;
  v24 = v13;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v21 = sub_19A32A828;
  v22 = &block_descriptor_25_0;
  v15 = _Block_copy(&aBlock);
  v16 = objc_msgSend(v14, sel_initWithPredicate_anchor_options_resultsHandler_, v9, v10, v11, v15);
  _Block_release(v15);
  swift_release();
  aBlock = *(_OWORD *)(a2 + 3);
  v21 = (uint64_t (*)(uint64_t, void *, uint64_t, void *, void *))a2[5];
  sub_19A309F34((uint64_t)&aBlock, (uint64_t)v25);
  sub_19A309F34((uint64_t)v25, (uint64_t)&v26);
  v17 = v27;
  if (v27)
  {
    sub_19A309FF4((uint64_t)&aBlock);
    v17 = (void *)sub_19A353400();
  }
  v18 = v21;
  objc_msgSend(v16, sel_setDebugIdentifier_, v17);

  objc_msgSend(v16, sel_setQualityOfService_, v18);
  sub_19A309FCC((uint64_t)&aBlock);
  return v16;
}

uint64_t sub_19A32A580(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;

  sub_19A32B2F0(0, &qword_1EE398528, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v16 - v10;
  if (a2 && a3)
  {
    v17 = a2;
    v18 = a3;
    sub_19A32B2F0(0, &qword_1EE396F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    swift_bridgeObjectRetain();
    v12 = a3;
    sub_19A353574();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v14 = a4;
    if (!a4)
    {
      type metadata accessor for HKError(0);
      v19 = 0;
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v14 = v17;
    }
    v17 = v14;
    v15 = a4;
    sub_19A32B2F0(0, &qword_1EE396F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
    return sub_19A353580();
  }
}

uint64_t sub_19A32A700(void *a1)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  id v11;
  _BYTE v13[16];
  id (*v14)(uint64_t);
  _OWORD *v15;
  void *v16;
  _OWORD v17[3];

  sub_19A32B2F0(0, &qword_1EE398398, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v13[-v6];
  v8 = v1[1];
  v17[0] = *v1;
  v17[1] = v8;
  v17[2] = v1[2];
  v9 = (_OWORD *)swift_allocObject();
  v10 = v1[1];
  v9[1] = *v1;
  v9[2] = v10;
  v9[3] = v1[2];
  v14 = sub_19A32B3A0;
  v15 = v9;
  v16 = a1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  v11 = a1;
  sub_19A32A904((uint64_t)v17);
  sub_19A3535C8();

  return swift_release();
}

uint64_t sub_19A32A828(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, void *, void *);
  id v10;
  id v11;
  id v12;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  if (a3)
  {
    sub_19A32B358();
    v7 = sub_19A3534CC();
  }
  swift_retain();
  v10 = a2;
  v11 = a4;
  v12 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

id sub_19A32A8F0(uint64_t a1)
{
  uint64_t v1;

  return sub_19A32A38C(a1, (uint64_t *)(v1 + 16));
}

void sub_19A32A8F8(uint64_t a1)
{
  uint64_t v1;

  sub_19A307808(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_19A32A904(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  swift_bridgeObjectRetain();
  v4 = v2;
  v5 = v3;
  return a1;
}

uint64_t sub_19A32A940()
{
  return sub_19A306A54(&qword_1EE3983D0, type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator);
}

uint64_t type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE3984F0);
}

uint64_t sub_19A32A980()
{
  return sub_19A306A54(&qword_1EE3983D8, type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKWorkoutEffortRelationshipQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE398460);
}

uint64_t destroy for HKWorkoutEffortRelationshipQueryDescriptor(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HKWorkoutEffortRelationshipQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v3;
  v7 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKWorkoutEffortRelationshipQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for HKWorkoutEffortRelationshipQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor()
{
  return &type metadata for HKWorkoutEffortRelationshipQueryDescriptor;
}

_QWORD *initializeBufferWithCopyOfBuffer for HKWorkoutEffortRelationshipQueryDescriptor.Result(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

void destroy for HKWorkoutEffortRelationshipQueryDescriptor.Result(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *assignWithCopy for HKWorkoutEffortRelationshipQueryDescriptor.Result(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for HKWorkoutEffortRelationshipQueryDescriptor.Result(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Result()
{
  return &type metadata for HKWorkoutEffortRelationshipQueryDescriptor.Result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AE4C(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t destroy for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_19A32AEA4(a1, a2, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithCopy for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AEF4(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithCopy for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AF54(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeWithTake for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AFB4(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t assignWithTake for HKWorkoutEffortRelationshipQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32B014(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t getEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A32AD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D4F8(0, &qword_1EE398400, (uint64_t)&type metadata for HKWorkoutEffortRelationshipQueryDescriptor.Result, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A32ADCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30D4F8(0, &qword_1EE398400, (uint64_t)&type metadata for HKWorkoutEffortRelationshipQueryDescriptor.Result, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A32AE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A32B128(a1, a2, a3, &qword_1EE398390, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
}

uint64_t initializeBufferWithCopyOfBuffer for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AE4C(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32AE4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A32B2F0(0, a4, a5);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1, a2, v7);
}

uint64_t destroy for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  return sub_19A32AEA4(a1, a2, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32AEA4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v5;

  sub_19A32B2F0(0, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t initializeWithCopy for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AEF4(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32AEF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A32B2F0(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  return a1;
}

uint64_t assignWithCopy for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AF54(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32AF54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A32B2F0(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  return a1;
}

uint64_t initializeWithTake for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32AFB4(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32AFB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A32B2F0(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  return a1;
}

uint64_t assignWithTake for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A32B014(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

uint64_t sub_19A32B014(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  uint64_t v7;

  sub_19A32B2F0(0, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A32B06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A32B2F0(0, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A32B0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A32B2F0(0, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A32B114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19A32B128(a1, a2, a3, &qword_1EE398388, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
}

void sub_19A32B128(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v5;

  sub_19A32B2F0(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t objectdestroy_5Tm_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_19A32B1D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKWorkoutEffortRelationshipQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A32B20C()
{
  uint64_t v0;
  uint64_t v1;

  sub_19A32B2F0(0, &qword_1EE396F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_19A32B27C(uint64_t a1, void *a2, void *a3, void *a4)
{
  sub_19A32B2F0(0, &qword_1EE396F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  return sub_19A32A580(a1, a2, a3, a4);
}

void sub_19A32B2F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A305E34();
    v7 = a3(a1, &type metadata for HKWorkoutEffortRelationshipQueryDescriptor.Result, v6, MEMORY[0x1E0DEDB38]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_19A32B358()
{
  unint64_t result;

  result = qword_1EE398530;
  if (!qword_1EE398530)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE398530);
  }
  return result;
}

uint64_t sub_19A32B3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  sub_19A353358();
  sub_19A353364();
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v7, a3);
  sub_19A353634();
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, a3);
}

uint64_t FloatingPoint.bucketed(in:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = v5;
  v34 = a2;
  v36 = a5;
  v32 = sub_19A353AA8();
  v10 = *(_QWORD *)(v32 - 8);
  v11 = MEMORY[0x1E0C80A78](v32);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v29 - v18;
  v35 = a4;
  v33 = v6;
  if ((sub_19A353394() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v36, a1, a3);
  v20 = v13;
  v29 = v19;
  v30 = v17;
  v31 = v14;
  v21 = v32;
  sub_19A3533E8();
  if ((sub_19A3533B8() & 1) == 0)
    return sub_19A3539A0();
  v22 = v29;
  sub_19A3539AC();
  v23 = (uint64_t)v20;
  v24 = v20;
  v25 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v24, *MEMORY[0x1E0DED500], v21);
  v26 = v30;
  sub_19A32B3A8(v23, v34, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v23, v25);
  sub_19A3539A0();
  v27 = *(void (**)(char *, uint64_t))(v31 + 8);
  v27(v26, a3);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, a3);
}

id HKElectrocardiogramQuery.init(_:dataHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v11[6];

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v11[4] = sub_19A32B8D0;
  v11[5] = v7;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_19A32B8D8;
  v11[3] = &block_descriptor_14;
  v8 = _Block_copy(v11);
  swift_retain();
  swift_release();
  v9 = objc_msgSend(v6, sel_initWithElectrocardiogram_dataHandler_, a1, v8);

  swift_release();
  _Block_release(v8);
  return v9;
}

void sub_19A32B7F8(uint64_t a1, void *a2, char a3, id a4, void (*a5)(uint64_t, id *))
{
  id v8;
  id v10;
  id v11;
  char v12;

  if (a2)
  {
    v11 = a2;
    v12 = 0;
    v8 = a2;
    a5(a1, &v11);

    if ((a3 & 1) != 0)
    {
      v11 = 0;
      v12 = 2;
      a5(a1, &v11);
    }
  }
  else if (a4)
  {
    v11 = a4;
    v12 = 1;
    v10 = a4;
    a5(a1, &v11);

  }
}

uint64_t sub_19A32B8AC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_19A32B8D0(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4;

  sub_19A32B7F8(a1, a2, a3, a4, *(void (**)(uint64_t, id *))(v4 + 16));
}

void sub_19A32B8D8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  void (*v9)(id, void *, uint64_t, void *);
  id v10;
  id v11;
  id v12;

  v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v12 = a2;
  v10 = a3;
  v11 = a5;
  v9(v12, a3, a4, a5);
  swift_release();

}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t _s6ResultOwCP(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19A32B9CC(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_19A32B9CC(id result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return result;
  return result;
}

void _s6ResultOwxx(uint64_t a1)
{
  sub_19A32B9F8(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_19A32B9F8(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u)

}

uint64_t _s6ResultOwca(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_19A32B9CC(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_19A32B9F8(v5, v6);
  return a1;
}

uint64_t _s6ResultOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_19A32B9F8(v4, v5);
  return a1;
}

uint64_t _s6ResultOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s6ResultOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_19A32BB2C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_19A32BB44(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HKElectrocardiogramQuery.Result()
{
  return &type metadata for HKElectrocardiogramQuery.Result;
}

uint64_t HKSamplePredicate.init(_sampleType:predicate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

id HKSamplePredicate.sampleType.getter()
{
  id *v0;

  return *v0;
}

void *HKSamplePredicate.nsPredicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

id static HKSamplePredicate.audiogram(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BBE4(a1, (SEL *)&selRef_audiogramSampleType, a2);
}

id static HKSamplePredicate.correlation(type:predicate:)@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v3;

  *a3 = a1;
  a3[1] = a2;
  v3 = a2;
  return a1;
}

id static HKSamplePredicate.electrocardiogram(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BBE4(a1, (SEL *)&selRef_electrocardiogramType, a2);
}

id sub_19A32BBE4@<X0>(void *a1@<X0>, SEL *a2@<X2>, _QWORD *a3@<X8>)
{
  sub_19A308AE4(0, &qword_1EE397840);
  *a3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), *a2);
  a3[1] = a1;
  return a1;
}

id static HKSamplePredicate.heartbeatSeries(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BC6C(a1, (SEL *)&selRef_heartbeatSeriesType, a2);
}

id static HKSamplePredicate.workout(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BBE4(a1, (SEL *)&selRef_workoutType, a2);
}

id static HKSamplePredicate.workoutRoute(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BC6C(a1, (SEL *)&selRef_workoutRouteType, a2);
}

id sub_19A32BC6C@<X0>(void *a1@<X0>, SEL *a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = objc_msgSend((id)objc_opt_self(), *a2);
  a3[1] = a1;
  return a1;
}

uint64_t static HKSamplePredicate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a2 + 8);
  sub_19A308AE4(0, (unint64_t *)&qword_1EE398630);
  if ((sub_19A35373C() & 1) != 0)
  {
    if (v2)
    {
      if (v3)
      {
        sub_19A308AE4(0, qword_1EE398538);
        v4 = v3;
        v5 = v2;
        v6 = sub_19A35373C();

        if ((v6 & 1) != 0)
          return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

void HKSamplePredicate.hash(into:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + 8);
  v2 = *(id *)v0;
  sub_19A353748();

  sub_19A353B50();
  if (v1)
  {
    v3 = v1;
    sub_19A353748();

  }
}

uint64_t HKSamplePredicate.hashValue.getter()
{
  sub_19A353B38();
  HKSamplePredicate.hash(into:)();
  return sub_19A353B68();
}

uint64_t sub_19A32BE58()
{
  sub_19A353B38();
  HKSamplePredicate.hash(into:)();
  return sub_19A353B68();
}

id static HKSamplePredicate.visionPrescription(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_19A32BBE4(a1, (SEL *)&selRef_visionPrescriptionType, a2);
}

id static HKSamplePredicate.pauseRingsSchedule(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  sub_19A308AE4(0, &qword_1EE397840);
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pauseRingsScheduleType);
  if (result)
  {
    *a2 = result;
    a2[1] = a1;
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19A32BF08()
{
  JUMPOUT(0x19AEC7FB0);
}

_QWORD *sub_19A32BF18(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void sub_19A32BF48(id *a1)
{

}

uint64_t sub_19A32BF70(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t sub_19A32BFC4(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t type metadata accessor for HKSamplePredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKSamplePredicate);
}

id sub_19A32C020()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t ObjectType;
  void *v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider;
  v2 = *(void **)&v0[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider];
  }
  else
  {
    ObjectType = swift_getObjectType();
    v5 = (void *)sub_19A32C08C(v0, ObjectType);
    v6 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_19A32C08C(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t result;
  _QWORD v16[2];

  v4 = sub_19A353010();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)&a1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore];
  if (v8)
  {
    v9 = v8;
    v16[1] = a2;
    swift_getMetatypeMetadata();
    sub_19A35343C();
    sub_19A353004();
    v10 = objc_allocWithZone((Class)HKTaskServerProxyProvider);
    v11 = a1;
    v12 = (void *)sub_19A353400();
    swift_bridgeObjectRelease();
    v13 = (void *)sub_19A352FE0();
    v14 = objc_msgSend(v10, sel_initWithHealthStore_taskIdentifier_exportedObject_taskUUID_, v9, v12, v11, v13);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (uint64_t)v14;
  }
  else
  {
    result = sub_19A353988();
    __break(1u);
  }
  return result;
}

id DatabaseAccessibilityAssertionStore.__allocating_init(healthStore:)(void *a1)
{
  objc_class *v1;
  char *v3;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore] = a1;
  v8.receiver = v3;
  v8.super_class = v1;
  v4 = a1;
  v5 = objc_msgSendSuper2(&v8, sel_init);

  v6 = sub_19A32C020();
  objc_msgSend(v6, sel_setShouldRetryOnInterruption_, 1, v8.receiver, v8.super_class);

  return v5;
}

id DatabaseAccessibilityAssertionStore.init(healthStore:)(void *a1)
{
  char *v1;
  id v3;
  id v4;
  id v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore] = a1;
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for DatabaseAccessibilityAssertionStore();
  v3 = a1;
  v4 = objc_msgSendSuper2(&v7, sel_init);

  v5 = sub_19A32C020();
  objc_msgSend(v5, sel_setShouldRetryOnInterruption_, 1, v7.receiver, v7.super_class);

  return v4;
}

uint64_t type metadata accessor for DatabaseAccessibilityAssertionStore()
{
  return objc_opt_self();
}

void sub_19A32C3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;

  v9 = sub_19A32C020();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = v4;
  v25 = sub_19A32C70C;
  v26 = v10;
  v11 = MEMORY[0x1E0C809B0];
  v21 = MEMORY[0x1E0C809B0];
  v22 = 1107296256;
  v23 = sub_19A32C718;
  v24 = &block_descriptor_15;
  v12 = _Block_copy(&v21);
  swift_retain();
  v13 = v4;
  swift_release();
  v14 = objc_msgSend(v9, sel_clientQueueObjectHandlerWithCompletion_, v12);
  _Block_release(v12);

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v16 = sub_19A32C020();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = sub_19A32C8E8;
  v17[5] = v15;
  v25 = sub_19A32CA8C;
  v26 = v17;
  v21 = v11;
  v22 = 1107296256;
  v23 = sub_19A32CB18;
  v24 = &block_descriptor_9;
  v18 = _Block_copy(&v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_19A32C8E8;
  *(_QWORD *)(v19 + 24) = v15;
  v25 = sub_19A32CBE8;
  v26 = (_QWORD *)v19;
  v21 = v11;
  v22 = 1107296256;
  v23 = sub_19A32CC28;
  v24 = &block_descriptor_15;
  v20 = _Block_copy(&v21);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_fetchProxyWithHandler_errorHandler_, v18, v20);
  _Block_release(v20);
  _Block_release(v18);
  swift_release();

}

void sub_19A32C5CC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_19A319FD8(a1, (uint64_t)v13);
  if (!v14)
  {
    sub_19A32D494((uint64_t)v13);
    goto LABEL_6;
  }
  sub_19A308AE4(0, &qword_1EE399120);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    a3(0, a2);
    return;
  }
  v8 = *(void **)(a5 + OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v12, sel_configureAssertion_, v9);
    v10 = v12;
    a3(v12, a2);

  }
  else
  {
    v11 = v12;
    a3(v12, a2);

  }
}

uint64_t sub_19A32C6E0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_19A32C70C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_19A32C5CC(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_19A32C718(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(__int128 *, void *);
  id v6;
  __int128 v8;
  __int128 v9;

  v5 = *(void (**)(__int128 *, void *))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v9 + 1) = swift_getObjectType();
    *(_QWORD *)&v8 = a2;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(&v8, a3);
  swift_release();

  return sub_19A32D494((uint64_t)&v8);
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

void sub_19A32C7BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;

  sub_19A319FD8(a1, (uint64_t)v11);
  v5 = v12;
  if (!v12)
  {
    v10 = 0;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = __swift_project_boxed_opaque_existential_1(v11, v12);
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = sub_19A353AB4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (a2)
LABEL_3:
    a2 = (void *)sub_19A352ECC();
LABEL_4:
  (*(void (**)(uint64_t, uint64_t, void *))(a3 + 16))(a3, v10, a2);
  swift_unknownObjectRelease();

}

uint64_t sub_19A32C8C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_19A32C8E8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_19A32C7BC(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_19A32C8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[7];

  sub_19A32D404(a1, (uint64_t)aBlock);
  sub_19A32D440();
  if (swift_dynamicCast())
  {
    v7 = (void *)aBlock[6];
    v8 = (void *)sub_19A353400();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a4;
    *(_QWORD *)(v9 + 24) = a5;
    aBlock[4] = sub_19A32D4D0;
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_19A30E150;
    aBlock[3] = &block_descriptor_34;
    v10 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_remote_requestDatabaseAccessibilityAssertionForOwnerIdentifier_completion_, v8, v10);
    _Block_release(v10);
    swift_unknownObjectRelease();

  }
  else
  {
    sub_19A353988();
    __break(1u);
  }
}

uint64_t sub_19A32CA60()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_19A32CA8C(uint64_t a1)
{
  uint64_t *v1;

  sub_19A32C8F0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_19A32CA98(void *a1, uint64_t a2, void (*a3)(__int128 *, uint64_t))
{
  id v6;
  __int128 v8;
  __int128 v9;

  if (a1)
  {
    *((_QWORD *)&v9 + 1) = sub_19A308AE4(0, &qword_1EE399120);
    *(_QWORD *)&v8 = a1;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  v6 = a1;
  a3(&v8, a2);
  return sub_19A32D494((uint64_t)&v8);
}

uint64_t sub_19A32CB18(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *);
  _QWORD v5[4];

  v3 = *(void (**)(_QWORD *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_19A32CB80(uint64_t a1, void (*a2)(_OWORD *, uint64_t))
{
  _OWORD v3[2];

  memset(v3, 0, sizeof(v3));
  a2(v3, a1);
  return sub_19A32D494((uint64_t)v3);
}

uint64_t sub_19A32CBC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19A32CBE8(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_OWORD *, uint64_t);
  _OWORD v4[2];

  v2 = *(void (**)(_OWORD *, uint64_t))(v1 + 16);
  memset(v4, 0, sizeof(v4));
  v2(v4, a1);
  return sub_19A32D494((uint64_t)v4);
}

void sub_19A32CC28(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void sub_19A32CD10(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v2 = sub_19A32C020();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v12 = sub_19A32CF08;
  v13 = v3;
  v4 = MEMORY[0x1E0C809B0];
  v8 = MEMORY[0x1E0C809B0];
  v9 = 1107296256;
  v10 = sub_19A32CB18;
  v11 = &block_descriptor_21_0;
  v5 = _Block_copy(&v8);
  v6 = a1;
  swift_release();
  v12 = sub_19A32CF10;
  v13 = 0;
  v8 = v4;
  v9 = 1107296256;
  v10 = sub_19A32CC28;
  v11 = &block_descriptor_24;
  v7 = _Block_copy(&v8);
  objc_msgSend(v2, sel_fetchProxyWithHandler_errorHandler_, v5, v7);
  _Block_release(v7);
  _Block_release(v5);

}

uint64_t sub_19A32CE20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  id v4;
  _BYTE v5[32];

  sub_19A32D404(a1, (uint64_t)v5);
  sub_19A32D440();
  if (swift_dynamicCast())
  {
    objc_msgSend(v4, sel_remote_invalidateDatabaseAccessibilityAssertion_, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    result = sub_19A353988();
    __break(1u);
  }
  return result;
}

uint64_t sub_19A32CEE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A32CF08(uint64_t a1)
{
  uint64_t v1;

  return sub_19A32CE20(a1, *(_QWORD *)(v1 + 16));
}

void sub_19A32CF10(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  NSObject *oslog;
  uint64_t v10;

  if (qword_1EE396A98 != -1)
    swift_once();
  v2 = sub_19A353130();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE3A2FF0);
  v3 = a1;
  v4 = a1;
  oslog = sub_19A353118();
  v5 = sub_19A3536A0();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138543362;
    v8 = a1;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    sub_19A353778();
    *v7 = v10;

    _os_log_impl(&dword_19A0E6000, oslog, v5, "Unable to invalidate DatabaseAccessibility Assertion due to  %{public}@", v6, 0xCu);
    sub_19A32D3A0();
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v7, -1, -1);
    MEMORY[0x19AEC804C](v6, -1, -1);
  }
  else
  {

  }
}

uint64_t sub_19A32D120()
{
  swift_getMetatypeMetadata();
  return sub_19A35343C();
}

id sub_19A32D150()
{
  return sub_19A32D168(&protocolRef_HKDatabaseAccessibilityAssertionClientInterface);
}

id sub_19A32D15C()
{
  return sub_19A32D168(&protocolRef_HKDatabaseAccessibilityAssertionServerInterface);
}

id sub_19A32D168(_QWORD *a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, *a1);
}

id sub_19A32D1BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, *a3);
}

id DatabaseAccessibilityAssertionStore.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DatabaseAccessibilityAssertionStore.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DatabaseAccessibilityAssertionStore.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DatabaseAccessibilityAssertionStore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for DatabaseAccessibilityAssertionStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.fetchDatabaseAccessibilityAssertionFor(ownerIdentifier:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.invalidateDatabaseAccessibilityAssertion(assertion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of static DatabaseAccessibilityAssertionStore.taskIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of static DatabaseAccessibilityAssertionStore.clientInterface()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of static DatabaseAccessibilityAssertionStore.serverInterface()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.exportedInterface()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.remoteInterface()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStore.connectionInvalidated()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

void sub_19A32D398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_19A337398(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_19A32D3A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397EF0)
  {
    sub_19A308AE4(255, (unint64_t *)&qword_1EE398630);
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397EF0);
  }
}

uint64_t sub_19A32D404(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_19A32D440()
{
  unint64_t result;

  result = qword_1EE398638;
  if (!qword_1EE398638)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE398638);
  }
  return result;
}

uint64_t sub_19A32D494(uint64_t a1)
{
  uint64_t v2;

  sub_19A317D74();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19A32D4D0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_19A32CA98(a1, a2, *(void (**)(__int128 *, uint64_t))(v2 + 16));
}

void SleepingWristTemperatureBaselineCalculationState.SampleCountProgress.remainingSamplesRequired.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  id v2;
  __CFString *v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v1 = *v0;
  v2 = objc_allocWithZone((Class)HKQuantityType);
  v3 = CFSTR("HKQuantityTypeIdentifierAppleSleepingWristTemperature");
  v4 = objc_msgSend(v2, sel_initWithIdentifier_, v3);
  if (!v4)
    goto LABEL_6;
  v5 = v4;

  v6 = objc_msgSend(v5, sel__rollingBaselineConfiguration);
  if (!v6)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v7 = objc_msgSend(v6, sel_minimumSampleCount);

  if (__OFSUB__(v7, v1 + 1))
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
}

uint64_t SleepingWristTemperatureBaselineCalculationState.SampleCountProgress.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

HealthKit::SleepingWristTemperatureBaselineCalculationState::SampleCountProgress_optional __swiftcall SleepingWristTemperatureBaselineCalculationState.SampleCountProgress.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x302010004uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 5)
    LOBYTE(v2) = 4;
  *v1 = v2;
  return (HealthKit::SleepingWristTemperatureBaselineCalculationState::SampleCountProgress_optional)rawValue;
}

uint64_t sub_19A32D5F8()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

uint64_t sub_19A32D63C()
{
  return sub_19A353B44();
}

uint64_t sub_19A32D668()
{
  sub_19A353B38();
  sub_19A353B44();
  return sub_19A353B68();
}

HealthKit::SleepingWristTemperatureBaselineCalculationState::SampleCountProgress_optional sub_19A32D6A8(Swift::Int *a1)
{
  return SleepingWristTemperatureBaselineCalculationState.SampleCountProgress.init(rawValue:)(*a1);
}

void sub_19A32D6B0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_19A32D6C0()
{
  sub_19A32F450();
  return sub_19A3534B4();
}

uint64_t sub_19A32D71C()
{
  sub_19A32F450();
  return sub_19A35349C();
}

unint64_t SleepingWristTemperatureBaselineCalculationState.init(sampleCount:)@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  v2 = 0x302010004uLL >> (8 * result);
  if (result >= 5)
    LOBYTE(v2) = 5;
  *a2 = v2;
  return result;
}

BOOL static SleepingWristTemperatureBaselineCalculationState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 6:
      return v3 == 6;
    case 5:
      return v3 == 5;
    case 4:
      return v3 == 4;
  }
  if ((v3 - 4) < 3)
    return 0;
  return v2 == v3;
}

uint64_t sub_19A32D800()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_19A32D834 + 4 * byte_19A450820[*v0]))(0x7472617453746F6ELL, 0xEA00000000006465);
}

uint64_t sub_19A32D834()
{
  return 0x6572676F72506E69;
}

uint64_t sub_19A32D84C()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_19A32D864()
{
  return 0x616C696176616E75;
}

uint64_t sub_19A32D884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19A32F270(a1, a2);
  *a3 = result;
  return result;
}

void sub_19A32D8A8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_19A32D8B4()
{
  sub_19A32DFE4();
  return sub_19A353C94();
}

uint64_t sub_19A32D8DC()
{
  sub_19A32DFE4();
  return sub_19A353CA0();
}

uint64_t sub_19A32D904()
{
  return 0;
}

uint64_t sub_19A32D910@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_19A32D93C()
{
  sub_19A32DF18();
  return sub_19A353C94();
}

uint64_t sub_19A32D964()
{
  sub_19A32DF18();
  return sub_19A353CA0();
}

uint64_t sub_19A32D98C()
{
  return 12383;
}

uint64_t sub_19A32D998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_19A353AC0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_19A32DA14()
{
  sub_19A32DF5C();
  return sub_19A353C94();
}

uint64_t sub_19A32DA3C()
{
  sub_19A32DF5C();
  return sub_19A353CA0();
}

uint64_t sub_19A32DA64()
{
  sub_19A32DFA0();
  return sub_19A353C94();
}

uint64_t sub_19A32DA8C()
{
  sub_19A32DFA0();
  return sub_19A353CA0();
}

uint64_t sub_19A32DAB4()
{
  sub_19A32DED4();
  return sub_19A353C94();
}

uint64_t sub_19A32DADC()
{
  sub_19A32DED4();
  return sub_19A353CA0();
}

uint64_t SleepingWristTemperatureBaselineCalculationState.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_19A32E608(0, &qword_1EE398648, (uint64_t (*)(void))sub_19A32DED4, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v5;
  sub_19A32E608(0, &qword_1EE398658, (uint64_t (*)(void))sub_19A32DF18, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys, v3);
  v31 = v6;
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v28 = (char *)&v28 - v7;
  sub_19A32E608(0, &qword_1EE398668, (uint64_t (*)(void))sub_19A32DF5C, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys, v3);
  v34 = v8;
  v32 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v30 = (char *)&v28 - v9;
  sub_19A32E608(0, &qword_1EE398678, (uint64_t (*)(void))sub_19A32DFA0, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys, v3);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  sub_19A32E608(0, &qword_1EE398688, (uint64_t (*)(void))sub_19A32DFE4, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys, v3);
  v37 = *(_QWORD *)(v15 - 8);
  v38 = v15;
  MEMORY[0x1E0C80A78](v15);
  v16 = *v1;
  v17 = a1[3];
  v18 = a1;
  v20 = (char *)&v28 - v19;
  __swift_project_boxed_opaque_existential_1(v18, v17);
  sub_19A32DFE4();
  sub_19A353B98();
  switch(v16)
  {
    case 6:
      v43 = 3;
      sub_19A32DED4();
      v22 = v33;
      v21 = v38;
      sub_19A353A54();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v21);
    case 5:
      v42 = 2;
      sub_19A32DF18();
      v23 = v28;
      v21 = v38;
      sub_19A353A54();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v21);
    case 4:
      v39 = 0;
      sub_19A32DFA0();
      v21 = v38;
      sub_19A353A54();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v21);
  }
  v41 = 1;
  sub_19A32DF5C();
  v25 = v30;
  v26 = v38;
  sub_19A353A54();
  v40 = v16;
  sub_19A32E028();
  v27 = v34;
  sub_19A353A78();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v20, v26);
}

unint64_t sub_19A32DED4()
{
  unint64_t result;

  result = qword_1EE398650;
  if (!qword_1EE398650)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450E58, &type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398650);
  }
  return result;
}

unint64_t sub_19A32DF18()
{
  unint64_t result;

  result = qword_1EE398660;
  if (!qword_1EE398660)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450E08, &type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398660);
  }
  return result;
}

unint64_t sub_19A32DF5C()
{
  unint64_t result;

  result = qword_1EE398670;
  if (!qword_1EE398670)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450DB8, &type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398670);
  }
  return result;
}

unint64_t sub_19A32DFA0()
{
  unint64_t result;

  result = qword_1EE398680;
  if (!qword_1EE398680)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450D68, &type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398680);
  }
  return result;
}

unint64_t sub_19A32DFE4()
{
  unint64_t result;

  result = qword_1EE398690;
  if (!qword_1EE398690)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450D18, &type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398690);
  }
  return result;
}

unint64_t sub_19A32E028()
{
  unint64_t result;

  result = qword_1EE398698;
  if (!qword_1EE398698)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress, &type metadata for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress);
    atomic_store(result, (unint64_t *)&qword_1EE398698);
  }
  return result;
}

uint64_t SleepingWristTemperatureBaselineCalculationState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[13];
  uint64_t v25;

  v24[10] = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_19A32E608(0, &qword_1EE3986A0, (uint64_t (*)(void))sub_19A32DED4, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v24[5] = v4;
  v24[3] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v24[12] = (char *)v24 - v5;
  sub_19A32E608(0, &qword_1EE3986A8, (uint64_t (*)(void))sub_19A32DF18, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys, v3);
  v24[6] = v6;
  v24[4] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v24[9] = (char *)v24 - v7;
  sub_19A32E608(0, &qword_1EE3986B0, (uint64_t (*)(void))sub_19A32DF5C, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys, v3);
  v9 = *(_QWORD *)(v8 - 8);
  v24[7] = v8;
  v24[8] = v9;
  MEMORY[0x1E0C80A78](v8);
  v24[11] = (char *)v24 - v10;
  sub_19A32E608(0, &qword_1EE3986B8, (uint64_t (*)(void))sub_19A32DFA0, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys, v3);
  v24[1] = *(_QWORD *)(v11 - 8);
  v24[2] = v11;
  MEMORY[0x1E0C80A78](v11);
  sub_19A32E608(0, &qword_1EE3986C0, (uint64_t (*)(void))sub_19A32DFE4, (uint64_t)&type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys, v3);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v24 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A32DFE4();
  v17 = v25;
  sub_19A353B80();
  if (!v17)
  {
    v25 = v14;
    v18 = sub_19A353A3C();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X10 }
    v19 = v13;
    v20 = sub_19A3538D4();
    swift_allocError();
    v22 = v21;
    sub_19A32E664();
    *v22 = &type metadata for SleepingWristTemperatureBaselineCalculationState;
    sub_19A353A0C();
    sub_19A3538BC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x1E0DEC450], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_19A32E608(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_19A32E664()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EE3986C8)
  {
    sub_19A32E6D0();
    sub_19A3538C8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EE3986C8);
  }
}

unint64_t sub_19A32E6D0()
{
  unint64_t result;

  result = qword_1EE3986D0;
  if (!qword_1EE3986D0)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE3986D0);
  }
  return result;
}

unint64_t sub_19A32E70C()
{
  unint64_t result;

  result = qword_1EE3986D8;
  if (!qword_1EE3986D8)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress, &type metadata for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress);
    atomic_store(result, (unint64_t *)&qword_1EE3986D8);
  }
  return result;
}

BOOL sub_19A32E750(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  switch(v2)
  {
    case 6:
      return v3 == 6;
    case 5:
      return v3 == 5;
    case 4:
      return v3 == 4;
  }
  if ((v3 - 4) < 3)
    return 0;
  return v2 == v3;
}

uint64_t sub_19A32E7B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingWristTemperatureBaselineCalculationState.init(from:)(a1, a2);
}

uint64_t sub_19A32E7CC(_QWORD *a1)
{
  return SleepingWristTemperatureBaselineCalculationState.encode(to:)(a1);
}

id HKRollingBaselineConfiguration.baselineInclusionIntervalForNextExpectedSample(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id result;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;

  v3 = v2;
  v45 = a1;
  v5 = sub_19A352CB0();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_19A3530AC();
  v7 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19A3530B8();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A32EB24();
  MEMORY[0x1E0C80A78](v13);
  v50 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_19A352FD4();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v37 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v37 - v23;
  v49 = v3;
  result = objc_msgSend(v3, sel_minimumSampleCount);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = v24;
    v40 = v19;
    v41 = a2;
    sub_19A353088();
    v26 = v15;
    v27 = v7;
    v28 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
    v29 = v44;
    v28(v9, *MEMORY[0x1E0CB1130], v44);
    v30 = v45;
    sub_19A352CA4();
    sub_19A35307C();
    v31 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    v37 = v22;
    v38 = v31;
    v31(v22, v26);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v29);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v43);
    v32 = v46;
    v33 = v47;
    v34 = v30;
    v35 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v34, v48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v50, 1, v26) == 1)
    {
      v36 = v39;
      sub_19A352CA4();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
      sub_19A3294E8(v50);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
      v36 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v39, v50, v26);
    }
    objc_msgSend(v49, sel_maximumWindowDuration);
    sub_19A352F50();
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v40, v36, v26);
    sub_19A352C8C();
    return (id)v38(v36, v26);
  }
  return result;
}

void sub_19A32EB24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ECE27680)
  {
    sub_19A352FD4();
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ECE27680);
  }
}

unint64_t sub_19A32EB7C()
{
  unint64_t result;

  result = qword_1EE3986E0;
  if (!qword_1EE3986E0)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress, &type metadata for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress);
    atomic_store(result, (unint64_t *)&qword_1EE3986E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepingWristTemperatureBaselineCalculationState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_19A32EC10 + 4 * byte_19A450828[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SleepingWristTemperatureBaselineCalculationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_19A32ECBC + 4 * byte_19A450832[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_19A32ECF0 + 4 * byte_19A45082D[v5]))();
}

uint64_t sub_19A32ECF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A32ECF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A32ED00);
  return result;
}

uint64_t sub_19A32ED0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A32ED14);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_19A32ED18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A32ED20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A32ED2C(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_19A32ED40(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress;
}

uint64_t _s9HealthKit48SleepingWristTemperatureBaselineCalculationStateO19SampleCountProgressOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_19A32EDC4 + 4 * byte_19A45083C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_19A32EDF8 + 4 * byte_19A450837[v4]))();
}

uint64_t sub_19A32EDF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A32EE00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x19A32EE08);
  return result;
}

uint64_t sub_19A32EE14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x19A32EE1CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_19A32EE20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_19A32EE28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.CodingKeys()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19A32EE94 + 4 * byte_19A450841[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19A32EEB4 + 4 * byte_19A450846[v4]))();
}

_BYTE *sub_19A32EE94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19A32EEB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A32EEBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A32EEC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A32EECC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A32EED4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys()
{
  return &type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys;
}

unint64_t sub_19A32EF14()
{
  unint64_t result;

  result = qword_1EE3986E8;
  if (!qword_1EE3986E8)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450BE8, &type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE3986E8);
  }
  return result;
}

unint64_t sub_19A32EF5C()
{
  unint64_t result;

  result = qword_1EE3986F0;
  if (!qword_1EE3986F0)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450CF0, &type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE3986F0);
  }
  return result;
}

unint64_t sub_19A32EFA4()
{
  unint64_t result;

  result = qword_1EE3986F8;
  if (!qword_1EE3986F8)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450C60, &type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE3986F8);
  }
  return result;
}

unint64_t sub_19A32EFEC()
{
  unint64_t result;

  result = qword_1EE398700;
  if (!qword_1EE398700)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450C88, &type metadata for SleepingWristTemperatureBaselineCalculationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398700);
  }
  return result;
}

unint64_t sub_19A32F034()
{
  unint64_t result;

  result = qword_1EE398708;
  if (!qword_1EE398708)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450C10, &type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398708);
  }
  return result;
}

unint64_t sub_19A32F07C()
{
  unint64_t result;

  result = qword_1EE398710;
  if (!qword_1EE398710)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450C38, &type metadata for SleepingWristTemperatureBaselineCalculationState.NotStartedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398710);
  }
  return result;
}

unint64_t sub_19A32F0C4()
{
  unint64_t result;

  result = qword_1EE398718;
  if (!qword_1EE398718)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450B58, &type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398718);
  }
  return result;
}

unint64_t sub_19A32F10C()
{
  unint64_t result;

  result = qword_1EE398720;
  if (!qword_1EE398720)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450B80, &type metadata for SleepingWristTemperatureBaselineCalculationState.InProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398720);
  }
  return result;
}

unint64_t sub_19A32F154()
{
  unint64_t result;

  result = qword_1EE398728;
  if (!qword_1EE398728)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450B08, &type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398728);
  }
  return result;
}

unint64_t sub_19A32F19C()
{
  unint64_t result;

  result = qword_1EE398730;
  if (!qword_1EE398730)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450B30, &type metadata for SleepingWristTemperatureBaselineCalculationState.CompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398730);
  }
  return result;
}

unint64_t sub_19A32F1E4()
{
  unint64_t result;

  result = qword_1EE398738;
  if (!qword_1EE398738)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450AB8, &type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398738);
  }
  return result;
}

unint64_t sub_19A32F22C()
{
  unint64_t result;

  result = qword_1EE398740;
  if (!qword_1EE398740)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A450AE0, &type metadata for SleepingWristTemperatureBaselineCalculationState.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398740);
  }
  return result;
}

uint64_t sub_19A32F270(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617453746F6ELL && a2 == 0xEA00000000006465;
  if (v2 || (sub_19A353AC0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572676F72506E69 && a2 == 0xEA00000000007373 || (sub_19A353AC0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE800000000000000 || (sub_19A353AC0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x616C696176616E75 && a2 == 0xEB00000000656C62)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_19A353AC0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_19A32F450()
{
  unint64_t result;

  result = qword_1EE398748;
  if (!qword_1EE398748)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress, &type metadata for SleepingWristTemperatureBaselineCalculationState.SampleCountProgress);
    atomic_store(result, (unint64_t *)&qword_1EE398748);
  }
  return result;
}

id HKAppleSleepingBreathingDisturbancesClassification.init(classifying:)(void *a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = HKAppleSleepingBreathingDisturbancesClassificationForQuantity(a1);
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_integerValue);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void *static HKAppleSleepingBreathingDisturbancesClassification.allCases.getter()
{
  return &unk_1E37F84F0;
}

unint64_t sub_19A32F51C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE398750;
  if (!qword_1EE398750)
  {
    sub_19A32F564();
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE398750);
  }
  return result;
}

void sub_19A32F564()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398758)
  {
    type metadata accessor for HKAppleSleepingBreathingDisturbancesClassification(255);
    v0 = sub_19A3534FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398758);
  }
}

void sub_19A32F5B8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E37F8520;
}

NSError *HKAppleWalkingSteadinessClassification.init(for:)(HKQuantity *a1)
{
  HKAppleWalkingSteadinessClassification *v2;
  HKAppleWalkingSteadinessClassification v3;
  NSError *result;
  NSError *v5;
  NSError *v6;
  NSError *v7[2];

  v7[1] = *(NSError **)MEMORY[0x1E0C80C00];
  v2 = (HKAppleWalkingSteadinessClassification *)swift_slowAlloc();
  v7[0] = 0;
  v3 = HKAppleWalkingSteadinessClassificationForQuantity(a1, v2, v7);
  result = v7[0];
  v5 = result;
  if ((v3 & 1) != 0)
  {
    v3 = *v2;
    MEMORY[0x19AEC804C](v2, -1, -1);

    return (NSError *)v3;
  }
  if (result)
  {
    v6 = result;
    swift_willThrow();
    MEMORY[0x19AEC804C](v2, -1, -1);

    return (NSError *)v3;
  }
  __break(1u);
  return result;
}

HKQuantity *HKAppleWalkingSteadinessClassification.minimum.getter(HKAppleWalkingSteadinessClassification a1)
{
  return HKAppleWalkingSteadinessMinimumQuantityForClassification(a1);
}

HKQuantity *HKAppleWalkingSteadinessClassification.maximum.getter(HKAppleWalkingSteadinessClassification a1)
{
  return HKAppleWalkingSteadinessMaximumQuantityForClassification(a1);
}

void *static HKAppleWalkingSteadinessClassification.allCases.getter()
{
  return &unk_1E37F8550;
}

unint64_t sub_19A32F6FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE398760;
  if (!qword_1EE398760)
  {
    sub_19A32F744();
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EE398760);
  }
  return result;
}

void sub_19A32F744()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398768)
  {
    type metadata accessor for HKAppleWalkingSteadinessClassification(255);
    v0 = sub_19A3534FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398768);
  }
}

void sub_19A32F798(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E37F8588;
}

id HKQuantitySeriesSampleQueryDescriptor.predicate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)(v1 + 8);
  v5 = *(id *)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  v3 = v2;
  return v5;
}

void HKQuantitySeriesSampleQueryDescriptor.predicate.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(void **)(v1 + 8);

  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
}

uint64_t (*HKQuantitySeriesSampleQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

HealthKit::HKQuantitySeriesSampleQueryDescriptor::Options __swiftcall HKQuantitySeriesSampleQueryDescriptor.Options.init(rawValue:)(HealthKit::HKQuantitySeriesSampleQueryDescriptor::Options rawValue)
{
  HealthKit::HKQuantitySeriesSampleQueryDescriptor::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static HKQuantitySeriesSampleQueryDescriptor.Options.includeSample.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static HKQuantitySeriesSampleQueryDescriptor.Options.orderByQuantitySampleStartDate.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_19A32F840(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_19A32F848@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_19A32F85C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_19A32F870@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_19A32F884(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_19A32F8B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_19A32F8E0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_19A32F904(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_19A32F918(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_19A32F92C(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_19A32F940@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_19A32F954(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_19A32F968(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_19A32F97C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_19A32F990()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_19A32F9A0()
{
  return sub_19A3537A8();
}

_QWORD *sub_19A32F9B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_19A32F9D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void HKQuantitySeriesSampleQueryDescriptor.options.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

_QWORD *HKQuantitySeriesSampleQueryDescriptor.options.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*HKQuantitySeriesSampleQueryDescriptor.options.modify())()
{
  return nullsub_1;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 32);
  return swift_bridgeObjectRetain();
}

__n128 HKQuantitySeriesSampleQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  *(__n128 *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*HKQuantitySeriesSampleQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t *HKQuantitySeriesSampleQueryDescriptor.init(predicate:options:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = result[1];
  v5 = *a2;
  a3[4] = 0;
  a3[5] = -1;
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = 0;
  return result;
}

id HKQuantitySeriesSampleQueryDescriptor.Result.quantity.getter()
{
  id *v0;

  return *v0;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Result.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0) + 20);
  v4 = sub_19A352CB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE398868);
}

void *HKQuantitySeriesSampleQueryDescriptor.Result.sample.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0) + 24));
  v2 = v1;
  return v1;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Result.init(quantity:dateInterval:sample:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  *a4 = a1;
  v7 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  v8 = (char *)a4 + *(int *)(v7 + 20);
  v9 = sub_19A352CB0();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a2, v9);
  *(_QWORD *)((char *)a4 + *(int *)(v7 + 24)) = a3;
  return result;
}

void HKQuantitySeriesSampleQueryDescriptor.Result.hash(into:)()
{
  id *v0;
  id *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = v0;
  v2 = *v0;
  sub_19A353748();

  v3 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  sub_19A352CB0();
  sub_19A306A54(&qword_1EE398770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_19A35337C();
  v4 = *(id *)((char *)v1 + *(int *)(v3 + 24));
  sub_19A353B50();
  if (v4)
  {
    v5 = v4;
    sub_19A353748();

  }
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Result.hashValue.getter()
{
  id *v0;
  id *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = v0;
  sub_19A353B38();
  v2 = *v0;
  sub_19A353748();

  v3 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  sub_19A352CB0();
  sub_19A306A54(&qword_1EE398770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_19A35337C();
  v4 = *(id *)((char *)v1 + *(int *)(v3 + 24));
  sub_19A353B50();
  if (v4)
  {
    v5 = v4;
    sub_19A353748();

  }
  return sub_19A353B68();
}

void sub_19A32FDB8(uint64_t a1, uint64_t a2)
{
  id *v2;
  id *v4;
  id v5;
  void *v6;
  id v7;

  v4 = v2;
  v5 = *v2;
  sub_19A353748();

  sub_19A352CB0();
  sub_19A306A54(&qword_1EE398770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_19A35337C();
  v6 = *(id *)((char *)v4 + *(int *)(a2 + 24));
  sub_19A353B50();
  if (v6)
  {
    v7 = v6;
    sub_19A353748();

  }
}

uint64_t sub_19A32FEA4(uint64_t a1, uint64_t a2)
{
  id *v2;
  id *v4;
  id v5;
  void *v6;
  id v7;

  v4 = v2;
  sub_19A353B38();
  v5 = *v2;
  sub_19A353748();

  sub_19A352CB0();
  sub_19A306A54(&qword_1EE398770, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5F0]);
  sub_19A35337C();
  v6 = *(id *)((char *)v4 + *(int *)(a2 + 24));
  sub_19A353B50();
  if (v6)
  {
    v7 = v6;
    sub_19A353748();

  }
  return sub_19A353B68();
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.resultIterator.getter()
{
  type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0);
  return swift_bridgeObjectRetain();
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.resultIterator.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2
                + *(int *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.resultIterator.modify())()
{
  type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0);
  return nullsub_1;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[11] = a1;
  v2[12] = v1;
  sub_19A33102C(0);
  v2[13] = swift_task_alloc();
  return swift_task_switch();
}

void (*sub_19A330070())(uint64_t, _QWORD)
{
  uint64_t v0;
  void (*result)(uint64_t, _QWORD);
  _QWORD *v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  result = (void (*)(uint64_t, _QWORD))HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.resultIterator.modify();
  v3 = result;
  v4 = *v2;
  if (!*v2)
  {
    v10 = *(_QWORD *)(v0 + 104);
    result(v0 + 16, 0);
    v11 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
LABEL_9:
    sub_19A318F00(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))sub_19A33102C);
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v20;
    sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    *v20 = v0;
    v20[1] = sub_19A330294;
    return (void (*)(uint64_t, _QWORD))sub_19A3535A4();
  }
  v5 = v2;
  v6 = v2[1];
  v7 = *(_QWORD *)(v4 + 16);
  if (v6 != v7)
  {
    if (v6 >= v7)
    {
      __break(1u);
    }
    else
    {
      v12 = *(_QWORD *)(v0 + 104);
      v9 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
      v13 = *(_QWORD *)(v9 - 8);
      result = (void (*)(uint64_t, _QWORD))sub_19A331048(v4+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v6, v12);
      v14 = v5[1];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (!v15)
      {
        v17 = *(_QWORD *)(v0 + 104);
        v5[1] = v16;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v9);
        goto LABEL_8;
      }
    }
    __break(1u);
    return result;
  }
  v8 = *(_QWORD *)(v0 + 104);
  v9 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
LABEL_8:
  v18 = *(_QWORD *)(v0 + 104);
  v3(v0 + 16, 0);
  type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  v19 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v9) == 1)
    goto LABEL_9;
  v21 = *(_QWORD *)(v0 + 88);
  sub_19A33215C(*(_QWORD *)(v0 + 104), v21, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v9);
  swift_task_dealloc();
  return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A330294()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t (*sub_19A3302F8())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*result)();
  _QWORD *v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = (_QWORD *)(v1
                + *(int *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0) + 20));
  swift_bridgeObjectRelease();
  *v3 = v2;
  v3[1] = 0;
  result = HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.resultIterator.modify();
  v6 = result;
  v7 = *v5;
  if (!*v5)
  {
    v13 = *(_QWORD *)(v0 + 88);
    ((void (*)(uint64_t, _QWORD))result)(v0 + 48, 0);
    v14 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
LABEL_8:
    swift_task_dealloc();
    return (uint64_t (*)())(*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = v5;
  v9 = v5[1];
  v10 = *(_QWORD *)(v7 + 16);
  if (v9 == v10)
  {
    v11 = *(_QWORD *)(v0 + 88);
    v12 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
LABEL_7:
    ((void (*)(uint64_t, _QWORD))v6)(v0 + 48, 0);
    goto LABEL_8;
  }
  if (v9 < v10)
  {
    v15 = *(_QWORD *)(v0 + 88);
    v16 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
    v17 = *(_QWORD *)(v16 - 8);
    sub_19A331048(v7+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v9, v15);
    v8[1] = v9 + 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.nextResultIterator()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  *v1 = v0;
  v1[1] = sub_19A30E700;
  return sub_19A3535A4();
}

uint64_t sub_19A3304D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_19A30AF20;
  return HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.next()(a1);
}

uint64_t sub_19A330524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v6 = (_QWORD *)swift_task_alloc();
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_19A30B060;
  return HKQuantitySeriesSampleQueryDescriptor.Results.Iterator.next()(a1);
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  result = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0);
  v3 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v3 = 0;
  v3[1] = 0;
  return result;
}

uint64_t sub_19A3305CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  sub_19A353598();
  v3 = (_QWORD *)(a1
                + *(int *)(type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(0) + 20));
  *v3 = 0;
  v3[1] = 0;
  return sub_19A318F00(v1, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results);
}

uint64_t sub_19A33062C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t *v9;
  uint64_t result;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _BYTE v15[24];

  v5 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (unint64_t *)(v2 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(v2 + 16))
  {
    *v9 = sub_19A3146D4(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
  }
  sub_19A331048(a1, (uint64_t)v8);
  result = swift_beginAccess();
  v11 = *v9;
  if (*v9)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_19A3146D4(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      *v9 = v11;
    }
    v14 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    if (v14 >= v13 >> 1)
    {
      v11 = sub_19A3146D4(v13 > 1, v14 + 1, 1, v11);
      *v9 = v11;
    }
    *(_QWORD *)(v11 + 16) = v14 + 1;
    sub_19A33215C((uint64_t)v8, v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result);
    return swift_endAccess();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19A3307A8()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t HKQuantitySeriesSampleQueryDescriptor.results(for:)(void *a1)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  id v12;
  _BYTE v14[16];
  id (*v15)(uint64_t);
  uint64_t v16;
  void *v17;
  _OWORD v18[3];

  sub_19A3321A0(0, &qword_1EE3987A0, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A58]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v14[-v6];
  v8 = v1[1];
  v18[0] = *v1;
  v18[1] = v8;
  v18[2] = v1[2];
  type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.ResultBatch();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  v10 = swift_allocObject();
  v11 = v1[1];
  *(_OWORD *)(v10 + 16) = *v1;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = v1[2];
  *(_QWORD *)(v10 + 64) = v9;
  *(_QWORD *)(v10 + 72) = a1;
  v15 = sub_19A3310F0;
  v16 = v10;
  v17 = a1;
  sub_19A30899C();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  v12 = a1;
  sub_19A32A904((uint64_t)v18);
  swift_retain();
  sub_19A3535C8();
  swift_release();

  return swift_release();
}

id sub_19A330930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  void *v22;
  void (*v23)(uint64_t, void *, void *, void *, uint64_t, uint64_t, void *, double, double);
  uint64_t v25;
  uint64_t v26;
  __int128 aBlock;
  void (*v28)(uint64_t, void *, void *, void *, uint64_t, uint64_t, void *, double, double);
  void *v29;
  uint64_t (*v30)(uint64_t, void *, void *, uint64_t, int, void *);
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  void *v34;

  sub_19A3321A0(0, (unint64_t *)&qword_1EE396F10, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v25 - v12;
  v26 = *(_QWORD *)(a2 + 8);
  objc_opt_self();
  v14 = swift_dynamicCastObjCClassUnconditional();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v15 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  *(_QWORD *)(v16 + ((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  v17 = objc_allocWithZone((Class)HKQuantitySeriesSampleQuery);
  v30 = sub_19A332078;
  v31 = v16;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v28 = sub_19A330E68;
  v29 = &block_descriptor_16;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  v19 = a4;
  v20 = objc_msgSend(v17, sel_initWithQuantityType_predicate_quantityBatchHandler_, v14, v26, v18);
  _Block_release(v18);
  swift_release();
  v21 = *(_QWORD *)(a2 + 16);
  objc_msgSend(v20, sel_setIncludeSample_, v21 & 1);
  objc_msgSend(v20, sel_setOrderByQuantitySampleStartDate_, (v21 >> 1) & 1);
  aBlock = *(_OWORD *)(a2 + 24);
  v28 = *(void (**)(uint64_t, void *, void *, void *, uint64_t, uint64_t, void *, double, double))(a2 + 40);
  sub_19A33215C((uint64_t)&aBlock, (uint64_t)v32, (uint64_t (*)(_QWORD))sub_19A309F78);
  sub_19A33215C((uint64_t)v32, (uint64_t)&v33, (uint64_t (*)(_QWORD))sub_19A309F78);
  v22 = v34;
  if (v34)
  {
    sub_19A309FF4((uint64_t)&aBlock);
    v22 = (void *)sub_19A353400();
  }
  v23 = v28;
  objc_msgSend(v20, sel_setDebugIdentifier_, v22);

  objc_msgSend(v20, sel_setQualityOfService_, v23);
  sub_19A309FCC((uint64_t)&aBlock);
  return v20;
}

uint64_t sub_19A330BB0(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, void *a6, uint64_t a7, uint64_t a8, id a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  id v28;
  char v29;
  _QWORD *v30;
  void *v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  id v44;

  v42 = a8;
  v37 = a1;
  v38 = a6;
  v43 = a5;
  sub_19A3321A0(0, &qword_1EE398A70, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A30]);
  v40 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  MEMORY[0x1E0C80A78](v13);
  v39 = (char *)&v34 - v14;
  v15 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_19A352FD4();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v34 - v24;
  if (a2)
  {
    v36 = v19;
    v26 = a2;
    sub_19A352F2C();
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v25, v18);
    v35 = v18;
    v27 = v26;
    sub_19A352C98();
    *v17 = v27;
    *(_QWORD *)((char *)v17 + *(int *)(v15 + 24)) = a3;
    v28 = a3;
    sub_19A33062C((uint64_t)v17, a4);

    sub_19A318F00((uint64_t)v17, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result);
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v25, v35);
  }
  v29 = v43;
  if (!a4 || (v43 & 1) != 0)
  {
    v30 = (_QWORD *)(a7 + 16);
    swift_beginAccess();
    v31 = *(void **)(a7 + 16);
    if (v31)
    {
      v44 = v31;
      sub_19A3321A0(0, (unint64_t *)&qword_1EE396F10, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
      swift_bridgeObjectRetain();
      v32 = v39;
      sub_19A353574();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
    }
    *v30 = 0;
    result = swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      objc_msgSend(a9, sel_stopQuery_, v37);
      v44 = v38;
      v33 = v38;
      sub_19A3321A0(0, (unint64_t *)&qword_1EE396F10, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
      return sub_19A353580();
    }
  }
  return result;
}

void sub_19A330E68(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, double a8, double a9)
{
  void (*v17)(id, void *, void *, uint64_t, uint64_t, void *, double, double);
  id v18;
  id v19;
  id v20;
  id v21;

  v17 = *(void (**)(id, void *, void *, uint64_t, uint64_t, void *, double, double))(a1 + 32);
  swift_retain();
  v21 = a2;
  v18 = a3;
  v19 = a4;
  v20 = a7;
  v17(v21, a3, a4, a5, a6, a7, a8, a9);
  swift_release();

}

uint64_t _s9HealthKit37HKQuantitySeriesSampleQueryDescriptorV6ResultV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  char v10;

  sub_19A308AE4(0, (unint64_t *)&qword_1EE398630);
  if ((sub_19A35373C() & 1) != 0)
  {
    v4 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
    if ((sub_19A352C68() & 1) != 0)
    {
      v5 = *(int *)(v4 + 24);
      v6 = *(void **)(a1 + v5);
      v7 = *(void **)(a2 + v5);
      if (v6)
      {
        if (v7)
        {
          sub_19A308AE4(0, &qword_1EE398A78);
          v8 = v7;
          v9 = v6;
          v10 = sub_19A35373C();

          if ((v10 & 1) != 0)
            return 1;
        }
      }
      else if (!v7)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE398998);
}

void sub_19A33102C(uint64_t a1)
{
  sub_19A30FA98(a1, &qword_1EE398780, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_19A331048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.ResultBatch()
{
  return objc_opt_self();
}

uint64_t sub_19A3310AC()
{
  id *v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

id sub_19A3310F0(uint64_t a1)
{
  uint64_t v1;

  return sub_19A330930(a1, v1 + 16, *(_QWORD *)(v1 + 64), *(void **)(v1 + 72));
}

void sub_19A3310FC(uint64_t a1)
{
  uint64_t v1;

  sub_19A30782C(a1, *(uint64_t (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_19A33110C()
{
  unint64_t result;

  result = qword_1EE3987A8;
  if (!qword_1EE3987A8)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Options, &type metadata for HKQuantitySeriesSampleQueryDescriptor.Options);
    atomic_store(result, (unint64_t *)&qword_1EE3987A8);
  }
  return result;
}

unint64_t sub_19A331154()
{
  unint64_t result;

  result = qword_1EE3987B0;
  if (!qword_1EE3987B0)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Options, &type metadata for HKQuantitySeriesSampleQueryDescriptor.Options);
    atomic_store(result, (unint64_t *)&qword_1EE3987B0);
  }
  return result;
}

unint64_t sub_19A33119C()
{
  unint64_t result;

  result = qword_1EE3987B8;
  if (!qword_1EE3987B8)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Options, &type metadata for HKQuantitySeriesSampleQueryDescriptor.Options);
    atomic_store(result, (unint64_t *)&qword_1EE3987B8);
  }
  return result;
}

unint64_t sub_19A3311E4()
{
  unint64_t result;

  result = qword_1EE3987C0;
  if (!qword_1EE3987C0)
  {
    result = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Options, &type metadata for HKQuantitySeriesSampleQueryDescriptor.Options);
    atomic_store(result, (unint64_t *)&qword_1EE3987C0);
  }
  return result;
}

uint64_t sub_19A331228()
{
  return sub_19A306A54(qword_1EE3987C8, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Result, (uint64_t)&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Result);
}

uint64_t sub_19A331254()
{
  return sub_19A306A54(&qword_1EE3987E0, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator);
}

uint64_t sub_19A331280()
{
  return sub_19A306A54(&qword_1EE3987E8, type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKQuantitySeriesSampleQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1)
{
  return sub_19A306AA8(a1, qword_1EE398908);
}

uint64_t assignWithCopy for HKQuantitySeriesSampleQueryDescriptor(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for HKQuantitySeriesSampleQueryDescriptor()
{
  return &type metadata for HKQuantitySeriesSampleQueryDescriptor;
}

ValueMetadata *type metadata accessor for HKQuantitySeriesSampleQueryDescriptor.Options()
{
  return &type metadata for HKQuantitySeriesSampleQueryDescriptor.Options;
}

void **initializeBufferWithCopyOfBuffer for HKQuantitySeriesSampleQueryDescriptor.Result(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_19A352CB0();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    v15 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v15;
    v16 = v15;
  }
  return v7;
}

void destroy for HKQuantitySeriesSampleQueryDescriptor.Result(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_19A352CB0();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

void **initializeWithCopy for HKQuantitySeriesSampleQueryDescriptor.Result(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  void *v14;
  id v15;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_19A352CB0();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v14;
  v15 = v14;
  return a1;
}

void **assignWithCopy for HKQuantitySeriesSampleQueryDescriptor.Result(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_19A352CB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)((char *)a1 + v13);
  v15 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v13) = v15;
  v16 = v15;

  return a1;
}

_QWORD *initializeWithTake for HKQuantitySeriesSampleQueryDescriptor.Result(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_19A352CB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **assignWithTake for HKQuantitySeriesSampleQueryDescriptor.Result(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_19A352CB0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)((char *)a1 + v11);
  *(void **)((char *)a1 + v11) = *(void **)((char *)a2 + v11);

  return a1;
}

uint64_t getEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Result()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A33169C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_19A352CB0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Result()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_19A331724(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_19A352CB0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_19A331798()
{
  uint64_t result;
  unint64_t v1;

  result = sub_19A352CB0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1)
{
  uint64_t v2;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKQuantitySeriesSampleQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A3321A0(0, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A331A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, &qword_1EE3988A8, (uint64_t (*)(uint64_t))sub_19A30899C, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A331A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, &qword_1EE3988A8, (uint64_t (*)(uint64_t))sub_19A30899C, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for HKQueryAsyncStream);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_19A331ABC()
{
  unint64_t v0;

  sub_19A3321A0(319, &qword_1EE398798, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AD0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    *v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1)
{
  uint64_t v2;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  *v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t initializeWithTake for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A331E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HKQuantitySeriesSampleQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_19A331ED0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_19A3321A0(0, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void sub_19A331F58()
{
  unint64_t v0;

  sub_19A3321A0(319, &qword_1EE398788, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0AB0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_19A331FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_19A3321A0(0, (unint64_t *)&qword_1EE396F10, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);

  return swift_deallocObject();
}

uint64_t sub_19A332078(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  sub_19A3321A0(0, (unint64_t *)&qword_1EE396F10, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x1E0DF0A78]);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  return sub_19A330BB0(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), v6 + v15, *(id *)(v6 + ((*(_QWORD *)(v14 + 64) + v15 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_19A33215C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_19A3321A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_19A30899C();
    v7 = v6;
    v8 = sub_19A305E34();
    v9 = a3(a1, v7, v8, MEMORY[0x1E0DEDB38]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_19A332214(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_19A353658();
  if (!v18)
    return sub_19A3534F0();
  v19 = v18;
  v25 = v15;
  v39 = sub_19A35394C();
  v32 = sub_19A353958();
  sub_19A353910();
  v36 = v17;
  result = sub_19A353640();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_19A353688();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_19A353940();
      sub_19A353670();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

id static HKCategoryValuePredicateProviding<>.predicateForSamples(_:value:)(uint64_t a1)
{
  void *v2;
  uint64_t v4;

  v2 = (void *)objc_opt_self();
  sub_19A353484();
  return objc_msgSend(v2, sel_predicateForCategorySamplesWithOperatorType_value_, a1, v4);
}

id static HKCategoryValuePredicateProviding<>.predicateForSamples(equalTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  _QWORD v15[6];

  v6 = (void *)objc_opt_self();
  v15[5] = a1;
  v15[2] = a2;
  v15[3] = a3;
  v7 = sub_19A35361C();
  v8 = (char *)sub_19A332704();
  v9 = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEB3E0], v7);
  v11 = sub_19A332214((void (*)(char *, char *))sub_19A33269C, (uint64_t)v15, v7, v8, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  sub_19A332740(v11);
  swift_bridgeObjectRelease();
  sub_19A306A54(qword_1EE399290, (uint64_t (*)(uint64_t))sub_19A332704, MEMORY[0x1E0DEFCF8]);
  v12 = (void *)sub_19A3535D4();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v6, sel_predicateForCategorySamplesEqualToValues_, v12);

  return v13;
}

id sub_19A33269C@<X0>(_QWORD *a1@<X8>)
{
  id result;
  uint64_t v3;

  sub_19A353484();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v3);
  *a1 = result;
  return result;
}

unint64_t sub_19A332704()
{
  unint64_t result;

  result = qword_1EE399280;
  if (!qword_1EE399280)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE399280);
  }
  return result;
}

uint64_t sub_19A332740(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_19A3539B8();
    swift_bridgeObjectRelease();
  }
  sub_19A332704();
  sub_19A306A54(qword_1EE399290, (uint64_t (*)(uint64_t))sub_19A332704, MEMORY[0x1E0DEFCF8]);
  result = sub_19A3535EC();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_19A3539B8();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x19AEC6A20](i, a1);
        sub_19A33A814(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_19A33A814(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_19A3328A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for HKCategoryValueSleepAnalysis(0);
  sub_19A306A54((unint64_t *)&unk_1EE398A80, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_19A44E4EC);
  result = sub_19A3535EC();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_19A33AD3C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void sub_19A332930(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;
  v5 = v2;

}

id sub_19A332984()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 24);
}

void sub_19A3329B4(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;
  v5 = v2;

}

id sub_19A332A08()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 32);
}

_QWORD *sub_19A332A38(void *a1, void *a2)
{
  _QWORD *v2;
  id v4;
  id v5;
  id v6;
  id v7;

  v2[2] = a1;
  v2[3] = a2;
  v4 = a1;
  v5 = a2;
  v6 = objc_msgSend((id)objc_opt_self(), sel_progressWithTotalUnitCount_, objc_msgSend(v5, sel_size));
  v2[4] = v6;
  v7 = v6;
  objc_msgSend(v7, sel_setCompletedUnitCount_, objc_msgSend(v7, sel_totalUnitCount));

  return v2;
}

uint64_t sub_19A332AE4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = v0;
  return swift_task_switch();
}

uint64_t sub_19A332AFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v1 = v0[21];
  v0[7] = v0 + 19;
  v0[2] = v0;
  v0[3] = sub_19A332C30;
  v2 = swift_continuation_init();
  v3 = *(void **)(v1 + 16);
  swift_beginAccess();
  v4 = *(void **)(v1 + 24);
  v5 = swift_allocObject();
  v0[10] = MEMORY[0x1E0C809B0];
  v6 = v0 + 10;
  *(_QWORD *)(v5 + 16) = v2;
  v6[4] = sub_19A332DA0;
  v6[5] = v5;
  v6[1] = 1107296256;
  v6[2] = sub_19A332DA8;
  v6[3] = &block_descriptor_17;
  v7 = _Block_copy(v6);
  v8 = v3;
  v9 = v4;
  swift_release();
  v10 = objc_msgSend(v8, sel_getDataForAttachment_completion_, v9, v7);
  _Block_release(v7);

  return swift_continuation_await();
}

uint64_t sub_19A332C30()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_19A332CA0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t *v9;
  _QWORD *v11;
  id v12;
  void *v13;

  if (a2 >> 60 == 15)
  {
    if (a3)
    {
      v6 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v6 = v13;
    }
    sub_19A305E34();
    swift_allocError();
    *v11 = v6;
    v12 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_19A3119F0(a1, a2);
    v9 = *(uint64_t **)(*(_QWORD *)(a4 + 64) + 40);
    *v9 = a1;
    v9[1] = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_19A332D90()
{
  return swift_deallocObject();
}

uint64_t sub_19A332DA0(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_19A332CA0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_19A332DA8(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)sub_19A352F20();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_19A311A90((uint64_t)v4, v8);
  return swift_release();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_19A332E54@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  swift_unknownObjectUnownedInit();
  result = swift_unknownObjectUnownedInit();
  *(_QWORD *)(a1 + 16) = 10485760;
  return result;
}

id *HKAttachmentDataReader.deinit()
{
  id *v0;

  return v0;
}

uint64_t HKAttachmentDataReader.__deallocating_deinit()
{
  id *v0;

  return swift_deallocClassInstance();
}

uint64_t HKAttachmentDataReader.unitTest_bytesWithChunkSize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  swift_unknownObjectUnownedInit();
  result = swift_unknownObjectUnownedInit();
  *(_QWORD *)(a2 + 16) = a1;
  return result;
}

id sub_19A332F6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 24);
  *a2 = v4;
  return v4;
}

id sub_19A332FB4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 32);
  *a2 = v4;
  return v4;
}

uint64_t type metadata accessor for HKAttachmentDataReader()
{
  return objc_opt_self();
}

uint64_t method lookup function for HKAttachmentDataReader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HKAttachmentDataReader.attachment.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of HKAttachmentDataReader.progress.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of HKAttachmentDataReader.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 184) + *(_QWORD *)(*(_QWORD *)v0 + 184));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_19A333098;
  return v4();
}

uint64_t sub_19A333098(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of HKAttachmentDataReader.bytes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

id _sSo14HKQuantityTypeC9HealthKitEyABSo0aB10IdentifieracfC_0(void *a1)
{
  id result;
  id v3;

  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithIdentifier_, a1);
  if (result)
  {
    v3 = result;

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19A33316C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  return swift_task_switch();
}

uint64_t sub_19A333188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(int *)(type metadata accessor for HKElectrocardiogramQueryDescriptor.Results.Iterator(0) + 20);
  *(_DWORD *)(v0 + 176) = v2;
  v3 = *(void **)(v1 + v2);
  if (v3)
  {
    if (objc_msgSend(v3, sel_nextObject))
    {
      sub_19A35379C();
      swift_unknownObjectRelease();
    }
    else
    {
      *(_OWORD *)(v0 + 80) = 0u;
      *(_OWORD *)(v0 + 96) = 0u;
    }
    sub_19A317DCC(v0 + 80, v0 + 48);
    if (*(_QWORD *)(v0 + 72))
    {
      sub_19A317E10((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
      sub_19A308AE4(0, &qword_1EE397B38);
      swift_dynamicCast();
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
    }
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_19A32D494(v0 + 48);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v5;
  sub_19A333F1C();
  *v5 = v0;
  v5[1] = sub_19A3332E4;
  return sub_19A3535A4();
}

uint64_t sub_19A3332E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_19A333348()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  HKElectrocardiogramVoltageMeasurement_optional v6;

  v1 = *(void **)(v0 + 112);
  if (v1)
  {
    v2 = *(int *)(v0 + 176);
    v3 = *(_QWORD *)(v0 + 152);
    v4 = objc_msgSend(*(id *)(v0 + 112), sel_voltageMeasurementEnumerator);

    *(_QWORD *)(v3 + v2) = v4;
  }
  v6 = HKElectrocardiogramQueryDescriptor.Results.Iterator.nextMeasurement()();
  return (*(uint64_t (**)(Class, __n128))(v0 + 8))(v6.value.super.isa, *(__n128 *)&v6.value._timeSinceSampleStart);
}

uint64_t sub_19A3333C4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 136))
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A333424()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 168);
  sub_19A305E34();
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A333478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t sub_19A333494()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v5;
    *v5 = v0;
    v5[1] = sub_19A33350C;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t sub_19A33350C(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
  if (*(_QWORD *)(v4 + 24))
  {
    swift_getObjectType();
    sub_19A35352C();
  }
  return swift_task_switch();
}

uint64_t sub_19A3335B8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  sub_19A305E34();
  swift_willThrowTypedImpl();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_19A33360C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
    MEMORY[0x19AEC804C](v1, -1, -1);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _AsyncBytesBuffer.nextPointer.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AsyncBytesBuffer.nextPointer.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.nextPointer.modify())()
{
  return nullsub_1;
}

uint64_t _AsyncBytesBuffer.endPointer.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _AsyncBytesBuffer.endPointer.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.endPointer.modify())()
{
  return nullsub_1;
}

uint64_t _AsyncBytesBuffer.init(capacity:readFunction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = sub_19A333D6C(a1, a2, a3);
  swift_release();
  return v3;
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

void sub_19A3336F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  if (**(_QWORD **)(v0 + 16))
  {
    type metadata accessor for _AsyncBytesBuffer.Storage();
    swift_unknownObjectRetain();
    v1 = swift_dynamicCastClassUnconditional();
    *(_QWORD *)(v0 + 24) = v1;
    if (*(_BYTE *)(v1 + 48) == 1)
    {
      swift_release();
      (*(void (**)(uint64_t))(v0 + 8))(256);
    }
    else
    {
      sub_19A353544();
      v2 = *(_QWORD *)(v0 + 16);
      v3 = *(int **)(v1 + 16);
      *(_QWORD *)(v0 + 32) = *(_QWORD *)(v1 + 24);
      v5 = *(_QWORD *)(v1 + 32);
      v4 = *(_QWORD *)(v1 + 40);
      v6 = *(_QWORD *)(v2 + 24);
      v8 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v3 + *v3);
      swift_retain();
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 40) = v7;
      *v7 = v0;
      v7[1] = sub_19A33382C;
      v8(v5, v4, v6);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_19A33382C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

void sub_19A3338A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = __OFADD__(v3, v1);
  v5 = v3 + v1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 24) = v5;
    v6 = *(_QWORD *)(v0 + 24);
    if (!v1)
    {
      *(_BYTE *)(v6 + 48) = 1;
      swift_release();
      (*(void (**)(uint64_t))(v0 + 8))(256);
      return;
    }
    v7 = *(_BYTE **)(v6 + 32);
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 16);
      v9 = &v7[*(_QWORD *)(v0 + 48)];
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 16) = v9;
      *(_BYTE *)(v0 + 64) = *v7;
      *(_QWORD *)(v8 + 8) = v7 + 1;
      swift_task_switch();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_19A333948()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_19A333980()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release();
  *(_BYTE *)(v1 + 48) = 1;
  swift_willThrow();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _AsyncBytesBuffer.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_19A3339EC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v5;
    *v5 = v0;
    v5[1] = sub_19A333A64;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
}

uint64_t sub_19A333A64(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v4 + 8))(a1 & 0x1FF);
}

uint64_t BufferedAsyncByteIterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t BufferedAsyncByteIterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
  return result;
}

uint64_t (*BufferedAsyncByteIterator.buffer.modify())()
{
  return nullsub_1;
}

uint64_t BufferedAsyncByteIterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_19A333B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_19A333B98()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char v3;
  _BYTE *v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v6;
    *v6 = v0;
    v6[1] = sub_19A333C1C;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    v3 = *v2;
    *(_QWORD *)(v1 + 8) = v2 + 1;
    v4 = *(_BYTE **)(v0 + 16);
    *v4 = v3;
    v4[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_19A333C1C(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = *(_BYTE **)(v4 + 16);
    *v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_19A333C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EE398C90 + dword_1EE398C90);
  v7 = (_QWORD *)swift_task_alloc();
  v4[4] = v7;
  *v7 = v4;
  v7[1] = sub_19A333CF4;
  return v9(a2, a3);
}

uint64_t sub_19A333CF4(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    **(_QWORD **)(v4 + 24) = v1;
  }
  else
  {
    v6 = *(_BYTE **)(v4 + 16);
    *v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_19A333D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for _AsyncBytesBuffer.Storage();
  result = swift_allocObject();
  *(_BYTE *)(result + 48) = 0;
  if (a1 < 1)
  {
    __break(1u);
  }
  else
  {
    v7 = result;
    *(_QWORD *)(result + 16) = a2;
    *(_QWORD *)(result + 24) = a3;
    swift_retain();
    v8 = swift_slowAlloc();
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v8 + a1;
    return v7;
  }
  return result;
}

uint64_t type metadata accessor for _AsyncBytesBuffer.Storage()
{
  return objc_opt_self();
}

uint64_t destroy for _AsyncBytesBuffer()
{
  return swift_unknownObjectRelease();
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer()
{
  return &type metadata for _AsyncBytesBuffer;
}

uint64_t _s9HealthKit17_AsyncBytesBufferVwcp_0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *_s9HealthKit17_AsyncBytesBufferVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t _s9HealthKit17_AsyncBytesBufferVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for BufferedAsyncByteIterator()
{
  return &type metadata for BufferedAsyncByteIterator;
}

void sub_19A333F1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397B30)
  {
    sub_19A308AE4(255, &qword_1EE396F90);
    sub_19A305E34();
    v0 = sub_19A3535B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397B30);
  }
}

uint64_t HKHealthRecordsStore.isImproveHealthRecordsDataSubmissionAllowed()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  *(_QWORD *)(v1 + 136) = swift_getObjectType();
  return swift_task_switch();
}

uint64_t sub_19A333FE0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A334074;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_19A30E43C;
  v3[3] = &block_descriptor_18;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchIsImproveHealthRecordsDataSubmissionAllowedWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_19A334074()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19A3340D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_willThrow();
  if (qword_1EE396A90 != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = sub_19A353130();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE3A2FD8);
  v3 = v1;
  v4 = v1;
  v5 = sub_19A353118();
  v6 = sub_19A3536A0();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 144);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_19A353CAC();
    *(_QWORD *)(v0 + 80) = sub_19A334B08(v11, v12, &v17);
    sub_19A353778();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v14;
    sub_19A353778();
    *v10 = v14;

    _os_log_impl(&dword_19A0E6000, v5, v6, "%s failed to fetch Improve Health Records (IHR) status: %@", (uint8_t *)v9, 0x16u);
    sub_19A32D3A0();
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v16, -1, -1);
    MEMORY[0x19AEC804C](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t HKHealthRecordsStore.shouldPromptForImproveHealthRecordsDataSubmission()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  *(_QWORD *)(v1 + 136) = swift_getObjectType();
  return swift_task_switch();
}

uint64_t sub_19A33436C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A334400;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_19A30E43C;
  v3[3] = &block_descriptor_1_0;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchShouldPromptForImproveHealthRecordsDataSubmissionWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_19A334400()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19A334460()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(v1, sel_BOOLValue);

  return (*(uint64_t (**)(id))(v0 + 8))(v2);
}

uint64_t sub_19A3344A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_willThrow();
  if (qword_1EE396A90 != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = sub_19A353130();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE3A2FD8);
  v3 = v1;
  v4 = v1;
  v5 = sub_19A353118();
  v6 = sub_19A3536A0();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 144);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_19A353CAC();
    *(_QWORD *)(v0 + 80) = sub_19A334B08(v11, v12, &v17);
    sub_19A353778();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v14;
    sub_19A353778();
    *v10 = v14;

    _os_log_impl(&dword_19A0E6000, v5, v6, "%s failed to fetch whether we should prompt for Improve Health Records (IHR): %@", (uint8_t *)v9, 0x16u);
    sub_19A32D3A0();
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v16, -1, -1);
    MEMORY[0x19AEC804C](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t HKHealthRecordsStore.currentDeviceSupportsImproveHealthRecordsDataSubmissionOption()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  *(_QWORD *)(v1 + 136) = swift_getObjectType();
  return swift_task_switch();
}

uint64_t sub_19A334740()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A3347D4;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_19A30E43C;
  v3[3] = &block_descriptor_2;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchCurrentDeviceSupportsImproveHealthRecordsDataSubmissionOptionWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_19A3347D4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_19A334834()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_willThrow();
  if (qword_1EE396A90 != -1)
    swift_once();
  v1 = *(void **)(v0 + 144);
  v2 = sub_19A353130();
  __swift_project_value_buffer(v2, (uint64_t)qword_1EE3A2FD8);
  v3 = v1;
  v4 = v1;
  v5 = sub_19A353118();
  v6 = sub_19A3536A0();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 144);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_19A353CAC();
    *(_QWORD *)(v0 + 80) = sub_19A334B08(v11, v12, &v17);
    sub_19A353778();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v14;
    sub_19A353778();
    *v10 = v14;

    _os_log_impl(&dword_19A0E6000, v5, v6, "%s failed to fetch whether current device supports prompting for Improve Health Records (IHR): %@", (uint8_t *)v9, 0x16u);
    sub_19A32D3A0();
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x19AEC804C](v16, -1, -1);
    MEMORY[0x19AEC804C](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
}

uint64_t sub_19A334A88()
{
  uint64_t v0;

  v0 = sub_19A353130();
  __swift_allocate_value_buffer(v0, qword_1EE3A2FD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE3A2FD8);
  return sub_19A353124();
}

uint64_t sub_19A334B08(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_19A334BD8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_19A32D404((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_19A32D404((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_19A334BD8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_19A353784();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_19A334D90(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_19A3538EC();
  if (!v8)
  {
    sub_19A35397C();
    __break(1u);
LABEL_17:
    result = sub_19A3539E8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_19A334D90(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_19A334E24(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_19A334FF8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_19A334FF8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_19A334E24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_19A334F98(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_19A3538A4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_19A35397C();
      __break(1u);
LABEL_10:
      v2 = sub_19A353460();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_19A3539E8();
    __break(1u);
LABEL_14:
    result = sub_19A35397C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_19A334F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_19A335140();
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_19A334FF8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_19A335140();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_19A3539E8();
  __break(1u);
  return result;
}

void sub_19A335140()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398CB8)
  {
    v0 = sub_19A353A9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398CB8);
  }
}

uint64_t CodableBox.wrappedValue.getter()
{
  sub_19A336B00();
  return swift_unknownObjectRetain();
}

uint64_t CodableBox.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CodableBox.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t CodableBox.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableBox.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[6];

  v19 = a2;
  sub_19A336C64(0, &qword_1EE398CC0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A336B08();
  sub_19A353B80();
  if (!v3)
  {
    v11 = v8;
    v18 = a3;
    sub_19A336B4C();
    sub_19A353A30();
    v12 = v7;
    v14 = v20[0];
    v13 = v20[1];
    sub_19A308AE4(0, &qword_1EE398CD8);
    sub_19A336B90();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_19A4513E0;
    *(_QWORD *)(v15 + 32) = v19;
    sub_19A3536C4();
    swift_bridgeObjectRelease();
    if (v20[3])
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_19A311AA4(v14, v13);
        v17 = v20[5];
        (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v12);
        *v18 = v17;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
    }
    else
    {
      sub_19A32D494((uint64_t)v20);
    }
    sub_19A336C20();
    swift_allocError();
    swift_willThrow();
    sub_19A311AA4(v14, v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v12);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_19A33544C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CodableBox.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_19A335464(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for CodableBox<A>);
  return DefaultEncodable.encode(to:)(a1, a2, v4);
}

uint64_t DefaultEncodable.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25[3];

  v25[2] = *(id *)MEMORY[0x1E0C80C00];
  sub_19A336C64(0, &qword_1EE398D00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v24 = v6;
  v23 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v23 - v11;
  v13 = (void *)objc_opt_self();
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  v14 = sub_19A353AB4();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  v25[0] = 0;
  v15 = objc_msgSend(v13, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v14, 1, v25);
  swift_unknownObjectRelease();
  v16 = v25[0];
  if (v15)
  {
    v17 = (void *)sub_19A352F20();
    v19 = v18;

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_19A336B08();
    sub_19A353B98();
    v25[0] = v17;
    v25[1] = v19;
    sub_19A336CC0();
    v20 = v24;
    sub_19A353A78();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v20);
    return sub_19A311AA4((uint64_t)v17, (unint64_t)v19);
  }
  else
  {
    v22 = v16;
    sub_19A352ED8();

    return swift_willThrow();
  }
}

uint64_t sub_19A3356F8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_19A336B00();
  return swift_unknownObjectRetain();
}

uint64_t sub_19A33571C(uint64_t *a1)
{
  return CodableBox.wrappedValue.setter(*a1);
}

uint64_t (*sub_19A335724(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CodableBox.wrappedValue.modify();
  return sub_19A335768;
}

uint64_t sub_19A33576C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return DefaultEncodable.encode(to:)(a1, a2, a3);
}

uint64_t static CodableBox<>.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_19A335854(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))MEMORY[0x1E0DEA568]);
}

uint64_t sub_19A33578C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static CodableBox<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t CodableBox<>.hash(into:)()
{
  return sub_19A35337C();
}

uint64_t CodableBox<>.hashValue.getter()
{
  sub_19A353B38();
  sub_19A35337C();
  return sub_19A353B68();
}

uint64_t sub_19A33582C()
{
  return CodableBox<>.hashValue.getter();
}

uint64_t sub_19A335834()
{
  return CodableBox<>.hash(into:)();
}

uint64_t sub_19A33583C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3369C8(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))CodableBox<>.hash(into:));
}

uint64_t static CodableBox<>.< infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_19A335854(a1, a2, a3, a4, (uint64_t (*)(uint64_t *, uint64_t *))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_19A335854(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t *))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *a1;
  v7 = *a2;
  v8 = v5;
  return a5(&v8, &v7) & 1;
}

uint64_t sub_19A335894(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static CodableBox<>.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t OptionalCodableBox.wrappedValue.getter()
{
  sub_19A336B00();
  return swift_unknownObjectRetain();
}

uint64_t sub_19A3358C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  type metadata accessor for OptionalCodableBox(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  *a4 = sub_19A336B00();
  return swift_unknownObjectRetain();
}

uint64_t sub_19A335908()
{
  uint64_t v0;

  v0 = swift_unknownObjectRetain();
  return OptionalCodableBox.wrappedValue.setter(v0);
}

uint64_t OptionalCodableBox.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_unknownObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*OptionalCodableBox.wrappedValue.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  swift_unknownObjectRetain();
  return sub_19A335990;
}

uint64_t sub_19A335990(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v3 = v2;
    return swift_unknownObjectRelease();
  }
  else
  {
    result = swift_unknownObjectRelease();
    *v3 = v2;
  }
  return result;
}

uint64_t OptionalCodableBox.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_19A3359F8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x42656C6261646F63 && a2 == 0xEA0000000000786FLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_19A353AC0();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_19A335A90()
{
  return 0x42656C6261646F63;
}

uint64_t sub_19A335AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_19A3359F8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_19A335AD8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_19A328960();
  *a1 = result & 1;
  return result;
}

uint64_t sub_19A335B04(uint64_t a1)
{
  MEMORY[0x19AEC7FB0](&unk_19A451B48, a1);
  return sub_19A353C94();
}

uint64_t sub_19A335B38(uint64_t a1)
{
  MEMORY[0x19AEC7FB0](&unk_19A451B48, a1);
  return sub_19A353CA0();
}

uint64_t OptionalCodableBox.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for OptionalCodableBox.CodingKeys(255, v16, a3, a4);
  MEMORY[0x19AEC7FB0](&unk_19A451B48, v6);
  v7 = sub_19A353A84();
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - v8;
  v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B98();
  v18 = v10;
  v13 = type metadata accessor for CodableBox(0, v16, v11, v12);
  MEMORY[0x19AEC7FB0](&protocol conformance descriptor for CodableBox<A>, v13);
  sub_19A353A60();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v9, v7);
}

uint64_t OptionalCodableBox.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a5;
  v18 = a2;
  v7 = type metadata accessor for OptionalCodableBox.CodingKeys(255, a2, a3, a4);
  MEMORY[0x19AEC7FB0](&unk_19A451B48, v7);
  v8 = sub_19A353A48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B80();
  if (!v5)
  {
    v14 = v17;
    v15 = type metadata accessor for CodableBox(0, v18, v12, v13);
    MEMORY[0x19AEC7FB0](&protocol conformance descriptor for CodableBox<A>, v15);
    sub_19A353A18();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *v14 = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_19A335E14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return OptionalCodableBox.init(from:)(a1, *(_QWORD *)(a2 + 16), a3, a4, a5);
}

uint64_t sub_19A335E2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OptionalCodableBox.encode(to:)(a1, a2, a3, a4);
}

BOOL static OptionalCodableBox<>.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;

  v2 = *a2;
  if (!*a1)
  {
    if (!v2)
      return 1;
    goto LABEL_8;
  }
  if (!v2)
  {
    swift_unknownObjectRetain();
LABEL_8:
    swift_unknownObjectRelease();
    return 0;
  }
  swift_unknownObjectRetain_n();
  v3 = sub_19A3533F4();
  swift_unknownObjectRelease_n();
  return (v3 & 1) != 0;
}

BOOL sub_19A335EE4(_QWORD *a1, uint64_t *a2)
{
  return static OptionalCodableBox<>.== infix(_:_:)(a1, a2);
}

uint64_t OptionalCodableBox<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = *v4;
  v6 = type metadata accessor for CodableBox(255, *(_QWORD *)(a2 + 16), a3, a4);
  sub_19A353760();
  v8[0] = a3;
  MEMORY[0x19AEC7FB0](&protocol conformance descriptor for <> CodableBox<A>, v6, v8);
  return sub_19A35376C();
}

uint64_t OptionalCodableBox<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD v7[10];

  v7[9] = *v2;
  sub_19A353B38();
  OptionalCodableBox<>.hash(into:)((uint64_t)v7, a1, a2, v5);
  return sub_19A353B68();
}

uint64_t sub_19A335FD4(uint64_t a1, uint64_t a2)
{
  return OptionalCodableBox<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_19A335FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OptionalCodableBox<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_19A335FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3369C8(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))OptionalCodableBox<>.hash(into:));
}

uint64_t static OptionalCodableBox<>.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  char v3;

  if (*a1)
    v2 = *a2 == 0;
  else
    v2 = 1;
  if (v2)
    v3 = 0;
  else
    v3 = sub_19A3533A0();
  return v3 & 1;
}

uint64_t sub_19A336044(_QWORD *a1, _QWORD *a2)
{
  return static OptionalCodableBox<>.< infix(_:_:)(a1, a2);
}

uint64_t CodableBoxArray.wrappedValue.getter()
{
  sub_19A336B00();
  return swift_bridgeObjectRetain();
}

uint64_t CodableBoxArray.wrappedValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CodableBoxArray.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t CodableBoxArray.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableBoxArray.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[6];

  v24 = a2;
  sub_19A336C64(0, &qword_1EE398CC0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A336B08();
  sub_19A353B80();
  if (!v3)
  {
    v11 = v8;
    v12 = v24;
    v23 = a3;
    sub_19A336B4C();
    sub_19A353A30();
    v22 = v10;
    v13 = v25[0];
    v14 = v25[1];
    sub_19A308AE4(0, &qword_1EE398CD8);
    sub_19A336B90();
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_19A44FF00;
    *(_QWORD *)(v15 + 32) = sub_19A308AE4(0, &qword_1EE398D10);
    *(_QWORD *)(v15 + 40) = v12;
    v21 = v13;
    sub_19A3536C4();
    swift_bridgeObjectRelease();
    if (v25[3])
    {
      sub_19A3534FC();
      v17 = swift_dynamicCast();
      v18 = v21;
      v19 = v22;
      if ((v17 & 1) != 0)
      {
        sub_19A311AA4(v21, v14);
        v20 = v25[5];
        (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v7);
        *v23 = v20;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      }
    }
    else
    {
      sub_19A32D494((uint64_t)v25);
      v18 = v21;
      v19 = v22;
    }
    sub_19A336C20();
    swift_allocError();
    swift_willThrow();
    sub_19A311AA4(v18, v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v7);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_19A33632C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CodableBoxArray.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_19A336344(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for CodableBoxArray<A>);
  return DefaultEncodable.encode(to:)(a1, a2, v4);
}

uint64_t sub_19A336390@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_19A336B00();
  return swift_bridgeObjectRetain();
}

uint64_t sub_19A3363B4(uint64_t *a1)
{
  return CodableBoxArray.wrappedValue.setter(*a1);
}

uint64_t (*sub_19A3363BC(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CodableBoxArray.wrappedValue.modify();
  return sub_19A335768;
}

uint64_t static CodableBoxArray<>.== infix(_:_:)()
{
  return sub_19A353520();
}

uint64_t sub_19A33640C()
{
  return static CodableBoxArray<>.== infix(_:_:)();
}

uint64_t CodableBoxArray<>.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_19A353508();
  return swift_bridgeObjectRelease();
}

uint64_t CodableBoxArray<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_19A336948(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))CodableBoxArray<>.hash(into:));
}

uint64_t sub_19A336474(uint64_t a1, uint64_t a2)
{
  return CodableBoxArray<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_19A33647C()
{
  return CodableBoxArray<>.hash(into:)();
}

uint64_t sub_19A336484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3369C8(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))CodableBoxArray<>.hash(into:));
}

uint64_t (*CodableBoxDictionary.wrappedValue.modify())()
{
  return nullsub_1;
}

uint64_t CodableBoxDictionary.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableBoxDictionary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v29 = a3;
  v30 = a4;
  v28 = a2;
  sub_19A336C64(0, &qword_1EE398CC0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v23 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A336B08();
  sub_19A353B80();
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = a5;
  v26 = a1;
  v27 = v10;
  v14 = v29;
  sub_19A336B4C();
  sub_19A353A30();
  v15 = v9;
  v24 = v12;
  v17 = v31[0];
  v16 = v31[1];
  sub_19A308AE4(0, &qword_1EE398CD8);
  sub_19A336B90();
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_19A44FF10;
  *(_QWORD *)(v18 + 32) = sub_19A308AE4(0, &qword_1EE398D18);
  *(_QWORD *)(v18 + 40) = sub_19A308AE4(0, qword_1EE398D20);
  *(_QWORD *)(v18 + 48) = v14;
  sub_19A3536C4();
  v23 = v16;
  swift_bridgeObjectRelease();
  if (!v31[3])
  {
    sub_19A32D494((uint64_t)v31);
    v20 = (uint64_t)v26;
    v21 = v27;
    goto LABEL_4;
  }
  sub_19A353334();
  v19 = swift_dynamicCast();
  v20 = (uint64_t)v26;
  v21 = v27;
  if ((v19 & 1) == 0)
  {
LABEL_4:
    swift_getTupleTypeMetadata2();
    sub_19A3534F0();
    sub_19A353328();
    sub_19A336C20();
    swift_allocError();
    swift_willThrow();
    sub_19A311AA4(v17, v23);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v15);
    __swift_destroy_boxed_opaque_existential_1(v20);
    return swift_bridgeObjectRelease();
  }
  sub_19A311AA4(v17, v23);
  v22 = v31[5];
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v15);
  *v25 = v22;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t sub_19A3367D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  return CodableBoxDictionary.init(from:)(a1, a2[2], a2[3], a2[6], a3);
}

uint64_t sub_19A3367F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x19AEC7FB0](&protocol conformance descriptor for CodableBoxDictionary<A, B>);
  return DefaultEncodable.encode(to:)(a1, a2, v4);
}

uint64_t (*sub_19A336840(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CodableBoxDictionary.wrappedValue.modify();
  return sub_19A335768;
}

void sub_19A336884(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t static CodableBoxDictionary<>.== infix(_:_:)()
{
  return sub_19A35334C();
}

uint64_t sub_19A3368C4()
{
  return static CodableBoxDictionary<>.== infix(_:_:)();
}

uint64_t CodableBoxDictionary<>.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_19A353340();
  return swift_bridgeObjectRelease();
}

uint64_t CodableBoxDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_19A336948(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))CodableBoxDictionary<>.hash(into:));
}

uint64_t sub_19A336948(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t))
{
  _QWORD *v3;
  _QWORD v8[10];

  v8[9] = *v3;
  sub_19A353B38();
  a3(v8, a1, a2);
  return sub_19A353B68();
}

uint64_t sub_19A3369AC(uint64_t a1, uint64_t a2)
{
  return CodableBoxDictionary<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_19A3369B4()
{
  return CodableBoxDictionary<>.hash(into:)();
}

uint64_t sub_19A3369BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19A3369C8(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))CodableBoxDictionary<>.hash(into:));
}

uint64_t sub_19A3369C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6;
  _BYTE v8[72];

  v6 = *(_QWORD *)(a3 - 8);
  sub_19A353B38();
  a4(v8, a2, v6);
  return sub_19A353B68();
}

uint64_t sub_19A336A1C()
{
  return 1635017060;
}

uint64_t sub_19A336A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_19A353AC0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_19A336AB0()
{
  sub_19A336B08();
  return sub_19A353C94();
}

uint64_t sub_19A336AD8()
{
  sub_19A336B08();
  return sub_19A353CA0();
}

uint64_t sub_19A336B00()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

unint64_t sub_19A336B08()
{
  unint64_t result;

  result = qword_1EE398CC8;
  if (!qword_1EE398CC8)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451BD8, &type metadata for CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE398CC8);
  }
  return result;
}

unint64_t sub_19A336B4C()
{
  unint64_t result;

  result = qword_1EE398CD0;
  if (!qword_1EE398CD0)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE398CD0);
  }
  return result;
}

void sub_19A336B90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE398CE0)
  {
    sub_19A336BE4();
    v0 = sub_19A353A9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE398CE0);
  }
}

unint64_t sub_19A336BE4()
{
  unint64_t result;

  result = qword_1EE398CE8;
  if (!qword_1EE398CE8)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE398CE8);
  }
  return result;
}

unint64_t sub_19A336C20()
{
  unint64_t result;

  result = qword_1EE398CF8;
  if (!qword_1EE398CF8)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451B98, &type metadata for CodableBoxError);
    atomic_store(result, (unint64_t *)&qword_1EE398CF8);
  }
  return result;
}

void sub_19A336C64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_19A336B08();
    v7 = a3(a1, &type metadata for CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_19A336CC0()
{
  unint64_t result;

  result = qword_1EE398D08;
  if (!qword_1EE398D08)
  {
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EE398D08);
  }
  return result;
}

uint64_t type metadata accessor for OptionalCodableBox.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalCodableBox.CodingKeys);
}

uint64_t type metadata accessor for CodableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBox);
}

uint64_t type metadata accessor for OptionalCodableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalCodableBox);
}

uint64_t sub_19A336D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x19AEC7FB0](&protocol conformance descriptor for <> CodableBox<A>, a1, &v4);
}

uint64_t sub_19A336D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x19AEC7FB0](&protocol conformance descriptor for <> OptionalCodableBox<A>, a1, &v4);
}

uint64_t sub_19A336D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x19AEC7FB0](&protocol conformance descriptor for <> CodableBoxArray<A>, a1, &v4);
}

uint64_t sub_19A336DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 8);
  return MEMORY[0x19AEC7FB0](&protocol conformance descriptor for <> CodableBoxDictionary<A, B>, a1, &v4);
}

uint64_t sub_19A336E10()
{
  return 8;
}

_QWORD *sub_19A336E1C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_19A336E28(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *sub_19A336E54(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_19A336E98(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_19A336EC8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_19A336F24(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for CodableBoxArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBoxArray);
}

uint64_t sub_19A336F80()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for CodableBoxDictionary()
{
  JUMPOUT(0x19AEC7F50);
}

uint64_t dispatch thunk of DefaultEncodable.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DefaultEncodable.wrappedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DefaultEncodable.wrappedValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of DefaultEncodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_19A336FC4()
{
  return swift_allocateGenericValueMetadata();
}

ValueMetadata *type metadata accessor for CodableBoxError()
{
  return &type metadata for CodableBoxError;
}

uint64_t _s9HealthKit15CodableBoxErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_19A337024 + 4 * byte_19A4513F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_19A337044 + 4 * byte_19A4513F5[v4]))();
}

_BYTE *sub_19A337024(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_19A337044(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A33704C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A337054(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_19A33705C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_19A337064(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CodingKeys()
{
  return &type metadata for CodingKeys;
}

unint64_t sub_19A337084()
{
  unint64_t result;

  result = qword_1EE399038;
  if (!qword_1EE399038)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451A00, &type metadata for CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE399038);
  }
  return result;
}

unint64_t sub_19A3370CC()
{
  unint64_t result;

  result = qword_1EE399040;
  if (!qword_1EE399040)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451A68, &type metadata for CodableBoxError);
    atomic_store(result, (unint64_t *)&qword_1EE399040);
  }
  return result;
}

void sub_19A337110()
{
  JUMPOUT(0x19AEC7FB0);
}

void sub_19A337120()
{
  JUMPOUT(0x19AEC7FB0);
}

void sub_19A337130()
{
  JUMPOUT(0x19AEC7FB0);
}

unint64_t sub_19A337144()
{
  unint64_t result;

  result = qword_1EE399048;
  if (!qword_1EE399048)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451970, &type metadata for CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE399048);
  }
  return result;
}

unint64_t sub_19A33718C()
{
  unint64_t result;

  result = qword_1EE399050;
  if (!qword_1EE399050)
  {
    result = MEMORY[0x19AEC7FB0](&unk_19A451998, &type metadata for CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EE399050);
  }
  return result;
}

uint64_t sub_19A3371F0()
{
  uint64_t v0;

  v0 = sub_19A353130();
  __swift_allocate_value_buffer(v0, qword_1EE3A2FF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EE3A2FF0);
  return sub_19A353124();
}

unint64_t sub_19A337268(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19A33DCA4();
  v2 = sub_19A3539D0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19A30B600(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_19A33DC3C);
    v7 = v15;
    v8 = v16;
    result = sub_19A33A6D0(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_19A317E10(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_19A337398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = sub_19A352ECC();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t sub_19A3373F0()
{
  sub_19A353B38();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_19A35337C();
  return sub_19A353B68();
}

uint64_t sub_19A33745C()
{
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  return sub_19A35337C();
}

uint64_t sub_19A3374B4()
{
  sub_19A353B38();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  sub_19A35337C();
  return sub_19A353B68();
}

NSObject *sub_19A337520()
{
  char *v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper____lazy_storage____queue;
  v2 = *(void **)&v0[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper____lazy_storage____queue];
  if (v2)
  {
    v3 = *(NSObject **)&v0[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper____lazy_storage____queue];
  }
  else
  {
    type metadata accessor for DatabaseAccessibilityAssertionStoreKeeper();
    v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_description);
    if (!v4)
    {
      sub_19A353430();
      v4 = (id)sub_19A353400();
      swift_bridgeObjectRelease();
    }
    v5 = HKCreateSerialDispatchQueue(v0, v4);

    v6 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

char *DatabaseAccessibilityAssertionStoreKeeper.__allocating_init(healthStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DatabaseAccessibilityAssertionStoreKeeper.init(healthStore:)(a1);
}

char *DatabaseAccessibilityAssertionStoreKeeper.init(healthStore:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  int *v13;
  _QWORD v15[6];
  objc_super v16;

  v3 = OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertionsLock;
  sub_19A3377D4();
  v4 = swift_allocObject();
  *(_QWORD *)&v1[v3] = v4;
  v5 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertions] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequestsTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequests] = v5;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthdRequests] = v5;
  *(_DWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__didBecomeAvailableNotificationToken] = -1;
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper____lazy_storage____queue] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthStore] = a1;
  v16.receiver = v1;
  v16.super_class = (Class)type metadata accessor for DatabaseAccessibilityAssertionStoreKeeper();
  v6 = a1;
  v7 = objc_msgSendSuper2(&v16, sel_init);
  v8 = sub_19A337520();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v7;
  v15[4] = sub_19A337878;
  v15[5] = v9;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = sub_19A337898;
  v15[3] = &block_descriptor_19;
  v10 = _Block_copy(v15);
  v11 = (char *)v7;
  v12 = v8;
  swift_release();
  v13 = (int *)&v11[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__didBecomeAvailableNotificationToken];
  swift_beginAccess();
  notify_register_dispatch("HKProtectedHealthDatabaseDidBecomeAvailableNotification", v13, v12, v10);
  swift_endAccess();

  _Block_release(v10);
  return v11;
}

void sub_19A3377D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE3990C8)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_19A3538E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE3990C8);
  }
}

uint64_t type metadata accessor for DatabaseAccessibilityAssertionStoreKeeper()
{
  return objc_opt_self();
}

uint64_t sub_19A337854()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_19A337878()
{
  sub_19A338308();
}

uint64_t sub_19A337898(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

id DatabaseAccessibilityAssertionStoreKeeper.__deallocating_deinit()
{
  char *v0;
  int *v1;
  objc_super v3;

  v1 = (int *)&v0[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__didBecomeAvailableNotificationToken];
  swift_beginAccess();
  notify_cancel(*v1);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DatabaseAccessibilityAssertionStoreKeeper();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_19A337A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v11 = sub_19A353148();
  v25 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_19A353160();
  v14 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_19A337520();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v5;
  *(_QWORD *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a4;
  *(double *)(v18 + 40) = a5;
  *(_QWORD *)(v18 + 48) = a1;
  *(_QWORD *)(v18 + 56) = a2;
  aBlock[4] = sub_19A337F50;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A338214;
  aBlock[3] = &block_descriptor_6;
  v19 = _Block_copy(aBlock);
  v20 = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_19A353154();
  v26 = MEMORY[0x1E0DEE9D8];
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_19A306A54(&qword_1EE399108, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_19A30FA98(0, &qword_1EE399110, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_19A338218(&qword_1EE399118, &qword_1EE399110, v21);
  sub_19A3537B4();
  MEMORY[0x19AEC6840](0, v16, v13, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v24);
  return swift_release();
}

void sub_19A337C9C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(void *, void *);
  uint64_t *v22;
  uint64_t (**v23)(void *, void *);
  void *v24;
  objc_class *v25;
  char *v26;
  id v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  objc_super v33;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v13 = MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v32 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v32 - v19;
  v21 = (uint64_t (*)(void *, void *))swift_allocObject();
  *((_QWORD *)v21 + 2) = a1;
  *((_QWORD *)v21 + 3) = a2;
  *((_QWORD *)v21 + 4) = a3;
  if (a6 <= 0.0)
  {
    v24 = *(void **)&a1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthStore];
    v25 = (objc_class *)type metadata accessor for DatabaseAccessibilityAssertionStore();
    v26 = (char *)objc_allocWithZone(v25);
    *(_QWORD *)&v26[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider] = 0;
    *(_QWORD *)&v26[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore] = v24;
    v33.receiver = v26;
    v33.super_class = v25;
    v27 = v24;
    v28 = a1;
    swift_retain();
    v29 = v27;
    v30 = objc_msgSendSuper2(&v33, sel_init);

    v31 = sub_19A32C020();
    objc_msgSend(v31, sel_setShouldRetryOnInterruption_, 1);

    sub_19A32C3A0(a4, a5, (uint64_t)sub_19A33E42C, (uint64_t)v21);
    swift_release();

  }
  else
  {
    a1;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_19A352F80();
    swift_retain();
    sub_19A353004();
    v22 = (uint64_t *)&v20[*(int *)(DatabaseAccessibilityAssertionsRecord + 20)];
    *v22 = a4;
    v22[1] = a5;
    v23 = (uint64_t (**)(void *, void *))&v20[*(int *)(DatabaseAccessibilityAssertionsRecord + 28)];
    *v23 = sub_19A33E42C;
    v23[1] = v21;
    sub_19A30B600((uint64_t)v20, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    swift_beginAccess();
    sub_19A33A838((uint64_t)v18, (uint64_t)v15);
    sub_19A33D880((uint64_t)v18);
    swift_endAccess();
    sub_19A338308();
    swift_release();
    sub_19A33D880((uint64_t)v20);
  }
}

uint64_t sub_19A337F1C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_19A337F50()
{
  uint64_t v0;

  sub_19A337C9C(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(double *)(v0 + 40));
}

uint64_t sub_19A337F64(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void *, void *))
{
  os_unfair_lock_s *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23[3];
  uint64_t v24;

  if (a1)
  {
    v8 = (os_unfair_lock_s *)(*(_QWORD *)(a3
                                        + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertionsLock)
                            + 16);
    v9 = a1;
    os_unfair_lock_lock(v8);
    objc_msgSend(v9, sel_configureAssertion_, *(_QWORD *)(a3 + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthStore));
    swift_beginAccess();
    v10 = v9;
    sub_19A33AA54(&v24, v10, &qword_1EE399120, (uint64_t)off_1E37E49E8, &qword_1EE399270, &qword_1EE399128);
    v11 = (void *)v24;
    swift_endAccess();

    os_unfair_lock_unlock(v8);
  }
  else
  {
    if (qword_1EE396A98 != -1)
      swift_once();
    v12 = sub_19A353130();
    __swift_project_value_buffer(v12, (uint64_t)qword_1EE3A2FF0);
    v13 = a2;
    v14 = a2;
    v15 = sub_19A353118();
    v16 = sub_19A3536A0();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      *(_DWORD *)v17 = 136315138;
      v23[0] = v18;
      v24 = (uint64_t)a2;
      v19 = a2;
      sub_19A30FA98(0, &qword_1EE399278, (uint64_t (*)(uint64_t))sub_19A305E34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v20 = sub_19A35343C();
      v24 = sub_19A334B08(v20, v21, v23);
      sub_19A353778();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_19A0E6000, v15, v16, "Received a nil database accessibility assertion: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x19AEC804C](v18, -1, -1);
      MEMORY[0x19AEC804C](v17, -1, -1);
    }
    else
    {

    }
  }
  return a4(a1, a2);
}

uint64_t sub_19A338218(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_19A30FA98(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0DEAF38], v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_19A338308()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject **v15;
  char v16;
  void *v17;
  objc_class *v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  _QWORD *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t aBlock;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  objc_super v84;

  v1 = v0;
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v75 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  v2 = MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v66 = (uint64_t)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v64 - v5;
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v64 - v8;
  v67 = v10;
  MEMORY[0x1E0C80A78](v7);
  v71 = (uint64_t)&v64 - v11;
  v12 = sub_19A353184();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (NSObject **)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v15 = sub_19A337520();
  (*(void (**)(NSObject **, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF740], v12);
  v16 = sub_19A35319C();
  (*(void (**)(NSObject **, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
    goto LABEL_35;
  v17 = *(void **)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthStore];
  v18 = (objc_class *)type metadata accessor for DatabaseAccessibilityAssertionStore();
  v19 = (char *)objc_allocWithZone(v18);
  *(_QWORD *)&v19[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider] = 0;
  *(_QWORD *)&v19[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore] = v17;
  v84.receiver = v19;
  v84.super_class = v18;
  v20 = v17;
  v21 = objc_msgSendSuper2(&v84, sel_init);

  v22 = sub_19A32C020();
  objc_msgSend(v22, sel_setShouldRetryOnInterruption_, 1);

  v70 = v21;
  v23 = &v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequests];
  swift_beginAccess();
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(*(_QWORD *)v23 + 56);
  v64 = *(_QWORD *)v23 + 56;
  v26 = 1 << *(_BYTE *)(v24 + 32);
  if (v26 < 64)
    v27 = ~(-1 << v26);
  else
    v27 = -1;
  v28 = v27 & v25;
  v69 = v1;
  v29 = &v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthdRequests];
  v72 = v24;
  swift_bridgeObjectRetain();
  v74 = v29;
  swift_beginAccess();
  v30 = 0;
  v65 = (unint64_t)(v26 + 63) >> 6;
  while (1)
  {
    if (v28)
    {
      v76 = (v28 - 1) & v28;
      v77 = v30;
      v51 = __clz(__rbit64(v28)) | (v30 << 6);
      goto LABEL_25;
    }
    v52 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v52 >= v65)
      goto LABEL_32;
    v53 = *(_QWORD *)(v64 + 8 * v52);
    v54 = v30 + 1;
    if (!v53)
    {
      v54 = v30 + 2;
      if (v30 + 2 >= v65)
        goto LABEL_32;
      v53 = *(_QWORD *)(v64 + 8 * v54);
      if (!v53)
      {
        v54 = v30 + 3;
        if (v30 + 3 >= v65)
          goto LABEL_32;
        v53 = *(_QWORD *)(v64 + 8 * v54);
        if (!v53)
          break;
      }
    }
LABEL_24:
    v76 = (v53 - 1) & v53;
    v77 = v54;
    v51 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_25:
    v56 = *(_QWORD *)(v75 + 72);
    v57 = v71;
    sub_19A30B600(*(_QWORD *)(v72 + 48) + v56 * v51, v71, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    sub_19A33D83C(v57, (uint64_t)v9);
    v58 = *(_QWORD *)v74;
    if (!*(_QWORD *)(*(_QWORD *)v74 + 16))
      goto LABEL_7;
    sub_19A353B38();
    sub_19A353010();
    sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    swift_bridgeObjectRetain();
    sub_19A35337C();
    v59 = sub_19A353B68();
    v60 = -1 << *(_BYTE *)(v58 + 32);
    v61 = v59 & ~v60;
    if (((*(_QWORD *)(v58 + 56 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
LABEL_7:
      v31 = v66;
      sub_19A30B600((uint64_t)v9, v66, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      swift_beginAccess();
      sub_19A33A838((uint64_t)v6, v31);
      sub_19A33D880((uint64_t)v6);
      swift_endAccess();
      v32 = &v9[*(int *)(DatabaseAccessibilityAssertionsRecord + 20)];
      v33 = *((_QWORD *)v32 + 1);
      v73 = *(_QWORD *)v32;
      sub_19A30B600((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      v34 = (*(unsigned __int8 *)(v75 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      v35 = swift_allocObject();
      v36 = v69;
      *(_QWORD *)(v35 + 16) = v69;
      sub_19A33D83C((uint64_t)v6, v35 + v34);
      swift_bridgeObjectRetain();
      v37 = v36;
      v38 = v70;
      v39 = sub_19A32C020();
      v40 = (_QWORD *)swift_allocObject();
      v40[2] = sub_19A33DA00;
      v40[3] = v35;
      v40[4] = v38;
      v82 = sub_19A32C70C;
      v83 = v40;
      aBlock = MEMORY[0x1E0C809B0];
      v79 = 1107296256;
      v80 = sub_19A32C718;
      v81 = &block_descriptor_42;
      v41 = _Block_copy(&aBlock);
      v42 = v38;
      swift_retain();
      swift_release();
      v43 = objc_msgSend(v39, sel_clientQueueObjectHandlerWithCompletion_, v41);
      _Block_release(v41);

      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 16) = v43;
      v45 = sub_19A32C020();
      v46 = (_QWORD *)swift_allocObject();
      v46[2] = v73;
      v46[3] = v33;
      v46[4] = sub_19A32C8E8;
      v46[5] = v44;
      v82 = sub_19A32CA8C;
      v83 = v46;
      v47 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v79 = 1107296256;
      v80 = sub_19A32CB18;
      v81 = &block_descriptor_51;
      v48 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      v49 = swift_allocObject();
      *(_QWORD *)(v49 + 16) = sub_19A32C8E8;
      *(_QWORD *)(v49 + 24) = v44;
      v82 = sub_19A33DAF0;
      v83 = (_QWORD *)v49;
      aBlock = v47;
      v79 = 1107296256;
      v80 = sub_19A32CC28;
      v81 = &block_descriptor_57;
      v50 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v45, sel_fetchProxyWithHandler_errorHandler_, v48, v50);
      _Block_release(v50);
      _Block_release(v48);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      goto LABEL_8;
    }
    v62 = ~v60;
    while (1)
    {
      sub_19A30B600(*(_QWORD *)(v58 + 48) + v61 * v56, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      v63 = sub_19A352FEC();
      sub_19A33D880((uint64_t)v6);
      if ((v63 & 1) != 0)
        break;
      v61 = (v61 + 1) & v62;
      if (((*(_QWORD *)(v58 + 56 + ((v61 >> 3) & 0xFFFFFFFFFFFFF8)) >> v61) & 1) == 0)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
LABEL_8:
    sub_19A33D880((uint64_t)v9);
    v28 = v76;
    v30 = v77;
  }
  v55 = v30 + 4;
  if (v30 + 4 >= v65)
  {
LABEL_32:
    swift_release();
    sub_19A339244();

    return;
  }
  v53 = *(_QWORD *)(v64 + 8 * v55);
  if (v53)
  {
    v54 = v30 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v54 = v55 + 1;
    if (__OFADD__(v55, 1))
      break;
    if (v54 >= v65)
      goto LABEL_32;
    v53 = *(_QWORD *)(v64 + 8 * v54);
    ++v55;
    if (v53)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

uint64_t sub_19A338B38(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  uint64_t (*v25)(uint64_t);
  NSObject *v26;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];

  v28 = a1;
  v7 = sub_19A353148();
  v32 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_19A353160();
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v14 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_19A337520();
  sub_19A30B600(a4, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a3;
  sub_19A33D83C((uint64_t)v16, v19 + v17);
  *(_QWORD *)(v19 + v18) = a2;
  v20 = v28;
  *(_QWORD *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8)) = v28;
  aBlock[4] = sub_19A33DBEC;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A338214;
  aBlock[3] = &block_descriptor_63;
  v21 = _Block_copy(aBlock);
  v22 = a3;
  v23 = a2;
  v24 = v20;
  sub_19A353154();
  v33 = MEMORY[0x1E0DEE9D8];
  v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_19A306A54(&qword_1EE399108, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_19A30FA98(0, &qword_1EE399110, v25, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_19A338218(&qword_1EE399118, &qword_1EE399110, v25);
  sub_19A3537B4();
  v26 = v29;
  MEMORY[0x19AEC6840](0, v12, v9, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

void sub_19A338DD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  char v17;
  void (*v18)(uint64_t, void *);
  void (*v19)(_QWORD, id);
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;

  v29 = a4;
  v6 = sub_19A352FD4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A30FA98(0, &qword_1EE399218, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v28 - v11;
  swift_beginAccess();
  sub_19A33CCE8((uint64_t)v12);
  sub_19A323268((uint64_t)v12, &qword_1EE399218, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
  swift_endAccess();
  if (a3
    && (v31 = a3,
        v13 = a3,
        sub_19A305E34(),
        type metadata accessor for HKError(0),
        (swift_dynamicCast() & 1) != 0))
  {
    v14 = v30;
    sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
    sub_19A352E90();

    v15 = v31;
    DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
    sub_19A352FB0();
    sub_19A306A54((unint64_t *)&qword_1EE399230, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v17 = sub_19A3533A0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if ((v17 & 1) != 0)
    {
      if (v15 != (void *)1 && v15 != (void *)6)
      {
        swift_beginAccess();
        sub_19A33CCE8((uint64_t)v12);
        sub_19A323268((uint64_t)v12, &qword_1EE399218, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
        swift_endAccess();
        (*(void (**)(_QWORD, void *))(a2 + *(int *)(DatabaseAccessibilityAssertionsRecord + 28)))(0, a3);
      }
    }
    else
    {
      swift_beginAccess();
      sub_19A33CCE8((uint64_t)v12);
      sub_19A323268((uint64_t)v12, &qword_1EE399218, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      swift_endAccess();
      v19 = *(void (**)(_QWORD, id))(a2 + *(int *)(DatabaseAccessibilityAssertionsRecord + 28));
      sub_19A353430();
      sub_19A30FA98(0, &qword_1EE399238, (uint64_t (*)(uint64_t))sub_19A33DC3C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_19A4513E0;
      v21 = sub_19A353430();
      v22 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(inited + 32) = v21;
      *(_QWORD *)(inited + 40) = v23;
      *(_QWORD *)(inited + 72) = v22;
      *(_QWORD *)(inited + 48) = 0x2074736575716572;
      *(_QWORD *)(inited + 56) = 0xEF74756F656D6974;
      sub_19A337268(inited);
      v24 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v25 = (void *)sub_19A353400();
      swift_bridgeObjectRelease();
      v26 = (void *)sub_19A35331C();
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 103, v26);

      v19(0, v27);
    }
  }
  else
  {
    swift_beginAccess();
    sub_19A33CCE8((uint64_t)v12);
    sub_19A323268((uint64_t)v12, &qword_1EE399218, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    swift_endAccess();
    v18 = *(void (**)(uint64_t, void *))(a2
                                                 + *(int *)(type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord()
                                                          + 28));
    v18(v29, a3);
  }
}

uint64_t sub_19A339244()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject **v35;
  char v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  char *v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t ObjectType;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(_QWORD *, uint64_t);
  uint64_t v80;
  void *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v118;
  _QWORD aBlock[6];

  v1 = v0;
  v103 = sub_19A353148();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_19A353160();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v98 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_19A35313C();
  v96 = *(_QWORD *)(v97 - 8);
  v4 = MEMORY[0x1E0C80A78](v97);
  v95 = (uint64_t *)((char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v94 = (char *)&v85 - v6;
  v93 = sub_19A353178();
  v91 = *(_QWORD *)(v93 - 8);
  v7 = MEMORY[0x1E0C80A78](v93);
  v90 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v92 = (char *)&v85 - v9;
  v89 = sub_19A3536DC();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v87 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_19A352FD4();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v118 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v104 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v114 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  v14 = MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v85 - v18;
  MEMORY[0x1E0C80A78](v17);
  v113 = (uint64_t)&v85 - v20;
  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v22 = MEMORY[0x1E0C80A78](v21);
  v111 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v107 = (uint64_t)&v85 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v105 = (uint64_t)&v85 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v85 - v29;
  MEMORY[0x1E0C80A78](v28);
  v116 = (uint64_t)&v85 - v31;
  v32 = sub_19A353184();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (NSObject **)((char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v35 = sub_19A337520();
  (*(void (**)(NSObject **, _QWORD, uint64_t))(v33 + 104))(v35, *MEMORY[0x1E0DEF740], v32);
  v36 = sub_19A35319C();
  result = (*(uint64_t (**)(NSObject **, uint64_t))(v33 + 8))(v35, v32);
  if ((v36 & 1) != 0)
  {
    v86 = OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequestsTimer;
    if (*(_QWORD *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequestsTimer])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_19A353700();
      swift_unknownObjectRelease();
    }
    v38 = v118;
    v39 = v116;
    v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56);
    v110(v116, 1, 1, v11);
    v106 = v1;
    v40 = (uint64_t *)&v1[OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__pendingRequests];
    swift_beginAccess();
    v41 = *v40;
    v42 = *(_QWORD *)(*v40 + 56);
    v108 = *v40 + 56;
    v43 = 1 << *(_BYTE *)(v41 + 32);
    v44 = v39;
    v45 = -1;
    if (v43 < 64)
      v45 = ~(-1 << v43);
    v46 = v45 & v42;
    v109 = (unint64_t)(v43 + 63) >> 6;
    v115 = v41;
    result = swift_bridgeObjectRetain();
    v47 = 0;
    v112 = v11;
    if (v46)
      goto LABEL_28;
LABEL_9:
    v48 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v49 = v106;
    if (v48 < v109)
    {
      v50 = *(_QWORD *)(v108 + 8 * v48);
      ++v47;
      if (v50)
        goto LABEL_22;
      v47 = v48 + 1;
      if (v48 + 1 >= v109)
        goto LABEL_29;
      v50 = *(_QWORD *)(v108 + 8 * v47);
      if (v50)
        goto LABEL_22;
      v47 = v48 + 2;
      if (v48 + 2 >= v109)
        goto LABEL_29;
      v50 = *(_QWORD *)(v108 + 8 * v47);
      if (v50)
      {
LABEL_22:
        v46 = (v50 - 1) & v50;
        v52 = __clz(__rbit64(v50)) + (v47 << 6);
        v38 = v118;
        while (1)
        {
          v53 = v113;
          sub_19A30B600(*(_QWORD *)(v115 + 48) + *(_QWORD *)(v114 + 72) * v52, v113, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
          sub_19A33D83C(v53, (uint64_t)v19);
          sub_19A322DB4(v44, (uint64_t)v30);
          v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
          v11 = v112;
          v55 = v44;
          v56 = v54(v30, 1, v112);
          sub_19A323268((uint64_t)v30, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
          sub_19A30B600((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
          if (v56 == 1)
          {
            sub_19A33D880((uint64_t)v16);
            v38 = v118;
          }
          else
          {
            v57 = v55;
            v58 = v107;
            sub_19A322DB4(v57, v107);
            result = v54((char *)v58, 1, v11);
            if ((_DWORD)result == 1)
              goto LABEL_36;
            v59 = sub_19A352F68();
            sub_19A33D880((uint64_t)v16);
            v38 = v118;
            (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v58, v11);
            if ((v59 & 1) == 0)
            {
              result = sub_19A33D880((uint64_t)v19);
              v44 = v116;
              if (!v46)
                goto LABEL_9;
              goto LABEL_28;
            }
          }
          v44 = v116;
          sub_19A323268(v116, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
          v60 = (uint64_t)v111;
          (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v111, &v19[*(int *)(DatabaseAccessibilityAssertionsRecord + 24)], v11);
          sub_19A33D880((uint64_t)v19);
          v110(v60, 0, 1, v11);
          result = sub_19A33D8BC(v60, v44);
          if (!v46)
            goto LABEL_9;
LABEL_28:
          v61 = __clz(__rbit64(v46));
          v46 &= v46 - 1;
          v52 = v61 | (v47 << 6);
        }
      }
      v51 = v48 + 3;
      if (v51 < v109)
      {
        v50 = *(_QWORD *)(v108 + 8 * v51);
        if (v50)
        {
          v47 = v51;
          goto LABEL_22;
        }
        while (1)
        {
          v47 = v51 + 1;
          if (__OFADD__(v51, 1))
            goto LABEL_34;
          if (v47 >= v109)
            break;
          v50 = *(_QWORD *)(v108 + 8 * v47);
          ++v51;
          if (v50)
            goto LABEL_22;
        }
      }
    }
LABEL_29:
    swift_release();
    v62 = v105;
    sub_19A322DB4(v44, v105);
    v63 = v118;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v62, 1, v11) == 1)
    {
      sub_19A323268(v44, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v104, v62, v11);
      sub_19A308AE4(0, &qword_1EE3991F8);
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      v64 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938];
      sub_19A306A54(&qword_1EE399200, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
      sub_19A30FA98(0, &qword_1EE399208, v64, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_19A338218(&qword_1EE399210, &qword_1EE399208, v64);
      v65 = v87;
      v66 = v89;
      sub_19A3537B4();
      v115 = sub_19A3536E8();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v65, v66);
      sub_19A352F8C();
      v68 = v67;
      ObjectType = swift_getObjectType();
      DatabaseAccessibilityAssertionsRecord = ObjectType;
      v70 = v90;
      sub_19A35316C();
      v71 = v92;
      MEMORY[0x19AEC6300](v70, v68);
      v114 = *(_QWORD *)(v91 + 8);
      v72 = v93;
      ((void (*)(char *, uint64_t))v114)(v70, v93);
      v73 = v96;
      v74 = *(void (**)(char *, _QWORD, uint64_t))(v96 + 104);
      v75 = v94;
      v76 = v97;
      v74(v94, *MEMORY[0x1E0DEF498], v97);
      v77 = (char *)v95;
      *v95 = 0;
      v74(v77, *MEMORY[0x1E0DEF480], v76);
      v78 = v115;
      MEMORY[0x19AEC6888](v71, v75, v77, ObjectType);
      v79 = *(void (**)(_QWORD *, uint64_t))(v73 + 8);
      v79(v77, v76);
      v79(v75, v76);
      ((void (*)(char *, uint64_t))v114)(v71, v72);
      v80 = swift_allocObject();
      *(_QWORD *)(v80 + 16) = v49;
      aBlock[4] = sub_19A33D918;
      aBlock[5] = v80;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_19A338214;
      aBlock[3] = &block_descriptor_33;
      v81 = _Block_copy(aBlock);
      v82 = v49;
      v83 = v98;
      sub_19A353154();
      v84 = v101;
      sub_19A339D9C();
      sub_19A3536F4();
      v62 = v116;
      _Block_release(v81);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v84, v103);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v83, v100);
      swift_release();
      *(_QWORD *)&v49[v86] = v78;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      sub_19A35370C();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v104, v11);
    }
    return sub_19A323268(v62, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_19A339D70(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_19A339D9C()
{
  uint64_t (*v0)(uint64_t);

  sub_19A353148();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_19A306A54(&qword_1EE399108, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_19A30FA98(0, &qword_1EE399110, v0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_19A338218(&qword_1EE399118, &qword_1EE399110, v0);
  return sub_19A3537B4();
}

uint64_t sub_19A339E60()
{
  return sub_19A339E98((uint64_t)&unk_1E37FBF78, (uint64_t)sub_19A33E444, (uint64_t)&block_descriptor_27);
}

uint64_t sub_19A339E7C()
{
  return sub_19A339E98((uint64_t)&unk_1E37FBEB0, (uint64_t)sub_19A337878, (uint64_t)&block_descriptor_12);
}

uint64_t sub_19A339E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v6 = sub_19A353148();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_19A353160();
  v10 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_19A337520();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A338214;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  v16 = v3;
  sub_19A353154();
  v21 = MEMORY[0x1E0DEE9D8];
  sub_19A306A54(&qword_1EE399108, v7, MEMORY[0x1E0DEF510]);
  sub_19A30FA98(0, &qword_1EE399110, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_19A338218(&qword_1EE399118, &qword_1EE399110, v7);
  sub_19A3537B4();
  MEMORY[0x19AEC6840](0, v12, v9, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v19);
  return swift_release();
}

void sub_19A33A0C0()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *lock;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0
                                      + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertionsLock)
                          + 16);
  os_unfair_lock_lock(v1);
  v2 = (uint64_t *)(v0 + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertions);
  swift_beginAccess();
  v3 = *v2;
  lock = v1;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_19A3537E4();
    sub_19A308AE4(0, &qword_1EE399120);
    sub_19A329A70(&qword_1EE399128, &qword_1EE399120);
    sub_19A353610();
    v3 = v21;
    v19 = v22;
    v4 = v23;
    v5 = v24;
    v6 = v25;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v3 + 32);
    v19 = v3 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v3 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v10 = (unint64_t)(v4 + 64) >> 6;
  if (v3 < 0)
    goto LABEL_10;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v5 << 6);
      v13 = v5;
      goto LABEL_27;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v15 >= v10)
      goto LABEL_30;
    v16 = *(_QWORD *)(v19 + 8 * v15);
    v13 = v5 + 1;
    if (!v16)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v10)
        goto LABEL_30;
      v16 = *(_QWORD *)(v19 + 8 * v13);
      if (!v16)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v10)
          goto LABEL_30;
        v16 = *(_QWORD *)(v19 + 8 * v13);
        if (!v16)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v10)
            goto LABEL_30;
          v16 = *(_QWORD *)(v19 + 8 * v13);
          if (!v16)
          {
            v17 = v5 + 5;
            while (v10 != v17)
            {
              v16 = *(_QWORD *)(v19 + 8 * v17++);
              if (v16)
              {
                v13 = v17 - 1;
                goto LABEL_26;
              }
            }
LABEL_30:
            sub_19A33A3A8();
            os_unfair_lock_unlock(lock);
            return;
          }
        }
      }
    }
LABEL_26:
    v11 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_27:
    v14 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    if (!v14)
      goto LABEL_30;
    while (1)
    {
      objc_msgSend(v14, sel_markInvalid);

      v5 = v13;
      v6 = v11;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (sub_19A353838())
      {
        sub_19A308AE4(0, &qword_1EE399120);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v14 = v20;
        swift_unknownObjectRelease();
        v13 = v5;
        v11 = v6;
        if (v20)
          continue;
      }
      goto LABEL_30;
    }
  }
  __break(1u);
}

uint64_t sub_19A33A3A8()
{
  return swift_release();
}

void sub_19A33A3E4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  objc_class *v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  os_unfair_lock_s *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  objc_super v24;

  v2 = v1;
  v4 = *(void **)(v1 + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__healthStore);
  v5 = (objc_class *)type metadata accessor for DatabaseAccessibilityAssertionStore();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore____lazy_storage____proxyProvider] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___HKDatabaseAccessibilityAssertionStore__healthStore] = v4;
  v24.receiver = v6;
  v24.super_class = v5;
  v7 = v4;
  v8 = objc_msgSendSuper2(&v24, sel_init);

  v9 = sub_19A32C020();
  objc_msgSend(v9, sel_setShouldRetryOnInterruption_, 1);

  v10 = (os_unfair_lock_s *)(*(_QWORD *)(v2
                                       + OBJC_IVAR___HKDatabaseAccessibilityAssertionStoreKeeper__dbAccessibilityAssertionsLock)
                           + 16);
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  v11 = (void *)sub_19A33CF08(a1);
  swift_endAccess();

  objc_msgSend(a1, sel_markInvalid);
  v12 = sub_19A32C020();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  v22 = sub_19A32CF08;
  v23 = v13;
  v14 = MEMORY[0x1E0C809B0];
  v18 = MEMORY[0x1E0C809B0];
  v19 = 1107296256;
  v20 = sub_19A32CB18;
  v21 = &block_descriptor_18;
  v15 = _Block_copy(&v18);
  v16 = a1;
  swift_release();
  v22 = sub_19A32CF10;
  v23 = 0;
  v18 = v14;
  v19 = 1107296256;
  v20 = sub_19A32CC28;
  v21 = &block_descriptor_21_1;
  v17 = _Block_copy(&v18);
  objc_msgSend(v12, sel_fetchProxyWithHandler_errorHandler_, v15, v17);
  _Block_release(v17);
  _Block_release(v15);

  os_unfair_lock_unlock(v10);
}

id DatabaseAccessibilityAssertionStoreKeeper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DatabaseAccessibilityAssertionStoreKeeper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_19A33A6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A353B38();
  sub_19A353448();
  v4 = sub_19A353B68();
  return sub_19A33A734(a1, a2, v4);
}

unint64_t sub_19A33A734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_19A353AC0() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_19A353AC0() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_19A33A814(_QWORD *a1, void *a2)
{
  return sub_19A33AA54(a1, a2, (unint64_t *)&qword_1EE399280, 0x1E0CB37E8, &qword_1EE399288, qword_1EE399290);
}

uint64_t sub_19A33A838(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v7 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_19A353B38();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  sub_19A35337C();
  v11 = sub_19A353B68();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = v2;
    v21 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_19A30B600(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      v16 = sub_19A352FEC();
      sub_19A33D880((uint64_t)v9);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_19A33D880(a2);
    sub_19A30B600(*(_QWORD *)(*v20 + 48) + v15 * v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_19A30B600(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_19A33B9E0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v22;
    swift_bridgeObjectRelease();
    sub_19A33D83C(a2, a1);
    return 1;
  }
}

uint64_t sub_19A33AA54(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  unint64_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = v6;
  v14 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *v6;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = a2;
    v17 = sub_19A353820();

    if (v17)
    {
      swift_bridgeObjectRelease();

      sub_19A308AE4(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v42;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_19A353814();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_19A33AE58(v15, result + 1, a5, a3, a4, a6);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v35 = a5;
      v36 = v30 + 1;
      v37 = v16;
      sub_19A33B404(v36, v35, a3, a4, a6);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v16;
    }
    sub_19A33B960((uint64_t)v16, v31);
    *v11 = v31;
    swift_bridgeObjectRelease();
    *a1 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = sub_19A353730();
    v20 = -1 << *(_BYTE *)(v14 + 32);
    v21 = v19 & ~v20;
    v40 = a4;
    if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_19A308AE4(0, a3);
      v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
      v23 = sub_19A35373C();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v27 = *(void **)(*(_QWORD *)(*v6 + 48) + 8 * v21);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
        v26 = sub_19A35373C();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44 = *v6;
    *v6 = 0x8000000000000000;
    v34 = a2;
    sub_19A33BBE4((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v40, a6);
    *v6 = v44;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

uint64_t sub_19A33AD3C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_19A353B38();
  sub_19A353B44();
  v6 = sub_19A353B68();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_19A33BD98(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_19A33AE58(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_19A33E378(0, a3, a4, a5, a6);
    v10 = sub_19A353874();
    v23 = v10;
    sub_19A3537E4();
    if (sub_19A353838())
    {
      sub_19A308AE4(0, a4);
      do
      {
        swift_dynamicCast();
        v10 = v23;
        v17 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v17)
        {
          sub_19A33B404(v17 + 1, a3, a4, a5, a6);
          v10 = v23;
        }
        result = sub_19A353730();
        v12 = v10 + 56;
        v13 = -1 << *(_BYTE *)(v10 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16) = v22;
        ++*(_QWORD *)(v10 + 16);
      }
      while (sub_19A353838());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v10;
}

uint64_t sub_19A33B07C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v1 = v0;
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v35 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_19A33E2F8(0, &qword_1EE399250, v6, &qword_1EE399258, (uint64_t)&unk_19A451CF8);
  v7 = sub_19A353868();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = *(_QWORD *)(v5 + 56);
    v34 = (_QWORD *)(v5 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v32 = v0;
    v33 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v33)
          goto LABEL_33;
        v20 = v34[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v33)
            goto LABEL_33;
          v20 = v34[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v33)
              goto LABEL_33;
            v20 = v34[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v33)
              {
LABEL_33:
                swift_release();
                v1 = v32;
                v30 = 1 << *(_BYTE *)(v5 + 32);
                if (v30 > 63)
                  bzero(v34, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v30;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v20 = v34[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_39;
                  if (v15 >= v33)
                    goto LABEL_33;
                  v20 = v34[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_23;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_23:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(v35 + 72);
      sub_19A33D83C(*(_QWORD *)(v5 + 48) + v22 * v18, (uint64_t)v4);
      sub_19A353B38();
      sub_19A353010();
      sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      sub_19A35337C();
      result = sub_19A353B68();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      result = sub_19A33D83C((uint64_t)v4, *(_QWORD *)(v8 + 48) + v16 * v22);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_19A33B404(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v6 = v5;
  v7 = *v5;
  sub_19A33E378(0, a2, a3, a4, a5);
  v8 = sub_19A353868();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v33 = v5;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 56;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14)
          goto LABEL_33;
        v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v14)
            goto LABEL_33;
          v22 = v11[v17];
          if (!v22)
          {
            v17 = v21 + 2;
            if (v21 + 2 >= v14)
              goto LABEL_33;
            v22 = v11[v17];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                v6 = v33;
                v32 = 1 << *(_BYTE *)(v7 + 32);
                if (v32 > 63)
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v11 = -1 << v32;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  v17 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_39;
                  if (v17 >= v14)
                    goto LABEL_33;
                  v22 = v11[v17];
                  ++v23;
                  if (v22)
                    goto LABEL_23;
                }
              }
              v17 = v23;
            }
          }
        }
LABEL_23:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
      result = sub_19A353730();
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v6 = v9;
  return result;
}

uint64_t sub_19A33B69C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  sub_19A33E2F8(0, (unint64_t *)&unk_1EE399260, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (unint64_t *)&unk_1EE398A80, (uint64_t)&unk_19A44E4EC);
  result = sub_19A353868();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      sub_19A353B38();
      sub_19A353B44();
      result = sub_19A353B68();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_19A33B960(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_19A353730();
  result = sub_19A3537CC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_19A33B9E0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t *v26;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v8 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    v13 = v8;
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
  {
    sub_19A33B07C();
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    sub_19A33C488();
LABEL_8:
    v14 = *v3;
    sub_19A353B38();
    sub_19A353010();
    sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_19A35337C();
    v15 = sub_19A353B68();
    v16 = -1 << *(_BYTE *)(v14 + 32);
    a2 = v15 & ~v16;
    if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v25[1] = DatabaseAccessibilityAssertionsRecord;
      v17 = ~v16;
      v13 = v8;
      v18 = *(_QWORD *)(v8 + 72);
      while (1)
      {
        sub_19A30B600(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
        v19 = sub_19A352FEC();
        sub_19A33D880((uint64_t)v10);
        if ((v19 & 1) != 0)
          goto LABEL_17;
        a2 = (a2 + 1) & v17;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          goto LABEL_14;
      }
    }
    goto LABEL_13;
  }
  v13 = v8;
  sub_19A33BEE4();
LABEL_14:
  v20 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_19A33D83C(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v13 + 72) * a2);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_17:
  result = sub_19A353AE4();
  __break(1u);
  return result;
}

void sub_19A33BBE4(uint64_t a1, unint64_t a2, char a3, unint64_t *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_19A33B404(v13, a4, a5, a6, a7);
  }
  else
  {
    if (v12 > v11)
    {
      sub_19A33C120(a4, a5, a6, a7);
      goto LABEL_14;
    }
    sub_19A33C7E0(v13, a4, a5, a6, a7);
  }
  v14 = *v7;
  v15 = sub_19A353730();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_19A308AE4(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = sub_19A35373C();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      sub_19A353AE4();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = sub_19A35373C();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t sub_19A33BD98(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_19A33B69C();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_19A33C2D4();
      goto LABEL_14;
    }
    sub_19A33CA54();
  }
  v8 = *v3;
  sub_19A353B38();
  sub_19A353B44();
  result = sub_19A353B68();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for HKCategoryValueSleepAnalysis(0);
      result = sub_19A353AE4();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_19A33BEE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v3 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19A33E2F8(0, &qword_1EE399250, v6, &qword_1EE399258, (uint64_t)&unk_19A451CF8);
  v7 = *v0;
  v8 = sub_19A35385C();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_27:
    *v1 = v9;
    return result;
  }
  v25 = v1;
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v11 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v17)
      goto LABEL_25;
    v22 = *(_QWORD *)(v11 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_25;
      v22 = *(_QWORD *)(v11 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_25;
        v22 = *(_QWORD *)(v11 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_24:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_19A30B600(*(_QWORD *)(v7 + 48) + v20, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    result = (void *)sub_19A33D83C((uint64_t)v5, *(_QWORD *)(v9 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_25:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_27;
  }
  v22 = *(_QWORD *)(v11 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_25;
    v22 = *(_QWORD *)(v11 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

id sub_19A33C120(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  sub_19A33E378(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = sub_19A35385C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v5 = v8;
    return result;
  }
  result = (id)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_28;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_28;
        v23 = *(_QWORD *)(v10 + 8 * v13);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 3;
  if (v24 >= v17)
    goto LABEL_28;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_19A33C2D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v1 = v0;
  sub_19A33E2F8(0, (unint64_t *)&unk_1EE399260, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (unint64_t *)&unk_1EE398A80, (uint64_t)&unk_19A44E4EC);
  v2 = *v0;
  v3 = sub_19A35385C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_25:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v12)
      goto LABEL_25;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_25;
      v16 = *(_QWORD *)(v6 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_25;
        v16 = *(_QWORD *)(v6 + 8 * v8);
        if (!v16)
          break;
      }
    }
LABEL_24:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_9:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_25;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v12)
      goto LABEL_25;
    v16 = *(_QWORD *)(v6 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_19A33C488()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  v1 = v0;
  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v34 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_19A33E2F8(0, &qword_1EE399250, v6, &qword_1EE399258, (uint64_t)&unk_19A451CF8);
  v7 = sub_19A353868();
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v10 = *(_QWORD *)(v5 + 56);
  v31 = v0;
  v32 = v5 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v34 + 72);
    sub_19A30B600(*(_QWORD *)(v5 + 48) + v22 * v18, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
    sub_19A353B38();
    sub_19A353010();
    sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    sub_19A35337C();
    result = sub_19A353B68();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = sub_19A33D83C((uint64_t)v4, *(_QWORD *)(v8 + 48) + v16 * v22);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_19A33C7E0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;

  v6 = v5;
  v7 = *v5;
  sub_19A33E378(0, a2, a3, a4, a5);
  v8 = sub_19A353868();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v6 = v9;
    return result;
  }
  v32 = v5;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  v15 = v8 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_33;
      v22 = *(_QWORD *)(v11 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_33;
        v22 = *(_QWORD *)(v11 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v13 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = sub_19A353730();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v14)
  {
LABEL_33:
    result = swift_release_n();
    v6 = v32;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v11 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_19A33CA54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  sub_19A33E2F8(0, (unint64_t *)&unk_1EE399260, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (unint64_t *)&unk_1EE398A80, (uint64_t)&unk_19A44E4EC);
  result = sub_19A353868();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_19A353B38();
    sub_19A353B44();
    result = sub_19A353B68();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_19A33CCE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v4 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v1;
  v7 = *v1;
  sub_19A353B38();
  sub_19A353010();
  sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  sub_19A35337C();
  v8 = sub_19A353B68();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v22 = DatabaseAccessibilityAssertionsRecord;
    v23 = a1;
    v11 = v4;
    v12 = ~v9;
    v21 = v11;
    v13 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      sub_19A30B600(*(_QWORD *)(v7 + 48) + v13 * v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
      v14 = sub_19A352FEC();
      sub_19A33D880((uint64_t)v6);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v15 = 1;
        a1 = v23;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    v16 = v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v16;
    v25 = *v16;
    *v16 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_19A33BEE4();
      v18 = v25;
    }
    a1 = v23;
    sub_19A33D83C(*(_QWORD *)(v18 + 48) + v13 * v10, v23);
    sub_19A33DEC4(v10);
    *v16 = v25;
    swift_bridgeObjectRelease();
    v15 = 0;
LABEL_10:
    v4 = v21;
    DatabaseAccessibilityAssertionsRecord = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v15, 1, DatabaseAccessibilityAssertionsRecord);
}

uint64_t sub_19A33CF08(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_19A353844();

    if ((v5 & 1) != 0)
    {
      v6 = sub_19A33DD0C();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_19A353730();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  sub_19A308AE4(0, &qword_1EE399120);
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_19A35373C();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_19A35373C();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_19A33C120(&qword_1EE399270, &qword_1EE399120, (uint64_t)off_1E37E49E8, &qword_1EE399128);
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_19A33E158(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t method lookup function for DatabaseAccessibilityAssertionStoreKeeper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStoreKeeper.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStoreKeeper.fetchDatabaseAccessibilityAssertionFor(ownerIdentifier:timeout:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStoreKeeper.connectionConfigured()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStoreKeeper.invalidateAllDatabaseAccessibilityAssertions()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of DatabaseAccessibilityAssertionStoreKeeper.invalidateDatabaseAccessibilityAssertion(assertion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t *sub_19A33D180(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_19A353010();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = sub_19A352FD4();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v17 = a3[7];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
  }
  swift_retain();
  return a1;
}

uint64_t sub_19A33D268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release();
}

uint64_t sub_19A33D2EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = sub_19A352FD4();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  return a1;
}

uint64_t sub_19A33D3AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_19A33D480(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_19A33D518(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t sub_19A33D5D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A33D5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_19A353010();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_19A352FD4();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_19A33D688()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A33D694(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_19A353010();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_19A352FD4();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord()
{
  uint64_t result;

  result = qword_1EE3991B0;
  if (!qword_1EE3991B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_19A33D778()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_19A353010();
  if (v1 <= 0x3F)
  {
    result = sub_19A352FD4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_19A33D810()
{
  return sub_19A306A54(&qword_1EE3991F0, (uint64_t (*)(uint64_t))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord, (uint64_t)&unk_19A451CD0);
}

uint64_t sub_19A33D83C(uint64_t a1, uint64_t a2)
{
  uint64_t DatabaseAccessibilityAssertionsRecord;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8) + 32))(a2, a1, DatabaseAccessibilityAssertionsRecord);
  return a2;
}

uint64_t sub_19A33D880(uint64_t a1)
{
  uint64_t DatabaseAccessibilityAssertionsRecord;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8) + 8))(a1, DatabaseAccessibilityAssertionsRecord);
  return a1;
}

uint64_t sub_19A33D8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A30FA98(0, (unint64_t *)&qword_1ECE27680, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_19A33D918()
{
  return sub_19A339E60();
}

uint64_t sub_19A33D938()
{
  uint64_t v0;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8) + 80);
  v3 = (v2 + 24) & ~v2;

  v4 = v0 + v3;
  v5 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = v4 + *(int *)(DatabaseAccessibilityAssertionsRecord + 24);
  v7 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19A33DA00(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord()
                                      - 8)
                          + 80);
  return sub_19A338B38(a1, a2, *(void **)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_19A33DA50()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_19A33DA7C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_19A33DAA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19A33DACC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19A33DAF0(uint64_t a1)
{
  uint64_t v1;

  return sub_19A32CB80(a1, *(void (**)(_OWORD *, uint64_t))(v1 + 16));
}

uint64_t sub_19A33DAF8()
{
  uint64_t v0;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v2 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  v5 = v0 + v3;
  v6 = sub_19A353010();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = v5 + *(int *)(DatabaseAccessibilityAssertionsRecord + 24);
  v8 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release();

  return swift_deallocObject();
}

void sub_19A33DBEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_19A338DD8(*(_QWORD *)(v0 + 16), v0 + v2, *(void **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_19A33DC3C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EE399240)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EE399240);
  }
}

void sub_19A33DCA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE399248)
  {
    v0 = sub_19A3539DC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE399248);
  }
}

uint64_t sub_19A33DD0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_19A353814();
  v3 = swift_unknownObjectRetain();
  v4 = sub_19A33AE58(v3, v2, &qword_1EE399270, &qword_1EE399120, (uint64_t)off_1E37E49E8, &qword_1EE399128);
  v15 = v4;
  swift_retain();
  v5 = sub_19A353730();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    sub_19A308AE4(0, &qword_1EE399120);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_19A35373C();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_19A33E158(v7);
      if ((sub_19A35373C() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_19A35373C();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_19A33DEC4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t DatabaseAccessibilityAssertionsRecord;
  unint64_t v26;

  DatabaseAccessibilityAssertionsRecord = type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord();
  v3 = *(_QWORD *)(DatabaseAccessibilityAssertionsRecord - 8);
  result = MEMORY[0x1E0C80A78](DatabaseAccessibilityAssertionsRecord);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v24 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = sub_19A3537C0();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v26 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v3 + 72);
      do
      {
        v14 = v13;
        v15 = v13 * v10;
        sub_19A30B600(*(_QWORD *)(v7 + 48) + v13 * v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PendingFetchDatabaseAccessibilityAssertionsRecord);
        sub_19A353B38();
        sub_19A353010();
        sub_19A306A54(&qword_1EE397CE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v16 = v11;
        sub_19A35337C();
        v17 = sub_19A353B68();
        sub_19A33D880((uint64_t)v6);
        v18 = v17 & v16;
        v11 = v16;
        if (a1 >= (uint64_t)v26)
        {
          if (v18 < v26)
          {
            v13 = v14;
            goto LABEL_6;
          }
          v13 = v14;
          if (a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        else
        {
          v13 = v14;
          if (v18 < v26 && a1 < (uint64_t)v18)
            goto LABEL_6;
        }
        v19 = v13 * a1;
        if (v13 * a1 < v15 || *(_QWORD *)(v7 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(v7 + 48) + v15 + v13))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v19 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v24;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v20 = *v1;
  v21 = *(_QWORD *)(*v1 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v20 + 16) = v23;
    ++*(_DWORD *)(v20 + 36);
  }
  return result;
}

unint64_t sub_19A33E158(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_19A3537C0();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_19A353730();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_19A33E2F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_19A306A54(a4, a3, a5);
    v9 = sub_19A35388C();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_19A33E378(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_19A308AE4(255, a3);
    sub_19A329A70(a5, a3);
    v8 = sub_19A35388C();
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_19A33E400()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_19A33E42C(void *a1, void *a2)
{
  uint64_t v2;

  return sub_19A337F64(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(void *, void *))(v2 + 24));
}

uint64_t SecureCodableObject.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1)
                                                                            + 0x50)
                                                                - 8)
                                                    + 16))(a1, &v1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x70)]);
}

id SecureCodableObject.__allocating_init(wrapped:)(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = sub_19A33EF50(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

id SecureCodableObject.init(wrapped:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = sub_19A33EED4(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t SecureCodableObject.isEqual(_:)(uint64_t a1)
{
  void *v1;
  char v3;
  void *v5;
  _BYTE v6[24];
  uint64_t v7;

  swift_getObjectType();
  sub_19A319FD8(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_19A32D494((uint64_t)v6);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v3 = 0;
    return v3 & 1;
  }
  if (v5 == v1)
  {

    v3 = 1;
  }
  else
  {
    v3 = sub_19A3533F4();

  }
  return v3 & 1;
}

uint64_t sub_19A33E664(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  char v6;
  _OWORD v8[2];

  if (a3)
  {
    v4 = a1;
    swift_unknownObjectRetain();
    sub_19A35379C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v5 = a1;
  }
  v6 = SecureCodableObject.isEqual(_:)((uint64_t)v8);

  sub_19A32D494((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_19A33E6D8(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = SecureCodableObject.hash.getter();

  return v2;
}

uint64_t SecureCodableObject.hash.getter()
{
  return sub_19A353388();
}

id sub_19A33E744(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  SecureCodableObject.description.getter();

  v2 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t SecureCodableObject.description.getter()
{
  char *v0;
  uint64_t ObjectType;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  ObjectType = swift_getObjectType();
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](ObjectType);
  v6 = (char *)v8 - v5;
  v8[0] = 60;
  v8[1] = 0xE100000000000000;
  sub_19A353CAC();
  sub_19A353454();
  swift_bridgeObjectRelease();
  sub_19A353454();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, &v0[*(_QWORD *)((*v2 & *(_QWORD *)v0) + 0x70)], v3);
  sub_19A35343C();
  sub_19A353454();
  swift_bridgeObjectRelease();
  sub_19A353454();
  return v8[0];
}

id SecureCodableObject.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  a1[3] = swift_getObjectType();
  *a1 = v3;
  return v3;
}

uint64_t sub_19A33E8DC()
{
  uint64_t v0;
  _QWORD v2[4];

  SecureCodableObject.copy(with:)(v2);
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  v0 = sub_19A353AB4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0;
}

uint64_t sub_19A33E930()
{
  return 1;
}

uint64_t static SecureCodableObject.supportsSecureCoding.getter()
{
  return 1;
}

id SecureCodableObject.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SecureCodableObject.init(coder:)(a1);
}

id SecureCodableObject.init(coder:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  objc_class *ObjectType;
  id v19;
  _QWORD v20[2];
  __int128 v21;

  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v20 - v8;
  sub_19A33EF80();
  v10 = v1;
  v11 = sub_19A353724();
  if (v11
    && (v12 = (void *)v11,
        v21 = xmmword_19A44F5C0,
        sub_19A352F14(),
        v12,
        v13 = *((_QWORD *)&v21 + 1),
        *((_QWORD *)&v21 + 1) >> 60 != 15))
  {
    v14 = v21;
    sub_19A352E30();
    swift_allocObject();
    v15 = v14;
    v20[0] = sub_19A352E24();
    sub_19A352E18();
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v7, v3);
    ObjectType = (objc_class *)swift_getObjectType();

    v19 = objc_allocWithZone(ObjectType);
    v16 = sub_19A33EED4((uint64_t)v9);
    swift_release();
    sub_19A311A90(v15, v13);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    swift_deallocPartialClassInstance();
  }
  else
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v16;
}

id sub_19A33EBD0(uint64_t a1, uint64_t a2, void *a3)
{
  return SecureCodableObject.init(coder:)(a3);
}

Swift::Void __swiftcall SecureCodableObject.encode(with:)(NSCoder with)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;

  swift_getObjectType();
  sub_19A352E54();
  swift_allocObject();
  sub_19A352E48();
  v2 = sub_19A352E3C();
  v4 = v3;
  v5 = (void *)sub_19A352F08();
  v6 = (void *)sub_19A353400();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  sub_19A311AA4(v2, v4);
  swift_release();
}

void sub_19A33EDC0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SecureCodableObject.encode(with:)((NSCoder)v4);

}

id SecureCodableObject.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SecureCodableObject.init()()
{
  sub_19A33EFBC();
}

void sub_19A33EE54()
{
  sub_19A33EFBC();
}

id SecureCodableObject.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19A33EEA8(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a1) + 0x70)]);
}

id sub_19A33EED4(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x50)
                                                      - 8)
                                          + 16))(&v1[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x70)], a1);
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id sub_19A33EF50(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_19A33EED4(a1);
}

unint64_t sub_19A33EF80()
{
  unint64_t result;

  result = qword_1EE3992A8[0];
  if (!qword_1EE3992A8[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_1EE3992A8);
  }
  return result;
}

void sub_19A33EFBC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_19A33EFEC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for SecureCodableObject()
{
  JUMPOUT(0x19AEC7F50);
}

uint64_t method lookup function for SecureCodableObject()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SecureCodableObject.__allocating_init(wrapped:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SecureCodableObject.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

id HKSourceQueryDescriptor.predicate.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v5;

  v2 = *(void **)(v1 + 8);
  v5 = *(id *)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  v3 = v2;
  return v5;
}

void HKSourceQueryDescriptor.predicate.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(void **)(v1 + 8);

  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
}

uint64_t (*HKSourceQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKSourceQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

__n128 HKSourceQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  v1[1] = v4;
  v1[2].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKSourceQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t *HKSourceQueryDescriptor.init(predicate:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  v3 = result[1];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = -1;
  *a2 = v2;
  a2[1] = v3;
  return result;
}

uint64_t HKSourceQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = a2;
  v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 96) = v4;
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(v2 + 32);
  return swift_task_switch();
}

uint64_t sub_19A33F19C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v2 = (void *)v0[10];
  v1 = (void *)v0[11];
  v0[18] = v2;
  v0[19] = v1;
  v3 = v1;
  v4 = v2;
  return swift_task_switch();
}

uint64_t sub_19A33F1E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = v0[18];
  v1 = v0[19];
  v3 = (void *)v0[16];
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_19A33F260;
  v4 = swift_continuation_init();
  sub_19A33F348(v4, v2, v1, v3, (uint64_t)(v0 + 10));
  return swift_continuation_await();
}

uint64_t sub_19A33F260()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 160) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 168) = *(_QWORD *)(v1 + 120);
  return swift_task_switch();
}

uint64_t sub_19A33F2D4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168));
}

uint64_t sub_19A33F310()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_19A33F348(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t (*v16)(uint64_t, void *, uint64_t, void *);
  __int128 v17;
  uint64_t (*v18)(uint64_t, void *, uint64_t, void *);
  void *v19;
  uint64_t (*v20)(uint64_t, uint64_t, void *);
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  void *v24;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a1;
  v11 = objc_allocWithZone((Class)HKSourceQuery);
  v20 = sub_19A33F8B4;
  v21 = v10;
  *(_QWORD *)&v17 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v17 + 1) = 1107296256;
  v18 = sub_19A33F8BC;
  v19 = &block_descriptor_20;
  v12 = _Block_copy(&v17);
  v13 = a4;
  v14 = objc_msgSend(v11, sel_initWithSampleType_samplePredicate_completionHandler_, a2, a3, v12);
  _Block_release(v12);
  swift_release();
  v17 = *(_OWORD *)(a5 + 16);
  v18 = *(uint64_t (**)(uint64_t, void *, uint64_t, void *))(a5 + 32);
  sub_19A309F34((uint64_t)&v17, (uint64_t)v22);
  sub_19A309F34((uint64_t)v22, (uint64_t)&v23);
  v15 = v24;
  if (v24)
  {
    sub_19A309FF4((uint64_t)&v17);
    v15 = (void *)sub_19A353400();
  }
  v16 = v18;
  objc_msgSend(v14, sel_setDebugIdentifier_, v15);

  objc_msgSend(v14, sel_setQualityOfService_, v16);
  sub_19A309FCC((uint64_t)&v17);
  objc_msgSend(v13, sel_executeQuery_, v14);

}

uint64_t sub_19A33F4DC(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v11;
  _QWORD *v12;
  id v13;
  void *v14;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    v8 = swift_bridgeObjectRetain();
    v9 = sub_19A33F988(v8);
    swift_bridgeObjectRelease();
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = v9;
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v11 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A306A54((unint64_t *)&qword_1EE396FE8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_19A44EF9C);
      sub_19A352EB4();
      v11 = v14;
    }
    sub_19A305E34();
    swift_allocError();
    *v12 = v11;
    v13 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A33F610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *(_QWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = sub_19A309ABC;
  *(_QWORD *)(v7 + 128) = a2;
  *(_QWORD *)(v7 + 136) = a3;
  *(_QWORD *)(v7 + 112) = *(_QWORD *)(v3 + 32);
  v8 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)v3;
  *(_OWORD *)(v7 + 96) = v8;
  return swift_task_switch();
}

uint64_t sub_19A33F690(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *sub_19A33F6C0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(a2 + 32);
  v6 = v3;
  v7 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_19A33F710(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_19A33F7A0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_19A33F7F4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_19A33F83C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for HKSourceQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKSourceQueryDescriptor);
}

uint64_t sub_19A33F890()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_19A33F8B4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_19A33F4DC(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_19A33F8BC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A311148();
    sub_19A306A54(&qword_1EE397690, (uint64_t (*)(uint64_t))sub_19A311148, MEMORY[0x1E0DEFCF8]);
    v5 = sub_19A3535E0();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t sub_19A33F988(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v2 = sub_19A353814();
    if (v2)
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 <= 0)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_19A30D4F8(0, &qword_1EE397470, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = (_QWORD *)swift_allocObject();
    v4 = _swift_stdlib_malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  v6 = sub_19A310E48(&v8, v3 + 4, v2, a1);
  result = sub_19A33A3A8();
  if (v6 == (_QWORD *)v2)
    return (uint64_t)v3;
  __break(1u);
  return result;
}

id static HKSamplePredicate.gad7Assessment(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  __CFString *v4;
  id result;
  id v6;

  v3 = objc_allocWithZone((Class)HKScoredAssessmentType);
  v4 = CFSTR("HKScoredAssessmentTypeIdentifierGAD7");
  result = objc_msgSend(v3, sel_initWithIdentifier_, v4);
  if (result)
  {
    v6 = result;

    *a2 = v6;
    a2[1] = a1;
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKGAD7Assessment.init(date:answers:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  v6 = (void *)sub_19A352F5C();
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    sub_19A35391C();
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      sub_19A353628();
      sub_19A3538F8();
      sub_19A353928();
      sub_19A353934();
      sub_19A353904();
      v8 = v9;
    }
    while (v7 != v9);
  }
  swift_bridgeObjectRelease();
  sub_19A332704();
  v10 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v11 = (void *)sub_19A35331C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDate_answers_metadata_, v6, v10, v11);

  v13 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

uint64_t HKGAD7Assessment.answers.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;

  v1 = objc_msgSend(v0, sel_answers);
  sub_19A332704();
  v2 = sub_19A3534CC();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_15:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  result = sub_19A3539B8();
  v3 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x19AEC6A20](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_integerValue);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_19A3148E8(0, v6[2] + 1, 1, v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_19A3148E8((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      ++v5;
      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
    }
    while (v3 != v5);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t HKObjectType.hk_pinnedContentIdentifier.getter()
{
  void *v0;
  _QWORD v2[2];

  strcpy((char *)v2, "HKObjectType_");
  objc_msgSend(v0, sel_code);
  sub_19A353A90();
  sub_19A353454();
  swift_bridgeObjectRelease();
  return v2[0];
}

uint64_t DateInterval.hk_union(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;

  v26[1] = a1;
  v28 = a2;
  v2 = sub_19A352FD4();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v26 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v27 = (char *)v26 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v26 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v26 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v26 - v18;
  sub_19A352CA4();
  sub_19A352CA4();
  sub_19A3400C4();
  v20 = sub_19A3533A0();
  v21 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  if ((v20 & 1) != 0)
    v22 = v14;
  else
    v22 = v17;
  v21(v19, v22, v2);
  v23 = *(void (**)(char *, uint64_t))(v3 + 8);
  v23(v14, v2);
  v23(v17, v2);
  sub_19A352C80();
  sub_19A352C80();
  if ((sub_19A3533AC() & 1) != 0)
    v24 = v6;
  else
    v24 = v9;
  v21(v27, v24, v2);
  v23(v6, v2);
  v23(v9, v2);
  return sub_19A352C8C();
}

unint64_t sub_19A3400C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EE399230;
  if (!qword_1EE399230)
  {
    v1 = sub_19A352FD4();
    result = MEMORY[0x19AEC7FB0](MEMORY[0x1E0CB08B0], v1);
    atomic_store(result, (unint64_t *)&qword_1EE399230);
  }
  return result;
}

uint64_t static HKCategoryValueSleepAnalysis.allAsleepValues.getter()
{
  NSSet *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v23)(char *, _QWORD);
  uint64_t v24;
  char v25[32];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v0 = HKCategoryValueSleepAnalysisAsleepValues();
  sub_19A332704();
  sub_19A306A54(qword_1EE399290, (uint64_t (*)(uint64_t))sub_19A332704, MEMORY[0x1E0DEFCF8]);
  v1 = sub_19A3535E0();

  v2 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v3 = sub_19A353814();
    if (v3)
      goto LABEL_3;
LABEL_6:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v24 = sub_19A3328A0(v7);
    swift_bridgeObjectRelease();
    return v24;
  }
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
    goto LABEL_6;
LABEL_3:
  v29 = MEMORY[0x1E0DEE9D8];
  sub_19A314A40(0, v3 & ~(v3 >> 63), 0);
  if (v2)
  {
    result = sub_19A3537D8();
    v6 = 1;
  }
  else
  {
    result = sub_19A34077C(v1);
    v6 = v8 & 1;
  }
  v26 = result;
  v27 = v5;
  v28 = v6;
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        v15 = v26;
        v14 = v27;
        v16 = v28;
        sub_19A3404B0(v26, v27, v28, v1);
        v18 = v17;
        v19 = objc_msgSend(v17, sel_integerValue);

        v20 = v29;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = sub_19A314A40(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v29;
        }
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          result = sub_19A314A40(v21 > 1, v22 + 1, 1);
          v20 = v29;
        }
        *(_QWORD *)(v20 + 16) = v22 + 1;
        *(_QWORD *)(v20 + 8 * v22 + 32) = v19;
        if (v2)
          break;
        v9 = sub_19A3403CC(v15, v14, v16, v1);
        v11 = v10;
        v13 = v12;
        sub_19A340770(v15, v14, v16);
        v26 = v9;
        v27 = v11;
        v28 = v13 & 1;
        if (!--v3)
          goto LABEL_20;
      }
      if ((v16 & 1) == 0)
        goto LABEL_23;
      if (sub_19A3537F0())
        swift_isUniquelyReferenced_nonNull_native();
      sub_19A3406F8();
      v23 = (void (*)(char *, _QWORD))sub_19A3535F8();
      sub_19A353850();
      v23(v25, 0);
      --v3;
    }
    while (v3);
LABEL_20:
    sub_19A340770(v26, v27, v28);
    swift_bridgeObjectRelease();
    v7 = v29;
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

int64_t sub_19A3403CC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_19A3404B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_19A3537FC() == *(_DWORD *)(a4 + 36))
      {
        sub_19A353808();
        sub_19A332704();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_19A353730();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_19A35373C();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_19A35373C();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x19AEC699C](a1, a2, v7);
  sub_19A332704();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

void sub_19A3406F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE3993E8)
  {
    sub_19A332704();
    sub_19A306A54(qword_1EE399290, (uint64_t (*)(uint64_t))sub_19A332704, MEMORY[0x1E0DEFCF8]);
    v0 = sub_19A353604();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE3993E8);
  }
}

uint64_t sub_19A340770(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_19A34077C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_19A340804(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3993F0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValue, (uint64_t)&unk_19A44EC6C);
  result = sub_19A306A54(&qword_1EE3993F8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValue, (uint64_t)&unk_19A44EC30);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340860(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399400, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppetiteChanges, (uint64_t)&unk_19A44EBEC);
  result = sub_19A306A54(&qword_1EE399408, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppetiteChanges, (uint64_t)&unk_19A44EBB0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A3408BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399410, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleStandHour, (uint64_t)&unk_19A44EB6C);
  result = sub_19A306A54(&qword_1EE399418, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleStandHour, (uint64_t)&unk_19A44EB30);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340918(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399420, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleWalkingSteadinessEvent, (uint64_t)&unk_19A44EAEC);
  result = sub_19A306A54(&qword_1EE399428, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueAppleWalkingSteadinessEvent, (uint64_t)&unk_19A44EAB0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340974(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399430, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCervicalMucusQuality, (uint64_t)&unk_19A44EA6C);
  result = sub_19A306A54(&qword_1EE399438, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCervicalMucusQuality, (uint64_t)&unk_19A44EA30);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A3409D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399440, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueContraceptive, (uint64_t)&unk_19A44E9EC);
  result = sub_19A306A54(&qword_1EE399448, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueContraceptive, (uint64_t)&unk_19A44E9B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340A2C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399450, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueEnvironmentalAudioExposureEvent, (uint64_t)&unk_19A44E96C);
  result = sub_19A306A54(&qword_1EE399458, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueEnvironmentalAudioExposureEvent, (uint64_t)&unk_19A44E930);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340A88(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399460, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueHeadphoneAudioExposureEvent, (uint64_t)&unk_19A44E8EC);
  result = sub_19A306A54(&qword_1EE399468, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueHeadphoneAudioExposureEvent, (uint64_t)&unk_19A44E8B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340AE4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399470, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueLowCardioFitnessEvent, (uint64_t)&unk_19A44E86C);
  result = sub_19A306A54(&qword_1EE399478, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueLowCardioFitnessEvent, (uint64_t)&unk_19A44E830);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340B40(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399480, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueMenstrualFlow, (uint64_t)&unk_19A44E7EC);
  result = sub_19A306A54(&qword_1EE399488, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueMenstrualFlow, (uint64_t)&unk_19A44E7B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340B9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE399490, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueOvulationTestResult, (uint64_t)&unk_19A44E76C);
  result = sub_19A306A54(&qword_1EE399498, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueOvulationTestResult, (uint64_t)&unk_19A44E730);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340BF8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3994A0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePregnancyTestResult, (uint64_t)&unk_19A44E6EC);
  result = sub_19A306A54(&qword_1EE3994A8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePregnancyTestResult, (uint64_t)&unk_19A44E6B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340C54(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3994B0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePresence, (uint64_t)&unk_19A44E66C);
  result = sub_19A306A54(&qword_1EE3994B8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValuePresence, (uint64_t)&unk_19A44E630);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340CB0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3994C0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueProgesteroneTestResult, (uint64_t)&unk_19A44E5EC);
  result = sub_19A306A54(&qword_1EE3994C8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueProgesteroneTestResult, (uint64_t)&unk_19A44E5B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340D0C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3994D0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSeverity, (uint64_t)&unk_19A44E56C);
  result = sub_19A306A54(&qword_1EE3994D8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSeverity, (uint64_t)&unk_19A44E530);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340D68(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54((unint64_t *)&unk_1EE398A80, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_19A44E4EC);
  result = sub_19A306A54(&qword_1EE3994E0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueSleepAnalysis, (uint64_t)&unk_19A44E4B0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_19A340DC4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_19A306A54(&qword_1EE3994E8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueVaginalBleeding, (uint64_t)&unk_19A44E46C);
  result = sub_19A306A54(qword_1EE3994F0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueVaginalBleeding, (uint64_t)&unk_19A44E430);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t HKQueryAsyncStream.makeAsyncIterator()()
{
  sub_19A305E34();
  sub_19A3535BC();
  return sub_19A353598();
}

uint64_t HKQueryAsyncStream.init(healthStore:queryBuilder:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  sub_19A305E34();
  v8 = sub_19A353568();
  MEMORY[0x1E0C80A78](v8);
  v12 = a4;
  v13 = a2;
  v14 = a3;
  v15 = a1;
  sub_19A341010((uint64_t)&v11[-v9]);
  sub_19A3535C8();

  return swift_release();
}

void sub_19A340F38(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4, uint64_t a5)
{
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;

  v7 = (void *)a2();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a5;
  v8[3] = a4;
  v8[4] = v7;
  sub_19A305E34();
  sub_19A35358C();
  v9 = a4;
  v10 = v7;
  sub_19A35355C();
  objc_msgSend(v9, sel_executeQuery_, v10);

}

void sub_19A341004(uint64_t a1)
{
  uint64_t v1;

  sub_19A340F38(a1, *(uint64_t (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_19A341010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0DF0A50];
  sub_19A305E34();
  v3 = sub_19A353568();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void sub_19A341078()
{
  JUMPOUT(0x19AEC7FB0);
}

uint64_t sub_19A341088(uint64_t a1)
{
  uint64_t v1;

  HKQueryAsyncStream.makeAsyncIterator()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_19A3410B8()
{
  uint64_t result;
  unint64_t v1;

  sub_19A305E34();
  result = sub_19A3535BC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_19A34113C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_19A34119C(uint64_t a1)
{
  uint64_t v2;

  sub_19A305E34();
  v2 = sub_19A3535BC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_19A3411EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_19A341254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_19A3412BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_19A341324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_19A34138C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A341398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_19A3413F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A341404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A305E34();
  v4 = sub_19A3535BC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for HKQueryAsyncStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKQueryAsyncStream);
}

uint64_t sub_19A341474()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_19A3414A0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 24), sel_stopQuery_, *(_QWORD *)(v0 + 32));
}

Swift::Bool_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.BOOL(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  void *v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_19A353400();
  v10[0] = 0;
  v3 = objc_msgSend(v1, sel__numberWithErrorNoDataForKey_error_, v2, v10);

  if (v3)
  {
    v4 = v10[0];
    LOBYTE(v5) = objc_msgSend(v3, sel_BOOLValue);

  }
  else
  {
    v6 = v10[0];
    v7 = (void *)sub_19A352ED8();

    swift_willThrow();
    v8 = (void *)sub_19A352ECC();
    v5 = objc_msgSend(v8, sel_hk_isHealthKitErrorWithCode_, 11);

    if (v5)
    {

      LOBYTE(v5) = 2;
    }
    else
    {
      swift_willThrow();
    }
  }
  return (Swift::Bool_optional)v5;
}

void *HKKeyValueDomain.data(for:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned __int8 v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = (void *)sub_19A353400();
  v9[0] = 0;
  v2 = objc_msgSend(v0, sel__dataWithErrorNoDataForKey_error_, v1, v9);

  v3 = v9[0];
  if (v2)
  {
    v4 = (void *)sub_19A352F20();

  }
  else
  {
    v5 = v3;
    v6 = (void *)sub_19A352ED8();

    swift_willThrow();
    v4 = (void *)sub_19A352ECC();
    v7 = objc_msgSend(v4, sel_hk_isHealthKitErrorWithCode_, 11);

    if ((v7 & 1) != 0)
    {

      return 0;
    }
    else
    {
      swift_willThrow();
    }
  }
  return v4;
}

void HKKeyValueDomain.date(for:)(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  id v14[2];

  v2 = v1;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_19A353400();
  v14[0] = 0;
  v5 = objc_msgSend(v2, sel__dateWithErrorNoDataForKey_error_, v4, v14);

  v6 = v14[0];
  if (v5)
  {
    sub_19A352FA4();
    v7 = v6;

    v8 = sub_19A352FD4();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 0, 1, v8);
  }
  else
  {
    v9 = v14[0];
    v10 = (void *)sub_19A352ED8();

    swift_willThrow();
    v11 = (void *)sub_19A352ECC();
    v12 = objc_msgSend(v11, sel_hk_isHealthKitErrorWithCode_, 11);

    if ((v12 & 1) != 0)
    {
      v13 = sub_19A352FD4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);

    }
    else
    {
      swift_willThrow();
    }
  }
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.integer(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  Swift::Bool v8;
  Swift::Int v9;
  id v10[2];
  Swift::Int_optional result;

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_19A353400();
  v10[0] = 0;
  v3 = objc_msgSend(v1, sel__numberWithErrorNoDataForKey_error_, v2, v10);

  if (v3)
  {
    v4 = v10[0];
    v5 = objc_msgSend(v3, sel_integerValue);

  }
  else
  {
    v6 = v10[0];
    v7 = (void *)sub_19A352ED8();

    swift_willThrow();
    v5 = (id)sub_19A352ECC();
    LODWORD(v6) = objc_msgSend(v5, sel_hk_isHealthKitErrorWithCode_, 11);

    if (!(_DWORD)v6)
    {
      swift_willThrow();
      goto LABEL_6;
    }

    v5 = 0;
  }
  v8 = v3 == 0;
LABEL_6:
  v9 = (Swift::Int)v5;
  result.value = v9;
  result.is_nil = v8;
  return result;
}

NSNumber_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.number(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  Swift::Bool v5;
  void *v6;
  void *v7;
  objc_class *v8;
  id v9[2];
  NSNumber_optional result;

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_19A353400();
  v9[0] = 0;
  v3 = objc_msgSend(v1, sel__numberWithErrorNoDataForKey_error_, v2, v9);

  v4 = v9[0];
  if (!v3)
  {
    v6 = v4;
    v7 = (void *)sub_19A352ED8();

    swift_willThrow();
    v3 = (id)sub_19A352ECC();
    LOBYTE(v6) = objc_msgSend(v3, sel_hk_isHealthKitErrorWithCode_, 11);

    if ((v6 & 1) != 0)
    {

      v3 = 0;
    }
    else
    {
      swift_willThrow();
    }
  }
  v8 = (objc_class *)v3;
  result.value.super.super.isa = v8;
  result.is_nil = v5;
  return result;
}

void HKKeyValueDomain.propertyListValue(for:)(_OWORD *a1@<X8>)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10[2];

  v2 = v1;
  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_19A353400();
  v10[0] = 0;
  v5 = objc_msgSend(v2, sel__propertyListValueWithErrorNoDataForKey_error_, v4, v10);

  v6 = v10[0];
  if (v5)
  {
    sub_19A35379C();
    swift_unknownObjectRelease();
  }
  else
  {
    v7 = v6;
    v8 = (void *)sub_19A352ED8();

    swift_willThrow();
    v9 = (void *)sub_19A352ECC();
    LOBYTE(v7) = objc_msgSend(v9, sel_hk_isHealthKitErrorWithCode_, 11);

    if ((v7 & 1) != 0)
    {
      *a1 = 0u;
      a1[1] = 0u;

    }
    else
    {
      swift_willThrow();
    }
  }
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.string(for:)(Swift::String a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String_optional result;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)sub_19A353400();
  v14[0] = 0;
  v3 = objc_msgSend(v1, sel__stringWithErrorNoDataForKey_error_, v2, v14);

  v4 = v14[0];
  if (v3)
  {
    v5 = (void *)sub_19A353430();
    v7 = v6;
    v8 = v4;

  }
  else
  {
    v9 = v14[0];
    v10 = (void *)sub_19A352ED8();

    swift_willThrow();
    v5 = (void *)sub_19A352ECC();
    v7 = objc_msgSend(v5, sel_hk_isHealthKitErrorWithCode_, 11);

    if ((v7 & 1) != 0)
    {

      v5 = 0;
      v7 = 0;
    }
    else
    {
      swift_willThrow();
    }
  }
  v11 = (uint64_t)v5;
  v12 = v7;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.setBool(_:forKey:)(Swift::Bool_optional _, Swift::String forKey)
{
  void *v2;
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  if (_.value == 2)
    v4 = 0;
  else
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, _.value);
  v5 = (void *)sub_19A353400();
  v9[0] = 0;
  v6 = objc_msgSend(v2, sel_setNumber_forKey_error_, v4, v5, v9);

  if (v6)
  {
    v7 = v9[0];
  }
  else
  {
    v8 = v9[0];
    sub_19A352ED8();

    swift_willThrow();
  }
}

void HKKeyValueDomain.setBool(_:forKey:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[6];

  if (a1 == 2)
    v9 = 0;
  else
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
  v10 = (void *)sub_19A353400();
  v12[4] = a4;
  v12[5] = a5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_19A341ECC;
  v12[3] = &block_descriptor_21;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_setNumber_forKey_completion_, v9, v10, v11);
  _Block_release(v11);

}

void sub_19A341ECC(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HKKeyValueDomain.setInteger(_:forKey:)(Swift::Int_optional _, Swift::String forKey)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  if (_.is_nil)
    v3 = 0;
  else
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, _.value);
  v4 = (void *)sub_19A353400();
  v8[0] = 0;
  v5 = objc_msgSend(v2, sel_setNumber_forKey_error_, v3, v4, v8);

  if (v5)
  {
    v6 = v8[0];
  }
  else
  {
    v7 = v8[0];
    sub_19A352ED8();

    swift_willThrow();
  }
}

void HKKeyValueDomain.setInteger(_:forKey:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[6];

  if ((a2 & 1) != 0)
    v9 = 0;
  else
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, a1);
  v10 = (void *)sub_19A353400();
  v12[4] = a5;
  v12[5] = a6;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_19A341ECC;
  v12[3] = &block_descriptor_3;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_setNumber_forKey_completion_, v9, v10, v11);
  _Block_release(v11);

}

uint64_t sub_19A342150()
{
  sub_19A306A54(&qword_1EE396DB8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD30);
  return sub_19A3534A8();
}

uint64_t sub_19A3421C4()
{
  sub_19A306A54(&qword_1EE396DB8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_19A44DD30);
  return sub_19A353490();
}

uint64_t sub_19A342228()
{
  sub_19A306A54(&qword_1EE396DD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DE70);
  return sub_19A3534A8();
}

uint64_t sub_19A34229C()
{
  sub_19A306A54(&qword_1EE396DD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_19A44DE70);
  return sub_19A353490();
}

uint64_t sub_19A342300()
{
  sub_19A306A54(&qword_1EE396DE8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44DFB0);
  return sub_19A3534A8();
}

uint64_t sub_19A342374()
{
  sub_19A306A54(&qword_1EE396DE8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_19A44DFB0);
  return sub_19A353490();
}

uint64_t HKSleepDaySummaryQueryOptions.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t OptionsFromStringRepresentation;
  void *v5;
  _QWORD v6[4];

  OptionsFromStringRepresentation = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B74();
  if (!v1)
  {
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    sub_19A353ACC();
    v5 = (void *)sub_19A353400();
    swift_bridgeObjectRelease();
    OptionsFromStringRepresentation = HKMakeSleepDaySummaryQueryOptionsFromStringRepresentation(v5);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return OptionsFromStringRepresentation;
}

uint64_t HKSleepDaySummaryQueryOptions.encode(to:)(_QWORD *a1, char a2)
{
  __CFString *v3;
  _BYTE v5[24];
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B8C();
  v3 = HKSleepDaySummaryQueryOptionsStringRepresentation(a2);
  sub_19A353430();

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_19A353AD8();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_19A3425A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  uint64_t OptionsFromStringRepresentation;
  uint64_t result;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B74();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  sub_19A353ACC();
  v5 = (void *)sub_19A353400();
  swift_bridgeObjectRelease();
  OptionsFromStringRepresentation = HKMakeSleepDaySummaryQueryOptionsFromStringRepresentation(v5);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = OptionsFromStringRepresentation;
  return result;
}

uint64_t sub_19A342684(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __CFString *v3;
  _BYTE v5[24];
  uint64_t v6;

  v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_19A353B8C();
  v3 = HKSleepDaySummaryQueryOptionsStringRepresentation(v2);
  sub_19A353430();

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_19A353AD8();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

id static HKSamplePredicate.phq9Assessment(_:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  __CFString *v4;
  id result;
  id v6;

  v3 = objc_allocWithZone((Class)HKScoredAssessmentType);
  v4 = CFSTR("HKScoredAssessmentTypeIdentifierPHQ9");
  result = objc_msgSend(v3, sel_initWithIdentifier_, v4);
  if (result)
  {
    v6 = result;

    *a2 = v6;
    a2[1] = a1;
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKPHQ9Assessment.init(date:answers:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;

  v6 = (void *)sub_19A352F5C();
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    sub_19A35391C();
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      sub_19A353628();
      sub_19A3538F8();
      sub_19A353928();
      sub_19A353934();
      sub_19A353904();
      v8 = v9;
    }
    while (v7 != v9);
  }
  swift_bridgeObjectRelease();
  sub_19A332704();
  v10 = (void *)sub_19A3534C0();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v11 = (void *)sub_19A35331C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDate_answers_metadata_, v6, v10, v11);

  v13 = sub_19A352FD4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

uint64_t HKPHQ9Assessment.answers.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;

  v1 = objc_msgSend(v0, sel_answers);
  sub_19A332704();
  v2 = sub_19A3534CC();

  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_15:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  result = sub_19A3539B8();
  v3 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x19AEC6A20](v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, sel_integerValue);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_19A3148FC(0, v6[2] + 1, 1, v6);
      v11 = v6[2];
      v10 = v6[3];
      if (v11 >= v10 >> 1)
        v6 = sub_19A3148FC((_QWORD *)(v10 > 1), v11 + 1, 1, v6);
      ++v5;
      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
    }
    while (v3 != v5);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t HKSleepDaySummaryQueryDescriptor.morningIndexRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t HKSleepDaySummaryQueryDescriptor.options.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t HKSleepDaySummaryQueryDescriptor.ascending.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HKSleepDaySummaryQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t HKSleepDaySummaryQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

__n128 HKSleepDaySummaryQueryDescriptor.queryAttributes.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  result = v4;
  v1[3] = v4;
  v1[4].n128_u64[0] = v2;
  return result;
}

uint64_t (*HKSleepDaySummaryQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

void *HKSleepDaySummaryQueryDescriptor.cacheSettings.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

void HKSleepDaySummaryQueryDescriptor.cacheSettings.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
}

uint64_t (*HKSleepDaySummaryQueryDescriptor.cacheSettings.modify())()
{
  return nullsub_1;
}

uint64_t HKSleepDaySummaryQueryDescriptor.calendarOverrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKSleepDaySummaryQueryDescriptor();
  return sub_19A30B600(v1 + *(int *)(Descriptor + 40), a1, (uint64_t (*)(_QWORD))sub_19A342C5C);
}

uint64_t type metadata accessor for HKSleepDaySummaryQueryDescriptor()
{
  uint64_t result;

  result = qword_1EE3995F8;
  if (!qword_1EE3995F8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_19A342C5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EE397F58)
  {
    sub_19A3530B8();
    v0 = sub_19A353760();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EE397F58);
  }
}

uint64_t HKSleepDaySummaryQueryDescriptor.calendarOverrides.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKSleepDaySummaryQueryDescriptor() + 40);
  return sub_19A342CE0(a1, v3);
}

uint64_t sub_19A342CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A342C5C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*HKSleepDaySummaryQueryDescriptor.calendarOverrides.modify())()
{
  type metadata accessor for HKSleepDaySummaryQueryDescriptor();
  return nullsub_1;
}

uint64_t HKSleepDaySummaryQueryDescriptor.init(morningIndexRange:options:ascending:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(a7 + 56) = 0;
  *(_OWORD *)(a7 + 64) = xmmword_19A4521A0;
  v14 = a7 + *(int *)(type metadata accessor for HKSleepDaySummaryQueryDescriptor() + 40);
  v15 = sub_19A3530B8();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 24) = a4;
  *(_QWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 40) = a6 & 1;
  *(_QWORD *)(a7 + 16) = a3;
  return result;
}

uint64_t HKSleepDaySummaryQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch();
}

uint64_t sub_19A342E0C()
{
  _QWORD *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[11];
  v1 = (uint64_t *)v0[12];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AA40;
  v3 = swift_continuation_init();
  sub_19A342E70(v3, v1, v2);
  return swift_continuation_await();
}

void sub_19A342E70(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t Descriptor;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD aBlock[6];

  sub_19A342C5C();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v10 = a2[1];
  v11 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a2 + 40))
    v12 = 0;
  else
    v12 = a2[4];
  v13 = a2[2];
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  v15 = objc_allocWithZone((Class)HKSleepDaySummaryQuery);
  aBlock[4] = sub_19A343A40;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19A343A48;
  aBlock[3] = &block_descriptor_22;
  v16 = _Block_copy(aBlock);
  v17 = objc_msgSend(v15, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v9, v10, v11, v12, v13, v16);
  _Block_release(v16);
  swift_release();
  v18 = a2[8];
  if (a2[7])
  {
    swift_bridgeObjectRetain();
    v19 = (void *)sub_19A353400();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v17, sel_setDebugIdentifier_, v19);

  objc_msgSend(v17, sel_setQualityOfService_, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setCacheSettings_, a2[9]);
  Descriptor = type metadata accessor for HKSleepDaySummaryQueryDescriptor();
  sub_19A30B600((uint64_t)a2 + *(int *)(Descriptor + 40), (uint64_t)v8, (uint64_t (*)(_QWORD))sub_19A342C5C);
  v21 = sub_19A3530B8();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v21) != 1)
  {
    v23 = (void *)sub_19A353070();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  }
  objc_msgSend(v17, sel_setCalendarOverrides_, v23);

  objc_msgSend(a3, sel_executeQuery_, v17);
}

uint64_t sub_19A3430C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;

  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a4 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v6 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_19A343B2C(MEMORY[0x1E0DEE9D8]);
      sub_19A30A01C();
      sub_19A352EB4();
      v6 = v9;
    }
    sub_19A305E34();
    swift_allocError();
    *v7 = v6;
    v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_19A3431A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_19A3431C4()
{
  _QWORD *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[12];
  v1 = (uint64_t *)v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_19A30AE00;
  v3 = swift_continuation_init();
  sub_19A342E70(v3, v1, v2);
  return swift_continuation_await();
}

_QWORD *initializeBufferWithCopyOfBuffer for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v5 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v5;
    v6 = (void *)a2[9];
    v7 = *(int *)(a3 + 40);
    v8 = (char *)a2 + v7;
    v9 = (void *)(a1 + v7);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v6;
    v10 = sub_19A3530B8();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    v13 = v6;
    if (v12(v8, 1, v10))
    {
      sub_19A342C5C();
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v9, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();

  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_19A3530B8();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  id v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(void **)(a2 + 72);
  v6 = *(int *)(a3 + 40);
  v7 = (const void *)(a2 + v6);
  v8 = (void *)(a1 + v6);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  v9 = sub_19A3530B8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  v12 = v5;
  if (v11(v7, 1, v9))
  {
    sub_19A342C5C();
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v8, v7, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithCopy for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v7 = *(void **)(a1 + 72);
  v8 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = v8;

  v10 = *(int *)(a3 + 40);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_19A3530B8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_19A342C5C();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 40);
  v6 = (const void *)(a2 + v5);
  v7 = (void *)(a1 + v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  v8 = sub_19A3530B8();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8))
  {
    sub_19A342C5C();
    memcpy(v7, v6, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v7, v6, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for HKSleepDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 72);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;

  v9 = *(int *)(a3 + 40);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = sub_19A3530B8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_19A342C5C();
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKSleepDaySummaryQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A343880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    sub_19A342C5C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for HKSleepDaySummaryQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_19A343914(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 56) = a2;
  }
  else
  {
    sub_19A342C5C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_19A343988()
{
  unint64_t v0;

  sub_19A342C5C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_19A343A30()
{
  return swift_deallocObject();
}

uint64_t sub_19A343A40(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_19A3430C4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_19A343A48(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_19A343AF0();
    v5 = sub_19A3534CC();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

unint64_t sub_19A343AF0()
{
  unint64_t result;

  result = qword_1EE399648;
  if (!qword_1EE399648)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EE399648);
  }
  return result;
}

unint64_t sub_19A343B2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_19A33DCA4();
  v2 = sub_19A3539D0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_19A30B600(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_19A33DC3C);
    v7 = v15;
    v8 = v16;
    result = sub_19A343C5C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_19A317E10(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_19A343C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_19A353B38();
  sub_19A353448();
  v4 = sub_19A353B68();
  return sub_19A343CC0(a1, a2, v4);
}

unint64_t sub_19A343CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_19A353AC0() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_19A353AC0() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_19A353AC0() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void _HKLogDroppedError_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl(&dword_19A0E6000, a2, OS_LOG_TYPE_ERROR, "Dropping error because caller did not provide an errorOut pointer: %{public}@", (uint8_t *)&v2, 0xCu);
}

void _HKLogDroppedErrorWithReason_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "%{public}@: %{public}@ (Dropping error because caller did not provide an errorOut pointer)", (uint8_t *)&v3, 0x16u);
}

void HKDescriptionForAnalyticsFileWithName_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138543618;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2114;
  *(_QWORD *)&v3[14] = *(_QWORD *)(*(_QWORD *)a2 + 40);
  OUTLINED_FUNCTION_0(&dword_19A0E6000, a2, a3, "Error fetching URL for analytics file with name '%{public}@': %{public}@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16], *MEMORY[0x1E0C80C00]);
}

void HKDescriptionForAnalyticsFileWithName_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138543618;
  *(_QWORD *)&v3[4] = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_WORD *)&v3[12] = 2114;
  *(_QWORD *)&v3[14] = *(_QWORD *)(*(_QWORD *)a2 + 40);
  OUTLINED_FUNCTION_0(&dword_19A0E6000, a2, a3, "Error reading analytics file at '%{public}@': %{public}@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16], *MEMORY[0x1E0C80C00]);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKWatchAppInstallationManager.m"), 25, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void NanoRegistryLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKWatchAppInstallationManager.m"), 24, CFSTR("%s"), *a1);

  __break(1u);
}

void __getgetSleepFeatureAvailabilityProvidingSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SleepLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKFeatureAvailabilityHealthDataSource.m"), 24, CFSTR("%s"), *a1);

  __break(1u);
}

void __getRDEstimateClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getRDEstimateClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKRegulatoryDomainManager.m"), 37, CFSTR("Unable to find class %s"), "RDEstimate");

  __break(1u);
}

void RegulatoryDomainLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *RegulatoryDomainLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKRegulatoryDomainManager.m"), 36, CFSTR("%s"), *a1);

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_0()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKNanoRegistryPairingAndSwitchingNotificationDataSource.m"), 20, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void NanoRegistryLibrary_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKNanoRegistryPairingAndSwitchingNotificationDataSource.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void getNRDevicePropertyProductType_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRDevicePropertyProductType(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKNanoRegistryDeviceUtility.m"), 28, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void NanoRegistryLibrary_cold_1_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKNanoRegistryDeviceUtility.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKNanoRegistryDeviceUtility.m"), 21, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification(void)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKFeatureAvailabilityRequirementEvaluationDataSource+NanoRegistry.m"), 22, CFSTR("%s"), dlerror());

  __break(1u);
}

void __getNRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotificationSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKFeatureAvailabilityRequirementEvaluationDataSource+NanoRegistry.m"), 20, CFSTR("%s"), *a1);

  __break(1u);
}

void HKIsFitnessTrackingEnabledWithUserDefaults_cold_1(void *a1, NSObject *a2)
{
  int v3;
  const __CFString *v4;
  int v5;
  const char *v6;
  __int16 v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(a1, "BOOLValue");
  v4 = CFSTR(" NOT");
  if (v3)
    v4 = &stru_1E37FD4C0;
  v5 = 136315394;
  v6 = "HKIsFitnessTrackingEnabledWithUserDefaults";
  v7 = 2112;
  v8 = v4;
  _os_log_debug_impl(&dword_19A0E6000, a2, OS_LOG_TYPE_DEBUG, "[%s]: is%@ granted permission by TCC", (uint8_t *)&v5, 0x16u);
}

void HKIsFitnessTrackingEnabledWithUserDefaults_cold_2(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136315138;
  v2 = "HKIsFitnessTrackingEnabledWithUserDefaults";
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "[%s]: TCCAccessGetOverride for motion failed", (uint8_t *)&v1, 0xCu);
}

void HKIsFitnessTrackingEnabledWithUserDefaults_cold_3(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136315138;
  v2 = "HKIsFitnessTrackingEnabledWithUserDefaults";
  _os_log_debug_impl(&dword_19A0E6000, log, OS_LOG_TYPE_DEBUG, "[%s]: Checking TCC authorization for bundle", (uint8_t *)&v1, 0xCu);
}

void _HKCreateRecalibrateEstimatesPresentationController_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "Error: UIApplication class cannot be found, will not soft-link HealthUI.framework", v1, 2u);
}

void _HKCreateRecalibrateEstimatesPresentationController_cold_2(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HealthUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKRecalibrateEstimatesPresentationController.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void _HKCreateRecalibrateEstimatesPresentationController_cold_3(os_log_t log)
{
  int v1;
  const __CFString *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 138543362;
  v2 = CFSTR("HKRecalibrateEstimatesPresentationController");
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "Error: Failed to find class %{public}@", (uint8_t *)&v1, 0xCu);
}

void _HKCreateRecalibrateEstimatesPresentationController_cold_4(uint64_t a1, void *a2, Protocol *a3)
{
  NSObject *v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  NSStringFromProtocol(a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138543618;
  v8 = a1;
  v9 = 2114;
  v10 = v6;
  _os_log_error_impl(&dword_19A0E6000, v5, OS_LOG_TYPE_ERROR, "Error: %{public}@ does not conform to %{public}@", (uint8_t *)&v7, 0x16u);

}

void HKIntervalTree<double>::_rightRotate()
{
  __assert_rtn("_rightRotate", "HKIntervalMask.h", 317, "root->left");
}

void HKIntervalTree<double>::_leftRotate()
{
  __assert_rtn("_leftRotate", "HKIntervalMask.h", 346, "root->right");
}

void _HKCreateAuthorizationPresentationController_cold_2(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HealthUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKAuthorizationPresentationController.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void _HKCreateAuthorizationPresentationController_cold_3(os_log_t log)
{
  int v1;
  const __CFString *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 138543362;
  v2 = CFSTR("HKAuthorizationPresentationController");
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "Error: Failed to find class %{public}@", (uint8_t *)&v1, 0xCu);
}

void getNRDevicePropertySystemBuildVersion_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRDevicePropertySystemBuildVersion(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKActiveWatchRemoteFeatureAvailabilityDataSource.m"), 33, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKActiveWatchRemoteFeatureAvailabilityDataSource.m"), 26, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void NanoRegistryLibrary_cold_1_2(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKActiveWatchRemoteFeatureAvailabilityDataSource.m"), 25, CFSTR("%s"), *a1);

  __break(1u);
}

void HKCurrentOptInVersionOnDiskForOnBoardingBundle_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_fault_impl(&dword_19A0E6000, log, OS_LOG_TYPE_FAULT, "Failed to read %{public}@ OnBoardingBundle: %{public}@", (uint8_t *)&v3, 0x16u);
}

void _HKCreateObjectPickerPresentationController_cold_2(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HealthUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKObjectPickerPresentationController.m"), 14, CFSTR("%s"), *a1);

  __break(1u);
}

void _HKCreateObjectPickerPresentationController_cold_3(os_log_t log)
{
  int v1;
  const __CFString *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 138543362;
  v2 = CFSTR("HKObjectPickerPresentationController");
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "Error: Failed to find class %{public}@", (uint8_t *)&v1, 0xCu);
}

void HKSupportedMetricsForMachineType_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_13(&dword_19A0E6000, a1, a3, "Rowers are unsupported", a5, a6, a7, a8, 0);
}

void HKSupportedMetricsForMachineType_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_13(&dword_19A0E6000, a1, a3, "Unknown fitness machine type", a5, a6, a7, a8, 0);
}

void NanoRegistryLibrary_cold_1_3(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKImportExclusionDeviceDataSource.m"), 18, CFSTR("%s"), *a1);

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_3()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKImportExclusionDeviceDataSource.m"), 19, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_4()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKWristDetectionSettingManager.m"), 24, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void NanoRegistryLibrary_cold_1_4(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKWristDetectionSettingManager.m"), 23, CFSTR("%s"), *a1);

  __break(1u);
}

void __getASDAppQueryClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppStoreDaemonLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKWatchAppAvailability.m"), 21, CFSTR("%s"), *a1);

  __break(1u);
}

void __getASDAppQueryClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getASDAppQueryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKWatchAppAvailability.m"), 22, CFSTR("Unable to find class %s"), "ASDAppQuery");

  __break(1u);
}

void getNRRawVersionFromString_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "uint32_t getNRRawVersionFromString(NSString *__strong)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKHeartRhythmAvailability.m"), 76, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void getNRDevicePropertyName_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRDevicePropertyName(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKHeartRhythmAvailability.m"), 66, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void getNRDevicePropertyIsAltAccount_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRDevicePropertyIsAltAccount(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKHeartRhythmAvailability.m"), 82, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void getNRDevicePropertySystemVersion_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString *getNRDevicePropertySystemVersion(void)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKHeartRhythmAvailability.m"), 72, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void getNRVersionIsGreaterThanOrEqual_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL getNRVersionIsGreaterThanOrEqual(uint32_t, uint32_t)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("HKHeartRhythmAvailability.m"), 77, CFSTR("%s"), OUTLINED_FUNCTION_0_6());

  __break(1u);
}

void NanoRegistryLibrary_cold_1_5(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKHeartRhythmAvailability.m"), 62, CFSTR("%s"), *a1);

  __break(1u);
}

void __getNRPairedDeviceRegistryClass_block_invoke_cold_1_5()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKHeartRhythmAvailability.m"), 74, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");

  __break(1u);
}

void __getASDSystemAppMetadataClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getASDSystemAppMetadataClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKHeartRhythmAvailability.m"), 94, CFSTR("Unable to find class %s"), "ASDSystemAppMetadata");

  __break(1u);
}

void AppStoreDaemonLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppStoreDaemonLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKHeartRhythmAvailability.m"), 92, CFSTR("%s"), *a1);

  __break(1u);
}

void __getASDInstallAppsClass_block_invoke_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getASDInstallAppsClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKHeartRhythmAvailability.m"), 93, CFSTR("Unable to find class %s"), "ASDInstallApps");

  __break(1u);
}

void _HKMedicalIDSimNumberForContact_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_19A0E6000, log, OS_LOG_TYPE_ERROR, "CTXPCServiceSubscriptionContext returned nil when fetching sim phone number.", v1, 2u);
}

void _HKMedicalIDSimNumberForContact_cold_2(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2(&dword_19A0E6000, a2, a3, "Failed to get sim Phone Number with error, %{public}@", a5, a6, a7, a8, 2u);
}

void __getGEOLocationShifterClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void * _Nonnull GeoServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("_HKLocationShifter.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void __getGEOLocationShifterClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class  _Nonnull getGEOLocationShifterClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("_HKLocationShifter.m"), 20, CFSTR("Unable to find class %s"), "GEOLocationShifter");

  __break(1u);
}

void HKSafeConcept_cold_1()
{
  __assert_rtn("HKSafeConcept", "HKConceptSynthesizer.m", 41, "codingCollection");
}

void __getSOSManagerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SOSLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKHealthChecklistUtilities.m"), 20, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSOSManagerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSOSManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKHealthChecklistUtilities.m"), 21, CFSTR("Unable to find class %s"), "SOSManager");

  __break(1u);
}

void getNRVersionIsGreaterThanOrEqual_cold_1_0()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL getNRVersionIsGreaterThanOrEqual(uint32_t, uint32_t)");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("HKRegulatoryRegions.m"), 20, CFSTR("%s"), dlerror());

  __break(1u);
}

void __getNRVersionIsGreaterThanOrEqualSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NanoRegistryLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKRegulatoryRegions.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

uint64_t sub_19A352C20()
{
  return MEMORY[0x1E0CADE58]();
}

uint64_t sub_19A352C2C()
{
  return MEMORY[0x1E0CADFE0]();
}

uint64_t sub_19A352C38()
{
  return MEMORY[0x1E0CAE390]();
}

uint64_t sub_19A352C44()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_19A352C50()
{
  return MEMORY[0x1E0CAE530]();
}

uint64_t sub_19A352C5C()
{
  return MEMORY[0x1E0CAE568]();
}

uint64_t sub_19A352C68()
{
  return MEMORY[0x1E0CAE570]();
}

uint64_t sub_19A352C74()
{
  return MEMORY[0x1E0CAE578]();
}

uint64_t sub_19A352C80()
{
  return MEMORY[0x1E0CAE580]();
}

uint64_t sub_19A352C8C()
{
  return MEMORY[0x1E0CAE590]();
}

uint64_t sub_19A352C98()
{
  return MEMORY[0x1E0CAE598]();
}

uint64_t sub_19A352CA4()
{
  return MEMORY[0x1E0CAE5A0]();
}

uint64_t sub_19A352CB0()
{
  return MEMORY[0x1E0CAE5D0]();
}

uint64_t sub_19A352CBC()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_19A352CC8()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_19A352CD4()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_19A352CE0()
{
  return MEMORY[0x1E0CAE9A0]();
}

uint64_t sub_19A352CEC()
{
  return MEMORY[0x1E0CAE9B8]();
}

uint64_t sub_19A352CF8()
{
  return MEMORY[0x1E0CAE9C8]();
}

uint64_t sub_19A352D04()
{
  return MEMORY[0x1E0CAE9F0]();
}

uint64_t sub_19A352D10()
{
  return MEMORY[0x1E0CAEA10]();
}

uint64_t sub_19A352D1C()
{
  return MEMORY[0x1E0CAEA20]();
}

uint64_t sub_19A352D28()
{
  return MEMORY[0x1E0CAEA80]();
}

uint64_t sub_19A352D34()
{
  return MEMORY[0x1E0CAEAA8]();
}

uint64_t sub_19A352D40()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t sub_19A352D4C()
{
  return MEMORY[0x1E0CAEB88]();
}

uint64_t sub_19A352D58()
{
  return MEMORY[0x1E0CAED48]();
}

uint64_t sub_19A352D64()
{
  return MEMORY[0x1E0CAEDF8]();
}

uint64_t sub_19A352D70()
{
  return MEMORY[0x1E0CAEE20]();
}

uint64_t sub_19A352D7C()
{
  return MEMORY[0x1E0CAEF10]();
}

uint64_t sub_19A352D88()
{
  return MEMORY[0x1E0CAF120]();
}

uint64_t sub_19A352D94()
{
  return MEMORY[0x1E0CAF130]();
}

uint64_t sub_19A352DA0()
{
  return MEMORY[0x1E0CAF138]();
}

uint64_t sub_19A352DAC()
{
  return MEMORY[0x1E0CAF150]();
}

uint64_t sub_19A352DB8()
{
  return MEMORY[0x1E0CAF160]();
}

uint64_t sub_19A352DC4()
{
  return MEMORY[0x1E0CAF1A0]();
}

uint64_t sub_19A352DD0()
{
  return MEMORY[0x1E0CAF240]();
}

uint64_t sub_19A352DDC()
{
  return MEMORY[0x1E0CAF2C0]();
}

uint64_t sub_19A352DE8()
{
  return MEMORY[0x1E0CAF328]();
}

uint64_t sub_19A352DF4()
{
  return MEMORY[0x1E0CAF548]();
}

uint64_t sub_19A352E00()
{
  return MEMORY[0x1E0CAF570]();
}

uint64_t sub_19A352E0C()
{
  return MEMORY[0x1E0CAF5A8]();
}

uint64_t sub_19A352E18()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_19A352E24()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_19A352E30()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_19A352E3C()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_19A352E48()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_19A352E54()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_19A352E60()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_19A352E6C()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_19A352E78()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_19A352E84()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_19A352E90()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t sub_19A352E9C()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_19A352EA8()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_19A352EB4()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t sub_19A352EC0()
{
  return MEMORY[0x1E0CAF960]();
}

uint64_t sub_19A352ECC()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_19A352ED8()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_19A352EE4()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_19A352EF0()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t sub_19A352EFC()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_19A352F08()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_19A352F14()
{
  return MEMORY[0x1E0CB0220]();
}

uint64_t sub_19A352F20()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_19A352F2C()
{
  return MEMORY[0x1E0CB03B8]();
}

uint64_t sub_19A352F38()
{
  return MEMORY[0x1E0CB05A8]();
}

uint64_t sub_19A352F44()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t sub_19A352F50()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t sub_19A352F5C()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_19A352F68()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t sub_19A352F74()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t sub_19A352F80()
{
  return MEMORY[0x1E0CB0700]();
}

uint64_t sub_19A352F8C()
{
  return MEMORY[0x1E0CB0708]();
}

uint64_t sub_19A352F98()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_19A352FA4()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_19A352FB0()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_19A352FBC()
{
  return MEMORY[0x1E0CB0828]();
}

uint64_t sub_19A352FC8()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_19A352FD4()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_19A352FE0()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_19A352FEC()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_19A352FF8()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_19A353004()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_19A353010()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_19A35301C()
{
  return MEMORY[0x1E0CB0EA8]();
}

uint64_t sub_19A353028()
{
  return MEMORY[0x1E0CB0F00]();
}

uint64_t sub_19A353034()
{
  return MEMORY[0x1E0CB0F20]();
}

uint64_t sub_19A353040()
{
  return MEMORY[0x1E0CB0F28]();
}

uint64_t sub_19A35304C()
{
  return MEMORY[0x1E0CB0F38]();
}

uint64_t sub_19A353058()
{
  return MEMORY[0x1E0CB0FB0]();
}

uint64_t sub_19A353064()
{
  return MEMORY[0x1E0CB0FB8]();
}

uint64_t sub_19A353070()
{
  return MEMORY[0x1E0CB1028]();
}

uint64_t sub_19A35307C()
{
  return MEMORY[0x1E0CB1070]();
}

uint64_t sub_19A353088()
{
  return MEMORY[0x1E0CB10C8]();
}

uint64_t sub_19A353094()
{
  return MEMORY[0x1E0CB10D8]();
}

uint64_t sub_19A3530A0()
{
  return MEMORY[0x1E0CB10E0]();
}

uint64_t sub_19A3530AC()
{
  return MEMORY[0x1E0CB11B8]();
}

uint64_t sub_19A3530B8()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_19A3530C4()
{
  return MEMORY[0x1E0CB1268]();
}

uint64_t sub_19A3530D0()
{
  return MEMORY[0x1E0CB1400]();
}

uint64_t sub_19A3530DC()
{
  return MEMORY[0x1E0CB1408]();
}

uint64_t sub_19A3530E8()
{
  return MEMORY[0x1E0CB1458]();
}

uint64_t sub_19A3530F4()
{
  return MEMORY[0x1E0CB1460]();
}

uint64_t sub_19A353100()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_19A35310C()
{
  return MEMORY[0x1E0DF01F8]();
}

uint64_t sub_19A353118()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_19A353124()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_19A353130()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_19A35313C()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_19A353148()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_19A353154()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_19A353160()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_19A35316C()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_19A353178()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_19A353184()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_19A353190()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t sub_19A35319C()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_19A3531A8()
{
  return MEMORY[0x1E0D11CD8]();
}

uint64_t sub_19A3531B4()
{
  return MEMORY[0x1E0D11CF0]();
}

uint64_t sub_19A3531C0()
{
  return MEMORY[0x1E0D11CF8]();
}

uint64_t sub_19A3531CC()
{
  return MEMORY[0x1E0D11D10]();
}

uint64_t sub_19A3531D8()
{
  return MEMORY[0x1E0D11D18]();
}

uint64_t sub_19A3531E4()
{
  return MEMORY[0x1E0D11D20]();
}

uint64_t sub_19A3531F0()
{
  return MEMORY[0x1E0D11D38]();
}

uint64_t sub_19A3531FC()
{
  return MEMORY[0x1E0D11D40]();
}

uint64_t sub_19A353208()
{
  return MEMORY[0x1E0D11D48]();
}

uint64_t sub_19A353214()
{
  return MEMORY[0x1E0D11D50]();
}

uint64_t sub_19A353220()
{
  return MEMORY[0x1E0D11D58]();
}

uint64_t sub_19A35322C()
{
  return MEMORY[0x1E0D11D78]();
}

uint64_t sub_19A353238()
{
  return MEMORY[0x1E0D11D80]();
}

uint64_t sub_19A353244()
{
  return MEMORY[0x1E0D11D88]();
}

uint64_t sub_19A353250()
{
  return MEMORY[0x1E0D11DA8]();
}

uint64_t sub_19A35325C()
{
  return MEMORY[0x1E0D11DD8]();
}

uint64_t sub_19A353268()
{
  return MEMORY[0x1E0D11DE0]();
}

uint64_t sub_19A353274()
{
  return MEMORY[0x1E0D11FA0]();
}

uint64_t sub_19A353280()
{
  return MEMORY[0x1E0D11FA8]();
}

uint64_t sub_19A35328C()
{
  return MEMORY[0x1E0D11FB0]();
}

uint64_t sub_19A353298()
{
  return MEMORY[0x1E0D12380]();
}

uint64_t sub_19A3532A4()
{
  return MEMORY[0x1E0D128B0]();
}

uint64_t sub_19A3532B0()
{
  return MEMORY[0x1E0D128B8]();
}

uint64_t sub_19A3532BC()
{
  return MEMORY[0x1E0D128C0]();
}

uint64_t sub_19A3532C8()
{
  return MEMORY[0x1E0D128C8]();
}

uint64_t sub_19A3532D4()
{
  return MEMORY[0x1E0D129A0]();
}

uint64_t sub_19A3532E0()
{
  return MEMORY[0x1E0D12BA0]();
}

uint64_t sub_19A3532EC()
{
  return MEMORY[0x1E0D12BB0]();
}

uint64_t sub_19A3532F8()
{
  return MEMORY[0x1E0D12BC0]();
}

uint64_t sub_19A353304()
{
  return MEMORY[0x1E0D12BD8]();
}

uint64_t sub_19A353310()
{
  return MEMORY[0x1E0D12BE8]();
}

uint64_t sub_19A35331C()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_19A353328()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_19A353334()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_19A353340()
{
  return MEMORY[0x1E0DEA078]();
}

uint64_t sub_19A35334C()
{
  return MEMORY[0x1E0DEA088]();
}

uint64_t sub_19A353358()
{
  return MEMORY[0x1E0DEA108]();
}

uint64_t sub_19A353364()
{
  return MEMORY[0x1E0DEA158]();
}

uint64_t sub_19A353370()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_19A35337C()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_19A353388()
{
  return MEMORY[0x1E0DEA1C8]();
}

uint64_t sub_19A353394()
{
  return MEMORY[0x1E0DEA3B8]();
}

uint64_t sub_19A3533A0()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_19A3533AC()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t sub_19A3533B8()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_19A3533C4()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_19A3533D0()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_19A3533DC()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_19A3533E8()
{
  return MEMORY[0x1E0DEA4B0]();
}

uint64_t sub_19A3533F4()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_19A353400()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_19A35340C()
{
  return MEMORY[0x1E0CB1950]();
}

uint64_t sub_19A353418()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_19A353424()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_19A353430()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_19A35343C()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_19A353448()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_19A353454()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_19A353460()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_19A35346C()
{
  return MEMORY[0x1E0DEAA38]();
}

uint64_t sub_19A353478()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t sub_19A353484()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_19A353490()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_19A35349C()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_19A3534A8()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_19A3534B4()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_19A3534C0()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_19A3534CC()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_19A3534D8()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_19A3534E4()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_19A3534F0()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_19A3534FC()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_19A353508()
{
  return MEMORY[0x1E0DEAEE0]();
}

uint64_t sub_19A353514()
{
  return MEMORY[0x1E0DEAEE8]();
}

uint64_t sub_19A353520()
{
  return MEMORY[0x1E0DEAEF0]();
}

uint64_t sub_19A35352C()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_19A353538()
{
  return MEMORY[0x1E0DF06B8]();
}

uint64_t sub_19A353544()
{
  return MEMORY[0x1E0DF08C8]();
}

uint64_t sub_19A353550()
{
  return MEMORY[0x1E0DF0A30]();
}

uint64_t sub_19A35355C()
{
  return MEMORY[0x1E0DF0A40]();
}

uint64_t sub_19A353568()
{
  return MEMORY[0x1E0DF0A58]();
}

uint64_t sub_19A353574()
{
  return MEMORY[0x1E0DF0A68]();
}

uint64_t sub_19A353580()
{
  return MEMORY[0x1E0DF0A70]();
}

uint64_t sub_19A35358C()
{
  return MEMORY[0x1E0DF0A78]();
}

uint64_t sub_19A353598()
{
  return MEMORY[0x1E0DF0A88]();
}

uint64_t sub_19A3535A4()
{
  return MEMORY[0x1E0DF0AA0]();
}

uint64_t sub_19A3535B0()
{
  return MEMORY[0x1E0DF0AB0]();
}

uint64_t sub_19A3535BC()
{
  return MEMORY[0x1E0DF0AD0]();
}

uint64_t sub_19A3535C8()
{
  return MEMORY[0x1E0DF0AD8]();
}

uint64_t sub_19A3535D4()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_19A3535E0()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_19A3535EC()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_19A3535F8()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t sub_19A353604()
{
  return MEMORY[0x1E0DEB2B0]();
}

uint64_t sub_19A353610()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_19A35361C()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_19A353628()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_19A353634()
{
  return MEMORY[0x1E0DEB498]();
}

uint64_t sub_19A353640()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_19A35364C()
{
  return MEMORY[0x1E0DEB548]();
}

uint64_t sub_19A353658()
{
  return MEMORY[0x1E0DEB560]();
}

uint64_t sub_19A353664()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_19A353670()
{
  return MEMORY[0x1E0DEB5B0]();
}

uint64_t sub_19A35367C()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_19A353688()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_19A353694()
{
  return MEMORY[0x1E0DEB848]();
}

uint64_t sub_19A3536A0()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_19A3536AC()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_19A3536B8()
{
  return MEMORY[0x1E0CB1E48]();
}

uint64_t sub_19A3536C4()
{
  return MEMORY[0x1E0CB1E70]();
}

uint64_t sub_19A3536D0()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_19A3536DC()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t sub_19A3536E8()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t sub_19A3536F4()
{
  return MEMORY[0x1E0DEF9F0]();
}

uint64_t sub_19A353700()
{
  return MEMORY[0x1E0DEFA18]();
}

uint64_t sub_19A35370C()
{
  return MEMORY[0x1E0DEFA20]();
}

uint64_t sub_19A353718()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t sub_19A353724()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t sub_19A353730()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_19A35373C()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_19A353748()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_19A353754()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_19A353760()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_19A35376C()
{
  return MEMORY[0x1E0DEB958]();
}

uint64_t sub_19A353778()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_19A353784()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_19A353790()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_19A35379C()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_19A3537A8()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_19A3537B4()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_19A3537C0()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_19A3537CC()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_19A3537D8()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_19A3537E4()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_19A3537F0()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t sub_19A3537FC()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_19A353808()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_19A353814()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_19A353820()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_19A35382C()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_19A353838()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_19A353844()
{
  return MEMORY[0x1E0DEC118]();
}

uint64_t sub_19A353850()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t sub_19A35385C()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_19A353868()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_19A353874()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_19A353880()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_19A35388C()
{
  return MEMORY[0x1E0DEC268]();
}

uint64_t sub_19A353898()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_19A3538A4()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_19A3538B0()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_19A3538BC()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_19A3538C8()
{
  return MEMORY[0x1E0DEC488]();
}

uint64_t sub_19A3538D4()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_19A3538E0()
{
  return MEMORY[0x1E0DEC518]();
}

uint64_t sub_19A3538EC()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_19A3538F8()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_19A353904()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_19A353910()
{
  return MEMORY[0x1E0DEC680]();
}

uint64_t sub_19A35391C()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_19A353928()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_19A353934()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_19A353940()
{
  return MEMORY[0x1E0DEC6E0]();
}

uint64_t sub_19A35394C()
{
  return MEMORY[0x1E0DEC700]();
}

uint64_t sub_19A353958()
{
  return MEMORY[0x1E0DEC708]();
}

uint64_t sub_19A353964()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_19A353970()
{
  return MEMORY[0x1E0DEC8F8]();
}

uint64_t sub_19A35397C()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_19A353988()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_19A353994()
{
  return MEMORY[0x1E0DECBF0]();
}

uint64_t sub_19A3539A0()
{
  return MEMORY[0x1E0DECC10]();
}

uint64_t sub_19A3539AC()
{
  return MEMORY[0x1E0DECC18]();
}

uint64_t sub_19A3539B8()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_19A3539C4()
{
  return MEMORY[0x1E0DECD28]();
}

uint64_t sub_19A3539D0()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_19A3539DC()
{
  return MEMORY[0x1E0DECD58]();
}

uint64_t sub_19A3539E8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_19A3539F4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_19A353A00()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_19A353A0C()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_19A353A18()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_19A353A24()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_19A353A30()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_19A353A3C()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_19A353A48()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_19A353A54()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_19A353A60()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_19A353A6C()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_19A353A78()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_19A353A84()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_19A353A90()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_19A353A9C()
{
  return MEMORY[0x1E0DED1E8]();
}

uint64_t sub_19A353AA8()
{
  return MEMORY[0x1E0DED510]();
}

uint64_t sub_19A353AB4()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_19A353AC0()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_19A353ACC()
{
  return MEMORY[0x1E0DED628]();
}

uint64_t sub_19A353AD8()
{
  return MEMORY[0x1E0DED6C8]();
}

uint64_t sub_19A353AE4()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_19A353AF0()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_19A353AFC()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_19A353B08()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_19A353B14()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_19A353B20()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_19A353B2C()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_19A353B38()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_19A353B44()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_19A353B50()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_19A353B5C()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_19A353B68()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_19A353B74()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_19A353B80()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_19A353B8C()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t sub_19A353B98()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_19A353BA4()
{
  return MEMORY[0x1E0DEE298]();
}

uint64_t sub_19A353BB0()
{
  return MEMORY[0x1E0CB2780]();
}

uint64_t sub_19A353BBC()
{
  return MEMORY[0x1E0CB2788]();
}

uint64_t sub_19A353BC8()
{
  return MEMORY[0x1E0CB27A0]();
}

uint64_t sub_19A353BD4()
{
  return MEMORY[0x1E0CB27A8]();
}

uint64_t sub_19A353BE0()
{
  return MEMORY[0x1E0CB27B8]();
}

uint64_t sub_19A353BEC()
{
  return MEMORY[0x1E0CB27C0]();
}

uint64_t sub_19A353BF8()
{
  return MEMORY[0x1E0CB27C8]();
}

uint64_t sub_19A353C04()
{
  return MEMORY[0x1E0CB27D8]();
}

uint64_t sub_19A353C10()
{
  return MEMORY[0x1E0CB27F0]();
}

uint64_t sub_19A353C1C()
{
  return MEMORY[0x1E0CB2820]();
}

uint64_t sub_19A353C28()
{
  return MEMORY[0x1E0CB2828]();
}

uint64_t sub_19A353C34()
{
  return MEMORY[0x1E0CB2830]();
}

uint64_t sub_19A353C40()
{
  return MEMORY[0x1E0CB2840]();
}

uint64_t sub_19A353C4C()
{
  return MEMORY[0x1E0CB2848]();
}

uint64_t sub_19A353C58()
{
  return MEMORY[0x1E0DEE768]();
}

uint64_t sub_19A353C64()
{
  return MEMORY[0x1E0DEE780]();
}

uint64_t sub_19A353C70()
{
  return MEMORY[0x1E0DEE7C0]();
}

uint64_t sub_19A353C7C()
{
  return MEMORY[0x1E0DEE7C8]();
}

uint64_t sub_19A353C88()
{
  return MEMORY[0x1E0D12D68]();
}

uint64_t sub_19A353C94()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_19A353CA0()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_19A353CAC()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t AnalyticsIsEventUsed()
{
  return MEMORY[0x1E0D15408]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C80098](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C800A8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80118](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
  MEMORY[0x1E0C801F8](ctx, macOut);
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
  MEMORY[0x1E0C80200](ctx, *(_QWORD *)&algorithm, key, keyLength);
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
  MEMORY[0x1E0C80218](ctx, data, dataLength);
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80308](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA224(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80348](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

unsigned __int8 *__cdecl CC_SHA384(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80388](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C803A8](data, *(_QWORD *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98DA0](allocator, capacity, theSet);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFWriteStreamSetDispatchQueue(CFWriteStreamRef stream, dispatch_queue_t q)
{
  MEMORY[0x1E0C99668](stream, q);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CLShouldDisplayEEDUI()
{
  return MEMORY[0x1E0CA5578]();
}

uint64_t CPCopyBundleIdentifierAndTeamFromApplicationIdentifier()
{
  return MEMORY[0x1E0CFA228]();
}

uint64_t GSSystemRootDirectory()
{
  return MEMORY[0x1E0D27C80]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGIsDeviceOfType()
{
  return MEMORY[0x1E0DE2B88]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  return (NSString *)MEMORY[0x1E0CB3218](proto);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t OSAWriteLogForSubmission()
{
  return MEMORY[0x1E0D1BD28]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1E0D82C68]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1E0CD5F98](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6358](key, algorithm, plaintext, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x1E0CD6600](task, entitlements, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

uint64_t TCCAccessCopyInformationForBundleId()
{
  return MEMORY[0x1E0DB0FC8]();
}

uint64_t TCCAccessGetOverride()
{
  return MEMORY[0x1E0DB0FD8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CTServerConnectionCopyISOForMCC()
{
  return MEMORY[0x1E0CA6EB8]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1E0CA6F30]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82EC0](this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return MEMORY[0x1E0D82EE0](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return MEMORY[0x1E0D82EE8](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82EF0](this, a2);
}

{
  return MEMORY[0x1E0D82EF8](this, a2);
}

uint64_t PB::TextFormatter::endObject(PB::TextFormatter *this)
{
  return MEMORY[0x1E0D82F10](this);
}

void PB::Base::~Base(PB::Base *this)
{
  MEMORY[0x1E0D82F18](this);
}

uint64_t PB::Reader::recallMark()
{
  return MEMORY[0x1E0D82F38]();
}

uint64_t PB::Reader::skip(PB::Reader *this)
{
  return MEMORY[0x1E0D82F58](this);
}

uint64_t PB::Reader::placeMark()
{
  return MEMORY[0x1E0D82F60]();
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D82F68](this, a2);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this)
{
  return MEMORY[0x1E0D82F88](this);
}

{
  return MEMORY[0x1E0D82F90](this);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2)
{
  return MEMORY[0x1E0D82FA8](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2)
{
  return MEMORY[0x1E0D82FD0](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2)
{
  return MEMORY[0x1E0D82FD8](this, a2);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1E0D82FF0](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
  MEMORY[0x1E0D82FF8](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E37E5BC8(__p);
}

uint64_t operator delete()
{
  return off_1E37E5BD0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E37E5BD8(__sz);
}

uint64_t operator new()
{
  return off_1E37E5BE0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _set_user_dir_suffix()
{
  return MEMORY[0x1E0C811A0]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1E0DE3DC0]();
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1E0DE3DC8]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1E0DE3DD0]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1E0DE3DD8]();
}

uint64_t archive_entry_set_atime()
{
  return MEMORY[0x1E0DE3DF0]();
}

uint64_t archive_entry_set_birthtime()
{
  return MEMORY[0x1E0DE3DF8]();
}

uint64_t archive_entry_set_ctime()
{
  return MEMORY[0x1E0DE3E00]();
}

uint64_t archive_entry_set_filetype()
{
  return MEMORY[0x1E0DE3E08]();
}

uint64_t archive_entry_set_mtime()
{
  return MEMORY[0x1E0DE3E10]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1E0DE3E18]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x1E0DE3E20]();
}

uint64_t archive_entry_set_size()
{
  return MEMORY[0x1E0DE3E28]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x1E0DE3E38]();
}

uint64_t archive_entry_size_is_set()
{
  return MEMORY[0x1E0DE3E40]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_data()
{
  return MEMORY[0x1E0DE3E80]();
}

uint64_t archive_read_data_skip()
{
  return MEMORY[0x1E0DE3E98]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_fd()
{
  return MEMORY[0x1E0DE3F20]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1E0DE3F28]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x1E0DE3F30]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1E0DE3F48]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1E0DE3F90]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x1E0DE3FC0]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1E0DE3FC8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1E0DE4010]();
}

uint64_t archive_write_open_fd()
{
  return MEMORY[0x1E0DE4020]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1E0DE4028]();
}

uint64_t archive_write_set_format_zip()
{
  return MEMORY[0x1E0DE4068]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1E0DDFE88]();
}

uint64_t ct_green_tea_logger_destroy()
{
  return MEMORY[0x1E0DDFE98]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

uint64_t dispatch_queue_attr_make_with_overcommit()
{
  return MEMORY[0x1E0C82E30]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

uint64_t dyld_get_program_sdk_version_token()
{
  return MEMORY[0x1E0C830C0]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

uint64_t dyld_version_token_at_least()
{
  return MEMORY[0x1E0C831B0]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x1E0DDFEA8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1E0C843F0](*(_QWORD *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1E0DEEB90]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x1E0DEEC58]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x1E0DEEC60]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectUnownedCopyAssign()
{
  return MEMORY[0x1E0DEEEE8]();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return MEMORY[0x1E0DEEEF8]();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return MEMORY[0x1E0DEEF00]();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return MEMORY[0x1E0DEEF08]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

uint64_t uameasfmt_getUnitsForUsage()
{
  return MEMORY[0x1E0DE5BA0]();
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

void xmlDocDumpFormatMemory(xmlDocPtr cur, xmlChar **mem, int *size, int format)
{
  MEMORY[0x1E0DE8D08](cur, mem, size, *(_QWORD *)&format);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EE0](buffer, *(_QWORD *)&size, URL, encoding, *(_QWORD *)&options);
}

void xmlSchemaFree(xmlSchemaPtr schema)
{
  MEMORY[0x1E0DE8F68](schema);
}

void xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8F70](ctxt);
}

void xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
{
  MEMORY[0x1E0DE8F78](ctxt);
}

xmlSchemaParserCtxtPtr xmlSchemaNewMemParserCtxt(const char *buffer, int size)
{
  return (xmlSchemaParserCtxtPtr)MEMORY[0x1E0DE8F88](buffer, *(_QWORD *)&size);
}

xmlSchemaParserCtxtPtr xmlSchemaNewParserCtxt(const char *URL)
{
  return (xmlSchemaParserCtxtPtr)MEMORY[0x1E0DE8F90](URL);
}

xmlSchemaValidCtxtPtr xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
{
  return (xmlSchemaValidCtxtPtr)MEMORY[0x1E0DE8F98](schema);
}

xmlSchemaPtr xmlSchemaParse(xmlSchemaParserCtxtPtr ctxt)
{
  return (xmlSchemaPtr)MEMORY[0x1E0DE8FA0](ctxt);
}

void xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx)
{
  MEMORY[0x1E0DE8FB0](ctxt, err, warn, ctx);
}

int xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr ctxt, xmlDocPtr instance)
{
  return MEMORY[0x1E0DE8FB8](ctxt, instance);
}

void xmlSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler)
{
  MEMORY[0x1E0DE8FC8](ctx, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return MEMORY[0x1E0C862F8]();
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1E0C866E0]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1E0C867A0](type);
}

xmlDocPtr xsltApplyStylesheet(xsltStylesheetPtr style, xmlDocPtr doc, const char **params)
{
  return (xmlDocPtr)MEMORY[0x1E0DE91A0](style, doc, params);
}

void xsltFreeStylesheet(xsltStylesheetPtr style)
{
  MEMORY[0x1E0DE91D8](style);
}

xsltStylesheetPtr xsltParseStylesheetDoc(xmlDocPtr doc)
{
  return (xsltStylesheetPtr)MEMORY[0x1E0DE9228](doc);
}

