uint64_t sub_233BF4AA0(void *a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  uint64_t isEqual;

  v3 = a1;
  v4 = a2;
  v6 = (void *)v4;
  isEqual = (v3 | v4) == 0;
  if (v3 && v4)
    isEqual = objc_msgSend_isEqual_((void *)v3, v5, v4);

  return isEqual;
}

void sub_233BF4B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_233BF4B18(_QWORD *a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  *a1 = &off_2504EE3F0;
  a1[1] = v3;
  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue();
  a1[2] = dispatch_queue_create("org.csa-iot.matter.framework.storage.workqueue", v4);

  return a1;
}

uint64_t sub_233BF4B78(uint64_t a1)
{

  return a1;
}

uint64_t sub_233BF4BA8(uint64_t a1)
{

  return a1;
}

void sub_233BF4BD8(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

void sub_233BF4C18(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  void *v9;
  NSObject *v10;
  id v11;
  uint64_t *v12;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 (*v22)(__n128 *, __n128 *);
  uint64_t (*v23)();
  const char *v24;
  __int128 v25;
  uint64_t v26;

  if (a3 || !*a4)
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x4812000000;
    v22 = sub_233BF4D78;
    v23 = nullsub_1;
    v24 = "";
    v25 = xmmword_2504EE420;
    v26 = 39;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], a2, (uint64_t)a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(NSObject **)(a1 + 16);
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3221225472;
    v13[2] = sub_233BF4D90;
    v13[3] = &unk_2504EE440;
    v14 = v9;
    v15 = &v19;
    v16 = a1;
    v17 = a4;
    v18 = a3;
    v11 = v9;
    dispatch_sync(v10, v13);
    v12 = v20;
    *(_OWORD *)a5 = *((_OWORD *)v20 + 3);
    *(_QWORD *)(a5 + 16) = v12[8];

    _Block_object_dispose(&v19, 8);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRPersistentStorageDelegateBridge.mm";
    *(_DWORD *)(a5 + 16) = 36;
  }
}

void sub_233BF4D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_233BF4D78(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_233BF4D90(uint64_t *a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  void *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  const void *v18;
  id v19;

  objc_msgSend_storageDataForKey_(*(void **)(a1[6] + 8), a2, a1[4]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v19 = v3;
    if ((unint64_t)objc_msgSend_length(v3, v4, v5) >= 0x10000)
    {
      v8 = *(_QWORD *)(a1[5] + 8);
      *(_DWORD *)(v8 + 48) = 159;
      *(_QWORD *)(v8 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CH"
                             "IP/MTRPersistentStorageDelegateBridge.mm";
      *(_DWORD *)(v8 + 64) = 55;
LABEL_10:
      v3 = v19;
      goto LABEL_11;
    }
    v10 = objc_msgSend_length(v19, v6, v7);
    v11 = (unsigned __int16 *)a1[7];
    if (*v11 >= v10)
    {
      v13 = v10;
      *v11 = v10;
    }
    else
    {
      v12 = *(_QWORD *)(a1[5] + 8);
      *(_DWORD *)(v12 + 48) = 25;
      *(_QWORD *)(v12 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRPersistentStorageDelegateBridge.mm";
      *(_DWORD *)(v12 + 64) = 61;
      v13 = *(unsigned __int16 *)a1[7];
    }
    v3 = v19;
    if (v13)
    {
      v14 = (void *)a1[8];
      v15 = objc_retainAutorelease(v19);
      v18 = (const void *)objc_msgSend_bytes(v15, v16, v17);
      memcpy(v14, v18, *(unsigned __int16 *)a1[7]);
      goto LABEL_10;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1[5] + 8);
    *(_DWORD *)(v9 + 48) = 160;
    *(_QWORD *)(v9 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP"
                           "/MTRPersistentStorageDelegateBridge.mm";
    *(_DWORD *)(v9 + 64) = 50;
  }
LABEL_11:

}

void sub_233BF4EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233BF4EC0(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  id v14;
  id v15;
  uint64_t *v16;
  _QWORD block[4];
  id v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  __n128 (*v25)(__n128 *, __n128 *);
  uint64_t (*v26)();
  const char *v27;
  __int128 v28;
  uint64_t v29;

  if (a3 || !a4)
  {
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], a2, (uint64_t)a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (a3)
      objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v9, a3, a4);
    else
      objc_msgSend_data(MEMORY[0x24BDBCE50], v9, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = 0;
    v23 = &v22;
    v24 = 0x4812000000;
    v25 = sub_233BF4D78;
    v26 = nullsub_1;
    v27 = "";
    v28 = xmmword_2504EE460;
    v29 = 84;
    v13 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233BF5058;
    block[3] = &unk_2504EE480;
    v18 = v12;
    v19 = v11;
    v20 = &v22;
    v21 = a1;
    v14 = v11;
    v15 = v12;
    dispatch_sync(v13, block);
    v16 = v23;
    *(_OWORD *)a5 = *((_OWORD *)v23 + 3);
    *(_QWORD *)(a5 + 16) = v16[8];

    _Block_object_dispose(&v22, 8);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRPersistentStorageDelegateBridge.mm";
    *(_DWORD *)(a5 + 16) = 78;
  }
}

void sub_233BF5044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233BF5058(uint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v4;

  result = objc_msgSend_setStorageData_forKey_(*(void **)(a1[7] + 8), a2, a1[4], a1[5]);
  if ((result & 1) == 0)
  {
    v4 = *(_QWORD *)(a1[6] + 8);
    *(_DWORD *)(v4 + 48) = 159;
    *(_QWORD *)(v4 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP"
                           "/MTRPersistentStorageDelegateBridge.mm";
    *(_DWORD *)(v4 + 64) = 91;
  }
  return result;
}

void sub_233BF50AC(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  NSObject *v6;
  id v7;
  uint64_t *v8;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(__n128 *, __n128 *);
  uint64_t (*v17)();
  const char *v18;
  __int128 v19;
  uint64_t v20;

  objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], a2, (uint64_t)a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0;
  v14 = &v13;
  v15 = 0x4812000000;
  v16 = sub_233BF4D78;
  v17 = nullsub_1;
  v18 = "";
  v19 = xmmword_2504EE4A0;
  v20 = 102;
  v6 = *(NSObject **)(a1 + 16);
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_233BF51B4;
  v9[3] = &unk_2504EE4C0;
  v11 = &v13;
  v12 = a1;
  v10 = v5;
  v7 = v5;
  dispatch_sync(v6, v9);
  v8 = v14;
  *(_OWORD *)a3 = *((_OWORD *)v14 + 3);
  *(_QWORD *)(a3 + 16) = v8[8];

  _Block_object_dispose(&v13, 8);
}

uint64_t sub_233BF51B4(uint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v4;

  result = objc_msgSend_removeStorageDataForKey_(*(void **)(a1[6] + 8), a2, a1[4]);
  if ((result & 1) == 0)
  {
    v4 = *(_QWORD *)(a1[5] + 8);
    *(_DWORD *)(v4 + 48) = 160;
    *(_QWORD *)(v4 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP"
                           "/MTRPersistentStorageDelegateBridge.mm";
    *(_DWORD *)(v4 + 64) = 109;
  }
  return result;
}

BOOL sub_233BF5208(uint64_t a1)
{
  _QWORD v3[3];
  __int16 v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(v3);
  return LODWORD(v3[0]) == 25 || LODWORD(v3[0]) == 0;
}

_QWORD *sub_233BF5370(_QWORD *result)
{
  *result = &off_2504EE518;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

id *sub_233BF5384(id *a1)
{

  objc_destroyWeak(a1 + 1);
  return a1;
}

void sub_233BF53C0(id *a1)
{
  sub_233BF5384(a1);
  JUMPOUT(0x23493E704);
}

void sub_233BF53E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a3;
  v8 = a4;
  v9 = (id *)(a1 + 8);
  if (v13 && v8)
  {
    objc_storeWeak(v9, a2);
    objc_storeStrong((id *)(a1 + 16), a3);
    v10 = v8;
    v11 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
  }
  else
  {
    objc_storeWeak(v9, 0);
    v12 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

    v11 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
  }

}

uint64_t sub_233BF5494(uint64_t a1, int a2)
{
  if (a2)
    return 2 * (a2 == 1);
  else
    return 1;
}

void sub_233BF54AC(uint64_t a1, int a2)
{
  NSObject *v4;
  id v5;
  id WeakRetained;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  int v13;
  _QWORD block[4];
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  int v19;
  const char *v20;
  int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  sub_234117B80(0, "NotSpecified");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v19 = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "DeviceControllerDelegate status updated: %d", buf, 8u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(0, 2);
  if (a2 == 1)
  {
    *(_DWORD *)buf = 1;
    v20 = "dwnfw_setup_pase_session";
    v21 = 50;
    v22 = 3;
    sub_2341C4BEC((uint64_t)buf);
  }
  v5 = *(id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v7 = WeakRetained;
  if (v5 && *(_QWORD *)(a1 + 24) && WeakRetained)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (a2)
        v8 = 2 * (a2 == 1);
      else
        v8 = 1;
      v9 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_233BF56F8;
      block[3] = &unk_2504EE5A0;
      v15 = v5;
      v16 = v7;
      v17 = v8;
      dispatch_async(v9, block);

    }
    if (a2 == 1 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = 50;
      v12 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceContr"
            "ollerDelegateBridge.mm";
      v13 = 89;
      (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 40))(a1, v10, &v11);
    }
  }

}

void sub_233BF56DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_233BF56F8(uint64_t a1)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_controller_statusUpdate_, *(_QWORD *)(a1 + 40));
}

void sub_233BF5708(uint64_t a1, __int128 *a2)
{
  _BOOL4 v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  id v8;
  id WeakRetained;
  void *v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  uint8_t v17[16];
  uint64_t v18;
  uint8_t buf[4];
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)a2 == 0;
  sub_234117B80(0, "NotSpecified");
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "MTRDeviceControllerDelegate PASE session establishment succeeded.", v17, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      v7 = sub_2341083CC((const char **)v17, 1);
      *(_DWORD *)buf = 136315138;
      v20 = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "MTRDeviceControllerDelegate PASE session establishment failed: %s", buf, 0xCu);
    }

    if (sub_234114844(1u))
    {
      *(_OWORD *)v17 = *a2;
      v18 = *((_QWORD *)a2 + 2);
      sub_2341083CC((const char **)v17, 1);
      sub_2341147D0(0, 1);
    }
  }
  *(_DWORD *)v17 = 1;
  *(_QWORD *)&v17[8] = "dwnfw_setup_pase_session";
  LODWORD(v18) = *(_DWORD *)a2;
  BYTE4(v18) = 3;
  sub_2341C4BEC((uint64_t)v17);
  v8 = *(id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v10 = WeakRetained;
  if (v8 && *(_QWORD *)(a1 + 24) && WeakRetained && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v11 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233BF5990;
    block[3] = &unk_2504EE5C8;
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    v13 = v8;
    v14 = v10;
    dispatch_async(v11, block);

  }
}

void sub_233BF596C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233BF5990(uint64_t a1)
{
  void *v2;
  const char *v3;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  sub_2340017F0((uint64_t)MTRError, &v4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_controller_commissioningSessionEstablishmentDone_(*(void **)(a1 + 32), v3, *(_QWORD *)(a1 + 40), v2);

}

void sub_233BF59EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233BF59FC(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[4];
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_234117B80(0, "NotSpecified");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    v4 = sub_2341083CC((const char **)&v8, 1);
    *(_DWORD *)buf = 136315138;
    v11 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "DeviceControllerDelegate Pairing deleted. Status %s", buf, 0xCu);
  }

  result = sub_234114844(2u);
  if ((_DWORD)result)
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)&v6, 1);
    return sub_2341147D0(0, 2);
  }
  return result;
}

void sub_233BF5B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233BF5B1C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  NSObject *v5;
  id v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  __int16 v13;
  __int16 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int16 *)(a2 + 12);
  v4 = *(unsigned __int16 *)(a2 + 14);
  sub_234117B80(0, "NotSpecified");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v16 = v3;
    v17 = 1024;
    v18 = v4;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "DeviceControllerDelegate Read Commissioning Info. VendorId %u ProductId %u", buf, 0xEu);
  }

  if (sub_234114844(2u))
    sub_2341147D0(0, 2);
  v6 = *(id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v8 = WeakRetained;
  if (v6 && *(_QWORD *)(a1 + 24) && WeakRetained && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v9 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233BF5CDC;
    block[3] = &unk_2504EE5F0;
    v13 = v3;
    v14 = v4;
    v11 = v6;
    v12 = v8;
    dispatch_async(v9, block);

  }
}

void sub_233BF5CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233BF5CDC(uint64_t a1)
{
  MTRProductIdentity *v2;
  const char *v3;
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  const char *v8;
  id v9;

  v2 = [MTRProductIdentity alloc];
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x24BDD16E0], v3, *(unsigned __int16 *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x24BDD16E0], v5, *(unsigned __int16 *)(a1 + 50));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (id)objc_msgSend_initWithVendorID_productID_(v2, v7, (uint64_t)v4, v6);

  objc_msgSend_controller_readCommissioningInfo_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40), v9);
}

void sub_233BF5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_233BF5D98(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  char *v7;
  id v8;
  id WeakRetained;
  const char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  id *v19;
  id *v20;
  NSObject *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  __int128 v25;
  uint64_t v26;
  _QWORD block[4];
  id v28;
  id v29;
  id v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint8_t buf[4];
  _BYTE v39[18];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  sub_234117B80(0, "NotSpecified");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v36 = *a3;
    v37 = *((_QWORD *)a3 + 2);
    v7 = sub_2341083CC((const char **)&v36, 1);
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v39 = a2;
    *(_WORD *)&v39[8] = 2080;
    *(_QWORD *)&v39[10] = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "DeviceControllerDelegate Commissioning complete. NodeId %llu Status %s", buf, 0x16u);
  }

  if (sub_234114844(2u))
  {
    v34 = *a3;
    v35 = *((_QWORD *)a3 + 2);
    sub_2341083CC((const char **)&v34, 1);
    sub_2341147D0(0, 2);
  }
  *(_DWORD *)buf = 1;
  *(_QWORD *)&v39[4] = "dwnfw_device_commissioning";
  *(_DWORD *)&v39[12] = *(_DWORD *)a3;
  v39[16] = 3;
  sub_2341C4BEC((uint64_t)buf);
  v8 = *(id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v12 = WeakRetained;
  if (v8 && *(_QWORD *)(a1 + 24) && WeakRetained)
  {
    objc_msgSend_sharedInstance(MTRMetricsCollector, v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_metricSnapshot_(v13, v14, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    sub_234117B80(0, "NotSpecified");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v39 = v15;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Device commissioning complete with metrics %@", buf, 0xCu);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
    if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
    {
      v17 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_233BF614C;
      block[3] = &unk_2504EE618;
      v31 = *a3;
      v32 = *((_QWORD *)a3 + 2);
      v33 = a2;
      v28 = v8;
      v29 = v12;
      v30 = v15;
      v18 = v15;
      dispatch_async(v17, block);

      v19 = &v28;
      v20 = &v29;
    }
    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
        goto LABEL_16;
      v21 = *(NSObject **)(a1 + 24);
      v22[0] = MEMORY[0x24BDAC760];
      v22[1] = 3221225472;
      v22[2] = sub_233BF6224;
      v22[3] = &unk_2504EE5C8;
      v25 = *a3;
      v26 = *((_QWORD *)a3 + 2);
      v19 = &v23;
      v23 = v8;
      v20 = &v24;
      v24 = v12;
      dispatch_async(v21, v22);
    }

LABEL_16:
  }

}

void sub_233BF610C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233BF614C(uint64_t a1)
{
  const char *v2;
  void *v3;
  void *v4;
  const char *v5;
  char v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 72);
  sub_2340017F0((uint64_t)MTRError, &v9);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_DWORD *)(a1 + 56))
  {
    v4 = 0;
  }
  else
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v2, *(_QWORD *)(a1 + 80));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v6 = objc_opt_respondsToSelector();
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    objc_msgSend_controller_commissioningComplete_nodeID_metrics_(v7, v5, v8, v3, v4, *(_QWORD *)(a1 + 48));
  else
    objc_msgSend_controller_commissioningComplete_nodeID_(v7, v5, v8, v3, v4);

}

void sub_233BF6210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233BF6224(uint64_t a1)
{
  void *v2;
  const char *v3;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  sub_2340017F0((uint64_t)MTRError, &v4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_controller_commissioningComplete_(*(void **)(a1 + 32), v3, *(_QWORD *)(a1 + 40), v2);

}

void sub_233BF6280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233BF6290(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

void sub_233BF632C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233BF6560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_233BF6980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233BF6B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233BF6E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233BF7010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233BF70E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

_QWORD *sub_233BF7114(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_234254B30();
  }
  return result;
}

uint64_t sub_233BF715C()
{
  _QWORD v1[3];

  sub_2341146E0(v1);
  return sub_234114834(0);
}

void sub_233BF7268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233BF730C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v8;
  uint64_t v9;
  const char *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  int v20;
  int v21;
  unint64_t v22;
  void *__s2[2];
  _QWORD *v24;
  uint64_t v25;
  size_t __n[2];
  _QWORD v27[2];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8) == 20)
  {
    __n[0] = 0;
    __n[1] = 0;
    if (objc_msgSend_count(*(void **)(a1 + 8), (const char *)a2, a3))
    {
      v9 = 0;
      v10 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRAttestation"
            "TrustStoreBridge.mm";
      while (1)
      {
        v27[0] = 0;
        v27[1] = 0;
        v28 = 0;
        objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 8), v8, v9);
        v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v14 = objc_msgSend_bytes(v11, v12, v13);
        v17 = objc_msgSend_length(v11, v15, v16);
        sub_233BF7114(__s2, v14, v17);

        *(_OWORD *)__n = *(_OWORD *)__s2;
        v24 = v27;
        v25 = 20;
        sub_23413CB48((uint64_t *)__n, (uint64_t *)&v24, (uint64_t)__s2);
        if (LODWORD(__s2[0]))
        {
          v20 = 34;
          v21 = 172;
          goto LABEL_15;
        }
        sub_233BF7114(__s2, (uint64_t)v24, v25);
        v19 = *(void **)(a2 + 8);
        if (v19 == __s2[1] && (!v19 || !memcmp(*(const void **)a2, __s2[0], (size_t)v19)))
          break;
        if (++v9 >= (unint64_t)objc_msgSend_count(*(void **)(a1 + 8), v18, (uint64_t)v19))
          goto LABEL_9;
      }
      v22 = __n[1];
      if (*(_QWORD *)(a3 + 8) >= __n[1])
      {
        memcpy(*(void **)a3, (const void *)__n[0], __n[1]);
        sub_233BF7588(a3, v22);
        v21 = 0;
        v20 = 380;
        v10 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Span.h";
      }
      else
      {
        v20 = 375;
        v10 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Span.h";
        v21 = 25;
      }
LABEL_15:
      *(_DWORD *)a4 = v21;
      *(_QWORD *)(a4 + 8) = v10;
    }
    else
    {
LABEL_9:
      *(_DWORD *)a4 = 74;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRAttestationTrustStoreBridge.mm";
      v20 = 41;
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRAttestationTrustStoreBridge.mm";
    v20 = 24;
  }
  *(_DWORD *)(a4 + 16) = v20;
}

void sub_233BF750C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233BF7528(uint64_t a1)
{

  return a1;
}

void sub_233BF7550(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

uint64_t sub_233BF7588(uint64_t result, unint64_t a2)
{
  if (*(_QWORD *)(result + 8) < a2)
    sub_234254CC8();
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_233BF75AC(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0x1Cu);
}

BOOL sub_233BF75C0(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t sub_233BF75CC()
{
  return sub_2341147D0(0x1Bu, 1);
}

__CFString *MTRClusterNameForID(uint64_t a1, const char *a2)
{
  __CFString *v3;
  __CFString *result;

  if ((int)a1 <= 256)
  {
    v3 = CFSTR("Identify");
    switch((int)a1)
    {
      case 3:
        return v3;
      case 4:
        v3 = CFSTR("Groups");
        return v3;
      case 5:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 39:
      case 58:
      case 61:
      case 66:
      case 67:
      case 68:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 88:
      case 90:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 146:
      case 147:
      case 149:
      case 154:
        goto LABEL_40;
      case 6:
        return CFSTR("OnOff");
      case 7:
        return CFSTR("OnOffSwitchConfiguration");
      case 8:
        return CFSTR("LevelControl");
      case 15:
        return CFSTR("BinaryInputBasic");
      case 28:
        return CFSTR("PulseWidthModulation");
      case 29:
        return CFSTR("Descriptor");
      case 30:
        return CFSTR("Binding");
      case 31:
        return CFSTR("AccessControl");
      case 37:
        return CFSTR("Actions");
      case 40:
        return CFSTR("BasicInformation");
      case 41:
        return CFSTR("OTASoftwareUpdateProvider");
      case 42:
        return CFSTR("OTASoftwareUpdateRequestor");
      case 43:
        return CFSTR("LocalizationConfiguration");
      case 44:
        return CFSTR("TimeFormatLocalization");
      case 45:
        return CFSTR("UnitLocalization");
      case 46:
        return CFSTR("PowerSourceConfiguration");
      case 47:
        return CFSTR("PowerSource");
      case 48:
        return CFSTR("GeneralCommissioning");
      case 49:
        return CFSTR("NetworkCommissioning");
      case 50:
        return CFSTR("DiagnosticLogs");
      case 51:
        return CFSTR("GeneralDiagnostics");
      case 52:
        return CFSTR("SoftwareDiagnostics");
      case 53:
        return CFSTR("ThreadNetworkDiagnostics");
      case 54:
        return CFSTR("WiFiNetworkDiagnostics");
      case 55:
        return CFSTR("EthernetNetworkDiagnostics");
      case 56:
        return CFSTR("TimeSynchronization");
      case 57:
        return CFSTR("BridgedDeviceBasicInformation");
      case 59:
        return CFSTR("Switch");
      case 60:
        return CFSTR("AdministratorCommissioning");
      case 62:
        return CFSTR("OperationalCredentials");
      case 63:
        return CFSTR("GroupKeyManagement");
      case 64:
        return CFSTR("FixedLabel");
      case 65:
        return CFSTR("UserLabel");
      case 69:
        return CFSTR("BooleanState");
      case 70:
        return CFSTR("ICDManagement");
      case 71:
        return CFSTR("Timer");
      case 72:
        return CFSTR("OvenCavityOperationalState");
      case 73:
        return CFSTR("OvenMode");
      case 74:
        return CFSTR("LaundryDryerControls");
      case 80:
        return CFSTR("ModeSelect");
      case 81:
        return CFSTR("LaundryWasherMode");
      case 82:
        return CFSTR("RefrigeratorAndTemperatureControlledCabinetMode");
      case 83:
        return CFSTR("LaundryWasherControls");
      case 84:
        return CFSTR("RVCRunMode");
      case 85:
        return CFSTR("RVCCleanMode");
      case 86:
        return CFSTR("TemperatureControl");
      case 87:
        return CFSTR("RefrigeratorAlarm");
      case 89:
        return CFSTR("DishwasherMode");
      case 91:
        return CFSTR("AirQuality");
      case 92:
        return CFSTR("SmokeCOAlarm");
      case 93:
        return CFSTR("DishwasherAlarm");
      case 94:
        return CFSTR("MicrowaveOvenMode");
      case 95:
        return CFSTR("MicrowaveOvenControl");
      case 96:
        return CFSTR("OperationalState");
      case 97:
        return CFSTR("RVCOperationalState");
      case 98:
        return CFSTR("ScenesManagement");
      case 113:
        return CFSTR("HEPAFilterMonitoring");
      case 114:
        return CFSTR("ActivatedCarbonFilterMonitoring");
      case 128:
        return CFSTR("BooleanStateConfiguration");
      case 129:
        return CFSTR("ValveConfigurationAndControl");
      case 144:
        return CFSTR("ElectricalPowerMeasurement");
      case 145:
        return CFSTR("ElectricalEnergyMeasurement");
      case 148:
        return CFSTR("WaterHeaterManagement");
      case 150:
        return CFSTR("DemandResponseLoadControl");
      case 151:
        return CFSTR("Messages");
      case 152:
        return CFSTR("DeviceEnergyManagement");
      case 153:
        return CFSTR("EnergyEVSE");
      case 155:
        return CFSTR("EnergyPreference");
      case 156:
        return CFSTR("PowerTopology");
      case 157:
        return CFSTR("EnergyEVSEMode");
      case 158:
        return CFSTR("WaterHeaterMode");
      case 159:
        return CFSTR("DeviceEnergyManagementMode");
      default:
        if ((_DWORD)a1 == -918523)
        {
          result = CFSTR("UnitTesting");
        }
        else
        {
          if ((_DWORD)a1 != -918496)
            goto LABEL_40;
          result = CFSTR("SampleMEI");
        }
        break;
    }
    return result;
  }
  if ((int)a1 > 1065)
  {
    if ((int)a1 > 1282)
    {
      switch((int)a1)
      {
        case 1283:
          result = CFSTR("WakeOnLAN");
          break;
        case 1284:
          result = CFSTR("Channel");
          break;
        case 1285:
          result = CFSTR("TargetNavigator");
          break;
        case 1286:
          result = CFSTR("MediaPlayback");
          break;
        case 1287:
          result = CFSTR("MediaInput");
          break;
        case 1288:
          result = CFSTR("LowPower");
          break;
        case 1289:
          result = CFSTR("KeypadInput");
          break;
        case 1290:
          result = CFSTR("ContentLauncher");
          break;
        case 1291:
          result = CFSTR("AudioOutput");
          break;
        case 1292:
          result = CFSTR("ApplicationLauncher");
          break;
        case 1293:
          result = CFSTR("ApplicationBasic");
          break;
        case 1294:
          result = CFSTR("AccountLogin");
          break;
        case 1295:
          result = CFSTR("ContentControl");
          break;
        case 1296:
          result = CFSTR("ContentAppObserver");
          break;
        default:
          if ((_DWORD)a1 == 1873)
          {
            result = CFSTR("CommissionerControl");
          }
          else
          {
            if ((_DWORD)a1 != 2820)
              goto LABEL_40;
            result = CFSTR("ElectricalMeasurement");
          }
          break;
      }
      return result;
    }
    if ((int)a1 <= 1104)
    {
      switch((int)a1)
      {
        case 1066:
          result = CFSTR("PM25ConcentrationMeasurement");
          break;
        case 1067:
          result = CFSTR("FormaldehydeConcentrationMeasurement");
          break;
        case 1068:
          result = CFSTR("PM1ConcentrationMeasurement");
          break;
        case 1069:
          result = CFSTR("PM10ConcentrationMeasurement");
          break;
        case 1070:
          result = CFSTR("TotalVolatileOrganicCompoundsConcentrationMeasurement");
          break;
        case 1071:
          result = CFSTR("RadonConcentrationMeasurement");
          break;
        default:
          goto LABEL_40;
      }
      return result;
    }
    switch((_DWORD)a1)
    {
      case 0x451:
        return CFSTR("WiFiNetworkManagement");
      case 0x452:
        return CFSTR("ThreadBorderRouterManagement");
      case 0x453:
        return CFSTR("ThreadNetworkDirectory");
    }
LABEL_40:
    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown clusterID %d>"), a1);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
    return v3;
  }
  if ((int)a1 > 767)
  {
    switch((int)a1)
    {
      case 1024:
        return CFSTR("IlluminanceMeasurement");
      case 1025:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1044:
        goto LABEL_40;
      case 1026:
        return CFSTR("TemperatureMeasurement");
      case 1027:
        return CFSTR("PressureMeasurement");
      case 1028:
        return CFSTR("FlowMeasurement");
      case 1029:
        return CFSTR("RelativeHumidityMeasurement");
      case 1030:
        return CFSTR("OccupancySensing");
      case 1036:
        return CFSTR("CarbonMonoxideConcentrationMeasurement");
      case 1037:
        return CFSTR("CarbonDioxideConcentrationMeasurement");
      case 1043:
        return CFSTR("NitrogenDioxideConcentrationMeasurement");
      case 1045:
        return CFSTR("OzoneConcentrationMeasurement");
      default:
        if ((_DWORD)a1 == 768)
        {
          result = CFSTR("ColorControl");
        }
        else
        {
          if ((_DWORD)a1 != 769)
            goto LABEL_40;
          result = CFSTR("BallastConfiguration");
        }
        break;
    }
  }
  else
  {
    if ((int)a1 <= 335)
    {
      switch((_DWORD)a1)
      {
        case 0x101:
          return CFSTR("DoorLock");
        case 0x102:
          return CFSTR("WindowCovering");
        case 0x103:
          return CFSTR("BarrierControl");
      }
      goto LABEL_40;
    }
    switch((int)a1)
    {
      case 512:
        result = CFSTR("PumpConfigurationAndControl");
        break;
      case 513:
        result = CFSTR("Thermostat");
        break;
      case 514:
        result = CFSTR("FanControl");
        break;
      case 515:
        goto LABEL_40;
      case 516:
        result = CFSTR("ThermostatUserInterfaceConfiguration");
        break;
      default:
        if ((_DWORD)a1 != 336)
          goto LABEL_40;
        result = CFSTR("ServiceArea");
        break;
    }
  }
  return result;
}

id MTRAttributeNameForID(uint64_t a1, const char *a2)
{
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  const __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  const __CFString *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  const __CFString *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  const __CFString *v27;
  void *v28;
  id v29;
  uint64_t v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  const __CFString *v35;
  const __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  const __CFString *v39;
  uint64_t v40;
  const __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFString *v46;
  uint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  uint64_t v50;
  const __CFString *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __CFString *v59;
  uint64_t v60;
  const __CFString *v61;
  uint64_t v62;
  const __CFString *v63;
  const __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const __CFString *v70;
  uint64_t v71;
  uint64_t v72;
  const __CFString *v73;
  uint64_t v74;
  uint64_t v75;
  const __CFString *v76;
  uint64_t v77;
  const __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const __CFString *v82;
  uint64_t v83;
  const __CFString *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const __CFString *v88;
  const __CFString *v89;
  uint64_t v90;
  const __CFString *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const __CFString *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const __CFString *v102;
  const __CFString *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const __CFString *v107;
  uint64_t v108;
  uint64_t v109;
  const __CFString *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const __CFString *v114;
  uint64_t v115;
  uint64_t v116;
  const __CFString *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const __CFString *v121;
  uint64_t v122;
  const __CFString *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const __CFString *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const __CFString *v135;
  uint64_t v136;
  __CFString *v137;
  const __CFString *v138;
  uint64_t v139;
  const __CFString *v140;
  uint64_t v141;
  const __CFString *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const __CFString *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __CFString *v152;
  uint64_t v153;
  __CFString *v154;
  uint64_t v155;
  __CFString *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const __CFString *v163;
  uint64_t v164;
  const __CFString *v165;
  uint64_t v166;
  const __CFString *v167;
  uint64_t v168;
  const __CFString *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const __CFString *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const __CFString *v187;
  uint64_t v188;

  v4 = 0;
  if ((int)a1 <= 256)
  {
    switch((int)a1)
    {
      case 3:
        v5 = CFSTR("ClusterRevision");
        v6 = CFSTR("FeatureMap");
        v7 = CFSTR("AttributeList");
        v8 = CFSTR("EventList");
        v4 = CFSTR("GeneratedCommandList");
        v9 = CFSTR("AcceptedCommandList");
        switch((int)a2)
        {
          case 65528:
LABEL_66:

            v4 = CFSTR("GeneratedCommandList");
LABEL_76:

            v4 = CFSTR("GeneratedCommandList");
LABEL_92:

            v4 = CFSTR("GeneratedCommandList");
LABEL_93:

            v4 = CFSTR("GeneratedCommandList");
LABEL_94:

            v4 = CFSTR("GeneratedCommandList");
LABEL_156:

            v4 = CFSTR("GeneratedCommandList");
LABEL_157:

            v4 = CFSTR("GeneratedCommandList");
LABEL_158:

            v4 = CFSTR("GeneratedCommandList");
LABEL_159:

            v4 = CFSTR("GeneratedCommandList");
LABEL_160:

            v4 = CFSTR("GeneratedCommandList");
LABEL_161:

            v4 = CFSTR("GeneratedCommandList");
LABEL_162:

            v4 = CFSTR("GeneratedCommandList");
LABEL_163:

            v4 = CFSTR("GeneratedCommandList");
LABEL_164:

            v4 = CFSTR("GeneratedCommandList");
LABEL_165:

            v4 = CFSTR("GeneratedCommandList");
LABEL_166:

            v4 = CFSTR("GeneratedCommandList");
LABEL_167:

            v4 = CFSTR("GeneratedCommandList");
LABEL_168:

            v4 = CFSTR("GeneratedCommandList");
LABEL_169:

            v4 = CFSTR("GeneratedCommandList");
LABEL_170:

            v4 = CFSTR("GeneratedCommandList");
LABEL_171:

            v4 = CFSTR("GeneratedCommandList");
LABEL_172:

            v4 = CFSTR("GeneratedCommandList");
LABEL_173:

            v4 = CFSTR("GeneratedCommandList");
LABEL_174:

            v4 = CFSTR("GeneratedCommandList");
LABEL_175:

            v4 = CFSTR("GeneratedCommandList");
LABEL_176:

            v4 = CFSTR("GeneratedCommandList");
LABEL_177:

            v4 = CFSTR("GeneratedCommandList");
LABEL_178:

            v4 = CFSTR("GeneratedCommandList");
LABEL_179:

            v4 = CFSTR("GeneratedCommandList");
LABEL_180:

            v4 = CFSTR("GeneratedCommandList");
LABEL_181:

            v4 = CFSTR("GeneratedCommandList");
LABEL_182:

            v4 = CFSTR("GeneratedCommandList");
LABEL_183:

            v4 = CFSTR("GeneratedCommandList");
LABEL_184:

            v4 = CFSTR("GeneratedCommandList");
LABEL_185:

            v4 = CFSTR("GeneratedCommandList");
LABEL_186:

            v4 = CFSTR("GeneratedCommandList");
LABEL_187:

            v4 = CFSTR("GeneratedCommandList");
LABEL_188:

            v4 = CFSTR("GeneratedCommandList");
LABEL_189:

            v4 = CFSTR("GeneratedCommandList");
LABEL_190:

            v4 = CFSTR("GeneratedCommandList");
LABEL_191:

            v4 = CFSTR("GeneratedCommandList");
LABEL_192:

            v4 = CFSTR("GeneratedCommandList");
LABEL_193:

            v4 = CFSTR("GeneratedCommandList");
LABEL_194:

            v4 = CFSTR("GeneratedCommandList");
LABEL_195:

            v4 = CFSTR("GeneratedCommandList");
LABEL_196:

            v4 = CFSTR("GeneratedCommandList");
LABEL_197:

            v4 = CFSTR("GeneratedCommandList");
LABEL_198:

            v4 = CFSTR("GeneratedCommandList");
LABEL_199:

            v4 = CFSTR("GeneratedCommandList");
LABEL_200:

            v4 = CFSTR("GeneratedCommandList");
LABEL_201:

            v4 = CFSTR("GeneratedCommandList");
LABEL_202:

            v4 = CFSTR("GeneratedCommandList");
LABEL_203:

            v4 = CFSTR("GeneratedCommandList");
LABEL_204:

            v4 = CFSTR("GeneratedCommandList");
LABEL_205:

            v4 = CFSTR("GeneratedCommandList");
LABEL_206:

            v4 = CFSTR("GeneratedCommandList");
LABEL_207:

            v4 = CFSTR("GeneratedCommandList");
LABEL_208:

            v4 = CFSTR("GeneratedCommandList");
LABEL_209:

            v4 = CFSTR("GeneratedCommandList");
LABEL_210:

            v4 = CFSTR("GeneratedCommandList");
LABEL_211:

            v4 = CFSTR("GeneratedCommandList");
LABEL_212:

            v4 = CFSTR("GeneratedCommandList");
LABEL_213:

            v4 = CFSTR("GeneratedCommandList");
LABEL_214:

            v4 = CFSTR("GeneratedCommandList");
LABEL_215:

            v4 = CFSTR("GeneratedCommandList");
LABEL_216:

            v4 = CFSTR("GeneratedCommandList");
LABEL_217:

            v4 = CFSTR("GeneratedCommandList");
LABEL_218:

            v4 = CFSTR("GeneratedCommandList");
LABEL_219:

            v4 = CFSTR("GeneratedCommandList");
LABEL_220:

            v4 = CFSTR("GeneratedCommandList");
LABEL_221:

            v4 = CFSTR("GeneratedCommandList");
LABEL_222:

            v4 = CFSTR("GeneratedCommandList");
LABEL_223:

            v4 = CFSTR("GeneratedCommandList");
LABEL_224:

            v4 = CFSTR("GeneratedCommandList");
LABEL_225:

            v4 = CFSTR("GeneratedCommandList");
LABEL_226:

            v4 = CFSTR("GeneratedCommandList");
LABEL_227:

            v4 = CFSTR("GeneratedCommandList");
LABEL_228:

            v4 = CFSTR("GeneratedCommandList");
LABEL_229:

            v4 = CFSTR("GeneratedCommandList");
LABEL_230:

            v4 = CFSTR("GeneratedCommandList");
LABEL_231:

            v4 = CFSTR("GeneratedCommandList");
LABEL_232:

            v4 = CFSTR("GeneratedCommandList");
LABEL_233:

            v4 = CFSTR("GeneratedCommandList");
LABEL_234:

            v4 = CFSTR("GeneratedCommandList");
LABEL_235:

            v4 = CFSTR("GeneratedCommandList");
LABEL_236:

            v4 = CFSTR("GeneratedCommandList");
LABEL_237:

            v4 = CFSTR("GeneratedCommandList");
LABEL_238:

            v4 = CFSTR("GeneratedCommandList");
LABEL_239:

            v4 = CFSTR("GeneratedCommandList");
LABEL_240:

            v4 = CFSTR("GeneratedCommandList");
LABEL_241:

            v4 = CFSTR("GeneratedCommandList");
LABEL_242:

            v4 = CFSTR("GeneratedCommandList");
LABEL_243:

            v4 = CFSTR("GeneratedCommandList");
LABEL_244:

            v4 = CFSTR("GeneratedCommandList");
LABEL_245:

            v4 = CFSTR("GeneratedCommandList");
LABEL_246:

            v4 = CFSTR("GeneratedCommandList");
LABEL_247:

            v4 = CFSTR("GeneratedCommandList");
LABEL_248:

            v4 = CFSTR("GeneratedCommandList");
LABEL_249:

            v11 = CFSTR("GeneratedCommandList");
LABEL_250:

            v12 = CFSTR("GeneratedCommandList");
LABEL_251:

            v4 = CFSTR("GeneratedCommandList");
LABEL_252:

            v4 = CFSTR("GeneratedCommandList");
LABEL_253:

            v4 = CFSTR("GeneratedCommandList");
LABEL_254:

            v4 = CFSTR("GeneratedCommandList");
LABEL_255:

            v4 = CFSTR("GeneratedCommandList");
LABEL_256:

            v4 = CFSTR("GeneratedCommandList");
LABEL_257:

            v4 = CFSTR("GeneratedCommandList");
LABEL_258:

            v4 = CFSTR("GeneratedCommandList");
LABEL_259:

            v4 = CFSTR("GeneratedCommandList");
LABEL_260:

            v4 = CFSTR("GeneratedCommandList");
LABEL_261:

            v4 = CFSTR("GeneratedCommandList");
LABEL_262:

            v4 = CFSTR("GeneratedCommandList");
LABEL_263:

            v4 = CFSTR("GeneratedCommandList");
LABEL_264:

            v4 = CFSTR("GeneratedCommandList");
LABEL_265:

            v4 = CFSTR("GeneratedCommandList");
LABEL_266:

            v13 = CFSTR("GeneratedCommandList");
LABEL_267:

            v4 = CFSTR("GeneratedCommandList");
LABEL_268:

            v4 = CFSTR("GeneratedCommandList");
LABEL_269:

            v4 = CFSTR("GeneratedCommandList");
LABEL_270:
            v27 = CFSTR("GeneratedCommandList");
            goto LABEL_846;
          case 65529:
LABEL_69:

            v4 = CFSTR("AcceptedCommandList");
LABEL_79:

            v4 = CFSTR("AcceptedCommandList");
LABEL_95:

            v4 = CFSTR("AcceptedCommandList");
LABEL_96:

            v4 = CFSTR("AcceptedCommandList");
LABEL_97:

            v4 = CFSTR("AcceptedCommandList");
LABEL_271:

            v4 = CFSTR("AcceptedCommandList");
LABEL_272:

            v4 = CFSTR("AcceptedCommandList");
LABEL_273:

            v4 = CFSTR("AcceptedCommandList");
LABEL_274:

            v4 = CFSTR("AcceptedCommandList");
LABEL_275:

            v4 = CFSTR("AcceptedCommandList");
LABEL_276:

            v4 = CFSTR("AcceptedCommandList");
LABEL_277:

            v4 = CFSTR("AcceptedCommandList");
LABEL_278:

            v4 = CFSTR("AcceptedCommandList");
LABEL_279:

            v4 = CFSTR("AcceptedCommandList");
LABEL_280:

            v4 = CFSTR("AcceptedCommandList");
LABEL_281:

            v4 = CFSTR("AcceptedCommandList");
LABEL_282:

            v4 = CFSTR("AcceptedCommandList");
LABEL_283:

            v4 = CFSTR("AcceptedCommandList");
LABEL_284:

            v4 = CFSTR("AcceptedCommandList");
LABEL_285:

            v4 = CFSTR("AcceptedCommandList");
LABEL_286:

            v4 = CFSTR("AcceptedCommandList");
LABEL_287:

            v4 = CFSTR("AcceptedCommandList");
LABEL_288:

            v4 = CFSTR("AcceptedCommandList");
LABEL_289:

            v4 = CFSTR("AcceptedCommandList");
LABEL_290:

            v4 = CFSTR("AcceptedCommandList");
LABEL_291:

            v4 = CFSTR("AcceptedCommandList");
LABEL_292:

            v4 = CFSTR("AcceptedCommandList");
LABEL_293:

            v4 = CFSTR("AcceptedCommandList");
LABEL_294:

            v4 = CFSTR("AcceptedCommandList");
LABEL_295:

            v4 = CFSTR("AcceptedCommandList");
LABEL_296:

            v4 = CFSTR("AcceptedCommandList");
LABEL_297:

            v4 = CFSTR("AcceptedCommandList");
LABEL_298:

            v4 = CFSTR("AcceptedCommandList");
LABEL_299:

            v4 = CFSTR("AcceptedCommandList");
LABEL_300:

            v4 = CFSTR("AcceptedCommandList");
LABEL_301:

            v4 = CFSTR("AcceptedCommandList");
LABEL_302:

            v4 = CFSTR("AcceptedCommandList");
LABEL_303:

            v4 = CFSTR("AcceptedCommandList");
LABEL_304:

            v4 = CFSTR("AcceptedCommandList");
LABEL_305:

            v4 = CFSTR("AcceptedCommandList");
LABEL_306:

            v4 = CFSTR("AcceptedCommandList");
LABEL_307:

            v4 = CFSTR("AcceptedCommandList");
LABEL_308:

            v4 = CFSTR("AcceptedCommandList");
LABEL_309:

            v4 = CFSTR("AcceptedCommandList");
LABEL_310:

            v4 = CFSTR("AcceptedCommandList");
LABEL_311:

            v4 = CFSTR("AcceptedCommandList");
LABEL_312:

            v4 = CFSTR("AcceptedCommandList");
LABEL_313:

            v4 = CFSTR("AcceptedCommandList");
LABEL_314:

            v4 = CFSTR("AcceptedCommandList");
LABEL_315:

            v4 = CFSTR("AcceptedCommandList");
LABEL_316:

            v4 = CFSTR("AcceptedCommandList");
LABEL_317:

            v4 = CFSTR("AcceptedCommandList");
LABEL_318:

            v4 = CFSTR("AcceptedCommandList");
LABEL_319:

            v4 = CFSTR("AcceptedCommandList");
LABEL_320:

            v4 = CFSTR("AcceptedCommandList");
LABEL_321:

            v4 = CFSTR("AcceptedCommandList");
LABEL_322:

            v4 = CFSTR("AcceptedCommandList");
LABEL_323:

            v4 = CFSTR("AcceptedCommandList");
LABEL_324:

            v4 = CFSTR("AcceptedCommandList");
LABEL_325:

            v4 = CFSTR("AcceptedCommandList");
LABEL_326:

            v4 = CFSTR("AcceptedCommandList");
LABEL_327:

            v4 = CFSTR("AcceptedCommandList");
LABEL_328:

            v4 = CFSTR("AcceptedCommandList");
LABEL_329:

            v4 = CFSTR("AcceptedCommandList");
LABEL_330:

            v4 = CFSTR("AcceptedCommandList");
LABEL_331:

            v4 = CFSTR("AcceptedCommandList");
LABEL_332:

            v4 = CFSTR("AcceptedCommandList");
LABEL_333:

            v4 = CFSTR("AcceptedCommandList");
LABEL_334:

            v4 = CFSTR("AcceptedCommandList");
LABEL_335:

            v4 = CFSTR("AcceptedCommandList");
LABEL_336:

            v4 = CFSTR("AcceptedCommandList");
LABEL_337:

            v4 = CFSTR("AcceptedCommandList");
LABEL_338:

            v4 = CFSTR("AcceptedCommandList");
LABEL_339:

            v4 = CFSTR("AcceptedCommandList");
LABEL_340:

            v4 = CFSTR("AcceptedCommandList");
LABEL_341:

            v4 = CFSTR("AcceptedCommandList");
LABEL_342:

            v4 = CFSTR("AcceptedCommandList");
LABEL_343:

            v4 = CFSTR("AcceptedCommandList");
LABEL_344:

            v4 = CFSTR("AcceptedCommandList");
LABEL_345:

            v4 = CFSTR("AcceptedCommandList");
LABEL_346:

            v4 = CFSTR("AcceptedCommandList");
LABEL_347:

            v4 = CFSTR("AcceptedCommandList");
LABEL_348:

            v4 = CFSTR("AcceptedCommandList");
LABEL_349:

            v4 = CFSTR("AcceptedCommandList");
LABEL_350:

            v4 = CFSTR("AcceptedCommandList");
LABEL_351:

            v4 = CFSTR("AcceptedCommandList");
LABEL_352:

            v4 = CFSTR("AcceptedCommandList");
LABEL_353:

            v4 = CFSTR("AcceptedCommandList");
LABEL_354:

            v4 = CFSTR("AcceptedCommandList");
LABEL_355:

            v4 = CFSTR("AcceptedCommandList");
LABEL_356:

            v4 = CFSTR("AcceptedCommandList");
LABEL_357:

            v4 = CFSTR("AcceptedCommandList");
LABEL_358:

            v4 = CFSTR("AcceptedCommandList");
LABEL_359:

            v4 = CFSTR("AcceptedCommandList");
LABEL_360:

            v4 = CFSTR("AcceptedCommandList");
LABEL_361:

            v4 = CFSTR("AcceptedCommandList");
LABEL_362:

            v4 = CFSTR("AcceptedCommandList");
LABEL_363:

            v4 = CFSTR("AcceptedCommandList");
LABEL_364:

            v11 = CFSTR("AcceptedCommandList");
LABEL_365:

            v12 = CFSTR("AcceptedCommandList");
LABEL_366:

            v4 = CFSTR("AcceptedCommandList");
LABEL_367:

            v4 = CFSTR("AcceptedCommandList");
LABEL_368:

            v4 = CFSTR("AcceptedCommandList");
LABEL_369:

            v4 = CFSTR("AcceptedCommandList");
LABEL_370:

            v4 = CFSTR("AcceptedCommandList");
LABEL_371:

            v4 = CFSTR("AcceptedCommandList");
LABEL_372:

            v4 = CFSTR("AcceptedCommandList");
LABEL_373:

            v4 = CFSTR("AcceptedCommandList");
LABEL_374:

            v4 = CFSTR("AcceptedCommandList");
LABEL_375:

            v4 = CFSTR("AcceptedCommandList");
LABEL_376:

            v4 = CFSTR("AcceptedCommandList");
LABEL_377:

            v4 = CFSTR("AcceptedCommandList");
LABEL_378:

            v4 = CFSTR("AcceptedCommandList");
LABEL_379:

            v4 = CFSTR("AcceptedCommandList");
LABEL_380:

            v4 = CFSTR("AcceptedCommandList");
LABEL_381:

            v13 = CFSTR("AcceptedCommandList");
LABEL_382:

            v4 = CFSTR("AcceptedCommandList");
LABEL_383:

            v4 = CFSTR("AcceptedCommandList");
LABEL_384:

            v4 = CFSTR("AcceptedCommandList");
LABEL_385:
            v27 = CFSTR("AcceptedCommandList");
            goto LABEL_846;
          case 65530:
LABEL_70:

            v4 = CFSTR("EventList");
LABEL_80:

            v4 = CFSTR("EventList");
LABEL_98:

            v4 = CFSTR("EventList");
LABEL_99:

            v4 = CFSTR("EventList");
LABEL_100:

            v4 = CFSTR("EventList");
LABEL_386:

            v4 = CFSTR("EventList");
LABEL_387:

            v4 = CFSTR("EventList");
LABEL_388:

            v4 = CFSTR("EventList");
LABEL_389:

            v4 = CFSTR("EventList");
LABEL_390:

            v4 = CFSTR("EventList");
LABEL_391:

            v4 = CFSTR("EventList");
LABEL_392:

            v4 = CFSTR("EventList");
LABEL_393:

            v4 = CFSTR("EventList");
LABEL_394:

            v4 = CFSTR("EventList");
LABEL_395:

            v4 = CFSTR("EventList");
LABEL_396:

            v4 = CFSTR("EventList");
LABEL_397:

            v4 = CFSTR("EventList");
LABEL_398:

            v4 = CFSTR("EventList");
LABEL_399:

            v4 = CFSTR("EventList");
LABEL_400:

            v4 = CFSTR("EventList");
LABEL_401:

            v4 = CFSTR("EventList");
LABEL_402:

            v4 = CFSTR("EventList");
LABEL_403:

            v4 = CFSTR("EventList");
LABEL_404:

            v4 = CFSTR("EventList");
LABEL_405:

            v4 = CFSTR("EventList");
LABEL_406:

            v4 = CFSTR("EventList");
LABEL_407:

            v4 = CFSTR("EventList");
LABEL_408:

            v4 = CFSTR("EventList");
LABEL_409:

            v4 = CFSTR("EventList");
LABEL_410:

            v4 = CFSTR("EventList");
LABEL_411:

            v4 = CFSTR("EventList");
LABEL_412:

            v4 = CFSTR("EventList");
LABEL_413:

            v4 = CFSTR("EventList");
LABEL_414:

            v4 = CFSTR("EventList");
LABEL_415:

            v4 = CFSTR("EventList");
LABEL_416:

            v4 = CFSTR("EventList");
LABEL_417:

            v4 = CFSTR("EventList");
LABEL_418:

            v4 = CFSTR("EventList");
LABEL_419:

            v4 = CFSTR("EventList");
LABEL_420:

            v4 = CFSTR("EventList");
LABEL_421:

            v4 = CFSTR("EventList");
LABEL_422:

            v4 = CFSTR("EventList");
LABEL_423:

            v4 = CFSTR("EventList");
LABEL_424:

            v4 = CFSTR("EventList");
LABEL_425:

            v4 = CFSTR("EventList");
LABEL_426:

            v4 = CFSTR("EventList");
LABEL_427:

            v4 = CFSTR("EventList");
LABEL_428:

            v4 = CFSTR("EventList");
LABEL_429:

            v4 = CFSTR("EventList");
LABEL_430:

            v4 = CFSTR("EventList");
LABEL_431:

            v4 = CFSTR("EventList");
LABEL_432:

            v4 = CFSTR("EventList");
LABEL_433:

            v4 = CFSTR("EventList");
LABEL_434:

            v4 = CFSTR("EventList");
LABEL_435:

            v4 = CFSTR("EventList");
LABEL_436:

            v4 = CFSTR("EventList");
LABEL_437:

            v4 = CFSTR("EventList");
LABEL_438:

            v4 = CFSTR("EventList");
LABEL_439:

            v4 = CFSTR("EventList");
LABEL_440:

            v4 = CFSTR("EventList");
LABEL_441:

            v4 = CFSTR("EventList");
LABEL_442:

            v4 = CFSTR("EventList");
LABEL_443:

            v4 = CFSTR("EventList");
LABEL_444:

            v4 = CFSTR("EventList");
LABEL_445:

            v4 = CFSTR("EventList");
LABEL_446:

            v4 = CFSTR("EventList");
LABEL_447:

            v4 = CFSTR("EventList");
LABEL_448:

            v4 = CFSTR("EventList");
LABEL_449:

            v4 = CFSTR("EventList");
LABEL_450:

            v4 = CFSTR("EventList");
LABEL_451:

            v4 = CFSTR("EventList");
LABEL_452:

            v4 = CFSTR("EventList");
LABEL_453:

            v4 = CFSTR("EventList");
LABEL_454:

            v4 = CFSTR("EventList");
LABEL_455:

            v4 = CFSTR("EventList");
LABEL_456:

            v4 = CFSTR("EventList");
LABEL_457:

            v4 = CFSTR("EventList");
LABEL_458:

            v4 = CFSTR("EventList");
LABEL_459:

            v4 = CFSTR("EventList");
LABEL_460:

            v4 = CFSTR("EventList");
LABEL_461:

            v4 = CFSTR("EventList");
LABEL_462:

            v4 = CFSTR("EventList");
LABEL_463:

            v4 = CFSTR("EventList");
LABEL_464:

            v4 = CFSTR("EventList");
LABEL_465:

            v4 = CFSTR("EventList");
LABEL_466:

            v4 = CFSTR("EventList");
LABEL_467:

            v4 = CFSTR("EventList");
LABEL_468:

            v4 = CFSTR("EventList");
LABEL_469:

            v4 = CFSTR("EventList");
LABEL_470:

            v4 = CFSTR("EventList");
LABEL_471:

            v4 = CFSTR("EventList");
LABEL_472:

            v4 = CFSTR("EventList");
LABEL_473:

            v4 = CFSTR("EventList");
LABEL_474:

            v4 = CFSTR("EventList");
LABEL_475:

            v4 = CFSTR("EventList");
LABEL_476:

            v4 = CFSTR("EventList");
LABEL_477:

            v4 = CFSTR("EventList");
LABEL_478:

            v4 = CFSTR("EventList");
LABEL_479:

            v11 = CFSTR("EventList");
LABEL_480:

            v12 = CFSTR("EventList");
LABEL_481:

            v4 = CFSTR("EventList");
LABEL_482:

            v4 = CFSTR("EventList");
LABEL_483:

            v4 = CFSTR("EventList");
LABEL_484:

            v4 = CFSTR("EventList");
LABEL_485:

            v4 = CFSTR("EventList");
LABEL_486:

            v4 = CFSTR("EventList");
LABEL_487:

            v4 = CFSTR("EventList");
LABEL_488:

            v4 = CFSTR("EventList");
LABEL_489:

            v4 = CFSTR("EventList");
LABEL_490:

            v4 = CFSTR("EventList");
LABEL_491:

            v4 = CFSTR("EventList");
LABEL_492:

            v4 = CFSTR("EventList");
LABEL_493:

            v4 = CFSTR("EventList");
LABEL_494:

            v4 = CFSTR("EventList");
LABEL_495:

            v4 = CFSTR("EventList");
LABEL_496:

            v13 = CFSTR("EventList");
LABEL_497:

            v4 = CFSTR("EventList");
LABEL_498:

            v4 = CFSTR("EventList");
LABEL_499:

            v4 = CFSTR("EventList");
LABEL_500:
            v27 = CFSTR("EventList");
            goto LABEL_846;
          case 65531:
LABEL_71:

            v4 = CFSTR("AttributeList");
LABEL_81:

            v4 = CFSTR("AttributeList");
LABEL_101:

            v4 = CFSTR("AttributeList");
LABEL_102:

            v4 = CFSTR("AttributeList");
LABEL_103:

            v4 = CFSTR("AttributeList");
LABEL_501:

            v4 = CFSTR("AttributeList");
LABEL_502:

            v4 = CFSTR("AttributeList");
LABEL_503:

            v4 = CFSTR("AttributeList");
LABEL_504:

            v4 = CFSTR("AttributeList");
LABEL_505:

            v4 = CFSTR("AttributeList");
LABEL_506:

            v4 = CFSTR("AttributeList");
LABEL_507:

            v4 = CFSTR("AttributeList");
LABEL_508:

            v4 = CFSTR("AttributeList");
LABEL_509:

            v4 = CFSTR("AttributeList");
LABEL_510:

            v4 = CFSTR("AttributeList");
LABEL_511:

            v4 = CFSTR("AttributeList");
LABEL_512:

            v4 = CFSTR("AttributeList");
LABEL_513:

            v4 = CFSTR("AttributeList");
LABEL_514:

            v4 = CFSTR("AttributeList");
LABEL_515:

            v4 = CFSTR("AttributeList");
LABEL_516:

            v4 = CFSTR("AttributeList");
LABEL_517:

            v4 = CFSTR("AttributeList");
LABEL_518:

            v4 = CFSTR("AttributeList");
LABEL_519:

            v4 = CFSTR("AttributeList");
LABEL_520:

            v4 = CFSTR("AttributeList");
LABEL_521:

            v4 = CFSTR("AttributeList");
LABEL_522:

            v4 = CFSTR("AttributeList");
LABEL_523:

            v4 = CFSTR("AttributeList");
LABEL_524:

            v4 = CFSTR("AttributeList");
LABEL_525:

            v4 = CFSTR("AttributeList");
LABEL_526:

            v4 = CFSTR("AttributeList");
LABEL_527:

            v4 = CFSTR("AttributeList");
LABEL_528:

            v4 = CFSTR("AttributeList");
LABEL_529:

            v4 = CFSTR("AttributeList");
LABEL_530:

            v4 = CFSTR("AttributeList");
LABEL_531:

            v4 = CFSTR("AttributeList");
LABEL_532:

            v4 = CFSTR("AttributeList");
LABEL_533:

            v4 = CFSTR("AttributeList");
LABEL_534:

            v4 = CFSTR("AttributeList");
LABEL_535:

            v4 = CFSTR("AttributeList");
LABEL_536:

            v4 = CFSTR("AttributeList");
LABEL_537:

            v4 = CFSTR("AttributeList");
LABEL_538:

            v4 = CFSTR("AttributeList");
LABEL_539:

            v4 = CFSTR("AttributeList");
LABEL_540:

            v4 = CFSTR("AttributeList");
LABEL_541:

            v4 = CFSTR("AttributeList");
LABEL_542:

            v4 = CFSTR("AttributeList");
LABEL_543:

            v4 = CFSTR("AttributeList");
LABEL_544:

            v4 = CFSTR("AttributeList");
LABEL_545:

            v4 = CFSTR("AttributeList");
LABEL_546:

            v4 = CFSTR("AttributeList");
LABEL_547:

            v4 = CFSTR("AttributeList");
LABEL_548:

            v4 = CFSTR("AttributeList");
LABEL_549:

            v4 = CFSTR("AttributeList");
LABEL_550:

            v4 = CFSTR("AttributeList");
LABEL_551:

            v4 = CFSTR("AttributeList");
LABEL_552:

            v4 = CFSTR("AttributeList");
LABEL_553:

            v4 = CFSTR("AttributeList");
LABEL_554:

            v4 = CFSTR("AttributeList");
LABEL_555:

            v4 = CFSTR("AttributeList");
LABEL_556:

            v4 = CFSTR("AttributeList");
LABEL_557:

            v4 = CFSTR("AttributeList");
LABEL_558:

            v4 = CFSTR("AttributeList");
LABEL_559:

            v4 = CFSTR("AttributeList");
LABEL_560:

            v4 = CFSTR("AttributeList");
LABEL_561:

            v4 = CFSTR("AttributeList");
LABEL_562:

            v4 = CFSTR("AttributeList");
LABEL_563:

            v4 = CFSTR("AttributeList");
LABEL_564:

            v4 = CFSTR("AttributeList");
LABEL_565:

            v4 = CFSTR("AttributeList");
LABEL_566:

            v4 = CFSTR("AttributeList");
LABEL_567:

            v4 = CFSTR("AttributeList");
LABEL_568:

            v4 = CFSTR("AttributeList");
LABEL_569:

            v4 = CFSTR("AttributeList");
LABEL_570:

            v4 = CFSTR("AttributeList");
LABEL_571:

            v4 = CFSTR("AttributeList");
LABEL_572:

            v4 = CFSTR("AttributeList");
LABEL_573:

            v4 = CFSTR("AttributeList");
LABEL_574:

            v4 = CFSTR("AttributeList");
LABEL_575:

            v4 = CFSTR("AttributeList");
LABEL_576:

            v4 = CFSTR("AttributeList");
LABEL_577:

            v4 = CFSTR("AttributeList");
LABEL_578:

            v4 = CFSTR("AttributeList");
LABEL_579:

            v4 = CFSTR("AttributeList");
LABEL_580:

            v4 = CFSTR("AttributeList");
LABEL_581:

            v4 = CFSTR("AttributeList");
LABEL_582:

            v4 = CFSTR("AttributeList");
LABEL_583:

            v4 = CFSTR("AttributeList");
LABEL_584:

            v4 = CFSTR("AttributeList");
LABEL_585:

            v4 = CFSTR("AttributeList");
LABEL_586:

            v4 = CFSTR("AttributeList");
LABEL_587:

            v4 = CFSTR("AttributeList");
LABEL_588:

            v4 = CFSTR("AttributeList");
LABEL_589:

            v4 = CFSTR("AttributeList");
LABEL_590:

            v4 = CFSTR("AttributeList");
LABEL_591:

            v4 = CFSTR("AttributeList");
LABEL_592:

            v4 = CFSTR("AttributeList");
LABEL_593:

            v4 = CFSTR("AttributeList");
LABEL_594:

            v11 = CFSTR("AttributeList");
LABEL_595:

            v12 = CFSTR("AttributeList");
LABEL_596:

            v4 = CFSTR("AttributeList");
LABEL_597:

            v4 = CFSTR("AttributeList");
LABEL_598:

            v4 = CFSTR("AttributeList");
LABEL_599:

            v4 = CFSTR("AttributeList");
LABEL_600:

            v4 = CFSTR("AttributeList");
LABEL_601:

            v4 = CFSTR("AttributeList");
LABEL_602:

            v4 = CFSTR("AttributeList");
LABEL_603:

            v4 = CFSTR("AttributeList");
LABEL_604:

            v4 = CFSTR("AttributeList");
LABEL_605:

            v4 = CFSTR("AttributeList");
LABEL_606:

            v4 = CFSTR("AttributeList");
LABEL_607:

            v4 = CFSTR("AttributeList");
LABEL_608:

            v4 = CFSTR("AttributeList");
LABEL_609:

            v4 = CFSTR("AttributeList");
LABEL_610:

            v4 = CFSTR("AttributeList");
LABEL_611:

            v13 = CFSTR("AttributeList");
LABEL_612:

            v4 = CFSTR("AttributeList");
LABEL_613:

            v4 = CFSTR("AttributeList");
LABEL_614:

            v4 = CFSTR("AttributeList");
LABEL_615:
            v27 = CFSTR("AttributeList");
            goto LABEL_846;
          case 65532:
LABEL_72:

            v4 = CFSTR("FeatureMap");
LABEL_82:

            v4 = CFSTR("FeatureMap");
LABEL_104:

            v4 = CFSTR("FeatureMap");
LABEL_105:

            v4 = CFSTR("FeatureMap");
LABEL_106:

            v4 = CFSTR("FeatureMap");
LABEL_616:

            v4 = CFSTR("FeatureMap");
LABEL_617:

            v4 = CFSTR("FeatureMap");
LABEL_618:

            v4 = CFSTR("FeatureMap");
LABEL_619:

            v4 = CFSTR("FeatureMap");
LABEL_620:

            v4 = CFSTR("FeatureMap");
LABEL_621:

            v4 = CFSTR("FeatureMap");
LABEL_622:

            v4 = CFSTR("FeatureMap");
LABEL_623:

            v4 = CFSTR("FeatureMap");
LABEL_624:

            v4 = CFSTR("FeatureMap");
LABEL_625:

            v4 = CFSTR("FeatureMap");
LABEL_626:

            v4 = CFSTR("FeatureMap");
LABEL_627:

            v4 = CFSTR("FeatureMap");
LABEL_628:

            v4 = CFSTR("FeatureMap");
LABEL_629:

            v4 = CFSTR("FeatureMap");
LABEL_630:

            v4 = CFSTR("FeatureMap");
LABEL_631:

            v4 = CFSTR("FeatureMap");
LABEL_632:

            v4 = CFSTR("FeatureMap");
LABEL_633:

            v4 = CFSTR("FeatureMap");
LABEL_634:

            v4 = CFSTR("FeatureMap");
LABEL_635:

            v4 = CFSTR("FeatureMap");
LABEL_636:

            v4 = CFSTR("FeatureMap");
LABEL_637:

            v4 = CFSTR("FeatureMap");
LABEL_638:

            v4 = CFSTR("FeatureMap");
LABEL_639:

            v4 = CFSTR("FeatureMap");
LABEL_640:

            v4 = CFSTR("FeatureMap");
LABEL_641:

            v4 = CFSTR("FeatureMap");
LABEL_642:

            v4 = CFSTR("FeatureMap");
LABEL_643:

            v4 = CFSTR("FeatureMap");
LABEL_644:

            v4 = CFSTR("FeatureMap");
LABEL_645:

            v4 = CFSTR("FeatureMap");
LABEL_646:

            v4 = CFSTR("FeatureMap");
LABEL_647:

            v4 = CFSTR("FeatureMap");
LABEL_648:

            v4 = CFSTR("FeatureMap");
LABEL_649:

            v4 = CFSTR("FeatureMap");
LABEL_650:

            v4 = CFSTR("FeatureMap");
LABEL_651:

            v4 = CFSTR("FeatureMap");
LABEL_652:

            v4 = CFSTR("FeatureMap");
LABEL_653:

            v4 = CFSTR("FeatureMap");
LABEL_654:

            v4 = CFSTR("FeatureMap");
LABEL_655:

            v4 = CFSTR("FeatureMap");
LABEL_656:

            v4 = CFSTR("FeatureMap");
LABEL_657:

            v4 = CFSTR("FeatureMap");
LABEL_658:

            v4 = CFSTR("FeatureMap");
LABEL_659:

            v4 = CFSTR("FeatureMap");
LABEL_660:

            v4 = CFSTR("FeatureMap");
LABEL_661:

            v4 = CFSTR("FeatureMap");
LABEL_662:

            v4 = CFSTR("FeatureMap");
LABEL_663:

            v4 = CFSTR("FeatureMap");
LABEL_664:

            v4 = CFSTR("FeatureMap");
LABEL_665:

            v4 = CFSTR("FeatureMap");
LABEL_666:

            v4 = CFSTR("FeatureMap");
LABEL_667:

            v4 = CFSTR("FeatureMap");
LABEL_668:

            v4 = CFSTR("FeatureMap");
LABEL_669:

            v4 = CFSTR("FeatureMap");
LABEL_670:

            v4 = CFSTR("FeatureMap");
LABEL_671:

            v4 = CFSTR("FeatureMap");
LABEL_672:

            v4 = CFSTR("FeatureMap");
LABEL_673:

            v4 = CFSTR("FeatureMap");
LABEL_674:

            v4 = CFSTR("FeatureMap");
LABEL_675:

            v4 = CFSTR("FeatureMap");
LABEL_676:

            v4 = CFSTR("FeatureMap");
LABEL_677:

            v4 = CFSTR("FeatureMap");
LABEL_678:

            v4 = CFSTR("FeatureMap");
LABEL_679:

            v4 = CFSTR("FeatureMap");
LABEL_680:

            v4 = CFSTR("FeatureMap");
LABEL_681:

            v4 = CFSTR("FeatureMap");
LABEL_682:

            v4 = CFSTR("FeatureMap");
LABEL_683:

            v4 = CFSTR("FeatureMap");
LABEL_684:

            v4 = CFSTR("FeatureMap");
LABEL_685:

            v4 = CFSTR("FeatureMap");
LABEL_686:

            v4 = CFSTR("FeatureMap");
LABEL_687:

            v4 = CFSTR("FeatureMap");
LABEL_688:

            v4 = CFSTR("FeatureMap");
LABEL_689:

            v4 = CFSTR("FeatureMap");
LABEL_690:

            v4 = CFSTR("FeatureMap");
LABEL_691:

            v4 = CFSTR("FeatureMap");
LABEL_692:

            v4 = CFSTR("FeatureMap");
LABEL_693:

            v4 = CFSTR("FeatureMap");
LABEL_694:

            v4 = CFSTR("FeatureMap");
LABEL_695:

            v4 = CFSTR("FeatureMap");
LABEL_696:

            v4 = CFSTR("FeatureMap");
LABEL_697:

            v4 = CFSTR("FeatureMap");
LABEL_698:

            v4 = CFSTR("FeatureMap");
LABEL_699:

            v4 = CFSTR("FeatureMap");
LABEL_700:

            v4 = CFSTR("FeatureMap");
LABEL_701:

            v4 = CFSTR("FeatureMap");
LABEL_702:

            v4 = CFSTR("FeatureMap");
LABEL_703:

            v4 = CFSTR("FeatureMap");
LABEL_704:

            v4 = CFSTR("FeatureMap");
LABEL_705:

            v4 = CFSTR("FeatureMap");
LABEL_706:

            v4 = CFSTR("FeatureMap");
LABEL_707:

            v4 = CFSTR("FeatureMap");
LABEL_708:

            v4 = CFSTR("FeatureMap");
LABEL_709:

            v11 = CFSTR("FeatureMap");
LABEL_710:

            v12 = CFSTR("FeatureMap");
LABEL_711:

            v4 = CFSTR("FeatureMap");
LABEL_712:

            v4 = CFSTR("FeatureMap");
LABEL_713:

            v4 = CFSTR("FeatureMap");
LABEL_714:

            v4 = CFSTR("FeatureMap");
LABEL_715:

            v4 = CFSTR("FeatureMap");
LABEL_716:

            v4 = CFSTR("FeatureMap");
LABEL_717:

            v4 = CFSTR("FeatureMap");
LABEL_718:

            v4 = CFSTR("FeatureMap");
LABEL_719:

            v4 = CFSTR("FeatureMap");
LABEL_720:

            v4 = CFSTR("FeatureMap");
LABEL_721:

            v4 = CFSTR("FeatureMap");
LABEL_722:

            v4 = CFSTR("FeatureMap");
LABEL_723:

            v4 = CFSTR("FeatureMap");
LABEL_724:

            v4 = CFSTR("FeatureMap");
LABEL_725:

            v4 = CFSTR("FeatureMap");
LABEL_726:

            v13 = CFSTR("FeatureMap");
LABEL_727:

            v4 = CFSTR("FeatureMap");
LABEL_728:

            v4 = CFSTR("FeatureMap");
LABEL_729:

            v4 = CFSTR("FeatureMap");
LABEL_730:
            v27 = CFSTR("FeatureMap");
            goto LABEL_846;
          case 65533:
LABEL_73:

            v4 = CFSTR("ClusterRevision");
LABEL_83:

            v4 = CFSTR("ClusterRevision");
LABEL_107:

            v4 = CFSTR("ClusterRevision");
LABEL_108:

            v4 = CFSTR("ClusterRevision");
LABEL_109:

            v4 = CFSTR("ClusterRevision");
LABEL_731:

            v4 = CFSTR("ClusterRevision");
LABEL_732:

            v4 = CFSTR("ClusterRevision");
LABEL_733:

            v4 = CFSTR("ClusterRevision");
LABEL_734:

            v4 = CFSTR("ClusterRevision");
LABEL_735:

            v4 = CFSTR("ClusterRevision");
LABEL_736:

            v4 = CFSTR("ClusterRevision");
LABEL_737:

            v4 = CFSTR("ClusterRevision");
LABEL_738:

            v4 = CFSTR("ClusterRevision");
LABEL_739:

            v4 = CFSTR("ClusterRevision");
LABEL_740:

            v4 = CFSTR("ClusterRevision");
LABEL_741:

            v4 = CFSTR("ClusterRevision");
LABEL_742:

            v4 = CFSTR("ClusterRevision");
LABEL_743:

            v4 = CFSTR("ClusterRevision");
LABEL_744:

            v4 = CFSTR("ClusterRevision");
LABEL_745:

            v4 = CFSTR("ClusterRevision");
LABEL_746:

            v4 = CFSTR("ClusterRevision");
LABEL_747:

            v4 = CFSTR("ClusterRevision");
LABEL_748:

            v4 = CFSTR("ClusterRevision");
LABEL_749:

            v4 = CFSTR("ClusterRevision");
LABEL_750:

            v4 = CFSTR("ClusterRevision");
LABEL_751:

            v4 = CFSTR("ClusterRevision");
LABEL_752:

            v4 = CFSTR("ClusterRevision");
LABEL_753:

            v4 = CFSTR("ClusterRevision");
LABEL_754:

            v4 = CFSTR("ClusterRevision");
LABEL_755:

            v4 = CFSTR("ClusterRevision");
LABEL_756:

            v4 = CFSTR("ClusterRevision");
LABEL_757:

            v4 = CFSTR("ClusterRevision");
LABEL_758:

            v4 = CFSTR("ClusterRevision");
LABEL_759:

            v4 = CFSTR("ClusterRevision");
LABEL_760:

            v4 = CFSTR("ClusterRevision");
LABEL_761:

            v4 = CFSTR("ClusterRevision");
LABEL_762:

            v4 = CFSTR("ClusterRevision");
LABEL_763:

            v4 = CFSTR("ClusterRevision");
LABEL_764:

            v4 = CFSTR("ClusterRevision");
LABEL_765:

            v4 = CFSTR("ClusterRevision");
LABEL_766:

            v4 = CFSTR("ClusterRevision");
LABEL_767:

            v4 = CFSTR("ClusterRevision");
LABEL_768:

            v4 = CFSTR("ClusterRevision");
LABEL_769:

            v4 = CFSTR("ClusterRevision");
LABEL_770:

            v4 = CFSTR("ClusterRevision");
LABEL_771:

            v4 = CFSTR("ClusterRevision");
LABEL_772:

            v4 = CFSTR("ClusterRevision");
LABEL_773:

            v4 = CFSTR("ClusterRevision");
LABEL_774:

            v4 = CFSTR("ClusterRevision");
LABEL_775:

            v4 = CFSTR("ClusterRevision");
LABEL_776:

            v4 = CFSTR("ClusterRevision");
LABEL_777:

            v4 = CFSTR("ClusterRevision");
LABEL_778:

            v4 = CFSTR("ClusterRevision");
LABEL_779:

            v4 = CFSTR("ClusterRevision");
LABEL_780:

            v4 = CFSTR("ClusterRevision");
LABEL_781:

            v4 = CFSTR("ClusterRevision");
LABEL_782:

            v4 = CFSTR("ClusterRevision");
LABEL_783:

            v4 = CFSTR("ClusterRevision");
LABEL_784:

            v4 = CFSTR("ClusterRevision");
LABEL_785:

            v4 = CFSTR("ClusterRevision");
LABEL_786:

            v4 = CFSTR("ClusterRevision");
LABEL_787:

            v4 = CFSTR("ClusterRevision");
LABEL_788:

            v4 = CFSTR("ClusterRevision");
LABEL_789:

            v4 = CFSTR("ClusterRevision");
LABEL_790:

            v4 = CFSTR("ClusterRevision");
LABEL_791:

            v4 = CFSTR("ClusterRevision");
LABEL_792:

            v4 = CFSTR("ClusterRevision");
LABEL_793:

            v4 = CFSTR("ClusterRevision");
LABEL_794:

            v4 = CFSTR("ClusterRevision");
LABEL_795:

            v4 = CFSTR("ClusterRevision");
LABEL_796:

            v4 = CFSTR("ClusterRevision");
LABEL_797:

            v4 = CFSTR("ClusterRevision");
LABEL_798:

            v4 = CFSTR("ClusterRevision");
LABEL_799:

            v4 = CFSTR("ClusterRevision");
LABEL_800:

            v4 = CFSTR("ClusterRevision");
LABEL_801:

            v4 = CFSTR("ClusterRevision");
LABEL_802:

            v4 = CFSTR("ClusterRevision");
LABEL_803:

            v4 = CFSTR("ClusterRevision");
LABEL_804:

            v4 = CFSTR("ClusterRevision");
LABEL_805:

            v4 = CFSTR("ClusterRevision");
LABEL_806:

            v4 = CFSTR("ClusterRevision");
LABEL_807:

            v4 = CFSTR("ClusterRevision");
LABEL_808:

            v4 = CFSTR("ClusterRevision");
LABEL_809:

            v4 = CFSTR("ClusterRevision");
LABEL_810:

            v4 = CFSTR("ClusterRevision");
LABEL_811:

            v4 = CFSTR("ClusterRevision");
LABEL_812:

            v4 = CFSTR("ClusterRevision");
LABEL_813:

            v4 = CFSTR("ClusterRevision");
LABEL_814:

            v4 = CFSTR("ClusterRevision");
LABEL_815:

            v4 = CFSTR("ClusterRevision");
LABEL_816:

            v4 = CFSTR("ClusterRevision");
LABEL_817:

            v4 = CFSTR("ClusterRevision");
LABEL_818:

            v4 = CFSTR("ClusterRevision");
LABEL_819:

            v4 = CFSTR("ClusterRevision");
LABEL_820:

            v4 = CFSTR("ClusterRevision");
LABEL_821:

            v4 = CFSTR("ClusterRevision");
LABEL_822:

            v4 = CFSTR("ClusterRevision");
LABEL_823:

            v4 = CFSTR("ClusterRevision");
LABEL_824:

            v11 = CFSTR("ClusterRevision");
LABEL_825:

            v12 = CFSTR("ClusterRevision");
LABEL_826:

            v4 = CFSTR("ClusterRevision");
LABEL_827:

            v4 = CFSTR("ClusterRevision");
LABEL_828:

            v4 = CFSTR("ClusterRevision");
LABEL_829:

            v4 = CFSTR("ClusterRevision");
LABEL_830:

            v4 = CFSTR("ClusterRevision");
LABEL_831:

            v4 = CFSTR("ClusterRevision");
LABEL_832:

            v4 = CFSTR("ClusterRevision");
LABEL_833:

            v4 = CFSTR("ClusterRevision");
LABEL_834:

            v4 = CFSTR("ClusterRevision");
LABEL_835:

            v4 = CFSTR("ClusterRevision");
LABEL_836:

            v4 = CFSTR("ClusterRevision");
LABEL_837:

            v4 = CFSTR("ClusterRevision");
LABEL_838:

            v4 = CFSTR("ClusterRevision");
LABEL_839:

            v4 = CFSTR("ClusterRevision");
LABEL_840:

            v4 = CFSTR("ClusterRevision");
LABEL_841:

            v13 = CFSTR("ClusterRevision");
LABEL_842:

            v4 = CFSTR("ClusterRevision");
LABEL_843:

            v4 = CFSTR("ClusterRevision");
LABEL_844:

            v4 = CFSTR("ClusterRevision");
LABEL_845:
            v27 = CFSTR("ClusterRevision");
            goto LABEL_846;
          default:
            if ((_DWORD)a2)
            {
              if ((_DWORD)a2 == 1)
              {
                v4 = CFSTR("IdentifyType");
LABEL_74:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v19 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v19;
LABEL_75:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_76;
                  case 65529:
                    goto LABEL_79;
                  case 65530:
                    goto LABEL_80;
                  case 65531:
                    goto LABEL_81;
                  case 65532:
                    goto LABEL_82;
                  case 65533:
                    goto LABEL_83;
                  default:
                    v20 = CFSTR("GlobalSceneControl");
                    switch((int)a2)
                    {
                      case 16384:
                        goto LABEL_89;
                      case 16385:
                        v20 = CFSTR("OnTime");
                        goto LABEL_89;
                      case 16386:
                        v20 = CFSTR("OffWaitTime");
                        goto LABEL_89;
                      case 16387:
                        v20 = CFSTR("StartUpOnOff");
LABEL_89:

                        v4 = (__CFString *)v20;
                        goto LABEL_113;
                      default:
                        if (!(_DWORD)a2)
                          goto LABEL_85;
                        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                        v21 = objc_claimAutoreleasedReturnValue();

                        v4 = (__CFString *)v21;
                        break;
                    }
                    goto LABEL_91;
                }
              }
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_65:
              v9 = v4;
              v8 = v4;
              v7 = v4;
              v6 = v4;
              v5 = v4;
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_66;
                case 65529:
                  goto LABEL_69;
                case 65530:
                  goto LABEL_70;
                case 65531:
                  goto LABEL_71;
                case 65532:
                  goto LABEL_72;
                case 65533:
                  goto LABEL_73;
                default:
                  if (!(_DWORD)a2)
                    goto LABEL_68;
                  goto LABEL_74;
              }
            }
            v4 = CFSTR("IdentifyTime");
LABEL_68:

            v4 = CFSTR("NameSupport");
LABEL_85:

            v4 = CFSTR("OnOff");
            break;
        }
        goto LABEL_112;
      case 4:
        goto LABEL_65;
      case 5:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 39:
      case 58:
      case 61:
      case 66:
      case 67:
      case 68:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 88:
      case 90:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 146:
      case 147:
      case 149:
      case 154:
        goto LABEL_847;
      case 6:
        goto LABEL_75;
      case 7:
LABEL_91:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_92;
          case 65529:
            goto LABEL_95;
          case 65530:
            goto LABEL_98;
          case 65531:
            goto LABEL_101;
          case 65532:
            goto LABEL_104;
          case 65533:
            goto LABEL_107;
          default:
            if ((_DWORD)a2 == 16)
            {

              v4 = CFSTR("SwitchActions");
LABEL_120:
              v22 = CFSTR("OnOffTransitionTime");
            }
            else
            {
              if ((_DWORD)a2)
              {
LABEL_113:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v23 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v23;
LABEL_114:
                v22 = CFSTR("CurrentLevel");
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_153;
                  case 1:
                    v22 = CFSTR("RemainingTime");
                    goto LABEL_153;
                  case 2:
                    v22 = CFSTR("MinLevel");
                    goto LABEL_153;
                  case 3:
                    v22 = CFSTR("MaxLevel");
                    goto LABEL_153;
                  case 4:

                    v25 = CFSTR("ActiveText");
                    v4 = CFSTR("CurrentFrequency");
                    goto LABEL_851;
                  case 5:
                    v22 = CFSTR("MinFrequency");
                    goto LABEL_153;
                  case 6:
                    v22 = CFSTR("MaxFrequency");
                    goto LABEL_153;
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
LABEL_121:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v24 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v24;
                    goto LABEL_122;
                  case 15:
                    v22 = CFSTR("Options");
                    goto LABEL_153;
                  case 16:
                    goto LABEL_120;
                  case 17:
                    v22 = CFSTR("OnLevel");
                    goto LABEL_153;
                  case 18:
                    v22 = CFSTR("OnTransitionTime");
                    goto LABEL_153;
                  case 19:
                    v22 = CFSTR("OffTransitionTime");
                    goto LABEL_153;
                  case 20:
                    v22 = CFSTR("DefaultMoveRate");
                    goto LABEL_153;
                  default:
                    switch((int)a2)
                    {
                      case 65528:
                        goto LABEL_93;
                      case 65529:
                        goto LABEL_96;
                      case 65530:
                        goto LABEL_99;
                      case 65531:
                        goto LABEL_102;
                      case 65532:
                        goto LABEL_105;
                      case 65533:
                        goto LABEL_108;
                      default:
                        if ((_DWORD)a2 != 0x4000)
                          goto LABEL_121;
                        v22 = CFSTR("StartUpCurrentLevel");
                        break;
                    }
                    goto LABEL_153;
                }
              }
LABEL_112:

              v22 = CFSTR("CurrentLevel");
              v4 = CFSTR("SwitchType");
            }
LABEL_153:

            v4 = (__CFString *)v22;
            break;
        }
        goto LABEL_154;
      case 8:
        goto LABEL_114;
      case 15:
LABEL_122:
        if ((int)a2 > 110)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_94;
            case 65529:
              goto LABEL_97;
            case 65530:
              goto LABEL_100;
            case 65531:
              goto LABEL_103;
            case 65532:
              goto LABEL_106;
            case 65533:
              goto LABEL_109;
            default:
              if ((_DWORD)a2 == 111)
              {
                v25 = CFSTR("StatusFlags");
              }
              else
              {
                if ((_DWORD)a2 != 256)
                  goto LABEL_154;
                v25 = CFSTR("ApplicationType");
              }
              break;
          }
        }
        else if ((int)a2 <= 80)
        {
          switch((_DWORD)a2)
          {
            case 4:
              v25 = CFSTR("ActiveText");
              break;
            case 0x1C:
              v25 = CFSTR("Description");
              break;
            case 0x2E:
              v25 = CFSTR("InactiveText");
              break;
            default:
              goto LABEL_154;
          }
        }
        else if ((int)a2 > 84)
        {
          if ((_DWORD)a2 == 85)
          {
            v25 = CFSTR("PresentValue");
          }
          else
          {
            if ((_DWORD)a2 != 103)
              goto LABEL_154;
            v25 = CFSTR("Reliability");
          }
        }
        else
        {
          if ((_DWORD)a2 != 81)
          {
            if ((_DWORD)a2 == 84)
            {
              v25 = CFSTR("Polarity");
              goto LABEL_851;
            }
LABEL_154:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v26 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v26;
LABEL_155:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_156;
              case 65529:
                goto LABEL_271;
              case 65530:
                goto LABEL_386;
              case 65531:
                goto LABEL_501;
              case 65532:
                goto LABEL_616;
              case 65533:
                goto LABEL_731;
              default:
                goto LABEL_852;
            }
          }
          v25 = CFSTR("OutOfService");
        }
LABEL_851:

        v4 = (__CFString *)v25;
LABEL_852:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v31 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v31;
LABEL_853:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_157;
          case 65529:
            goto LABEL_272;
          case 65530:
            goto LABEL_387;
          case 65531:
            goto LABEL_502;
          case 65532:
            goto LABEL_617;
          case 65533:
            goto LABEL_732;
          default:
            v32 = CFSTR("ServerList");
            switch((int)a2)
            {
              case 0:

                v4 = CFSTR("DeviceTypeList");
LABEL_859:

                v4 = CFSTR("Binding");
LABEL_867:

                v4 = CFSTR("ACL");
                goto LABEL_868;
              case 1:
                goto LABEL_863;
              case 2:
                v32 = CFSTR("ClientList");
                goto LABEL_863;
              case 3:
                v32 = CFSTR("PartsList");
                goto LABEL_863;
              case 4:
                v32 = CFSTR("TagList");
LABEL_863:

                v4 = (__CFString *)v32;
LABEL_864:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v34 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v34;
                goto LABEL_865;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v33 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v33;
                goto LABEL_857;
            }
        }
      case 28:
        goto LABEL_155;
      case 29:
        goto LABEL_853;
      case 30:
LABEL_857:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_158;
          case 65529:
            goto LABEL_273;
          case 65530:
            goto LABEL_388;
          case 65531:
            goto LABEL_503;
          case 65532:
            goto LABEL_618;
          case 65533:
            goto LABEL_733;
          default:
            if (!(_DWORD)a2)
              goto LABEL_859;
            goto LABEL_864;
        }
      case 31:
LABEL_865:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_159;
          case 65529:
            goto LABEL_274;
          case 65530:
            goto LABEL_389;
          case 65531:
            goto LABEL_504;
          case 65532:
            goto LABEL_619;
          case 65533:
            goto LABEL_734;
          default:
            v35 = CFSTR("TargetsPerAccessControlEntry");
            switch((int)a2)
            {
              case 0:
                goto LABEL_867;
              case 1:

                v4 = CFSTR("Extension");
                goto LABEL_877;
              case 2:

                v4 = CFSTR("SubjectsPerAccessControlEntry");
                goto LABEL_880;
              case 3:
                goto LABEL_954;
              case 4:
                v35 = CFSTR("AccessControlEntriesPerFabric");
LABEL_954:

                v4 = (__CFString *)v35;
                goto LABEL_955;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v37 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v37;
                goto LABEL_870;
            }
        }
      case 37:
LABEL_870:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_160;
            case 65529:
              goto LABEL_275;
            case 65530:
              goto LABEL_390;
            case 65531:
              goto LABEL_505;
            case 65532:
              goto LABEL_620;
            case 65533:
              goto LABEL_735;
            default:
              goto LABEL_955;
          }
        }
        if ((_DWORD)a2)
        {
          if ((_DWORD)a2 == 1)
          {
LABEL_877:

            v4 = CFSTR("EndpointLists");
LABEL_878:
            v36 = CFSTR("VendorName");
          }
          else
          {
            if ((_DWORD)a2 != 2)
            {
LABEL_955:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v53 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v53;
LABEL_956:
              v36 = CFSTR("DataModelRevision");
              switch((int)a2)
              {
                case 0:
                  goto LABEL_882;
                case 1:
                  goto LABEL_878;
                case 2:
                  goto LABEL_881;
                case 3:
                  v36 = CFSTR("ProductName");
                  goto LABEL_882;
                case 4:
                  v36 = CFSTR("ProductID");
                  goto LABEL_882;
                case 5:
                  v36 = CFSTR("NodeLabel");
                  goto LABEL_882;
                case 6:
                  v36 = CFSTR("Location");
                  goto LABEL_882;
                case 7:
                  v36 = CFSTR("HardwareVersion");
                  goto LABEL_882;
                case 8:
                  v36 = CFSTR("HardwareVersionString");
                  goto LABEL_882;
                case 9:
                  v36 = CFSTR("SoftwareVersion");
                  goto LABEL_882;
                case 10:
                  v36 = CFSTR("SoftwareVersionString");
                  goto LABEL_882;
                case 11:
                  v36 = CFSTR("ManufacturingDate");
                  goto LABEL_882;
                case 12:
                  v36 = CFSTR("PartNumber");
                  goto LABEL_882;
                case 13:
                  v36 = CFSTR("ProductURL");
                  goto LABEL_882;
                case 14:
                  v36 = CFSTR("ProductLabel");
                  goto LABEL_882;
                case 15:
                  v36 = CFSTR("SerialNumber");
                  goto LABEL_882;
                case 16:
                  v36 = CFSTR("LocalConfigDisabled");
                  goto LABEL_882;
                case 17:
                  v36 = CFSTR("Reachable");
                  goto LABEL_882;
                case 18:
                  v36 = CFSTR("UniqueID");
                  goto LABEL_882;
                case 19:
                  v36 = CFSTR("CapabilityMinima");
                  goto LABEL_882;
                case 20:
                  v36 = CFSTR("ProductAppearance");
                  goto LABEL_882;
                case 21:
                  v36 = CFSTR("SpecificationVersion");
                  goto LABEL_882;
                case 22:
                  v36 = CFSTR("MaxPathsPerInvoke");
                  goto LABEL_882;
                default:
                  switch((int)a2)
                  {
                    case 65528:
                      goto LABEL_161;
                    case 65529:
                      goto LABEL_276;
                    case 65530:
                      goto LABEL_391;
                    case 65531:
                      goto LABEL_506;
                    case 65532:
                      goto LABEL_621;
                    case 65533:
                      goto LABEL_736;
                    default:
                      objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                      v60 = objc_claimAutoreleasedReturnValue();

                      v4 = (__CFString *)v60;
                      goto LABEL_995;
                  }
              }
            }
LABEL_880:

            v4 = CFSTR("SetupURL");
LABEL_881:
            v36 = CFSTR("VendorID");
          }
        }
        else
        {
LABEL_868:

          v36 = CFSTR("DataModelRevision");
          v4 = CFSTR("ActionList");
        }
LABEL_882:

        v4 = (__CFString *)v36;
LABEL_883:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v38 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v38;
LABEL_884:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_163;
          case 65529:
            goto LABEL_278;
          case 65530:
            goto LABEL_393;
          case 65531:
            goto LABEL_508;
          case 65532:
            goto LABEL_623;
          case 65533:
            goto LABEL_738;
          default:
            v39 = CFSTR("UpdateState");
            switch((int)a2)
            {
              case 0:

                v4 = CFSTR("DefaultOTAProviders");
LABEL_891:

                v4 = CFSTR("ActiveLocale");
                goto LABEL_903;
              case 1:

                v4 = CFSTR("UpdatePossible");
LABEL_893:

                v41 = CFSTR("ActiveCalendarType");
                v4 = CFSTR("SupportedLocales");
                goto LABEL_906;
              case 2:
                goto LABEL_895;
              case 3:
                v39 = CFSTR("UpdateStateProgress");
LABEL_895:

                v4 = (__CFString *)v39;
LABEL_896:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v42 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v42;
                goto LABEL_897;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v40 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v40;
                goto LABEL_888;
            }
        }
      case 40:
        goto LABEL_956;
      case 41:
LABEL_995:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_162;
          case 65529:
            goto LABEL_277;
          case 65530:
            goto LABEL_392;
          case 65531:
            goto LABEL_507;
          case 65532:
            goto LABEL_622;
          case 65533:
            goto LABEL_737;
          default:
            goto LABEL_883;
        }
      case 42:
        goto LABEL_884;
      case 43:
LABEL_888:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_164;
          case 65529:
            goto LABEL_279;
          case 65530:
            goto LABEL_394;
          case 65531:
            goto LABEL_509;
          case 65532:
            goto LABEL_624;
          case 65533:
            goto LABEL_739;
          default:
            if ((_DWORD)a2 == 1)
              goto LABEL_893;
            if (!(_DWORD)a2)
              goto LABEL_891;
            goto LABEL_896;
        }
      case 44:
LABEL_897:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_165;
            case 65529:
              goto LABEL_280;
            case 65530:
              goto LABEL_395;
            case 65531:
              goto LABEL_510;
            case 65532:
              goto LABEL_625;
            case 65533:
              goto LABEL_740;
            default:
              goto LABEL_949;
          }
        }
        if ((_DWORD)a2)
        {
          if ((_DWORD)a2 == 1)
          {
            v41 = CFSTR("ActiveCalendarType");
          }
          else
          {
            if ((_DWORD)a2 != 2)
            {
LABEL_949:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v52 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v52;
LABEL_950:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_166;
                case 65529:
                  goto LABEL_281;
                case 65530:
                  goto LABEL_396;
                case 65531:
                  goto LABEL_511;
                case 65532:
                  goto LABEL_626;
                case 65533:
                  goto LABEL_741;
                default:
                  if ((_DWORD)a2)
                    goto LABEL_907;
                  goto LABEL_904;
              }
            }
            v41 = CFSTR("SupportedCalendarTypes");
          }
LABEL_906:

          v4 = (__CFString *)v41;
LABEL_907:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v43 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v43;
LABEL_908:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_167;
            case 65529:
              goto LABEL_282;
            case 65530:
              goto LABEL_397;
            case 65531:
              goto LABEL_512;
            case 65532:
              goto LABEL_627;
            case 65533:
              goto LABEL_742;
            default:
              if (!(_DWORD)a2)
                goto LABEL_910;
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v50 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v50;
              break;
          }
LABEL_945:
          v51 = CFSTR("WiredCurrentType");
          switch((int)a2)
          {
            case 0:
              goto LABEL_911;
            case 1:

              v4 = CFSTR("Order");
LABEL_2136:

              v4 = CFSTR("BasicCommissioningInfo");
LABEL_2137:
              v44 = CFSTR("Networks");
              goto LABEL_913;
            case 2:

              v4 = CFSTR("Description");
LABEL_2138:

              v4 = CFSTR("RegulatoryConfig");
LABEL_2139:
              v44 = CFSTR("ScanMaxTimeSeconds");
              goto LABEL_913;
            case 3:

              v4 = CFSTR("WiredAssessedInputVoltage");
LABEL_2140:

              v4 = CFSTR("LocationCapability");
LABEL_2141:
              v44 = CFSTR("ConnectMaxTimeSeconds");
              goto LABEL_913;
            case 4:

              v4 = CFSTR("WiredAssessedInputFrequency");
LABEL_2142:

              v4 = CFSTR("SupportsConcurrentConnection");
LABEL_2143:
              v44 = CFSTR("InterfaceEnabled");
              goto LABEL_913;
            case 5:
              goto LABEL_2121;
            case 6:
              v51 = CFSTR("WiredAssessedCurrent");
              goto LABEL_2121;
            case 7:
              v51 = CFSTR("WiredNominalVoltage");
              goto LABEL_2121;
            case 8:
              v51 = CFSTR("WiredMaximumCurrent");
              goto LABEL_2121;
            case 9:
              v51 = CFSTR("WiredPresent");
              goto LABEL_2121;
            case 10:
              v51 = CFSTR("ActiveWiredFaults");
              goto LABEL_2121;
            case 11:
              v51 = CFSTR("BatVoltage");
              goto LABEL_2121;
            case 12:
              v51 = CFSTR("BatPercentRemaining");
              goto LABEL_2121;
            case 13:
              v51 = CFSTR("BatTimeRemaining");
              goto LABEL_2121;
            case 14:
              v51 = CFSTR("BatChargeLevel");
              goto LABEL_2121;
            case 15:
              v51 = CFSTR("BatReplacementNeeded");
              goto LABEL_2121;
            case 16:
              v51 = CFSTR("BatReplaceability");
              goto LABEL_2121;
            case 17:
              v51 = CFSTR("BatPresent");
              goto LABEL_2121;
            case 18:
              v51 = CFSTR("ActiveBatFaults");
              goto LABEL_2121;
            case 19:
              v51 = CFSTR("BatReplacementDescription");
              goto LABEL_2121;
            case 20:
              v51 = CFSTR("BatCommonDesignation");
              goto LABEL_2121;
            case 21:
              v51 = CFSTR("BatANSIDesignation");
              goto LABEL_2121;
            case 22:
              v51 = CFSTR("BatIECDesignation");
              goto LABEL_2121;
            case 23:
              v51 = CFSTR("BatApprovedChemistry");
              goto LABEL_2121;
            case 24:
              v51 = CFSTR("BatCapacity");
              goto LABEL_2121;
            case 25:
              v51 = CFSTR("BatQuantity");
              goto LABEL_2121;
            case 26:
              v51 = CFSTR("BatChargeState");
              goto LABEL_2121;
            case 27:
              v51 = CFSTR("BatTimeToFullCharge");
              goto LABEL_2121;
            case 28:
              v51 = CFSTR("BatFunctionalWhileCharging");
              goto LABEL_2121;
            case 29:
              v51 = CFSTR("BatChargingCurrent");
              goto LABEL_2121;
            case 30:
              v51 = CFSTR("ActiveBatChargeFaults");
              goto LABEL_2121;
            case 31:
              v51 = CFSTR("EndpointList");
LABEL_2121:

              v4 = (__CFString *)v51;
LABEL_2122:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v183 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v183;
              break;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_168;
                case 65529:
                  goto LABEL_283;
                case 65530:
                  goto LABEL_398;
                case 65531:
                  goto LABEL_513;
                case 65532:
                  goto LABEL_628;
                case 65533:
                  goto LABEL_743;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v185 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v185;
                  goto LABEL_2134;
              }
          }
LABEL_2123:
          v44 = CFSTR("MaxNetworks");
          switch((int)a2)
          {
            case 0:
              goto LABEL_913;
            case 1:
              goto LABEL_2137;
            case 2:
              goto LABEL_2139;
            case 3:
              goto LABEL_2141;
            case 4:
              goto LABEL_2143;
            case 5:
              v44 = CFSTR("LastNetworkingStatus");
              goto LABEL_913;
            case 6:
              v44 = CFSTR("LastNetworkID");
              goto LABEL_913;
            case 7:
              v44 = CFSTR("LastConnectErrorValue");
              goto LABEL_913;
            case 8:
              v44 = CFSTR("SupportedWiFiBands");
              goto LABEL_913;
            case 9:
              v44 = CFSTR("SupportedThreadFeatures");
              goto LABEL_913;
            case 10:
              v44 = CFSTR("ThreadVersion");
              goto LABEL_913;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_170;
                case 65529:
                  goto LABEL_285;
                case 65530:
                  goto LABEL_400;
                case 65531:
                  goto LABEL_515;
                case 65532:
                  goto LABEL_630;
                case 65533:
                  goto LABEL_745;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v184 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v184;
                  goto LABEL_2132;
              }
          }
        }
LABEL_903:

        v4 = CFSTR("HourFormat");
LABEL_904:

        v4 = CFSTR("TemperatureUnit");
LABEL_910:

        v4 = CFSTR("Sources");
LABEL_911:

        v4 = CFSTR("Status");
LABEL_912:

        v44 = CFSTR("MaxNetworks");
        v4 = CFSTR("Breadcrumb");
LABEL_913:

        v4 = (__CFString *)v44;
LABEL_914:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v45 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v45;
LABEL_915:
        v46 = CFSTR("BootReason");
        switch((int)a2)
        {
          case 0:

            v4 = CFSTR("NetworkInterfaces");
LABEL_932:

            v4 = CFSTR("ThreadMetrics");
LABEL_933:

            v4 = CFSTR("Channel");
LABEL_934:

            v4 = CFSTR("BSSID");
LABEL_1056:

            v63 = CFSTR("UTCTime");
            v4 = CFSTR("PHYRate");
LABEL_1090:

            v4 = (__CFString *)v63;
LABEL_1091:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v67 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v67;
            goto LABEL_1092;
          case 1:

            v4 = CFSTR("RebootCount");
LABEL_935:

            v4 = CFSTR("CurrentHeapFree");
LABEL_936:

            v4 = CFSTR("RoutingRole");
LABEL_937:

            v4 = CFSTR("SecurityType");
LABEL_1058:

            v4 = CFSTR("FullDuplex");
LABEL_1059:

            v4 = CFSTR("Granularity");
LABEL_1060:

            v4 = CFSTR("VendorName");
            goto LABEL_1098;
          case 2:

            v4 = CFSTR("UpTime");
LABEL_938:

            v4 = CFSTR("CurrentHeapUsed");
LABEL_939:

            v4 = CFSTR("NetworkName");
LABEL_940:

            v4 = CFSTR("WiFiVersion");
LABEL_1061:

            v4 = CFSTR("PacketRxCount");
LABEL_1062:

            v4 = CFSTR("TimeSource");
LABEL_1063:

            v4 = CFSTR("VendorID");
            goto LABEL_1097;
          case 3:

            v4 = CFSTR("TotalOperationalHours");
LABEL_941:

            v4 = CFSTR("CurrentHeapHighWatermark");
LABEL_942:

            v4 = CFSTR("PanId");
LABEL_943:

            v4 = CFSTR("ChannelNumber");
LABEL_1064:

            v4 = CFSTR("PacketTxCount");
LABEL_1065:

            v64 = CFSTR("ProductName");
            v4 = CFSTR("TrustedTimeSource");
LABEL_1121:

            v4 = (__CFString *)v64;
            goto LABEL_1122;
          case 4:
            goto LABEL_925;
          case 5:
            v46 = CFSTR("ActiveHardwareFaults");
            goto LABEL_925;
          case 6:
            v46 = CFSTR("ActiveRadioFaults");
            goto LABEL_925;
          case 7:
            v46 = CFSTR("ActiveNetworkFaults");
            goto LABEL_925;
          case 8:
            v46 = CFSTR("TestEventTriggersEnabled");
LABEL_925:

            v4 = (__CFString *)v46;
LABEL_926:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v47 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v47;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_172;
              case 65529:
                goto LABEL_287;
              case 65530:
                goto LABEL_402;
              case 65531:
                goto LABEL_517;
              case 65532:
                goto LABEL_632;
              case 65533:
                goto LABEL_747;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v49 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v49;
                goto LABEL_930;
            }
        }
LABEL_927:
        v48 = CFSTR("LeaderRouterId");
        switch((int)a2)
        {
          case 0:
            goto LABEL_933;
          case 1:
            goto LABEL_936;
          case 2:
            goto LABEL_939;
          case 3:
            goto LABEL_942;
          case 4:

            v4 = CFSTR("ExtendedPanId");
LABEL_1068:

            v4 = CFSTR("RSSI");
LABEL_1069:

            v4 = CFSTR("TxErrCount");
LABEL_1085:
            v63 = CFSTR("DefaultNTP");
            goto LABEL_1090;
          case 5:

            v4 = CFSTR("MeshLocalPrefix");
LABEL_1071:

            v4 = CFSTR("BeaconLostCount");
LABEL_1072:

            v4 = CFSTR("CollisionCount");
LABEL_1087:

            v4 = CFSTR("TimeZone");
LABEL_1088:
            v64 = CFSTR("NodeLabel");
            goto LABEL_1121;
          case 6:

            v4 = CFSTR("OverrunCount");
LABEL_1073:

            v4 = CFSTR("BeaconRxCount");
LABEL_1074:

            v4 = CFSTR("OverrunCount");
LABEL_1089:
            v63 = CFSTR("DSTOffset");
            goto LABEL_1090;
          case 7:

            v4 = CFSTR("NeighborTable");
LABEL_1075:

            v4 = CFSTR("PacketMulticastRxCount");
LABEL_1076:

            v4 = CFSTR("CarrierDetect");
LABEL_1099:

            v4 = CFSTR("LocalTime");
LABEL_1100:
            v64 = CFSTR("HardwareVersion");
            goto LABEL_1121;
          case 8:

            v4 = CFSTR("RouteTable");
LABEL_1077:

            v4 = CFSTR("PacketMulticastTxCount");
LABEL_1078:

            v4 = CFSTR("TimeSinceReset");
LABEL_1101:

            v4 = CFSTR("TimeZoneDatabase");
LABEL_1102:
            v64 = CFSTR("HardwareVersionString");
            goto LABEL_1121;
          case 9:

            v61 = CFSTR("PacketUnicastRxCount");
            v4 = CFSTR("PartitionId");
            goto LABEL_1082;
          case 10:

            v4 = CFSTR("Weighting");
LABEL_1079:
            v61 = CFSTR("PacketUnicastTxCount");
            goto LABEL_1082;
          case 11:

            v4 = CFSTR("DataVersion");
LABEL_1080:
            v61 = CFSTR("CurrentMaxRate");
            goto LABEL_1082;
          case 12:

            v4 = CFSTR("StableDataVersion");
LABEL_1081:
            v61 = CFSTR("OverrunCount");
LABEL_1082:

            v4 = (__CFString *)v61;
LABEL_1083:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v66 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v66;
            goto LABEL_1084;
          case 13:
            goto LABEL_1053;
          case 14:
            v48 = CFSTR("DetachedRoleCount");
            goto LABEL_1053;
          case 15:
            v48 = CFSTR("ChildRoleCount");
            goto LABEL_1053;
          case 16:
            v48 = CFSTR("RouterRoleCount");
            goto LABEL_1053;
          case 17:
            v48 = CFSTR("LeaderRoleCount");
            goto LABEL_1053;
          case 18:
            v48 = CFSTR("AttachAttemptCount");
            goto LABEL_1053;
          case 19:
            v48 = CFSTR("PartitionIdChangeCount");
            goto LABEL_1053;
          case 20:
            v48 = CFSTR("BetterPartitionAttachAttemptCount");
            goto LABEL_1053;
          case 21:
            v48 = CFSTR("ParentChangeCount");
            goto LABEL_1053;
          case 22:
            v48 = CFSTR("TxTotalCount");
            goto LABEL_1053;
          case 23:
            v48 = CFSTR("TxUnicastCount");
            goto LABEL_1053;
          case 24:
            v48 = CFSTR("TxBroadcastCount");
            goto LABEL_1053;
          case 25:
            v48 = CFSTR("TxAckRequestedCount");
            goto LABEL_1053;
          case 26:
            v48 = CFSTR("TxAckedCount");
            goto LABEL_1053;
          case 27:
            v48 = CFSTR("TxNoAckRequestedCount");
            goto LABEL_1053;
          case 28:
            v48 = CFSTR("TxDataCount");
            goto LABEL_1053;
          case 29:
            v48 = CFSTR("TxDataPollCount");
            goto LABEL_1053;
          case 30:
            v48 = CFSTR("TxBeaconCount");
            goto LABEL_1053;
          case 31:
            v48 = CFSTR("TxBeaconRequestCount");
            goto LABEL_1053;
          case 32:
            v48 = CFSTR("TxOtherCount");
            goto LABEL_1053;
          case 33:
            v48 = CFSTR("TxRetryCount");
            goto LABEL_1053;
          case 34:
            v48 = CFSTR("TxDirectMaxRetryExpiryCount");
            goto LABEL_1053;
          case 35:
            v48 = CFSTR("TxIndirectMaxRetryExpiryCount");
            goto LABEL_1053;
          case 36:
            v48 = CFSTR("TxErrCcaCount");
            goto LABEL_1053;
          case 37:
            v48 = CFSTR("TxErrAbortCount");
            goto LABEL_1053;
          case 38:
            v48 = CFSTR("TxErrBusyChannelCount");
            goto LABEL_1053;
          case 39:
            v48 = CFSTR("RxTotalCount");
            goto LABEL_1053;
          case 40:
            v48 = CFSTR("RxUnicastCount");
            goto LABEL_1053;
          case 41:
            v48 = CFSTR("RxBroadcastCount");
            goto LABEL_1053;
          case 42:
            v48 = CFSTR("RxDataCount");
            goto LABEL_1053;
          case 43:
            v48 = CFSTR("RxDataPollCount");
            goto LABEL_1053;
          case 44:
            v48 = CFSTR("RxBeaconCount");
            goto LABEL_1053;
          case 45:
            v48 = CFSTR("RxBeaconRequestCount");
            goto LABEL_1053;
          case 46:
            v48 = CFSTR("RxOtherCount");
            goto LABEL_1053;
          case 47:
            v48 = CFSTR("RxAddressFilteredCount");
            goto LABEL_1053;
          case 48:
            v48 = CFSTR("RxDestAddrFilteredCount");
            goto LABEL_1053;
          case 49:
            v48 = CFSTR("RxDuplicatedCount");
            goto LABEL_1053;
          case 50:
            v48 = CFSTR("RxErrNoFrameCount");
            goto LABEL_1053;
          case 51:
            v48 = CFSTR("RxErrUnknownNeighborCount");
            goto LABEL_1053;
          case 52:
            v48 = CFSTR("RxErrInvalidSrcAddrCount");
            goto LABEL_1053;
          case 53:
            v48 = CFSTR("RxErrSecCount");
            goto LABEL_1053;
          case 54:
            v48 = CFSTR("RxErrFcsCount");
            goto LABEL_1053;
          case 55:
            v48 = CFSTR("RxErrOtherCount");
            goto LABEL_1053;
          case 56:
            v48 = CFSTR("ActiveTimestamp");
            goto LABEL_1053;
          case 57:
            v48 = CFSTR("PendingTimestamp");
            goto LABEL_1053;
          case 58:
            v48 = CFSTR("Delay");
            goto LABEL_1053;
          case 59:
            v48 = CFSTR("SecurityPolicy");
            goto LABEL_1053;
          case 60:
            v48 = CFSTR("ChannelPage0Mask");
            goto LABEL_1053;
          case 61:
            v48 = CFSTR("OperationalDatasetComponents");
            goto LABEL_1053;
          case 62:
            v48 = CFSTR("ActiveNetworkFaultsList");
LABEL_1053:

            v4 = (__CFString *)v48;
LABEL_1054:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v62 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v62;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_174;
              case 65529:
                goto LABEL_289;
              case 65530:
                goto LABEL_404;
              case 65531:
                goto LABEL_519;
              case 65532:
                goto LABEL_634;
              case 65533:
                goto LABEL_749;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v65 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v65;
                goto LABEL_1067;
            }
        }
LABEL_1055:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1056;
          case 1:
            goto LABEL_1058;
          case 2:
            goto LABEL_1061;
          case 3:
            goto LABEL_1064;
          case 4:
            goto LABEL_1069;
          case 5:
            goto LABEL_1072;
          case 6:
            goto LABEL_1074;
          case 7:
            goto LABEL_1076;
          case 8:
            goto LABEL_1078;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_176;
              case 65529:
                goto LABEL_291;
              case 65530:
                goto LABEL_406;
              case 65531:
                goto LABEL_521;
              case 65532:
                goto LABEL_636;
              case 65533:
                goto LABEL_751;
              default:
                goto LABEL_1083;
            }
        }
      case 45:
        goto LABEL_950;
      case 46:
        goto LABEL_908;
      case 47:
        goto LABEL_945;
      case 48:
LABEL_2134:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_169;
          case 65529:
            goto LABEL_284;
          case 65530:
            goto LABEL_399;
          case 65531:
            goto LABEL_514;
          case 65532:
            goto LABEL_629;
          case 65533:
            goto LABEL_744;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_912;
              case 1:
                goto LABEL_2136;
              case 2:
                goto LABEL_2138;
              case 3:
                goto LABEL_2140;
              case 4:
                goto LABEL_2142;
              default:
                goto LABEL_2122;
            }
        }
      case 49:
        goto LABEL_2123;
      case 50:
LABEL_2132:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_171;
          case 65529:
            goto LABEL_286;
          case 65530:
            goto LABEL_401;
          case 65531:
            goto LABEL_516;
          case 65532:
            goto LABEL_631;
          case 65533:
            goto LABEL_746;
          default:
            goto LABEL_914;
        }
      case 51:
        goto LABEL_915;
      case 52:
LABEL_930:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_173;
          case 65529:
            goto LABEL_288;
          case 65530:
            goto LABEL_403;
          case 65531:
            goto LABEL_518;
          case 65532:
            goto LABEL_633;
          case 65533:
            goto LABEL_748;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_932;
              case 1:
                goto LABEL_935;
              case 2:
                goto LABEL_938;
              case 3:
                goto LABEL_941;
              default:
                goto LABEL_926;
            }
        }
      case 53:
        goto LABEL_927;
      case 54:
LABEL_1067:
        v61 = CFSTR("PacketUnicastRxCount");
        switch((int)a2)
        {
          case 0:
            goto LABEL_934;
          case 1:
            goto LABEL_937;
          case 2:
            goto LABEL_940;
          case 3:
            goto LABEL_943;
          case 4:
            goto LABEL_1068;
          case 5:
            goto LABEL_1071;
          case 6:
            goto LABEL_1073;
          case 7:
            goto LABEL_1075;
          case 8:
            goto LABEL_1077;
          case 9:
            goto LABEL_1082;
          case 10:
            goto LABEL_1079;
          case 11:
            goto LABEL_1080;
          case 12:
            goto LABEL_1081;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_175;
              case 65529:
                goto LABEL_290;
              case 65530:
                goto LABEL_405;
              case 65531:
                goto LABEL_520;
              case 65532:
                goto LABEL_635;
              case 65533:
                goto LABEL_750;
              default:
                goto LABEL_1054;
            }
        }
      case 55:
        goto LABEL_1055;
      case 56:
LABEL_1084:
        v63 = CFSTR("UTCTime");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1090;
          case 1:
            goto LABEL_1059;
          case 2:
            goto LABEL_1062;
          case 3:
            goto LABEL_1065;
          case 4:
            goto LABEL_1085;
          case 5:
            goto LABEL_1087;
          case 6:
            goto LABEL_1089;
          case 7:
            goto LABEL_1099;
          case 8:
            goto LABEL_1101;
          case 9:

            v4 = CFSTR("NTPServerAvailable");
LABEL_1110:
            v64 = CFSTR("SoftwareVersion");
            goto LABEL_1121;
          case 10:

            v4 = CFSTR("TimeZoneListMaxSize");
LABEL_1112:
            v64 = CFSTR("SoftwareVersionString");
            goto LABEL_1121;
          case 11:

            v4 = CFSTR("DSTOffsetListMaxSize");
LABEL_1113:
            v64 = CFSTR("ManufacturingDate");
            goto LABEL_1121;
          case 12:

            v4 = CFSTR("SupportsDNSResolve");
LABEL_1114:
            v64 = CFSTR("PartNumber");
            goto LABEL_1121;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_177;
              case 65529:
                goto LABEL_292;
              case 65530:
                goto LABEL_407;
              case 65531:
                goto LABEL_522;
              case 65532:
                goto LABEL_637;
              case 65533:
                goto LABEL_752;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v68 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v68;
                goto LABEL_1109;
            }
        }
      case 57:
LABEL_1109:
        v64 = CFSTR("ProductName");
        switch((int)a2)
        {
          case 1:
            goto LABEL_1060;
          case 2:
            goto LABEL_1063;
          case 3:
            goto LABEL_1121;
          case 4:
          case 6:
          case 16:
          case 19:
            goto LABEL_1091;
          case 5:
            goto LABEL_1088;
          case 7:
            goto LABEL_1100;
          case 8:
            goto LABEL_1102;
          case 9:
            goto LABEL_1110;
          case 10:
            goto LABEL_1112;
          case 11:
            goto LABEL_1113;
          case 12:
            goto LABEL_1114;
          case 13:
            v64 = CFSTR("ProductURL");
            goto LABEL_1121;
          case 14:
            v64 = CFSTR("ProductLabel");
            goto LABEL_1121;
          case 15:
            v64 = CFSTR("SerialNumber");
            goto LABEL_1121;
          case 17:
            v64 = CFSTR("Reachable");
            goto LABEL_1121;
          case 18:
            v64 = CFSTR("UniqueID");
            goto LABEL_1121;
          case 20:
            v64 = CFSTR("ProductAppearance");
            goto LABEL_1121;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_178;
              case 65529:
                goto LABEL_293;
              case 65530:
                goto LABEL_408;
              case 65531:
                goto LABEL_523;
              case 65532:
                goto LABEL_638;
              case 65533:
                goto LABEL_753;
              default:
                goto LABEL_1091;
            }
        }
      case 59:
LABEL_1092:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_179;
            case 65529:
              goto LABEL_294;
            case 65530:
              goto LABEL_409;
            case 65531:
              goto LABEL_524;
            case 65532:
              goto LABEL_639;
            case 65533:
              goto LABEL_754;
            default:
              goto LABEL_1122;
          }
        }
        if ((_DWORD)a2)
        {
          if ((_DWORD)a2 == 1)
          {
LABEL_1098:

            v4 = CFSTR("CurrentPosition");
            goto LABEL_1131;
          }
          if ((_DWORD)a2 == 2)
          {
LABEL_1097:

            v4 = CFSTR("MultiPressMax");
LABEL_1128:

            v4 = CFSTR("AdminVendorId");
LABEL_1129:

            v4 = CFSTR("SupportedFabrics");
LABEL_1130:
            v70 = CFSTR("MaxGroupsPerFabric");
            goto LABEL_1133;
          }
LABEL_1122:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v69 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v69;
LABEL_1123:
          if ((int)a2 > 65527)
          {
            switch((int)a2)
            {
              case 65528:
                goto LABEL_180;
              case 65529:
                goto LABEL_295;
              case 65530:
                goto LABEL_410;
              case 65531:
                goto LABEL_525;
              case 65532:
                goto LABEL_640;
              case 65533:
                goto LABEL_755;
              default:
                goto LABEL_1198;
            }
          }
          if ((_DWORD)a2)
          {
            if ((_DWORD)a2 != 1)
            {
              if ((_DWORD)a2 != 2)
              {
LABEL_1198:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v77 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v77;
LABEL_1200:
                v78 = CFSTR("TrustedRootCertificates");
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_1140;
                  case 1:
                    goto LABEL_1132;
                  case 2:
                    goto LABEL_1129;
                  case 3:

                    v4 = CFSTR("CommissionedFabrics");
LABEL_1205:
                    v70 = CFSTR("MaxGroupKeysPerFabric");
                    goto LABEL_1133;
                  case 4:
                    goto LABEL_1207;
                  case 5:
                    v78 = CFSTR("CurrentFabricIndex");
LABEL_1207:

                    v4 = (__CFString *)v78;
LABEL_1208:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v80 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v80;
                    break;
                  default:
                    switch((int)a2)
                    {
                      case 65528:
                        goto LABEL_181;
                      case 65529:
                        goto LABEL_296;
                      case 65530:
                        goto LABEL_411;
                      case 65531:
                        goto LABEL_526;
                      case 65532:
                        goto LABEL_641;
                      case 65533:
                        goto LABEL_756;
                      default:
                        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                        v79 = objc_claimAutoreleasedReturnValue();

                        v4 = (__CFString *)v79;
                        goto LABEL_1203;
                    }
                }
LABEL_1209:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_183;
                  case 65529:
                    goto LABEL_298;
                  case 65530:
                    goto LABEL_413;
                  case 65531:
                    goto LABEL_528;
                  case 65532:
                    goto LABEL_643;
                  case 65533:
                    goto LABEL_758;
                  default:
                    if (!(_DWORD)a2)
                      goto LABEL_1142;
                    goto LABEL_1134;
                }
              }
              goto LABEL_1128;
            }
LABEL_1131:

            v4 = CFSTR("AdminFabricIndex");
LABEL_1132:

            v70 = CFSTR("GroupTable");
            v4 = CFSTR("Fabrics");
LABEL_1133:

            v4 = (__CFString *)v70;
LABEL_1134:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v71 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v71;
LABEL_1135:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_184;
              case 65529:
                goto LABEL_299;
              case 65530:
                goto LABEL_414;
              case 65531:
                goto LABEL_529;
              case 65532:
                goto LABEL_644;
              case 65533:
                goto LABEL_759;
              default:
                if (!(_DWORD)a2)
                  goto LABEL_1143;
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v72 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v72;
                break;
            }
LABEL_1138:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_185;
              case 65529:
                goto LABEL_300;
              case 65530:
                goto LABEL_415;
              case 65531:
                goto LABEL_530;
              case 65532:
                goto LABEL_645;
              case 65533:
                goto LABEL_760;
              default:
                if (!(_DWORD)a2)
                  goto LABEL_1144;
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v75 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v75;
                break;
            }
LABEL_1195:
            v76 = CFSTR("RegisteredClients");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1145;
              case 1:

                v4 = CFSTR("ActiveModeDuration");
                goto LABEL_1248;
              case 2:

                v4 = CFSTR("ActiveModeThreshold");
                goto LABEL_1241;
              case 3:
                goto LABEL_1219;
              case 4:
                v76 = CFSTR("ICDCounter");
                goto LABEL_1219;
              case 5:
                v76 = CFSTR("ClientsSupportedPerFabric");
                goto LABEL_1219;
              case 6:
                v76 = CFSTR("UserActiveModeTriggerHint");
                goto LABEL_1219;
              case 7:
                v76 = CFSTR("UserActiveModeTriggerInstruction");
                goto LABEL_1219;
              case 8:
                v76 = CFSTR("OperatingMode");
                goto LABEL_1219;
              case 9:
                v76 = CFSTR("MaximumCheckInBackOff");
LABEL_1219:

                v4 = (__CFString *)v76;
                break;
              default:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_186;
                  case 65529:
                    goto LABEL_301;
                  case 65530:
                    goto LABEL_416;
                  case 65531:
                    goto LABEL_531;
                  case 65532:
                    goto LABEL_646;
                  case 65533:
                    goto LABEL_761;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v86 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v86;
                    goto LABEL_1236;
                }
            }
            goto LABEL_1220;
          }
        }
        else
        {

          v4 = CFSTR("NumberOfPositions");
        }

        v4 = CFSTR("WindowStatus");
LABEL_1140:

        v4 = CFSTR("NOCs");
LABEL_1141:

        v4 = CFSTR("GroupKeyMap");
LABEL_1142:

        v4 = CFSTR("LabelList");
LABEL_1143:

        v4 = CFSTR("LabelList");
LABEL_1144:

        v4 = CFSTR("StateValue");
LABEL_1145:

        v4 = CFSTR("IdleModeDuration");
LABEL_1146:

        v4 = CFSTR("SetTime");
LABEL_1147:

        v4 = CFSTR("PhaseList");
LABEL_1148:

        v4 = CFSTR("SupportedModes");
LABEL_1149:

        v4 = CFSTR("SupportedDrynessLevels");
LABEL_1150:

        v4 = CFSTR("Description");
LABEL_1151:

        v4 = CFSTR("SupportedModes");
LABEL_1152:

        v4 = CFSTR("SupportedModes");
LABEL_1153:

        v4 = CFSTR("SpinSpeeds");
LABEL_1154:

        v4 = CFSTR("SupportedModes");
LABEL_1155:

        v4 = CFSTR("SupportedModes");
LABEL_1156:

        v4 = CFSTR("TemperatureSetpoint");
LABEL_1157:

        v4 = CFSTR("Mask");
LABEL_1158:

        v4 = CFSTR("SupportedModes");
LABEL_1159:

        v4 = CFSTR("AirQuality");
LABEL_1160:

        v4 = CFSTR("ExpressedState");
LABEL_1161:

        v4 = CFSTR("Mask");
LABEL_1162:

        v4 = CFSTR("SupportedModes");
LABEL_1163:

        v4 = CFSTR("CookTime");
LABEL_1164:

        v4 = CFSTR("PhaseList");
LABEL_1165:

        v4 = CFSTR("PhaseList");
LABEL_1166:

        v4 = CFSTR("LastConfiguredBy");
LABEL_1167:

        v4 = CFSTR("Condition");
LABEL_1168:

        v4 = CFSTR("Condition");
LABEL_1169:

        v4 = CFSTR("CurrentSensitivityLevel");
LABEL_1170:

        v4 = CFSTR("OpenDuration");
LABEL_1171:

        v4 = CFSTR("PowerMode");
LABEL_1172:

        v4 = CFSTR("Accuracy");
LABEL_1173:

        v4 = CFSTR("HeaterTypes");
LABEL_1174:

        v4 = CFSTR("LoadControlPrograms");
LABEL_1175:

        v4 = CFSTR("Messages");
LABEL_1176:

        v4 = CFSTR("ESAType");
LABEL_1177:

        v4 = CFSTR("State");
LABEL_1178:

        v4 = CFSTR("EnergyBalances");
LABEL_1179:

        v4 = CFSTR("AvailableEndpoints");
LABEL_1180:

        v4 = CFSTR("SupportedModes");
LABEL_1181:

        v4 = CFSTR("SupportedModes");
LABEL_1182:

        v4 = CFSTR("SupportedModes");
LABEL_1183:

        v73 = CFSTR("Type");
        v4 = CFSTR("LockState");
LABEL_1184:

        v4 = (__CFString *)v73;
LABEL_1185:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v74 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v74;
LABEL_1188:
        switch((int)a2)
        {
          case 0:

            v4 = CFSTR("SupportedLocations");
LABEL_1190:

            v4 = CFSTR("MaxPressure");
LABEL_1191:

            v4 = CFSTR("LocalTemperature");
LABEL_1192:

            v4 = CFSTR("FanMode");
            goto LABEL_1827;
          case 1:
            goto LABEL_1358;
          case 2:
            goto LABEL_1643;
          case 3:
            goto LABEL_1668;
          case 4:
            goto LABEL_1672;
          case 5:
            goto LABEL_1677;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_227;
              case 65529:
                goto LABEL_342;
              case 65530:
                goto LABEL_457;
              case 65531:
                goto LABEL_572;
              case 65532:
                goto LABEL_687;
              case 65533:
                goto LABEL_802;
              default:
                goto LABEL_1693;
            }
        }
      case 60:
        goto LABEL_1123;
      case 62:
        goto LABEL_1200;
      case 63:
LABEL_1203:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_182;
          case 65529:
            goto LABEL_297;
          case 65530:
            goto LABEL_412;
          case 65531:
            goto LABEL_527;
          case 65532:
            goto LABEL_642;
          case 65533:
            goto LABEL_757;
          default:
            v70 = CFSTR("GroupTable");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1141;
              case 1:
                goto LABEL_1133;
              case 2:
                goto LABEL_1130;
              case 3:
                goto LABEL_1205;
              default:
                goto LABEL_1208;
            }
        }
      case 64:
        goto LABEL_1209;
      case 65:
        goto LABEL_1135;
      case 69:
        goto LABEL_1138;
      case 70:
        goto LABEL_1195;
      case 71:
LABEL_1236:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_187;
            case 65529:
              goto LABEL_302;
            case 65530:
              goto LABEL_417;
            case 65531:
              goto LABEL_532;
            case 65532:
              goto LABEL_647;
            case 65533:
              goto LABEL_762;
            default:
              goto LABEL_1220;
          }
        }
        if (!(_DWORD)a2)
          goto LABEL_1146;
        if ((_DWORD)a2 != 1)
        {
          if ((_DWORD)a2 == 2)
          {
LABEL_1241:

            v4 = CFSTR("TimerState");
LABEL_1242:

            v84 = CFSTR("StartUpMode");
            v4 = CFSTR("CountdownTime");
LABEL_1243:

            v4 = (__CFString *)v84;
LABEL_1244:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v87 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v87;
LABEL_1246:
            v88 = CFSTR("StartUpMode");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1150;
              case 1:
                goto LABEL_1252;
              case 2:

                v4 = CFSTR("SupportedModes");
LABEL_1269:

                v4 = CFSTR("StartUpMode");
LABEL_1277:

                v95 = CFSTR("NumberOfRinses");
                v4 = CFSTR("StartUpMode");
                goto LABEL_1283;
              case 3:

                v4 = CFSTR("CurrentMode");
LABEL_1271:

                v4 = CFSTR("OnMode");
LABEL_1278:

                v4 = CFSTR("OnMode");
LABEL_1282:
                v95 = CFSTR("SupportedRinses");
LABEL_1283:

                v4 = (__CFString *)v95;
LABEL_1284:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v97 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v97;
                goto LABEL_1285;
              case 4:
                goto LABEL_1273;
              case 5:
                v88 = CFSTR("OnMode");
LABEL_1273:

                v4 = (__CFString *)v88;
LABEL_1274:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v94 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v94;
                break;
              default:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_191;
                  case 65529:
                    goto LABEL_306;
                  case 65530:
                    goto LABEL_421;
                  case 65531:
                    goto LABEL_536;
                  case 65532:
                    goto LABEL_651;
                  case 65533:
                    goto LABEL_766;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v93 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v93;
                    goto LABEL_1267;
                }
            }
LABEL_1275:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_193;
              case 65529:
                goto LABEL_308;
              case 65530:
                goto LABEL_423;
              case 65531:
                goto LABEL_538;
              case 65532:
                goto LABEL_653;
              case 65533:
                goto LABEL_768;
              default:
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_1152;
                  case 1:
                    goto LABEL_1254;
                  case 2:
                    goto LABEL_1277;
                  case 3:
                    goto LABEL_1278;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v96 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v96;
                    goto LABEL_1280;
                }
            }
          }
LABEL_1220:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v81 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v81;
LABEL_1222:
          v82 = CFSTR("OperationalState");
          switch((int)a2)
          {
            case 0:
              goto LABEL_1147;
            case 1:
              goto LABEL_1249;
            case 2:
              goto LABEL_1242;
            case 3:

              v4 = CFSTR("OperationalStateList");
LABEL_1227:
              v84 = CFSTR("OnMode");
              goto LABEL_1243;
            case 4:
              goto LABEL_1229;
            case 5:
              v82 = CFSTR("OperationalError");
LABEL_1229:

              v4 = (__CFString *)v82;
LABEL_1230:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v85 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v85;
              break;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_188;
                case 65529:
                  goto LABEL_303;
                case 65530:
                  goto LABEL_418;
                case 65531:
                  goto LABEL_533;
                case 65532:
                  goto LABEL_648;
                case 65533:
                  goto LABEL_763;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v83 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v83;
                  goto LABEL_1225;
              }
          }
LABEL_1231:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_190;
            case 65529:
              goto LABEL_305;
            case 65530:
              goto LABEL_420;
            case 65531:
              goto LABEL_535;
            case 65532:
              goto LABEL_650;
            case 65533:
              goto LABEL_765;
            default:
              if ((_DWORD)a2 == 1)
                goto LABEL_1251;
              if ((_DWORD)a2)
                goto LABEL_1244;
              goto LABEL_1149;
          }
        }
LABEL_1248:

        v4 = CFSTR("TimeRemaining");
LABEL_1249:

        v4 = CFSTR("CurrentPhase");
LABEL_1250:

        v4 = CFSTR("CurrentMode");
LABEL_1251:

        v4 = CFSTR("SelectedDrynessLevel");
LABEL_1252:

        v4 = CFSTR("StandardNamespace");
LABEL_1253:

        v4 = CFSTR("CurrentMode");
LABEL_1254:

        v4 = CFSTR("CurrentMode");
LABEL_1255:

        v4 = CFSTR("SpinSpeedCurrent");
LABEL_1256:

        v4 = CFSTR("CurrentMode");
LABEL_1257:

        v89 = CFSTR("MinTemperature");
        v4 = CFSTR("CurrentMode");
LABEL_1258:

        v4 = (__CFString *)v89;
        goto LABEL_1259;
      case 72:
        goto LABEL_1222;
      case 73:
LABEL_1225:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_189;
          case 65529:
            goto LABEL_304;
          case 65530:
            goto LABEL_419;
          case 65531:
            goto LABEL_534;
          case 65532:
            goto LABEL_649;
          case 65533:
            goto LABEL_764;
          default:
            v84 = CFSTR("StartUpMode");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1148;
              case 1:
                goto LABEL_1250;
              case 2:
                goto LABEL_1243;
              case 3:
                goto LABEL_1227;
              default:
                goto LABEL_1230;
            }
        }
      case 74:
        goto LABEL_1231;
      case 80:
        goto LABEL_1246;
      case 81:
LABEL_1267:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_192;
          case 65529:
            goto LABEL_307;
          case 65530:
            goto LABEL_422;
          case 65531:
            goto LABEL_537;
          case 65532:
            goto LABEL_652;
          case 65533:
            goto LABEL_767;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1151;
              case 1:
                goto LABEL_1253;
              case 2:
                goto LABEL_1269;
              case 3:
                goto LABEL_1271;
              default:
                goto LABEL_1274;
            }
        }
      case 82:
        goto LABEL_1275;
      case 83:
LABEL_1280:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_194;
          case 65529:
            goto LABEL_309;
          case 65530:
            goto LABEL_424;
          case 65531:
            goto LABEL_539;
          case 65532:
            goto LABEL_654;
          case 65533:
            goto LABEL_769;
          default:
            v95 = CFSTR("NumberOfRinses");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1153;
              case 1:
                goto LABEL_1255;
              case 2:
                goto LABEL_1283;
              case 3:
                goto LABEL_1282;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v99 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v99;
                goto LABEL_1293;
            }
        }
      case 84:
LABEL_1293:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_195;
          case 65529:
            goto LABEL_310;
          case 65530:
            goto LABEL_425;
          case 65531:
            goto LABEL_540;
          case 65532:
            goto LABEL_655;
          case 65533:
            goto LABEL_770;
          default:
            if ((_DWORD)a2 == 1)
              goto LABEL_1256;
            if ((_DWORD)a2)
              goto LABEL_1284;
            goto LABEL_1154;
        }
      case 85:
LABEL_1285:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_196;
          case 65529:
            goto LABEL_311;
          case 65530:
            goto LABEL_426;
          case 65531:
            goto LABEL_541;
          case 65532:
            goto LABEL_656;
          case 65533:
            goto LABEL_771;
          default:
            if ((_DWORD)a2 == 1)
              goto LABEL_1257;
            if (!(_DWORD)a2)
              goto LABEL_1155;
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v98 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v98;
            break;
        }
        goto LABEL_1290;
      case 86:
LABEL_1290:
        v89 = CFSTR("MinTemperature");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1156;
          case 1:
            goto LABEL_1258;
          case 2:

            v4 = CFSTR("MaxTemperature");
            goto LABEL_1304;
          case 3:

            v4 = CFSTR("Step");
            goto LABEL_1307;
          case 4:
            v89 = CFSTR("SelectedTemperatureLevel");
            goto LABEL_1258;
          case 5:
            v89 = CFSTR("SupportedTemperatureLevels");
            goto LABEL_1258;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_197;
              case 65529:
                goto LABEL_312;
              case 65530:
                goto LABEL_427;
              case 65531:
                goto LABEL_542;
              case 65532:
                goto LABEL_657;
              case 65533:
                goto LABEL_772;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v100 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v100;
                goto LABEL_1298;
            }
        }
      case 87:
LABEL_1298:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_198;
            case 65529:
              goto LABEL_313;
            case 65530:
              goto LABEL_428;
            case 65531:
              goto LABEL_543;
            case 65532:
              goto LABEL_658;
            case 65533:
              goto LABEL_773;
            default:
              goto LABEL_1259;
          }
        }
        switch((_DWORD)a2)
        {
          case 0:
            goto LABEL_1157;
          case 2:
LABEL_1304:

            v4 = CFSTR("State");
LABEL_1305:
            v91 = CFSTR("StartUpMode");
            break;
          case 3:
LABEL_1307:

            v4 = CFSTR("Supported");
LABEL_1308:
            v91 = CFSTR("OnMode");
            break;
          default:
LABEL_1259:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v90 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v90;
LABEL_1260:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_199;
              case 65529:
                goto LABEL_314;
              case 65530:
                goto LABEL_429;
              case 65531:
                goto LABEL_544;
              case 65532:
                goto LABEL_659;
              case 65533:
                goto LABEL_774;
              default:
                v91 = CFSTR("CurrentMode");
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_1158;
                  case 1:
                    goto LABEL_1309;
                  case 2:
                    goto LABEL_1305;
                  case 3:
                    goto LABEL_1308;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v92 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v92;
                    goto LABEL_1263;
                }
            }
        }
LABEL_1309:

        v4 = (__CFString *)v91;
LABEL_1310:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v101 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v101;
LABEL_1311:
        v102 = CFSTR("DeviceMuted");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1160;
          case 1:

            v4 = CFSTR("SmokeState");
LABEL_1333:

            v4 = CFSTR("Latch");
LABEL_1334:

            v4 = CFSTR("CurrentMode");
LABEL_1335:

            v4 = CFSTR("MaxCookTime");
LABEL_1336:

            v4 = CFSTR("CurrentPhase");
LABEL_1337:

            v4 = CFSTR("CurrentPhase");
            goto LABEL_1338;
          case 2:

            v103 = CFSTR("State");
            v4 = CFSTR("COState");
            goto LABEL_1390;
          case 3:

            v4 = CFSTR("BatteryAlert");
LABEL_1389:
            v103 = CFSTR("Supported");
LABEL_1390:

            v4 = (__CFString *)v103;
LABEL_1391:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v106 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v106;
            goto LABEL_1392;
          case 4:
            goto LABEL_1324;
          case 5:
            v102 = CFSTR("TestInProgress");
            goto LABEL_1324;
          case 6:
            v102 = CFSTR("HardwareFaultAlert");
            goto LABEL_1324;
          case 7:
            v102 = CFSTR("EndOfServiceAlert");
            goto LABEL_1324;
          case 8:
            v102 = CFSTR("InterconnectSmokeAlarm");
            goto LABEL_1324;
          case 9:
            v102 = CFSTR("InterconnectCOAlarm");
            goto LABEL_1324;
          case 10:
            v102 = CFSTR("ContaminationState");
            goto LABEL_1324;
          case 11:
            v102 = CFSTR("SmokeSensitivityLevel");
            goto LABEL_1324;
          case 12:
            v102 = CFSTR("ExpiryDate");
LABEL_1324:

            v4 = (__CFString *)v102;
LABEL_1325:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v104 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v104;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_201;
              case 65529:
                goto LABEL_316;
              case 65530:
                goto LABEL_431;
              case 65531:
                goto LABEL_546;
              case 65532:
                goto LABEL_661;
              case 65533:
                goto LABEL_776;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v105 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v105;
                goto LABEL_1331;
            }
        }
LABEL_1326:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_203;
          case 65529:
            goto LABEL_318;
          case 65530:
            goto LABEL_433;
          case 65531:
            goto LABEL_548;
          case 65532:
            goto LABEL_663;
          case 65533:
            goto LABEL_778;
          default:
            if ((_DWORD)a2 == 1)
              goto LABEL_1334;
            if ((_DWORD)a2)
              goto LABEL_1391;
            goto LABEL_1162;
        }
      case 89:
        goto LABEL_1260;
      case 91:
LABEL_1263:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_200;
          case 65529:
            goto LABEL_315;
          case 65530:
            goto LABEL_430;
          case 65531:
            goto LABEL_545;
          case 65532:
            goto LABEL_660;
          case 65533:
            goto LABEL_775;
          default:
            if ((_DWORD)a2)
              goto LABEL_1310;
            goto LABEL_1159;
        }
      case 92:
        goto LABEL_1311;
      case 93:
LABEL_1331:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_202;
          case 65529:
            goto LABEL_317;
          case 65530:
            goto LABEL_432;
          case 65531:
            goto LABEL_547;
          case 65532:
            goto LABEL_662;
          case 65533:
            goto LABEL_777;
          default:
            v103 = CFSTR("State");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1161;
              case 1:
                goto LABEL_1333;
              case 2:
                goto LABEL_1390;
              case 3:
                goto LABEL_1389;
              default:
                goto LABEL_1325;
            }
        }
      case 94:
        goto LABEL_1326;
      case 95:
LABEL_1392:
        v107 = CFSTR("SupportedWatts");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1163;
          case 1:
            goto LABEL_1335;
          case 2:

            v4 = CFSTR("PowerSetting");
LABEL_1404:

            v4 = CFSTR("CountdownTime");
LABEL_1408:

            v4 = CFSTR("CountdownTime");
            goto LABEL_1433;
          case 3:

            v4 = CFSTR("MinPower");
LABEL_1409:

            v110 = CFSTR("OperationalStateList");
            v4 = CFSTR("OperationalStateList");
            goto LABEL_1414;
          case 4:

            v4 = CFSTR("MaxPower");
LABEL_1410:

            v4 = CFSTR("OperationalState");
LABEL_1411:
            v110 = CFSTR("OperationalState");
            goto LABEL_1414;
          case 5:

            v4 = CFSTR("PowerStep");
LABEL_1412:

            v4 = CFSTR("OperationalError");
LABEL_1413:
            v110 = CFSTR("OperationalError");
LABEL_1414:

            v4 = (__CFString *)v110;
            goto LABEL_1415;
          case 6:
            goto LABEL_1400;
          case 7:
            v107 = CFSTR("SelectedWattIndex");
            goto LABEL_1400;
          case 8:
            v107 = CFSTR("WattRating");
LABEL_1400:

            v4 = (__CFString *)v107;
LABEL_1405:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v109 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v109;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_204;
              case 65529:
                goto LABEL_319;
              case 65530:
                goto LABEL_434;
              case 65531:
                goto LABEL_549;
              case 65532:
                goto LABEL_664;
              case 65533:
                goto LABEL_779;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v108 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v108;
                goto LABEL_1403;
            }
        }
        goto LABEL_1407;
      case 96:
LABEL_1403:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1164;
          case 1:
            goto LABEL_1336;
          case 2:
            goto LABEL_1404;
          case 3:
            goto LABEL_1409;
          case 4:
            goto LABEL_1410;
          case 5:
            goto LABEL_1412;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_205;
              case 65529:
                goto LABEL_320;
              case 65530:
                goto LABEL_435;
              case 65531:
                goto LABEL_550;
              case 65532:
                goto LABEL_665;
              case 65533:
                goto LABEL_780;
              default:
                goto LABEL_1405;
            }
        }
      case 97:
LABEL_1407:
        v110 = CFSTR("OperationalStateList");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1165;
          case 1:
            goto LABEL_1337;
          case 2:
            goto LABEL_1408;
          case 3:
            goto LABEL_1414;
          case 4:
            goto LABEL_1411;
          case 5:
            goto LABEL_1413;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_206;
              case 65529:
                goto LABEL_321;
              case 65530:
                goto LABEL_436;
              case 65531:
                goto LABEL_551;
              case 65532:
                goto LABEL_666;
              case 65533:
                goto LABEL_781;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v113 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v113;
                goto LABEL_1428;
            }
        }
      case 98:
LABEL_1428:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_207;
            case 65529:
              goto LABEL_322;
            case 65530:
              goto LABEL_437;
            case 65531:
              goto LABEL_552;
            case 65532:
              goto LABEL_667;
            case 65533:
              goto LABEL_782;
            default:
              goto LABEL_1415;
          }
        }
        if (!(_DWORD)a2)
          goto LABEL_1166;
        if ((_DWORD)a2 != 1)
        {
          if ((_DWORD)a2 != 2)
          {
LABEL_1415:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v111 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v111;
LABEL_1417:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1167;
              case 1:
                goto LABEL_1339;
              case 2:
                goto LABEL_1434;
              case 3:

                v4 = CFSTR("InPlaceIndicator");
LABEL_1422:

                v4 = CFSTR("InPlaceIndicator");
LABEL_1445:

                v4 = CFSTR("AlarmsActive");
LABEL_1446:

                v4 = CFSTR("RemainingDuration");
LABEL_1447:

                v4 = CFSTR("Ranges");
LABEL_1448:

                v4 = CFSTR("PeriodicEnergyImported");
LABEL_1487:

                v4 = CFSTR("EstimatedHeatRequired");
LABEL_1488:
                v114 = CFSTR("ActiveEvents");
                goto LABEL_1493;
              case 4:

                v4 = CFSTR("LastChangedTime");
LABEL_1424:

                v4 = CFSTR("LastChangedTime");
LABEL_1450:

                v4 = CFSTR("AlarmsSuppressed");
LABEL_1451:

                v4 = CFSTR("CurrentState");
LABEL_1452:

                v4 = CFSTR("Voltage");
LABEL_1453:

                v4 = CFSTR("PeriodicEnergyExported");
LABEL_1489:

                v4 = CFSTR("TankPercentage");
LABEL_1490:
                v114 = CFSTR("NumberOfEventsPerProgram");
                goto LABEL_1493;
              case 5:

                v4 = CFSTR("ReplacementProductList");
LABEL_1426:

                v4 = CFSTR("ReplacementProductList");
LABEL_1454:

                v4 = CFSTR("AlarmsEnabled");
LABEL_1455:

                v4 = CFSTR("TargetState");
LABEL_1456:

                v4 = CFSTR("ActiveCurrent");
LABEL_1457:

                v4 = CFSTR("CumulativeEnergyReset");
LABEL_1491:

                v4 = CFSTR("BoostState");
LABEL_1492:
                v114 = CFSTR("NumberOfTransitions");
                goto LABEL_1493;
              default:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_208;
                  case 65529:
                    goto LABEL_323;
                  case 65530:
                    goto LABEL_438;
                  case 65531:
                    goto LABEL_553;
                  case 65532:
                    goto LABEL_668;
                  case 65533:
                    goto LABEL_783;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v112 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v112;
                    goto LABEL_1421;
                }
            }
          }
LABEL_1433:

          v4 = CFSTR("FabricSceneInfo");
LABEL_1434:

          v4 = CFSTR("ChangeIndication");
LABEL_1435:

          v4 = CFSTR("ChangeIndication");
LABEL_1436:

          v4 = CFSTR("DefaultSensitivityLevel");
LABEL_1437:

          v4 = CFSTR("AutoCloseTime");
LABEL_1438:

          v4 = CFSTR("Accuracy");
LABEL_1439:

          v4 = CFSTR("CumulativeEnergyExported");
LABEL_1440:

          v114 = CFSTR("Events");
          v4 = CFSTR("TankVolume");
LABEL_1493:

          v4 = (__CFString *)v114;
LABEL_1494:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v120 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v120;
LABEL_1495:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1176;
            case 1:
              goto LABEL_1348;
            case 2:

              v4 = CFSTR("ESAState");
LABEL_1497:

              v121 = CFSTR("EnergyPriorities");
              v4 = CFSTR("FaultState");
              goto LABEL_1505;
            case 3:

              v4 = CFSTR("AbsMinPower");
LABEL_1500:

              v4 = CFSTR("ChargingEnabledUntil");
LABEL_1501:
              v121 = CFSTR("LowPowerModeSensitivities");
              goto LABEL_1505;
            case 4:

              v4 = CFSTR("AbsMaxPower");
LABEL_1503:

              v4 = CFSTR("DischargingEnabledUntil");
LABEL_1504:
              v121 = CFSTR("CurrentLowPowerModeSensitivity");
LABEL_1505:

              v4 = (__CFString *)v121;
LABEL_1506:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v122 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v122;
              goto LABEL_1507;
            case 5:

              v123 = CFSTR("CircuitCapacity");
              v4 = CFSTR("PowerAdjustmentCapability");
              goto LABEL_1515;
            case 6:

              v4 = CFSTR("Forecast");
LABEL_1512:
              v123 = CFSTR("MinimumChargeCurrent");
              goto LABEL_1515;
            case 7:

              v4 = CFSTR("OptOutState");
LABEL_1514:
              v123 = CFSTR("MaximumChargeCurrent");
LABEL_1515:

              v4 = (__CFString *)v123;
LABEL_1516:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v124 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v124;
              break;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_217;
                case 65529:
                  goto LABEL_332;
                case 65530:
                  goto LABEL_447;
                case 65531:
                  goto LABEL_562;
                case 65532:
                  goto LABEL_677;
                case 65533:
                  goto LABEL_792;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v125 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v125;
                  goto LABEL_1522;
              }
          }
LABEL_1517:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_220;
            case 65529:
              goto LABEL_335;
            case 65530:
              goto LABEL_450;
            case 65531:
              goto LABEL_565;
            case 65532:
              goto LABEL_680;
            case 65533:
              goto LABEL_795;
            default:
              if ((_DWORD)a2 == 1)
                goto LABEL_1351;
              if ((_DWORD)a2)
                goto LABEL_1506;
              goto LABEL_1179;
          }
        }
LABEL_1338:

        v4 = CFSTR("SceneTableSize");
LABEL_1339:

        v4 = CFSTR("DegradationDirection");
LABEL_1340:

        v4 = CFSTR("DegradationDirection");
LABEL_1341:

        v4 = CFSTR("SupportedSensitivityLevels");
LABEL_1342:

        v4 = CFSTR("DefaultOpenDuration");
LABEL_1343:

        v4 = CFSTR("NumberOfMeasurementTypes");
LABEL_1344:

        v4 = CFSTR("CumulativeEnergyImported");
LABEL_1345:

        v4 = CFSTR("HeatDemand");
LABEL_1346:

        v4 = CFSTR("NumberOfLoadControlPrograms");
LABEL_1347:

        v4 = CFSTR("ActiveMessageIDs");
LABEL_1348:

        v4 = CFSTR("ESACanGenerate");
LABEL_1349:

        v4 = CFSTR("SupplyState");
LABEL_1350:

        v4 = CFSTR("CurrentEnergyBalance");
LABEL_1351:

        v4 = CFSTR("ActiveEndpoints");
LABEL_1352:

        v4 = CFSTR("CurrentMode");
LABEL_1353:

        v4 = CFSTR("CurrentMode");
LABEL_1354:

        v4 = CFSTR("CurrentMode");
LABEL_1355:

        v4 = CFSTR("LockType");
LABEL_1356:

        v4 = CFSTR("PhysicalClosedLimitLift");
LABEL_1357:

        v4 = CFSTR("BarrierMovingState");
LABEL_1358:

        v4 = CFSTR("SupportedMaps");
LABEL_1359:

        v4 = CFSTR("MaxSpeed");
LABEL_1360:

        v4 = CFSTR("OutdoorTemperature");
LABEL_1361:

        v4 = CFSTR("FanModeSequence");
        goto LABEL_1362;
      case 113:
        goto LABEL_1417;
      case 114:
LABEL_1421:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1168;
          case 1:
            goto LABEL_1340;
          case 2:
            goto LABEL_1435;
          case 3:
            goto LABEL_1422;
          case 4:
            goto LABEL_1424;
          case 5:
            goto LABEL_1426;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_209;
              case 65529:
                goto LABEL_324;
              case 65530:
                goto LABEL_439;
              case 65531:
                goto LABEL_554;
              case 65532:
                goto LABEL_669;
              case 65533:
                goto LABEL_784;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v115 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v115;
                goto LABEL_1444;
            }
        }
      case 128:
LABEL_1444:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1169;
          case 1:
            goto LABEL_1341;
          case 2:
            goto LABEL_1436;
          case 3:
            goto LABEL_1445;
          case 4:
            goto LABEL_1450;
          case 5:
            goto LABEL_1454;
          case 6:

            v4 = CFSTR("AlarmsSupported");
LABEL_1462:

            v117 = CFSTR("ReactiveCurrent");
            v4 = CFSTR("CurrentLevel");
            goto LABEL_1483;
          case 7:

            v4 = CFSTR("SensorFault");
LABEL_1464:

            v4 = CFSTR("TargetLevel");
LABEL_1470:
            v117 = CFSTR("ApparentCurrent");
LABEL_1483:

            v4 = (__CFString *)v117;
LABEL_1484:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v119 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v119;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_210;
              case 65529:
                goto LABEL_325;
              case 65530:
                goto LABEL_440;
              case 65531:
                goto LABEL_555;
              case 65532:
                goto LABEL_670;
              case 65533:
                goto LABEL_785;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v116 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v116;
                goto LABEL_1461;
            }
        }
        goto LABEL_1486;
      case 129:
LABEL_1461:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1170;
          case 1:
            goto LABEL_1342;
          case 2:
            goto LABEL_1437;
          case 3:
            goto LABEL_1446;
          case 4:
            goto LABEL_1451;
          case 5:
            goto LABEL_1455;
          case 6:
            goto LABEL_1462;
          case 7:
            goto LABEL_1464;
          case 8:

            v4 = CFSTR("DefaultOpenLevel");
LABEL_1472:
            v117 = CFSTR("ActivePower");
            goto LABEL_1483;
          case 9:

            v4 = CFSTR("ValveFault");
LABEL_1473:
            v117 = CFSTR("ReactivePower");
            goto LABEL_1483;
          case 10:

            v4 = CFSTR("LevelStep");
LABEL_1474:
            v117 = CFSTR("ApparentPower");
            goto LABEL_1483;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_211;
              case 65529:
                goto LABEL_326;
              case 65530:
                goto LABEL_441;
              case 65531:
                goto LABEL_556;
              case 65532:
                goto LABEL_671;
              case 65533:
                goto LABEL_786;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v118 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v118;
                goto LABEL_1469;
            }
        }
      case 144:
LABEL_1469:
        v117 = CFSTR("ReactiveCurrent");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1171;
          case 1:
            goto LABEL_1343;
          case 2:
            goto LABEL_1438;
          case 3:
            goto LABEL_1447;
          case 4:
            goto LABEL_1452;
          case 5:
            goto LABEL_1456;
          case 6:
            goto LABEL_1483;
          case 7:
            goto LABEL_1470;
          case 8:
            goto LABEL_1472;
          case 9:
            goto LABEL_1473;
          case 10:
            goto LABEL_1474;
          case 11:
            v117 = CFSTR("RMSVoltage");
            goto LABEL_1483;
          case 12:
            v117 = CFSTR("RMSCurrent");
            goto LABEL_1483;
          case 13:
            v117 = CFSTR("RMSPower");
            goto LABEL_1483;
          case 14:
            v117 = CFSTR("Frequency");
            goto LABEL_1483;
          case 15:
            v117 = CFSTR("HarmonicCurrents");
            goto LABEL_1483;
          case 16:
            v117 = CFSTR("HarmonicPhases");
            goto LABEL_1483;
          case 17:
            v117 = CFSTR("PowerFactor");
            goto LABEL_1483;
          case 18:
            v117 = CFSTR("NeutralCurrent");
            goto LABEL_1483;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_212;
              case 65529:
                goto LABEL_327;
              case 65530:
                goto LABEL_442;
              case 65531:
                goto LABEL_557;
              case 65532:
                goto LABEL_672;
              case 65533:
                goto LABEL_787;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v134 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v134;
                goto LABEL_1593;
            }
        }
      case 145:
LABEL_1593:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1172;
          case 1:
            goto LABEL_1344;
          case 2:
            goto LABEL_1439;
          case 3:
            goto LABEL_1448;
          case 4:
            goto LABEL_1453;
          case 5:
            goto LABEL_1457;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_213;
              case 65529:
                goto LABEL_328;
              case 65530:
                goto LABEL_443;
              case 65531:
                goto LABEL_558;
              case 65532:
                goto LABEL_673;
              case 65533:
                goto LABEL_788;
              default:
                goto LABEL_1484;
            }
        }
      case 148:
LABEL_1486:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1173;
          case 1:
            goto LABEL_1345;
          case 2:
            goto LABEL_1440;
          case 3:
            goto LABEL_1487;
          case 4:
            goto LABEL_1489;
          case 5:
            goto LABEL_1491;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_214;
              case 65529:
                goto LABEL_329;
              case 65530:
                goto LABEL_444;
              case 65531:
                goto LABEL_559;
              case 65532:
                goto LABEL_674;
              case 65533:
                goto LABEL_789;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v127 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v127;
                goto LABEL_1538;
            }
        }
      case 150:
LABEL_1538:
        v114 = CFSTR("Events");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1174;
          case 1:
            goto LABEL_1346;
          case 2:
            goto LABEL_1493;
          case 3:
            goto LABEL_1488;
          case 4:
            goto LABEL_1490;
          case 5:
            goto LABEL_1492;
          case 6:
            v114 = CFSTR("DefaultRandomStart");
            goto LABEL_1493;
          case 7:
            v114 = CFSTR("DefaultRandomDuration");
            goto LABEL_1493;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_215;
              case 65529:
                goto LABEL_330;
              case 65530:
                goto LABEL_445;
              case 65531:
                goto LABEL_560;
              case 65532:
                goto LABEL_675;
              case 65533:
                goto LABEL_790;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v131 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v131;
                goto LABEL_1558;
            }
        }
      case 151:
LABEL_1558:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_216;
          case 65529:
            goto LABEL_331;
          case 65530:
            goto LABEL_446;
          case 65531:
            goto LABEL_561;
          case 65532:
            goto LABEL_676;
          case 65533:
            goto LABEL_791;
          default:
            if ((_DWORD)a2 == 1)
              goto LABEL_1347;
            if ((_DWORD)a2)
              goto LABEL_1494;
            goto LABEL_1175;
        }
      case 152:
        goto LABEL_1495;
      case 153:
LABEL_1522:
        if ((int)a2 > 34)
        {
          switch((int)a2)
          {
            case '#':
              v123 = CFSTR("NextChargeStartTime");
              goto LABEL_1515;
            case '$':
              v123 = CFSTR("NextChargeTargetTime");
              goto LABEL_1515;
            case '%':
              v123 = CFSTR("NextChargeRequiredEnergy");
              goto LABEL_1515;
            case '&':
              v123 = CFSTR("NextChargeTargetSoC");
              goto LABEL_1515;
            case '\'':
              v123 = CFSTR("ApproximateEVEfficiency");
              goto LABEL_1515;
            case '(':
            case ')':
            case '*':
            case '+':
            case ',':
            case '-':
            case '.':
            case '/':
              goto LABEL_1562;
            case '0':
              v123 = CFSTR("StateOfCharge");
              goto LABEL_1515;
            case '1':
              v123 = CFSTR("BatteryCapacity");
              goto LABEL_1515;
            case '2':
              v123 = CFSTR("VehicleID");
              goto LABEL_1515;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_218;
                case 65529:
                  goto LABEL_333;
                case 65530:
                  goto LABEL_448;
                case 65531:
                  goto LABEL_563;
                case 65532:
                  goto LABEL_678;
                case 65533:
                  goto LABEL_793;
                default:
                  switch((int)a2)
                  {
                    case '@':
                      v123 = CFSTR("SessionID");
                      goto LABEL_1515;
                    case 'A':
                      v123 = CFSTR("SessionDuration");
                      goto LABEL_1515;
                    case 'B':
                      v123 = CFSTR("SessionEnergyCharged");
                      goto LABEL_1515;
                    case 'C':
                      v123 = CFSTR("SessionEnergyDischarged");
                      goto LABEL_1515;
                    default:
                      goto LABEL_1562;
                  }
              }
          }
        }
        v123 = CFSTR("CircuitCapacity");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1177;
          case 1:
            goto LABEL_1349;
          case 2:
            goto LABEL_1497;
          case 3:
            goto LABEL_1500;
          case 4:
            goto LABEL_1503;
          case 5:
            goto LABEL_1515;
          case 6:
            goto LABEL_1512;
          case 7:
            goto LABEL_1514;
          case 8:
            v123 = CFSTR("MaximumDischargeCurrent");
            goto LABEL_1515;
          case 9:
            v123 = CFSTR("UserMaximumChargeCurrent");
            goto LABEL_1515;
          case 10:
            v123 = CFSTR("RandomizationDelayWindow");
            goto LABEL_1515;
          default:
LABEL_1562:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v132 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v132;
            goto LABEL_1563;
        }
      case 155:
LABEL_1563:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_219;
          case 65529:
            goto LABEL_334;
          case 65530:
            goto LABEL_449;
          case 65531:
            goto LABEL_564;
          case 65532:
            goto LABEL_679;
          case 65533:
            goto LABEL_794;
          default:
            v121 = CFSTR("EnergyPriorities");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1178;
              case 1:
                goto LABEL_1350;
              case 2:
                goto LABEL_1505;
              case 3:
                goto LABEL_1501;
              case 4:
                goto LABEL_1504;
              default:
                goto LABEL_1516;
            }
        }
      case 156:
        goto LABEL_1517;
      case 157:
LABEL_1507:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_221;
          case 65529:
            goto LABEL_336;
          case 65530:
            goto LABEL_451;
          case 65531:
            goto LABEL_566;
          case 65532:
            goto LABEL_681;
          case 65533:
            goto LABEL_796;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1180;
              case 1:
                goto LABEL_1352;
              case 2:

                v4 = CFSTR("StartUpMode");
LABEL_1532:

                v4 = CFSTR("StartUpMode");
LABEL_1544:

                v4 = CFSTR("StartUpMode");
LABEL_1545:

                v4 = CFSTR("ActuatorEnabled");
LABEL_1546:

                v4 = CFSTR("PhysicalClosedLimitTilt");
LABEL_1642:

                v4 = CFSTR("BarrierSafetyStatus");
LABEL_1643:

                v4 = CFSTR("SelectedLocations");
LABEL_1644:

                v4 = CFSTR("MaxFlow");
LABEL_1645:

                v4 = CFSTR("Occupancy");
LABEL_1646:

                v137 = CFSTR("PercentSetting");
                goto LABEL_1647;
              case 3:

                v4 = CFSTR("OnMode");
LABEL_1534:

                v4 = CFSTR("OnMode");
LABEL_1547:

                v4 = CFSTR("OnMode");
LABEL_1548:

                v4 = CFSTR("DoorState");
LABEL_1549:

                v4 = CFSTR("CurrentPositionLift");
LABEL_1667:

                v4 = CFSTR("BarrierCapabilities");
LABEL_1668:

                v4 = CFSTR("CurrentLocation");
LABEL_1669:

                v4 = CFSTR("MinConstPressure");
LABEL_1670:

                v138 = CFSTR("PercentCurrent");
                v4 = CFSTR("AbsMinHeatSetpointLimit");
LABEL_1681:

                v4 = (__CFString *)v138;
                goto LABEL_1682;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v126 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v126;
                goto LABEL_1530;
            }
        }
      case 158:
LABEL_1530:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_222;
          case 65529:
            goto LABEL_337;
          case 65530:
            goto LABEL_452;
          case 65531:
            goto LABEL_567;
          case 65532:
            goto LABEL_682;
          case 65533:
            goto LABEL_797;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1181;
              case 1:
                goto LABEL_1353;
              case 2:
                goto LABEL_1532;
              case 3:
                goto LABEL_1534;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v128 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v128;
                goto LABEL_1542;
            }
        }
      case 159:
LABEL_1542:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_223;
          case 65529:
            goto LABEL_338;
          case 65530:
            goto LABEL_453;
          case 65531:
            goto LABEL_568;
          case 65532:
            goto LABEL_683;
          case 65533:
            goto LABEL_798;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1182;
              case 1:
                goto LABEL_1354;
              case 2:
                goto LABEL_1544;
              case 3:
                goto LABEL_1547;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v129 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v129;
                goto LABEL_1551;
            }
        }
      default:
        if ((_DWORD)a1 == -918523)
          goto LABEL_2200;
        if ((_DWORD)a1 != -918496)
          goto LABEL_847;
        goto LABEL_2394;
    }
  }
  if ((int)a1 > 1065)
  {
    if ((int)a1 > 1282)
    {
      switch((int)a1)
      {
        case 1283:
          goto LABEL_1859;
        case 1284:
          goto LABEL_1872;
        case 1285:
          goto LABEL_1893;
        case 1286:
          goto LABEL_1897;
        case 1287:
          break;
        case 1288:
          goto LABEL_1985;
        case 1289:
          goto LABEL_1868;
        case 1290:
LABEL_1870:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_260;
            case 65529:
              goto LABEL_375;
            case 65530:
              goto LABEL_490;
            case 65531:
              goto LABEL_605;
            case 65532:
              goto LABEL_720;
            case 65533:
              goto LABEL_835;
            default:
              if ((_DWORD)a2 == 1)
              {

                v4 = CFSTR("SupportedStreamingProtocols");
LABEL_1891:

                v4 = CFSTR("CurrentOutput");
LABEL_1905:

                v4 = CFSTR("CurrentApp");
LABEL_1906:
                v165 = CFSTR("VendorID");
              }
              else
              {
                if ((_DWORD)a2)
                {
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v160 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v160;
LABEL_1887:
                  switch((int)a2)
                  {
                    case 65528:
                      goto LABEL_261;
                    case 65529:
                      goto LABEL_376;
                    case 65530:
                      goto LABEL_491;
                    case 65531:
                      goto LABEL_606;
                    case 65532:
                      goto LABEL_721;
                    case 65533:
                      goto LABEL_836;
                    default:
                      if ((_DWORD)a2 == 1)
                        goto LABEL_1891;
                      if (!(_DWORD)a2)
                        goto LABEL_1890;
                      objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                      v164 = objc_claimAutoreleasedReturnValue();

                      v4 = (__CFString *)v164;
                      break;
                  }
LABEL_1901:
                  switch((int)a2)
                  {
                    case 65528:
                      goto LABEL_262;
                    case 65529:
                      goto LABEL_377;
                    case 65530:
                      goto LABEL_492;
                    case 65531:
                      goto LABEL_607;
                    case 65532:
                      goto LABEL_722;
                    case 65533:
                      goto LABEL_837;
                    default:
                      if ((_DWORD)a2 == 1)
                        goto LABEL_1905;
                      if (!(_DWORD)a2)
                        goto LABEL_1904;
                      objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                      v171 = objc_claimAutoreleasedReturnValue();

                      v4 = (__CFString *)v171;
                      break;
                  }
LABEL_1945:
                  v165 = CFSTR("VendorName");
                  switch((int)a2)
                  {
                    case 0:
                      goto LABEL_1907;
                    case 1:
                      goto LABEL_1906;
                    case 2:
                      v165 = CFSTR("ApplicationName");
                      goto LABEL_1907;
                    case 3:
                      v165 = CFSTR("ProductID");
                      goto LABEL_1907;
                    case 4:
                      v165 = CFSTR("Application");
                      goto LABEL_1907;
                    case 5:
                      v165 = CFSTR("Status");
                      goto LABEL_1907;
                    case 6:
                      v165 = CFSTR("ApplicationVersion");
                      goto LABEL_1907;
                    case 7:
                      v165 = CFSTR("AllowedVendorList");
                      goto LABEL_1907;
                    default:
                      switch((int)a2)
                      {
                        case 65528:
                          goto LABEL_263;
                        case 65529:
                          goto LABEL_378;
                        case 65530:
                          goto LABEL_493;
                        case 65531:
                          goto LABEL_608;
                        case 65532:
                          goto LABEL_723;
                        case 65533:
                          goto LABEL_838;
                        default:
                          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                          v177 = objc_claimAutoreleasedReturnValue();

                          v4 = (__CFString *)v177;
                          goto LABEL_1993;
                      }
                  }
                }

                v4 = CFSTR("AcceptHeader");
LABEL_1890:

                v4 = CFSTR("OutputList");
LABEL_1904:

                v165 = CFSTR("VendorName");
                v4 = CFSTR("CatalogList");
              }
LABEL_1907:

              v4 = (__CFString *)v165;
LABEL_1908:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v166 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v166;
LABEL_1909:
              v167 = CFSTR("Enabled");
              switch((int)a2)
              {
                case 0:
                  break;
                case 1:
                  v167 = CFSTR("OnDemandRatings");
                  break;
                case 2:
                  v167 = CFSTR("OnDemandRatingThreshold");
                  break;
                case 3:
                  v167 = CFSTR("ScheduledContentRatings");
                  break;
                case 4:
                  v167 = CFSTR("ScheduledContentRatingThreshold");
                  break;
                case 5:
                  v167 = CFSTR("ScreenDailyTime");
                  break;
                case 6:
                  v167 = CFSTR("RemainingScreenTime");
                  break;
                case 7:
                  v167 = CFSTR("BlockUnrated");
                  break;
                default:
                  switch((int)a2)
                  {
                    case 65528:
                      goto LABEL_265;
                    case 65529:
                      goto LABEL_380;
                    case 65530:
                      goto LABEL_495;
                    case 65531:
                      goto LABEL_610;
                    case 65532:
                      goto LABEL_725;
                    case 65533:
                      goto LABEL_840;
                    default:
                      objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                      v170 = objc_claimAutoreleasedReturnValue();

                      v4 = (__CFString *)v170;
                      goto LABEL_1941;
                  }
              }

              v4 = (__CFString *)v167;
LABEL_1919:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v13 = (__CFString *)objc_claimAutoreleasedReturnValue();

              break;
          }
          goto LABEL_1920;
        case 1291:
          goto LABEL_1887;
        case 1292:
          goto LABEL_1901;
        case 1293:
          goto LABEL_1945;
        case 1294:
LABEL_1993:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_264;
            case 65529:
              goto LABEL_379;
            case 65530:
              goto LABEL_494;
            case 65531:
              goto LABEL_609;
            case 65532:
              goto LABEL_724;
            case 65533:
              goto LABEL_839;
            default:
              goto LABEL_1908;
          }
        case 1295:
          goto LABEL_1909;
        case 1296:
LABEL_1941:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_266;
            case 65529:
              goto LABEL_381;
            case 65530:
              goto LABEL_496;
            case 65531:
              goto LABEL_611;
            case 65532:
              goto LABEL_726;
            case 65533:
              goto LABEL_841;
            default:
              goto LABEL_1919;
          }
        default:
          if ((_DWORD)a1 == 1873)
          {
            v13 = 0;
LABEL_1920:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_267;
              case 65529:
                goto LABEL_382;
              case 65530:
                goto LABEL_497;
              case 65531:
                goto LABEL_612;
              case 65532:
                goto LABEL_727;
              case 65533:
                goto LABEL_842;
              default:
                if ((_DWORD)a2)
                {
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v168 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v168;
                  goto LABEL_1926;
                }

                v4 = CFSTR("SupportedDeviceCategories");
LABEL_1923:

                v4 = CFSTR("MeasurementType");
LABEL_1924:

                v27 = CFSTR("FlipFlop");
                v4 = CFSTR("Boolean");
                break;
            }
          }
          else
          {
            if ((_DWORD)a1 != 2820)
              goto LABEL_847;
LABEL_1926:
            if ((int)a2 > 1791)
            {
              if ((int)a2 > 2304)
              {
                switch((int)a2)
                {
                  case 2305:
                    v169 = CFSTR("LineCurrentPhaseB");
                    goto LABEL_2392;
                  case 2306:
                    v169 = CFSTR("ActiveCurrentPhaseB");
                    goto LABEL_2392;
                  case 2307:
                    v169 = CFSTR("ReactiveCurrentPhaseB");
                    goto LABEL_2392;
                  case 2308:
                    goto LABEL_2199;
                  case 2309:
                    v169 = CFSTR("RmsVoltagePhaseB");
                    goto LABEL_2392;
                  case 2310:
                    v169 = CFSTR("RmsVoltageMinPhaseB");
                    goto LABEL_2392;
                  case 2311:
                    v169 = CFSTR("RmsVoltageMaxPhaseB");
                    goto LABEL_2392;
                  case 2312:
                    v169 = CFSTR("RmsCurrentPhaseB");
                    goto LABEL_2392;
                  case 2313:
                    v169 = CFSTR("RmsCurrentMinPhaseB");
                    goto LABEL_2392;
                  case 2314:
                    v169 = CFSTR("RmsCurrentMaxPhaseB");
                    goto LABEL_2392;
                  case 2315:
                    v169 = CFSTR("ActivePowerPhaseB");
                    goto LABEL_2392;
                  case 2316:
                    v169 = CFSTR("ActivePowerMinPhaseB");
                    goto LABEL_2392;
                  case 2317:
                    v169 = CFSTR("ActivePowerMaxPhaseB");
                    goto LABEL_2392;
                  case 2318:
                    v169 = CFSTR("ReactivePowerPhaseB");
                    goto LABEL_2392;
                  case 2319:
                    v169 = CFSTR("ApparentPowerPhaseB");
                    goto LABEL_2392;
                  case 2320:
                    v169 = CFSTR("PowerFactorPhaseB");
                    goto LABEL_2392;
                  case 2321:
                    v169 = CFSTR("AverageRmsVoltageMeasurementPeriodPhaseB");
                    goto LABEL_2392;
                  case 2322:
                    v169 = CFSTR("AverageRmsOverVoltageCounterPhaseB");
                    goto LABEL_2392;
                  case 2323:
                    v169 = CFSTR("AverageRmsUnderVoltageCounterPhaseB");
                    goto LABEL_2392;
                  case 2324:
                    v169 = CFSTR("RmsExtremeOverVoltagePeriodPhaseB");
                    goto LABEL_2392;
                  case 2325:
                    v169 = CFSTR("RmsExtremeUnderVoltagePeriodPhaseB");
                    goto LABEL_2392;
                  case 2326:
                    v169 = CFSTR("RmsVoltageSagPeriodPhaseB");
                    goto LABEL_2392;
                  case 2327:
                    v169 = CFSTR("RmsVoltageSwellPeriodPhaseB");
                    goto LABEL_2392;
                  default:
                    switch((int)a2)
                    {
                      case 2561:
                        v169 = CFSTR("LineCurrentPhaseC");
                        goto LABEL_2392;
                      case 2562:
                        v169 = CFSTR("ActiveCurrentPhaseC");
                        goto LABEL_2392;
                      case 2563:
                        v169 = CFSTR("ReactiveCurrentPhaseC");
                        goto LABEL_2392;
                      case 2564:
                        goto LABEL_2199;
                      case 2565:
                        v169 = CFSTR("RmsVoltagePhaseC");
                        goto LABEL_2392;
                      case 2566:
                        v169 = CFSTR("RmsVoltageMinPhaseC");
                        goto LABEL_2392;
                      case 2567:
                        v169 = CFSTR("RmsVoltageMaxPhaseC");
                        goto LABEL_2392;
                      case 2568:
                        v169 = CFSTR("RmsCurrentPhaseC");
                        goto LABEL_2392;
                      case 2569:
                        v169 = CFSTR("RmsCurrentMinPhaseC");
                        goto LABEL_2392;
                      case 2570:
                        v169 = CFSTR("RmsCurrentMaxPhaseC");
                        goto LABEL_2392;
                      case 2571:
                        v169 = CFSTR("ActivePowerPhaseC");
                        goto LABEL_2392;
                      case 2572:
                        v169 = CFSTR("ActivePowerMinPhaseC");
                        goto LABEL_2392;
                      case 2573:
                        v169 = CFSTR("ActivePowerMaxPhaseC");
                        goto LABEL_2392;
                      case 2574:
                        v169 = CFSTR("ReactivePowerPhaseC");
                        goto LABEL_2392;
                      case 2575:
                        v169 = CFSTR("ApparentPowerPhaseC");
                        goto LABEL_2392;
                      case 2576:
                        v169 = CFSTR("PowerFactorPhaseC");
                        goto LABEL_2392;
                      case 2577:
                        v169 = CFSTR("AverageRmsVoltageMeasurementPeriodPhaseC");
                        goto LABEL_2392;
                      case 2578:
                        v169 = CFSTR("AverageRmsOverVoltageCounterPhaseC");
                        goto LABEL_2392;
                      case 2579:
                        v169 = CFSTR("AverageRmsUnderVoltageCounterPhaseC");
                        goto LABEL_2392;
                      case 2580:
                        v169 = CFSTR("RmsExtremeOverVoltagePeriodPhaseC");
                        goto LABEL_2392;
                      case 2581:
                        v169 = CFSTR("RmsExtremeUnderVoltagePeriodPhaseC");
                        goto LABEL_2392;
                      case 2582:
                        v169 = CFSTR("RmsVoltageSagPeriodPhaseC");
                        goto LABEL_2392;
                      case 2583:
                        v169 = CFSTR("RmsVoltageSwellPeriodPhaseC");
                        goto LABEL_2392;
                      default:
                        switch((int)a2)
                        {
                          case 65528:
                            goto LABEL_268;
                          case 65529:
                            goto LABEL_383;
                          case 65530:
                            goto LABEL_498;
                          case 65531:
                            goto LABEL_613;
                          case 65532:
                            goto LABEL_728;
                          case 65533:
                            goto LABEL_843;
                          default:
                            goto LABEL_2199;
                        }
                    }
                }
              }
              if ((int)a2 > 2047)
              {
                switch((int)a2)
                {
                  case 2048:
                    v169 = CFSTR("AcOverloadAlarmsMask");
                    goto LABEL_2392;
                  case 2049:
                    v169 = CFSTR("AcVoltageOverload");
                    goto LABEL_2392;
                  case 2050:
                    v169 = CFSTR("AcCurrentOverload");
                    goto LABEL_2392;
                  case 2051:
                    v169 = CFSTR("AcActivePowerOverload");
                    goto LABEL_2392;
                  case 2052:
                    v169 = CFSTR("AcReactivePowerOverload");
                    goto LABEL_2392;
                  case 2053:
                    v169 = CFSTR("AverageRmsOverVoltage");
                    goto LABEL_2392;
                  case 2054:
                    v169 = CFSTR("AverageRmsUnderVoltage");
                    goto LABEL_2392;
                  case 2055:
                    v169 = CFSTR("RmsExtremeOverVoltage");
                    goto LABEL_2392;
                  case 2056:
                    v169 = CFSTR("RmsExtremeUnderVoltage");
                    goto LABEL_2392;
                  case 2057:
                    v169 = CFSTR("RmsVoltageSag");
                    goto LABEL_2392;
                  case 2058:
                    v169 = CFSTR("RmsVoltageSwell");
                    goto LABEL_2392;
                  default:
                    goto LABEL_2199;
                }
              }
              switch((_DWORD)a2)
              {
                case 0x700:
                  v169 = CFSTR("OverloadAlarmsMask");
                  break;
                case 0x701:
                  v169 = CFSTR("VoltageOverload");
                  break;
                case 0x702:
                  v169 = CFSTR("CurrentOverload");
                  break;
                default:
LABEL_2199:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v186 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v186;
LABEL_2200:
                  if ((int)a2 > 254)
                  {
                    switch((int)a2)
                    {
                      case 16384:
                        v187 = CFSTR("NullableBoolean");
                        goto LABEL_2287;
                      case 16385:
                        v187 = CFSTR("NullableBitmap8");
                        goto LABEL_2287;
                      case 16386:
                        v187 = CFSTR("NullableBitmap16");
                        goto LABEL_2287;
                      case 16387:
                        v187 = CFSTR("NullableBitmap32");
                        goto LABEL_2287;
                      case 16388:
                        v187 = CFSTR("NullableBitmap64");
                        goto LABEL_2287;
                      case 16389:
                        v187 = CFSTR("NullableInt8u");
                        goto LABEL_2287;
                      case 16390:
                        v187 = CFSTR("NullableInt16u");
                        goto LABEL_2287;
                      case 16391:
                        v187 = CFSTR("NullableInt24u");
                        goto LABEL_2287;
                      case 16392:
                        v187 = CFSTR("NullableInt32u");
                        goto LABEL_2287;
                      case 16393:
                        v187 = CFSTR("NullableInt40u");
                        goto LABEL_2287;
                      case 16394:
                        v187 = CFSTR("NullableInt48u");
                        goto LABEL_2287;
                      case 16395:
                        v187 = CFSTR("NullableInt56u");
                        goto LABEL_2287;
                      case 16396:
                        v187 = CFSTR("NullableInt64u");
                        goto LABEL_2287;
                      case 16397:
                        v187 = CFSTR("NullableInt8s");
                        goto LABEL_2287;
                      case 16398:
                        v187 = CFSTR("NullableInt16s");
                        goto LABEL_2287;
                      case 16399:
                        v187 = CFSTR("NullableInt24s");
                        goto LABEL_2287;
                      case 16400:
                        v187 = CFSTR("NullableInt32s");
                        goto LABEL_2287;
                      case 16401:
                        v187 = CFSTR("NullableInt40s");
                        goto LABEL_2287;
                      case 16402:
                        v187 = CFSTR("NullableInt48s");
                        goto LABEL_2287;
                      case 16403:
                        v187 = CFSTR("NullableInt56s");
                        goto LABEL_2287;
                      case 16404:
                        v187 = CFSTR("NullableInt64s");
                        goto LABEL_2287;
                      case 16405:
                        v187 = CFSTR("NullableEnum8");
                        goto LABEL_2287;
                      case 16406:
                        v187 = CFSTR("NullableEnum16");
                        goto LABEL_2287;
                      case 16407:
                        v187 = CFSTR("NullableFloatSingle");
                        goto LABEL_2287;
                      case 16408:
                        v187 = CFSTR("NullableFloatDouble");
                        goto LABEL_2287;
                      case 16409:
                        v187 = CFSTR("NullableOctetString");
                        goto LABEL_2287;
                      case 16410:
                      case 16411:
                      case 16412:
                      case 16413:
                      case 16415:
                      case 16416:
                      case 16417:
                      case 16418:
                      case 16419:
                        goto LABEL_2393;
                      case 16414:
                        v187 = CFSTR("NullableCharString");
                        goto LABEL_2287;
                      case 16420:
                        v187 = CFSTR("NullableEnumAttr");
                        goto LABEL_2287;
                      case 16421:
                        v187 = CFSTR("NullableStruct");
                        goto LABEL_2287;
                      case 16422:
                        v187 = CFSTR("NullableRangeRestrictedInt8u");
                        goto LABEL_2287;
                      case 16423:
                        v187 = CFSTR("NullableRangeRestrictedInt8s");
                        goto LABEL_2287;
                      case 16424:
                        v187 = CFSTR("NullableRangeRestrictedInt16u");
                        goto LABEL_2287;
                      case 16425:
                        v187 = CFSTR("NullableRangeRestrictedInt16s");
                        goto LABEL_2287;
                      case 16426:
                        v187 = CFSTR("WriteOnlyInt8u");
                        goto LABEL_2287;
                      default:
                        switch((int)a2)
                        {
                          case 65528:
                            goto LABEL_269;
                          case 65529:
                            goto LABEL_384;
                          case 65530:
                            goto LABEL_499;
                          case 65531:
                            goto LABEL_614;
                          case 65532:
                            goto LABEL_729;
                          case 65533:
                            goto LABEL_844;
                          default:
                            if ((_DWORD)a2 != 255)
                              goto LABEL_2393;
                            v187 = CFSTR("Unsupported");
                            break;
                        }
                        goto LABEL_2287;
                    }
                  }
                  v187 = CFSTR("Bitmap8");
                  switch((int)a2)
                  {
                    case 0:
                      goto LABEL_1924;
                    case 1:
                      break;
                    case 2:
                      v187 = CFSTR("Bitmap16");
                      break;
                    case 3:
                      v187 = CFSTR("Bitmap32");
                      break;
                    case 4:
                      v187 = CFSTR("Bitmap64");
                      break;
                    case 5:
                      v187 = CFSTR("Int8u");
                      break;
                    case 6:
                      v187 = CFSTR("Int16u");
                      break;
                    case 7:
                      v187 = CFSTR("Int24u");
                      break;
                    case 8:
                      v187 = CFSTR("Int32u");
                      break;
                    case 9:
                      v187 = CFSTR("Int40u");
                      break;
                    case 10:
                      v187 = CFSTR("Int48u");
                      break;
                    case 11:
                      v187 = CFSTR("Int56u");
                      break;
                    case 12:
                      v187 = CFSTR("Int64u");
                      break;
                    case 13:
                      v187 = CFSTR("Int8s");
                      break;
                    case 14:
                      v187 = CFSTR("Int16s");
                      break;
                    case 15:
                      v187 = CFSTR("Int24s");
                      break;
                    case 16:
                      v187 = CFSTR("Int32s");
                      break;
                    case 17:
                      v187 = CFSTR("Int40s");
                      break;
                    case 18:
                      v187 = CFSTR("Int48s");
                      break;
                    case 19:
                      v187 = CFSTR("Int56s");
                      break;
                    case 20:
                      v187 = CFSTR("Int64s");
                      break;
                    case 21:
                      v187 = CFSTR("Enum8");
                      break;
                    case 22:
                      v187 = CFSTR("Enum16");
                      break;
                    case 23:
                      v187 = CFSTR("FloatSingle");
                      break;
                    case 24:
                      v187 = CFSTR("FloatDouble");
                      break;
                    case 25:
                      v187 = CFSTR("OctetString");
                      break;
                    case 26:
                      v187 = CFSTR("ListInt8u");
                      break;
                    case 27:
                      v187 = CFSTR("ListOctetString");
                      break;
                    case 28:
                      v187 = CFSTR("ListStructOctetString");
                      break;
                    case 29:
                      v187 = CFSTR("LongOctetString");
                      break;
                    case 30:
                      v187 = CFSTR("CharString");
                      break;
                    case 31:
                      v187 = CFSTR("LongCharString");
                      break;
                    case 32:
                      v187 = CFSTR("EpochUs");
                      break;
                    case 33:
                      v187 = CFSTR("EpochS");
                      break;
                    case 34:
                      v187 = CFSTR("VendorId");
                      break;
                    case 35:
                      v187 = CFSTR("ListNullablesAndOptionalsStruct");
                      break;
                    case 36:
                      v187 = CFSTR("EnumAttr");
                      break;
                    case 37:
                      v187 = CFSTR("StructAttr");
                      break;
                    case 38:
                      v187 = CFSTR("RangeRestrictedInt8u");
                      break;
                    case 39:
                      v187 = CFSTR("RangeRestrictedInt8s");
                      break;
                    case 40:
                      v187 = CFSTR("RangeRestrictedInt16u");
                      break;
                    case 41:
                      v187 = CFSTR("RangeRestrictedInt16s");
                      break;
                    case 42:
                      v187 = CFSTR("ListLongOctetString");
                      break;
                    case 43:
                      v187 = CFSTR("ListFabricScoped");
                      break;
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                      goto LABEL_2393;
                    case 48:
                      v187 = CFSTR("TimedWriteBoolean");
                      break;
                    case 49:
                      v187 = CFSTR("GeneralErrorBoolean");
                      break;
                    case 50:
                      v187 = CFSTR("ClusterErrorBoolean");
                      break;
                    default:
                      if ((_DWORD)a2 != -897279)
                        goto LABEL_2393;
                      v187 = CFSTR("MeiInt8u");
                      break;
                  }
LABEL_2287:

                  v4 = (__CFString *)v187;
LABEL_2397:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v27 = (const __CFString *)objc_claimAutoreleasedReturnValue();
                  goto LABEL_846;
              }
            }
            else
            {
              if ((int)a2 > 1023)
              {
                switch((int)a2)
                {
                  case 1280:
                    v169 = CFSTR("InstantaneousVoltage");
                    goto LABEL_2392;
                  case 1281:
                    v169 = CFSTR("InstantaneousLineCurrent");
                    goto LABEL_2392;
                  case 1282:
                    v169 = CFSTR("InstantaneousActiveCurrent");
                    goto LABEL_2392;
                  case 1283:
                    v169 = CFSTR("InstantaneousReactiveCurrent");
                    goto LABEL_2392;
                  case 1284:
                    v169 = CFSTR("InstantaneousPower");
                    goto LABEL_2392;
                  case 1285:
                    v169 = CFSTR("RmsVoltage");
                    goto LABEL_2392;
                  case 1286:
                    v169 = CFSTR("RmsVoltageMin");
                    goto LABEL_2392;
                  case 1287:
                    v169 = CFSTR("RmsVoltageMax");
                    goto LABEL_2392;
                  case 1288:
                    v169 = CFSTR("RmsCurrent");
                    goto LABEL_2392;
                  case 1289:
                    v169 = CFSTR("RmsCurrentMin");
                    goto LABEL_2392;
                  case 1290:
                    v169 = CFSTR("RmsCurrentMax");
                    goto LABEL_2392;
                  case 1291:
                    v169 = CFSTR("ActivePower");
                    goto LABEL_2392;
                  case 1292:
                    v169 = CFSTR("ActivePowerMin");
                    goto LABEL_2392;
                  case 1293:
                    v169 = CFSTR("ActivePowerMax");
                    goto LABEL_2392;
                  case 1294:
                    v169 = CFSTR("ReactivePower");
                    goto LABEL_2392;
                  case 1295:
                    v169 = CFSTR("ApparentPower");
                    goto LABEL_2392;
                  case 1296:
                    v169 = CFSTR("PowerFactor");
                    goto LABEL_2392;
                  case 1297:
                    v169 = CFSTR("AverageRmsVoltageMeasurementPeriod");
                    goto LABEL_2392;
                  case 1298:
                    goto LABEL_2199;
                  case 1299:
                    v169 = CFSTR("AverageRmsUnderVoltageCounter");
                    goto LABEL_2392;
                  case 1300:
                    v169 = CFSTR("RmsExtremeOverVoltagePeriod");
                    goto LABEL_2392;
                  case 1301:
                    v169 = CFSTR("RmsExtremeUnderVoltagePeriod");
                    goto LABEL_2392;
                  case 1302:
                    v169 = CFSTR("RmsVoltageSagPeriod");
                    goto LABEL_2392;
                  case 1303:
                    v169 = CFSTR("RmsVoltageSwellPeriod");
                    goto LABEL_2392;
                  default:
                    switch((int)a2)
                    {
                      case 1024:
                        v169 = CFSTR("AcFrequencyMultiplier");
                        break;
                      case 1025:
                        v169 = CFSTR("AcFrequencyDivisor");
                        break;
                      case 1026:
                        v169 = CFSTR("PowerMultiplier");
                        break;
                      case 1027:
                        v169 = CFSTR("PowerDivisor");
                        break;
                      case 1028:
                        v169 = CFSTR("HarmonicCurrentMultiplier");
                        break;
                      case 1029:
                        v169 = CFSTR("PhaseHarmonicCurrentMultiplier");
                        break;
                      default:
                        switch((int)a2)
                        {
                          case 1536:
                            v169 = CFSTR("AcVoltageMultiplier");
                            goto LABEL_2392;
                          case 1537:
                            v169 = CFSTR("AcVoltageDivisor");
                            goto LABEL_2392;
                          case 1538:
                            v169 = CFSTR("AcCurrentMultiplier");
                            goto LABEL_2392;
                          case 1539:
                            v169 = CFSTR("AcCurrentDivisor");
                            goto LABEL_2392;
                          case 1540:
                            v169 = CFSTR("AcPowerMultiplier");
                            goto LABEL_2392;
                          case 1541:
                            v169 = CFSTR("AcPowerDivisor");
                            goto LABEL_2392;
                          default:
                            goto LABEL_2199;
                        }
                    }
                    goto LABEL_2392;
                }
              }
              if ((int)a2 > 767)
              {
                switch((int)a2)
                {
                  case 768:
                    v169 = CFSTR("AcFrequency");
                    goto LABEL_2392;
                  case 769:
                    v169 = CFSTR("AcFrequencyMin");
                    goto LABEL_2392;
                  case 770:
                    v169 = CFSTR("AcFrequencyMax");
                    goto LABEL_2392;
                  case 771:
                    v169 = CFSTR("NeutralCurrent");
                    goto LABEL_2392;
                  case 772:
                    v169 = CFSTR("TotalActivePower");
                    goto LABEL_2392;
                  case 773:
                    v169 = CFSTR("TotalReactivePower");
                    goto LABEL_2392;
                  case 774:
                    v169 = CFSTR("TotalApparentPower");
                    goto LABEL_2392;
                  case 775:
                    v169 = CFSTR("Measured1stHarmonicCurrent");
                    goto LABEL_2392;
                  case 776:
                    v169 = CFSTR("Measured3rdHarmonicCurrent");
                    goto LABEL_2392;
                  case 777:
                    v169 = CFSTR("Measured5thHarmonicCurrent");
                    goto LABEL_2392;
                  case 778:
                    v169 = CFSTR("Measured7thHarmonicCurrent");
                    goto LABEL_2392;
                  case 779:
                    v169 = CFSTR("Measured9thHarmonicCurrent");
                    goto LABEL_2392;
                  case 780:
                    v169 = CFSTR("Measured11thHarmonicCurrent");
                    goto LABEL_2392;
                  case 781:
                    v169 = CFSTR("MeasuredPhase1stHarmonicCurrent");
                    goto LABEL_2392;
                  case 782:
                    v169 = CFSTR("MeasuredPhase3rdHarmonicCurrent");
                    goto LABEL_2392;
                  case 783:
                    v169 = CFSTR("MeasuredPhase5thHarmonicCurrent");
                    goto LABEL_2392;
                  case 784:
                    v169 = CFSTR("MeasuredPhase7thHarmonicCurrent");
                    goto LABEL_2392;
                  case 785:
                    v169 = CFSTR("MeasuredPhase9thHarmonicCurrent");
                    goto LABEL_2392;
                  case 786:
                    v169 = CFSTR("MeasuredPhase11thHarmonicCurrent");
                    goto LABEL_2392;
                  default:
                    goto LABEL_2199;
                }
              }
              v169 = CFSTR("DcVoltage");
              switch((int)a2)
              {
                case 256:
                  break;
                case 257:
                  v169 = CFSTR("DcVoltageMin");
                  break;
                case 258:
                  v169 = CFSTR("DcVoltageMax");
                  break;
                case 259:
                  v169 = CFSTR("DcCurrent");
                  break;
                case 260:
                  v169 = CFSTR("DcCurrentMin");
                  break;
                case 261:
                  v169 = CFSTR("DcCurrentMax");
                  break;
                case 262:
                  v169 = CFSTR("DcPower");
                  break;
                case 263:
                  v169 = CFSTR("DcPowerMin");
                  break;
                case 264:
                  v169 = CFSTR("DcPowerMax");
                  break;
                default:
                  switch((int)a2)
                  {
                    case 512:
                      v169 = CFSTR("DcVoltageMultiplier");
                      goto LABEL_2392;
                    case 513:
                      v169 = CFSTR("DcVoltageDivisor");
                      goto LABEL_2392;
                    case 514:
                      v169 = CFSTR("DcCurrentMultiplier");
                      goto LABEL_2392;
                    case 515:
                      v169 = CFSTR("DcCurrentDivisor");
                      goto LABEL_2392;
                    case 516:
                      v169 = CFSTR("DcPowerMultiplier");
                      goto LABEL_2392;
                    case 517:
                      v169 = CFSTR("DcPowerDivisor");
                      goto LABEL_2392;
                    default:
                      if ((_DWORD)a2)
                        goto LABEL_2199;
                      goto LABEL_1923;
                  }
              }
            }
LABEL_2392:

            v4 = (__CFString *)v169;
LABEL_2393:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v188 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v188;
LABEL_2394:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_270;
              case 65529:
                goto LABEL_385;
              case 65530:
                goto LABEL_500;
              case 65531:
                goto LABEL_615;
              case 65532:
                goto LABEL_730;
              case 65533:
                goto LABEL_845;
              default:
                if ((_DWORD)a2)
                  goto LABEL_2397;
                v27 = CFSTR("FlipFlop");
                break;
            }
          }
LABEL_846:

          v4 = (__CFString *)v27;
          goto LABEL_847;
      }
LABEL_7:
      switch((int)a2)
      {
        case 65528:
          goto LABEL_257;
        case 65529:
          goto LABEL_372;
        case 65530:
          goto LABEL_487;
        case 65531:
          goto LABEL_602;
        case 65532:
          goto LABEL_717;
        case 65533:
          goto LABEL_832;
        default:
          if (!(_DWORD)a2)
          {
            v18 = CFSTR("InputList");
            v15 = v4;
            goto LABEL_1866;
          }
          v15 = v4;
          if ((_DWORD)a2 != 1)
            goto LABEL_1984;
          break;
      }
LABEL_1388:
      v18 = CFSTR("CurrentInput");
LABEL_1866:

      v4 = (__CFString *)v18;
LABEL_1867:
      objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
      v157 = objc_claimAutoreleasedReturnValue();

      v4 = (__CFString *)v157;
LABEL_1868:
      switch((int)a2)
      {
        case 65528:
          goto LABEL_259;
        case 65529:
          goto LABEL_374;
        case 65530:
          goto LABEL_489;
        case 65531:
          goto LABEL_604;
        case 65532:
          goto LABEL_719;
        case 65533:
          goto LABEL_834;
        default:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v158 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v158;
          goto LABEL_1870;
      }
    }
    if ((int)a1 <= 1104)
    {
      switch((int)a1)
      {
        case 1066:
LABEL_18:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1840;
            case 1:
              goto LABEL_1375;
            case 2:
              goto LABEL_1660;
            case 3:
              goto LABEL_1772;
            case 4:
              goto LABEL_2032;
            case 5:
              goto LABEL_2048;
            case 6:
              goto LABEL_2056;
            case 7:
              goto LABEL_2063;
            case 8:
              goto LABEL_2070;
            case 9:
              goto LABEL_2077;
            case 10:
              goto LABEL_2084;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_244;
                case 65529:
                  goto LABEL_359;
                case 65530:
                  goto LABEL_474;
                case 65531:
                  goto LABEL_589;
                case 65532:
                  goto LABEL_704;
                case 65533:
                  goto LABEL_819;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v54 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v54;
                  goto LABEL_960;
              }
          }
        case 1067:
LABEL_960:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1841;
            case 1:
              goto LABEL_1376;
            case 2:
              goto LABEL_1661;
            case 3:
              goto LABEL_1773;
            case 4:
              goto LABEL_2033;
            case 5:
              goto LABEL_2049;
            case 6:
              goto LABEL_2057;
            case 7:
              goto LABEL_2064;
            case 8:
              goto LABEL_2071;
            case 9:
              goto LABEL_2078;
            case 10:
              goto LABEL_2085;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_245;
                case 65529:
                  goto LABEL_360;
                case 65530:
                  goto LABEL_475;
                case 65531:
                  goto LABEL_590;
                case 65532:
                  goto LABEL_705;
                case 65533:
                  goto LABEL_820;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v55 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v55;
                  goto LABEL_963;
              }
          }
        case 1068:
LABEL_963:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1842;
            case 1:
              goto LABEL_1377;
            case 2:
              goto LABEL_1662;
            case 3:
              goto LABEL_1774;
            case 4:
              goto LABEL_2034;
            case 5:
              goto LABEL_2050;
            case 6:
              goto LABEL_2058;
            case 7:
              goto LABEL_2065;
            case 8:
              goto LABEL_2072;
            case 9:
              goto LABEL_2079;
            case 10:
              goto LABEL_2086;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_246;
                case 65529:
                  goto LABEL_361;
                case 65530:
                  goto LABEL_476;
                case 65531:
                  goto LABEL_591;
                case 65532:
                  goto LABEL_706;
                case 65533:
                  goto LABEL_821;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v56 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v56;
                  goto LABEL_966;
              }
          }
        case 1069:
LABEL_966:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1843;
            case 1:
              goto LABEL_1378;
            case 2:
              goto LABEL_1663;
            case 3:
              goto LABEL_1775;
            case 4:
              goto LABEL_2035;
            case 5:
              goto LABEL_2051;
            case 6:
              goto LABEL_2059;
            case 7:
              goto LABEL_2066;
            case 8:
              goto LABEL_2073;
            case 9:
              goto LABEL_2080;
            case 10:
              goto LABEL_2087;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_247;
                case 65529:
                  goto LABEL_362;
                case 65530:
                  goto LABEL_477;
                case 65531:
                  goto LABEL_592;
                case 65532:
                  goto LABEL_707;
                case 65533:
                  goto LABEL_822;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v57 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v57;
                  goto LABEL_969;
              }
          }
        case 1070:
LABEL_969:
          switch((int)a2)
          {
            case 0:
              goto LABEL_1844;
            case 1:
              goto LABEL_1379;
            case 2:
              goto LABEL_1664;
            case 3:
              goto LABEL_1776;
            case 4:
              goto LABEL_2036;
            case 5:
              goto LABEL_2052;
            case 6:
              goto LABEL_2060;
            case 7:
              goto LABEL_2067;
            case 8:
              goto LABEL_2074;
            case 9:
              goto LABEL_2081;
            case 10:
              goto LABEL_2088;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_248;
                case 65529:
                  goto LABEL_363;
                case 65530:
                  goto LABEL_478;
                case 65531:
                  goto LABEL_593;
                case 65532:
                  goto LABEL_708;
                case 65533:
                  goto LABEL_823;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v58 = objc_claimAutoreleasedReturnValue();

                  v4 = (__CFString *)v58;
                  goto LABEL_972;
              }
          }
        case 1071:
LABEL_972:
          v59 = CFSTR("MeasuredValue");
          switch((int)a2)
          {
            case 0:
              goto LABEL_1845;
            case 1:
              goto LABEL_1380;
            case 2:
              goto LABEL_1665;
            case 3:
              goto LABEL_1777;
            case 4:
              goto LABEL_2037;
            case 5:
              goto LABEL_2053;
            case 6:
              goto LABEL_2061;
            case 7:
              goto LABEL_2068;
            case 8:
              goto LABEL_2075;
            case 9:
              goto LABEL_2082;
            case 10:
              goto LABEL_2089;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_249;
                case 65529:
                  goto LABEL_364;
                case 65530:
                  goto LABEL_479;
                case 65531:
                  goto LABEL_594;
                case 65532:
                  goto LABEL_709;
                case 65533:
                  goto LABEL_824;
                default:
                  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                  v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

                  goto LABEL_40;
              }
          }
        default:
          goto LABEL_847;
      }
      goto LABEL_847;
    }
    if ((_DWORD)a1 == 1105)
    {
      v11 = 0;
LABEL_40:
      switch((int)a2)
      {
        case 65528:
          goto LABEL_250;
        case 65529:
          goto LABEL_365;
        case 65530:
          goto LABEL_480;
        case 65531:
          goto LABEL_595;
        case 65532:
          goto LABEL_710;
        case 65533:
          goto LABEL_825;
        default:
          v16 = v11;
          if ((_DWORD)a2 != 1)
            goto LABEL_1846;
          goto LABEL_1381;
      }
    }
    if ((_DWORD)a1 != 1106)
    {
      if ((_DWORD)a1 != 1107)
        goto LABEL_847;
LABEL_1852:
      if ((int)a2 > 65527)
      {
        switch((int)a2)
        {
          case 65528:
            goto LABEL_252;
          case 65529:
            goto LABEL_367;
          case 65530:
            goto LABEL_482;
          case 65531:
            goto LABEL_597;
          case 65532:
            goto LABEL_712;
          case 65533:
            goto LABEL_827;
          default:
            goto LABEL_1858;
        }
      }
      if (!(_DWORD)a2)
      {
LABEL_1850:

        v152 = CFSTR("PreferredExtendedPanID");
LABEL_1862:

        v4 = CFSTR("MACAddress");
        goto LABEL_1863;
      }
      if ((_DWORD)a2 != 1)
      {
        v154 = v4;
        if ((_DWORD)a2 != 2)
        {
LABEL_1858:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v155 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v155;
LABEL_1859:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_253;
            case 65529:
              goto LABEL_368;
            case 65530:
              goto LABEL_483;
            case 65531:
              goto LABEL_598;
            case 65532:
              goto LABEL_713;
            case 65533:
              goto LABEL_828;
            default:
              if ((_DWORD)a2 == 1)
                goto LABEL_1384;
              v152 = v4;
              if (!(_DWORD)a2)
                goto LABEL_1862;
              goto LABEL_1871;
          }
        }
LABEL_1855:

        v4 = CFSTR("ThreadNetworkTableSize");
LABEL_1871:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v159 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v159;
LABEL_1872:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_254;
            case 65529:
              goto LABEL_369;
            case 65530:
              goto LABEL_484;
            case 65531:
              goto LABEL_599;
            case 65532:
              goto LABEL_714;
            case 65533:
              goto LABEL_829;
            default:
              goto LABEL_1892;
          }
        }
        if ((_DWORD)a2)
        {
          if ((_DWORD)a2 != 1)
          {
            if ((_DWORD)a2 != 2)
            {
LABEL_1892:
              objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
              v161 = objc_claimAutoreleasedReturnValue();

              v4 = (__CFString *)v161;
LABEL_1893:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_255;
                case 65529:
                  goto LABEL_370;
                case 65530:
                  goto LABEL_485;
                case 65531:
                  goto LABEL_600;
                case 65532:
                  goto LABEL_715;
                case 65533:
                  goto LABEL_830;
                default:
                  if ((_DWORD)a2 == 1)
                    goto LABEL_1386;
                  v156 = v4;
                  if ((_DWORD)a2)
                    goto LABEL_1896;
                  goto LABEL_1864;
              }
            }

            v4 = CFSTR("CurrentChannel");
LABEL_1896:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v162 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v162;
LABEL_1897:
            v163 = CFSTR("Duration");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1865;
              case 1:
                goto LABEL_1387;
              case 2:
                goto LABEL_1983;
              case 3:
                v163 = CFSTR("SampledPosition");
                goto LABEL_1983;
              case 4:
                v163 = CFSTR("PlaybackSpeed");
                goto LABEL_1983;
              case 5:
                v163 = CFSTR("SeekRangeEnd");
                goto LABEL_1983;
              case 6:
                v163 = CFSTR("SeekRangeStart");
                goto LABEL_1983;
              case 7:
                v163 = CFSTR("ActiveAudioTrack");
                goto LABEL_1983;
              case 8:
                v163 = CFSTR("AvailableAudioTracks");
                goto LABEL_1983;
              case 9:
                v163 = CFSTR("ActiveTextTrack");
                goto LABEL_1983;
              case 10:
                v163 = CFSTR("AvailableTextTracks");
LABEL_1983:

                v4 = (__CFString *)v163;
                break;
              default:
                switch((int)a2)
                {
                  case 65528:
                    goto LABEL_256;
                  case 65529:
                    goto LABEL_371;
                  case 65530:
                    goto LABEL_486;
                  case 65531:
                    goto LABEL_601;
                  case 65532:
                    goto LABEL_716;
                  case 65533:
                    goto LABEL_831;
                  default:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v176 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v176;
                    goto LABEL_7;
                }
            }
LABEL_1984:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v175 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v175;
LABEL_1985:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_258;
              case 65529:
                goto LABEL_373;
              case 65530:
                goto LABEL_488;
              case 65531:
                goto LABEL_603;
              case 65532:
                goto LABEL_718;
              case 65533:
                goto LABEL_833;
              default:
                goto LABEL_1867;
            }
          }
          goto LABEL_1385;
        }
LABEL_1863:

        v156 = CFSTR("ChannelList");
LABEL_1864:

        v4 = CFSTR("TargetList");
LABEL_1865:

        v18 = CFSTR("InputList");
        v15 = CFSTR("CurrentState");
        goto LABEL_1866;
      }
LABEL_1383:

      v4 = CFSTR("ThreadNetworks");
LABEL_1384:

      v4 = CFSTR("LinkLocalAddress");
LABEL_1385:

      v4 = CFSTR("Lineup");
LABEL_1386:

      v4 = CFSTR("CurrentTarget");
LABEL_1387:

      v15 = CFSTR("StartTime");
      goto LABEL_1388;
    }
    v12 = 0;
    goto LABEL_1847;
  }
  if ((int)a1 > 767)
  {
    switch((int)a1)
    {
      case 1024:
        goto LABEL_1757;
      case 1025:
      case 1031:
      case 1032:
      case 1033:
      case 1034:
      case 1035:
      case 1038:
      case 1039:
      case 1040:
      case 1041:
      case 1042:
      case 1044:
        goto LABEL_847;
      case 1026:
LABEL_1761:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_235;
          case 65529:
            goto LABEL_350;
          case 65530:
            goto LABEL_465;
          case 65531:
            goto LABEL_580;
          case 65532:
            goto LABEL_695;
          case 65533:
            goto LABEL_810;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1831;
              case 1:
                goto LABEL_1366;
              case 2:
                goto LABEL_1651;
              case 3:
                goto LABEL_1763;
              default:
                goto LABEL_1779;
            }
        }
      case 1027:
LABEL_1780:
        v148 = CFSTR("ScaledValue");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1832;
          case 1:
            goto LABEL_1367;
          case 2:
            goto LABEL_1652;
          case 3:
            goto LABEL_1764;
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
LABEL_1783:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v149 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v149;
            goto LABEL_15;
          case 16:
            goto LABEL_1955;
          case 17:
            v148 = CFSTR("MinScaledValue");
            goto LABEL_1955;
          case 18:
            v148 = CFSTR("MaxScaledValue");
            goto LABEL_1955;
          case 19:
            v148 = CFSTR("ScaledTolerance");
            goto LABEL_1955;
          case 20:
            v148 = CFSTR("Scale");
LABEL_1955:

            v4 = (__CFString *)v148;
LABEL_1956:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v172 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v172;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_236;
              case 65529:
                goto LABEL_351;
              case 65530:
                goto LABEL_466;
              case 65531:
                goto LABEL_581;
              case 65532:
                goto LABEL_696;
              case 65533:
                goto LABEL_811;
              default:
                goto LABEL_1783;
            }
        }
        goto LABEL_1957;
      case 1028:
LABEL_15:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_237;
          case 65529:
            goto LABEL_352;
          case 65530:
            goto LABEL_467;
          case 65531:
            goto LABEL_582;
          case 65532:
            goto LABEL_697;
          case 65533:
            goto LABEL_812;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1833;
              case 1:
                goto LABEL_1368;
              case 2:
                goto LABEL_1653;
              case 3:
                goto LABEL_1765;
              default:
                goto LABEL_1956;
            }
        }
      case 1029:
LABEL_1957:
        switch((int)a2)
        {
          case 65528:
            goto LABEL_238;
          case 65529:
            goto LABEL_353;
          case 65530:
            goto LABEL_468;
          case 65531:
            goto LABEL_583;
          case 65532:
            goto LABEL_698;
          case 65533:
            goto LABEL_813;
          default:
            switch((int)a2)
            {
              case 0:
                goto LABEL_1834;
              case 1:
                goto LABEL_1369;
              case 2:
                goto LABEL_1654;
              case 3:
                goto LABEL_1766;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v173 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v173;
                goto LABEL_1960;
            }
        }
      case 1030:
LABEL_1960:
        if ((int)a2 > 33)
        {
          if ((int)a2 > 49)
          {
            switch((int)a2)
            {
              case 65528:
                goto LABEL_239;
              case 65529:
                goto LABEL_354;
              case 65530:
                goto LABEL_469;
              case 65531:
                goto LABEL_584;
              case 65532:
                goto LABEL_699;
              case 65533:
                goto LABEL_814;
              default:
                if ((_DWORD)a2 != 50)
                  goto LABEL_2004;
                v174 = CFSTR("PhysicalContactUnoccupiedToOccupiedThreshold");
                break;
            }
            goto LABEL_2017;
          }
          switch((_DWORD)a2)
          {
            case '"':
              v174 = CFSTR("UltrasonicUnoccupiedToOccupiedThreshold");
              break;
            case '0':
              v174 = CFSTR("PhysicalContactOccupiedToUnoccupiedDelay");
              break;
            case '1':
              v174 = CFSTR("PhysicalContactUnoccupiedToOccupiedDelay");
              break;
            default:
              goto LABEL_2004;
          }
        }
        else
        {
          v174 = CFSTR("PIROccupiedToUnoccupiedDelay");
          switch((int)a2)
          {
            case 0:
              goto LABEL_1835;
            case 1:
              goto LABEL_1370;
            case 2:
              goto LABEL_1655;
            case 3:
              goto LABEL_1767;
            case 4:

              v4 = CFSTR("HoldTimeLimits");
LABEL_2006:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2020:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2030:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2031:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2032:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2033:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2034:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2035:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2036:

              v4 = CFSTR("PeakMeasuredValueWindow");
LABEL_2037:
              v59 = CFSTR("PeakMeasuredValueWindow");
              goto LABEL_1845;
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
              goto LABEL_2004;
            case 16:
              break;
            case 17:
              v174 = CFSTR("PIRUnoccupiedToOccupiedDelay");
              break;
            case 18:
              v174 = CFSTR("PIRUnoccupiedToOccupiedThreshold");
              break;
            default:
              if ((_DWORD)a2 != 32)
              {
                if ((_DWORD)a2 == 33)
                {
                  v174 = CFSTR("UltrasonicUnoccupiedToOccupiedDelay");
                  break;
                }
LABEL_2004:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v178 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v178;
LABEL_2005:
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_1836;
                  case 1:
                    goto LABEL_1371;
                  case 2:
                    goto LABEL_1656;
                  case 3:
                    goto LABEL_1768;
                  case 4:
                    goto LABEL_2006;
                  case 5:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2022:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2039:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2047:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2048:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2049:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2050:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2051:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2052:

                    v4 = CFSTR("AverageMeasuredValue");
LABEL_2053:
                    v59 = CFSTR("AverageMeasuredValue");
                    goto LABEL_1845;
                  case 6:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2023:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2040:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2055:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2056:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2057:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2058:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2059:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2060:

                    v4 = CFSTR("AverageMeasuredValueWindow");
LABEL_2061:
                    v59 = CFSTR("AverageMeasuredValueWindow");
                    goto LABEL_1845;
                  case 7:

                    v4 = CFSTR("Uncertainty");
LABEL_2024:

                    v4 = CFSTR("Uncertainty");
LABEL_2041:

                    v4 = CFSTR("Uncertainty");
LABEL_2062:

                    v4 = CFSTR("Uncertainty");
LABEL_2063:

                    v4 = CFSTR("Uncertainty");
LABEL_2064:

                    v4 = CFSTR("Uncertainty");
LABEL_2065:

                    v4 = CFSTR("Uncertainty");
LABEL_2066:

                    v4 = CFSTR("Uncertainty");
LABEL_2067:

                    v4 = CFSTR("Uncertainty");
LABEL_2068:
                    v59 = CFSTR("Uncertainty");
                    goto LABEL_1845;
                  case 8:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2025:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2042:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2069:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2070:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2071:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2072:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2073:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2074:

                    v4 = CFSTR("MeasurementUnit");
LABEL_2075:
                    v59 = CFSTR("MeasurementUnit");
                    goto LABEL_1845;
                  case 9:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2026:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2043:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2076:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2077:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2078:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2079:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2080:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2081:

                    v4 = CFSTR("MeasurementMedium");
LABEL_2082:
                    v59 = CFSTR("MeasurementMedium");
                    goto LABEL_1845;
                  case 10:

                    v4 = CFSTR("LevelValue");
LABEL_2027:

                    v4 = CFSTR("LevelValue");
LABEL_2044:

                    v4 = CFSTR("LevelValue");
LABEL_2083:

                    v4 = CFSTR("LevelValue");
LABEL_2084:

                    v4 = CFSTR("LevelValue");
LABEL_2085:

                    v4 = CFSTR("LevelValue");
LABEL_2086:

                    v4 = CFSTR("LevelValue");
LABEL_2087:

                    v4 = CFSTR("LevelValue");
LABEL_2088:

                    v4 = CFSTR("LevelValue");
LABEL_2089:
                    v59 = CFSTR("LevelValue");
                    goto LABEL_1845;
                  default:
                    switch((int)a2)
                    {
                      case 65528:
                        goto LABEL_240;
                      case 65529:
                        goto LABEL_355;
                      case 65530:
                        goto LABEL_470;
                      case 65531:
                        goto LABEL_585;
                      case 65532:
                        goto LABEL_700;
                      case 65533:
                        goto LABEL_815;
                      default:
                        goto LABEL_2018;
                    }
                }
              }
              v174 = CFSTR("UltrasonicOccupiedToUnoccupiedDelay");
              break;
          }
        }
LABEL_2017:

        v4 = (__CFString *)v174;
LABEL_2018:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v179 = objc_claimAutoreleasedReturnValue();

        v4 = (__CFString *)v179;
LABEL_2019:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1837;
          case 1:
            goto LABEL_1372;
          case 2:
            goto LABEL_1657;
          case 3:
            goto LABEL_1769;
          case 4:
            goto LABEL_2020;
          case 5:
            goto LABEL_2022;
          case 6:
            goto LABEL_2023;
          case 7:
            goto LABEL_2024;
          case 8:
            goto LABEL_2025;
          case 9:
            goto LABEL_2026;
          case 10:
            goto LABEL_2027;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_241;
              case 65529:
                goto LABEL_356;
              case 65530:
                goto LABEL_471;
              case 65531:
                goto LABEL_586;
              case 65532:
                goto LABEL_701;
              case 65533:
                goto LABEL_816;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v180 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v180;
                goto LABEL_2029;
            }
        }
      case 1036:
        goto LABEL_2005;
      case 1037:
        goto LABEL_2019;
      case 1043:
LABEL_2029:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1838;
          case 1:
            goto LABEL_1373;
          case 2:
            goto LABEL_1658;
          case 3:
            goto LABEL_1770;
          case 4:
            goto LABEL_2030;
          case 5:
            goto LABEL_2039;
          case 6:
            goto LABEL_2040;
          case 7:
            goto LABEL_2041;
          case 8:
            goto LABEL_2042;
          case 9:
            goto LABEL_2043;
          case 10:
            goto LABEL_2044;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_242;
              case 65529:
                goto LABEL_357;
              case 65530:
                goto LABEL_472;
              case 65531:
                goto LABEL_587;
              case 65532:
                goto LABEL_702;
              case 65533:
                goto LABEL_817;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v181 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v181;
                goto LABEL_2046;
            }
        }
      case 1045:
LABEL_2046:
        switch((int)a2)
        {
          case 0:
            goto LABEL_1839;
          case 1:
            goto LABEL_1374;
          case 2:
            goto LABEL_1659;
          case 3:
            goto LABEL_1771;
          case 4:
            goto LABEL_2031;
          case 5:
            goto LABEL_2047;
          case 6:
            goto LABEL_2055;
          case 7:
            goto LABEL_2062;
          case 8:
            goto LABEL_2069;
          case 9:
            goto LABEL_2076;
          case 10:
            goto LABEL_2083;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_243;
              case 65529:
                goto LABEL_358;
              case 65530:
                goto LABEL_473;
              case 65531:
                goto LABEL_588;
              case 65532:
                goto LABEL_703;
              case 65533:
                goto LABEL_818;
              default:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v182 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v182;
                goto LABEL_18;
            }
        }
      default:
        if ((_DWORD)a1 == 768)
          goto LABEL_1683;
        if ((_DWORD)a1 != 769)
          goto LABEL_847;
LABEL_34:
        if ((int)a2 > 31)
        {
          switch((int)a2)
          {
            case '0':
              goto LABEL_1739;
            case '1':
              goto LABEL_1741;
            case '2':
              goto LABEL_1743;
            case '3':
              goto LABEL_1745;
            case '4':
              goto LABEL_1747;
            case '5':
              v14 = CFSTR("LampBurnHoursTripPoint");
              goto LABEL_1748;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_233;
                case 65529:
                  goto LABEL_348;
                case 65530:
                  goto LABEL_463;
                case 65531:
                  goto LABEL_578;
                case 65532:
                  goto LABEL_693;
                case 65533:
                  goto LABEL_808;
                default:
                  if ((_DWORD)a2 != 32)
                    goto LABEL_1756;
                  goto LABEL_1729;
              }
          }
        }
        if ((int)a2 > 15)
        {
          v14 = CFSTR("MinLevel");
          switch((int)a2)
          {
            case 16:
              goto LABEL_1748;
            case 17:
              goto LABEL_1718;
            case 20:
              v14 = CFSTR("IntrinsicBallastFactor");
              goto LABEL_1748;
            case 21:
              goto LABEL_1722;
            default:
              goto LABEL_1756;
          }
        }
        if (!(_DWORD)a2)
          goto LABEL_1829;
        if ((_DWORD)a2 == 1)
          goto LABEL_1364;
        v17 = v4;
        if ((_DWORD)a2 != 2)
          goto LABEL_1756;
        goto LABEL_1649;
    }
  }
  if ((int)a1 > 335)
  {
    switch((int)a1)
    {
      case 512:
LABEL_1694:
        v142 = CFSTR("MaxConstFlow");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1190;
          case 1:
            goto LABEL_1359;
          case 2:
            goto LABEL_1644;
          case 3:
            goto LABEL_1669;
          case 4:
            goto LABEL_1673;
          case 5:
            goto LABEL_1678;
          case 6:

            v4 = CFSTR("MaxCompPressure");
LABEL_1696:

            v4 = CFSTR("AbsMaxCoolSetpointLimit");
LABEL_1795:
            v138 = CFSTR("SpeedCurrent");
            goto LABEL_1681;
          case 7:

            v4 = CFSTR("MinConstSpeed");
LABEL_1785:

            v4 = CFSTR("PICoolingDemand");
LABEL_1797:
            v138 = CFSTR("RockSupport");
            goto LABEL_1681;
          case 8:

            v4 = CFSTR("MaxConstSpeed");
LABEL_1787:

            v4 = CFSTR("PIHeatingDemand");
LABEL_1798:
            v138 = CFSTR("RockSetting");
            goto LABEL_1681;
          case 9:

            v4 = CFSTR("MinConstFlow");
LABEL_1789:

            v4 = CFSTR("HVACSystemTypeConfiguration");
LABEL_1799:
            v138 = CFSTR("WindSupport");
            goto LABEL_1681;
          case 10:
            goto LABEL_1792;
          case 11:
            v142 = CFSTR("MinConstTemp");
            goto LABEL_1792;
          case 12:
            v142 = CFSTR("MaxConstTemp");
LABEL_1792:

            v4 = (__CFString *)v142;
LABEL_1793:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v150 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v150;
            goto LABEL_1794;
          case 13:
          case 14:
          case 15:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
LABEL_1699:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v144 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v144;
            goto LABEL_20;
          case 16:

            v10 = CFSTR("LocalTemperatureCalibration");
            v4 = CFSTR("PumpStatus");
            goto LABEL_1819;
          case 17:

            v4 = CFSTR("EffectiveOperationMode");
LABEL_1802:
            v10 = CFSTR("OccupiedCoolingSetpoint");
            goto LABEL_1819;
          case 18:

            v4 = CFSTR("EffectiveControlMode");
LABEL_1804:
            v10 = CFSTR("OccupiedHeatingSetpoint");
            goto LABEL_1819;
          case 19:

            v4 = CFSTR("Capacity");
LABEL_1806:
            v10 = CFSTR("UnoccupiedCoolingSetpoint");
            goto LABEL_1819;
          case 20:

            v4 = CFSTR("Speed");
LABEL_1808:
            v10 = CFSTR("UnoccupiedHeatingSetpoint");
            goto LABEL_1819;
          case 21:

            v4 = CFSTR("LifetimeRunningHours");
LABEL_1810:
            v10 = CFSTR("MinHeatSetpointLimit");
            goto LABEL_1819;
          case 22:

            v4 = CFSTR("Power");
LABEL_1812:
            v10 = CFSTR("MaxHeatSetpointLimit");
            goto LABEL_1819;
          case 23:

            v4 = CFSTR("LifetimeEnergyConsumed");
LABEL_1814:
            v10 = CFSTR("MinCoolSetpointLimit");
            goto LABEL_1819;
          case 32:

            v4 = CFSTR("OperationMode");
LABEL_1816:
            v10 = CFSTR("StartOfWeek");
            goto LABEL_1819;
          case 33:

            v4 = CFSTR("ControlMode");
LABEL_1818:
            v10 = CFSTR("NumberOfWeeklyTransitions");
LABEL_1819:

            v4 = (__CFString *)v10;
LABEL_1820:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v151 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v151;
            break;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_228;
              case 65529:
                goto LABEL_343;
              case 65530:
                goto LABEL_458;
              case 65531:
                goto LABEL_573;
              case 65532:
                goto LABEL_688;
              case 65533:
                goto LABEL_803;
              default:
                goto LABEL_1699;
            }
        }
        goto LABEL_1821;
      case 513:
LABEL_20:
        v10 = CFSTR("LocalTemperatureCalibration");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1191;
          case 1:
            goto LABEL_1360;
          case 2:
            goto LABEL_1645;
          case 3:
            goto LABEL_1670;
          case 4:
            goto LABEL_1674;
          case 5:
            goto LABEL_1679;
          case 6:
            goto LABEL_1696;
          case 7:
            goto LABEL_1785;
          case 8:
            goto LABEL_1787;
          case 9:
            goto LABEL_1789;
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 29:
          case 31:
          case 38:
          case 39:
          case 40:
          case 42:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 51:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
            goto LABEL_1793;
          case 16:
            goto LABEL_1819;
          case 17:
            goto LABEL_1802;
          case 18:
            goto LABEL_1804;
          case 19:
            goto LABEL_1806;
          case 20:
            goto LABEL_1808;
          case 21:
            goto LABEL_1810;
          case 22:
            goto LABEL_1812;
          case 23:
            goto LABEL_1814;
          case 24:
            v10 = CFSTR("MaxCoolSetpointLimit");
            goto LABEL_1819;
          case 25:
            v10 = CFSTR("MinSetpointDeadBand");
            goto LABEL_1819;
          case 26:
            v10 = CFSTR("RemoteSensing");
            goto LABEL_1819;
          case 27:
            v10 = CFSTR("ControlSequenceOfOperation");
            goto LABEL_1819;
          case 28:
            v10 = CFSTR("SystemMode");
            goto LABEL_1819;
          case 30:
            v10 = CFSTR("ThermostatRunningMode");
            goto LABEL_1819;
          case 32:
            goto LABEL_1816;
          case 33:
            goto LABEL_1818;
          case 34:
            v10 = CFSTR("NumberOfDailyTransitions");
            goto LABEL_1819;
          case 35:
            v10 = CFSTR("TemperatureSetpointHold");
            goto LABEL_1819;
          case 36:
            v10 = CFSTR("TemperatureSetpointHoldDuration");
            goto LABEL_1819;
          case 37:
            v10 = CFSTR("ThermostatProgrammingOperationMode");
            goto LABEL_1819;
          case 41:
            v10 = CFSTR("ThermostatRunningState");
            goto LABEL_1819;
          case 48:
            v10 = CFSTR("SetpointChangeSource");
            goto LABEL_1819;
          case 49:
            v10 = CFSTR("SetpointChangeAmount");
            goto LABEL_1819;
          case 50:
            v10 = CFSTR("SetpointChangeSourceTimestamp");
            goto LABEL_1819;
          case 52:
            v10 = CFSTR("OccupiedSetback");
            goto LABEL_1819;
          case 53:
            v10 = CFSTR("OccupiedSetbackMin");
            goto LABEL_1819;
          case 54:
            v10 = CFSTR("OccupiedSetbackMax");
            goto LABEL_1819;
          case 55:
            v10 = CFSTR("UnoccupiedSetback");
            goto LABEL_1819;
          case 56:
            v10 = CFSTR("UnoccupiedSetbackMin");
            goto LABEL_1819;
          case 57:
            v10 = CFSTR("UnoccupiedSetbackMax");
            goto LABEL_1819;
          case 58:
            v10 = CFSTR("EmergencyHeatDelta");
            goto LABEL_1819;
          case 64:
            v10 = CFSTR("ACType");
            goto LABEL_1819;
          case 65:
            v10 = CFSTR("ACCapacity");
            goto LABEL_1819;
          case 66:
            v10 = CFSTR("ACRefrigerantType");
            goto LABEL_1819;
          case 67:
            v10 = CFSTR("ACCompressorType");
            goto LABEL_1819;
          case 68:
            v10 = CFSTR("ACErrorCode");
            goto LABEL_1819;
          case 69:
            v10 = CFSTR("ACLouverPosition");
            goto LABEL_1819;
          case 70:
            v10 = CFSTR("ACCoilTemperature");
            goto LABEL_1819;
          case 71:
            v10 = CFSTR("ACCapacityformat");
            goto LABEL_1819;
          case 72:
            v10 = CFSTR("PresetTypes");
            goto LABEL_1819;
          case 73:
            v10 = CFSTR("ScheduleTypes");
            goto LABEL_1819;
          case 74:
            v10 = CFSTR("NumberOfPresets");
            goto LABEL_1819;
          case 75:
            v10 = CFSTR("NumberOfSchedules");
            goto LABEL_1819;
          case 76:
            v10 = CFSTR("NumberOfScheduleTransitions");
            goto LABEL_1819;
          case 77:
            v10 = CFSTR("NumberOfScheduleTransitionPerDay");
            goto LABEL_1819;
          case 78:
            v10 = CFSTR("ActivePresetHandle");
            goto LABEL_1819;
          case 79:
            v10 = CFSTR("ActiveScheduleHandle");
            goto LABEL_1819;
          case 80:
            v10 = CFSTR("Presets");
            goto LABEL_1819;
          case 81:
            v10 = CFSTR("Schedules");
            goto LABEL_1819;
          case 82:
            v10 = CFSTR("PresetsSchedulesEditable");
            goto LABEL_1819;
          case 83:
            v10 = CFSTR("TemperatureSetpointHoldPolicy");
            goto LABEL_1819;
          case 84:
            v10 = CFSTR("SetpointHoldExpiryTimestamp");
            goto LABEL_1819;
          case 85:
            v10 = CFSTR("QueuedPreset");
            goto LABEL_1819;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_229;
              case 65529:
                goto LABEL_344;
              case 65530:
                goto LABEL_459;
              case 65531:
                goto LABEL_574;
              case 65532:
                goto LABEL_689;
              case 65533:
                goto LABEL_804;
              default:
                goto LABEL_1793;
            }
        }
      case 514:
LABEL_1794:
        v138 = CFSTR("PercentCurrent");
        switch((int)a2)
        {
          case 0:
            goto LABEL_1192;
          case 1:
            goto LABEL_1361;
          case 2:
            goto LABEL_1646;
          case 3:
            goto LABEL_1681;
          case 4:
            goto LABEL_1675;
          case 5:
            goto LABEL_1680;
          case 6:
            goto LABEL_1795;
          case 7:
            goto LABEL_1797;
          case 8:
            goto LABEL_1798;
          case 9:
            goto LABEL_1799;
          case 10:
            v138 = CFSTR("WindSetting");
            goto LABEL_1681;
          case 11:
            v138 = CFSTR("AirflowDirection");
            goto LABEL_1681;
          default:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_230;
              case 65529:
                goto LABEL_345;
              case 65530:
                goto LABEL_460;
              case 65531:
                goto LABEL_575;
              case 65532:
                goto LABEL_690;
              case 65533:
                goto LABEL_805;
              default:
                goto LABEL_1820;
            }
        }
      case 515:
        goto LABEL_847;
      case 516:
LABEL_1821:
        if ((int)a2 > 65527)
        {
          switch((int)a2)
          {
            case 65528:
              goto LABEL_231;
            case 65529:
              goto LABEL_346;
            case 65530:
              goto LABEL_461;
            case 65531:
              goto LABEL_576;
            case 65532:
              goto LABEL_691;
            case 65533:
              goto LABEL_806;
            default:
              goto LABEL_1682;
          }
        }
        if ((_DWORD)a2)
        {
          if ((_DWORD)a2 == 1)
          {
LABEL_1362:

            v4 = CFSTR("KeypadLockout");
LABEL_1363:

            v4 = CFSTR("CurrentSaturation");
LABEL_1364:

            v4 = CFSTR("PhysicalMaxLevel");
LABEL_1365:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1366:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1367:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1368:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1369:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1370:

            v4 = CFSTR("OccupancySensorType");
LABEL_1371:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1372:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1373:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1374:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1375:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1376:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1377:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1378:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1379:

            v4 = CFSTR("MinMeasuredValue");
LABEL_1380:

            v11 = CFSTR("MinMeasuredValue");
LABEL_1381:

            v12 = CFSTR("SSID");
LABEL_1382:

            v4 = CFSTR("BorderAgentID");
            goto LABEL_1383;
          }
          v137 = v4;
          if ((_DWORD)a2 != 2)
          {
LABEL_1682:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v139 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v139;
LABEL_1683:
            v140 = CFSTR("CurrentX");
            switch((int)a2)
            {
              case 0:
                goto LABEL_1828;
              case 1:
                goto LABEL_1363;
              case 2:
                goto LABEL_1648;
              case 3:
                goto LABEL_1755;
              case 4:
                v140 = CFSTR("CurrentY");
                goto LABEL_1755;
              case 5:
                v140 = CFSTR("DriftCompensation");
                goto LABEL_1755;
              case 6:
                v140 = CFSTR("CompensationText");
                goto LABEL_1755;
              case 7:
                v140 = CFSTR("ColorTemperatureMireds");
                goto LABEL_1755;
              case 8:
                v140 = CFSTR("ColorMode");
                goto LABEL_1755;
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 20:
              case 24:
              case 28:
              case 29:
              case 30:
              case 31:
              case 35:
              case 39:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 53:
              case 57:
LABEL_1698:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v143 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v143;
                goto LABEL_34;
              case 15:
                v140 = CFSTR("Options");
                goto LABEL_1755;
              case 16:

                v14 = CFSTR("MinLevel");
                v4 = CFSTR("NumberOfPrimaries");
                goto LABEL_1748;
              case 17:

                v4 = CFSTR("Primary1X");
LABEL_1718:
                v14 = CFSTR("MaxLevel");
                goto LABEL_1748;
              case 18:
                v140 = CFSTR("Primary1Y");
                goto LABEL_1755;
              case 19:
                v140 = CFSTR("Primary1Intensity");
                goto LABEL_1755;
              case 21:

                v4 = CFSTR("Primary2X");
LABEL_1722:
                v14 = CFSTR("BallastFactorAdjustment");
                goto LABEL_1748;
              case 22:
                v140 = CFSTR("Primary2Y");
                goto LABEL_1755;
              case 23:
                v140 = CFSTR("Primary2Intensity");
                goto LABEL_1755;
              case 25:
                v140 = CFSTR("Primary3X");
                goto LABEL_1755;
              case 26:
                v140 = CFSTR("Primary3Y");
                goto LABEL_1755;
              case 27:
                v140 = CFSTR("Primary3Intensity");
                goto LABEL_1755;
              case 32:

                v4 = CFSTR("Primary4X");
LABEL_1729:
                v14 = CFSTR("LampQuantity");
                goto LABEL_1748;
              case 33:
                v140 = CFSTR("Primary4Y");
                goto LABEL_1755;
              case 34:
                v140 = CFSTR("Primary4Intensity");
                goto LABEL_1755;
              case 36:
                v140 = CFSTR("Primary5X");
                goto LABEL_1755;
              case 37:
                v140 = CFSTR("Primary5Y");
                goto LABEL_1755;
              case 38:
                v140 = CFSTR("Primary5Intensity");
                goto LABEL_1755;
              case 40:
                v140 = CFSTR("Primary6X");
                goto LABEL_1755;
              case 41:
                v140 = CFSTR("Primary6Y");
                goto LABEL_1755;
              case 42:
                v140 = CFSTR("Primary6Intensity");
                goto LABEL_1755;
              case 48:

                v4 = CFSTR("WhitePointX");
LABEL_1739:
                v14 = CFSTR("LampType");
                goto LABEL_1748;
              case 49:

                v4 = CFSTR("WhitePointY");
LABEL_1741:
                v14 = CFSTR("LampManufacturer");
                goto LABEL_1748;
              case 50:

                v4 = CFSTR("ColorPointRX");
LABEL_1743:
                v14 = CFSTR("LampRatedHours");
                goto LABEL_1748;
              case 51:

                v4 = CFSTR("ColorPointRY");
LABEL_1745:
                v14 = CFSTR("LampBurnHours");
                goto LABEL_1748;
              case 52:

                v4 = CFSTR("ColorPointRIntensity");
LABEL_1747:
                v14 = CFSTR("LampAlarmMode");
LABEL_1748:

                v4 = (__CFString *)v14;
LABEL_1760:
                objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                v146 = objc_claimAutoreleasedReturnValue();

                v4 = (__CFString *)v146;
                goto LABEL_1761;
              case 54:
                v140 = CFSTR("ColorPointGX");
                goto LABEL_1755;
              case 55:
                v140 = CFSTR("ColorPointGY");
                goto LABEL_1755;
              case 56:
                v140 = CFSTR("ColorPointGIntensity");
                goto LABEL_1755;
              case 58:
                v140 = CFSTR("ColorPointBX");
                goto LABEL_1755;
              case 59:
                v140 = CFSTR("ColorPointBY");
                goto LABEL_1755;
              case 60:
                v140 = CFSTR("ColorPointBIntensity");
LABEL_1755:

                v4 = (__CFString *)v140;
                break;
              default:
                switch((int)a2)
                {
                  case 16384:
                    v140 = CFSTR("EnhancedCurrentHue");
                    goto LABEL_1755;
                  case 16385:
                    v140 = CFSTR("EnhancedColorMode");
                    goto LABEL_1755;
                  case 16386:
                    v140 = CFSTR("ColorLoopActive");
                    goto LABEL_1755;
                  case 16387:
                    v140 = CFSTR("ColorLoopDirection");
                    goto LABEL_1755;
                  case 16388:
                    v140 = CFSTR("ColorLoopTime");
                    goto LABEL_1755;
                  case 16389:
                    v140 = CFSTR("ColorLoopStartEnhancedHue");
                    goto LABEL_1755;
                  case 16390:
                    v140 = CFSTR("ColorLoopStoredEnhancedHue");
                    goto LABEL_1755;
                  case 16391:
                  case 16392:
                  case 16393:
                  case 16398:
                  case 16399:
                    goto LABEL_1698;
                  case 16394:
                    v140 = CFSTR("ColorCapabilities");
                    goto LABEL_1755;
                  case 16395:
                    v140 = CFSTR("ColorTempPhysicalMinMireds");
                    goto LABEL_1755;
                  case 16396:
                    v140 = CFSTR("ColorTempPhysicalMaxMireds");
                    goto LABEL_1755;
                  case 16397:
                    v140 = CFSTR("CoupleColorTempToLevelMinMireds");
                    goto LABEL_1755;
                  case 16400:
                    v140 = CFSTR("StartUpColorTemperatureMireds");
                    goto LABEL_1755;
                  default:
                    switch((int)a2)
                    {
                      case 65528:
                        goto LABEL_232;
                      case 65529:
                        goto LABEL_347;
                      case 65530:
                        goto LABEL_462;
                      case 65531:
                        goto LABEL_577;
                      case 65532:
                        goto LABEL_692;
                      case 65533:
                        goto LABEL_807;
                      default:
                        goto LABEL_1698;
                    }
                }
            }
LABEL_1756:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v145 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v145;
LABEL_1757:
            switch((int)a2)
            {
              case 65528:
                goto LABEL_234;
              case 65529:
                goto LABEL_349;
              case 65530:
                goto LABEL_464;
              case 65531:
                goto LABEL_579;
              case 65532:
                goto LABEL_694;
              case 65533:
                goto LABEL_809;
              default:
                switch((int)a2)
                {
                  case 0:
                    goto LABEL_1830;
                  case 1:
                    goto LABEL_1365;
                  case 2:
                    goto LABEL_1650;
                  case 3:

                    v4 = CFSTR("Tolerance");
LABEL_1763:

                    v4 = CFSTR("Tolerance");
LABEL_1764:

                    v4 = CFSTR("Tolerance");
LABEL_1765:

                    v4 = CFSTR("Tolerance");
LABEL_1766:

                    v4 = CFSTR("Tolerance");
LABEL_1767:

                    v4 = CFSTR("HoldTime");
LABEL_1768:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1769:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1770:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1771:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1772:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1773:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1774:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1775:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1776:

                    v4 = CFSTR("PeakMeasuredValue");
LABEL_1777:
                    v59 = CFSTR("PeakMeasuredValue");
                    goto LABEL_1845;
                  case 4:

                    v4 = CFSTR("LightSensorType");
LABEL_1779:
                    objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
                    v147 = objc_claimAutoreleasedReturnValue();

                    v4 = (__CFString *)v147;
                    goto LABEL_1780;
                  default:
                    goto LABEL_1760;
                }
            }
          }
LABEL_1647:

          v4 = CFSTR("ScheduleProgrammingVisibility");
LABEL_1648:

          v17 = CFSTR("RemainingTime");
LABEL_1649:

          v4 = CFSTR("BallastStatus");
LABEL_1650:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1651:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1652:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1653:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1654:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1655:

          v4 = CFSTR("OccupancySensorTypeBitmap");
LABEL_1656:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1657:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1658:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1659:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1660:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1661:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1662:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1663:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1664:

          v4 = CFSTR("MaxMeasuredValue");
LABEL_1665:
          v59 = CFSTR("MaxMeasuredValue");
        }
        else
        {
LABEL_1827:

          v4 = CFSTR("TemperatureDisplayMode");
LABEL_1828:

          v4 = CFSTR("CurrentHue");
LABEL_1829:

          v4 = CFSTR("PhysicalMinLevel");
LABEL_1830:

          v4 = CFSTR("MeasuredValue");
LABEL_1831:

          v4 = CFSTR("MeasuredValue");
LABEL_1832:

          v4 = CFSTR("MeasuredValue");
LABEL_1833:

          v4 = CFSTR("MeasuredValue");
LABEL_1834:

          v4 = CFSTR("MeasuredValue");
LABEL_1835:

          v4 = CFSTR("Occupancy");
LABEL_1836:

          v4 = CFSTR("MeasuredValue");
LABEL_1837:

          v4 = CFSTR("MeasuredValue");
LABEL_1838:

          v4 = CFSTR("MeasuredValue");
LABEL_1839:

          v4 = CFSTR("MeasuredValue");
LABEL_1840:

          v4 = CFSTR("MeasuredValue");
LABEL_1841:

          v4 = CFSTR("MeasuredValue");
LABEL_1842:

          v4 = CFSTR("MeasuredValue");
LABEL_1843:

          v4 = CFSTR("MeasuredValue");
LABEL_1844:

          v59 = CFSTR("MeasuredValue");
          v4 = CFSTR("MeasuredValue");
        }
LABEL_1845:

        v16 = (__CFString *)v59;
LABEL_1846:
        objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
        v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

        break;
      default:
        if ((_DWORD)a1 != 336)
          goto LABEL_847;
        goto LABEL_1188;
    }
LABEL_1847:
    switch((int)a2)
    {
      case 65528:
        goto LABEL_251;
      case 65529:
        goto LABEL_366;
      case 65530:
        goto LABEL_481;
      case 65531:
        goto LABEL_596;
      case 65532:
        goto LABEL_711;
      case 65533:
        goto LABEL_826;
      default:
        v4 = CFSTR("InterfaceEnabled");
        switch((int)a2)
        {
          case 0:

            v4 = CFSTR("BorderRouterName");
            goto LABEL_1850;
          case 1:
            goto LABEL_1382;
          case 2:

            v154 = CFSTR("ThreadVersion");
            goto LABEL_1855;
          case 3:
            goto LABEL_1857;
          case 4:
            v4 = CFSTR("ActiveDatasetTimestamp");
LABEL_1857:

            goto LABEL_1858;
          default:
            objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
            v153 = objc_claimAutoreleasedReturnValue();

            v4 = (__CFString *)v153;
            goto LABEL_1852;
        }
    }
  }
  switch((_DWORD)a1)
  {
    case 0x101:
LABEL_1551:
      v130 = CFSTR("NumberOfWeekDaySchedulesSupportedPerUser");
      switch((int)a2)
      {
        case 0:
          goto LABEL_1183;
        case 1:
          goto LABEL_1355;
        case 2:
          goto LABEL_1545;
        case 3:
          goto LABEL_1548;
        case 4:

          v4 = CFSTR("DoorOpenEvents");
LABEL_1567:

          v4 = CFSTR("CurrentPositionTilt");
LABEL_1671:

          v4 = CFSTR("BarrierOpenEvents");
LABEL_1672:

          v4 = CFSTR("EstimatedEndTime");
LABEL_1673:

          v4 = CFSTR("MaxConstPressure");
LABEL_1674:

          v4 = CFSTR("AbsMaxHeatSetpointLimit");
LABEL_1675:
          v138 = CFSTR("SpeedMax");
          goto LABEL_1681;
        case 5:

          v4 = CFSTR("DoorClosedEvents");
LABEL_1595:

          v4 = CFSTR("NumberOfActuationsLift");
LABEL_1676:

          v4 = CFSTR("BarrierCloseEvents");
LABEL_1677:

          v4 = CFSTR("Progress");
LABEL_1678:

          v4 = CFSTR("MinCompPressure");
LABEL_1679:

          v4 = CFSTR("AbsMinCoolSetpointLimit");
LABEL_1680:
          v138 = CFSTR("SpeedSetting");
          goto LABEL_1681;
        case 6:

          v4 = CFSTR("OpenPeriod");
LABEL_1597:

          v135 = CFSTR("BarrierCommandOpenEvents");
          v4 = CFSTR("NumberOfActuationsTilt");
LABEL_1692:

          v4 = (__CFString *)v135;
LABEL_1693:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v141 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v141;
          goto LABEL_1694;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 29:
        case 30:
        case 31:
        case 32:
        case 45:
        case 46:
        case 47:
        case 52:
LABEL_1565:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v133 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v133;
          goto LABEL_1566;
        case 17:

          v4 = CFSTR("NumberOfTotalUsersSupported");
LABEL_1599:
          v73 = CFSTR("InstalledClosedLimitLift");
          goto LABEL_1184;
        case 18:

          v4 = CFSTR("NumberOfPINUsersSupported");
LABEL_1601:
          v73 = CFSTR("InstalledOpenLimitTilt");
          goto LABEL_1184;
        case 19:

          v4 = CFSTR("NumberOfRFIDUsersSupported");
LABEL_1603:
          v73 = CFSTR("InstalledClosedLimitTilt");
          goto LABEL_1184;
        case 20:
          goto LABEL_1639;
        case 21:
          v130 = CFSTR("NumberOfYearDaySchedulesSupportedPerUser");
          goto LABEL_1639;
        case 22:
          v130 = CFSTR("NumberOfHolidaySchedulesSupported");
          goto LABEL_1639;
        case 23:

          v4 = CFSTR("MaxPINCodeLength");
LABEL_1607:
          v73 = CFSTR("Mode");
          goto LABEL_1184;
        case 24:
          v130 = CFSTR("MinPINCodeLength");
          goto LABEL_1639;
        case 25:
          v130 = CFSTR("MaxRFIDCodeLength");
          goto LABEL_1639;
        case 26:

          v4 = CFSTR("MinRFIDCodeLength");
LABEL_1611:
          v73 = CFSTR("SafetyStatus");
          goto LABEL_1184;
        case 27:
          v130 = CFSTR("CredentialRulesSupport");
          goto LABEL_1639;
        case 28:
          v130 = CFSTR("NumberOfCredentialsSupportedPerUser");
          goto LABEL_1639;
        case 33:
          v130 = CFSTR("Language");
          goto LABEL_1639;
        case 34:
          v130 = CFSTR("LEDSettings");
          goto LABEL_1639;
        case 35:
          v130 = CFSTR("AutoRelockTime");
          goto LABEL_1639;
        case 36:
          v130 = CFSTR("SoundVolume");
          goto LABEL_1639;
        case 37:
          v130 = CFSTR("OperatingMode");
          goto LABEL_1639;
        case 38:
          v130 = CFSTR("SupportedOperatingModes");
          goto LABEL_1639;
        case 39:
          v130 = CFSTR("DefaultConfigurationRegister");
          goto LABEL_1639;
        case 40:
          v130 = CFSTR("EnableLocalProgramming");
          goto LABEL_1639;
        case 41:
          v130 = CFSTR("EnableOneTouchLocking");
          goto LABEL_1639;
        case 42:
          v130 = CFSTR("EnableInsideStatusLED");
          goto LABEL_1639;
        case 43:
          v130 = CFSTR("EnablePrivacyModeButton");
          goto LABEL_1639;
        case 44:
          v130 = CFSTR("LocalProgrammingFeatures");
          goto LABEL_1639;
        case 48:
          v130 = CFSTR("WrongCodeEntryLimit");
          goto LABEL_1639;
        case 49:
          v130 = CFSTR("UserCodeTemporaryDisableTime");
          goto LABEL_1639;
        case 50:
          v130 = CFSTR("SendPINOverTheAir");
          goto LABEL_1639;
        case 51:
          v130 = CFSTR("RequirePINforRemoteOperation");
          goto LABEL_1639;
        case 53:
          v130 = CFSTR("ExpiringUserTimeout");
          goto LABEL_1639;
        default:
          switch((int)a2)
          {
            case 128:
              v130 = CFSTR("AliroReaderVerificationKey");
              break;
            case 129:
              v130 = CFSTR("AliroReaderGroupIdentifier");
              break;
            case 130:
              v130 = CFSTR("AliroReaderGroupSubIdentifier");
              break;
            case 131:
              v130 = CFSTR("AliroExpeditedTransactionSupportedProtocolVersions");
              break;
            case 132:
              v130 = CFSTR("AliroGroupResolvingKey");
              break;
            case 133:
              v130 = CFSTR("AliroSupportedBLEUWBProtocolVersions");
              break;
            case 134:
              v130 = CFSTR("AliroBLEAdvertisingVersion");
              break;
            case 135:
              v130 = CFSTR("NumberOfAliroCredentialIssuerKeysSupported");
              break;
            case 136:
              v130 = CFSTR("NumberOfAliroEndpointKeysSupported");
              break;
            default:
              switch((int)a2)
              {
                case 65528:
                  goto LABEL_224;
                case 65529:
                  goto LABEL_339;
                case 65530:
                  goto LABEL_454;
                case 65531:
                  goto LABEL_569;
                case 65532:
                  goto LABEL_684;
                case 65533:
                  goto LABEL_799;
                default:
                  goto LABEL_1565;
              }
          }
LABEL_1639:

          v4 = (__CFString *)v130;
LABEL_1640:
          objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown attributeID %d>"), a2);
          v136 = objc_claimAutoreleasedReturnValue();

          v4 = (__CFString *)v136;
          break;
      }
      goto LABEL_1641;
    case 0x102:
LABEL_1566:
      v73 = CFSTR("Type");
      switch((int)a2)
      {
        case 0:
          goto LABEL_1184;
        case 1:
          goto LABEL_1356;
        case 2:
          goto LABEL_1546;
        case 3:
          goto LABEL_1549;
        case 4:
          goto LABEL_1567;
        case 5:
          goto LABEL_1595;
        case 6:
          goto LABEL_1597;
        case 7:

          v4 = CFSTR("ConfigStatus");
LABEL_1688:
          v135 = CFSTR("BarrierCommandCloseEvents");
          goto LABEL_1692;
        case 8:

          v4 = CFSTR("CurrentPositionLiftPercentage");
LABEL_1689:
          v135 = CFSTR("BarrierOpenPeriod");
          goto LABEL_1692;
        case 9:

          v4 = CFSTR("CurrentPositionTiltPercentage");
LABEL_1690:
          v135 = CFSTR("BarrierClosePeriod");
          goto LABEL_1692;
        case 10:

          v4 = CFSTR("OperationalStatus");
LABEL_1691:
          v135 = CFSTR("BarrierPosition");
          goto LABEL_1692;
        case 11:
          v73 = CFSTR("TargetPositionLiftPercent100ths");
          goto LABEL_1184;
        case 12:
          v73 = CFSTR("TargetPositionTiltPercent100ths");
          goto LABEL_1184;
        case 13:
          v73 = CFSTR("EndProductType");
          goto LABEL_1184;
        case 14:
          v73 = CFSTR("CurrentPositionLiftPercent100ths");
          goto LABEL_1184;
        case 15:
          v73 = CFSTR("CurrentPositionTiltPercent100ths");
          goto LABEL_1184;
        case 16:
          v73 = CFSTR("InstalledOpenLimitLift");
          goto LABEL_1184;
        case 17:
          goto LABEL_1599;
        case 18:
          goto LABEL_1601;
        case 19:
          goto LABEL_1603;
        case 20:
        case 21:
        case 22:
        case 24:
        case 25:
          goto LABEL_1640;
        case 23:
          goto LABEL_1607;
        case 26:
          goto LABEL_1611;
        default:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_225;
            case 65529:
              goto LABEL_340;
            case 65530:
              goto LABEL_455;
            case 65531:
              goto LABEL_570;
            case 65532:
              goto LABEL_685;
            case 65533:
              goto LABEL_800;
            default:
              goto LABEL_1640;
          }
      }
    case 0x103:
LABEL_1641:
      v135 = CFSTR("BarrierCommandOpenEvents");
      switch((int)a2)
      {
        case 1:
          goto LABEL_1357;
        case 2:
          goto LABEL_1642;
        case 3:
          goto LABEL_1667;
        case 4:
          goto LABEL_1671;
        case 5:
          goto LABEL_1676;
        case 6:
          goto LABEL_1692;
        case 7:
          goto LABEL_1688;
        case 8:
          goto LABEL_1689;
        case 9:
          goto LABEL_1690;
        case 10:
          goto LABEL_1691;
        default:
          switch((int)a2)
          {
            case 65528:
              goto LABEL_226;
            case 65529:
              goto LABEL_341;
            case 65530:
              goto LABEL_456;
            case 65531:
              goto LABEL_571;
            case 65532:
              goto LABEL_686;
            case 65533:
              goto LABEL_801;
            default:
              goto LABEL_1185;
          }
      }
  }
LABEL_847:
  objc_msgSend_stringWithFormat_(MEMORY[0x24BDD17C8], a2, (uint64_t)CFSTR("<Unknown clusterID %d>"), a1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = v28;
  return v29;
}

void sub_233C01188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C01198(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  const char *v7;
  uint64_t v8;
  __SecKey *v9;
  NSObject *v10;
  uint8_t v11[16];

  v6 = a2;
  if ((objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_storeStrong((id *)(a1 + 608), a2);
    v9 = (__SecKey *)objc_msgSend_publicKey(*(void **)(a1 + 608), v7, v8);
    sub_233C01A50(v9, a1 + 616, a3);
  }
  else
  {
    sub_234117B80(0, "NotSpecified");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Keypair does not support message signing", v11, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRP256KeypairBridge.mm";
    *(_DWORD *)(a3 + 16) = 35;
  }

}

void sub_233C012AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C012C0(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __SecKey *v6;

  v6 = (__SecKey *)objc_msgSend_publicKey(*(void **)(a1 + 608), a2, a3);
  sub_233C01A50(v6, a1 + 616, a4);
}

uint64_t sub_233C012F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_QWORD *)(result + 608))
    v2 = 0;
  else
    v2 = 3;
  if (*(_QWORD *)(result + 608))
    v3 = 49;
  else
    v3 = 45;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_233C01324@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_QWORD *)(result + 608))
    v2 = 108;
  else
    v2 = 3;
  if (*(_QWORD *)(result + 608))
    v3 = 58;
  else
    v3 = 55;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_233C0135C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_QWORD *)(result + 608))
    v2 = 108;
  else
    v2 = 3;
  if (*(_QWORD *)(result + 608))
    v3 = 67;
  else
    v3 = 64;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_233C01394@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_QWORD *)(result + 608))
    v2 = 108;
  else
    v2 = 3;
  if (*(_QWORD *)(result + 608))
    v3 = 76;
  else
    v3 = 73;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void sub_233C013CC(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  const char *v9;
  char v10;
  void *v11;
  void *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  const void *v38;
  const char *v39;
  uint64_t v40;
  size_t v41;
  NSObject *v42;
  int v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  uint64_t v47[2];
  __n128 v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __int128 v52;
  __n128 v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint8_t v57[4];
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint8_t buf[24];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 608))
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], a2, (uint64_t)a2, a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_opt_respondsToSelector();
    v11 = *(void **)(a1 + 608);
    if ((v10 & 1) != 0)
    {
      objc_msgSend_signMessageECDSA_DER_(v11, v9, (uint64_t)v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
      {
        sub_234117B80(0, "NotSpecified");
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v57 = 0;
          _os_log_impl(&dword_233BF3000, v42, OS_LOG_TYPE_ERROR, "ECDSA sign msg failure: no signature returned", v57, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        *(_DWORD *)a5 = 172;
        *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRP256KeypairBridge.mm";
        v43 = 91;
        goto LABEL_35;
      }
      v55 = v57;
      v56 = 64;
      v53 = 0uLL;
      v54 = 0;
      v13 = objc_retainAutorelease(v12);
      v16 = objc_msgSend_bytes(v13, v14, v15);
      v19 = objc_msgSend_length(v13, v17, v18);
      sub_233BF7114(buf, v16, v19);

      v52 = *(_OWORD *)buf;
      sub_2341343A4(32, &v52, (uint64_t *)&v55, &v53);
      if (v53.n128_u32[0])
      {
        sub_234117B80(0, "NotSpecified");
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v50 = v53;
          v51 = v54;
          v21 = sub_2341083CC((const char **)&v50, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Converting ASN.1 DER signature to raw form failed: %s", buf, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v48 = v53;
          v49 = v54;
          sub_2341083CC((const char **)&v48, 1);
          sub_2341147D0(0, 1);
        }
        *(__n128 *)a5 = v53;
        *(_QWORD *)(a5 + 16) = v54;

        goto LABEL_36;
      }
      sub_233BF7114(v47, (uint64_t)v55, v56);
      objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v45, v47[0], v47[1]);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v25)
      {
        sub_234117B80(0, "NotSpecified");
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v46, OS_LOG_TYPE_ERROR, "Failed to create NSData for raw signature", buf, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        *(_DWORD *)a5 = 172;
        *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRP256KeypairBridge.mm";
        v43 = 106;
LABEL_35:
        *(_DWORD *)(a5 + 16) = v43;
LABEL_36:

        return;
      }
    }
    else
    {
      objc_msgSend_signMessageECDSA_RAW_(v11, v9, (uint64_t)v8);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v25)
      {
        sub_234117B80(0, "NotSpecified");
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v57 = 0;
          _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "ECDSA sign msg failure: no signature returned", v57, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        *(_DWORD *)a5 = 172;
        *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRP256KeypairBridge.mm";
        v43 = 112;
        goto LABEL_35;
      }
    }
    if ((unint64_t)objc_msgSend_length(v25, v23, v24) < 0x41)
    {
      v34 = objc_msgSend_length(v25, v26, v27);
      if (v34 <= 0x40)
        a4[8] = v34;
      v35 = objc_retainAutorelease(v25);
      v38 = (const void *)objc_msgSend_bytes(v35, v36, v37);
      v41 = objc_msgSend_length(v35, v39, v40);
      memcpy(a4, v38, v41);
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRP256KeypairBridge.mm";
      *(_DWORD *)(a5 + 16) = 122;

    }
    else
    {
      sub_234117B80(0, "NotSpecified");
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v31 = objc_msgSend_length(v25, v29, v30);
        *(_DWORD *)v57 = 134218240;
        v58 = v31;
        v59 = 2048;
        v60 = 64;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "ECDSA sign msg failure: unexpected signature size %llu vs %llu", v57, 0x16u);
      }

      if (sub_234114844(1u))
      {
        objc_msgSend_length(v25, v32, v33);
        sub_2341147D0(0, 1);
      }
      *(_DWORD *)a5 = 11;
      *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRP256KeypairBridge.mm";
      *(_DWORD *)(a5 + 16) = 118;

    }
    goto LABEL_36;
  }
  sub_234117B80(0, "NotSpecified");
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v57 = 0;
    _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "ECDSA sign msg failure: no keypair to sign with.", v57, 2u);
  }

  if (sub_234114844(1u))
    sub_2341147D0(0, 1);
  *(_DWORD *)a5 = 3;
  *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a5 + 16) = 83;
}

void sub_233C01990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233C01A18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (*(_QWORD *)(result + 608))
    v2 = 108;
  else
    v2 = 3;
  if (*(_QWORD *)(result + 608))
    v3 = 132;
  else
    v3 = 129;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RP256KeypairBridge.mm";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void sub_233C01A50(__SecKey *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CFDataRef v5;
  const char *v6;
  uint64_t v7;
  CFDataRef v8;
  const __CFData *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _OWORD *v21;
  uint8_t v22[16];
  uint8_t v23[16];
  uint8_t buf[16];

  if (a1)
  {
    v5 = SecKeyCopyExternalRepresentation(a1, 0);
    v8 = v5;
    if (v5)
    {
      if (objc_msgSend_length(v5, v6, v7) == 65)
      {
        v9 = objc_retainAutorelease(v8);
        v12 = objc_msgSend_bytes(v9, v10, v11);
        sub_233C01D28(&v21, v12);
        v13 = v21;
        *(_OWORD *)(a2 + 8) = *v21;
        v15 = v13[2];
        v14 = v13[3];
        v16 = *((_BYTE *)v13 + 64);
        *(_OWORD *)(a2 + 24) = v13[1];
        *(_BYTE *)(a2 + 72) = v16;
        *(_OWORD *)(a2 + 56) = v14;
        *(_OWORD *)(a2 + 40) = v15;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRP256KeypairBridge.mm";
        v17 = 156;
      }
      else
      {
        sub_234117B80(0, "NotSpecified");
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Unexpected publicKey length, cannot initialize publicKey", v22, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        *(_DWORD *)a3 = 172;
        *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRP256KeypairBridge.mm";
        v17 = 151;
      }
    }
    else
    {
      sub_234117B80(0, "NotSpecified");
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "Unable to copy external representation for publicKey ref, cannot initialize publicKey", v23, 2u);
      }

      if (sub_234114844(1u))
        sub_2341147D0(0, 1);
      *(_DWORD *)a3 = 172;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRP256KeypairBridge.mm";
      v17 = 147;
    }
    *(_DWORD *)(a3 + 16) = v17;

  }
  else
  {
    sub_234117B80(0, "NotSpecified");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "Unable to initialize Pubkey", buf, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRP256KeypairBridge.mm";
    *(_DWORD *)(a3 + 16) = 141;
  }
}

void sub_233C01CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233C01CBC(uint64_t a1)
{

  return sub_23413AE04(a1);
}

void sub_233C01CE4(uint64_t a1)
{

  sub_23413AE04(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233C01D20(uint64_t a1)
{
  return a1 + 616;
}

_QWORD *sub_233C01D28(_QWORD *result, uint64_t a2)
{
  *result = a2;
  if (!a2)
    sub_234254D84();
  return result;
}

BOOL sub_233C01D44()
{
  return sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/ServerEndpoint/MTRIMDispatch.mm", 36);
}

uint64_t sub_233C01D54()
{
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/ServerEndpoint/MTRIMDispatch.mm", 45);
  return 134;
}

uint64_t sub_233C01D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  _DWORD v10[6];
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 4)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    sub_233D01BD0((uint64_t)&v11, a2, (uint64_t)v10);
    result = 0;
    v9 = v10[0];
    if (!v10[0])
    {
      result = sub_233C051D4(a3, (unsigned __int16 *)a1, (uint64_t)&v11);
      goto LABEL_10;
    }
  }
  else if (v6 == 2)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    sub_233D01890((uint64_t)&v11, a2, (uint64_t)v10);
    result = 0;
    v9 = v10[0];
    if (!v10[0])
    {
      result = sub_233C04DA0(a3, (unsigned __int16 *)a1, (uint64_t)&v11);
LABEL_10:
      if ((result & 1) != 0)
        return result;
      goto LABEL_11;
    }
  }
  else
  {
    if (v6)
      goto LABEL_11;
    v11 = 0;
    sub_234104468((uint64_t)&v12);
    v14 = 0;
    sub_234104498(v7, 0, 0);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    sub_233D01120((uint64_t)&v11, a2, (uint64_t)v10);
    result = 0;
    v9 = v10[0];
    if (!v10[0])
    {
      result = sub_233C054D0(a3, (unsigned __int16 *)a1, (unsigned __int16 *)&v11);
      goto LABEL_10;
    }
  }
  if (!v9)
    goto LABEL_10;
LABEL_11:
  LOWORD(v11) = 133;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a3 + 24))(a3, a1, &v11, 0);
}

void sub_233C021F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_233C02254(id a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  _DWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  objc_super v51;
  _BYTE v52[128];
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    v51.receiver = a1;
    v51.super_class = (Class)MTRServerCluster;
    v13 = objc_msgSendSuper2(&v51, sel_init);
    a1 = v13;
    if (v13)
    {
      v13[28] = 0;
      v16 = objc_msgSend_copy(v9, v14, v15);
      v17 = (void *)*((_QWORD *)a1 + 15);
      *((_QWORD *)a1 + 15) = v16;

      v20 = objc_msgSend_copy(v10, v18, v19);
      v21 = (void *)*((_QWORD *)a1 + 16);
      *((_QWORD *)a1 + 16) = v20;

      v22 = objc_alloc_init(MEMORY[0x24BDBCEF0]);
      v23 = (void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = v22;

      v24 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v25 = (void *)*((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v24;

      objc_msgSend_set(MEMORY[0x24BDBCF20], v26, v27);
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = (void *)*((_QWORD *)a1 + 10);
      *((_QWORD *)a1 + 10) = v28;

      *((_WORD *)a1 + 44) = -1;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v30 = v11;
      v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v47, v53, 16);
      if (v33)
      {
        v34 = *(_QWORD *)v48;
        do
        {
          v35 = 0;
          do
          {
            if (*(_QWORD *)v48 != v34)
              objc_enumerationMutation(v30);
            objc_msgSend_addAccessGrant_(a1, v32, *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * v35++));
          }
          while (v33 != v35);
          v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v47, v53, 16);
        }
        while (v33);
      }

      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v36 = v12;
      v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v43, v52, 16);
      if (v39)
      {
        v40 = *(_QWORD *)v44;
        do
        {
          v41 = 0;
          do
          {
            if (*(_QWORD *)v44 != v40)
              objc_enumerationMutation(v36);
            objc_msgSend_addAttribute_(a1, v38, *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * v41++), (_QWORD)v43);
          }
          while (v39 != v41);
          v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v38, (uint64_t)&v43, v52, 16);
        }
        while (v39);
      }

    }
  }

  return a1;
}

void sub_233C024DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233C0259C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C025AC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  id v6;
  const char *v7;
  _QWORD v8[5];
  id v9;

  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (WeakRetained)
    {
      v5 = (void *)objc_msgSend_copy(*(void **)(a1 + 8), v2, v3);
      v8[0] = MEMORY[0x24BDAC760];
      v8[1] = 3221225472;
      v8[2] = sub_233C02678;
      v8[3] = &unk_2504EE768;
      v8[4] = a1;
      v9 = v5;
      v6 = v5;
      objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(WeakRetained, v7, (uint64_t)v8, 0);

    }
  }
}

void sub_233C02654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_233C02678(uint64_t a1)
{
  os_unfair_lock_s *v2;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 112);
  os_unfair_lock_lock(v2);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 80), *(id *)(a1 + 40));
  os_unfair_lock_unlock(v2);
}

void sub_233C0270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_233C02780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_233C027E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C02C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  os_unfair_lock_s *v13;
  void *v14;
  void *v15;

  os_unfair_lock_unlock(v13);
  _Unwind_Resume(a1);
}

void sub_233C036B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_unfair_lock_t lock, void *a18)
{
  void *v18;

  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

void sub_233C037C0(void *a1@<X1>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  id v18;

  v18 = a1;
  objc_opt_self();
  if (objc_msgSend_count(v18, v3, v4))
  {
    v7 = objc_msgSend_count(v18, v5, v6);
    if ((unint64_t)(v7 + 1) >> 62)
      v8 = -1;
    else
      v8 = 4 * (v7 + 1);
    v9 = (void *)operator new[]();
    bzero(v9, v8);
    v12 = 0;
    *a2 = v9;
    while (v12 < objc_msgSend_count(v18, v10, v11))
    {
      objc_msgSend_objectAtIndexedSubscript_(v18, v13, v12);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *((_DWORD *)v9 + v12) = objc_msgSend_unsignedLongLongValue(v15, v16, v17);

      ++v12;
    }
    *((_DWORD *)v9 + objc_msgSend_count(v18, v13, v14)) = -1;
  }
  else
  {
    *a2 = 0;
  }

}

void sub_233C038A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _QWORD *v10;
  uint64_t v11;

  *v10 = 0;
  MEMORY[0x23493E6EC](v11, 0x1000C8052888210);

  _Unwind_Resume(a1);
}

os_unfair_lock *sub_233C038F0(os_unfair_lock *a1)
{
  os_unfair_lock *v1;
  void *v2;
  uint64_t os_unfair_lock_opaque_low;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned __int16 v9;
  const char *v10;

  if (a1)
  {
    v1 = a1;
    os_unfair_lock_assert_owner(a1 + 28);
    v2 = (void *)MEMORY[0x24BDD17C8];
    os_unfair_lock_opaque_low = LOWORD(v1[22]._os_unfair_lock_opaque);
    v6 = objc_msgSend_unsignedLongLongValue(*(void **)&v1[30]._os_unfair_lock_opaque, v4, v5) >> 16;
    v9 = objc_msgSend_unsignedLongLongValue(*(void **)&v1[30]._os_unfair_lock_opaque, v7, v8);
    objc_msgSend_stringWithFormat_(v2, v10, (uint64_t)CFSTR("<MTRServerCluster endpoint %u, id 0x%04X_%04X>"), os_unfair_lock_opaque_low, v6, v9);
    a1 = (os_unfair_lock *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_233C03AF4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C03C50(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C03CC4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C03D1C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C03D70(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C03FBC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;
  void *v2;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C04088(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C040F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_233C04150(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C041BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

void sub_233C04218(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C042E0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C043F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  char isEqual;
  const char *v18;
  uint64_t v19;
  id v20;
  void *v21;
  char isKindOfClass;
  id v23;
  void *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  id v30;
  id v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  _DWORD *v39;
  int v40;
  id v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  id v49;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  __n128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  _BYTE v65[128];
  _OWORD v66[8];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v5 = *(id *)(a1 + 24);
  v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v52, v65, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v53;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v53 != v10)
        objc_enumerationMutation(v5);
      v12 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v11);
      objc_msgSend_attributeID(v12, v7, v8);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x24BDD16E0], v14, *(unsigned int *)(a2 + 8));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      isEqual = objc_msgSend_isEqual_(v13, v16, (uint64_t)v15);

      if ((isEqual & 1) != 0)
        break;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v52, v65, 16);
        if (v9)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v20 = v12;

    if (!v20)
      goto LABEL_22;
    objc_msgSend_serializedValue(v20, v18, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v23 = v21;
    v24 = v23;
    if ((isKindOfClass & 1) != 0)
    {
      v49 = v23;
      *(_BYTE *)(a3 + 68) = 1;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      sub_2341035B8(a3, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        v25 = v49;
        v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v26, (uint64_t)&v60, v66, 16);
        if (v27)
        {
          v28 = *(_QWORD *)v61;
          while (2)
          {
            for (i = 0; i != v27; ++i)
            {
              if (*(_QWORD *)v61 != v28)
                objc_enumerationMutation(v25);
              v30 = *(id *)(v60.n128_u64[1] + 8 * i);
              v58 = 0uLL;
              v59 = 0;
              v31 = objc_retainAutorelease(v30);
              v34 = objc_msgSend_bytes(v31, v32, v33);
              v37 = objc_msgSend_length(v31, v35, v36);
              sub_233BF7114(&v64, v34, v37);

              v56 = v64;
              sub_23410ED5C(&v57, &v56);
              sub_233C04AFC((unsigned __int16 *)a3, (uint64_t)&v57, (uint64_t)&v58);
              if (v58.n128_u32[0])
              {
                *(__n128 *)a4 = v58;
                a4[2] = v59;

                v39 = a4;
                goto LABEL_29;
              }

            }
            v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(v25, v38, (uint64_t)&v60, v66, 16);
            if (v27)
              continue;
            break;
          }
        }

        v39 = a4;
        *(_DWORD *)a4 = 0;
        a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/ServerEndp"
                "oint/MTRServerCluster.mm";
        *((_DWORD *)a4 + 4) = 541;
LABEL_29:
        sub_2341036D8(a3);
        if (!*v39)
        {
          *(_WORD *)(a3 + 74) = -1;
          *(_BYTE *)(a3 + 76) = 0;
        }
      }

    }
    else
    {
      v41 = objc_retainAutorelease(v23);
      v44 = objc_msgSend_bytes(v41, v42, v43);
      v47 = objc_msgSend_length(v41, v45, v46);
      sub_233BF7114(v66, v44, v47);

      v58 = (__n128)v66[0];
      sub_23410ED5C(&v60, &v58);
      *(_BYTE *)(a3 + 68) = 1;
      sub_233C04A6C((uint64_t *)a3, (uint64_t)&v60, a4);
    }

  }
  else
  {
LABEL_9:

LABEL_22:
    v40 = *(_DWORD *)(a2 + 8);
    if (v40 == 65533)
    {
      *(_QWORD *)&v66[0] = objc_msgSend_unsignedLongLongValue(*(void **)(a1 + 32), v18, v19);
      *(_BYTE *)(a3 + 68) = 1;
      sub_233C04CE8((uint64_t *)a3, (unint64_t *)v66, a4);
    }
    else if (v40 == 65532)
    {
      LODWORD(v66[0]) = 0;
      *(_BYTE *)(a3 + 68) = 1;
      sub_233C04C58((uint64_t *)a3, (unsigned int *)v66, a4);
    }
    else
    {
      *(_DWORD *)a4 = 1414;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/ServerEndpoi"
              "nt/MTRServerCluster.mm";
      *((_DWORD *)a4 + 4) = 558;
    }
  }
}

void sub_233C04810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_233C048BC(uint64_t a1)
{

  *(_QWORD *)a1 = off_2504EE800;
  return a1;
}

void sub_233C048F8(uint64_t a1)
{

  *(_QWORD *)a1 = off_2504EE800;
  JUMPOUT(0x23493E704);
}

void sub_233C04944(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/AttributeAccessInterface.h";
  *(_DWORD *)(a1 + 16) = 89;
}

void sub_233C04968()
{
  sub_233C0497C("vector");
}

void sub_233C0497C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_233C049CC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2504EDBA0, MEMORY[0x24BEDAAF0]);
}

void sub_233C049B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_233C049CC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *sub_233C049F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_233C04A24();
  return operator new(16 * a2);
}

void sub_233C04A24()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *sub_233C04A4C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_234254E48();
  }
  return result;
}

double sub_233C04A6C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  double result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)&result = sub_23410345C((__n128 *)*a1, (unsigned __int16 *)a1 + 20, *((_DWORD *)a1 + 16), (uint64_t)a3).n128_u64[0];
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341B2098(a2, *(char **)(*a1 + 224), 2uLL, a3);
    if (!*(_DWORD *)a3)
      return sub_23410356C(*a1, a3);
  }
  return result;
}

void sub_233C04AFC(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned __int16 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a1[36];
  if (v5 >= a1[37])
  {
    sub_234106C48((uint64_t)&v22);
    v7 = *(_QWORD *)a1;
    v8 = *(__int128 **)(*(_QWORD *)a1 + 24);
    v9 = v8[3];
    v11 = *v8;
    v10 = v8[1];
    v24 = v8[2];
    v25 = v9;
    v22 = v11;
    v23 = v10;
    if (*((_BYTE *)a1 + 70))
      sub_2341B2098(a2, *(char **)(v7 + 224), 0x100uLL, &v19);
    else
      sub_233C04A6C((uint64_t *)a1, a2, &v19);
    v12 = v19;
    v26 = v20;
    v27 = v21;
    if (v19)
    {
      v13 = *(_QWORD *)a1;
      v14 = *(_OWORD **)(*(_QWORD *)a1 + 24);
      v15 = v22;
      v16 = v23;
      v17 = v25;
      v14[2] = v24;
      v14[3] = v17;
      *v14 = v15;
      v14[1] = v16;
      sub_23411C030(v13);
      *(_OWORD *)(a3 + 4) = v26;
      *(_DWORD *)(a3 + 20) = v27;
    }
    else
    {
      v18 = a1[36] + 1;
      a1[36] = v18;
      a1[37] = v18;
      *((_BYTE *)a1 + 71) = 1;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/AttributeValueEncoder.h";
      *(_DWORD *)(a3 + 16) = 204;
    }
    *(_DWORD *)a3 = v12;
  }
  else
  {
    a1[36] = v5 + 1;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/AttributeValueEncoder.h";
    *(_DWORD *)(a3 + 16) = 175;
  }
}

double sub_233C04C58@<D0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)&result = sub_23410345C((__n128 *)*a1, (unsigned __int16 *)a1 + 20, *((_DWORD *)a1 + 16), (uint64_t)a3).n128_u64[0];
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23410726C(*(char **)(*a1 + 224), 2uLL, *a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
      return sub_23410356C(*a1, a3);
  }
  return result;
}

double sub_233C04CE8@<D0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  double result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_QWORD *)&result = sub_23410345C((__n128 *)*a1, (unsigned __int16 *)a1 + 20, *((_DWORD *)a1 + 16), (uint64_t)a3).n128_u64[0];
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341071EC(*(char **)(*a1 + 224), 2uLL, *a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
      return sub_23410356C(*a1, a3);
  }
  return result;
}

uint64_t sub_233C04DA0(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = sub_233D54FAC(*a2, 41, 0);
  if (v6 <= 0xFD)
    v7 = qword_2561589B8[v6];
  else
    v7 = 0;
  v8 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "OTA Provider received ApplyUpdateRequest", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Du, 2);
  v9 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109120;
    v17 = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "  Update Token: %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Du, 3);
  v11 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = *(_DWORD *)(a3 + 16);
    *(_DWORD *)buf = 67109120;
    v17 = v12;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "  New Version: %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Du, 3);
  if ((sub_233C0509C(a1, a2) & 1) == 0)
  {
    if ((unint64_t)(*(_QWORD *)(a3 + 8) - 33) > 0xFFFFFFFFFFFFFFE6)
    {
      (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v7 + 8))(v7, a1, a2, a3);
    }
    else
    {
      v13 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)buf = 67109376;
        v17 = 32;
        v18 = 1024;
        v19 = v14;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "expected size %u for UpdateToken, got %u", buf, 0xEu);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x1Du, 1);
      *(_WORD *)buf = 133;
      (*(void (**)(uint64_t, unsigned __int16 *, uint8_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, buf, 0);
    }
  }
  return 1;
}

uint64_t sub_233C0509C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  NSObject *v6;
  int v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_233D54FAC(*a2, 41, 0);
  if (v4 <= 0xFD && qword_2561589B8[v4])
    return 0;
  v6 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *a2;
    *(_DWORD *)buf = 67109120;
    v9 = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "No OTAProviderDelegate set for ep:%u", buf, 8u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x1Du, 1);
  *(_WORD *)buf = 129;
  (*(void (**)(uint64_t, unsigned __int16 *, uint8_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, buf, 0);
  return 1;
}

uint64_t sub_233C051D4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = sub_233D54FAC(*a2, 41, 0);
  if (v6 <= 0xFD)
    v7 = qword_2561589B8[v6];
  else
    v7 = 0;
  v8 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "OTA Provider received NotifyUpdateApplied", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Du, 2);
  v9 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)buf = 67109120;
    v17 = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "  Update Token: %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Du, 3);
  v11 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v12 = *(_DWORD *)(a3 + 16);
    *(_DWORD *)buf = 67109120;
    v17 = v12;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "  Software Version: %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x1Du, 3);
  if ((sub_233C0509C(a1, a2) & 1) == 0)
  {
    if ((unint64_t)(*(_QWORD *)(a3 + 8) - 33) > 0xFFFFFFFFFFFFFFE6)
    {
      (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1, a2, a3);
    }
    else
    {
      v13 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)buf = 67109376;
        v17 = 32;
        v18 = 1024;
        v19 = v14;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "expected size %u for UpdateToken, got %u", buf, 0xEu);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x1Du, 1);
      *(_WORD *)buf = 133;
      (*(void (**)(uint64_t, unsigned __int16 *, uint8_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, buf, 0);
    }
  }
  return 1;
}

uint64_t sub_233C054D0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v6;
  void (***v7)(_QWORD, uint64_t, unsigned __int16 *, unsigned __int16 *);
  NSObject *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  _BYTE *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint8_t v34[4];
  int v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = sub_233D54FAC(*a2, 41, 0);
  if (v6 <= 0xFD)
    v7 = (void (***)(_QWORD, uint64_t, unsigned __int16 *, unsigned __int16 *))qword_2561589B8[v6];
  else
    v7 = 0;
  if ((sub_233C0509C(a1, a2) & 1) == 0)
  {
    v8 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "OTA Provider received QueryImage", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x1Du, 2);
    v9 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *a3;
      *(_DWORD *)buf = 67109120;
      v39 = v10;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "  VendorID: 0x%x", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x1Du, 3);
    v11 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = a3[1];
      *(_DWORD *)buf = 67109120;
      v39 = v12;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "  ProductID: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x1Du, 3);
    v13 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *((_DWORD *)a3 + 1);
      *(_DWORD *)buf = 67109120;
      v39 = v14;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "  SoftwareVersion: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x1Du, 3);
    v15 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "  ProtocolsSupported: [", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x1Du, 3);
    v34[0] = *((_BYTE *)a3 + 80);
    if (v34[0])
      v34[1] = *((_BYTE *)a3 + 81);
    sub_233C05E38((uint64_t)buf, (uint64_t)(a3 + 4), v34);
    while (sub_233C05EA4((uint64_t)buf))
    {
      v16 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v34 = 67109120;
        v35 = buf[0];
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "    %u", v34, 8u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x1Du, 3);
    }
    v17 = sub_234117B80(0x1Du, "Zcl");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_INFO, "  ]", v34, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x1Du, 3);
    if (*((_BYTE *)a3 + 88))
    {
      v18 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v19 = *(unsigned __int16 *)sub_233C05D98((_BYTE *)a3 + 88);
        *(_DWORD *)v34 = 67109120;
        v35 = v19;
        _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_INFO, "  HardwareVersion: %u", v34, 8u);
      }
      if (sub_234114844(3u))
      {
        sub_233C05D98((_BYTE *)a3 + 88);
        sub_2341147D0(0x1Du, 3);
      }
    }
    v20 = a3 + 48;
    if (*((_BYTE *)a3 + 96))
    {
      v21 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        v22 = *((_QWORD *)sub_233C05DB8((_BYTE *)a3 + 96) + 1);
        v23 = *(_QWORD *)sub_233C05DB8((_BYTE *)a3 + 96);
        *(_DWORD *)v34 = 68157954;
        v35 = v22;
        v36 = 2080;
        v37 = v23;
        _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_INFO, "  Location: %.*s", v34, 0x12u);
      }
      if (sub_234114844(3u))
      {
        sub_233C05DB8((_BYTE *)a3 + 96);
        sub_233C05DB8((_BYTE *)a3 + 96);
        sub_2341147D0(0x1Du, 3);
      }
    }
    if (*((_BYTE *)a3 + 120))
    {
      v24 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v25 = *sub_233C05DD8((_BYTE *)a3 + 120);
        *(_DWORD *)v34 = 67109120;
        v35 = v25;
        _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_INFO, "  RequestorCanConsent: %u", v34, 8u);
      }
      if (sub_234114844(3u))
      {
        sub_233C05DD8((_BYTE *)a3 + 120);
        sub_2341147D0(0x1Du, 3);
      }
    }
    v26 = a3 + 64;
    if (*((_BYTE *)a3 + 128))
    {
      v27 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = *((_QWORD *)sub_233C05DB8((_BYTE *)a3 + 128) + 1);
        *(_DWORD *)v34 = 67109120;
        v35 = v28;
        _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_INFO, "  MetadataForProvider: %u", v34, 8u);
      }
      if (sub_234114844(3u))
      {
        sub_233C05DB8((_BYTE *)a3 + 128);
        sub_2341147D0(0x1Du, 3);
      }
    }
    if (*v20 && *((_QWORD *)sub_233C05DB8((_BYTE *)a3 + 96) + 1) != 2)
    {
      v31 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = *((_QWORD *)sub_233C05DB8(v20) + 1);
        *(_DWORD *)v34 = 67109376;
        v35 = v32;
        v36 = 1024;
        LODWORD(v37) = 2;
        _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "location param length %u != expected length %u", v34, 0xEu);
      }
      if (sub_234114844(1u))
      {
        sub_233C05DB8(v20);
        sub_2341147D0(0x1Du, 1);
      }
      goto LABEL_71;
    }
    if (*v26 && *((_QWORD *)sub_233C05DB8((_BYTE *)a3 + 128) + 1) >= 0x201uLL)
    {
      v29 = sub_234117B80(0x1Du, "Zcl");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = *((_QWORD *)sub_233C05DB8(v26) + 1);
        *(_DWORD *)v34 = 67109376;
        v35 = v30;
        v36 = 1024;
        LODWORD(v37) = 512;
        _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "metadata size %u exceeds max %u", v34, 0xEu);
      }
      if (sub_234114844(1u))
      {
        sub_233C05DB8(v26);
        sub_2341147D0(0x1Du, 1);
      }
LABEL_71:
      *(_WORD *)v34 = 133;
      (*(void (**)(uint64_t, unsigned __int16 *, uint8_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, v34, 0);
      return 1;
    }
    (**v7)(v7, a1, a2, a3);
  }
  return 1;
}

_BYTE *sub_233C05D98(_BYTE *a1)
{
  if (!*a1)
    sub_234254EEC((uint64_t)a1);
  return a1 + 2;
}

_BYTE *sub_233C05DB8(_BYTE *a1)
{
  if (!*a1)
    sub_234254EEC((uint64_t)a1);
  return a1 + 8;
}

_BYTE *sub_233C05DD8(_BYTE *a1)
{
  if (!*a1)
    sub_234254EEC((uint64_t)a1);
  return a1 + 1;
}

uint64_t sub_233C05DF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_233D54FAC(a1, 41, 0);
  if (result <= 0xFD)
    qword_2561589B8[result] = a2;
  return result;
}

uint64_t sub_233C05E38(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  sub_234104468(a1 + 32);
  v7 = *a3;
  *(_BYTE *)(a1 + 104) = v7;
  if (v7)
    *(_BYTE *)(a1 + 105) = a3[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 24) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233C05EA4(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 96) == -1)
    return 0;
  v3 = (int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    sub_2341058CC(a1 + 32, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_BYTE *)a1 = 0;
      sub_233C05F48(a1 + 32, (_BYTE *)a1, &v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 8);
    }
  }
  return v2 == 0;
}

uint64_t sub_233C05F48@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 4)
      LOBYTE(v6) = 4;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

uint64_t sub_233C05FA8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v6;

  v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_23410492C(a1, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = 519;
  }
  return result;
}

BOOL sub_233C06034()
{
  return sub_234114844(1u);
}

id sub_233C0603C(uint64_t a1, const char *a2)
{
  return sub_234117B80(0x1Bu, a2);
}

void sub_233C06088()
{
  MTRDeviceControllerFactory *v0;
  void *v1;

  v0 = objc_alloc_init(MTRDeviceControllerFactory);
  v1 = (void *)qword_2561591A8;
  qword_2561591A8 = (uint64_t)v0;

}

void sub_233C062E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *sub_233C06318()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256152E40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256152E40))
  {
    byte_256152E38 = 0;
    xmmword_256152E18 = 0u;
    unk_256152E28 = 0u;
    xmmword_256152E08 = 0u;
    __cxa_guard_release(&qword_256152E40);
  }
  return &unk_256152E00;
}

void sub_233C063CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MTRDeviceControllerFactory;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_233C063F8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

BOOL sub_233C06408(_BOOL8 result)
{
  if (result)
  {
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    result = sub_2341BE748(&byte_2542530C0);
    if (result)
      sub_234254F80();
  }
  return result;
}

void sub_233C06458(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint8_t v16[16];

  if (a1)
  {
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 241);
    sub_234117B80(0, "NotSpecified");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Cleaning startup objects in controller factory", v16, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
    v3 = (void *)a1[67];
    a1[67] = 0;

    v4 = (void *)a1[66];
    a1[66] = 0;

    v5 = a1[64];
    if (v5)
    {
      if (!*(_QWORD *)(v5 + 8) || (sub_233C0BA7C(a1[64]), *(_QWORD *)(v5 + 8) = 0, (v5 = a1[64]) != 0))
      {
        v6 = sub_233C0BB18(v5);
        MEMORY[0x23493E704](v6, 0x10A1C40EEFDC2EFLL);
      }
      a1[64] = 0;
    }
    v7 = (_QWORD *)a1[63];
    if (v7)
    {
      if (!v7[1] || (sub_233C0BBA8(a1[63]), v7[1] = 0, (v7 = (_QWORD *)a1[63]) != 0))
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      a1[63] = 0;
    }
    v8 = (void *)a1[74];
    a1[74] = 0;

    v9 = (void *)a1[73];
    a1[73] = 0;

    v10 = a1[62];
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      a1[62] = 0;
    }
    v11 = a1[61];
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      a1[61] = 0;
    }
    v12 = (void *)a1[77];
    a1[77] = 0;

    sub_2340DA240(v13, v14, v15);
  }
}

void sub_233C065EC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 488);
    v4 = *(_OWORD *)(a1 + 504);
    sub_2341E5E30(a2, &v3, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

uint64_t sub_233C0673C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_233C0674C(uint64_t a1)
{

}

uint64_t sub_233C06754(uint64_t *a1)
{
  const char *v2;
  NSObject *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v9;
  uint64_t v10;
  MTRFabricInfo *v11;
  const char *v12;
  const char *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  char *v21;
  _QWORD v22[330];
  unsigned __int8 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_233C0BBF8((uint64_t)v22);
  v18 = 0uLL;
  v19 = 0;
  sub_233C065EC(a1[4], (uint64_t)v22, &v18);
  if ((_DWORD)v18)
  {
    sub_234117B80(0, "NotSpecified");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v15 = v18;
      v16 = v19;
      v4 = sub_2341083CC((const char **)&v15, 1);
      *(_DWORD *)buf = 136315138;
      v21 = v4;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Can't initialize fabric table when getting known fabrics: %s", buf, 0xCu);
    }

    if (sub_234114844(1u))
    {
      v15 = v18;
      v16 = v19;
      sub_2341083CC((const char **)&v15, 1);
      sub_2341147D0(0, 1);
    }
  }
  else
  {
    objc_msgSend_arrayWithCapacity_(MEMORY[0x24BDBCEB8], v2, v23);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = *(_QWORD *)(a1[5] + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

    sub_233C0BD8C(v22, (uint64_t)&v15);
    if (v16 != v17 && (v17 != 16 || v16 != 16 || (_QWORD *)v15 != v22))
    {
LABEL_21:
      v10 = sub_233C06A04((uint64_t *)&v15);
      v11 = [MTRFabricInfo alloc];
      v14 = (void *)objc_msgSend_initWithFabricTable_fabricInfo_(v11, v12, (uint64_t)v22, v10);
      if (!v14)
        return sub_233C0BE9C((uint64_t)v22);
      objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1[5] + 8) + 40), v13, (uint64_t)v14);

      v9 = v16;
      while (1)
      {
        if (v9 < v17)
          v16 = ++v9;
        if (v9 == v17)
          break;
        if (*(_BYTE *)(v15 + 152 * v9 + 137)
          && (unint64_t)(*(_QWORD *)(v15 + 152 * v9) - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          if (v17 == 16 && v9 == 16 && (_QWORD *)v15 == v22)
            break;
          goto LABEL_21;
        }
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  }
  return sub_233C0BE9C((uint64_t)v22);
}

void sub_233C069BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_233C0BE9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_233C06A04(uint64_t *a1)
{
  if (a1[2] == a1[3])
    sub_234255038();
  return sub_233C0BE50(a1);
}

uint64_t sub_233C06A30(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  char *v10;
  __int128 v12;
  uint64_t v13;
  _QWORD block[5];
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __n128 (*v20)(__n128 *, __n128 *);
  uint64_t (*v21)();
  const char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[4];
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (a1)
  {
    sub_233C06408(a1);
    v17 = 0;
    v18 = &v17;
    v19 = 0x4812000000;
    v20 = sub_233C06CAC;
    v21 = nullsub_14;
    v23 = xmmword_2504EE878;
    v22 = "";
    v24 = 335;
    v7 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233C06CC4;
    block[3] = &unk_2504EE898;
    block[4] = a1;
    v16 = &v17;
    v15 = v6;
    dispatch_sync(v7, block);
    v8 = *((_DWORD *)v18 + 12);
    a1 = v8 == 0;
    if (v8)
    {
      sub_234117B80(0, "NotSpecified");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v25 = *((_OWORD *)v18 + 3);
        v26 = v18[8];
        v10 = sub_2341083CC((const char **)&v25, 1);
        *(_DWORD *)buf = 136315138;
        v28 = v10;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed to start Matter controller factory: %s", buf, 0xCu);
      }

      if (sub_234114844(1u))
      {
        v25 = *((_OWORD *)v18 + 3);
        v26 = v18[8];
        sub_2341083CC((const char **)&v25, 1);
        sub_2341147D0(0, 1);
      }
      if (a4)
      {
        v12 = *((_OWORD *)v18 + 3);
        v13 = v18[8];
        sub_2340017F0((uint64_t)MTRError, &v12);
        *a4 = (id)objc_claimAutoreleasedReturnValue();
      }
    }

    _Block_object_dispose(&v17, 8);
  }

  return a1;
}

void sub_233C06C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_233C06CAC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_233C06CC4(uint64_t a1, const char *a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  int hasStorage;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  dispatch_queue_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  char shouldStartServer;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  NSObject *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  char v73;
  _QWORD v74[9];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  __int16 v79;
  uint8_t v80[4];
  uint8_t *v81;
  uint8_t buf[16];
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 648))
  {
    sub_234117B80(0, "NotSpecified");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Ignoring duplicate call to startup, Matter controller factory already started...", buf, 2u);
    }

    if (sub_234114844(3u))
      sub_2341147D0(0, 3);
    v5 = 0;
    v6 = a1 + 48;
    v7 = 340;
LABEL_7:
    v8 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm";
LABEL_17:
    v35 = *(_QWORD *)(*(_QWORD *)v6 + 8);
    *(_DWORD *)(v35 + 48) = v5;
    *(_QWORD *)(v35 + 56) = v8;
    *(_DWORD *)(v35 + 64) = v7;
    goto LABEL_18;
  }
  sub_2340DA16C(a1, a2, a3);
  sub_2340357A0();
  hasStorage = objc_msgSend_hasStorage(*(void **)(a1 + 40), v9, v10);
  v12 = operator new();
  v15 = (_QWORD *)v12;
  if (hasStorage)
  {
    objc_msgSend_storage(*(void **)(a1 + 40), v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    sub_233BF4B74(v15, v16);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488) = v15;

    v19 = 0;
    v20 = 0;
  }
  else
  {
    sub_2340D6B8C(v12, *(_QWORD *)(a1 + 32));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488) = v15;
    v19 = (_QWORD *)operator new();
    sub_233CB93E8(v19, *(void **)(a1 + 32));
    v20 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496) = v19;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 480) = v20;
  objc_msgSend_otaProviderDelegate(*(void **)(a1 + 40), v17, v18);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = *(void **)(*(_QWORD *)(a1 + 32) + 584);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 584) = v21;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 584))
  {
    dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = dispatch_queue_create("org.csa-iot.matter.framework.otaprovider.workqueue", v23);
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(v25 + 592);
    *(_QWORD *)(v25 + 592) = v24;

  }
  v27 = operator new();
  *(_QWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)v27 = &off_250504FB0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 33) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = v27;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_QWORD *)(v28 + 504);
  if (*(_QWORD *)(v29 + 8))
  {
    v6 = a1 + 48;
    v7 = 58;
    v5 = 3;
    v8 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/crypto/PersistentStorageOperationalKeystore.h";
    goto LABEL_17;
  }
  v30 = *(_QWORD *)(v28 + 488);
  *(_BYTE *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v29 + 24) = 0;
  *(_WORD *)(v29 + 32) = 0;
  v6 = a1 + 48;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_DWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/crypto/PersistentStora"
                          "geOperationalKeystore.h";
  *(_DWORD *)(v31 + 64) = 64;
  v32 = operator new();
  *(_QWORD *)v32 = &unk_250515810;
  *(_QWORD *)(v32 + 8) = 0;
  *(_BYTE *)(v32 + 16) = 0;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 56) = 0u;
  *(_BYTE *)(v32 + 72) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) = v32;
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(_QWORD *)(v33 + 512);
  v8 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/credentials/PersistentStorageOpCertStore.h";
  if (*(_QWORD *)(v34 + 8))
  {
    v7 = 58;
    v5 = 3;
    goto LABEL_17;
  }
  v36 = *(_QWORD *)(v33 + 488);
  sub_233C0BA7C(*(_QWORD *)(v33 + 512));
  *(_QWORD *)(v34 + 8) = v36;
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_DWORD *)(v37 + 48) = 0;
  *(_QWORD *)(v37 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/credentials/Persistent"
                          "StorageOpCertStore.h";
  *(_DWORD *)(v37 + 64) = 61;
  objc_msgSend_productAttestationAuthorityCertificates(*(void **)(a1 + 40), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend_copy(v40, v41, v42);
  v44 = *(_QWORD *)(a1 + 32);
  v45 = *(void **)(v44 + 528);
  *(_QWORD *)(v44 + 528) = v43;

  objc_msgSend_certificationDeclarationCertificates(*(void **)(a1 + 40), v46, v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = objc_msgSend_copy(v48, v49, v50);
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(void **)(v52 + 536);
  *(_QWORD *)(v52 + 536) = v51;

  objc_msgSend_port(*(void **)(a1 + 40), v54, v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  if (v56)
  {
    objc_msgSend_port(*(void **)(a1 + 40), v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v56) = objc_msgSend_unsignedShortValue(v59, v60, v61);

  }
  shouldStartServer = objc_msgSend_shouldStartServer(*(void **)(a1 + 40), v57, v58);
  v63 = *(_QWORD *)(a1 + 32);
  v64 = *(_QWORD *)(v63 + 488);
  v65 = *(_QWORD *)(v63 + 496);
  v66 = *(_QWORD *)(v63 + 16);
  v74[0] = 0;
  v74[1] = v64;
  v74[2] = v63 + 24;
  v74[3] = v63 + 104;
  v74[4] = 0;
  v74[5] = v63 + 32;
  memset(&v74[6], 0, 24);
  v75 = *(_OWORD *)(v63 + 504);
  v76 = v65;
  v77 = 0;
  v78 = shouldStartServer;
  v79 = (__int16)v56;
  sub_2342232FC(v66, (uint64_t)v74, (uint64_t)buf);
  v67 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_OWORD *)(v67 + 48) = *(_OWORD *)buf;
  *(_QWORD *)(v67 + 64) = v83;
  if (!*(_DWORD *)(v67 + 48))
  {
    if ((byte_2561591B8 & 1) == 0)
    {
      if (atexit(sub_233C0729C))
      {
        v68 = __error();
        strerror_r(*v68, (char *)buf, 0x80uLL);
        sub_234117B80(0, "NotSpecified");
        v69 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v80 = 136315138;
          v81 = buf;
          _os_log_impl(&dword_233BF3000, v69, OS_LOG_TYPE_ERROR, "Warning: Failed to register atexit handler: %s", v80, 0xCu);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
      }
      byte_2561591B8 = 1;
    }
    sub_234115924();
    v70 = a1 + 32;
    sub_234224384(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    sub_2342243C8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    v73 = objc_msgSend_shouldStartServer(*(void **)(a1 + 40), v71, v72);
    v5 = 0;
    *(_BYTE *)(*(_QWORD *)v70 + 544) = v73;
    *(_BYTE *)(*(_QWORD *)v70 + 648) = 1;
    v7 = 414;
    goto LABEL_7;
  }
LABEL_18:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48))
    sub_233C06458(*(_QWORD **)(a1 + 32));
}

void sub_233C07230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C0729C()
{
  NSObject *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint8_t v6[16];

  sub_234117B80(0, "NotSpecified");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_DEFAULT, "ShutdownOnExit invoked on exit", v6, 2u);
  }

  if (sub_234114844(2u))
    sub_2341147D0(0, 2);
  objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stopControllerFactory(v3, v4, v5);

}

void sub_233C07348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C073E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C073F8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 648))
  {
    sub_234117B80(0, "NotSpecified");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Shutting down the Matter controller factory", v3, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
    sub_234224490(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    sub_233C06458(*(_QWORD **)(a1 + 32));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 648) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 544) = 0;
  }
}

_BYTE *sub_233C074BC(_BYTE *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  id *v34;
  const char *v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  NSObject *v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  NSObject *v44;
  NSObject *v45;
  _QWORD *v46;
  int v47;
  id v48;
  NSObject *v49;
  id v51;
  id *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  NSObject *v61;
  os_unfair_lock_s *v62;
  const char *v63;
  NSObject *v64;
  id v65;
  const char *v66;
  char v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  uint64_t v75;
  void *v77;
  id v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  _QWORD v87[5];
  id v88;
  id v89;
  uint64_t *v90;
  uint64_t *v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  __n128 (*v96)(__n128 *, __n128 *);
  uint64_t (*v97)();
  const char *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t);
  void (*v105)(uint64_t);
  id v106;
  _QWORD block[5];
  __int128 v108;
  int v109;
  __int128 v110;
  int v111;
  __int128 v112;
  int v113;
  __int128 v114;
  int v115;
  __int128 v116;
  int v117;
  uint8_t buf[4];
  id v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v9 = a3;
  v74 = a4;
  if (a1)
  {
    v75 = (uint64_t)a1;
    sub_233C06408((_BOOL8)a1);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v72 = v8;
      v78 = v9;
      objc_msgSend_storageDelegate(v78, v10, v11);
      v12 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_storageDelegateQueue(v78, v13, v14);
      v15 = objc_claimAutoreleasedReturnValue();
      objc_msgSend_uniqueIdentifier(v78, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_otaProviderDelegate(v78, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_otaProviderDelegateQueue(v78, v22, v23);
      v24 = objc_claimAutoreleasedReturnValue();
      v71 = objc_msgSend_concurrentSubscriptionEstablishmentsAllowedOnThread(v78, v25, v26);
      objc_msgSend_storageBehaviorConfiguration(v78, v27, v28);
      v80 = objc_claimAutoreleasedReturnValue();
      v29 = (void *)v24;
      v77 = (void *)v12;
      v30 = (void *)v15;

      if (*(_BYTE *)(v75 + 648))
      {
        v8 = v72;
        v31 = (uint64_t)v18;
        v32 = v21;
        v33 = (void *)v12;
        v34 = (id *)v75;
LABEL_7:
        v37 = *((_BYTE *)v34 + 480) != 0;
        v38 = v33 == 0;
        if (*((_BYTE *)v34 + 480) && !v33)
        {
          v18 = (void *)v31;
          sub_234117B80(0, "NotSpecified");
          v39 = objc_claimAutoreleasedReturnValue();
          v21 = v32;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_ERROR, "Must have a controller storage delegate when we do not have storage for the controller factory", buf, 2u);
          }

          if (sub_234114844(1u))
            sub_2341147D0(0, 1);
          if (a5)
          {
            LODWORD(v112) = 47;
            *((_QWORD *)&v112 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Fram"
                                     "ework/CHIP/MTRDeviceControllerFactory.mm";
            v113 = 520;
            sub_2340017F0((uint64_t)MTRError, &v112);
            v40 = (id)objc_claimAutoreleasedReturnValue();
LABEL_47:
            v77 = 0;
            goto LABEL_48;
          }
LABEL_49:
          v77 = 0;
          goto LABEL_50;
        }
        v18 = (void *)v31;
LABEL_22:
        v77 = v33;
        if (!v37 && !v38)
        {
          sub_234117B80(0, "NotSpecified");
          v44 = objc_claimAutoreleasedReturnValue();
          v21 = v32;
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "Must not have a controller storage delegate when we have storage for the controller factory", buf, 2u);
          }

          if (sub_234114844(1u))
            sub_2341147D0(0, 1);
          if (a5)
          {
            LODWORD(v110) = 47;
            *((_QWORD *)&v110 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Fram"
                                     "ework/CHIP/MTRDeviceControllerFactory.mm";
            v111 = 528;
            sub_2340017F0((uint64_t)MTRError, &v110);
            v40 = (id)objc_claimAutoreleasedReturnValue();
LABEL_48:
            a1 = 0;
            *a5 = v40;
LABEL_51:
            v42 = (void *)v80;
LABEL_52:

            goto LABEL_53;
          }
LABEL_50:
          a1 = 0;
          goto LABEL_51;
        }
        if (v32)
        {
          v48 = v29;
        }
        else
        {
          v51 = v34[73];
          v52 = v34;
          v53 = v51;
          v48 = v52[74];

          v32 = v53;
          v34 = (id *)v75;
        }
        v54 = v8;
        v55 = v34[1];
        v56 = (uint64_t)v34;
        v21 = v32;
        v29 = v48;
        v58 = objc_msgSend_initWithFactory_queue_storageDelegate_storageDelegateQueue_otaProviderDelegate_otaProviderDelegateQueue_uniqueIdentifier_concurrentSubscriptionPoolSize_storageBehaviorConfiguration_(v54, v57, v56, v55, v33, v30, v32, v48, v18, v71, v80);

        if (!v58)
        {
          if (a5)
          {
            LODWORD(v108) = 47;
            *((_QWORD *)&v108 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Fram"
                                     "ework/CHIP/MTRDeviceControllerFactory.mm";
            v109 = 551;
            sub_2340017F0((uint64_t)MTRError, &v108);
            v40 = (id)objc_claimAutoreleasedReturnValue();
            v8 = 0;
            goto LABEL_48;
          }
          v8 = 0;
          goto LABEL_50;
        }
        if (!objc_msgSend_count(*(void **)(v75 + 552), v59, v60))
        {
          v61 = *(NSObject **)(v75 + 8);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 3221225472;
          block[2] = sub_233C082CC;
          block[3] = &unk_2504EE8C0;
          block[4] = v75;
          dispatch_sync(v61, block);
        }
        v62 = (os_unfair_lock_s *)(v75 + 548);
        os_unfair_lock_lock((os_unfair_lock_t)(v75 + 548));
        objc_msgSend_addObject_(*(void **)(v75 + 552), v63, v58);
        v73 = (void *)v58;
        os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 548));
        v101 = 0;
        v102 = &v101;
        v103 = 0x3032000000;
        v104 = sub_233C0673C;
        v105 = sub_233C0674C;
        v106 = 0;
        v93 = 0;
        v94 = &v93;
        v95 = 0x4812000000;
        v96 = sub_233C06CAC;
        v97 = nullsub_14;
        v98 = "";
        v99 = xmmword_2504EE8E0;
        v100 = 569;
        sub_233C0BBF8((uint64_t)buf);
        v64 = *(NSObject **)(v75 + 8);
        v87[0] = MEMORY[0x24BDAC760];
        v87[1] = 3221225472;
        v87[2] = sub_233C0833C;
        v87[3] = &unk_2504EE900;
        v90 = &v93;
        v91 = &v101;
        v87[4] = v75;
        v92 = buf;
        v89 = v74;
        v65 = v73;
        v88 = v65;
        dispatch_sync(v64, v87);
        v79 = v65;
        if (v102[5])
        {
          os_unfair_lock_lock(v62);
          objc_storeStrong((id *)(v75 + 560), v73);
          os_unfair_lock_unlock(v62);
          v67 = objc_msgSend_startup_(v65, v66, v102[5]);
          os_unfair_lock_lock(v62);
          v68 = *(void **)(v75 + 560);
          *(_QWORD *)(v75 + 560) = 0;

          os_unfair_lock_unlock(v62);
          if ((v67 & 1) != 0)
          {
            sub_233C089B4((id)v75, v65);
            v69 = (void *)objc_claimAutoreleasedReturnValue();

            if (a5 && !v69)
            {
              LODWORD(v81) = 172;
              *((_QWORD *)&v81 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Fra"
                                      "mework/CHIP/MTRDeviceControllerFactory.mm";
              v82 = 642;
              sub_2340017F0((uint64_t)MTRError, &v81);
              *a5 = (id)objc_claimAutoreleasedReturnValue();
            }
            a1 = v69;
            v79 = a1;
            goto LABEL_72;
          }
          if (a5)
          {
            LODWORD(v83) = 172;
            *((_QWORD *)&v83 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Frame"
                                    "work/CHIP/MTRDeviceControllerFactory.mm";
            v84 = 634;
            sub_2340017F0((uint64_t)MTRError, &v83);
            v70 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_70;
          }
        }
        else
        {
          sub_233C08840(v75, v65);
          if (a5)
          {
            v85 = *((_OWORD *)v94 + 3);
            v86 = v94[8];
            sub_2340017F0((uint64_t)MTRError, &v85);
            v70 = (id)objc_claimAutoreleasedReturnValue();
LABEL_70:
            a1 = 0;
            *a5 = v70;
LABEL_72:

            sub_233C0BE9C((uint64_t)buf);
            _Block_object_dispose(&v93, 8);
            _Block_object_dispose(&v101, 8);

            v8 = v79;
            v42 = (void *)v80;
            goto LABEL_52;
          }
        }
        a1 = 0;
        goto LABEL_72;
      }
      v8 = v72;
      v32 = v21;
      if (v12)
      {
        sub_234117B80(0, "NotSpecified");
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v45, OS_LOG_TYPE_DEFAULT, "Auto-starting Matter controller factory in per-controller storage mode", buf, 2u);
        }

        if (sub_234114844(2u))
          sub_2341147D0(0, 2);
        v46 = sub_233C0820C([MTRDeviceControllerFactoryParams alloc]);
        v47 = sub_233C06A30(v75, v46, 0, a5);

        if (!v47)
          goto LABEL_50;
        v38 = 0;
        v37 = *(_BYTE *)(v75 + 480) != 0;
        v32 = v21;
        v34 = (id *)v75;
        v33 = (void *)v12;
        goto LABEL_22;
      }
      v31 = (uint64_t)v18;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        sub_234117B80(0, "NotSpecified");
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v119 = v9;
          _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_ERROR, "Unknown kind of startup params: %@", buf, 0xCu);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        v42 = a5;
        if (a5)
        {
          LODWORD(v116) = 47;
          *((_QWORD *)&v116 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framew"
                                   "ork/CHIP/MTRDeviceControllerFactory.mm";
          v117 = 496;
          sub_2340017F0((uint64_t)MTRError, &v116);
          v43 = (id)objc_claimAutoreleasedReturnValue();
          v29 = 0;
          v42 = 0;
          v21 = 0;
          v18 = 0;
          v30 = 0;
          v77 = 0;
          a1 = 0;
          *a5 = v43;
        }
        else
        {
          v29 = 0;
          v21 = 0;
          v18 = 0;
          v30 = 0;
          v77 = 0;
          a1 = 0;
        }
        goto LABEL_52;
      }
      objc_msgSend_uniqueIdentifier(v9, v35, v36);
      v31 = objc_claimAutoreleasedReturnValue();
      v29 = 0;
      v80 = 0;
      v32 = 0;
      v30 = 0;
      v33 = 0;
      v71 = 0;
      v34 = (id *)a1;
      if (a1[648])
        goto LABEL_7;
    }
    v18 = (void *)v31;
    sub_234117B80(0, "NotSpecified");
    v49 = objc_claimAutoreleasedReturnValue();
    v21 = v32;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v49, OS_LOG_TYPE_ERROR, "Trying to start controller while Matter controller factory is not running", buf, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    if (a5)
    {
      LODWORD(v114) = 3;
      *((_QWORD *)&v114 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/"
                               "CHIP/MTRDeviceControllerFactory.mm";
      v115 = 511;
      sub_2340017F0((uint64_t)MTRError, &v114);
      v40 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_47;
    }
    goto LABEL_49;
  }
LABEL_53:

  return a1;
}

void sub_233C08048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id a54)
{
  void *v54;
  void *v55;
  void *v56;

  sub_233C0BE9C((uint64_t)&STACK[0x210]);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a49, 8);

  _Unwind_Resume(a1);
}

_QWORD *sub_233C0820C(void *a1)
{
  _QWORD *v1;
  MTRDummyStorage *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  objc_super v9;

  if (!a1)
    return 0;
  v9.receiver = a1;
  v9.super_class = (Class)MTRDeviceControllerFactoryParams;
  v1 = objc_msgSendSuper2(&v9, sel_init);
  if (v1)
  {
    v2 = objc_alloc_init(MTRDummyStorage);
    v3 = (void *)v1[2];
    v1[2] = v2;

    *((_BYTE *)v1 + 9) = 0;
    v4 = (void *)v1[3];
    v1[3] = 0;

    v5 = (void *)v1[4];
    v1[4] = 0;

    v6 = (void *)v1[5];
    v1[5] = 0;

    v7 = (void *)v1[6];
    v1[6] = 0;

    *((_BYTE *)v1 + 8) = 1;
  }
  return v1;
}

void sub_233C082BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233C082CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_234031BE0(v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = v2;
  return result;
}

void sub_233C08318(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23493E704](v1, 0x10E0C4077E0147ALL);
  _Unwind_Resume(a1);
}

void sub_233C0833C(uint64_t *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  int isEqual;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  char *v43;
  uint8_t v44[16];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  sub_233C065EC(a1[4], a1[9], v44);
  v2 = *(_QWORD *)(a1[7] + 8);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)v44;
  *(_QWORD *)(v2 + 64) = v45;
  if (*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 48))
  {
    sub_234117B80(0, "NotSpecified");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1[7] + 8);
      *(_OWORD *)v44 = *(_OWORD *)(v4 + 48);
      v45 = *(_QWORD *)(v4 + 64);
      *(_DWORD *)buf = 136315138;
      v43 = sub_2341083CC((const char **)v44, 1);
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Can't initialize fabric table: %s", buf, 0xCu);
    }

    if (sub_234114844(1u))
    {
      v5 = *(_QWORD *)(a1[7] + 8);
      *(_OWORD *)v44 = *(_OWORD *)(v5 + 48);
      v45 = *(_QWORD *)(v5 + 64);
      sub_2341083CC((const char **)v44, 1);
      sub_2341147D0(0, 1);
    }
  }
  else
  {
    (*(void (**)(void))(a1[6] + 16))();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = *(_QWORD *)(a1[8] + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    if (*(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40))
    {
      sub_233C087E8((os_unfair_lock_s *)a1[4]);
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v37, v41, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v38;
        while (2)
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v38 != v14)
              objc_enumerationMutation(v9);
            v16 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * v15);
            if (v16 != (void *)a1[5])
            {
              objc_msgSend_uniqueIdentifier(*(void **)(*((_QWORD *)&v37 + 1) + 8 * v15), v11, v12);
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_uniqueIdentifier(*(void **)(*(_QWORD *)(a1[8] + 8) + 40), v18, v19);
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              isEqual = objc_msgSend_isEqual_(v17, v21, (uint64_t)v20);

              if (isEqual)
              {
                sub_234117B80(0, "NotSpecified");
                v27 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  objc_msgSend_uniqueIdentifier(v16, v28, v29);
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)v44 = 138412290;
                  *(_QWORD *)&v44[4] = v30;
                  _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "Already have running controller with uniqueIdentifier %@", v44, 0xCu);

                }
                if (sub_234114844(1u))
                {
                  objc_msgSend_uniqueIdentifier(v16, v31, v32);
                  v36 = (void *)objc_claimAutoreleasedReturnValue();
                  sub_2341147D0(0, 1);

                }
                v33 = *(_QWORD *)(a1[7] + 8);
                *(_DWORD *)(v33 + 48) = 47;
                *(_QWORD *)(v33 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/F"
                                        "ramework/CHIP/MTRDeviceControllerFactory.mm";
                *(_DWORD *)(v33 + 64) = 596;
                v34 = *(_QWORD *)(a1[8] + 8);
                v35 = *(void **)(v34 + 40);
                *(_QWORD *)(v34 + 40) = 0;

                v26 = v9;
                goto LABEL_27;
              }
            }
            ++v15;
          }
          while (v13 != v15);
          v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v11, (uint64_t)&v37, v41, 16);
          if (v13)
            continue;
          break;
        }
      }

      sub_2341E81F4((unsigned __int8 *)a1[9], (_BYTE *)(a1[4] + 576), (uint64_t)v44);
      v23 = *(_QWORD *)(a1[7] + 8);
      *(_OWORD *)(v23 + 48) = *(_OWORD *)v44;
      *(_QWORD *)(v23 + 64) = v45;
      if (*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 48))
      {
        sub_234117B80(0, "NotSpecified");
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v44 = 0;
          _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "Out of space in the fabric table", v44, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        v25 = *(_QWORD *)(a1[8] + 8);
        v26 = *(void **)(v25 + 40);
        *(_QWORD *)(v25 + 40) = 0;
LABEL_27:

      }
    }
  }
}

void sub_233C0877C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void **sub_233C087E8(os_unfair_lock_s *a1)
{
  void **v1;
  os_unfair_lock_s *v2;
  const char *v3;
  uint64_t v4;

  v1 = (void **)a1;
  if (a1)
  {
    v2 = a1 + 137;
    os_unfair_lock_lock(a1 + 137);
    v1 = (void **)objc_msgSend_copy(v1[69], v3, v4);
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

void sub_233C0882C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C08840(uint64_t a1, void *a2)
{
  id v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  id v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, const char *, uint64_t);
  void *v15;
  id v16;
  uint64_t v17;
  uint8_t buf[16];

  v4 = a2;
  if (a1)
  {
    sub_233C06408(a1);
    if ((objc_msgSend_containsObject_(*(void **)(a1 + 552), v5, (uint64_t)v4) & 1) != 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 548));
      objc_storeStrong((id *)(a1 + 568), a2);
      objc_msgSend_removeObject_(*(void **)(a1 + 552), v6, (uint64_t)v4);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 548));
      v7 = *(NSObject **)(a1 + 8);
      v12 = MEMORY[0x24BDAC760];
      v13 = 3221225472;
      v14 = sub_233C0A3E4;
      v15 = &unk_2504EE768;
      v8 = v4;
      v16 = v8;
      v17 = a1;
      dispatch_sync(v7, &v12);
      objc_msgSend_deinitFromFactory(v8, v9, v10, v12, v13, v14, v15);

    }
    else
    {
      sub_234117B80(0, "NotSpecified");
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Controller we don't know about shutting down", buf, 2u);
      }

      if (sub_234114844(1u))
        sub_2341147D0(0, 1);
    }
  }

}

void sub_233C08990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_233C089B4(id a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  MTRServerCluster *v10;
  const char *v11;
  void *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  void *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  NSObject *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  char *v29;
  _QWORD block[6];
  uint8_t v31[8];
  uint8_t *v32;
  uint64_t v33;
  __n128 (*v34)(__n128 *, __n128 *);
  uint64_t (*v35)();
  const char *v36;
  __int128 v37;
  uint64_t v38;
  uint8_t buf[4];
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (a1)
  {
    sub_233C06408((_BOOL8)a1);
    if (objc_msgSend_count(*((void **)a1 + 69), v4, v5) == 1)
    {
      objc_msgSend_rootNodeEndpoint(MTRServerEndpoint, v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)*((_QWORD *)a1 + 75);
      *((_QWORD *)a1 + 75) = v8;

      v10 = [MTRServerCluster alloc];
      v12 = (void *)objc_msgSend_initWithClusterID_revision_(v10, v11, (uint64_t)&unk_250591980, &unk_250591998);
      objc_msgSend_setAcceptedCommands_(v12, v13, (uint64_t)&unk_250596F40);
      objc_msgSend_setGeneratedCommands_(v12, v14, (uint64_t)&unk_250596F58);
      objc_msgSend_accessGrantForAllNodesWithPrivilege_(MTRAccessGrant, v15, 3);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addAccessGrant_(v12, v17, (uint64_t)v16);

      objc_msgSend_addServerCluster_(*((void **)a1 + 75), v18, (uint64_t)v12);
      if ((sub_233C09E8C((uint64_t)a1, *((void **)a1 + 75)) & 1) != 0)
      {
        objc_msgSend_associateWithController_(*((void **)a1 + 75), v19, 0);
        *(_QWORD *)v31 = 0;
        v32 = v31;
        v33 = 0x4812000000;
        v34 = sub_233C06CAC;
        v35 = nullsub_14;
        v36 = "";
        v20 = *((_QWORD *)a1 + 1);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 3221225472;
        block[2] = sub_233C0A244;
        block[3] = &unk_2504EE950;
        block[4] = a1;
        block[5] = v31;
        dispatch_sync(v20, block);
        if (*((_DWORD *)v32 + 12))
        {
          sub_234117B80(0, "NotSpecified");
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v37 = *((_OWORD *)v32 + 3);
            v38 = *((_QWORD *)v32 + 8);
            v22 = sub_2341083CC((const char **)&v37, 1);
            *(_DWORD *)buf = 136315138;
            v40 = v22;
            _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "Failed to init provider delegate bridge: %s", buf, 0xCu);
          }

          if (sub_234114844(1u))
          {
            v37 = *((_OWORD *)v32 + 3);
            v38 = *((_QWORD *)v32 + 8);
            v29 = sub_2341083CC((const char **)&v37, 1);
            sub_2341147D0(0, 1);
          }
          objc_msgSend_shutdown(v3, v23, v24, v29);
          a1 = 0;
        }
        else
        {
          a1 = v3;
        }
        _Block_object_dispose(v31, 8);
      }
      else
      {
        sub_234117B80(0, "NotSpecified");
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v31 = 0;
          _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_ERROR, "Failed to add OTA endpoint on factory.  Why?", v31, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        objc_msgSend_shutdown(v3, v26, v27);
        a1 = 0;
      }

    }
    else
    {
      a1 = v3;
    }
  }

  return a1;
}

void sub_233C08CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);
  v12 = v11;

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_233C08EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_233C08EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  MTRDeviceControllerStartupParamsInternal *v15;
  const char *v16;
  void *v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  int v24;
  int v25;
  NSObject *v26;
  uint8_t v28[31];
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  if ((sub_233C09300(*(_QWORD *)(a1 + 32), a2, *(void **)(a1 + 40), &v34) & 1) == 0)
  {
    sub_234117B80(0, "NotSpecified");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Can't start on existing fabric: fabric matching failed", v28, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    v17 = 0;
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDeviceControllerFactory.mm";
    v21 = 671;
    goto LABEL_24;
  }
  v7 = v34;
  if (!v34)
  {
    sub_234117B80(0, "NotSpecified");
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "Can't start on existing fabric: fabric not found", v28, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    v17 = 0;
    *(_DWORD *)a4 = 216;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDeviceControllerFactory.mm";
    v21 = 677;
LABEL_24:
    *(_DWORD *)(a4 + 16) = v21;
    return v17;
  }
  sub_233C087E8(*(os_unfair_lock_s **)(a1 + 32));
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v9, (uint64_t)&v30, v35, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v31;
LABEL_5:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v31 != v12)
        objc_enumerationMutation(v8);
      v14 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v13);
      v29 = 1;
      if (!v14)
        break;
      objc_msgSend_isRunningOnFabric_fabricIndex_isRunning_(v14, v10, a2, *((unsigned __int8 *)v7 + 137), &v29);
      if (*(_DWORD *)v28)
      {
        sub_234117B80(0, "NotSpecified");
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "Can't tell what fabric a controller is running on.  Not safe to start.", v28, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        v24 = 690;
        v25 = 172;
        goto LABEL_35;
      }
      if (v29)
        break;
      if (v11 == ++v13)
      {
        v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v8, v10, (uint64_t)&v30, v35, 16);
        if (v11)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    sub_234117B80(0, "NotSpecified");
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Can't start on existing fabric: another controller is running on it", v28, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    v24 = 696;
    v25 = 3;
LABEL_35:
    *(_DWORD *)a4 = v25;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDeviceControllerFactory.mm";
    *(_DWORD *)(a4 + 16) = v24;

    v17 = 0;
    goto LABEL_36;
  }
LABEL_13:

  v15 = [MTRDeviceControllerStartupParamsInternal alloc];
  v17 = (void *)objc_msgSend_initForExistingFabric_fabricIndex_keystore_advertiseOperational_params_(v15, v16, a2, *((unsigned __int8 *)v7 + 137), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 544), *(_QWORD *)(a1 + 40));
  objc_msgSend_setProductAttestationAuthorityCertificates_(v17, v18, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 528));
  objc_msgSend_setCertificationDeclarationCertificates_(v17, v19, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536));
LABEL_36:

  return v17;
}

void sub_233C092B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233C09300(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  __SecKey *v27;
  NSObject *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44[3];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[10];
  uint8_t buf[24];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v7 = a3;
  if (a1)
  {
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 803);
    v47[0] = &off_250505A50;
    objc_msgSend_rootCertificate(v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v45 = 0uLL;
      v46 = 0;
      objc_msgSend_rootCertificate(v7, v11, v12);
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v16 = objc_msgSend_bytes(v13, v14, v15);
      v19 = objc_msgSend_length(v13, v17, v18);
      sub_233BF7114(buf, v16, v19);

      *(_OWORD *)v44 = *(_OWORD *)buf;
      sub_23413C364(v44, (uint64_t)v47, (uint64_t)&v45);

      if ((_DWORD)v45)
      {
        sub_234117B80(0, "NotSpecified");
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v42 = v45;
          v43 = v46;
          v23 = sub_2341083CC((const char **)&v42, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v23;
          _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "Can't extract public key from root certificate: %s", buf, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v40 = v45;
          v41 = v46;
          sub_2341083CC((const char **)&v40, 1);
          sub_2341147D0(0, 1);
        }
        goto LABEL_13;
      }
    }
    else
    {
      v45 = 0uLL;
      v46 = 0;
      objc_msgSend_nocSigner(v7, v11, v12);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = (__SecKey *)objc_msgSend_publicKey(v24, v25, v26);
      sub_233C01A50(v27, (uint64_t)v47, (uint64_t)&v45);

      if ((_DWORD)v45)
      {
        sub_234117B80(0, "NotSpecified");
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v38 = v45;
          v39 = v46;
          v29 = sub_2341083CC((const char **)&v38, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v29;
          _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Can't extract public key from MTRKeypair: %s", buf, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v36 = v45;
          v37 = v46;
          sub_2341083CC((const char **)&v36, 1);
          sub_2341147D0(0, 1);
        }
        goto LABEL_13;
      }
    }
    objc_msgSend_fabricID(v7, v20, v21);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_unsignedLongLongValue(v31, v32, v33);
    *a4 = sub_2341E2C40(a2, (uint64_t)v47, v34);

    v30 = 1;
    goto LABEL_15;
  }
LABEL_13:
  v30 = 0;
LABEL_15:

  return v30;
}

void sub_233C09608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C098F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_233C09924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  NSObject *v10;
  void *v11;
  MTRDeviceControllerStartupParamsInternal *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint8_t v17[16];
  uint8_t buf[8];
  uint64_t *v19;

  v19 = 0;
  if ((sub_233C09300(*(_QWORD *)(a1 + 32), a2, *(void **)(a1 + 40), &v19) & 1) == 0)
  {
    sub_234117B80(0, "NotSpecified");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Can't start on new fabric: fabric matching failed", buf, 2u);
    }

    v8 = 743;
    v9 = 172;
    if (!sub_234114844(1u))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (!v19)
  {
    v13 = [MTRDeviceControllerStartupParamsInternal alloc];
    v11 = (void *)objc_msgSend_initForNewFabric_keystore_advertiseOperational_params_(v13, v14, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 544), *(_QWORD *)(a1 + 40));
    objc_msgSend_setProductAttestationAuthorityCertificates_(v11, v15, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 528));
    objc_msgSend_setCertificationDeclarationCertificates_(v11, v16, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536));
    return v11;
  }
  sub_234117B80(0, "NotSpecified");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Can't start on new fabric that matches existing fabric", v17, 2u);
  }

  v8 = 749;
  v9 = 3;
  if (sub_234114844(1u))
LABEL_10:
    sub_2341147D0(0, 1);
LABEL_11:
  v11 = 0;
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RDeviceControllerFactory.mm";
  *(_DWORD *)(a4 + 16) = v8;
  return v11;
}

void sub_233C09AC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233C09B28(uint64_t a1)
{
  _BOOL4 v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  char *v7;
  uint8_t buf[4];
  __int128 v10;
  int v11;
  uint8_t v12[4];
  char *v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 648) == 0;
  sub_234117B80(0, "NotSpecified");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Can't pre-warm, Matter controller factory is not running", buf, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    v5 = 3;
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Pre-warming commissioning session", buf, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
    sub_234224418(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), buf);
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE928(*(_QWORD *)(a1 + 32) + 640, 1, buf);
    v5 = *(_DWORD *)buf;
    v14 = v10;
    v15 = v11;
    if (*(_DWORD *)buf)
    {
      sub_234117B80(0, "NotSpecified");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v5;
        v10 = v14;
        v11 = v15;
        v7 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)v12 = 136315138;
        v13 = v7;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Pre-warming failed: %s", v12, 0xCu);
      }

      if (sub_234114844(1u))
      {
        *(_DWORD *)buf = v5;
        v10 = v14;
        v11 = v15;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0, 1);
      }
      sub_2342243C8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    }
  }
  *(_DWORD *)buf = 2;
  *(_QWORD *)((char *)&v10 + 4) = "dwnfw_prewarm_commissioning";
  HIDWORD(v10) = v5;
  LOBYTE(v11) = 3;
  return sub_2341C4BEC((uint64_t)buf);
}

void sub_233C09DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_233C09DDC(_BOOL8 result)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  if (result)
  {
    v1 = result;
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 786);
    sub_234117B80(0, "NotSpecified");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Pre-warming done", v3, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(0, 2);
    return sub_2342243C8(*(_QWORD *)(v1 + 16));
  }
  return result;
}

uint64_t sub_233C09E8C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  char isEqual;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  unsigned __int16 v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t v50[128];
  uint8_t buf[4];
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (!a1)
  {
LABEL_20:
    v32 = 0;
    goto LABEL_21;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 632));
  if (objc_msgSend_count(*(void **)(a1 + 624), v4, v5) == 254)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 632));
    sub_234117B80(0, "NotSpecified");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_endpointID(v3, v7, v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 67109376;
      LOWORD(v52) = objc_msgSend_unsignedLongLongValue(v9, v10, v11);
      v52 = (unsigned __int16)v52;
      v53 = 1024;
      v54 = 254;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Can't add a server endpoint with endpoint ID %u, because we already have %u endpoints defined", buf, 0xEu);

    }
    if (sub_234114844(1u))
    {
      objc_msgSend_endpointID(v3, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_unsignedLongLongValue(v14, v15, v16);
      sub_2341147D0(0, 1);

    }
    goto LABEL_20;
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v17 = *(id *)(a1 + 624);
  v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v46, v50, 16);
  if (v21)
  {
    v22 = *(_QWORD *)v47;
    while (2)
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v47 != v22)
          objc_enumerationMutation(v17);
        v24 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        objc_msgSend_endpointID(v3, v19, v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_endpointID(v24, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        isEqual = objc_msgSend_isEqual_(v25, v29, (uint64_t)v28);

        if ((isEqual & 1) != 0)
        {

          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 632));
          sub_234117B80(0, "NotSpecified");
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            objc_msgSend_endpointID(v3, v34, v35);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend_unsignedLongLongValue(v36, v37, v38);
            *(_DWORD *)buf = 67109120;
            v52 = v39;
            _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_ERROR, "Trying to add a server endpoint with endpoint ID %u, which already exists", buf, 8u);

          }
          if (sub_234114844(1u))
          {
            objc_msgSend_endpointID(v3, v40, v41);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_unsignedLongLongValue(v42, v43, v44);
            sub_2341147D0(0, 1);

          }
          goto LABEL_20;
        }
      }
      v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v19, (uint64_t)&v46, v50, 16);
      if (v21)
        continue;
      break;
    }
  }

  objc_msgSend_addObject_(*(void **)(a1 + 624), v31, (uint64_t)v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 632));
  v32 = 1;
LABEL_21:

  return v32;
}

void sub_233C0A1AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

double sub_233C0A244(uint64_t a1, const char *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;

  objc_msgSend_registerMatterEndpoint(*(void **)(*(_QWORD *)(a1 + 32) + 600), a2, a3);
  v4 = (_QWORD *)operator new();
  sub_233CB3504(v4);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 608);
  *(_QWORD *)(v5 + 608) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 8);
  sub_233CB3A04(*(_QWORD *)v7, *(int **)(v7 + 56), (uint64_t)&v10);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  result = *(double *)&v10;
  *(_OWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v11;
  return result;
}

void sub_233C0A2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23493E704](v1, 0x81C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t sub_233C0A30C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  if (result)
  {
    v1 = result;
    result = sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 887);
    if (*(_BYTE *)(v1 + 544))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8);
      if (v2)
      {
        if (!*(_BYTE *)(v2 + 188))
        {
          v3 = sub_233C0A368();
          return sub_234252AC4((uint64_t)v3);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_233C0A368()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256152E78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256152E78))
  {
    qword_256152E48 = (uint64_t)&off_25051C0C0;
    dword_256152E50 = 0;
    word_256152E54 = 0;
    qword_256152E58 = 0;
    unk_256152E60 = 0;
    qword_256152E68 = 363730340;
    byte_256152E70 = 0;
    __cxa_guard_release(&qword_256152E78);
  }
  return &qword_256152E48;
}

void sub_233C0A3E4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];

  v4 = objc_msgSend_fabricIndex(*(void **)(a1 + 32), a2, a3);
  if ((_DWORD)v4)
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104) + 152))(v24, *(_QWORD *)(a1 + 40) + 104, v4);
  v7 = objc_msgSend_count(*(void **)(*(_QWORD *)(a1 + 40) + 552), v5, v6);
  v10 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v11 = *(_QWORD *)(v10 + 608);
    if (v11)
      sub_233CB3BE4(v11, *(void **)(a1 + 32));
  }
  else
  {
    if (*(_QWORD *)(v10 + 520))
    {
      v12 = sub_234031E78();
      MEMORY[0x23493E704](v12, 0x10E0C4077E0147ALL);
      v10 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(v10 + 520) = 0;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 608))
    {
      sub_233CB3B08();
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(v13 + 608);
      *(_QWORD *)(v13 + 608) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    }
    v15 = *(void **)(*(_QWORD *)(a1 + 40) + 600);
    if (v15)
    {
      objc_msgSend_unregisterMatterEndpoint(v15, v8, v9);
      objc_msgSend_invalidate(*(void **)(*(_QWORD *)(a1 + 40) + 600), v16, v17);
      sub_233C0A510(*(_QWORD *)(a1 + 40), *(void **)(*(_QWORD *)(a1 + 40) + 600));
      v18 = *(_QWORD *)(a1 + 40);
      v19 = *(void **)(v18 + 600);
      *(_QWORD *)(v18 + 600) = 0;

    }
  }
  objc_msgSend_shutDownCppController(*(void **)(a1 + 32), v8, v9);
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(void **)(v20 + 568);
  *(_QWORD *)(v20 + 568) = 0;

  v22 = *(_QWORD *)(a1 + 40);
  v23 = *(void **)(v22 + 560);
  if (v23 == *(void **)(a1 + 32))
  {
    *(_QWORD *)(v22 + 560) = 0;

  }
}

void sub_233C0A510(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  id v5;

  v3 = a2;
  if (a1)
  {
    v5 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 632));
    objc_msgSend_removeObject_(*(void **)(a1 + 624), v4, (uint64_t)v5);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 632));
    v3 = v5;
  }

}

void sub_233C0A564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  os_unfair_lock_s *v10;

  os_unfair_lock_unlock(v10);

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_233C0A580(unsigned __int8 *a1, int a2, int a3, int a4)
{
  unsigned __int8 *v4;
  void *v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v4 = a1;
  v28 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 975);
    sub_233C087E8((os_unfair_lock_s *)v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 137);
    v8 = *((id *)v4 + 70);
    v9 = *((id *)v4 + 71);
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 137);
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v10 = v7;
    v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v23, v27, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v24 != v15)
            objc_enumerationMutation(v10);
          v17 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
          if (objc_msgSend_fabricIndex(v17, v12, v13) == a2)
          {
            v4 = v17;

            goto LABEL_21;
          }
        }
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v23, v27, 16);
        if (v14)
          continue;
        break;
      }
    }

    if (a3 && v8 && v4[576] == a2)
    {
      v20 = (unsigned __int8 *)v8;
    }
    else
    {
      v4 = 0;
      if (!a4 || !v9)
        goto LABEL_21;
      if (objc_msgSend_fabricIndex(v9, v18, v19) != a2)
      {
        v4 = 0;
        goto LABEL_21;
      }
      v20 = (unsigned __int8 *)v9;
    }
    v4 = v20;
LABEL_21:

  }
  return v4;
}

void sub_233C0A74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_233C0A780(unsigned __int8 *a1, int a2)
{
  if (a1)
  {
    sub_233C0A580(a1, a2, 1, 1);
    a1 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_233C0A89C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C0ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_233C0AC4C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, double a7)
{
  id v13;
  id v14;
  id v15;
  const char *v16;
  void *v17;
  MTRDiagnosticLogsDownloader *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  id v23;

  v23 = a2;
  v13 = a3;
  v14 = a5;
  v15 = a6;
  if (a1)
  {
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 1101);
    v17 = *(void **)(a1 + 616);
    if (!v17)
    {
      v18 = objc_alloc_init(MTRDiagnosticLogsDownloader);
      v19 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v18;

      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 80);
      *(_QWORD *)(v20 + 24) = objc_msgSend_getBridge(*(void **)(a1 + 616), v21, v22);
      v17 = *(void **)(a1 + 616);
    }
    objc_msgSend_downloadLogFromNodeWithID_controller_type_timeout_queue_completion_(v17, v16, (uint64_t)v23, v13, a4, v14, v15, a7);
  }

}

void sub_233C0AD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_233C0AD5C(os_unfair_lock_s *a1, uint64_t *a2)
{
  id v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDeviceControllerFactory.mm", 1119);
    sub_233C087E8(a1);
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v4 = (id)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v28, v38, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v29 != v9)
            objc_enumerationMutation(v4);
          v11 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          objc_msgSend_compressedFabricID(v11, v6, v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = v12;
          if (v12 && objc_msgSend_unsignedLongLongValue(v12, v13, v14) == a2[1])
          {
            sub_234117B80(9u, "Controller");
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              v19 = objc_msgSend_fabricIndex(v11, v17, v18);
              v20 = *a2;
              v21 = HIDWORD(*a2);
              *(_DWORD *)buf = 67109632;
              v33 = v19;
              v34 = 1024;
              v35 = v21;
              v36 = 1024;
              v37 = v20;
              _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Notifying controller at fabric index %u about new operational node 0x%08X%08X", buf, 0x14u);
            }

            if (sub_234114844(2u))
            {
              v24 = objc_msgSend_fabricIndex(v11, v22, v23);
              v26 = HIDWORD(*a2);
              v27 = *a2;
              v25 = v24;
              sub_2341147D0(9u, 2);
            }
            objc_msgSend_operationalInstanceAdded_(v11, v22, *a2, v25, v26, v27);
          }

        }
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v28, v38, 16);
      }
      while (v8);
    }

  }
}

void sub_233C0AF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_233C0AFBC(_BYTE *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  _QWORD v11[5];
  id v12;

  v7 = a2;
  v8 = a3;
  if (a1)
  {
    sub_233C06408((_BOOL8)a1);
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 3221225472;
    v11[2] = sub_233C0B0A4;
    v11[3] = &unk_2504EE928;
    v11[4] = a1;
    v12 = v8;
    sub_233C074BC(a1, v7, v12, v11, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_233C0B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_233C0B0A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  id v9;
  uint64_t shouldAdvertiseOperational;
  MTRDeviceControllerStartupParamsInternal *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;

  v9 = a3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 544))
    shouldAdvertiseOperational = objc_msgSend_shouldAdvertiseOperational(*(void **)(a1 + 40), v7, v8);
  else
    shouldAdvertiseOperational = 0;
  v11 = [MTRDeviceControllerStartupParamsInternal alloc];
  v13 = (void *)objc_msgSend_initForNewController_fabricTable_keystore_advertiseOperational_params_error_(v11, v12, (uint64_t)v9, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504), shouldAdvertiseOperational, *(_QWORD *)(a1 + 40), a4);
  v16 = v13;
  if (v13)
  {
    objc_msgSend_productAttestationAuthorityCertificates(v13, v14, v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v17)
      objc_msgSend_setProductAttestationAuthorityCertificates_(v16, v18, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 528));
    objc_msgSend_certificationDeclarationCertificates(v16, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v20)
      objc_msgSend_setCertificationDeclarationCertificates_(v16, v21, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536));
  }

  return v16;
}

void sub_233C0B188(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C0B1A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  if (a1)
  {
    sub_233C06408(a1);
    v13 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233C0B2BC;
    block[3] = &unk_2504EE978;
    v15 = v9;
    v16 = v10;
    v17 = v11;
    v18 = v12;
    v19 = a1;
    dispatch_async(v13, block);

  }
}

void sub_233C0B2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_233C0B2BC(_QWORD *a1, const char *a2, uint64_t a3)
{
  void *v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  __int16 v10;
  int v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t result;
  unsigned __int8 v17[4];
  int v18;
  int v19;
  __int16 v20;
  __int16 v21;

  if (!a1[4] && !a1[5] && !a1[6] && !a1[7])
  {
    v17[0] = 0;
    sub_2341B1488(v17);
    v17[0] = 0;
    result = sub_2341B1B08((uint64_t)v17);
    if ((result & 1) == 0)
      return result;
    return sub_233C0A30C(a1[8]);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    v17[0] = 1;
    v18 = objc_msgSend_unsignedLongValue(v4, a2, a3);
    sub_2341B1488(v17);
  }
  sub_2341B1BB8((uint64_t)v17);
  v5 = sub_2341B1C28();
  if (v17[0])
  {
    v8 = sub_233C0FDD4(v17);
    LOWORD(v9) = *((_WORD *)v8 + 5);
    v10 = *((_WORD *)v8 + 4);
    v11 = *(_DWORD *)v8;
    LODWORD(v12) = *((_DWORD *)v8 + 1);
  }
  else
  {
    v11 = v5;
    v10 = (__int16)v6;
    v12 = HIDWORD(v5);
    v9 = (unint64_t)v6 >> 16;
  }
  v13 = (void *)a1[4];
  if (v13)
    v11 = objc_msgSend_unsignedLongValue(v13, v6, v7);
  v14 = (void *)a1[5];
  if (v14)
    LODWORD(v12) = objc_msgSend_unsignedLongValue(v14, v6, v7);
  v15 = (void *)a1[6];
  if (v15)
    v10 = objc_msgSend_unsignedLongValue(v15, v6, v7);
  v17[0] = 1;
  v18 = v11;
  v19 = v12;
  v20 = v10;
  v21 = v9;
  result = sub_2341B1B08((uint64_t)v17);
  if ((_DWORD)result)
    return sub_233C0A30C(a1[8]);
  return result;
}

uint64_t sub_233C0B3E4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 488);
  return result;
}

uint64_t sub_233C0B3F0(uint64_t a1)
{
  if (a1)
    return a1 + 104;
  else
    return 0;
}

uint64_t sub_233C0B4EC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504EE9C8;
  sub_233C0D7AC(a1 + 32, *(char **)(a1 + 40));
  sub_233C0D7FC(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_233C0B678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C0B784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C0B7D4()
{
  MTRControllerFactory *v0;
  void *v1;

  v0 = objc_alloc_init(MTRControllerFactory);
  v1 = (void *)qword_2561591C0;
  qword_2561591C0 = (uint64_t)v0;

}

void sub_233C0B854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C0B8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233C0B91C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C0B994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void MTRSetMessageReliabilityParameters(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a1;
  v6 = a3;
  v7 = a4;
  objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_233C0B1A8((uint64_t)v10, v11, v6, v6, v7);

}

void sub_233C0BA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_233C0BA7C(uint64_t a1)
{
  void *v2;

  sub_233C0BAB8(a1);
  *(_QWORD *)(a1 + 32) = 0;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 72) = 0;
}

void sub_233C0BAB8(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    j__free(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (!*(_QWORD *)(a1 + 24))
    *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 72) &= 0xFAu;
}

uint64_t sub_233C0BB18(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    sub_233C0BA7C(a1);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  sub_233C0BB74((void **)(a1 + 56));
  *(_QWORD *)(a1 + 48) = 0;
  sub_233C0BB74((void **)(a1 + 40));
  *(_QWORD *)(a1 + 32) = 0;
  sub_233C0BB74((void **)(a1 + 24));
  return a1;
}

void **sub_233C0BB74(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
  {
    j__free(v2);
    *a1 = 0;
  }
  return a1;
}

void sub_233C0BBA8(uint64_t a1)
{
  void (***v2)(_QWORD);

  if (!*(_BYTE *)(a1 + 33))
  {
    v2 = *(void (****)(_QWORD))(a1 + 24);
    if (v2)
    {
      (**v2)(*(_QWORD *)(a1 + 24));
      j__free(v2);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t sub_233C0BBF8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = 0;
  v3 = (_QWORD *)(a1 + 2432);
  do
  {
    v4 = a1 + v2;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = &off_250505A50;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_WORD *)(v4 + 136) = 0;
    *(_DWORD *)(v4 + 138) = 16842751;
    *(_QWORD *)(v4 + 144) = 0;
    sub_233C0BD1C(a1 + v2);
    v2 += 152;
  }
  while (v2 != 2432);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  *(_QWORD *)(a1 + 2456) = &off_250505A50;
  *(_WORD *)(a1 + 2568) = 0;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_DWORD *)(a1 + 2570) = 16842751;
  *(_QWORD *)(a1 + 2576) = 0;
  sub_233C0BD1C((uint64_t)v3);
  *(_QWORD *)(a1 + 2624) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  *(_BYTE *)(a1 + 2640) = 0;
  *(_BYTE *)(a1 + 2642) = 0;
  *(_WORD *)(a1 + 2644) = 0;
  *(_WORD *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  return a1;
}

void sub_233C0BCD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 2280; i != -152; i -= 152)
    sub_233C0BD1C(v1 + i);
  _Unwind_Resume(a1);
}

void sub_233C0BD1C(uint64_t a1)
{
  void (***v2)(_QWORD);

  *(_BYTE *)(a1 + 137) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 138) = -1;
  *(_BYTE *)(a1 + 104) = 0;
  if (!*(_BYTE *)(a1 + 140))
  {
    v2 = *(void (****)(_QWORD))(a1 + 144);
    if (v2)
    {
      (**v2)(*(_QWORD *)(a1 + 144));
      j__free(v2);
    }
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 140) = 256;
  *(_BYTE *)(a1 + 137) = 0;
  *(_QWORD *)a1 = 0;
}

_QWORD *sub_233C0BD8C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  if (*((_BYTE *)result + 2569) && (unint64_t)(result[304] - 1) <= 0xFFFFFFEFFFFFFFFELL)
  {
    v2 = result + 304;
    if ((~*((unsigned __int16 *)result + 1322) & 5) != 0)
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = xmmword_2342A93F0;
  if (!*((_BYTE *)result + 137) || (unint64_t)(*result - 1) >= 0xFFFFFFEFFFFFFFFFLL)
    return sub_233C0BE00((_QWORD *)a2);
  return result;
}

_QWORD *sub_233C0BE00(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;

  v2 = result[2];
  v1 = result[3];
  do
  {
    if (v2 < v1)
      result[2] = ++v2;
  }
  while (v2 != v1
       && (!*(_BYTE *)(*result + 152 * v2 + 137)
        || (unint64_t)(*(_QWORD *)(*result + 152 * v2) - 1) > 0xFFFFFFEFFFFFFFFELL));
  return result;
}

uint64_t sub_233C0BE50(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[1];
  v1 = a1[2];
  v3 = *a1;
  result = *a1 + 152 * v1;
  if (v2
    && *(_BYTE *)(v2 + 137)
    && (unint64_t)(*(_QWORD *)v2 - 1) <= 0xFFFFFFEFFFFFFFFELL
    && *(unsigned __int8 *)(v3 + 152 * v1 + 137) == *(unsigned __int8 *)(v2 + 137))
  {
    return v2;
  }
  return result;
}

uint64_t sub_233C0BE9C(uint64_t a1)
{
  uint64_t i;

  sub_233C0BD1C(a1 + 2432);
  for (i = 2280; i != -152; i -= 152)
    sub_233C0BD1C(a1 + i);
  return a1;
}

_QWORD *sub_233C0BEE4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_250515128;
  v2 = a1 + 5;
  sub_233C0BF48(a1 + 40);
  sub_233C0C088(a1 + 33);
  sub_233C0C1C8(a1 + 26);
  sub_233C0C308(a1 + 19);
  sub_233C0C448(a1 + 12);
  sub_233C0C588(v2);
  return a1;
}

_QWORD *sub_233C0BF48(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C07C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233C0C088(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C1BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233C0C1C8(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C2FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233C0C308(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C43C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233C0C448(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C57C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233C0C588(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!byte_25615DDA8 && *result)
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/Pool.h";
      v4 = 1024;
      v5 = 392;
      v6 = 2080;
      v7 = "Allocated() == 0";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233C0C6BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

void sub_233C0C6C8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504EE9C8;
  sub_233C0D7AC(a1 + 32, *(char **)(a1 + 40));
  sub_233C0D7FC(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x23493E704);
}

uint64_t sub_233C0C718@<X0>(_DWORD *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  const char *v11;
  uint64_t result;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a1[15] >= 2u)
  {
    sub_234117B80(0x24u, "Test");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = "(null)";
      if (a2)
        v11 = a2;
      *(_DWORD *)buf = 136315138;
      v18 = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "TestPersistentStorageDelegate::SyncGetKeyValue: Get key '%s'", buf, 0xCu);
    }

    if (sub_234114844(3u))
      sub_2341147D0(0x24u, 3);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3, a4);
  if (a1[15] >= 2u)
  {
    if (*(_DWORD *)a5 == 159)
    {
      sub_234117B80(0x24u, "Test");
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v16 = "(null)";
        if (a2)
          v16 = a2;
        *(_DWORD *)buf = 136315138;
        v18 = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "--> TestPersistentStorageDelegate::SyncGetKeyValue: Key '%s' is a poison key", buf, 0xCu);
      }

      result = sub_234114844(3u);
      if ((_DWORD)result)
        return sub_2341147D0(0x24u, 3);
    }
    else if (*(_DWORD *)a5 == 160)
    {
      sub_234117B80(0x24u, "Test");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = "(null)";
        if (a2)
          v14 = a2;
        *(_DWORD *)buf = 136315138;
        v18 = v14;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "--> TestPersistentStorageDelegate::SyncGetKeyValue: Key '%s' not found", buf, 0xCu);
      }

      result = sub_234114844(3u);
      if ((result & 1) != 0)
        return sub_2341147D0(0x24u, 3);
    }
  }
  return result;
}

uint64_t sub_233C0C9A4@<X0>(_DWORD *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  uint64_t result;
  NSObject *v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a1[15])
  {
    sub_234117B80(0x24u, "Test");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v15 = a2;
      v16 = 1024;
      v17 = a4;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "TestPersistentStorageDelegate::SyncSetKeyValue, Set key '%s' with data size %u", buf, 0x12u);
    }

    if (sub_234114844(3u))
      sub_2341147D0(0x24u, 3);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = (*(uint64_t (**)(_DWORD *, const char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2, a3, a4);
  if (a1[15] >= 2u && *(_DWORD *)a5 == 159)
  {
    sub_234117B80(0x24u, "Test");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = "(null)";
      if (a2)
        v13 = a2;
      *(_DWORD *)buf = 136315138;
      v15 = v13;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "--> TestPersistentStorageDelegate::SyncSetKeyValue: Key '%s' is a poison key", buf, 0xCu);
    }

    result = sub_234114844(3u);
    if ((_DWORD)result)
      return sub_2341147D0(0x24u, 3);
  }
  return result;
}

uint64_t sub_233C0CB90@<X0>(_DWORD *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  const char *v7;
  uint64_t result;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1[15])
  {
    sub_234117B80(0x24u, "Test");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = "(null)";
      if (a2)
        v7 = a2;
      *(_DWORD *)buf = 136315138;
      v14 = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "TestPersistentStorageDelegate::SyncDeleteKeyValue, Delete key '%s'", buf, 0xCu);
    }

    if (sub_234114844(3u))
      sub_2341147D0(0x24u, 3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = (*(uint64_t (**)(_DWORD *, const char *))(*(_QWORD *)a1 + 136))(a1, a2);
  if (a1[15])
  {
    if (*(_DWORD *)a3 == 159)
    {
      sub_234117B80(0x24u, "Test");
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = "(null)";
        if (a2)
          v12 = a2;
        *(_DWORD *)buf = 136315138;
        v14 = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "--> TestPersistentStorageDelegate::SyncDeleteKeyValue: Key '%s' is a poison key", buf, 0xCu);
      }

      result = sub_234114844(3u);
      if ((_DWORD)result)
        return sub_2341147D0(0x24u, 3);
    }
    else if (*(_DWORD *)a3 == 160)
    {
      sub_234117B80(0x24u, "Test");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = "(null)";
        if (a2)
          v10 = a2;
        *(_DWORD *)buf = 136315138;
        v14 = v10;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "--> TestPersistentStorageDelegate::SyncDeleteKeyValue: Key '%s' not found", buf, 0xCu);
      }

      result = sub_234114844(3u);
      if ((result & 1) != 0)
        return sub_2341147D0(0x24u, 3);
    }
  }
  return result;
}

uint64_t *sub_233C0CDFC(uint64_t a1, const void **a2)
{
  return sub_233C0D888((uint64_t **)(a1 + 32), a2, (uint64_t)a2);
}

uint64_t sub_233C0CE08(uint64_t result, char a2)
{
  *(_BYTE *)(result + 56) = a2;
  return result;
}

void sub_233C0CE10(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 40);
  sub_233C0D7AC(a1 + 32, *(char **)(a1 + 40));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

void sub_233C0CE40(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 16);
  sub_233C0D7FC(a1 + 8, *(_QWORD **)(a1 + 16));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t sub_233C0CE70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t *sub_233C0CE78@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  const void **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (const void **)result[1];
  v4 = result + 2;
  if (v3 != (const void **)(result + 2))
  {
    do
    {
      result = sub_233C0D888((uint64_t **)a2, v3 + 4, (uint64_t)(v3 + 4));
      v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = (const void **)v6;
        }
        while (!v7);
      }
      v3 = (const void **)v6;
    }
    while (v6 != v4);
  }
  return result;
}

void sub_233C0CF00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_233C0D7AC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_233C0CF18(uint64_t a1, const void **a2)
{
  return a1 + 16 != sub_233C0DD7C(a1 + 8, a2);
}

uint64_t sub_233C0CF48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60) = a2;
  return result;
}

void sub_233C0CF50(uint64_t a1)
{
  NSObject *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  const void **v6;
  const void **i;
  NSObject *v8;
  void *v9;
  const void **v10;
  const void **v11;
  char v12;
  _BYTE v13[12];
  uint8_t buf[8];
  char *v15[3];

  v15[2] = *(char **)MEMORY[0x24BDAC8D0];
  sub_234117B80(0x24u, "Test");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "TestPersistentStorageDelegate::DumpKeys: %u keys", buf, 8u);
  }

  if (sub_234114844(1u))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    sub_2341147D0(0x24u, 1);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(buf, a1);
  sub_233C0DE08(&v10, *(_QWORD **)buf, v15);
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v11 - v10));
  if (v11 == v10)
    v5 = 0;
  else
    v5 = v4;
  sub_233C0E194((uint64_t)v10, v11, (uint64_t)&v12, v5, 1);
  v6 = v10;
  for (i = v11; v6 != i; v6 += 3)
  {
    sub_234117B80(0x24u, "Test");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = v6;
      if (*((char *)v6 + 23) < 0)
        v9 = (void *)*v6;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)&v13[4] = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "  -> %s", v13, 0xCu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x24u, 1);
  }
  *(_QWORD *)v13 = &v10;
  sub_233C0E108((void ***)v13);
  sub_233C0D7AC((uint64_t)buf, v15[0]);
}

void sub_233C0D1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C0D1F0(char *__s@<X1>, uint64_t **a2@<X0>, void *a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  _OWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned __int16 v17;
  size_t v18;
  void *__p[2];
  char v20;
  void **v21;

  if (!a3 && *a4)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersis"
                          "tentStorageDelegate.h";
    v10 = 210;
    goto LABEL_28;
  }
  sub_233C0F5A8(__p, __s);
  v11 = sub_233C0DD7C((uint64_t)(a2 + 4), (const void **)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  if (a2 + 5 != (uint64_t **)v11)
  {
    *(_DWORD *)a5 = 159;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersis"
                          "tentStorageDelegate.h";
    v10 = 215;
    goto LABEL_28;
  }
  sub_233C0F5A8(__p, __s);
  v12 = ((uint64_t (*)(uint64_t **, void **))(*a2)[12])(a2, __p);
  v13 = v12;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 1) != 0)
      goto LABEL_10;
LABEL_17:
    *(_DWORD *)a5 = 160;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersis"
                          "tentStorageDelegate.h";
    v10 = 219;
    goto LABEL_28;
  }
  if ((v12 & 1) == 0)
    goto LABEL_17;
LABEL_10:
  sub_233C0F5A8(__p, __s);
  v21 = __p;
  v14 = sub_233C0F658(a2 + 1, (const void **)__p, (uint64_t)&unk_2342A9433, (_OWORD **)&v21);
  if (v20 < 0)
    operator delete(__p[0]);
  v15 = (_BYTE *)*((_QWORD *)v14 + 7);
  v16 = (_BYTE *)*((_QWORD *)v14 + 8);
  v17 = (_WORD)v16 - (_WORD)v15;
  if ((unint64_t)(v16 - v15) >= 0x10000)
  {
    *(_DWORD *)a5 = 159;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersis"
                          "tentStorageDelegate.h";
    v10 = 225;
  }
  else if (v16 != v15 || *a4)
  {
    if (a3)
    {
      if ((unsigned __int16)*a4 >= v17)
        v18 = (unsigned __int16)((_WORD)v16 - (_WORD)v15);
      else
        v18 = (unsigned __int16)*a4;
      *a4 = v18;
      memcpy(a3, v15, v18);
      if ((unsigned __int16)*a4 >= v17)
        *(_DWORD *)a5 = 0;
      else
        *(_DWORD *)a5 = 25;
      *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPers"
                            "istentStorageDelegate.h";
      v10 = 236;
    }
    else
    {
      *(_DWORD *)a5 = 25;
      *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPers"
                            "istentStorageDelegate.h";
      v10 = 230;
    }
  }
  else
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersis"
                          "tentStorageDelegate.h";
    v10 = 229;
  }
LABEL_28:
  *(_DWORD *)(a5 + 16) = v10;
}

void sub_233C0D418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_233C0D43C(uint64_t a1@<X0>, char *a2@<X1>, const void *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  void *v15;
  _OWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19[2];
  char v20;
  void *__p[2];
  uint64_t v22;
  void **v23;

  if (*(_BYTE *)(a1 + 56))
    goto LABEL_5;
  v10 = a1 + 32;
  sub_233C0F5A8(__p, a2);
  v11 = sub_233C0DD7C(v10, (const void **)__p);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (a1 + 40 == v11)
  {
    if (a3)
    {
      __p[0] = 0;
      __p[1] = 0;
      v22 = 0;
      sub_233C0F760(__p, a3, (uint64_t)a3 + a4, a4);
      sub_233C0F5A8(v19, a2);
      v23 = v19;
      v14 = sub_233C0F658((uint64_t **)(a1 + 8), (const void **)v19, (uint64_t)&unk_2342A9433, (_OWORD **)&v23);
      v15 = (void *)v14[7];
      if (v15)
      {
        v14[8] = v15;
        operator delete(v15);
        v14[7] = 0;
        v14[8] = 0;
        v14[9] = 0;
      }
      *(_OWORD *)(v14 + 7) = *(_OWORD *)__p;
      v14[9] = v22;
      __p[1] = 0;
      v22 = 0;
      __p[0] = 0;
      if (v20 < 0)
      {
        operator delete(v19[0]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      v13 = 0;
      v12 = 262;
    }
    else if (a4)
    {
      v12 = 256;
      v13 = 47;
    }
    else
    {
      sub_233C0F5A8(__p, a2);
      v19[0] = __p;
      v16 = sub_233C0F658((uint64_t **)(a1 + 8), (const void **)__p, (uint64_t)&unk_2342A9433, (_OWORD **)v19);
      v18 = (_QWORD *)v16 + 7;
      v17 = (void *)*((_QWORD *)v16 + 7);
      if (v17)
      {
        *((_QWORD *)v16 + 8) = v17;
        operator delete(v17);
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
      }
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      if (SHIBYTE(v22) < 0)
        operator delete(__p[0]);
      v13 = 0;
      v12 = 253;
    }
  }
  else
  {
LABEL_5:
    v12 = 244;
    v13 = 159;
  }
  *(_DWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersiste"
                        "ntStorageDelegate.h";
  *(_DWORD *)(a5 + 16) = v12;
}

void sub_233C0D61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_233C0D670(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  void *__p[2];
  char v13;

  if (*(_BYTE *)(a1 + 56))
    goto LABEL_5;
  v6 = a1 + 32;
  sub_233C0F5A8(__p, a2);
  v7 = sub_233C0DD7C(v6, (const void **)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (a1 + 40 != v7)
  {
LABEL_5:
    v8 = 270;
    v9 = 159;
    goto LABEL_6;
  }
  sub_233C0F5A8(__p, a2);
  v10 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 96))(a1, __p);
  v11 = v10;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if ((v11 & 1) != 0)
      goto LABEL_9;
LABEL_13:
    v8 = 274;
    v9 = 160;
    goto LABEL_6;
  }
  if ((v10 & 1) == 0)
    goto LABEL_13;
LABEL_9:
  sub_233C0F5A8(__p, a2);
  sub_233C0F818((uint64_t **)(a1 + 8), (const void **)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  v9 = 0;
  v8 = 276;
LABEL_6:
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/TestPersiste"
                        "ntStorageDelegate.h";
  *(_DWORD *)(a3 + 16) = v8;
}

void sub_233C0D788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_233C0D7AC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_233C0D7AC(a1, *(_QWORD *)a2);
    sub_233C0D7AC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_233C0D7FC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_233C0D7FC(a1, *a2);
    sub_233C0D7FC(a1, a2[1]);
    sub_233C0D844((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_233C0D844(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *sub_233C0D888(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_233C0D904((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_233C0D9A0((uint64_t)a1, a3, (uint64_t)&v7);
    sub_233C0DA3C(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_233C0D904(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_233C0DA90(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_233C0DA90(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *sub_233C0D9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_233C0DAF8(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_233C0DA20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_233C0DD30(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_233C0DA3C(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_233C0DB98(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL sub_233C0DA90(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void *sub_233C0DAF8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_233C0DB84();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_233C0DB84()
{
  sub_233C0497C("basic_string");
}

uint64_t *sub_233C0DB98(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_233C0DD30(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_233C0DD7C(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_233C0DA90(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_233C0DA90(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

_QWORD *sub_233C0DE08(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_233C0DE8C(a1, a2, a3, v4);
  return a1;
}

_QWORD *sub_233C0DE8C(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_233C0DF10(result, a4);
    result = sub_233C0DFA4((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_233C0DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_233C0E108(&a9);
  _Unwind_Resume(a1);
}

char *sub_233C0DF10(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_233C04968();
  result = (char *)sub_233C0DF60((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_233C0DF60(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_233C04A24();
  return operator new(24 * a2);
}

_QWORD *sub_233C0DFA4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *__dst)
{
  _QWORD *v4;
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[3];
  char v13;
  void *v14;
  char *v15;

  v4 = __dst;
  v14 = __dst;
  v15 = (char *)__dst;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_233C0DAF8(v4, (void *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        v4[2] = v6[6];
        *(_OWORD *)v4 = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v4 = v15 + 24;
      v15 += 24;
      v6 = v9;
    }
    while (v9 != a3);
  }
  v13 = 1;
  sub_233C0E090((uint64_t)v12);
  return v4;
}

void sub_233C0E07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_233C0E090((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_233C0E090(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_233C0E0C4(a1);
  return a1;
}

void sub_233C0E0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void sub_233C0E108(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_233C0E148((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_233C0E148(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_233C0E194(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

LABEL_1:
  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_233C0DA90(a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        sub_233C0E75C(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_233C0EDF0((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_233C0EED8((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_233C0E538((uint64_t)v10, a2, a3);
          else
            sub_233C0E658(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_233C0E75C(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_233C0E75C(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_233C0E75C(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_233C0E75C(v19, v20, a2 - 9, a3);
            sub_233C0E75C(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_233C0DA90(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = sub_233C0E8A4((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_233C0EA34((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_233C0EBC0(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!sub_233C0EBC0(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_233C0E194(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_233C0EFF8((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

void sub_233C0E538(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (sub_233C0DA90(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_233C0DA90(a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_233C0E658(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (sub_233C0DA90(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_233C0DA90(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_233C0E75C(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_233C0DA90(a4, a2, a1);
  result = sub_233C0DA90(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_233C0DA90(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_233C0DA90(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_233C0E8A4(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_233C0DA90(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_233C0DA90(a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_233C0DA90(a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_233C0DA90(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_233C0DA90(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_233C0DA90(a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t sub_233C0EA34(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_233C0DA90(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_233C0DA90(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_233C0DA90(a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (sub_233C0DA90(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_233C0DA90(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL sub_233C0EBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (sub_233C0DA90(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_233C0E75C((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_233C0EDF0(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_233C0EED8(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_233C0E75C((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_233C0DA90(a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_233C0DA90(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_233C0EDF0(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_233C0E75C((const void **)a1, a2, a3, a5);
  if (sub_233C0DA90(a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (sub_233C0DA90(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_233C0DA90(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_233C0EED8(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_233C0EDF0(a1, a2, a3, a4, a6);
  if (sub_233C0DA90(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (sub_233C0DA90(a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (sub_233C0DA90(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_233C0DA90(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *sub_233C0EFF8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_233C0F240(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_233C0DA90(a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_233C0F240(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_233C0F3D4(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_233C0F4AC(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_233C0F228(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_233C0F240(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_233C0DA90(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_233C0DA90(a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_233C0DA90(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_233C0DA90(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_233C0F3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_233C0DA90(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_233C0F4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_233C0DA90(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_233C0DA90(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

_QWORD *sub_233C0F5A8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_233C0DB84();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_OWORD *sub_233C0F658(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_233C0D904((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    sub_233C0DA3C(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_233C0F71C((uint64_t)v12, 0);
  }
  return v7;
}

void sub_233C0F71C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_233C0D844((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *sub_233C0F760(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_233C0F7D8(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_233C0F7BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_233C0F7D8(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_233C04968();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t sub_233C0F818(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_233C0DD7C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_233C0F870(a1, v3);
  sub_233C0D844((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_233C0F870(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_233C0F8E0(v6, a2);
  return v3;
}

uint64_t *sub_233C0F8E0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_233C0FC64()
{
  JUMPOUT(0x23493E704);
}

void sub_233C0FC78(unsigned int a1@<W3>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (a1 >= 6)
    v2 = 47;
  else
    v2 = 0;
  if (a1 >= 6)
    v3 = 92;
  else
    v3 = 90;
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/credentials/CertificateValidityPolicy.h";
  *(_DWORD *)(a2 + 16) = v3;
}

double sub_233C0FCA8(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 196612;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_250515128;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = a1 + 56;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 128) = a1 + 112;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 168;
  *(_QWORD *)(a1 + 184) = a1 + 168;
  *(_BYTE *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 232) = a1 + 224;
  *(_QWORD *)(a1 + 240) = a1 + 224;
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = a1 + 280;
  *(_QWORD *)(a1 + 288) = a1 + 280;
  *(_BYTE *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 344) = a1 + 336;
  *(_QWORD *)(a1 + 352) = a1 + 336;
  return result;
}

void sub_233C0FD68()
{
  JUMPOUT(0x23493E704);
}

void sub_233C0FD84(uint64_t a1, const char *a2, uint64_t a3)
{
  id v3;

  objc_msgSend_sharedInstance(MTRDeviceControllerFactory, a2, a3);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_233C09DDC((_BOOL8)v3);

}

void sub_233C0FDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_BYTE *sub_233C0FDD4(_BYTE *a1)
{
  if (!*a1)
    sub_2342551A8();
  return a1 + 4;
}

os_unfair_lock_s *sub_233C0FDF4(os_unfair_lock_s *a1, void *a2, void *a3, int a4, char a5)
{
  id v9;
  const char *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const char *v18;
  char isEqual;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  os_unfair_lock_s *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v29;
  uint8_t buf[4];
  unint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v12 = a3;
  if (!a1)
    goto LABEL_23;
  v13 = objc_msgSend_unsignedLongLongValue(v9, v10, v11);
  v16 = v13;
  if (HIDWORD(v13))
  {
    sub_234117B80(0, "NotSpecified");
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v31 = v16;
      _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_ERROR, "MTRServerAttribute provided too-large attribute ID: 0x%llx", buf, 0xCu);
    }

    if (!sub_234114844(1u))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (((unsigned __int16)((unsigned __int16)v13 >> 12) > 4u || WORD1(v13) >= 0xFFF5u)
    && (WORD1(v13) || (unsigned __int16)(v13 + 4096) >= 0xFFFu))
  {
    sub_234117B80(0, "NotSpecified");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v31) = v16;
      _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "MTRServerAttribute provided invalid attribute ID: 0x%x", buf, 8u);
    }

    if (!sub_234114844(1u))
      goto LABEL_23;
    goto LABEL_22;
  }
  if ((_DWORD)v13 == 65532)
  {
    if (a4 == 1)
    {
      objc_msgSend_objectForKeyedSubscript_(v12, v14, (uint64_t)CFSTR("type"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      isEqual = objc_msgSend_isEqual_(CFSTR("UnsignedInteger"), v18, (uint64_t)v17);

      if ((isEqual & 1) != 0)
        goto LABEL_10;
      sub_234117B80(0, "NotSpecified");
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v31 = (unint64_t)v12;
        _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "MTRServerAttribute for FeatureMap provided with value that is not an unsigned integer: %@", buf, 0xCu);
      }

      if (!sub_234114844(1u))
      {
LABEL_23:
        v24 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      sub_234117B80(0, "NotSpecified");
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v31) = a4;
        _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "MTRServerAttribute for FeatureMap provided with invalid read privilege %d", buf, 8u);
      }

      if (!sub_234114844(1u))
        goto LABEL_23;
    }
LABEL_22:
    sub_2341147D0(0, 1);
    goto LABEL_23;
  }
LABEL_10:
  v20 = (void *)objc_msgSend_copy(v9, v14, v15);
  v23 = (void *)objc_msgSend_copy(v12, v21, v22);
  a1 = sub_233C101C4(a1, v20, v23, a4, a5);

  v24 = a1;
LABEL_24:

  return v24;
}

void sub_233C10170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

os_unfair_lock_s *sub_233C101C4(os_unfair_lock_s *a1, void *a2, void *a3, char a4, char a5)
{
  id v10;
  id v11;
  id *v12;
  os_unfair_lock_s *v13;
  objc_super v15;

  v10 = a2;
  v11 = a3;
  if (!a1)
    goto LABEL_5;
  v15.receiver = a1;
  v15.super_class = (Class)MTRServerAttribute;
  v12 = (id *)-[os_unfair_lock_s init](&v15, sel_init);
  a1 = (os_unfair_lock_s *)v12;
  if (!v12)
    goto LABEL_5;
  *((_DWORD *)v12 + 2) = 0;
  objc_storeStrong(v12 + 6, a2);
  LOBYTE(a1[10]._os_unfair_lock_opaque) = a4;
  BYTE1(a1[10]._os_unfair_lock_opaque) = a5;
  *(_QWORD *)&a1[8]._os_unfair_lock_opaque = 0xFFFFFFFF0000FFFFLL;
  if (sub_233C102D4(a1, v11, 0))
  {
    a1 = a1;
    v13 = a1;
  }
  else
  {
LABEL_5:
    v13 = 0;
  }

  return v13;
}

void sub_233C102A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233C102D4(os_unfair_lock_s *a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  const char *v7;
  const char *v8;
  id v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  NSObject *v21;
  id v22;
  const char *v23;
  void *v24;
  void *v25;
  id v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  void *v34;
  id WeakRetained;
  const char *v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  unsigned __int16 v41;
  const char *v42;
  uint64_t v43;
  unsigned __int16 v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v51;
  id v52;
  int v53;
  void *v54;
  void *v55;
  id obj;
  os_unfair_lock_s *v57;
  void *v58;
  _QWORD v59[5];
  id v60;
  uint64_t v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unsigned __int8 v67;
  uint8_t buf[4];
  _BYTE v69[10];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v58 = v5;
  if (!a1)
  {
    v49 = 0;
    goto LABEL_43;
  }
  objc_msgSend_objectForKeyedSubscript_(v5, v6, (uint64_t)CFSTR("type"));
  v53 = a3;
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = a1;
  if (objc_msgSend_isEqual_(CFSTR("Array"), v7, (uint64_t)v55))
  {
    objc_msgSend_objectForKeyedSubscript_(v58, v8, (uint64_t)CFSTR("value"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      sub_234117B80(0, "NotSpecified");
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v69 = v58;
        _os_log_impl(&dword_233BF3000, v37, OS_LOG_TYPE_ERROR, "MTRServerAttribute value claims to be a list but isn't: %@", buf, 0xCu);
      }

      if (sub_234114844(1u))
        sub_2341147D0(0, 1);
      v67 = 0;

      goto LABEL_42;
    }
    v9 = v54;
    v10 = (void *)MEMORY[0x24BDBCEB8];
    v52 = v9;
    v13 = objc_msgSend_count(v9, v11, v12);
    objc_msgSend_arrayWithCapacity_(v10, v14, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v15)
    {
      v67 = 0;
LABEL_41:

      goto LABEL_42;
    }
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    obj = v52;
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v63, v70, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v64;
      while (2)
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v64 != v18)
            objc_enumerationMutation(obj);
          v20 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            sub_234117B80(0, "NotSpecified");
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "MTRServerAttribute value array should contain dictionaries", buf, 2u);
            }

            if (sub_234114844(1u))
              sub_2341147D0(0, 1);
          }
          v22 = v20;
          objc_msgSend_objectForKeyedSubscript_(v22, v23, (uint64_t)CFSTR("data"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v62 = 0;
          sub_233CE4318(v24, &v62);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = v62;

          if (!v25)
          {
            v67 = 0;

            goto LABEL_41;
          }
          objc_msgSend_addObject_(v15, v27, (uint64_t)v25);

        }
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v63, v70, 16);
        if (v17)
          continue;
        break;
      }
    }

    a1 = v57;
    goto LABEL_20;
  }
  v61 = 0;
  sub_233CE4318(v58, &v61);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
LABEL_20:
    os_unfair_lock_lock(a1 + 2);
    v31 = objc_msgSend_copy(v58, v29, v30);
    v32 = *(void **)&v57[6]._os_unfair_lock_opaque;
    *(_QWORD *)&v57[6]._os_unfair_lock_opaque = v31;

    sub_234117B80(0, "NotSpecified");
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      sub_233C10AE4(v57);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)v69 = v34;
      _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_DEFAULT, "Attribute value updated: %@", buf, 0xCu);

    }
    if (sub_234114844(2u))
    {
      sub_233C10AE4(v57);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      sub_2341147D0(0, 2);

    }
    WeakRetained = objc_loadWeakRetained((id *)&v57[4]);
    if (WeakRetained)
    {
      v59[0] = MEMORY[0x24BDAC760];
      v59[1] = 3221225472;
      v59[2] = sub_233C10B78;
      v59[3] = &unk_2504EE768;
      v59[4] = v57;
      v60 = v15;
      objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(WeakRetained, v36, (uint64_t)v59, 0);

    }
    else
    {
      if (v53)
      {
        sub_234117B80(0, "NotSpecified");
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          v41 = objc_msgSend_unsignedLongLongValue(*(void **)&v57[12]._os_unfair_lock_opaque, v39, v40) >> 16;
          v44 = objc_msgSend_unsignedLongLongValue(*(void **)&v57[12]._os_unfair_lock_opaque, v42, v43);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v69 = v41;
          *(_WORD *)&v69[4] = 1024;
          *(_DWORD *)&v69[6] = v44;
          _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_DEFAULT, "Not publishing value for attribute 0x%04X_%04X; not bound to a controller",
            buf,
            0xEu);
        }

        if (sub_234114844(2u))
        {
          objc_msgSend_unsignedLongLongValue(*(void **)&v57[12]._os_unfair_lock_opaque, v45, v46);
          objc_msgSend_unsignedLongLongValue(*(void **)&v57[12]._os_unfair_lock_opaque, v47, v48);
          sub_2341147D0(0, 2);
        }
      }
      objc_storeStrong((id *)&v57[14], v15);
    }
    v67 = 1;

    os_unfair_lock_unlock(a1 + 2);
    goto LABEL_42;
  }
  v67 = 0;
LABEL_42:

  v49 = v67;
LABEL_43:

  return v49;
}

void sub_233C108D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  os_unfair_lock_s *v20;
  void *v21;

  os_unfair_lock_unlock(v20);
  _Unwind_Resume(a1);
}

void sub_233C10AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

os_unfair_lock *sub_233C10AE4(os_unfair_lock *a1)
{
  os_unfair_lock *v1;
  void *v2;
  uint64_t os_unfair_lock_opaque_low;
  uint64_t os_unfair_lock_opaque_high;
  uint64_t os_unfair_lock_opaque;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int16 v11;
  const char *v12;

  if (a1)
  {
    v1 = a1;
    os_unfair_lock_assert_owner(a1 + 2);
    v2 = (void *)MEMORY[0x24BDD17C8];
    os_unfair_lock_opaque_low = LOWORD(v1[8]._os_unfair_lock_opaque);
    os_unfair_lock_opaque_high = HIWORD(v1[9]._os_unfair_lock_opaque);
    os_unfair_lock_opaque = (unsigned __int16)v1[9]._os_unfair_lock_opaque;
    v8 = objc_msgSend_unsignedLongLongValue(*(void **)&v1[12]._os_unfair_lock_opaque, v6, v7) >> 16;
    v11 = objc_msgSend_unsignedLongLongValue(*(void **)&v1[12]._os_unfair_lock_opaque, v9, v10);
    objc_msgSend_stringWithFormat_(v2, v12, (uint64_t)CFSTR("<MTRServerAttribute endpoint %u, cluster 0x%04X_%04X, id 0x%04X_%04X, value '%@'>"), os_unfair_lock_opaque_low, os_unfair_lock_opaque_high, os_unfair_lock_opaque, v8, v11, *(_QWORD *)&v1[6]._os_unfair_lock_opaque);
    a1 = (os_unfair_lock *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

void sub_233C10B78(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const char *v3;
  char isEqual;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned int v9;
  int v10;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 32) + 8);
  os_unfair_lock_lock(v2);
  isEqual = objc_msgSend_isEqual_(*(void **)(*(_QWORD *)(a1 + 32) + 56), v3, *(_QWORD *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 56), *(id *)(a1 + 40));
  if ((isEqual & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_WORD *)(v7 + 32);
    v9 = *(_DWORD *)(v7 + 36);
    v10 = objc_msgSend_unsignedLongLongValue(*(void **)(v7 + 48), v5, v6);
    sub_233D48340(v8, v9, v10);
  }
  os_unfair_lock_unlock(v2);
}

void sub_233C10BF4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C10C48(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C10E90(_Unwind_Exception *a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;

  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_233C110A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_233C1117C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_233C11314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C113A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_233C115F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234106D88(a1, (uint64_t)a3);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
    sub_23411814C(v5);
  v6 = *(_QWORD *)(a1 + 72);
  v8 = v6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (*a2)
  {
    sub_23411814C(*a2);
    v6 = v8;
  }
  *a2 = v6;
  v8 = 0;
  return sub_233CAF128(&v8);
}

void sub_233C1165C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_233CAF128((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_233C11670(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
    sub_23411814C(v4);
  *(_QWORD *)(a1 + 72) = *a2;
  *a2 = 0;
  return sub_234104498(a1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24));
}

void sub_233C117B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C11908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C119A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C11BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C11D30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C11E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C11F24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C122F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C12420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C124B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C127C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C12950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C12A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C12B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C12D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C12E50(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C12FB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C13054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C13368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C13578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1361C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C136C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C13754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C13B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C13CD0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C13D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C13E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C13EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C141D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C14430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C14564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C145F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C147EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1493C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C14A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C14B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C14E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C14F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C15090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1510C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C152CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1540C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C15568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C15600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C15868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C159CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C15AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C15B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C15D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C15E44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C15F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C15FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C16174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C162B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C163A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C16424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C165E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C16724(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C16878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C16910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C16B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C16CA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C16D9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C16E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C16FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C17118(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C17298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1733C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C175AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C17710(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C178BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C17964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C17C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C17DA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C17F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C17FFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C182C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C18434(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1860C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C186C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C189CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C18B40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C18C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C18D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C18F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C190C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1926C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C19314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C195E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C19758(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C19904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C199AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C19C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C19DE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C19FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1A070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1A37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1A4F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1A644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1A6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1AA70(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1AB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1AC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1AE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1AF70(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1B0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1B15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1B3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1B518(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1B698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1B73C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1B9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1BB38(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1BC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1BD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1C0E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1C260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1C304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1C59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1C700(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1C854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1C8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1CB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1CCA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1CDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1CE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1D250(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1D3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1D474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1D70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1D870(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1D9C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1DA5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1DCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1DE18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1DF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1E004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1E260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1E3C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1E540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1E5E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1E87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1E9E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1EB34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1EBCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1EF88(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1F108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1F1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C1F5A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C1F69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1F718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1F858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C1F9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C1FAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C20110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C2030C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2054C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C20650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C20990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C20E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_233C20E2C(_BYTE *a1)
{
  if (!*a1)
    sub_234255260();
  return a1 + 4;
}

void sub_233C20EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C20FAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2105C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C212CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C21430(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C21558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C215EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C218FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C21A88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C21B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C21BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C21CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C21F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C22080(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C22258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2232C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C22678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C227EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C22950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C229E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C22C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C22D7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C22EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C22F40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C23250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C23418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C23598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2363C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C238E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C23A54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C23B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C23C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C23F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C240F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C241DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C24258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C24418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C24558(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C24688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2471C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C24A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C24BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C24D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C24DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C250D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C25240(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C253C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C25464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C25E10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_233C25EA4(_BYTE *a1)
{
  if (!*a1)
    sub_234255260();
  return a1 + 8;
}

void sub_233C25F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C260E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C26218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233C2625C()
{
  JUMPOUT(0x233C26250);
}

void sub_233C266F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C26884(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C26930(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C269F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C26AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C26D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C26EAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C26F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C27020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C270D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C274D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C27680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C27764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C27A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C27DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_233C27DCC(_BYTE *a1)
{
  if (!*a1)
    sub_234255260();
  return a1 + 1;
}

void sub_233C27E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C27F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C27FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C28290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C283F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2854C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C285EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C28904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C28B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C28C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C28CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C28DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C29078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C291E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C29294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2935C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C29420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C296F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C29860(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C298F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2997C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C29A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C29D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C29EF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2A06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2A110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2A3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2A544(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2A604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2A6EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2A7AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C2AD28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2ADEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2AEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2AF64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2B1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2B338(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2B42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2B4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2B7A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2B8A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2B934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2BC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C2BDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2BE88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2BF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2C024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2C2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2C43C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2C4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2C52C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2C5C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2C8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C2C9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2CAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2CB50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2CE50(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2CF44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2CFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2D180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2D2C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2D3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2D430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2D730(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2D824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2D8A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2DA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2DBA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2DD20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2DDC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2E054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2E1B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2E2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2E368(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2E5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C2E740(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2E7E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2E888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2E918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C2EF40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2F010(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2F098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C2F4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2F544(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2F5EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2F67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C2FAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C2FC7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C2FD9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C2FE2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C30080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C301D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C302C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C303F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C304D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C30844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C309C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C30AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C30B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C30D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C30EC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C30FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C31038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C311F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C31338(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C313D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C31480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C31524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C31754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C318A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C31960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C31A08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C31AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C3225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  sub_233CAF128(&a44);
  _Unwind_Resume(a1);
}

void sub_233C324EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C32614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C326A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C329EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C32A80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C32B08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C32BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C32EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C33000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C330A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C33168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C33218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C334A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C33610(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C336C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C33770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C33830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C33B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C33CE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C33DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C33EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C33FF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233C343B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C34530(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C345DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C346A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C34768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C34A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C34BA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C34CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C34D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C350AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C352FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C35420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C354B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C356D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3582C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C35954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C359E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C35BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C35D2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C35DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C35E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C35F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C36148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3629C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C36340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C363E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C36478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C369C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C36B9C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C36CC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C36D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C36F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3709C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3712C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C371B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C37240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C37580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C3794C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C37AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C37B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C37D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C37EA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C37F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C38018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C381F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C38334(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C383C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C38450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C384DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C387FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C38A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C38AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C38C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C38CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C39080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C391F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C392C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C39350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3965C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C39768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C398B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3995C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C39BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C39D5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C39E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C39F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3A10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3A25C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3A32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3A3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3A6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C3A7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3A8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3A978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3ACC0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3ADB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3AE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3AFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3B130(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3B258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3B2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3B630(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3B758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3B7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3BB30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3BC24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3BCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3BE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3BFA0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3C094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3C110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3C2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3C410(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3C504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3C580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3C740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3C880(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3C974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3C9F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3CCF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3CD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3CDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3CE64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C3D414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3D568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3D5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3D940(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3DA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3DACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3DDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C3DFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3E0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3E154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3E34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3E49C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3E5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3E654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3E84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3E99C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3EA98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3EB28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3EE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C3F000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3F120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3F1B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C3F4F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C3F5F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3F684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C3FB5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3FC7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C3FD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C3FF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C40054(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C40150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C401E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C404F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C406B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C407D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C40868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C40A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C40BB0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C40CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C40D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C41214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C41358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C413F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C417D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C418F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C41988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C41B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C41CD0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C41DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C41E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4216C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C42334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C42420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4249C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4279C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C428C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C42954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C42B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C42C9C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C42DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C42E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4319C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4336C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C43420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C437B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4392C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C43A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C43AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C43CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C43E2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C43F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C43F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4415C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4429C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C44390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4440C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C445CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4470C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C44800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4487C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C44A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C44B7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C44C70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C44CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C44EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C44FEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C45070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C450D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C45160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C45474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C45710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C45830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C458AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C45A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C45BAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C45CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C45D1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C45EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4601C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C460A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C46108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C46190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C464A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C46740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C46860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C468DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C46A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C46BDC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C46CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C46DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C46E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_233CAF15C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_233C47A0C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C47B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C47BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C47EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C48094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C481E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4827C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C484B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C48610(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C487BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4886C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C48B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C49314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

_BYTE *sub_233C493C0(_BYTE *a1)
{
  if (!*a1)
    sub_234255260();
  return a1 + 2;
}

void sub_233C49518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C495B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C497E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C49944(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C49A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C49B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C49E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C49FCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4A0F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4A180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4A4C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4A5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4A654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C4AAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4AC20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4ACB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4AEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4B04C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4B174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4B210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4B524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C4B6D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4B850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4B8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4BBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C4BD18(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4BE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4BED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4C218(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4C36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4C40C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4C724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C4CA00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4CBEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4CCA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4CF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4D0F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4D220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4D2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4D5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C4D780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4D870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4D8EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4DBEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4DCE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4DD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4E05C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4E184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4E214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4E40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4E55C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4E684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4E714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4E90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4EA5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4EBA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4EC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4EEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C4F048(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4F13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4F1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4F378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4F4B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4F6BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4F774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4FB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C4FCC0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C4FDB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C4FE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C4FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C50130(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C501CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C50274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C50304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C506BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C50870(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C50910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C509B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C50A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C50C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C50DE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C50E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C50F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C50FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C51A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  va_list va;

  va_start(va, a16);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C51D84(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C51E38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C51F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C51FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C52220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C52384(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C52478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C524F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C526B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C527F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C528EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C52A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C52B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C531CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C533E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C53480(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C53528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C535B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C539B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C53B7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C53CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C53DA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C54014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C54174(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C54268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C542E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C544A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C545E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C54738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C547D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C54A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C54B64(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C54CB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C54D50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C54F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C550E4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C551D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C55254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C55414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C55554(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5561C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C55704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C557A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C55C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C55E24(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C55ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C55FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C56038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C56510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C566F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C567EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C56868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C56A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C56B68(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C56BF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C56C58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C56CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C57000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C573A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_233C574E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C57560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C57720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C57860(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C579E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C57A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C57D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C57E80(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C57FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5806C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C582CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5842C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C58520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5859C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5875C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5889C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5893C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C589E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C58A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_233CAF15C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_233C592D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C593C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C59444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C59604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C59744(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C59838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C598B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C59A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C59BB4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C59CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C59D6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C59F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5A0B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5A1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5A240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5A550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C5A718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5A838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5A8C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5AC10(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5AD0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5AD9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5B0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C5B274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5B394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5B424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5B76C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5B868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5B8F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5BC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C5BDD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5BEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5BF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5C1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5C33C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5C45C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5C500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5C758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5C8B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5CA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5CAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5CD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5CEB0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5D0E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5D1A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5D4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5D670(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5D7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5D85C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5DA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5DBF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5DE20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5DEE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C5E5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5E724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5E7BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5E9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5EB50(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5ECFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5EDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5F050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5F1B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5F308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5F3A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5F5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C5F734(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C5F8E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C5F990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C5FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C5FF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C60098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C60130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C60368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C604C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C60670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C60718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C609C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C60B28(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C60C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C60CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C60ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C61028(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C611D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C61284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C61854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C61980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C61A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C61C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C61D58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C61F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6204C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C62498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C62624(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C62754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C627E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C629DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C62B2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C62DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C62E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C631C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C63784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C638FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6398C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C63B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C63CD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C63DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C63F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C63FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C643F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6458C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C646E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C64780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C64AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C64C9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C64D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C64DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C64E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C650A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6521C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C653C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C65478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C65A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C65B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C65BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C65E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C65FD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C660F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C66198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C663F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C66548(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C66634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6673C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C66844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_233C66C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C66D7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C66E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C66EEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C670AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C671EC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C672E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6735C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6765C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C67750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C677CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C67ACC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C67BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C67C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C67DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C67F3C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C68064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C680F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C682EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6843C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C68564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C685F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C687EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6893C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C68A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C68AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C68CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C68E3C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C68F64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C68FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C691EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6933C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C69464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C694F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C696EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6983C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C69930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C699AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C69B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C69CAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C69DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C69E5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6A240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C6A408(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6A504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6A594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C6AA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6AB58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6ABD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6AED4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6AFD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6B060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6B370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C6B538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6B684(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6B71C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6BAAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6BB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6BC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6BCF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C6C384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6C478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6C580(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6C628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6CB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C6CD34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6CE88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6CF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6D2B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6D3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6D424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6D724(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6D7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6D86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6D910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6DB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6DC94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6DD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6DE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6DEB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6E2B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6E3DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6E46C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6E664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6E7B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6E8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6E924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6EAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6EC24(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6ED18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6ED94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6EF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6F094(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6F188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6F204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6F3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6F504(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6F62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6F6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6F8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C6FA04(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C6FB84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C6FC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C6FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C70044(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7021C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C702D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C705B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C70718(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C708C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7096C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C70C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C70D74(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C70F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C71000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C712E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C71448(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C715F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7169C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C71944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C71AA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C71C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C71CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C71FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C72104(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C722DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C72390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C72670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C727D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C729B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C72A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C72D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C72EAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C73084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C73138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C73414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7357C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C73728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C737D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C73A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C73BDC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C73DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C73E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C74144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C742AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C74458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C74500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C747A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7490C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C74AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C74BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C74E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C74FEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C75198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C75240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C754E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7564C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C75824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C758D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C75BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C75D24(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C75EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C75FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C76294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C763FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7662C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C766F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C76A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C76BBC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C76D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C76DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C76FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C77138(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7733C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C773F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C77878(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C77AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C77B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C77EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C78030(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C78124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C781A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C78360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C784A0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C78528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C78590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7862C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C78940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C78A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C78B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C78BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C78D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C78EB4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C78FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C79024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C791E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C79324(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C793AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C79414(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C794B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C797C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C798D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C79974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C79A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C79AEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C79D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C79EF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C79F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7A038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7A0DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7A30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7A460(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7A500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7A5A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7A64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7A9D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7AA70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7AB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7ABBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7ADEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7AF40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7AFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7B088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7B12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7B4B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7B538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7B5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7B63C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C7BA60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7BB7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7BC0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7BF88(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7C0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7C144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7C454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C7C638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7C784(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7C81C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7CBAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7CCD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7CD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C7D0AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7D2D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7D3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7E064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C7E328(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C7E3CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7E454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C7E4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C7E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C801C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{

  _Unwind_Resume(a1);
}

void sub_233C8052C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C80634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C806F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C80C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C80E90(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C80F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C81080(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C81144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C816E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C818DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C81A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C81AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C81D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C81EC0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C81FE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8207C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C82570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8265C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C826D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C82898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C829D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C82ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C82B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C82D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C82E48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C82F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C82FB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C83178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C832B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C833AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C83428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C835E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C83728(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8381C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C83898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C83A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C83B98(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C83C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C83D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C83EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C84008(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C84128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C841B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C843D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C84528(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C84648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C846D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C848F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C84A48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C84B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C84C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C84DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C84F48(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C85070(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C85100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C852F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C85448(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C85570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C85604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C85914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C85AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C85C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C85CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C85EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C85FF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8614C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C861E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8644C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C865B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C866D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C86768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C86990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C86AE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C86BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C86C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C86E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C86F54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8707C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8710C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C87304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C87454(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C87548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C875C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C87784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C878C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C879B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C87A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C87BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C87D34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C87E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C87F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C88190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C882F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C883E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C88464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C88624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C88764(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8888C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8891C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C88B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C88C64(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C88D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C88DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C890F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C89238(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C89300(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C89428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C894DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8A5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  sub_233CAF15C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_233C8AA24(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8ABA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8AC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8BE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a14);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C8C22C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8C354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8C3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8C6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C8C8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8C9FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8CA8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8CC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8CDD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8CF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8CFC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8D230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8D394(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8D4E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8D58C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8DA44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8DB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8DBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8DE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8E00C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8E12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8E1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8E5D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8E6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8E7A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C8EC68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8ED88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8EE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8F040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8F194(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8F290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8F31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8F624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C8F7A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8F918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8F9BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C8FCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C8FE2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C8FF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C8FFDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C901FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C90350(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C904A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9053C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C90804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C90970(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C90A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C90AE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C90CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C90DE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C90EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C90F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C91240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C9138C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C91474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C914F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C916B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C917F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C918E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C91960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C91B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C91C60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C91DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C91E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C920FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C92264(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9238C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9241C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C92614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C92764(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C92858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C928D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C92A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C92BD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C92CC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C92D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C92F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C93044(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9316C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C931FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C93424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C93578(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C936A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C93730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C93958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C93AAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C93C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C93C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C93F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C940CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C941F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C94290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C945A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C94800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C949A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C94A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C94D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C94EC0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9506C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C95134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C95468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C955DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C956B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9579C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9587C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233C95BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C95DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C95EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C95F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C96038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C96364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C96628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C96730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C967AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C96AAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C96B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C96CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C96D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C97090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C973D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C97570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C97614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C97888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C979E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C97ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C97B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C97D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C97E58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C97F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C97FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C982F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C98430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C98518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C98594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C98754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C98894(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C98990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C98A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C98D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C98E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C98F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C98FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C99190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C992D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C993CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C99458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C99768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C998A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C99990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C99A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C99BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C99D0C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C99E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C99F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C99FF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C9B1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9B4D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9B570(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9B7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C9B900(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9B994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9BA1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9BAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9BDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233C9BFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9C100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9C190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C9C4D8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9C600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9C694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C9CB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9CC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9CD90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9CE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9E3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233C9E8B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9EA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9EAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9EDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233C9F080(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9F11C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9F1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9F254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233C9F618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233C9F7D0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233C9FD70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233C9FED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA0240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233CA15A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA17C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA1868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA18F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA1D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CA1F94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA2090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA211C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233CA256C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA2600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA26A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA2738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA2C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA2E34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA2EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA2F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA2FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA3304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233CA3644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA372C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA37D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA3864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA3C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA3DD4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA3ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA3F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233CA43AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA443C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA44E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA4574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA5468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA5848(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA5944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA59D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA5CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233CA5E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA5EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA5F5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA5FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA7198(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA7220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA7288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA7324(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233CA774C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA77E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA7888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA7918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA7CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA7E88(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA7F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA7F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA8014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233CA843C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA8584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA861C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA8854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CA89B0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA8AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA8B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CA8DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CA8EFC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CA9200(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CA92E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAA510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_233CAF15C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CAA890(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAA92C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAA9D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAAA64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAAE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAAFE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAB0D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAB150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAB310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAB450(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAB570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAB600(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAB81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAB970(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CABAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CABB94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CABE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CABF64(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAC08C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAC11C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAC314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAC464(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAC5E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAC688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAC8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CACA58(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CACBD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CACC7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CACEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAD04C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAD0EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAD194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAD238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAD468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAD5BC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAD6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAD774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAD96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CADABC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CADBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CADC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CADF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  void *v27;

  sub_233CAF128(&a26);

  _Unwind_Resume(a1);
}

void sub_233CAE0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAE1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAE234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAE3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAE534(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

void sub_233CAE604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAE68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAE99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a16);
  sub_233CAF128((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_233CAEAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAEBF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CAEC88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CAEEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  sub_233CAF128((uint64_t *)va);
  sub_233CAF15C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_233CAF018(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_233CAF128(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_233CAF098(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    sub_23411814C(v6);
  *(_QWORD *)(a1 + 8) = *a2;
  *a2 = 0;
  sub_234118648(*(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v10 = v8;
  if (v7)
  {
    sub_23411814C(v7);
    v8 = v10;
  }
  *(_QWORD *)(a1 + 16) = v8;
  v10 = 0;
  result = sub_233CAF128(&v10);
  *(_BYTE *)(a1 + 24) = a3;
  return result;
}

void sub_233CAF114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_233CAF128((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_233CAF128(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_23411814C(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_233CAF15C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v4 = v3[4];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  sub_233CAF1EC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_233CAF1EC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_233CAF1EC(a1, *a2);
    sub_233CAF1EC(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_233CAF22C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_234255300();
  }
  return result;
}

uint64_t *sub_233CAF24C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_233C0DA3C(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_233CAF304()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

_QWORD *sub_233CAF338(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF238;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C80BDFB0063);
  return a1;
}

void sub_233CAF380(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF238;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C80BDFB0063);
  JUMPOUT(0x23493E704);
}

BOOL sub_233CAF3D8(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 96) == -1)
    return 0;
  v3 = (int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    sub_2341058CC(a1 + 32, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_WORD *)a1 = 0;
      sub_2341049E0(a1 + 32, (_WORD *)a1, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 8);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CAF47C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF280;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8077774924);
  return a1;
}

void sub_233CAF4C4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF280;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8077774924);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CAF51C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  sub_234104468(a1 + 72);
  v7 = *a3;
  *(_BYTE *)(a1 + 144) = v7;
  if (v7)
    *(_BYTE *)(a1 + 145) = a3[1];
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 64) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CAF59C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 136) == -1)
    return 0;
  v3 = a1 + 48;
  v2 = *(_DWORD *)(a1 + 48);
  if (!v2)
  {
    sub_2341058CC(a1 + 72, &v5);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(v3 + 16) = v6;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      *(_OWORD *)(a1 + 28) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      sub_233D054B8(a1, a1 + 72, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      v2 = *(_DWORD *)(a1 + 48);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CAF648(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 0;
  sub_234104468(a1 + 88);
  v7 = *a3;
  *(_BYTE *)(a1 + 160) = v7;
  if (v7)
    *(_BYTE *)(a1 + 161) = a3[1];
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 80) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CAF6CC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[33];
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 152) == -1)
    return 0;
  v3 = a1 + 64;
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
  {
    sub_2341058CC(a1 + 88, v6);
    *(_OWORD *)v3 = *(_OWORD *)v6;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)&v6[16];
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      memset(v6, 0, sizeof(v6));
      *(_OWORD *)(a1 + 2) = 0u;
      v7[0] = 0;
      *(_QWORD *)((char *)v7 + 7) = 0;
      *(_WORD *)a1 = 0;
      *(_OWORD *)(a1 + 18) = 0u;
      *(_BYTE *)(a1 + 34) = v6[32];
      *(_QWORD *)(a1 + 35) = 0;
      v4 = v7[0];
      *(_QWORD *)(a1 + 50) = 0;
      *(_QWORD *)(a1 + 43) = v4;
      sub_233D05128(a1, a1 + 88, (uint64_t)v6);
      *(_OWORD *)v3 = *(_OWORD *)v6;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)&v6[16];
      v2 = *(_DWORD *)(a1 + 64);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CAF7E4(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF2B8;
  is_mul_ok(a2, 0x28uLL);
  v4 = (_QWORD *)operator new[]();
  *v4 = 40;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_DWORD *)v6 = 0;
      v6[1] = 0;
      *((_BYTE *)v6 + 16) = 0;
      v6 += 5;
    }
    while (v6 != &v5[5 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CAF88C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF2B8;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1050C80A4263F9ELL);
  return a1;
}

void sub_233CAF8D8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF2B8;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1050C80A4263F9ELL);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CAF934(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF2F0;
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_DWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 16) = 0;
      *(_BYTE *)(v5 + 24) = 0;
      v5 += 32;
    }
    while (v5 != v4 + 32 * a2);
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CAF9B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF2F0;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8022B81155);
  return a1;
}

void sub_233CAF9FC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF2F0;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8022B81155);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CAFA54(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF328;
  is_mul_ok(a2, 0x18uLL);
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_DWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      v5 += 24;
    }
    while (v5 != v4 + 24 * a2);
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CAFAD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF328;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1060C80F76DDFE0);
  return a1;
}

void sub_233CAFB20(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF328;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1060C80F76DDFE0);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CAFB78(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF360;
  v4 = (_QWORD *)operator new[]();
  *v4 = 64;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_DWORD *)v6 = 0;
      *((_BYTE *)v6 + 4) = 0;
      *((_BYTE *)v6 + 6) = 0;
      *((_BYTE *)v6 + 8) = 0;
      *((_BYTE *)v6 + 12) = 0;
      *((_BYTE *)v6 + 16) = 0;
      *((_BYTE *)v6 + 24) = 0;
      *((_BYTE *)v6 + 32) = 0;
      *((_BYTE *)v6 + 48) = 0;
      v6 += 8;
    }
    while (v6 != &v5[8 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CAFC1C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF360;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1000C809292CEA2);
  return a1;
}

void sub_233CAFC68(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF360;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1000C809292CEA2);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CAFCC4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_DWORD *)a1 = 0;
  sub_234104468(a1 + 8);
  *(_BYTE *)(a1 + 80) = 0;
  sub_234104498(v6, 0, 0);
  sub_234104468(a1 + 112);
  v8 = *a3;
  *(_BYTE *)(a1 + 184) = v8;
  if (v8)
    *(_BYTE *)(a1 + 185) = a3[1];
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 104) = 93;
  sub_2341045C8(v7, a2);
  return a1;
}

BOOL sub_233CAFD48(uint64_t a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  _OWORD v7[5];
  uint64_t v8;

  if (*(_DWORD *)(a1 + 176) == -1)
    return 0;
  v3 = (int *)(a1 + 88);
  v2 = *(_DWORD *)(a1 + 88);
  if (!v2)
  {
    sub_2341058CC(a1 + 112, v7);
    *(_OWORD *)v3 = v7[0];
    *((_QWORD *)v3 + 2) = *(_QWORD *)&v7[1];
    v2 = *v3;
    if (!*v3)
    {
      v8 = 0;
      memset(v7, 0, sizeof(v7));
      sub_234104468((uint64_t)v7 + 8);
      LOBYTE(v8) = 0;
      sub_234104498(v4, 0, 0);
      *(_DWORD *)a1 = v7[0];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)((char *)&v7[2] + 8);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&v7[3] + 8);
      *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)&v7[4] + 7);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v7 + 8);
      v5 = v8;
      *(_BYTE *)(a1 + 80) = v8;
      if (v5)
        *(_BYTE *)(a1 + 81) = BYTE1(v8);
      sub_233D16B9C((_DWORD *)a1, a1 + 112, (uint64_t)v7);
      *(_OWORD *)v3 = v7[0];
      *((_QWORD *)v3 + 2) = *(_QWORD *)&v7[1];
      v2 = *(_DWORD *)(a1 + 88);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CAFE5C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_234104468(a1 + 88);
  v7 = *a3;
  *(_BYTE *)(a1 + 160) = v7;
  if (v7)
    *(_BYTE *)(a1 + 161) = a3[1];
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 80) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CAFEEC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 152) == -1)
    return 0;
  v3 = a1 + 64;
  v2 = *(_DWORD *)(a1 + 64);
  if (!v2)
  {
    sub_2341058CC(a1 + 88, &v5);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(v3 + 16) = v6;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      *(_DWORD *)a1 = 0;
      *(_BYTE *)(a1 + 4) = 0;
      *(_BYTE *)(a1 + 6) = 0;
      *(_BYTE *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 12) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 32) = 0;
      *(_BYTE *)(a1 + 48) = 0;
      sub_233D167A8(a1, a1 + 88, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      v2 = *(_DWORD *)(a1 + 64);
    }
  }
  return v2 == 0;
}

BOOL sub_233CAFFB0(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 96) == -1)
    return 0;
  v3 = (int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    sub_2341058CC(a1 + 32, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_BYTE *)a1 = 0;
      sub_23410492C(a1 + 32, (_BYTE *)a1, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 8);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB0054(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF398;
  is_mul_ok(a2, 0x26uLL);
  v4 = (_QWORD *)operator new[]();
  *v4 = 38;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_DWORD *)v6 = 0;
      *((_BYTE *)v6 + 4) = 0;
      *((_BYTE *)v6 + 30) = 0;
      *((_BYTE *)v6 + 32) = 0;
      *((_BYTE *)v6 + 34) = 0;
      *((_BYTE *)v6 + 36) = 0;
      v6 = (_QWORD *)((char *)v6 + 38);
    }
    while (v6 != (_QWORD *)((char *)v5 + 38 * a2));
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB0104(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF398;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1000C802EF706F4);
  return a1;
}

void sub_233CB0150(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF398;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1000C802EF706F4);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB01AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;

  *a1 = &off_2504EF3D0;
  v4 = (_QWORD *)operator new[]();
  *v4 = 32;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *v6 = 0;
      v6[8] = 0;
      v6 += 32;
    }
    while (v6 != (_BYTE *)&v5[4 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB0234(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF3D0;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1050C809F46B219);
  return a1;
}

void sub_233CB0280(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF3D0;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1050C809F46B219);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB02DC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF408;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1050C80717B85FCLL);
  return a1;
}

void sub_233CB0324(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF408;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1050C80717B85FCLL);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB037C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF440;
  v4 = (_QWORD *)operator new[]();
  *v4 = 32;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_BYTE *)v6 = 0;
      *((_BYTE *)v6 + 8) = 0;
      *((_DWORD *)v6 + 6) = 0;
      v6 += 4;
    }
    while (v6 != &v5[4 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB0408(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF440;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1000C80EC71111DLL);
  return a1;
}

void sub_233CB0454(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF440;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1000C80EC71111DLL);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB04B0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;

  *a1 = &off_2504EF478;
  is_mul_ok(a2, 0x30uLL);
  v4 = 48 * a2;
  v5 = (_QWORD *)operator new[]();
  *v5 = 48;
  v5[1] = a2;
  if (a2)
  {
    v6 = v5 + 7;
    do
    {
      *(v6 - 16) = 0;
      *v6 = 0;
      *((_QWORD *)v6 - 5) = 0;
      *(v6 - 32) = 0;
      v6 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  a1[1] = v5 + 2;
  return a1;
}

_QWORD *sub_233CB0554(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF478;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1000C802F250FDELL);
  return a1;
}

void sub_233CB05A0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF478;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1000C802F250FDELL);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB05FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_BYTE *)a1 = 0;
  sub_234104468(a1 + 8);
  *(_BYTE *)(a1 + 80) = 0;
  sub_234104498(v6, 0, 0);
  sub_234104468(a1 + 112);
  v8 = *a3;
  *(_BYTE *)(a1 + 184) = v8;
  if (v8)
    *(_BYTE *)(a1 + 185) = a3[1];
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 104) = 93;
  sub_2341045C8(v7, a2);
  return a1;
}

BOOL sub_233CB0680(uint64_t a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int v5;
  _OWORD v7[5];
  uint64_t v8;

  if (*(_DWORD *)(a1 + 176) == -1)
    return 0;
  v3 = (int *)(a1 + 88);
  v2 = *(_DWORD *)(a1 + 88);
  if (!v2)
  {
    sub_2341058CC(a1 + 112, v7);
    *(_OWORD *)v3 = v7[0];
    *((_QWORD *)v3 + 2) = *(_QWORD *)&v7[1];
    v2 = *v3;
    if (!*v3)
    {
      v8 = 0;
      memset(v7, 0, sizeof(v7));
      sub_234104468((uint64_t)v7 + 8);
      LOBYTE(v8) = 0;
      sub_234104498(v4, 0, 0);
      *(_BYTE *)a1 = v7[0];
      *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)((char *)&v7[2] + 8);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&v7[3] + 8);
      *(_QWORD *)(a1 + 71) = *(_QWORD *)((char *)&v7[4] + 7);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v7 + 8);
      v5 = v8;
      *(_BYTE *)(a1 + 80) = v8;
      if (v5)
        *(_BYTE *)(a1 + 81) = BYTE1(v8);
      sub_233D21A84((_BYTE *)a1, a1 + 112, (uint64_t)v7);
      *(_OWORD *)v3 = v7[0];
      *((_QWORD *)v3 + 2) = *(_QWORD *)&v7[1];
      v2 = *(_DWORD *)(a1 + 88);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CB0794(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  sub_234104468(a1 + 48);
  v7 = *a3;
  *(_BYTE *)(a1 + 120) = v7;
  if (v7)
    *(_BYTE *)(a1 + 121) = a3[1];
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 40) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB080C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 112) == -1)
    return 0;
  v3 = a1 + 24;
  v2 = *(_DWORD *)(a1 + 24);
  if (!v2)
  {
    sub_2341058CC(a1 + 48, &v5);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(v3 + 16) = v6;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      *(_WORD *)a1 = 0;
      *(_BYTE *)(a1 + 2) = 0;
      *(_BYTE *)(a1 + 8) = 0;
      sub_233D21764(a1, a1 + 48, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      v2 = *(_DWORD *)(a1 + 24);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB08B8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF4B0;
  is_mul_ok(a2, 0x18uLL);
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_BYTE *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      v5 += 24;
    }
    while (v5 != v4 + 24 * a2);
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CB093C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF4B0;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1060C80AA6B27F1);
  return a1;
}

void sub_233CB0984(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF4B0;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1060C80AA6B27F1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB09DC(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF4E8;
  is_mul_ok(a2, 0x18uLL);
  v4 = (_QWORD *)operator new[]();
  *v4 = 24;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_WORD *)v6 = 0;
      *((_BYTE *)v6 + 2) = 0;
      *((_BYTE *)v6 + 8) = 0;
      v6 += 3;
    }
    while (v6 != &v5[3 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB0A84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF4E8;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1000C80B9492974);
  return a1;
}

void sub_233CB0AD0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF4E8;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1000C80B9492974);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB0B2C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_BYTE *)a1 = 0;
  *(_WORD *)(a1 + 2) = 0;
  sub_234104468(a1 + 32);
  v7 = *a3;
  *(_BYTE *)(a1 + 104) = v7;
  if (v7)
    *(_BYTE *)(a1 + 105) = a3[1];
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 24) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB0BA0(_DWORD *a1)
{
  int v2;
  _DWORD *v3;
  __int128 v5;
  uint64_t v6;

  if (a1[24] == -1)
    return 0;
  v3 = a1 + 2;
  v2 = a1[2];
  if (!v2)
  {
    sub_2341058CC((uint64_t)(a1 + 8), &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *a1 = 0;
      sub_233D23F14((uint64_t)a1, (uint64_t)(a1 + 8), (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = a1[2];
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB0C44(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF520;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8052888210);
  return a1;
}

void sub_233CB0C8C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF520;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8052888210);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB0CE4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  sub_234104468(a1 + 40);
  v7 = *a3;
  *(_BYTE *)(a1 + 112) = v7;
  if (v7)
    *(_BYTE *)(a1 + 113) = a3[1];
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 32) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB0D64(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 104) == -1)
    return 0;
  v3 = (int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    sub_2341058CC(a1 + 40, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_WORD *)(a1 + 8) = 0;
      *(_QWORD *)a1 = 0;
      sub_233D2BEF0((_WORD *)a1, a1 + 40, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 16);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB0E0C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF558;
  is_mul_ok(a2, 0xAuLL);
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_WORD *)v5 = 0;
      *(_BYTE *)(v5 + 2) = 0;
      *(_BYTE *)(v5 + 4) = 0;
      *(_BYTE *)(v5 + 6) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v5 += 10;
    }
    while (v5 != v4 + 10 * a2);
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CB0E9C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF558;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C80B740803ALL);
  return a1;
}

void sub_233CB0EE4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF558;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C80B740803ALL);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB0F3C(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF590;
  is_mul_ok(a2, 0x70uLL);
  v4 = (_QWORD *)operator new[]();
  *v4 = 112;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_DWORD *)v6 = 0;
      *((_BYTE *)v6 + 8) = 0;
      *((_BYTE *)v6 + 32) = 0;
      *((_BYTE *)v6 + 56) = 0;
      *((_BYTE *)v6 + 80) = 0;
      *((_BYTE *)v6 + 104) = 0;
      v6 += 14;
    }
    while (v6 != &v5[14 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB0FF0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF590;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1050C8080B4FE94);
  return a1;
}

void sub_233CB103C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF590;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1050C8080B4FE94);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB1098(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF5C8;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1050C807EF9F939);
  return a1;
}

void sub_233CB10E0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF5C8;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1050C807EF9F939);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB1138(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  sub_234104468(a1 + 840);
  v7 = *a3;
  *(_BYTE *)(a1 + 912) = v7;
  if (v7)
    *(_BYTE *)(a1 + 913) = a3[1];
  *(_DWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 824) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 832) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB1200(uint64_t a1)
{
  int v2;
  _OWORD *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 904) == -1)
    return 0;
  v2 = *(_DWORD *)(a1 + 816);
  if (!v2)
  {
    v3 = (_OWORD *)(a1 + 816);
    sub_2341058CC(a1 + 840, &v5);
    *v3 = v5;
    *(_QWORD *)(a1 + 832) = v6;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      bzero(&v5, 0x330uLL);
      sub_233CB12B8(a1, (uint64_t)&v5);
      sub_233D33F5C(a1, a1 + 840, (uint64_t)&v5);
      *v3 = v5;
      *(_QWORD *)(a1 + 832) = v6;
      v2 = *(_DWORD *)(a1 + 816);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CB12B8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v2 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v2;
  if (v2)
  {
    *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a2 + 24) = 0;
  }
  v3 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(result + 48) = v3;
  if (v3)
  {
    *(_OWORD *)(result + 56) = *(_OWORD *)(a2 + 56);
    *(_BYTE *)(a2 + 48) = 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 72);
  *(_BYTE *)(result + 72) = v4;
  if (v4)
  {
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a2 + 72) = 0;
  }
  v5 = *(unsigned __int8 *)(a2 + 96);
  *(_BYTE *)(result + 96) = v5;
  if (v5)
  {
    *(_OWORD *)(result + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a2 + 96) = 0;
  }
  v6 = *(unsigned __int8 *)(a2 + 120);
  *(_BYTE *)(result + 120) = v6;
  if (v6)
  {
    *(_BYTE *)(result + 121) = *(_BYTE *)(a2 + 121);
    *(_BYTE *)(a2 + 120) = 0;
  }
  v7 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(result + 128) = v7;
  v8 = *(unsigned __int8 *)(a2 + 152);
  *(_BYTE *)(result + 152) = v8;
  if (v8)
  {
    *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a2 + 152) = 0;
  }
  v9 = *(unsigned __int8 *)(a2 + 176);
  *(_BYTE *)(result + 176) = v9;
  if (v9)
  {
    *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 184);
    *(_BYTE *)(a2 + 176) = 0;
  }
  v10 = *(unsigned __int8 *)(a2 + 200);
  *(_BYTE *)(result + 200) = v10;
  if (v10)
  {
    *(_OWORD *)(result + 208) = *(_OWORD *)(a2 + 208);
    v11 = *(_OWORD *)(a2 + 224);
    v12 = *(_OWORD *)(a2 + 240);
    v13 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(result + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(result + 240) = v12;
    *(_OWORD *)(result + 256) = v13;
    *(_OWORD *)(result + 224) = v11;
    v14 = *(unsigned __int8 *)(a2 + 280);
    *(_BYTE *)(result + 280) = v14;
    if (v14)
    {
      *(_BYTE *)(result + 281) = *(_BYTE *)(a2 + 281);
      *(_BYTE *)(a2 + 280) = 0;
    }
    *(_BYTE *)(a2 + 200) = 0;
  }
  v15 = *(unsigned __int8 *)(a2 + 288);
  *(_BYTE *)(result + 288) = v15;
  if (v15)
  {
    *(_OWORD *)(result + 296) = *(_OWORD *)(a2 + 296);
    v16 = *(_OWORD *)(a2 + 312);
    v17 = *(_OWORD *)(a2 + 328);
    v18 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(result + 360) = *(_QWORD *)(a2 + 360);
    *(_OWORD *)(result + 344) = v18;
    *(_OWORD *)(result + 328) = v17;
    *(_OWORD *)(result + 312) = v16;
    v19 = *(unsigned __int8 *)(a2 + 368);
    *(_BYTE *)(result + 368) = v19;
    if (v19)
    {
      *(_BYTE *)(result + 369) = *(_BYTE *)(a2 + 369);
      *(_BYTE *)(a2 + 368) = 0;
    }
    *(_BYTE *)(a2 + 288) = 0;
  }
  v20 = *(unsigned __int8 *)(a2 + 376);
  *(_BYTE *)(result + 376) = v20;
  if (v20)
  {
    *(_OWORD *)(result + 384) = *(_OWORD *)(a2 + 384);
    *(_BYTE *)(a2 + 376) = 0;
  }
  v21 = *(unsigned __int8 *)(a2 + 400);
  *(_BYTE *)(result + 400) = v21;
  if (v21)
  {
    *(_OWORD *)(result + 408) = *(_OWORD *)(a2 + 408);
    *(_BYTE *)(a2 + 400) = 0;
  }
  v22 = *(unsigned __int8 *)(a2 + 424);
  *(_BYTE *)(result + 424) = v22;
  if (v22)
  {
    *(_OWORD *)(result + 432) = *(_OWORD *)(a2 + 432);
    *(_BYTE *)(a2 + 424) = 0;
  }
  v23 = *(unsigned __int8 *)(a2 + 448);
  *(_BYTE *)(result + 448) = v23;
  if (v23)
  {
    *(_OWORD *)(result + 456) = *(_OWORD *)(a2 + 456);
    *(_BYTE *)(a2 + 448) = 0;
  }
  v24 = *(unsigned __int8 *)(a2 + 472);
  *(_BYTE *)(result + 472) = v24;
  if (v24)
  {
    *(_OWORD *)(result + 480) = *(_OWORD *)(a2 + 480);
    *(_BYTE *)(a2 + 472) = 0;
  }
  v25 = *(unsigned __int8 *)(a2 + 496);
  *(_BYTE *)(result + 496) = v25;
  if (v25)
  {
    *(_DWORD *)(result + 500) = *(_DWORD *)(a2 + 500);
    *(_BYTE *)(a2 + 496) = 0;
  }
  v26 = *(unsigned __int8 *)(a2 + 504);
  *(_BYTE *)(result + 504) = v26;
  if (v26)
  {
    v27 = *(_OWORD *)(a2 + 512);
    v28 = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(result + 544) = *(_QWORD *)(a2 + 544);
    *(_OWORD *)(result + 512) = v27;
    *(_OWORD *)(result + 528) = v28;
    *(_BYTE *)(a2 + 504) = 0;
  }
  v29 = *(unsigned __int8 *)(a2 + 552);
  *(_BYTE *)(result + 552) = v29;
  if (v29)
  {
    *(_OWORD *)(result + 560) = *(_OWORD *)(a2 + 560);
    v30 = *(_OWORD *)(a2 + 576);
    v31 = *(_OWORD *)(a2 + 592);
    v32 = *(_OWORD *)(a2 + 608);
    *(_QWORD *)(result + 624) = *(_QWORD *)(a2 + 624);
    *(_OWORD *)(result + 592) = v31;
    *(_OWORD *)(result + 608) = v32;
    *(_OWORD *)(result + 576) = v30;
    v33 = *(unsigned __int8 *)(a2 + 632);
    *(_BYTE *)(result + 632) = v33;
    if (v33)
    {
      *(_BYTE *)(result + 633) = *(_BYTE *)(a2 + 633);
      *(_BYTE *)(a2 + 632) = 0;
    }
    *(_BYTE *)(a2 + 552) = 0;
  }
  v34 = *(unsigned __int8 *)(a2 + 640);
  *(_BYTE *)(result + 640) = v34;
  if (v34)
  {
    *(_OWORD *)(result + 648) = *(_OWORD *)(a2 + 648);
    v35 = *(_OWORD *)(a2 + 664);
    v36 = *(_OWORD *)(a2 + 680);
    v37 = *(_OWORD *)(a2 + 696);
    *(_QWORD *)(result + 712) = *(_QWORD *)(a2 + 712);
    *(_OWORD *)(result + 696) = v37;
    *(_OWORD *)(result + 680) = v36;
    *(_OWORD *)(result + 664) = v35;
    v38 = *(unsigned __int8 *)(a2 + 720);
    *(_BYTE *)(result + 720) = v38;
    if (v38)
    {
      *(_BYTE *)(result + 721) = *(_BYTE *)(a2 + 721);
      *(_BYTE *)(a2 + 720) = 0;
    }
    *(_BYTE *)(a2 + 640) = 0;
  }
  v39 = *(unsigned __int8 *)(a2 + 728);
  *(_BYTE *)(result + 728) = v39;
  if (v39)
  {
    *(_OWORD *)(result + 736) = *(_OWORD *)(a2 + 736);
    v40 = *(_OWORD *)(a2 + 752);
    v41 = *(_OWORD *)(a2 + 768);
    v42 = *(_OWORD *)(a2 + 784);
    *(_QWORD *)(result + 800) = *(_QWORD *)(a2 + 800);
    *(_OWORD *)(result + 768) = v41;
    *(_OWORD *)(result + 784) = v42;
    *(_OWORD *)(result + 752) = v40;
    v43 = *(unsigned __int8 *)(a2 + 808);
    *(_BYTE *)(result + 808) = v43;
    if (v43)
    {
      *(_BYTE *)(result + 809) = *(_BYTE *)(a2 + 809);
      *(_BYTE *)(a2 + 808) = 0;
    }
    *(_BYTE *)(a2 + 728) = 0;
  }
  return result;
}

uint64_t sub_233CB15CC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_234104468(a1 + 40);
  v7 = *a3;
  *(_BYTE *)(a1 + 112) = v7;
  if (v7)
    *(_BYTE *)(a1 + 113) = a3[1];
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 32) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB1638(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 104) == -1)
    return 0;
  v3 = (int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    sub_2341058CC(a1 + 40, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      sub_234104C8C(a1 + 40, (_OWORD *)a1, &v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 16);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CB16DC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_234104468(a1 + 64);
  v7 = *a3;
  *(_BYTE *)(a1 + 136) = v7;
  if (v7)
    *(_BYTE *)(a1 + 137) = a3[1];
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 56) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB1750(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 128) == -1)
    return 0;
  v3 = a1 + 40;
  v2 = *(_DWORD *)(a1 + 40);
  if (!v2)
  {
    sub_2341058CC(a1 + 64, &v5);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(v3 + 16) = v6;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
      sub_233D33590(a1, a1 + 64, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *(_QWORD *)(v3 + 16) = v6;
      v2 = *(_DWORD *)(a1 + 40);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CB17F8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_234104468(a1 + 56);
  v7 = *a3;
  *(_BYTE *)(a1 + 128) = v7;
  if (v7)
    *(_BYTE *)(a1 + 129) = a3[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 48) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB186C(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 120) == -1)
    return 0;
  v3 = (int *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 32);
  if (!v2)
  {
    sub_2341058CC(a1 + 56, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      sub_233D33378((_OWORD *)a1, a1 + 56, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 32);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB1914(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_2504EF600;
  is_mul_ok(a2, 0x30uLL);
  v4 = (_QWORD *)operator new[]();
  *v4 = 48;
  v4[1] = a2;
  v5 = v4 + 2;
  if (a2)
  {
    v6 = v4 + 2;
    do
    {
      *(_BYTE *)v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      *((_BYTE *)v6 + 24) = 0;
      v6 += 6;
    }
    while (v6 != &v5[6 * a2]);
  }
  a1[1] = v5;
  return a1;
}

_QWORD *sub_233CB19BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF600;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x1070C80B6A23389);
  return a1;
}

void sub_233CB1A08(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF600;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x1070C80B6A23389);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB1A64(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF638;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1050C807EF9F939);
  return a1;
}

void sub_233CB1AAC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF638;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1050C807EF9F939);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB1B04(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF670;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8077774924);
  return a1;
}

void sub_233CB1B4C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF670;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8077774924);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB1BA4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;

  *a1 = &off_2504EF6A8;
  is_mul_ok(a2, 0x30uLL);
  v4 = 48 * a2;
  v5 = (_QWORD *)operator new[]();
  *v5 = 48;
  v5[1] = a2;
  if (a2)
  {
    v6 = v5 + 7;
    do
    {
      *v6 = 0;
      *((_QWORD *)v6 - 5) = 0;
      *((_QWORD *)v6 - 4) = 0;
      *(v6 - 24) = 0;
      v6 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  a1[1] = v5 + 2;
  return a1;
}

_QWORD *sub_233CB1C44(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF6A8;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2 - 16, 0x10D0C80EB051EDALL);
  return a1;
}

void sub_233CB1C90(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF6A8;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1 - 16, 0x10D0C80EB051EDALL);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB1CEC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_WORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  sub_234104468(a1 + 64);
  *(_BYTE *)(a1 + 136) = 0;
  sub_234104498(v6, 0, 0);
  sub_234104468(a1 + 144);
  *(_BYTE *)(a1 + 216) = 0;
  sub_234104498(v7, 0, 0);
  sub_234104468(a1 + 224);
  *(_BYTE *)(a1 + 296) = 0;
  sub_234104498(v8, 0, 0);
  sub_234104468(a1 + 304);
  *(_BYTE *)(a1 + 376) = 0;
  sub_234104498(v9, 0, 0);
  sub_234104468(a1 + 408);
  v11 = *a3;
  *(_BYTE *)(a1 + 480) = v11;
  if (v11)
    *(_BYTE *)(a1 + 481) = a3[1];
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 400) = 93;
  sub_2341045C8(v10, a2);
  return a1;
}

BOOL sub_233CB1DD8(uint64_t a1)
{
  int v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  if (*(_DWORD *)(a1 + 472) == -1)
    return 0;
  v2 = *(_DWORD *)(a1 + 384);
  if (!v2)
  {
    v3 = (_OWORD *)(a1 + 384);
    sub_2341058CC(a1 + 408, &v23);
    *v3 = v23;
    *(_QWORD *)(a1 + 400) = v24;
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      memset(v42, 0, sizeof(v42));
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      v37 = 0u;
      memset(v38, 0, sizeof(v38));
      v35 = 0u;
      v36 = 0u;
      memset(v34, 0, sizeof(v34));
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v29 = 0u;
      memset(v30, 0, sizeof(v30));
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      sub_234104468((uint64_t)&v27);
      BYTE8(v30[1]) = 0;
      sub_234104498(v4, 0, 0);
      sub_234104468((uint64_t)&v31);
      BYTE8(v34[1]) = 0;
      sub_234104498(v5, 0, 0);
      sub_234104468((uint64_t)&v35);
      BYTE8(v38[1]) = 0;
      sub_234104498(v6, 0, 0);
      sub_234104468((uint64_t)&v39);
      BYTE8(v42[1]) = 0;
      sub_234104498(v7, 0, 0);
      v8 = v24;
      *(_OWORD *)a1 = v23;
      *(_OWORD *)(a1 + 16) = v8;
      v9 = v26;
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = v9;
      v10 = v30[0];
      *(_OWORD *)(a1 + 96) = v29;
      *(_OWORD *)(a1 + 112) = v10;
      *(_QWORD *)(a1 + 127) = *(_QWORD *)((char *)v30 + 15);
      v11 = v28;
      *(_OWORD *)(a1 + 64) = v27;
      *(_OWORD *)(a1 + 80) = v11;
      v12 = BYTE8(v30[1]);
      *(_BYTE *)(a1 + 136) = BYTE8(v30[1]);
      if (v12)
      {
        *(_BYTE *)(a1 + 137) = BYTE9(v30[1]);
        BYTE8(v30[1]) = 0;
      }
      v13 = v34[0];
      *(_OWORD *)(a1 + 176) = v33;
      *(_OWORD *)(a1 + 192) = v13;
      *(_QWORD *)(a1 + 207) = *(_QWORD *)((char *)v34 + 15);
      v14 = v32;
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = v14;
      v15 = BYTE8(v34[1]);
      *(_BYTE *)(a1 + 216) = BYTE8(v34[1]);
      if (v15)
      {
        *(_BYTE *)(a1 + 217) = BYTE9(v34[1]);
        BYTE8(v34[1]) = 0;
      }
      v16 = v38[0];
      *(_OWORD *)(a1 + 256) = v37;
      *(_OWORD *)(a1 + 272) = v16;
      *(_QWORD *)(a1 + 287) = *(_QWORD *)((char *)v38 + 15);
      v17 = v36;
      *(_OWORD *)(a1 + 224) = v35;
      *(_OWORD *)(a1 + 240) = v17;
      v18 = BYTE8(v38[1]);
      *(_BYTE *)(a1 + 296) = BYTE8(v38[1]);
      if (v18)
      {
        *(_BYTE *)(a1 + 297) = BYTE9(v38[1]);
        BYTE8(v38[1]) = 0;
      }
      v19 = v42[0];
      *(_OWORD *)(a1 + 336) = v41;
      *(_OWORD *)(a1 + 352) = v19;
      *(_QWORD *)(a1 + 367) = *(_QWORD *)((char *)v42 + 15);
      v20 = v40;
      *(_OWORD *)(a1 + 304) = v39;
      *(_OWORD *)(a1 + 320) = v20;
      v21 = BYTE8(v42[1]);
      *(_BYTE *)(a1 + 376) = BYTE8(v42[1]);
      if (v21)
        *(_BYTE *)(a1 + 377) = BYTE9(v42[1]);
      sub_233D3F504((_BYTE *)a1, a1 + 408, (uint64_t)&v23);
      *v3 = v23;
      *(_QWORD *)(a1 + 400) = v24;
      v2 = *(_DWORD *)(a1 + 384);
    }
  }
  return v2 == 0;
}

uint64_t sub_233CB2000(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  sub_234104468(a1 + 80);
  v7 = *a3;
  *(_BYTE *)(a1 + 152) = v7;
  if (v7)
    *(_BYTE *)(a1 + 153) = a3[1];
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
  *(_DWORD *)(a1 + 72) = 93;
  sub_2341045C8(v6, a2);
  return a1;
}

BOOL sub_233CB208C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  __int128 v4;
  _BYTE v6[38];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 144) == -1)
    return 0;
  v3 = a1 + 56;
  v2 = *(_DWORD *)(a1 + 56);
  if (!v2)
  {
    sub_2341058CC(a1 + 80, v6);
    *(_OWORD *)v3 = *(_OWORD *)v6;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)&v6[16];
    v2 = *(_DWORD *)v3;
    if (!*(_DWORD *)v3)
    {
      memset(v6, 0, 37);
      v4 = *(_OWORD *)&v6[16];
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v6;
      v6[37] = 0;
      *(_WORD *)a1 = 0;
      *(_BYTE *)(a1 + 2) = 0;
      *(_OWORD *)(a1 + 19) = v4;
      *(_QWORD *)(a1 + 33) = *(_QWORD *)&v6[30];
      *(_QWORD *)(a1 + 41) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      sub_233D3E2B0(a1, a1 + 80, (uint64_t)v6);
      *(_OWORD *)v3 = *(_OWORD *)v6;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)&v6[16];
      v2 = *(_DWORD *)(a1 + 56);
    }
  }
  return v2 == 0;
}

BOOL sub_233CB2194(_DWORD *a1)
{
  int v2;
  _DWORD *v3;
  __int128 v5;
  uint64_t v6;

  if (a1[24] == -1)
    return 0;
  v3 = a1 + 2;
  v2 = a1[2];
  if (!v2)
  {
    sub_2341058CC((uint64_t)(a1 + 8), &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *a1 = 0;
      sub_234104A50((uint64_t)(a1 + 8), a1, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = a1[2];
    }
  }
  return v2 == 0;
}

BOOL sub_233CB2238(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 104) == -1)
    return 0;
  v3 = (int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 16);
  if (!v2)
  {
    sub_2341058CC(a1 + 40, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      if (sub_23410462C(a1 + 40) == 16)
      {
        sub_234104B68(a1 + 40, (_OWORD *)a1, &v5);
      }
      else
      {
        LODWORD(v5) = 43;
        *((_QWORD *)&v5 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
        LODWORD(v6) = 80;
      }
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *v3;
    }
  }
  return v2 == 0;
}

BOOL sub_233CB230C(uint64_t a1)
{
  int v2;
  int *v3;
  __int128 v5;
  uint64_t v6;

  if (*(_DWORD *)(a1 + 96) == -1)
    return 0;
  v3 = (int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
  {
    sub_2341058CC(a1 + 32, &v5);
    *(_OWORD *)v3 = v5;
    *((_QWORD *)v3 + 2) = v6;
    v2 = *v3;
    if (!*v3)
    {
      *(_BYTE *)a1 = 0;
      sub_2341046D0(a1 + 32, (char *)a1, (uint64_t)&v5);
      *(_OWORD *)v3 = v5;
      *((_QWORD *)v3 + 2) = v6;
      v2 = *(_DWORD *)(a1 + 8);
    }
  }
  return v2 == 0;
}

_QWORD *sub_233CB23B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF6E0;
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_WORD *)v5 = 0;
      *(_WORD *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 10) = 0;
      *(_OWORD *)(v5 + 16) = 0uLL;
      *(_OWORD *)(v5 + 32) = 0uLL;
      *(_BYTE *)(v5 + 48) = 0;
      *(_OWORD *)(v5 + 52) = 0uLL;
      *(_OWORD *)(v5 + 68) = 0uLL;
      *(_OWORD *)(v5 + 84) = 0uLL;
      *(_OWORD *)(v5 + 100) = 0uLL;
      *(_OWORD *)(v5 + 112) = 0uLL;
      v5 += 128;
    }
    while (v5 != v4 + (a2 << 7));
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CB244C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF6E0;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1070C804757462ALL);
  return a1;
}

void sub_233CB2494(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF6E0;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1070C804757462ALL);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB24EC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_2504EF718;
  is_mul_ok(a2, 0x38uLL);
  v4 = operator new[]();
  if (a2)
  {
    v5 = v4;
    do
    {
      *(_WORD *)v5 = 0;
      *(_BYTE *)(v5 + 2) = 0;
      *(_DWORD *)(v5 + 44) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_OWORD *)(v5 + 8) = 0uLL;
      *(_OWORD *)(v5 + 24) = 0uLL;
      *(_BYTE *)(v5 + 40) = 0;
      v5 += 56;
    }
    while (v5 != v4 + 56 * a2);
  }
  a1[1] = v4;
  return a1;
}

_QWORD *sub_233CB2588(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF718;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1050C803B0C9973);
  return a1;
}

void sub_233CB25D0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF718;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1050C803B0C9973);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB2628(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF750;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8077774924);
  return a1;
}

void sub_233CB2670(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF750;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8077774924);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB26C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF788;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8077774924);
  return a1;
}

void sub_233CB2710(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF788;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8077774924);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CB2768(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_2504EF7C0;
  v2 = a1[1];
  if (v2)
    MEMORY[0x23493E6EC](v2, 0x1000C8077774924);
  return a1;
}

void sub_233CB27B0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_2504EF7C0;
  v1 = a1[1];
  if (v1)
    MEMORY[0x23493E6EC](v1, 0x1000C8077774924);
  JUMPOUT(0x23493E704);
}

BOOL sub_233CB2808(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (dword_2504EF7E8[v1] != a1)
  {
    v1 += 4;
    if (v1 == 260)
      return 0;
  }
  return dword_2504EF7E8[v1 + 1] != 1;
}

uint64_t sub_233CB2848(int a1, unsigned int a2)
{
  uint64_t result;

  result = 0;
  if (a1 > 256)
  {
    if (a1 <= 1065)
    {
      if (a1 > 767)
      {
        switch(a1)
        {
          case 1024:
            return sub_233CB2E9C(a2);
          case 1025:
          case 1031:
          case 1032:
          case 1033:
          case 1034:
          case 1035:
          case 1038:
          case 1039:
          case 1040:
          case 1041:
          case 1042:
          case 1044:
            return result;
          case 1026:
          case 1028:
          case 1029:
LABEL_44:
            result = sub_233CB2EF4(a2);
            break;
          case 1027:
            result = sub_233CB32F8(a2);
            break;
          case 1030:
            result = sub_233CB3334(a2);
            break;
          case 1036:
          case 1037:
          case 1043:
          case 1045:
LABEL_19:
            result = sub_233CB2F30(a2);
            break;
          default:
            if (a1 == 768)
            {
              result = sub_233CB323C(a2);
            }
            else if (a1 == 769)
            {
              result = sub_233CB32AC(a2);
            }
            break;
        }
      }
      else if (a1 > 335)
      {
        switch(a1)
        {
          case 512:
            result = sub_233CB318C(a2);
            break;
          case 513:
            result = sub_233CB31D4(a2);
            break;
          case 514:
            result = sub_233CB321C(a2);
            break;
          case 515:
            return result;
          case 516:
            return sub_233CB2EB8(a2);
          default:
            if (a1 == 336)
LABEL_38:
              result = sub_233CB2FEC(a2);
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 257:
            return sub_233CB30EC(a2);
          case 258:
            return sub_233CB3140(a2);
          case 259:
            return sub_233CB3168(a2);
        }
      }
    }
    else if (a1 <= 1282)
    {
      if (a1 > 1104)
      {
        switch(a1)
        {
          case 1105:
            return sub_233CB3378(a2);
          case 1106:
            return sub_233CB2E9C(a2);
          case 1107:
            return sub_233CB2EB8(a2);
        }
      }
      else
      {
        switch(a1)
        {
          case 1066:
          case 1067:
          case 1068:
          case 1069:
          case 1070:
          case 1071:
            goto LABEL_19;
          default:
            return result;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 1283:
        case 1285:
        case 1287:
        case 1290:
        case 1291:
        case 1292:
LABEL_3:
          result = sub_233CB2D50(a2);
          break;
        case 1284:
          return sub_233CB2EB8(a2);
        case 1286:
          goto LABEL_19;
        case 1288:
        case 1289:
        case 1294:
        case 1296:
LABEL_7:
          result = a2 - 65528 < 6;
          break;
        case 1293:
        case 1295:
LABEL_52:
          result = sub_233CB3060(a2);
          break;
        default:
          if (a1 == 1873)
            return sub_233CB2D6C(a2);
          if (a1 == 2820)
            result = sub_233CB3394(a2);
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 3:
      case 43:
      case 74:
      case 84:
      case 85:
      case 94:
      case 151:
      case 156:
        goto LABEL_3;
      case 4:
      case 30:
      case 45:
      case 46:
      case 64:
      case 65:
      case 69:
      case 91:
        return sub_233CB2D6C(a2);
      case 5:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 38:
      case 39:
      case 58:
      case 61:
      case 66:
      case 67:
      case 68:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 88:
      case 90:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 146:
      case 147:
      case 149:
      case 154:
        return result;
      case 6:
        return sub_233CB2D88(a2);
      case 7:
        return sub_233CB2DB4(a2);
      case 8:
        return sub_233CB2DD4(a2);
      case 15:
        return sub_233CB2E18(a2);
      case 28:
      case 41:
      case 50:
        goto LABEL_7;
      case 29:
      case 31:
      case 48:
      case 155:
        return sub_233CB2E9C(a2);
      case 37:
      case 44:
      case 59:
      case 60:
      case 71:
      case 98:
        return sub_233CB2EB8(a2);
      case 40:
        return sub_233CB2ED4(a2);
      case 42:
      case 52:
      case 63:
      case 73:
      case 81:
      case 82:
      case 83:
      case 89:
      case 93:
      case 157:
      case 158:
      case 159:
        goto LABEL_44;
      case 47:
        return sub_233CB2F10(a2);
      case 49:
      case 129:
        goto LABEL_19;
      case 51:
      case 55:
      case 95:
        return sub_233CB2F50(a2);
      case 53:
        return sub_233CB2F70(a2);
      case 54:
      case 56:
      case 92:
        return sub_233CB2F90(a2);
      case 57:
        return sub_233CB2FB0(a2);
      case 62:
      case 72:
      case 80:
      case 86:
      case 96:
      case 97:
      case 113:
      case 114:
      case 145:
      case 148:
        goto LABEL_38;
      case 70:
        return sub_233CB300C(a2);
      case 87:
        return sub_233CB302C(a2);
      case 128:
      case 150:
      case 152:
        goto LABEL_52;
      case 144:
        return sub_233CB3080(a2);
      case 153:
        return sub_233CB30A0(a2);
      default:
        if (a1 == -918523)
          return sub_233CB3470(a2);
        if (a1 != -918496)
          return result;
        break;
    }
    return sub_233CB2D6C(a2);
  }
  return result;
}

BOOL sub_233CB2D50(unsigned int a1)
{
  return a1 - 65528 < 6 || a1 < 2;
}

BOOL sub_233CB2D6C(int a1)
{
  return (a1 - 65528) < 6 || a1 == 0;
}

uint64_t sub_233CB2D88(int a1)
{
  _BOOL4 v1;

  v1 = (a1 - 0x4000) < 4 || a1 == 0;
  return (a1 - 65528) < 6 || v1;
}

BOOL sub_233CB2DB4(int a1)
{
  return (a1 - 65528) < 6 || a1 == 0 || a1 == 16;
}

uint64_t sub_233CB2DD4(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v4;

  result = 1;
  if (a1 > 0x14 || ((1 << a1) & 0x1F807F) == 0)
  {
    v3 = a1 - 65528;
    v4 = a1 == 0x4000;
    return v3 < 6 || v4;
  }
  return result;
}

uint64_t sub_233CB2E18(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 255)
  {
    if ((a1 - 65528) >= 6 && a1 != 256)
      return 0;
  }
  else if (((a1 - 81) > 0x1E || ((1 << (a1 - 81)) & 0x40400019) == 0)
         && (a1 > 0x2E || ((1 << a1) & 0x400010000010) == 0))
  {
    return 0;
  }
  return result;
}

BOOL sub_233CB2E9C(unsigned int a1)
{
  return a1 - 65528 < 6 || a1 < 5;
}

BOOL sub_233CB2EB8(unsigned int a1)
{
  return a1 - 65528 < 6 || a1 < 3;
}

BOOL sub_233CB2ED4(unsigned int a1)
{
  return a1 < 0x17 || a1 - 65528 < 6;
}

BOOL sub_233CB2EF4(unsigned int a1)
{
  return a1 - 65528 < 6 || a1 < 4;
}

BOOL sub_233CB2F10(unsigned int a1)
{
  return a1 < 0x20 || a1 - 65528 < 6;
}

BOOL sub_233CB2F30(unsigned int a1)
{
  return a1 < 0xB || a1 - 65528 < 6;
}

BOOL sub_233CB2F50(unsigned int a1)
{
  return a1 < 9 || a1 - 65528 < 6;
}

BOOL sub_233CB2F70(unsigned int a1)
{
  return a1 < 0x3F || a1 - 65528 < 6;
}

BOOL sub_233CB2F90(unsigned int a1)
{
  return a1 < 0xD || a1 - 65528 < 6;
}

BOOL sub_233CB2FB0(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x14 || ((1 << a1) & 0x16FFAE) == 0)
    return a1 - 65528 < 6;
  return result;
}

BOOL sub_233CB2FEC(unsigned int a1)
{
  return a1 < 6 || a1 - 65528 < 6;
}

BOOL sub_233CB300C(unsigned int a1)
{
  return a1 < 0xA || a1 - 65528 < 6;
}

uint64_t sub_233CB302C(unsigned int a1)
{
  uint64_t result;

  result = 1;
  if (a1 - 65528 >= 6 && (a1 > 3 || a1 == 1))
    return 0;
  return result;
}

BOOL sub_233CB3060(unsigned int a1)
{
  return a1 < 8 || a1 - 65528 < 6;
}

BOOL sub_233CB3080(unsigned int a1)
{
  return a1 < 0x13 || a1 - 65528 < 6;
}

BOOL sub_233CB30A0(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 - 35 > 0x20 || ((1 << (a1 - 35)) & 0x1E000E01FLL) == 0)
    return a1 < 0xB || a1 - 65528 < 6;
  return result;
}

uint64_t sub_233CB30EC(unsigned int a1)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v4;

  result = 1;
  if (a1 > 0x35 || ((1 << a1) & 0x2F1FFE1FFE007FLL) == 0)
  {
    v3 = a1 - 128;
    v4 = a1 - 65528 < 6;
    return v3 < 9 || v4;
  }
  return result;
}

uint64_t sub_233CB3140(unsigned int a1)
{
  _BOOL4 v3;

  v3 = a1 - 65528 < 6 || a1 == 23 || a1 == 26;
  return a1 < 0x14 || v3;
}

BOOL sub_233CB3168(int a1)
{
  return (a1 - 1) < 0xA || (a1 - 65528) < 6;
}

BOOL sub_233CB318C(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x21 || ((1 << a1) & 0x300FF1FFFLL) == 0)
    return a1 - 65528 < 6;
  return result;
}

uint64_t sub_233CB31D4(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 41:
    case 48:
    case 49:
    case 50:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
      return result;
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 29:
    case 31:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 51:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_4;
    default:
      if ((a1 - 65528) >= 6)
LABEL_4:
        result = 0;
      break;
  }
  return result;
}

BOOL sub_233CB321C(unsigned int a1)
{
  return a1 < 0xC || a1 - 65528 < 6;
}

BOOL sub_233CB323C(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 > 0x3C || ((1 << a1) & 0x1DDF07770EEF81FFLL) == 0) && (a1 - 0x4000 > 0x10 || ((1 << a1) & 0x13C7F) == 0))
    return a1 - 65528 < 6;
  return result;
}

BOOL sub_233CB32AC(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x35 || ((1 << a1) & 0x3F000100330007) == 0)
    return a1 - 65528 < 6;
  return result;
}

BOOL sub_233CB32F8(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x14 || ((1 << a1) & 0x1F000F) == 0)
    return a1 - 65528 < 6;
  return result;
}

BOOL sub_233CB3334(unsigned int a1)
{
  _BOOL8 result;

  result = 1;
  if (a1 > 0x32 || ((1 << a1) & 0x700070007001FLL) == 0)
    return a1 - 65528 < 6;
  return result;
}

BOOL sub_233CB3378(int a1)
{
  return (a1 - 65528) < 6 || a1 == 1;
}

uint64_t sub_233CB3394(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 > 1791)
  {
    if (a1 <= 2560)
    {
      if (((a1 - 2305) > 0x16 || a1 == 2308)
        && (a1 - 2048) >= 0xB
        && (a1 - 1792) >= 3)
      {
        return 0;
      }
      return result;
    }
    if ((a1 - 2561) <= 0x16 && a1 != 2564)
      return result;
    v3 = a1 - 65528;
    goto LABEL_19;
  }
  if (a1 > 1023)
  {
    if ((a1 - 1280) <= 0x17 && a1 != 1298 || (a1 - 1024) < 6)
      return result;
    v3 = a1 - 1536;
LABEL_19:
    if (v3 >= 6)
      return 0;
    return result;
  }
  if (a1 > 767)
  {
    if ((a1 - 768) < 0x13)
      return result;
    return 0;
  }
  if ((a1 - 256) >= 9 && (a1 - 512) >= 6 && a1)
    return 0;
  return result;
}

uint64_t sub_233CB3470(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 254)
  {
    if (((a1 - 0x4000) > 0x2A || ((1 << a1) & 0x7F043FFFFFFLL) == 0)
      && (a1 - 65528) >= 6
      && a1 != 255)
    {
      return 0;
    }
  }
  else if ((a1 > 0x32 || ((1 << a1) & 0x70FFFFFFFFFFFLL) == 0) && a1 != -897279)
  {
    return 0;
  }
  return result;
}

_QWORD *sub_233CB3504(_QWORD *a1)
{
  *a1 = off_2504EFC08;
  sub_233C05DF8(0, (uint64_t)a1);
  return a1;
}

_QWORD *sub_233CB353C(_QWORD *a1)
{
  uint64_t v2;
  __int128 v4;
  int v5;

  *a1 = off_2504EFC08;
  v2 = sub_233CB6B8C((uint64_t)&unk_254252F60);
  LODWORD(v4) = 116;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/M"
                         "TROTAProviderDelegateBridge.mm";
  v5 = 498;
  sub_233CB35B0(v2, &v4);
  sub_233C05DF8(0, 0);
  return a1;
}

void sub_233CB35B0(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  uint64_t *v14;
  const char *v15;
  void *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD block[4];
  id v26;
  id v27;
  id v28;
  __int128 v29;
  uint64_t v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 126);
  if (*(_BYTE *)(a1 + 288) && *(_BYTE *)(a1 + 279))
  {
    sub_234117B80(9u, "Controller");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *((_DWORD *)sub_233CB6588((_BYTE *)(a1 + 288)) + 1);
      v6 = *(_QWORD *)sub_233CB6588((_BYTE *)(a1 + 288));
      v7 = *sub_233CB65A8((_BYTE *)(a1 + 279));
      *(_DWORD *)buf = 67109632;
      v32 = v5;
      v33 = 1024;
      v34 = v6;
      v35 = 1024;
      v36 = v7;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Resetting state for OTA Provider; no longer providing an update for node id 0x%08X%08X, fabric index %u",
        buf,
        0x14u);
    }

    if (sub_234114844(2u))
    {
      sub_233CB6588((_BYTE *)(a1 + 288));
      sub_233CB6588((_BYTE *)(a1 + 288));
      sub_233CB65A8((_BYTE *)(a1 + 279));
      sub_2341147D0(9u, 2);
    }
    if (*(_BYTE *)(a1 + 278))
    {
      objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v8, v9);
      v10 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
      v11 = sub_233CB65A8((_BYTE *)(a1 + 279));
      sub_233C0A780(v10, *v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
      {
        v13 = (void *)MEMORY[0x24BDD16E0];
        v14 = (uint64_t *)sub_233CB6588((_BYTE *)(a1 + 288));
        objc_msgSend_numberWithUnsignedLongLong_(v13, v15, *v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = *(id *)(a1 + 304);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v18 = *(NSObject **)(a1 + 312);
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 3221225472;
          block[2] = sub_233CB65C8;
          block[3] = &unk_2504EFE48;
          v26 = v17;
          v27 = v16;
          v28 = v12;
          v29 = *a2;
          v30 = *((_QWORD *)a2 + 2);
          dispatch_async(v18, block);

        }
      }
      else
      {
        sub_234117B80(9u, "Controller");
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Not notifying delegate of BDX Transfer Session End, controller is not running", buf, 2u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
      }

    }
  }
  else
  {
    sub_234117B80(9u, "Controller");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_DEFAULT, "Resetting state for OTA Provider", buf, 2u);
    }

    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
  }
  v21 = *(_QWORD *)(a1 + 264);
  if (v21)
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v21 + 72))(v21, sub_233CB664C, a1);
  if (*(_BYTE *)(a1 + 277))
  {
    sub_23421E67C(a1);
    ++*(_QWORD *)(a1 + 328);
    *(_BYTE *)(a1 + 279) = 0;
    *(_BYTE *)(a1 + 288) = 0;
    v22 = *(_QWORD *)(a1 + 256);
    if (v22)
    {
      sub_2341AD5A4(v22);
      *(_QWORD *)(a1 + 256) = 0;
    }
    v23 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = 0;

    v24 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;

    *(_WORD *)(a1 + 277) = 0;
  }
}

void sub_233CB3994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB39E0(_QWORD *a1)
{
  sub_233CB353C(a1);
  JUMPOUT(0x23493E704);
}

int *sub_233CB3A04@<X0>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = sub_233CB6B8C((uint64_t)&unk_254252F60);
  return sub_233CB3A48(v6, a1, a2, a3);
}

int *sub_233CB3A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int *result;
  int v9;
  int v10;
  _BYTE v11[24];

  result = (int *)sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 84);
  if (*(_QWORD *)(a1 + 264))
  {
    v9 = 86;
  }
  else if (*(_QWORD *)(a1 + 320))
  {
    v9 = 87;
  }
  else if (a2)
  {
    if (a3)
    {
      result = sub_2341AE980(a3, 0x20000, a1 + 8, (uint64_t)v11);
      v10 = 0;
      *(_QWORD *)(a1 + 264) = a2;
      *(_QWORD *)(a1 + 320) = a3;
      v9 = 96;
      goto LABEL_6;
    }
    v9 = 89;
  }
  else
  {
    v9 = 88;
  }
  v10 = 3;
LABEL_6:
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "ROTAProviderDelegateBridge.mm";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_233CB3B08()
{
  uint64_t v0;
  _BYTE v1[24];

  v0 = sub_233CB6B8C((uint64_t)&unk_254252F60);
  sub_233CB3B34(v0, (uint64_t)v1);
}

void sub_233CB3B34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  int v5;
  int v6;
  __int128 v7;
  int v8;
  _BYTE v9[24];

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 101);
  if (!*(_QWORD *)(a1 + 264))
  {
    v6 = 103;
LABEL_6:
    v5 = 3;
    goto LABEL_7;
  }
  v4 = *(int **)(a1 + 320);
  if (!v4)
  {
    v6 = 104;
    goto LABEL_6;
  }
  sub_2341AEA98(v4, 0x20000, (uint64_t)v9);
  LODWORD(v7) = 116;
  *((_QWORD *)&v7 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/M"
                         "TROTAProviderDelegateBridge.mm";
  v8 = 107;
  sub_233CB35B0(a1, &v7);
  v5 = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v6 = 112;
LABEL_7:
  *(_DWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "ROTAProviderDelegateBridge.mm";
  *(_DWORD *)(a2 + 16) = v6;
}

void sub_233CB3BE4(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v3 = a2;
  v2 = sub_233CB6B8C((uint64_t)&unk_254252F60);
  sub_233CB3C38(v2, v3);

}

void sub_233CB3C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CB3C38(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  const char *v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  v3 = a2;
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 117);
  if (*(_BYTE *)(a1 + 277))
  {
    v4 = *sub_233CB65A8((_BYTE *)(a1 + 279));
    if (v4 == objc_msgSend_fabricIndex(v3, v5, v6))
    {
      LODWORD(v7) = 116;
      *((_QWORD *)&v7 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CH"
                             "IP/MTROTAProviderDelegateBridge.mm";
      v8 = 120;
      sub_233CB35B0(a1, &v7);
    }
  }

}

void sub_233CB3CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB3CD8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  int v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  MTROTASoftwareUpdateProviderClusterQueryImageParams *v15;
  uint64_t v16;
  id v17;
  MTROTASoftwareUpdateProviderClusterQueryImageParams *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  id v28;
  _QWORD block[4];
  id v30;
  id v31;
  MTROTASoftwareUpdateProviderClusterQueryImageParams *v32;
  id v33;
  uint64_t v34;
  _QWORD v35[4];
  id v36;
  MTROTASoftwareUpdateProviderClusterQueryImageParams *v37;
  __int128 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[6];
  __int16 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD *(*v49)(uint64_t, uint64_t);
  _QWORD *(*v50)(uint64_t);
  const char *v51;
  _QWORD v52[3];
  __int128 v53;
  uint64_t v54;
  id v55;
  uint64_t v56[3];

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 606);
  v55 = 0;
  v56[0] = 0;
  v7 = sub_233CB4098(a2, a3, v56, &v55);
  v8 = v55;
  if (v7)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    sub_233CB4208(v10, &v47);
    v11 = sub_2341CD3C0(v47);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
    v14 = v13;
    (*(void (**)(_QWORD))(*(_QWORD *)v47 + 32))(v47);
    v15 = objc_alloc_init(MTROTASoftwareUpdateProviderClusterQueryImageParams);
    v53 = 0uLL;
    v54 = 0;
    sub_233CB42B8(a4, v15, &v53);
    if ((_DWORD)v53)
    {
      v47 = v53;
      v48 = v54;
      LOWORD(v44[0]) = 0;
      sub_23411E638(v44, (int *)&v47);
      LOWORD(v47) = LOBYTE(v44[0]);
      (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD))(*(_QWORD *)a2 + 24))(a2, a3, &v47, 0);
    }
    else
    {
      *(_QWORD *)&v47 = 0;
      *((_QWORD *)&v47 + 1) = &v47;
      v48 = 0x4812000000;
      v49 = sub_233CB4594;
      v50 = sub_233CB45A0;
      v51 = "";
      sub_234214ED8(v52, a2);
      v44[0] = 0;
      v44[1] = v44;
      v44[3] = sub_233CB45A8;
      v44[4] = nullsub_19;
      v44[2] = 0x4012000000;
      v44[5] = "";
      v45 = *(_WORD *)a3;
      v46 = *(_QWORD *)(a3 + 4);
      v16 = MEMORY[0x24BDAC760];
      v35[0] = MEMORY[0x24BDAC760];
      v35[1] = 3221225472;
      v35[2] = sub_233CB45C0;
      v35[3] = &unk_2504EFCA0;
      v17 = v8;
      v36 = v17;
      v38 = &v47;
      v39 = v44;
      v18 = v15;
      v43 = v9;
      v19 = v56[0];
      v37 = v18;
      v40 = v56[0];
      v41 = v12;
      v42 = v14;
      v20 = (void *)MEMORY[0x23493EEA8](v35);
      objc_msgSend_otaProviderDelegate(v17, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_otaProviderDelegateQueue(v17, v24, v25);
      v26 = objc_claimAutoreleasedReturnValue();
      block[0] = v16;
      block[1] = 3221225472;
      block[2] = sub_233CB5494;
      block[3] = &unk_2504EFCF0;
      v30 = v23;
      v34 = v19;
      v31 = v17;
      v32 = v18;
      v33 = v20;
      v27 = v20;
      v28 = v23;
      dispatch_async(v26, block);

      _Block_object_dispose(v44, 8);
      _Block_object_dispose(&v47, 8);
      sub_233CB6818(v52);
    }

  }
}

void sub_233CB4000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  sub_233CB6818(a9);

  _Unwind_Resume(a1);
}

uint64_t sub_233CB4098(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  const char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[4];
  __int16 v19;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 88))(v18);
  if (BYTE1(v18[0]) == 64)
  {
    objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v8, v9);
    v10 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    sub_233C0A780(v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      objc_msgSend_otaProviderDelegate(v12, v13, v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        *a4 = objc_retainAutorelease(v12);
        *a3 = v18[1];
        v16 = 1;
LABEL_9:

        return v16;
      }
      v19 = 129;
      (*(void (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, &v19, 0);
    }
    else
    {
      v19 = 1;
      (*(void (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, &v19, 0);
    }
    v16 = 0;
    goto LABEL_9;
  }
  v19 = 1;
  (*(void (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, &v19, 0);
  return 0;
}

void sub_233CB41EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB4208@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v8[8];
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a1 + 88);
  v3 = (_BYTE *)(a1 + 88);
  if (!v4)
    sub_2342553A0();
  v5 = *(_QWORD *)sub_233C25EA4(v3);
  v8[0] = 1;
  v9 = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_QWORD *)sub_233CB6588(v8);
  *a2 = v6;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (v8[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  return result;
}

void sub_233CB4290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  _Unwind_Resume(exception_object);
}

void sub_233CB42B8(unsigned __int16 *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  const char *v6;
  void *v7;
  const char *v8;
  const char *v9;
  void *v10;
  const char *v11;
  const char *v12;
  void *v13;
  const char *v14;
  id v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  _BYTE *v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  const char *v28;
  void *v29;
  const char *v30;
  void *v31;
  _BYTE *v32;
  const char *v33;
  void *v34;
  const char *v35;
  _BYTE *v36;
  int v37;
  uint64_t *v38;
  const char *v39;
  void *v40;
  const char *v41;
  _BYTE v42[8];
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45[2];

  v5 = a2;
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x24BDD16E0], v6, *a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setVendorID_(v5, v8, (uint64_t)v7);

  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x24BDD16E0], v9, a1[1]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setProductID_(v5, v11, (uint64_t)v10);

  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v12, *((unsigned int *)a1 + 1));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSoftwareVersion_(v5, v14, (uint64_t)v13);

  v45[0] = *((_BYTE *)a1 + 80);
  if (v45[0])
    v45[1] = *((_BYTE *)a1 + 81);
  sub_233C05E38((uint64_t)v42, (uint64_t)(a1 + 4), v45);
  v15 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  while (sub_233C05EA4((uint64_t)v42))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x24BDD16E0], v16, v42[0]);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v15, v18, (uint64_t)v17);

  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((_DWORD)v43 == 33)
  {
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/DecodableList.h";
    *((_DWORD *)a3 + 4) = 147;
  }
  else
  {
    *(_OWORD *)a3 = v43;
    a3[2] = v44;
    if (*(_DWORD *)a3)
      goto LABEL_18;
  }
  objc_msgSend_setProtocolsSupported_(v5, v16, (uint64_t)v15);
  if (*((_BYTE *)a1 + 88))
  {
    v19 = (void *)MEMORY[0x24BDD16E0];
    v20 = sub_233C05D98((_BYTE *)a1 + 88);
    objc_msgSend_numberWithUnsignedShort_(v19, v21, *(unsigned __int16 *)v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setHardwareVersion_(v5, v23, (uint64_t)v22);

  }
  if (*((_BYTE *)a1 + 96))
  {
    v24 = (uint64_t *)sub_233C05DB8((_BYTE *)a1 + 96);
    v25 = *v24;
    v26 = v24[1];
    v27 = objc_alloc(MEMORY[0x24BDD17C8]);
    v29 = (void *)objc_msgSend_initWithBytes_length_encoding_(v27, v28, v25, v26, 4);
    objc_msgSend_setLocation_(v5, v30, (uint64_t)v29);

  }
  if (*((_BYTE *)a1 + 120))
  {
    v31 = (void *)MEMORY[0x24BDD16E0];
    v32 = sub_233C05DD8((_BYTE *)a1 + 120);
    objc_msgSend_numberWithBool_(v31, v33, *v32);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setRequestorCanConsent_(v5, v35, (uint64_t)v34);

  }
  v37 = *((unsigned __int8 *)a1 + 128);
  v36 = a1 + 64;
  if (v37)
  {
    v38 = (uint64_t *)sub_233C05DB8(v36);
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v39, *v38, v38[1]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setMetadataForProvider_(v5, v41, (uint64_t)v40);

  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm";
  *((_DWORD *)a3 + 4) = 882;
LABEL_18:

}

void sub_233CB4538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_233CB4594(uint64_t a1, uint64_t a2)
{
  return sub_233CB6690((_QWORD *)(a1 + 48), a2 + 48);
}

_QWORD *sub_233CB45A0(uint64_t a1)
{
  return sub_233CB6818((_QWORD *)(a1 + 48));
}

uint64_t sub_233CB45A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_233CB45C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  __int128 v12;
  _QWORD v13[4];
  id v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = sub_233CB46DC;
  v13[3] = &unk_2504EFC38;
  v17 = *(_QWORD *)(a1 + 56);
  v14 = v5;
  v15 = v6;
  v12 = *(_OWORD *)(a1 + 40);
  v8 = (id)v12;
  v16 = v12;
  v20 = *(_BYTE *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_OWORD *)(a1 + 72);
  v9 = v6;
  v10 = v5;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v7, v11, (uint64_t)v13, &unk_2504EFC78);

}

void sub_233CB46B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_233CB46DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  char isEqual;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  char v22;
  _QWORD *v23;
  const char *v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  int v54;
  int v55;
  __int128 v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  int v64;
  int v65;
  __int128 v66;
  int v67;
  _OWORD v68[2];
  _QWORD v69[2];
  char v70;
  __int128 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE v77[24];
  int v78;
  __int128 v79;
  int v80;
  _BYTE buf[24];
  int v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 632);
  v2 = sub_233CB4F40(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48, (uint64_t)"QueryImage", *(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  if (v2)
  {
    v3 = v2;
    sub_234117B80(9u, "Controller");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend_description(*(void **)(a1 + 32), v5, v6);
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = objc_msgSend_UTF8String(v7, v8, v9);
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "QueryImage: application responded with: %s", buf, 0xCu);

    }
    if (sub_234114844(3u))
    {
      objc_msgSend_description(*(void **)(a1 + 32), v10, v11);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v49 = objc_msgSend_UTF8String(v12, v13, v14);
      sub_2341147D0(9u, 3);

    }
    objc_msgSend_status(*(void **)(a1 + 32), v10, v11, v49);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isEqual = objc_msgSend_isEqual_(v15, v16, (uint64_t)&unk_250591A70);

    objc_msgSend_protocolsSupported(*(void **)(a1 + 48), v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend_containsObject_(v20, v21, (uint64_t)&unk_250591A70);

    if ((v22 & 1) != 0)
    {
      LOBYTE(v69[0]) = 0;
      BYTE4(v69[0]) = 0;
      v70 = 0;
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      sub_233CB50A8(*(void **)(a1 + 32), (uint64_t)v69);
      if ((isEqual & 1) != 0)
      {
        memset(v68, 0, 24);
        v23 = (_QWORD *)sub_233CB6B8C((uint64_t)&unk_254252F60);
        sub_233CB53B0(v23, *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 72), (uint64_t)v68);
        v26 = v68[0];
        if (LODWORD(v68[0]))
        {
          if (LODWORD(v68[0]) == 219)
          {
            sub_234117B80(9u, "Controller");
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v27, OS_LOG_TYPE_ERROR, "Responding with Busy due to being in the middle of handling another BDX transfer", buf, 2u);
            }

            if (sub_234114844(1u))
              sub_2341147D0(9u, 1);
            buf[16] = 0;
            v83 = 0;
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
            buf[0] = 1;
            if (BYTE4(v69[0]))
              v28 = (int *)sub_233C20E2C((_BYTE *)v69 + 4);
            else
              v28 = &dword_2342A9E34;
            buf[4] = 1;
            *(_DWORD *)&buf[8] = *v28;
            v47 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48;
            *(_QWORD *)v77 = &off_2504F0060;
            *(_QWORD *)&v77[8] = buf;
            (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 64))(v3, v47, 1, v77);
            sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
          }
          else
          {
            *(_OWORD *)v77 = *(_OWORD *)((char *)v68 + 4);
            *(_DWORD *)&v77[16] = DWORD1(v68[1]);
            sub_234117B80(0, "NotSpecified");
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v66 = *(_OWORD *)v77;
              v65 = v26;
              v67 = *(_DWORD *)&v77[16];
              v44 = sub_2341083CC((const char **)&v65, 1);
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v44;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Frame"
                                    "work/CHIP/MTROTAProviderDelegateBridge.mm";
              *(_WORD *)&buf[22] = 1024;
              v82 = 689;
              _os_log_impl(&dword_233BF3000, v43, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
            }

            if (sub_234114844(1u))
            {
              v63 = *(_OWORD *)v77;
              v62 = v26;
              v64 = *(_DWORD *)&v77[16];
              sub_2341083CC((const char **)&v62, 1);
              sub_2341147D0(0, 1);
            }
            v45 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            *(_OWORD *)buf = v68[0];
            *(_QWORD *)&buf[16] = *(_QWORD *)&v68[1];
            *(_WORD *)v77 = 0;
            sub_23411E638(v77, (int *)buf);
            buf[0] = v77[0];
            buf[1] = 0;
            (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v3 + 24))(v3, v45 + 48, buf, 0);
            sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
            v46 = sub_233CB6B8C((uint64_t)&unk_254252F60);
            v60 = v68[0];
            v61 = *(_QWORD *)&v68[1];
            sub_233CB35B0(v46, &v60);
          }
        }
        else
        {
          v58 = buf;
          v59 = 256;
          v31 = *(_QWORD *)(a1 + 80);
          objc_msgSend_imageURI(*(void **)(a1 + 32), v24, v25);
          v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v35 = objc_msgSend_UTF8String(v32, v33, v34);
          v37 = objc_msgSend_lengthOfBytesUsingEncoding_(v32, v36, 4);
          sub_233CAF22C(&v79, v35, v37);

          sub_23421DD94(v31, (const void *)v79, *((size_t *)&v79 + 1), (uint64_t)&v58, v77);
          v68[0] = *(_OWORD *)v77;
          *(_QWORD *)&v68[1] = *(_QWORD *)&v77[16];

          v38 = v68[0];
          if (LODWORD(v68[0]))
          {
            v79 = *(_OWORD *)((char *)v68 + 4);
            v80 = DWORD1(v68[1]);
            sub_234117B80(0, "NotSpecified");
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              v55 = v38;
              v56 = v79;
              v57 = v80;
              v40 = sub_2341083CC((const char **)&v55, 1);
              *(_DWORD *)v77 = 136315650;
              *(_QWORD *)&v77[4] = v40;
              *(_WORD *)&v77[12] = 2080;
              *(_QWORD *)&v77[14] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Frame"
                                    "work/CHIP/MTROTAProviderDelegateBridge.mm";
              *(_WORD *)&v77[22] = 1024;
              v78 = 702;
              _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_ERROR, "%s at %s:%d", v77, 0x1Cu);
            }

            if (sub_234114844(1u))
            {
              v52 = v38;
              v53 = v79;
              v54 = v80;
              sub_2341083CC((const char **)&v52, 1);
              sub_2341147D0(0, 1);
            }
            v41 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            *(_OWORD *)v77 = v68[0];
            *(_QWORD *)&v77[16] = *(_QWORD *)&v68[1];
            LOWORD(v79) = 0;
            sub_23411E638(&v79, (int *)v77);
            v77[0] = v79;
            v77[1] = 0;
            (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v3 + 24))(v3, v41 + 48, v77, 0);
            sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
            v42 = sub_233CB6B8C((uint64_t)&unk_254252F60);
            v50 = v68[0];
            v51 = *(_QWORD *)&v68[1];
            sub_233CB35B0(v42, &v50);
          }
          else
          {
            sub_233CAF22C(v77, (uint64_t)v58, v59);
            v70 = 1;
            v71 = *(_OWORD *)v77;
            v48 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48;
            *(_QWORD *)v77 = &off_2504F0060;
            *(_QWORD *)&v77[8] = v69;
            (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 64))(v3, v48, 1, v77);
            sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
          }
        }
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48;
        *(_QWORD *)buf = &off_2504F0060;
        *(_QWORD *)&buf[8] = v69;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v3 + 64))(v3, v30, 1, buf);
        sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
      }
    }
    else
    {
      buf[4] = 0;
      buf[16] = 0;
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      buf[0] = 3;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48;
      v69[0] = &off_2504F0060;
      v69[1] = buf;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v3 + 64))(v3, v29, 1, v69);
      sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
    }
  }
}

void sub_233CB4E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB4F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9 = a5;
  v10 = sub_233CB616C(a1, a2, a3, v9);
  if (v10 && !a4)
  {
    sub_234117B80(9u, "Controller");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v14 = a3;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "%s: no data to send as a response", buf, 0xCu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_WORD *)buf = 1;
    (*(void (**)(uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v10 + 24))(v10, a2, buf, 0);
    sub_234214EA0(a1);
    v10 = 0;
  }

  return v10;
}

void sub_233CB508C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB50A8(void *a1, uint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  int v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  id v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  id v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  char v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  id v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;

  v3 = a1;
  objc_msgSend_status(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)a2 = objc_msgSend_intValue(v6, v7, v8);

  objc_msgSend_delayedActionTime(v3, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend_delayedActionTime(v3, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_unsignedIntValue(v14, v15, v16);
    *(_BYTE *)(a2 + 4) = 1;
    *(_DWORD *)(a2 + 8) = v17;

  }
  objc_msgSend_imageURI(v3, v12, v13);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend_imageURI(v3, v19, v20);
    v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v24 = objc_msgSend_UTF8String(v21, v22, v23);
    v26 = objc_msgSend_lengthOfBytesUsingEncoding_(v21, v25, 4);
    sub_233CAF22C(&v74, v24, v26);

    v27 = v74;
    *(_BYTE *)(a2 + 16) = 1;
    *(_OWORD *)(a2 + 24) = v27;

  }
  objc_msgSend_softwareVersion(v3, v19, v20);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v28)
  {
    objc_msgSend_softwareVersion(v3, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend_unsignedIntValue(v31, v32, v33);
    *(_BYTE *)(a2 + 40) = 1;
    *(_DWORD *)(a2 + 44) = v34;

  }
  objc_msgSend_softwareVersionString(v3, v29, v30);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (v35)
  {
    objc_msgSend_softwareVersionString(v3, v36, v37);
    v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v41 = objc_msgSend_UTF8String(v38, v39, v40);
    v43 = objc_msgSend_lengthOfBytesUsingEncoding_(v38, v42, 4);
    sub_233CAF22C(&v74, v41, v43);

    v44 = v74;
    *(_BYTE *)(a2 + 48) = 1;
    *(_OWORD *)(a2 + 56) = v44;

  }
  objc_msgSend_updateToken(v3, v36, v37);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  if (v45)
  {
    objc_msgSend_updateToken(v3, v46, v47);
    v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v51 = objc_msgSend_bytes(v48, v49, v50);
    v54 = objc_msgSend_length(v48, v52, v53);
    sub_233BF7114(&v74, v51, v54);

    v55 = v74;
    *(_BYTE *)(a2 + 72) = 1;
    *(_OWORD *)(a2 + 80) = v55;

  }
  objc_msgSend_userConsentNeeded(v3, v46, v47);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  if (v56)
  {
    objc_msgSend_userConsentNeeded(v3, v57, v58);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = objc_msgSend_BOOLValue(v59, v60, v61);
    *(_BYTE *)(a2 + 96) = 1;
    *(_BYTE *)(a2 + 97) = v62;

  }
  objc_msgSend_metadataForRequestor(v3, v57, v58);
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  if (v63)
  {
    objc_msgSend_metadataForRequestor(v3, v64, v65);
    v66 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v69 = objc_msgSend_bytes(v66, v67, v68);
    v72 = objc_msgSend_length(v66, v70, v71);
    sub_233BF7114(&v74, v69, v72);

    v73 = v74;
    *(_BYTE *)(a2 + 104) = 1;
    *(_OWORD *)(a2 + 112) = v73;

  }
}

void sub_233CB5354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB53B0(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 71);
  if (!a1[40])
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v8 = 73;
LABEL_7:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  if (!a1[33])
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v8 = 74;
    goto LABEL_7;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_233CB6840((uint64_t)a1, a2, a3, a4);
  if (!*(_DWORD *)a4)
    sub_23421E554(a1, a1[33], 1, 32, 1024, 300000, 50, (_QWORD *)a4);
}

void sub_233CB5494(uint64_t a1)
{
  char v2;
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v2 = objc_opt_respondsToSelector();
  v3 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v4, *(_QWORD *)(a1 + 64));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  if ((v2 & 1) != 0)
  {
    objc_msgSend_handleQueryImageForNodeID_controller_params_completion_(v3, v5, (uint64_t)v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
  else
  {
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = sub_233CB55B8;
    v10[3] = &unk_2504EFCC8;
    v11 = *(id *)(a1 + 56);
    objc_msgSend_handleQueryImageForNodeID_controller_params_completionHandler_(v3, v8, (uint64_t)v9, v6, v7, v10);

  }
}

void sub_233CB5594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_233CB55B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_233CB55C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  MTROTASoftwareUpdateProviderClusterApplyUpdateRequestParams *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  MTROTASoftwareUpdateProviderClusterApplyUpdateRequestParams *v20;
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  MTROTASoftwareUpdateProviderClusterApplyUpdateRequestParams *v25;
  id v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[6];
  __int16 v33;
  uint64_t v34;
  _QWORD v35[6];
  _QWORD v36[3];
  id v37;
  uint64_t v38;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 741);
  v37 = 0;
  v38 = 0;
  v7 = sub_233CB4098(a2, a3, &v38, &v37);
  v8 = v37;
  if (v7)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x4812000000;
    v35[3] = sub_233CB4594;
    v35[4] = sub_233CB45A0;
    v35[5] = "";
    sub_234214ED8(v36, a2);
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x4012000000;
    v32[3] = sub_233CB45A8;
    v32[4] = nullsub_19;
    v32[5] = "";
    v33 = *(_WORD *)a3;
    v34 = *(_QWORD *)(a3 + 4);
    v9 = MEMORY[0x24BDAC760];
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = sub_233CB5878;
    v28[3] = &unk_2504EFD60;
    v10 = v8;
    v29 = v10;
    v30 = v35;
    v31 = v32;
    v11 = (void *)MEMORY[0x23493EEA8](v28);
    v12 = objc_alloc_init(MTROTASoftwareUpdateProviderClusterApplyUpdateRequestParams);
    sub_233CB5BB0(a4, v12);
    objc_msgSend_otaProviderDelegate(v10, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_otaProviderDelegateQueue(v10, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v9;
    block[1] = 3221225472;
    block[2] = sub_233CB5C54;
    block[3] = &unk_2504EFCF0;
    v23 = v15;
    v27 = v38;
    v24 = v10;
    v25 = v12;
    v26 = v11;
    v19 = v11;
    v20 = v12;
    v21 = v15;
    dispatch_async(v18, block);

    _Block_object_dispose(v32, 8);
    _Block_object_dispose(v35, 8);
    sub_233CB6818(v36);
  }

}

void sub_233CB5814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;

  v32 = v28;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v31 - 184), 8);
  sub_233CB6818(v27);

  _Unwind_Resume(a1);
}

void sub_233CB5878(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  __int128 v14;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_233CB5950;
  v11[3] = &unk_2504EFD18;
  v14 = *(_OWORD *)(a1 + 40);
  v12 = v5;
  v13 = v6;
  v8 = v6;
  v9 = v5;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v7, v10, (uint64_t)v11, &unk_2504EFD38);

}

void sub_233CB592C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB5950(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[4];
  int v17;
  __int128 buf;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 757);
  result = sub_233CB4F40(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48, (uint64_t)"ApplyUpdateRequest", *(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
  if (result)
  {
    v3 = result;
    sub_234117B80(9u, "Controller");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend_description(*(void **)(a1 + 32), v5, v6);
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = objc_msgSend_UTF8String(v7, v8, v9);
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "ApplyUpdateRequest: application responded with: %s", (uint8_t *)&buf, 0xCu);

    }
    if (sub_234114844(3u))
    {
      objc_msgSend_description(*(void **)(a1 + 32), v10, v11);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend_UTF8String(v12, v13, v14);
      sub_2341147D0(9u, 3);

    }
    v16[0] = 0;
    v17 = 0;
    sub_233CB5B24(*(void **)(a1 + 32), (uint64_t)v16);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48;
    *(_QWORD *)&buf = &off_2504F00B0;
    *((_QWORD *)&buf + 1) = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v3, v15, 3, &buf);
    return sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
  }
  return result;
}

void sub_233CB5AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB5B24(void *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a1;
  objc_msgSend_action(v13, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)a2 = objc_msgSend_intValue(v5, v6, v7);

  objc_msgSend_delayedActionTime(v13, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)(a2 + 4) = objc_msgSend_unsignedIntValue(v10, v11, v12);

}

void sub_233CB5B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_233CB5BB0(uint64_t a1, void *a2)
{
  const char *v3;
  void *v4;
  const char *v5;
  const char *v6;
  void *v7;
  const char *v8;
  id v9;

  v9 = a2;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v3, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setUpdateToken_(v9, v5, (uint64_t)v4);

  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v6, *(unsigned int *)(a1 + 16));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setNewVersion_(v9, v8, (uint64_t)v7);

}

void sub_233CB5C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_233CB5C54(uint64_t a1)
{
  char v2;
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v2 = objc_opt_respondsToSelector();
  v3 = *(void **)(a1 + 32);
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v4, *(_QWORD *)(a1 + 64));
  v9 = (id)objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  if ((v2 & 1) != 0)
  {
    objc_msgSend_handleApplyUpdateRequestForNodeID_controller_params_completion_(v3, v5, (uint64_t)v9, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

  }
  else
  {
    v10[0] = MEMORY[0x24BDAC760];
    v10[1] = 3221225472;
    v10[2] = sub_233CB5D78;
    v10[3] = &unk_2504EFD88;
    v11 = *(id *)(a1 + 56);
    objc_msgSend_handleApplyUpdateRequestForNodeID_controller_params_completionHandler_(v3, v8, (uint64_t)v9, v6, v7, v10);

  }
}

void sub_233CB5D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_233CB5D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_233CB5D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  MTROTASoftwareUpdateProviderClusterNotifyUpdateAppliedParams *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  MTROTASoftwareUpdateProviderClusterNotifyUpdateAppliedParams *v20;
  id v21;
  _QWORD block[4];
  id v23;
  id v24;
  MTROTASoftwareUpdateProviderClusterNotifyUpdateAppliedParams *v25;
  id v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[6];
  __int16 v33;
  uint64_t v34;
  _QWORD v35[6];
  _QWORD v36[3];
  id v37;
  uint64_t v38;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 802);
  v37 = 0;
  v38 = 0;
  v7 = sub_233CB4098(a2, a3, &v38, &v37);
  v8 = v37;
  if (v7)
  {
    v35[0] = 0;
    v35[1] = v35;
    v35[2] = 0x4812000000;
    v35[3] = sub_233CB4594;
    v35[4] = sub_233CB45A0;
    v35[5] = "";
    sub_234214ED8(v36, a2);
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x4012000000;
    v32[3] = sub_233CB45A8;
    v32[4] = nullsub_19;
    v32[5] = "";
    v33 = *(_WORD *)a3;
    v34 = *(_QWORD *)(a3 + 4);
    v9 = MEMORY[0x24BDAC760];
    v28[0] = MEMORY[0x24BDAC760];
    v28[1] = 3221225472;
    v28[2] = sub_233CB6038;
    v28[3] = &unk_2504EFDF8;
    v10 = v8;
    v29 = v10;
    v30 = v35;
    v31 = v32;
    v11 = (void *)MEMORY[0x23493EEA8](v28);
    v12 = objc_alloc_init(MTROTASoftwareUpdateProviderClusterNotifyUpdateAppliedParams);
    sub_233CB6440(a4, v12);
    objc_msgSend_otaProviderDelegate(v10, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_otaProviderDelegateQueue(v10, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    block[0] = v9;
    block[1] = 3221225472;
    block[2] = sub_233CB64E4;
    block[3] = &unk_2504EFCF0;
    v23 = v15;
    v27 = v38;
    v24 = v10;
    v25 = v12;
    v26 = v11;
    v19 = v11;
    v20 = v12;
    v21 = v15;
    dispatch_async(v18, block);

    _Block_object_dispose(v32, 8);
    _Block_object_dispose(v35, 8);
    sub_233CB6818(v36);
  }

}

void sub_233CB5FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;

  v32 = v28;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v31 - 184), 8);
  sub_233CB6818(v27);

  _Unwind_Resume(a1);
}

void sub_233CB6038(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  _QWORD v7[4];
  id v8;
  __int128 v9;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CB60DC;
  v7[3] = &unk_2504EFDB0;
  v9 = *(_OWORD *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v4, v6, (uint64_t)v7, &unk_2504EFDD0);

}

void sub_233CB60C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB60DC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  __int16 v4;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 817);
  result = sub_233CB616C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, (uint64_t)"NotifyUpdateApplied", *(void **)(a1 + 32));
  if (result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48;
    v4 = 0;
    (*(void (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)result + 24))(result, v3, &v4, 0);
    return sub_234214EA0(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  }
  return result;
}

uint64_t sub_233CB616C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _BYTE buf[24];
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v10 = sub_234214E70(a1);
  if (!v10)
  {
    sub_234117B80(9u, "Controller");
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "%s: no CommandHandler to send response", buf, 0xCu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    goto LABEL_12;
  }
  if (v7)
  {
    objc_msgSend_description(v7, v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = 0uLL;
    v24 = 0;
    sub_234002650(v7, (uint64_t)&v23);
    sub_234117B80(9u, "Controller");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = objc_retainAutorelease(v11);
      v16 = objc_msgSend_UTF8String(v13, v14, v15);
      v25 = v23;
      v26 = v24;
      v17 = sub_2341083CC((const char **)&v25, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2080;
      v28 = v17;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "%s: application returned error: '%s', sending error: '%s'", buf, 0x20u);
    }

    if (sub_234114844(1u))
    {
      v18 = objc_retainAutorelease(v11);
      objc_msgSend_UTF8String(v18, v19, v20);
      *(_OWORD *)buf = v23;
      *(_QWORD *)&buf[16] = v24;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *(_OWORD *)buf = v23;
    *(_QWORD *)&buf[16] = v24;
    LOWORD(v25) = 0;
    sub_23411E638(&v25, (int *)buf);
    buf[0] = v25;
    buf[1] = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v10 + 24))(v10, a2, buf, 0);
    sub_234214EA0(a1);

LABEL_12:
    v10 = 0;
  }

  return v10;
}

void sub_233CB63F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB6440(uint64_t a1, void *a2)
{
  const char *v3;
  void *v4;
  const char *v5;
  const char *v6;
  void *v7;
  const char *v8;
  id v9;

  v9 = a2;
  objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v3, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setUpdateToken_(v9, v5, (uint64_t)v4);

  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x24BDD16E0], v6, *(unsigned int *)(a1 + 16));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setSoftwareVersion_(v9, v8, (uint64_t)v7);

}

void sub_233CB64C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_233CB64E4(_QWORD *a1)
{
  char v2;
  void *v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v2 = objc_opt_respondsToSelector();
  v3 = (void *)a1[4];
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v4, a1[8]);
  v5 = (const char *)objc_claimAutoreleasedReturnValue();
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = (char *)v5;
  if ((v2 & 1) != 0)
    objc_msgSend_handleNotifyUpdateAppliedForNodeID_controller_params_completion_(v3, v5, (uint64_t)v5, v6, v7, v8);
  else
    objc_msgSend_handleNotifyUpdateAppliedForNodeID_controller_params_completionHandler_(v3, v5, (uint64_t)v5, v6, v7, v8);

}

void sub_233CB6570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

_BYTE *sub_233CB6588(_BYTE *a1)
{
  if (!*a1)
    sub_234255460();
  return a1 + 8;
}

_BYTE *sub_233CB65A8(_BYTE *a1)
{
  if (!*a1)
    sub_234255460();
  return a1 + 1;
}

void sub_233CB65C8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  sub_2340017F0((uint64_t)MTRError, &v6);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_handleBDXTransferSessionEndForNodeID_controller_error_(v1, v5, v2, v3, v4);

}

void sub_233CB663C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB664C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  const char *v4;
  int v5;

  if (a2)
  {
    v3 = 50;
    v4 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm";
    v5 = 183;
    return sub_233CB35B0(a2, &v3);
  }
  return result;
}

_QWORD *sub_233CB6690(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_234214E34((uint64_t)a1, *(_QWORD *)(a2 + 16));
  sub_234214EA0(a2);
  return a1;
}

void sub_233CB66CC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_233CB66E0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_233CB66E0(_QWORD *result)
{
  NSObject *v1;
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (*result && result[1])
  {
    sub_234117B80(0x1Bu, "Support");
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/lib/support/IntrusiveList.h";
      v4 = 1024;
      v5 = 88;
      v6 = 2080;
      v7 = "!IsInList()";
      _os_log_impl(&dword_233BF3000, v1, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  return result;
}

void sub_233CB680C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

_QWORD *sub_233CB6818(_QWORD *a1)
{
  sub_234214EA0((uint64_t)a1);
  return sub_233CB66E0(a1);
}

void sub_233CB6840(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  NSObject *v21;
  char *v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  int v27;
  __int128 v28;
  int v29;
  _BYTE v30[24];
  __int128 v31;
  int v32;
  uint8_t buf[4];
  char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 439);
  if (*(_BYTE *)(a1 + 277))
  {
    if (*sub_233CB65A8((_BYTE *)(a1 + 279)) != a2
      || *(_QWORD *)sub_233CB6588((_BYTE *)(a1 + 288)) != a3)
    {
      *(_DWORD *)a4 = 219;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTROTAProviderDelegateBridge.mm";
      *(_DWORD *)(a4 + 16) = 443;
      return;
    }
    LODWORD(v31) = 116;
    *((_QWORD *)&v31 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTROTAProviderDelegateBridge.mm";
    v32 = 446;
    sub_233CB35B0(a1, &v31);
  }
  objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v8, v9);
  v10 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  sub_233C0A780(v10, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    objc_msgSend_otaProviderDelegate(v11, v12, v13);
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v14;

    objc_msgSend_otaProviderDelegateQueue(v11, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v18;

    if (*(_QWORD *)(a1 + 304))
    {
      if (*(_QWORD *)(a1 + 312))
      {
        memset(v30, 0, sizeof(v30));
        (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 264) + 40))(v30, *(_QWORD *)(a1 + 264), 600000, sub_233CB664C, a1);
        v20 = *(_DWORD *)v30;
        v39 = *(_OWORD *)&v30[4];
        v40 = *(_DWORD *)&v30[20];
        if (*(_DWORD *)v30)
        {
          sub_234117B80(0, "NotSpecified");
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v27 = v20;
            v28 = v39;
            v29 = v40;
            v22 = sub_2341083CC((const char **)&v27, 1);
            *(_DWORD *)buf = 136315650;
            v34 = v22;
            v35 = 2080;
            v36 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAPr"
                  "oviderDelegateBridge.mm";
            v37 = 1024;
            v38 = 461;
            _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
          }

          if (sub_234114844(1u))
          {
            v24 = v20;
            v25 = v39;
            v26 = v40;
            sub_2341083CC((const char **)&v24, 1);
            sub_2341147D0(0, 1);
          }
        }
        *(_OWORD *)a4 = *(_OWORD *)v30;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)&v30[16];
        if (*(_DWORD *)a4)
          goto LABEL_20;
        *(_BYTE *)(a1 + 279) = 1;
        *(_BYTE *)(a1 + 280) = a2;
        *(_BYTE *)(a1 + 288) = 1;
        *(_QWORD *)(a1 + 296) = a3;
        *(_BYTE *)(a1 + 277) = 1;
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTROTAProviderDelegateBridge.mm";
        v23 = 470;
      }
      else
      {
        *(_DWORD *)a4 = 3;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTROTAProviderDelegateBridge.mm";
        v23 = 457;
      }
    }
    else
    {
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTROTAProviderDelegateBridge.mm";
      v23 = 456;
    }
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v23 = 450;
  }
  *(_DWORD *)(a4 + 16) = v23;
LABEL_20:

}

void sub_233CB6B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB6B8C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 336))
  {
    *(_BYTE *)(a1 + 336) = 1;
    *(_QWORD *)a1 = &unk_250517350;
    *(_QWORD *)(a1 + 8) = &unk_2505173A0;
    sub_23421B6CC(a1 + 16);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 272) = 500;
    *(_QWORD *)a1 = &off_2504EFE78;
    *(_QWORD *)(a1 + 8) = &unk_2504EFEC8;
    *(_BYTE *)(a1 + 288) = 0;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
  }
  return a1;
}

uint64_t sub_233CB6C00(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504EFE78;
  *(_QWORD *)(a1 + 8) = &unk_2504EFEC8;

  *(_QWORD *)a1 = &unk_250517350;
  *(_QWORD *)(a1 + 8) = &unk_2505173A0;
  sub_233CAF128((uint64_t *)(a1 + 56));
  return a1;
}

void sub_233CB6C5C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504EFE78;
  *(_QWORD *)(a1 + 8) = &unk_2504EFEC8;

  *(_QWORD *)a1 = &unk_250517350;
  *(_QWORD *)(a1 + 8) = &unk_2505173A0;
  sub_233CAF128((uint64_t *)(a1 + 56));
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB6CD0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/protocols/bdx/TransferFacilitator.h";
  *(_DWORD *)(a3 + 16) = 57;
  return result;
}

double sub_233CB6CF0(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  double result;
  NSObject *v6;
  char *v7;
  __int16 v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  int v25;
  uint8_t buf[4];
  _BYTE v27[20];
  int v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 304))
  {
    switch(*a2)
    {
      case 0u:
      case 7u:
        return result;
      case 1u:
        sub_233CB798C(a1, (uint64_t)a2, (uint64_t)buf);
        goto LABEL_6;
      case 2u:
        sub_233CB7254(a1, (uint64_t)buf);
        result = *(double *)v27;
        v31 = *(_OWORD *)v27;
        v4 = *(_DWORD *)buf;
        v32 = *(_DWORD *)&v27[16];
        if (!*(_DWORD *)buf)
          return result;
        v29 = 0uLL;
        v30 = 0;
        v23 = *(_DWORD *)buf;
        v24 = v31;
        v25 = v32;
        v8 = sub_23421DEF8(&v23);
        sub_23421C7F8(a1 + 16, v8, (uint64_t)&v29);
        if ((_DWORD)v29)
        {
          sub_234117B80(0, "NotSpecified");
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v21 = v29;
            v22 = v30;
            v10 = sub_2341083CC((const char **)&v21, 1);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)v27 = v10;
            *(_WORD *)&v27[8] = 2080;
            *(_QWORD *)&v27[10] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framewo"
                                  "rk/CHIP/MTROTAProviderDelegateBridge.mm";
            *(_WORD *)&v27[18] = 1024;
            v28 = 405;
            _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
          }

          if (sub_234114844(1u))
          {
            v19 = v29;
            v20 = v30;
            sub_2341083CC((const char **)&v19, 1);
            sub_2341147D0(0, 1);
          }
        }
        v29 = v31;
        LODWORD(v30) = v32;
        goto LABEL_7;
      case 5u:
      case 6u:
        sub_233CB7654(a1, (uint64_t)a2, (uint64_t)buf);
        goto LABEL_6;
      case 8u:
      case 0xAu:
      case 0xBu:
        goto LABEL_3;
      case 9u:
        sub_234117B80(0xCu, "BDX");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v12 = a2[8];
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v27 = v12;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Got StatusReport %x", buf, 8u);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0xCu, 1);
LABEL_3:
        sub_233CB758C(a1, a2, (uint64_t)buf);
LABEL_6:
        v31 = *(_OWORD *)v27;
        v4 = *(_DWORD *)buf;
        v32 = *(_DWORD *)&v27[16];
        result = *(double *)v27;
        v29 = *(_OWORD *)v27;
        LODWORD(v30) = *(_DWORD *)&v27[16];
        if (*(_DWORD *)buf)
        {
LABEL_7:
          sub_234117B80(0, "NotSpecified");
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          {
            v16 = v4;
            v17 = v29;
            v18 = v30;
            v7 = sub_2341083CC((const char **)&v16, 1);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)v27 = v7;
            *(_WORD *)&v27[8] = 2080;
            *(_QWORD *)&v27[10] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framewo"
                                  "rk/CHIP/MTROTAProviderDelegateBridge.mm";
            *(_WORD *)&v27[18] = 1024;
            v28 = 434;
            _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
          }

          if (sub_234114844(1u))
          {
            v13 = v4;
            v14 = v29;
            v15 = v30;
            sub_2341083CC((const char **)&v13, 1);
            sub_2341147D0(0, 1);
          }
        }
        break;
      default:
        sub_233CB7AC0();
    }
  }
  return result;
}

void sub_233CB70CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_233CB70F0(uint64_t a1)
{
  *(_QWORD *)(a1 - 8) = &off_2504EFE78;
  *(_QWORD *)a1 = &unk_2504EFEC8;

  *(_QWORD *)(a1 - 8) = &unk_250517350;
  *(_QWORD *)a1 = &unk_2505173A0;
  return sub_233CAF128((uint64_t *)(a1 + 48));
}

void sub_233CB7148(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 - 8) = &off_2504EFE78;
  v2 = (_QWORD *)(a1 - 8);
  *(_QWORD *)a1 = &unk_2504EFEC8;

  *v2 = &unk_250517350;
  *(_QWORD *)a1 = &unk_2505173A0;
  sub_233CAF128((uint64_t *)(a1 + 48));
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB71C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a4);
}

uint64_t sub_233CB71D0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result - 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/protocols/bdx/TransferFacilitator.h";
  *(_DWORD *)(a3 + 16) = 57;
  return result;
}

uint64_t *sub_233CB71F8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256152EE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256152EE8))
  {
    qword_256152EE0 = (uint64_t)&unk_250513878;
    __cxa_guard_release(&qword_256152EE8);
  }
  return &qword_256152EE0;
}

void sub_233CB7254(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  const char *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  const char *v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  int v30;
  void *v31;
  _QWORD block[4];
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _QWORD v39[4];
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 221);
  v4 = *(_QWORD *)(a1 + 264);
  if (v4)
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v4 + 72))(v4, sub_233CB664C, a1);
  if (!*(_BYTE *)(a1 + 279))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v30 = 227;
LABEL_12:
    *(_DWORD *)(a2 + 16) = v30;
    return;
  }
  if (!*(_BYTE *)(a1 + 288))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v30 = 228;
    goto LABEL_12;
  }
  v5 = *(unsigned __int16 *)(a1 + 104);
  if (v5 >= 0x100)
  {
    *(_DWORD *)a2 = 47;
    *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v30 = 231;
    goto LABEL_12;
  }
  sub_233CAF22C(v43, *(_QWORD *)(a1 + 96), v5);
  v6 = v43[0];
  v7 = v43[1];
  v8 = objc_alloc(MEMORY[0x24BDD17C8]);
  v11 = (void *)objc_msgSend_initWithBytes_length_encoding_(v8, v9, v6, v7, 4);
  if (v11)
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v10, *(_QWORD *)(a1 + 32));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v13, v14);
    v15 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
    v16 = sub_233CB65A8((_BYTE *)(a1 + 279));
    sub_233C0A780(v15, *v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      v31 = v12;
      v18 = *(_QWORD *)(a1 + 328);
      v39[0] = MEMORY[0x24BDAC760];
      v39[1] = 3221225472;
      v39[2] = sub_233CB7B44;
      v39[3] = &unk_2504EFF70;
      v41 = a1;
      v19 = v17;
      v40 = v19;
      v42 = v18;
      v20 = (void *)MEMORY[0x23493EEA8](v39);
      *(_BYTE *)(a1 + 278) = 1;
      v21 = (void *)MEMORY[0x24BDD16E0];
      v22 = (uint64_t *)sub_233CB6588((_BYTE *)(a1 + 288));
      objc_msgSend_numberWithUnsignedLongLong_(v21, v23, *v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = *(id *)(a1 + 304);
      v26 = *(NSObject **)(a1 + 312);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_233CB7FFC;
      block[3] = &unk_2504EFF98;
      v33 = v25;
      v34 = v24;
      v35 = v19;
      v36 = v11;
      v12 = v31;
      v37 = v31;
      v38 = v20;
      v27 = v20;
      v28 = v24;
      v29 = v25;
      dispatch_async(v26, block);
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTROTAProviderDelegateBridge.mm";
      *(_DWORD *)(a2 + 16) = 298;

    }
    else
    {
      *(_DWORD *)a2 = 3;
      *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTROTAProviderDelegateBridge.mm";
      *(_DWORD *)(a2 + 16) = 242;
    }

  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    *(_DWORD *)(a2 + 16) = 236;
  }

}

void sub_233CB7540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB758C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  int v16;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 303);
  if (!*(_BYTE *)(a1 + 279))
  {
    v13 = 305;
LABEL_18:
    v12 = 3;
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 288))
  {
    v13 = 306;
    goto LABEL_18;
  }
  v6 = *a2;
  if (v6 == 11)
    v7 = 50;
  else
    v7 = 172;
  if (v6 == 11)
    v8 = 310;
  else
    v8 = 312;
  v9 = v6 == 8;
  if (v6 == 8)
    v10 = 0;
  else
    v10 = v7;
  *(_QWORD *)&v14 = v10;
  *((_QWORD *)&v14 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
  if (v9)
    v11 = 308;
  else
    v11 = v8;
  v15 = v11;
  v16 = 0;
  sub_233CB35B0(a1, &v14);
  v12 = 0;
  v13 = 316;
LABEL_19:
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "ROTAProviderDelegateBridge.mm";
  *(_DWORD *)(a3 + 16) = v13;
}

void sub_233CB7654(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  const char *v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD block[4];
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD v41[4];
  id v42;
  uint64_t v43;
  uint64_t v44;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 321);
  if (!*(_BYTE *)(a1 + 279))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v13 = 323;
LABEL_7:
    *(_DWORD *)(a3 + 16) = v13;
    return;
  }
  if (!*(_BYTE *)(a1 + 288))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v13 = 324;
    goto LABEL_7;
  }
  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x24BDD16E0], v6, *(unsigned __int16 *)(a1 + 48));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x24BDD16E0], v8, *(unsigned int *)(a1 + 220));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_WORD *)a2 == 6)
  {
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v9, *(_QWORD *)(a2 + 16));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v12 = &unk_250591A88;
  }
  objc_msgSend_sharedInstance(MTRDeviceControllerFactory, v9, v10);
  v14 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
  v15 = sub_233CB65A8((_BYTE *)(a1 + 279));
  sub_233C0A780(v14, *v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    v30 = v12;
    v31 = v11;
    v32 = v7;
    v17 = MEMORY[0x24BDAC760];
    v18 = *(_QWORD *)(a1 + 328);
    v41[0] = MEMORY[0x24BDAC760];
    v41[1] = 3221225472;
    v41[2] = sub_233CB8048;
    v41[3] = &unk_2504F0008;
    v43 = a1;
    v19 = v16;
    v42 = v19;
    v44 = v18;
    v20 = (void *)MEMORY[0x23493EEA8](v41);
    v21 = (void *)MEMORY[0x24BDD16E0];
    v22 = (uint64_t *)sub_233CB6588((_BYTE *)(a1 + 288));
    objc_msgSend_numberWithUnsignedLongLong_(v21, v23, *v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = *(id *)(a1 + 304);
    v26 = *(NSObject **)(a1 + 312);
    block[0] = v17;
    block[1] = 3221225472;
    block[2] = sub_233CB8504;
    block[3] = &unk_2504F0030;
    v34 = v25;
    v35 = v24;
    v36 = v19;
    v7 = v32;
    v37 = v32;
    v38 = v31;
    v12 = v30;
    v39 = v30;
    v40 = v20;
    v29 = v20;
    v27 = v24;
    v28 = v25;
    dispatch_async(v26, block);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    *(_DWORD *)(a3 + 16) = 393;

    v11 = v31;
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    *(_DWORD *)(a3 + 16) = 335;
  }

}

void sub_233CB7910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB798C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  __int128 *v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 188);
  v6 = *(_QWORD *)(a1 + 256);
  if (!v6)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v9 = 190;
LABEL_11:
    *(_DWORD *)(a3 + 16) = v9;
    return;
  }
  if (!*(_QWORD *)(a1 + 304))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTROTAProviderDelegateBridge.mm";
    v9 = 191;
    goto LABEL_11;
  }
  v15 = 0;
  v7 = *(unsigned __int8 *)(a2 + 20);
  if (*(_WORD *)(a2 + 16) || *(_WORD *)(a2 + 18) || v7 != 64)
    v15 = 1;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341AD108(v6, *(_DWORD *)(a2 + 16), v7, (uint64_t *)(a2 + 8), &v15, a3);
  if (*(_DWORD *)a3)
  {
    sub_2341AD5A4(*(_QWORD *)(a1 + 256));
    *(_QWORD *)(a1 + 256) = 0;
    v13 = *(_OWORD *)a3;
    v14 = *(_QWORD *)(a3 + 16);
    v8 = &v13;
LABEL_16:
    sub_233CB35B0(a1, v8);
    return;
  }
  if (!*(_WORD *)(a2 + 16) && !*(_WORD *)(a2 + 18) && *(_BYTE *)(a2 + 20) == 64)
  {
    *(_QWORD *)(a1 + 256) = 0;
    v10 = 172;
    v11 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm";
    v12 = 214;
    v8 = (__int128 *)&v10;
    goto LABEL_16;
  }
}

void sub_233CB7AC0()
{
  NSObject *v0;
  uint8_t v1[16];

  sub_234117B80(0, "NotSpecified");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_ERROR, "chipDie chipDie chipDie", v1, 2u);
  }

  if (sub_234114844(1u))
    sub_2341147D0(0, 1);
  sub_233CB8554();
}

void sub_233CB7B44(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2;
  v5 = (void *)a1[4];
  v4 = a1[5];
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_233CB7BE8;
  v9[3] = &unk_2504EFF28;
  v6 = a1[6];
  v11 = v4;
  v12 = v6;
  v10 = v3;
  v7 = v3;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v5, v8, (uint64_t)v9, &unk_2504EFF48);

}

void sub_233CB7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_233CB7BE8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  NSObject *v5;
  char *v6;
  __int16 v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  uint8_t v28[24];
  int v29;
  uint8_t buf[4];
  _BYTE v31[20];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v2 = a1[5];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 249);
  if (*(_BYTE *)(v2 + 277) && *(_QWORD *)(v2 + 328) == a1[6])
  {
    v3 = (void *)a1[4];
    if (v3)
    {
      memset(v28, 0, sizeof(v28));
      sub_234002650(v3, (uint64_t)v28);
      v34 = *(_OWORD *)&v28[4];
      v4 = *(_DWORD *)v28;
      LODWORD(v35) = *(_DWORD *)&v28[20];
      if (*(_DWORD *)v28)
      {
        sub_234117B80(0, "NotSpecified");
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v26 = v34;
          v25 = v4;
          v27 = v35;
          v6 = sub_2341083CC((const char **)&v25, 1);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v31 = v6;
          *(_WORD *)&v31[8] = 2080;
          *(_QWORD *)&v31[10] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTROTAProviderDelegateBridge.mm";
          *(_WORD *)&v31[18] = 1024;
          LODWORD(v32) = 258;
          _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }

        if (sub_234114844(1u))
        {
          v23 = v34;
          v22 = v4;
          v24 = v35;
          sub_2341083CC((const char **)&v22, 1);
          sub_2341147D0(0, 1);
        }
      }
      v34 = 0uLL;
      v35 = 0;
      v20 = *(_OWORD *)v28;
      v21 = *(_QWORD *)&v28[16];
      v7 = sub_23421DEF8((int *)&v20);
      sub_23421C7F8(v2 + 16, v7, (uint64_t)&v34);
      if ((_DWORD)v34)
      {
        sub_234117B80(0, "NotSpecified");
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v18 = v34;
          v19 = v35;
          v9 = sub_2341083CC((const char **)&v18, 1);
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)v31 = v9;
          *(_WORD *)&v31[8] = 2080;
          *(_QWORD *)&v31[10] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTROTAProviderDelegateBridge.mm";
          *(_WORD *)&v31[18] = 1024;
          LODWORD(v32) = 259;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }

        if (sub_234114844(1u))
        {
          v16 = v34;
          v17 = v35;
          sub_2341083CC((const char **)&v16, 1);
          sub_2341147D0(0, 1);
        }
      }
    }
    else
    {
      v32 = 0;
      v33 = 0;
      buf[0] = 32;
      *(_WORD *)&buf[2] = *(_WORD *)(v2 + 48);
      *(_OWORD *)&v31[4] = *(_OWORD *)(v2 + 32);
      v34 = 0uLL;
      v35 = 0;
      sub_23421BDA8(v2 + 16, (char *)buf, (uint64_t)&v34);
      if ((_DWORD)v34)
      {
        sub_234117B80(0, "NotSpecified");
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v14 = v34;
          v15 = v35;
          v11 = sub_2341083CC((const char **)&v14, 1);
          *(_DWORD *)v28 = 136315650;
          *(_QWORD *)&v28[4] = v11;
          *(_WORD *)&v28[12] = 2080;
          *(_QWORD *)&v28[14] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTROTAProviderDelegateBridge.mm";
          *(_WORD *)&v28[22] = 1024;
          v29 = 272;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "%s at %s:%d", v28, 0x1Cu);
        }

        if (sub_234114844(1u))
        {
          v12 = v34;
          v13 = v35;
          sub_2341083CC((const char **)&v12, 1);
          sub_2341147D0(0, 1);
        }
      }
    }
  }
}

void sub_233CB7FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB7FFC(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_opt_respondsToSelector();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if ((v2 & 1) != 0)
    return MEMORY[0x24BEDD108](v3, sel_handleBDXTransferSessionBeginForNodeID_controller_fileDesignator_offset_completion_, v4);
  else
    return MEMORY[0x24BEDD108](v3, sel_handleBDXTransferSessionBeginForNodeID_controller_fileDesignator_offset_completionHandler_, v4);
}

void sub_233CB8048(_QWORD *a1, void *a2, char a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v5 = a2;
  v7 = (void *)a1[4];
  v6 = a1[5];
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_233CB80FC;
  v11[3] = &unk_2504EFFC0;
  v8 = a1[6];
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v15 = a3;
  v9 = v5;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v7, v10, (uint64_t)v11, &unk_2504EFFE0);

}

void sub_233CB80E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_233CB80FC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  __int128 v25;
  int v26;
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint8_t buf[4];
  char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProviderDelegateBridge.mm", 342);
  if (*(_BYTE *)(v2 + 277) && *(_QWORD *)(v2 + 328) == *(_QWORD *)(a1 + 48))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      HIDWORD(v33) = 0;
      v4 = objc_retainAutorelease(v3);
      *(_QWORD *)&v32 = objc_msgSend_bytes(v4, v5, v6);
      *((_QWORD *)&v32 + 1) = objc_msgSend_length(*(void **)(a1 + 32), v7, v8);
      LOBYTE(v33) = *(_BYTE *)(a1 + 56);
      memset(v27, 0, sizeof(v27));
      v9 = v2 + 16;
      sub_23421C404(v2 + 16, (uint64_t *)&v32, (uint64_t)v27);
      v10 = *(_DWORD *)v27;
      if (*(_DWORD *)v27)
      {
        v34 = *(_OWORD *)&v27[4];
        LODWORD(v35) = *(_DWORD *)&v27[20];
        sub_234117B80(0, "NotSpecified");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v24 = v10;
          v25 = v34;
          v26 = v35;
          v12 = sub_2341083CC((const char **)&v24, 1);
          *(_DWORD *)buf = 136315650;
          v37 = v12;
          v38 = 2080;
          v39 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProv"
                "iderDelegateBridge.mm";
          v40 = 1024;
          v41 = 361;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }

        if (sub_234114844(1u))
        {
          v21 = v10;
          v22 = v34;
          v23 = v35;
          sub_2341083CC((const char **)&v21, 1);
          sub_2341147D0(0, 1);
        }
        v34 = 0uLL;
        v35 = 0;
        sub_23421C7F8(v9, 95, (uint64_t)&v34);
        if ((_DWORD)v34)
        {
          sub_234117B80(0, "NotSpecified");
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v19 = v34;
            v20 = v35;
            v14 = sub_2341083CC((const char **)&v19, 1);
            *(_DWORD *)buf = 136315650;
            v37 = v14;
            v38 = 2080;
            v39 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAPr"
                  "oviderDelegateBridge.mm";
            v40 = 1024;
            v41 = 362;
            _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
          }

          if (sub_234114844(1u))
          {
            v17 = v34;
            v18 = v35;
            sub_2341083CC((const char **)&v17, 1);
            sub_2341147D0(0, 1);
          }
        }
      }
    }
    else
    {
      v32 = 0uLL;
      v33 = 0;
      sub_23421C7F8(v2 + 16, 95, (uint64_t)&v32);
      if ((_DWORD)v32)
      {
        sub_234117B80(0, "NotSpecified");
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v30 = v32;
          v31 = v33;
          v16 = sub_2341083CC((const char **)&v30, 1);
          *(_DWORD *)buf = 136315650;
          v37 = v16;
          v38 = 2080;
          v39 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTROTAProv"
                "iderDelegateBridge.mm";
          v40 = 1024;
          v41 = 350;
          _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }

        if (sub_234114844(1u))
        {
          v28 = v32;
          v29 = v33;
          sub_2341083CC((const char **)&v28, 1);
          sub_2341147D0(0, 1);
        }
      }
    }
  }
}

void sub_233CB84D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB8504(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_opt_respondsToSelector();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if ((v2 & 1) != 0)
    return MEMORY[0x24BEDD108](v3, sel_handleBDXQueryForNodeID_controller_blockSize_blockIndex_bytesToSkip_completion_, v4);
  else
    return MEMORY[0x24BEDD108](v3, sel_handleBDXQueryForNodeID_controller_blockSize_blockIndex_bytesToSkip_completionHandler_, v4);
}

void sub_233CB8554()
{
  abort();
}

void sub_233CB8564()
{
  JUMPOUT(0x23493E704);
}

double sub_233CB8578@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D013A8(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

void sub_233CB8584()
{
  JUMPOUT(0x23493E704);
}

double sub_233CB8598@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D019D4(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_233CB85C8()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = sub_234117B80(0x1Du, "Zcl");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_DEFAULT, "Using ZAP configuration...", v2, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x1Du, 2);
  sub_233D541E8();
  return sub_233FF8820();
}

void sub_233CB869C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB8848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CB8994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB8B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB8D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233CB8F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB9044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CB9370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *sub_233CB93E8(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  *a1 = &off_2504F00F0;
  a1[1] = v3;
  return a1;
}

void sub_233CB9418(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  id v20;
  uint64_t v21;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResumptionStorageBridge.mm", 37);
  sub_233C0A780(*(unsigned __int8 **)(a1 + 8), *(unsigned __int8 *)(a2 + 8));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v20 = v12;
    objc_msgSend_controllerDataStore(v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v16, *(_QWORD *)a2);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_findResumptionInfoByNodeID_(v15, v18, (uint64_t)v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      sub_233CB9564(v19, &v21, a3, a4, a5, (_QWORD *)a6);
    }
    else
    {
      *(_DWORD *)a6 = 16;
      *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRSessionResumptionStorageBridge.mm";
      *(_DWORD *)(a6 + 16) = 46;
    }

    v12 = v20;
  }
  else
  {
    *(_DWORD *)a6 = 16;
    *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRSessionResumptionStorageBridge.mm";
    *(_DWORD *)(a6 + 16) = 41;
  }

}

void sub_233CB952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_233CB9564(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  id v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  id v53;
  const char *v54;
  uint64_t v55;
  const void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  size_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  id v71;
  const char *v72;
  uint64_t v73;
  const void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  size_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  int v84;
  uint8_t buf[4];
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  objc_msgSend_resumptionID(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend_length(v14, v15, v16);

  if (v17 != 16)
  {
    sub_234117B80(0, "NotSpecified");
    v38 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_resumptionID(v11, v39, v40);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218240;
      v86 = objc_msgSend_length(v41, v42, v43);
      v87 = 2048;
      v88 = 16;
      _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_ERROR, "Unable to return resumption ID: Stored size %llu does not match required size %llu", buf, 0x16u);

    }
    if (!sub_234114844(1u))
    {
      v37 = 131;
      goto LABEL_18;
    }
    objc_msgSend_resumptionID(v11, v44, v45);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_length(v34, v46, v47);
    sub_2341147D0(0, 1);
    v37 = 131;
LABEL_11:

LABEL_18:
    v84 = 159;
    goto LABEL_19;
  }
  objc_msgSend_sharedSecret(v11, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_length(v20, v21, v22);

  if (v23 >= 0x21)
  {
    sub_234117B80(0, "NotSpecified");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend_sharedSecret(v11, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218240;
      v86 = objc_msgSend_length(v29, v30, v31);
      v87 = 2048;
      v88 = 32;
      _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "Unable to return resumption shared secret: Stored size %llu is larger than allowed size %llu", buf, 0x16u);

    }
    if (!sub_234114844(1u))
    {
      v37 = 138;
      goto LABEL_18;
    }
    objc_msgSend_sharedSecret(v11, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_length(v34, v35, v36);
    sub_2341147D0(0, 1);
    v37 = 138;
    goto LABEL_11;
  }
  objc_msgSend_nodeID(v11, v24, v25);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *a2 = objc_msgSend_unsignedLongLongValue(v48, v49, v50);

  objc_msgSend_resumptionID(v11, v51, v52);
  v53 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v56 = (const void *)objc_msgSend_bytes(v53, v54, v55);
  objc_msgSend_resumptionID(v11, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend_length(v59, v60, v61);
  memcpy(a3, v56, v62);

  objc_msgSend_sharedSecret(v11, v63, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  v68 = objc_msgSend_length(v65, v66, v67);
  if (v68 <= 0x20)
    a4[4] = v68;

  objc_msgSend_sharedSecret(v11, v69, v70);
  v71 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v74 = (const void *)objc_msgSend_bytes(v71, v72, v73);
  objc_msgSend_sharedSecret(v11, v75, v76);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = objc_msgSend_length(v77, v78, v79);
  memcpy(a4, v74, v80);

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  objc_msgSend_caseAuthenticatedTags(v11, v81, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  sub_234006254(v83, a5, (uint64_t)a6);

  v84 = *(_DWORD *)a6;
  if (!*(_DWORD *)a6)
  {
    v37 = 147;
LABEL_19:
    *(_DWORD *)a6 = v84;
    a6[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResu"
            "mptionStorageBridge.mm";
    *((_DWORD *)a6 + 4) = v37;
  }

}

void sub_233CB98EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CB9998(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  const char *v10;
  void *v11;
  id v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  char v20;
  void *v21;
  const char *v22;
  void *v23;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[16];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResumptionStorageBridge.mm", 56);
  objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v10, a2, 16);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_233C087E8(*(os_unfair_lock_s **)(a1 + 8));
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = (id)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v27, v32, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v28;
    while (2)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(v12);
        v19 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        v20 = objc_msgSend_fabricIndex(v19, v14, v15);
        if ((v20 - 1) < 0xFEu)
        {
          objc_msgSend_controllerDataStore(v19, v14, v15);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_findResumptionInfoByResumptionID_(v21, v22, (uint64_t)v11);
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          if (v23)
          {
            v26 = 0;
            *a6 = 0;
            a6[1] = 0;
            a6[2] = 0;
            sub_233CB9564(v23, &v26, v31, a4, a5, a6);
            if (!*(_DWORD *)a6)
            {
              *(_QWORD *)a3 = v26;
              *(_BYTE *)(a3 + 8) = v20;
              *(_DWORD *)a6 = 0;
              a6[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRS"
                      "essionResumptionStorageBridge.mm";
              *((_DWORD *)a6 + 4) = 75;
            }

            goto LABEL_14;
          }
        }
      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v14, (uint64_t)&v27, v32, 16);
      if (v16)
        continue;
      break;
    }
  }

  *(_DWORD *)a6 = 16;
  a6[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResump"
          "tionStorageBridge.mm";
  *((_DWORD *)a6 + 4) = 80;
LABEL_14:

}

void sub_233CB9BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CB9BF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  MTRCASESessionResumptionInfo *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29[2];

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResumptionStorageBridge.mm", 86);
  sub_233C0A780(*(unsigned __int8 **)(a1 + 8), *(unsigned __int8 *)(a2 + 8));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    v13 = objc_alloc_init(MTRCASESessionResumptionInfo);
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v14, *(_QWORD *)a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setNodeID_(v13, v16, (uint64_t)v15);

    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v17, a3, 16);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setResumptionID_(v13, v19, (uint64_t)v18);

    sub_233BF7114(v29, a4, *(_QWORD *)(a4 + 32));
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v20, v29[0], v29[1]);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setSharedSecret_(v13, v22, (uint64_t)v21);

    sub_2340065F8(a5);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setCaseAuthenticatedTags_(v13, v24, (uint64_t)v23);

    objc_msgSend_controllerDataStore(v12, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_storeResumptionInfo_(v27, v28, (uint64_t)v13);

    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRSessionResumptionStorageBridge.mm";
    *(_DWORD *)(a6 + 16) = 100;

  }
  else
  {
    *(_DWORD *)a6 = 159;
    *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRSessionResumptionStorageBridge.mm";
    *(_DWORD *)(a6 + 16) = 90;
  }

}

void sub_233CB9D70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB9DC0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  NSObject *v7;
  uint8_t v8[16];

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRSessionResumptionStorageBridge.mm", 105);
  sub_233C0A580(*(unsigned __int8 **)(a1 + 8), a2, 0, 0);
  result = objc_claimAutoreleasedReturnValue();
  if (result)
  {
    sub_234117B80(9u, "Controller");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "ResumptionStorage::DeleteAll called for running controller", v8, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    abort();
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MT"
                        "RSessionResumptionStorageBridge.mm";
  *(_DWORD *)(a3 + 16) = 120;
  return result;
}

void sub_233CB9EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CB9EC4(uint64_t a1)
{

  return a1;
}

void sub_233CB9EEC(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

uint64_t sub_233CB9F24(unsigned __int16 *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v7;
  int v8;
  int *v9;
  int v10;
  _QWORD v12[3];
  uint64_t v13;

  v2 = (uint64_t *)sub_233D54BA8(*a1);
  if (v2)
  {
    v3 = sub_233D54C38(v2, *((_DWORD *)a1 + 1), 64, 0);
    if (v3)
    {
      v4 = v3;
      v5 = sub_23421519C(*a1, *((_DWORD *)a1 + 1));
      if (!v5
        || (v13 = 0,
            HIDWORD(v13) = *((_DWORD *)a1 + 2),
            memset(v12, 0, sizeof(v12)),
            (*(void (**)(_QWORD *__return_ptr, uint64_t, unsigned __int16 *, uint64_t (*)(int, uint64_t), uint64_t *))(*(_QWORD *)v5 + 24))(v12, v5, a1, sub_233CBCB58, &v13), LODWORD(v12[0]) == 45))
      {
        v7 = *(int **)(v4 + 32);
        if (!v7)
          return -127;
        v8 = *v7;
        if (*v7 == -1)
        {
          return -127;
        }
        else
        {
          v9 = v7 + 1;
          while (v8 != *((_DWORD *)a1 + 2))
          {
            v10 = *v9++;
            v8 = v10;
            if (v10 == -1)
              return -127;
          }
          return 0;
        }
      }
      else if (LODWORD(v12[0]))
      {
        return 1;
      }
      else if ((_BYTE)v13)
      {
        return 0;
      }
      else
      {
        return -127;
      }
    }
    else
    {
      return -61;
    }
  }
  else
  {
    return 127;
  }
}

BOOL sub_233CBA028(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = 0;
  v2 = *((_DWORD *)a1 + 2);
  while (dword_2342AA0A0[v1] != v2)
  {
    if (++v1 == 3)
    {
      v3 = sub_233D549C0(*a1, *((_DWORD *)a1 + 1), v2);
      return v3 != 0;
    }
  }
  v3 = sub_233D54700(*a1, *((_DWORD *)a1 + 1));
  return v3 != 0;
}

double sub_233CBA08C@<D0>(_OWORD *a1@<X0>, char a2@<W1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X3>, unsigned __int16 *a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  const char *v23;
  unsigned int v24;
  uint64_t *v25;
  _BYTE *v26;
  int v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  unsigned int v41;
  int v42;
  NSObject *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  char *v51;
  char *v53[2];
  char *v54[2];
  _BYTE v55[12];
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unsigned int v60;
  uint8_t v61[16];
  uint64_t v62;
  _BYTE buf[40];
  unsigned __int16 v64;
  char v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  char v69;
  unsigned int v70;
  unsigned __int8 v71;
  char v72;
  int v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v12 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = HIWORD(*((_DWORD *)a3 + 1));
    v14 = (unsigned __int16)*((_DWORD *)a3 + 1);
    v15 = *a3;
    v16 = HIWORD(*((_DWORD *)a3 + 2));
    v17 = (unsigned __int16)*((_DWORD *)a3 + 2);
    v18 = *((unsigned __int8 *)a3 + 2);
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v15;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = v16;
    *(_WORD *)&buf[26] = 1024;
    *(_DWORD *)&buf[28] = v17;
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)&buf[34] = v18;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "Reading attribute: Cluster=0x%04X_%04X Endpoint=%x AttributeId=0x%04X_%04X (expanded=%d)", buf, 0x26u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  v59 = 0uLL;
  sub_233CBAB00(a3, (uint64_t *)&v59 + 1, (uint64_t *)&v59);
  v20 = *((_QWORD *)&v59 + 1);
  if (v59 == 0)
  {
    *(_DWORD *)a6 = sub_233CBAB7C(a3) | 0x500;
    *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    v22 = 289;
LABEL_7:
    *(_DWORD *)(a6 + 16) = v22;
    return *(double *)&v21;
  }
  v23 = (const char *)*((unsigned int *)a3 + 2);
  *(_DWORD *)v55 = *((_DWORD *)a3 + 1);
  *(_WORD *)&v55[4] = *a3;
  v24 = sub_234035670(*(unsigned int *)v55, v23, v19);
  memset(buf, 0, 24);
  v25 = sub_2341D512C();
  sub_2341D4A50(v25, (uint64_t)a1, (uint64_t)v55, v24, (uint64_t)buf);
  if (*(_DWORD *)buf)
  {
    if (*(_DWORD *)buf == 165)
    {
      if (*((_BYTE *)a3 + 2))
      {
        *(_DWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-com"
                              "patibility-functions.cpp";
        v22 = 304;
      }
      else
      {
        *(_DWORD *)a6 = 1406;
        *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-com"
                              "patibility-functions.cpp";
        v22 = 306;
      }
      goto LABEL_7;
    }
    *(_QWORD *)&v21 = *(_QWORD *)buf;
    *(_OWORD *)a6 = *(_OWORD *)buf;
    *(_QWORD *)(a6 + 16) = *(_QWORD *)&buf[16];
    return *(double *)&v21;
  }
  v55[8] = 1;
  *(_WORD *)&v55[10] = -1;
  v56 = -1;
  v57 = 0;
  v58 = v20;
  *(_QWORD *)v55 = &unk_250501D78;
  if (v20)
  {
    v26 = v55;
  }
  else
  {
    v26 = (_BYTE *)sub_23410337C(*a3, *((_DWORD *)a3 + 1));
    if (!v26)
      goto LABEL_32;
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  if (a5)
  {
    v27 = *a5;
    v28 = *((unsigned __int8 *)a5 + 2) << 16;
  }
  else
  {
    v28 = 0;
    v27 = 0xFFFF;
  }
  v60 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  sub_233CBABD0(a3, &v60, a6);
  if (*(_DWORD *)a6)
    return *(double *)&v21;
  v29 = a1[1];
  *(_OWORD *)&buf[8] = *a1;
  *(_OWORD *)&buf[24] = v29;
  *(_QWORD *)buf = a4;
  v64 = *a3;
  v66 = *(_QWORD *)(a3 + 2);
  v65 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = v60;
  v71 = 0;
  v72 = a2;
  v73 = -65536;
  v74 = v28 | v27;
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  (*(void (**)(uint8_t *__return_ptr, _BYTE *, unsigned __int16 *, _BYTE *))(*(_QWORD *)v26 + 16))(v61, v26, a3, buf);
  if (*(_DWORD *)v61)
  {
    if (*(_DWORD *)v61 == 1423 && *((_BYTE *)a3 + 2))
    {
      *(_DWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compa"
                            "tibility-functions.cpp";
      *(_DWORD *)(a6 + 16) = 194;
LABEL_31:
      *(_DWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compa"
                            "tibility-functions.cpp";
      v22 = 321;
      goto LABEL_7;
    }
    if (a5)
    {
      *a5 = v74;
      *((_BYTE *)a5 + 2) = BYTE2(v74);
    }
    *(_QWORD *)&v21 = *(_QWORD *)v61;
    *(_OWORD *)a6 = *(_OWORD *)v61;
    *(_QWORD *)(a6 + 16) = v62;
    if (*(_DWORD *)a6)
      return *(double *)&v21;
  }
  else
  {
    v30 = v71;
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a6 + 16) = 209;
    if (v30)
      goto LABEL_31;
  }
LABEL_32:
  v31 = sub_23411BD24(a4);
  v21 = *(_OWORD *)a4;
  *(_OWORD *)a6 = *(_OWORD *)a4;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a4 + 16);
  if (!*(_DWORD *)a6)
  {
    v32 = v31;
    v33 = sub_23411BCD0(v31);
    v21 = *(_OWORD *)v33;
    *(_OWORD *)a6 = *(_OWORD *)v33;
    *(_QWORD *)(a6 + 16) = *(_QWORD *)(v33 + 16);
    if (!*(_DWORD *)a6)
    {
      v60 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      sub_233CBABD0(a3, &v60, a6);
      if (!*(_DWORD *)a6)
      {
        sub_23411AC84(v33, v60);
        v21 = *(_OWORD *)v33;
        *(_OWORD *)a6 = *(_OWORD *)v33;
        *(_QWORD *)(a6 + 16) = *(_QWORD *)(v33 + 16);
        if (!*(_DWORD *)a6)
        {
          v34 = sub_23411AC30(v33);
          v21 = *(_OWORD *)v33;
          *(_OWORD *)a6 = *(_OWORD *)v33;
          *(_QWORD *)(a6 + 16) = *(_QWORD *)(v33 + 16);
          if (!*(_DWORD *)a6)
          {
            memset(buf, 0, 24);
            v35 = sub_23411B488(v34, *a3);
            v36 = sub_23411B4DC(v35, *((_DWORD *)a3 + 1));
            v37 = sub_23411B530(v36, *((_DWORD *)a3 + 2));
            sub_23411ACD8(v37, (uint64_t)buf);
            *(_QWORD *)&v21 = *(_QWORD *)buf;
            *(_OWORD *)a6 = *(_OWORD *)buf;
            *(_QWORD *)(a6 + 16) = *(_QWORD *)&buf[16];
            if (!*(_DWORD *)a6)
            {
              *(_WORD *)v55 = *a3;
              *(_QWORD *)&v55[4] = *(_QWORD *)(a3 + 2);
              v38 = sub_233D54A00((unsigned __int16 *)v55, &v59, (uint64_t)off_256152F50, (unsigned __int16)qword_256152F58, 0);
              if (v38)
              {
                *(_DWORD *)a6 = v38 | 0x500;
                *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/e"
                                      "mber-compatibility-functions.cpp";
                v22 = 356;
                goto LABEL_7;
              }
              v39 = *(char **)(v33 + 24);
              if (!v39)
              {
                *(_DWORD *)a6 = 0;
                *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/e"
                                      "mber-compatibility-functions.cpp";
                v22 = 360;
                goto LABEL_7;
              }
              v40 = *(unsigned __int8 *)(v59 + 14);
              v41 = *(unsigned __int8 *)(v59 + 15);
              v42 = sub_233CBFD34(*(unsigned __int8 *)(v59 + 14));
              switch(v42)
              {
                case 16:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAD18(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                  goto LABEL_45;
                case 32:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAD70(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 33:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAD9C(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 34:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBADCC(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 35:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAE94(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 36:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAEC0(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 37:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBAF88(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 38:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB050(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 39:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB118(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 40:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB144(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 41:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB174(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 42:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB1A4(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 43:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB260(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 44:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB290(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 45:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB364(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 46:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB43C(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 47:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB514(v39, (v41 >> 6) & 1, a6);
                  goto LABEL_84;
                case 57:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB544(v39, a6);
                  goto LABEL_84;
                case 58:
                  *(_QWORD *)a6 = 0;
                  *(_QWORD *)(a6 + 8) = 0;
                  *(_QWORD *)(a6 + 16) = 0;
                  sub_233CBB570(v39, a6);
                  goto LABEL_84;
                case 65:
                  v44 = off_256152F50;
                  v45 = *(unsigned __int8 *)sub_233CBB59C(&off_256152F50, 0);
                  if (v45 != 255)
                  {
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    sub_233BF7114(v54, (uint64_t)v44 + 1, v45);
                    sub_2341073FC(v39, 2uLL, v54[0], (unint64_t)v54[1], a6);
                    goto LABEL_84;
                  }
                  if ((v41 & 0x40) != 0)
                    goto LABEL_83;
                  *(_DWORD *)a6 = 3;
                  *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util"
                                        "/ember-compatibility-functions.cpp";
                  v22 = 489;
                  goto LABEL_7;
                case 66:
                  v46 = off_256152F50;
                  v47 = *(unsigned __int8 *)sub_233CBB59C(&off_256152F50, 0);
                  if (v47 != 255)
                  {
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    sub_2341075BC(v39, 2uLL, (char *)v46 + 1, v47, a6);
                    goto LABEL_84;
                  }
                  if ((v41 & 0x40) != 0)
                    goto LABEL_83;
                  *(_DWORD *)a6 = 3;
                  *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util"
                                        "/ember-compatibility-functions.cpp";
                  v22 = 458;
                  goto LABEL_7;
                case 67:
                  v48 = *(unsigned __int16 *)off_256152F50;
                  if (v48 != 0xFFFF)
                  {
                    v49 = (char *)off_256152F50 + 2;
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    sub_233BF7114(v53, (uint64_t)v49, v48);
                    sub_2341073FC(v39, 2uLL, v53[0], (unint64_t)v53[1], a6);
                    goto LABEL_84;
                  }
                  if ((v41 & 0x40) != 0)
                    goto LABEL_83;
                  *(_DWORD *)a6 = 3;
                  *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util"
                                        "/ember-compatibility-functions.cpp";
                  v22 = 504;
                  goto LABEL_7;
                case 68:
                  v50 = *(unsigned __int16 *)off_256152F50;
                  if (v50 == 0xFFFF)
                  {
                    if ((v41 & 0x40) == 0)
                    {
                      *(_DWORD *)a6 = 3;
                      *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/"
                                            "util/ember-compatibility-functions.cpp";
                      v22 = 474;
                      goto LABEL_7;
                    }
LABEL_83:
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    sub_2341079D4(v39, 2uLL, a6);
                  }
                  else
                  {
                    v51 = (char *)off_256152F50 + 2;
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    sub_2341075BC(v39, 2uLL, v51, v50, a6);
                  }
LABEL_84:
                  if (!*(_DWORD *)a6)
                  {
                    *(_QWORD *)a6 = 0;
                    *(_QWORD *)(a6 + 8) = 0;
                    *(_QWORD *)(a6 + 16) = 0;
                    *(_QWORD *)&v21 = sub_23411ACD8(v33, a6).n128_u64[0];
                    if (!*(_DWORD *)a6)
                      *(_QWORD *)&v21 = sub_23411ACD8(v32, a6).n128_u64[0];
                  }
                  break;
                default:
                  if (!v42)
                    goto LABEL_83;
LABEL_45:
                  v43 = sub_234117B80(0xDu, "DataManagement");
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v61 = 67109120;
                    *(_DWORD *)&v61[4] = v40;
                    _os_log_impl(&dword_233BF3000, v43, OS_LOG_TYPE_ERROR, "Attribute type 0x%x not handled", v61, 8u);
                  }
                  if (sub_234114844(1u))
                    sub_2341147D0(0xDu, 1);
                  *(_DWORD *)a6 = 1281;
                  *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util"
                                        "/ember-compatibility-functions.cpp";
                  v22 = 515;
                  goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  return *(double *)&v21;
}

uint64_t sub_233CBAB00(unsigned __int16 *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;

  v5 = 0;
  *a2 = 0;
  *a3 = 0;
  v6 = *((_DWORD *)a1 + 2);
  while (dword_2342AA0A0[v5] != v6)
  {
    if (++v5 == 3)
    {
      result = sub_233D549C0(*a1, *((_DWORD *)a1 + 1), v6);
      *a3 = result;
      return result;
    }
  }
  result = sub_233D54700(*a1, *((_DWORD *)a1 + 1));
  *a2 = result;
  return result;
}

uint64_t sub_233CBAB7C(unsigned __int16 *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_233D54BA8(*a1);
  if (v2)
  {
    if (sub_233D54C38(v2, *((_DWORD *)a1 + 1), 64, 0))
      return -122;
    else
      return -61;
  }
  else
  {
    return 127;
  }
}

uint64_t sub_233CBABD0@<X0>(unsigned __int16 *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  result = sub_233D55CCC(a1);
  if (result)
  {
    v7 = 0;
    *a2 = *(_DWORD *)result;
    v8 = 171;
  }
  else
  {
    v9 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *a1;
      v11 = HIWORD(*((_DWORD *)a1 + 1));
      v12 = (unsigned __int16)*((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 67109632;
      v14 = v10;
      v15 = 1024;
      v16 = v11;
      v17 = 1024;
      v18 = v12;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Endpoint %x, Cluster 0x%04X_%04X not found in ReadClusterDataVersion!", buf, 0x14u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0xDu, 1);
    v8 = 168;
    v7 = 216;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compatibi"
                        "lity-functions.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

char *sub_233CBAD18@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(unsigned __int8 *)off_256152F50;
  if (a2)
  {
    if (v3 == 255)
      return sub_2341079D4(result, 2uLL, a3);
  }
  else if (v3 == 255)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
    return result;
  }
  return sub_234106F04(result, 2uLL, v3 != 0, a3);
}

char *sub_233CBAD70@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;

  v3 = *(unsigned __int8 *)off_256152F50;
  if (a2 && v3 == 255)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_2341071D8(a1, 2uLL, v3, a3);
}

char *sub_233CBAD9C@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;

  v3 = *(unsigned __int16 *)off_256152F50;
  if (a2 && v3 == 0xFFFF)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_234107224(a1, 2uLL, v3, a3);
}

char *sub_233CBADCC@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t i;
  __int16 v10;
  char v11;

  v10 = *(_WORD *)off_256152F50;
  v11 = *((_BYTE *)off_256152F50 + 2);
  if (!a2)
    goto LABEL_12;
  v3 = 2;
  do
  {
    v4 = *((unsigned __int8 *)&v10 + v3);
    v5 = v3-- != 0;
  }
  while (v5 && v4 == 255);
  if (v4 == 255)
    return sub_2341079D4(result, 2uLL, a3);
  v6 = 2;
  do
  {
    v7 = *((unsigned __int8 *)&v10 + v6);
    v5 = v6-- != 0;
  }
  while (v5 && v7 == 255);
  if (v7 == 255)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
  }
  else
  {
LABEL_12:
    v8 = 0;
    for (i = 2; i != -1; --i)
      v8 = *((unsigned __int8 *)&v10 + i) | (v8 << 8);
    return sub_23410726C(result, 2uLL, v8, a3);
  }
  return result;
}

char *sub_233CBAE94@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v3;

  v3 = *(_DWORD *)off_256152F50;
  if (a2 && v3 == -1)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_23410726C(a1, 2uLL, v3, a3);
}

char *sub_233CBAEC0@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t i;
  int v10;
  char v11;

  v10 = *(_DWORD *)off_256152F50;
  v11 = *((_BYTE *)off_256152F50 + 4);
  if (!a2)
    goto LABEL_12;
  v3 = 4;
  do
  {
    v4 = *((unsigned __int8 *)&v10 + v3);
    v5 = v3-- != 0;
  }
  while (v5 && v4 == 255);
  if (v4 == 255)
    return sub_2341079D4(result, 2uLL, a3);
  v6 = 4;
  do
  {
    v7 = *((unsigned __int8 *)&v10 + v6);
    v5 = v6-- != 0;
  }
  while (v5 && v7 == 255);
  if (v7 == 255)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
  }
  else
  {
LABEL_12:
    v8 = 0;
    for (i = 4; i != -1; --i)
      v8 = *((unsigned __int8 *)&v10 + i) | (v8 << 8);
    return sub_2341071EC(result, 2uLL, v8, a3);
  }
  return result;
}

char *sub_233CBAF88@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t i;
  int v10;
  __int16 v11;

  v10 = *(_DWORD *)off_256152F50;
  v11 = *((_WORD *)off_256152F50 + 2);
  if (!a2)
    goto LABEL_12;
  v3 = 5;
  do
  {
    v4 = *((unsigned __int8 *)&v10 + v3);
    v5 = v3-- != 0;
  }
  while (v5 && v4 == 255);
  if (v4 == 255)
    return sub_2341079D4(result, 2uLL, a3);
  v6 = 5;
  do
  {
    v7 = *((unsigned __int8 *)&v10 + v6);
    v5 = v6-- != 0;
  }
  while (v5 && v7 == 255);
  if (v7 == 255)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
  }
  else
  {
LABEL_12:
    v8 = 0;
    for (i = 5; i != -1; --i)
      v8 = *((unsigned __int8 *)&v10 + i) | (v8 << 8);
    return sub_2341071EC(result, 2uLL, v8, a3);
  }
  return result;
}

char *sub_233CBB050@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t i;
  _BYTE v10[7];

  *(_DWORD *)v10 = *(_DWORD *)off_256152F50;
  *(_DWORD *)&v10[3] = *(_DWORD *)((char *)off_256152F50 + 3);
  if (!a2)
    goto LABEL_12;
  v3 = 6;
  do
  {
    v4 = v10[v3];
    v5 = v3-- != 0;
  }
  while (v5 && v4 == 255);
  if (v4 == 255)
    return sub_2341079D4(result, 2uLL, a3);
  v6 = 6;
  do
  {
    v7 = v10[v6];
    v5 = v6-- != 0;
  }
  while (v5 && v7 == 255);
  if (v7 == 255)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
  }
  else
  {
LABEL_12:
    v8 = 0;
    for (i = 6; i != -1; --i)
      v8 = v10[i] | (v8 << 8);
    return sub_2341071EC(result, 2uLL, v8, a3);
  }
  return result;
}

char *sub_233CBB118@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;

  v3 = *off_256152F50;
  if (a2 && v3 == -1)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_2341071EC(a1, 2uLL, v3, a3);
}

char *sub_233CBB144@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(unsigned __int8 *)off_256152F50;
  if (a2 && v3 == 128)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_234107314(a1, 2uLL, (char)v3, a3);
}

char *sub_233CBB174@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(unsigned __int16 *)off_256152F50;
  if (a2 && v3 == 0x8000)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_234107314(a1, 2uLL, (__int16)v3, a3);
}

char *sub_233CBB1A4@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  BOOL v5;
  int v7;
  uint64_t i;
  int v9;
  __int16 v10;
  unsigned __int8 v11;

  v10 = *(_WORD *)off_256152F50;
  v11 = *((_BYTE *)off_256152F50 + 2);
  if (!a2)
    goto LABEL_16;
  if (v11 == 128 && HIBYTE(v10) == 0 && v10 == 0)
    return sub_2341079D4(result, 2uLL, a3);
  v5 = v11 == 128 && HIBYTE(v10) == 0;
  if (v5 && v10 == 0)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-compati"
                          "bility-functions.cpp";
    *(_DWORD *)(a3 + 16) = 80;
  }
  else
  {
LABEL_16:
    v7 = 0;
    for (i = 2; i != -1; --i)
      v7 = *((unsigned __int8 *)&v10 + i) | (v7 << 8);
    if (v7 < 0x800000)
      v9 = v7;
    else
      v9 = v7 - 0x1000000;
    return sub_234107314(result, 2uLL, v9, a3);
  }
  return result;
}

char *sub_233CBB260@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(_DWORD *)off_256152F50;
  if (a2 && v3 == 0x80000000)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_234107314(a1, 2uLL, v3, a3);
}

char *sub_233CBB290@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  char v10;

  v9 = *(_DWORD *)off_256152F50;
  v3 = *((unsigned __int8 *)off_256152F50 + 4);
  v10 = *((_BYTE *)off_256152F50 + 4);
  if (a2 && v3 == 128)
  {
    v4 = 3;
    while (!*((_BYTE *)&v9 + v4))
    {
      if (--v4 == -1)
        return sub_2341079D4(result, 2uLL, a3);
    }
    v5 = 3;
    while (!*((_BYTE *)&v9 + v5))
    {
      if (--v5 == -1)
      {
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-com"
                              "patibility-functions.cpp";
        *(_DWORD *)(a3 + 16) = 80;
        return result;
      }
    }
  }
  v6 = 0;
  for (i = 4; i != -1; --i)
    v6 = *((unsigned __int8 *)&v9 + i) | (unint64_t)(v6 << 8);
  if (v6 <= 0x7FFFFFFFFFLL)
    v8 = v6;
  else
    v8 = v6 - 0x10000000000;
  return sub_23410731C(result, 2uLL, v8, a3);
}

char *sub_233CBB364@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  __int16 v9;

  v9 = *((_WORD *)off_256152F50 + 2);
  v8 = *(_DWORD *)off_256152F50;
  if (a2 && HIBYTE(v9) == 128)
  {
    v3 = 4;
    while (!*((_BYTE *)&v8 + v3))
    {
      if (--v3 == -1)
        return sub_2341079D4(result, 2uLL, a3);
    }
    v4 = 4;
    while (!*((_BYTE *)&v8 + v4))
    {
      if (--v4 == -1)
      {
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-com"
                              "patibility-functions.cpp";
        *(_DWORD *)(a3 + 16) = 80;
        return result;
      }
    }
  }
  v5 = 0;
  for (i = 5; i != -1; --i)
    v5 = *((unsigned __int8 *)&v8 + i) | (unint64_t)(v5 << 8);
  if (v5 <= 0x7FFFFFFFFFFFLL)
    v7 = v5;
  else
    v7 = v5 - 0x1000000000000;
  return sub_23410731C(result, 2uLL, v7, a3);
}

char *sub_233CBB43C@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _BYTE v8[7];

  *(_DWORD *)&v8[3] = *(_DWORD *)((char *)off_256152F50 + 3);
  *(_DWORD *)v8 = *(_DWORD *)off_256152F50;
  if (a2 && v8[6] == 128)
  {
    v3 = 5;
    while (!v8[v3])
    {
      if (--v3 == -1)
        return sub_2341079D4(result, 2uLL, a3);
    }
    v4 = 5;
    while (!v8[v4])
    {
      if (--v4 == -1)
      {
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-com"
                              "patibility-functions.cpp";
        *(_DWORD *)(a3 + 16) = 80;
        return result;
      }
    }
  }
  v5 = 0;
  for (i = 6; i != -1; --i)
    v5 = v8[i] | (unint64_t)(v5 << 8);
  if (v5 <= 0x7FFFFFFFFFFFFFLL)
    v7 = v5;
  else
    v7 = v5 - 0x100000000000000;
  return sub_23410731C(result, 2uLL, v7, a3);
}

char *sub_233CBB514@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *off_256152F50;
  if (a2 && v3 == 0x8000000000000000)
    return sub_2341079D4(a1, 2uLL, a3);
  else
    return sub_23410731C(a1, 2uLL, v3, a3);
}

char *sub_233CBB544@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2341073DC(a1, 2uLL, a2, *(_DWORD *)off_256152F50);
}

char *sub_233CBB570@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2341073EC(a1, 2uLL, a2, *off_256152F50);
}

unint64_t sub_233CBB59C(_QWORD *a1, unint64_t a2)
{
  if (a1[1] <= a2)
    sub_234255500((uint64_t)a1);
  return *a1 + a2;
}

uint64_t sub_233CBB5C4(uint64_t a1)
{
  return sub_233D549C0(*(_WORD *)a1, *(_DWORD *)(a1 + 4), *(_DWORD *)(a1 + 8));
}

void sub_233CBB5D4(_OWORD *a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  int v22;
  unsigned int v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  unsigned int v32;
  int v33;
  uint8_t v34;
  uint8_t v35;
  uint8_t v36;
  int v37;
  uint8_t v38;
  NSObject *v39;
  int v40;
  unsigned __int16 v41;
  unsigned __int16 v42;
  unsigned __int8 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t m;
  unint64_t v48;
  unint64_t v49;
  uint64_t i;
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t j;
  unint64_t v58;
  unint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t v62;
  uint64_t n;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t ii;
  uint64_t *v68;
  NSObject *v69;
  char *v70;
  NSObject *v71;
  __int128 v72;
  _DWORD v73[2];
  _BYTE buf[32];
  __int128 v75;
  __int128 v76;
  int v77;
  uint8_t v78[8];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v72 = 0uLL;
  sub_233CBAB00(a2, (uint64_t *)&v72 + 1, (uint64_t *)&v72);
  v10 = v72;
  if (v72 == 0)
  {
    buf[0] = sub_233CBAB7C(a2);
    buf[1] = 0;
    sub_2340FC390(a4, a2, buf, a5);
    return;
  }
  if (!(_QWORD)v72 || (*(_BYTE *)(v72 + 15) & 1) == 0)
  {
    *(_WORD *)buf = 136;
    sub_2340FC390(a4, a2, buf, a5);
    return;
  }
  *(_DWORD *)v78 = *((_DWORD *)a2 + 1);
  *(_WORD *)&v78[4] = *a2;
  v11 = sub_234035668();
  *(_QWORD *)buf = *(_QWORD *)a2;
  *(_DWORD *)&buf[8] = *((_DWORD *)a2 + 2);
  buf[12] = v11;
  if (!sub_233CBC908(a4, (unsigned __int16 *)buf))
  {
    v12 = sub_2341D512C();
    sub_2341D4A50(v12, (uint64_t)a1, (uint64_t)v78, v11, (uint64_t)buf);
    v76 = *(_OWORD *)&buf[4];
    v77 = *(_DWORD *)&buf[20];
    if (*(_DWORD *)buf)
    {
      if (*(_DWORD *)buf == 165)
      {
        strcpy(buf, "~");
        sub_2340FC390(a4, a2, buf, a5);
      }
      else
      {
        *(_DWORD *)a5 = *(_DWORD *)buf;
        *(_OWORD *)(a5 + 4) = v76;
        *(_DWORD *)(a5 + 20) = v77;
      }
      return;
    }
  }
  v13 = *((_DWORD *)a2 + 2);
  v14 = *(_QWORD *)a2;
  *(_BYTE *)(a4 + 260) = 1;
  *(_QWORD *)(a4 + 264) = v14;
  *(_DWORD *)(a4 + 272) = v13;
  *(_BYTE *)(a4 + 276) = v11;
  if ((*(_BYTE *)(v10 + 15) & 8) != 0 && !*(_BYTE *)(a4 + 236))
  {
    *(_WORD *)buf = 198;
    sub_2340FC390(a4, a2, buf, a5);
    return;
  }
  if (!*((_BYTE *)a2 + 16) || (v15 = (int *)sub_233C20E2C((_BYTE *)a2 + 16), sub_233CBC97C(a2, *v15)))
  {
    v16 = sub_23410337C(*a2, *((_DWORD *)a2 + 1));
    if (v16)
    {
      *(_QWORD *)buf = a3;
      buf[8] = 0;
      v17 = a1[1];
      *(_OWORD *)&buf[16] = *a1;
      v75 = v17;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      (*(void (**)(uint64_t, unsigned __int16 *, _BYTE *))(*(_QWORD *)v16 + 24))(v16, a2, buf);
      if (*(_DWORD *)a5)
        return;
      if (buf[8])
      {
        sub_233D48560((uint64_t)a2);
        LOWORD(v76) = 0;
        sub_2340FC390(a4, a2, (unsigned __int8 *)&v76, a5);
        return;
      }
    }
    v76 = xmmword_2504F014C;
    v77 = 0;
    v18 = sub_233CBFD34(*(unsigned __int8 *)(v10 + 14));
    v19 = v18;
    v20 = *(_BYTE *)(v10 + 15);
    switch((int)v18)
    {
      case 16:
        if (!qword_256152F58)
          sub_2342555AC(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
          goto LABEL_83;
        v78[0] = 0;
        memset(buf, 0, 24);
        sub_2341046D0(a3, (char *)v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v36 = v78[0];
        goto LABEL_223;
      case 32:
        if (!qword_256152F58)
          sub_234255648(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
LABEL_83:
          v36 = -1;
          goto LABEL_223;
        }
        v78[0] = 0;
        memset(buf, 0, 24);
        sub_23410492C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v36 = v78[0];
        if ((v20 & 0x40) == 0 || v78[0] != 255)
          goto LABEL_223;
        goto LABEL_234;
      case 33:
        if ((unint64_t)qword_256152F58 <= 1)
          sub_2342556E4(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v31 = -1;
          goto LABEL_152;
        }
        *(_WORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341049E0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v31 = *(_WORD *)v78;
        if ((v20 & 0x40) == 0 || *(unsigned __int16 *)v78 != 0xFFFF)
          goto LABEL_152;
        goto LABEL_234;
      case 34:
        if ((unint64_t)qword_256152F58 <= 2)
          sub_234255780(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          LOBYTE(v37) = -1;
          v35 = -1;
          v38 = -1;
LABEL_182:
          v53 = off_256152F50;
          *(_BYTE *)off_256152F50 = v38;
          *((_BYTE *)v53 + 1) = v37;
          goto LABEL_183;
        }
        *(_DWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_234104A50(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v38 = v78[0];
        if ((v20 & 0x40) != 0)
          v54 = 16777214;
        else
          v54 = 0xFFFFFF;
        if (v54 >= *(_DWORD *)v78)
        {
          v37 = *(_DWORD *)v78 >> 8;
          v35 = v78[2];
          goto LABEL_182;
        }
        goto LABEL_234;
      case 35:
        if ((unint64_t)qword_256152F58 <= 3)
          sub_23425581C(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v32 = -1;
          goto LABEL_230;
        }
        *(_DWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_234104A50(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v32 = *(_DWORD *)v78;
        if ((v20 & 0x40) == 0 || *(_DWORD *)v78 != -1)
          goto LABEL_230;
        goto LABEL_234;
      case 36:
        if ((unint64_t)qword_256152F58 <= 4)
          sub_2342558B8(v18);
        LOBYTE(v73[1]) = 0;
        v73[0] = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          LOBYTE(v73[1]) = -1;
          v73[0] = -1;
          goto LABEL_167;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_23410499C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v48 = *(_QWORD *)v78;
        v49 = 0xFFFFFFFFFELL;
        if ((v20 & 0x40) == 0)
          v49 = 0xFFFFFFFFFFLL;
        if (v49 < *(_QWORD *)v78)
          goto LABEL_218;
        for (i = 0; i != 5; ++i)
        {
          *((_BYTE *)v73 + i) = v48;
          v48 >>= 8;
        }
        goto LABEL_167;
      case 37:
        if ((unint64_t)qword_256152F58 <= 5)
          sub_234255954(v18);
        LOWORD(v73[1]) = 0;
        v73[0] = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          LOWORD(v73[1]) = -1;
          v73[0] = -1;
          goto LABEL_209;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_23410499C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v55 = *(_QWORD *)v78;
        v56 = 0xFFFFFFFFFFFELL;
        if ((v20 & 0x40) == 0)
          v56 = 0xFFFFFFFFFFFFLL;
        if (v56 < *(_QWORD *)v78)
          goto LABEL_218;
        for (j = 0; j != 6; ++j)
        {
          *((_BYTE *)v73 + j) = v55;
          v55 >>= 8;
        }
        goto LABEL_209;
      case 38:
        if ((unint64_t)qword_256152F58 <= 6)
          sub_2342559F0(v18);
        memset(v73, 0, 7);
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          memset(v73, 255, 7);
          goto LABEL_217;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_23410499C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v58 = *(_QWORD *)v78;
        v59 = 0xFFFFFFFFFFFFFELL;
        if ((v20 & 0x40) == 0)
          v59 = 0xFFFFFFFFFFFFFFLL;
        if (v59 < *(_QWORD *)v78)
          goto LABEL_218;
        for (k = 0; k != 7; ++k)
        {
          *((_BYTE *)v73 + k) = v58;
          v58 >>= 8;
        }
        goto LABEL_217;
      case 39:
        if ((unint64_t)qword_256152F58 <= 7)
          sub_234255A8C(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v30 = -1;
          goto LABEL_237;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_23410499C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v30 = *(_QWORD *)v78;
        if ((v20 & 0x40) == 0 || *(_QWORD *)v78 != -1)
          goto LABEL_237;
        goto LABEL_234;
      case 40:
        if (!qword_256152F58)
          sub_234255B28(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v36 = 0x80;
LABEL_223:
          *(_BYTE *)off_256152F50 = v36;
          *(_DWORD *)buf = 0;
          v23 = 1;
          goto LABEL_247;
        }
        v78[0] = 0;
        memset(buf, 0, 24);
        sub_234104734(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v36 = v78[0];
        if ((v20 & 0x40) == 0 || v78[0] != 128)
          goto LABEL_223;
        goto LABEL_234;
      case 41:
        if ((unint64_t)qword_256152F58 <= 1)
          sub_234255BC4(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v31 = 0x8000;
LABEL_152:
          *(_WORD *)off_256152F50 = v31;
          *(_DWORD *)buf = 0;
          v23 = 2;
          goto LABEL_247;
        }
        *(_WORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_234104834(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v31 = *(_WORD *)v78;
        if ((v20 & 0x40) == 0 || *(unsigned __int16 *)v78 != 0x8000)
          goto LABEL_152;
        goto LABEL_234;
      case 42:
        if ((unint64_t)qword_256152F58 <= 2)
          sub_234255C60(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          LOWORD(v33) = 0;
          v34 = 0;
          v35 = 0x80;
          goto LABEL_175;
        }
        *(_DWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341048B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v34 = v78[0];
        if ((v20 & 0x40) != 0)
          v52 = -8388607;
        else
          v52 = -8388608;
        if (v52 <= *(int *)v78 && *(int *)v78 < 0x800000)
        {
          v33 = *(_DWORD *)v78 >> 8;
          v35 = v78[2];
LABEL_175:
          v53 = off_256152F50;
          *(_WORD *)off_256152F50 = v34 | (unsigned __int16)((_WORD)v33 << 8);
LABEL_183:
          *((_BYTE *)v53 + 2) = v35;
          *(_DWORD *)buf = 0;
          v23 = 3;
          goto LABEL_247;
        }
LABEL_234:
        v21 = 47;
        *(_DWORD *)buf = 47;
        *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-comp"
                             "atibility-functions.cpp";
        v40 = 540;
LABEL_235:
        *(_DWORD *)&buf[16] = v40;
LABEL_236:
        v76 = *(_OWORD *)&buf[4];
        v77 = *(_DWORD *)&buf[20];
        goto LABEL_242;
      case 43:
        if ((unint64_t)qword_256152F58 <= 3)
          sub_234255CFC(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v32 = 0x80000000;
          goto LABEL_230;
        }
        *(_DWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341048B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v32 = *(_DWORD *)v78;
        if ((v20 & 0x40) == 0 || *(_DWORD *)v78 != 0x80000000)
          goto LABEL_230;
        goto LABEL_234;
      case 44:
        if ((unint64_t)qword_256152F58 <= 4)
          sub_234255D98(v18);
        LOBYTE(v73[1]) = 0;
        v73[0] = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          LOBYTE(v73[1]) = 0x80;
          v73[0] = 0;
LABEL_167:
          v21 = 0;
          v51 = off_256152F50;
          *(_DWORD *)off_256152F50 = v73[0];
          *((_BYTE *)v51 + 4) = v73[1];
          *(_DWORD *)buf = 0;
          *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-co"
                               "mpatibility-functions.cpp";
          *(_DWORD *)&buf[16] = 545;
          v23 = 5;
          goto LABEL_241;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341047B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v45 = *(_QWORD *)v78;
        v46 = 0xFFFFFF8000000000;
        if ((v20 & 0x40) != 0)
          v46 = 0xFFFFFF8000000001;
        if (v46 <= *(uint64_t *)v78 && *(uint64_t *)v78 <= 0x7FFFFFFFFFLL)
        {
          for (m = 0; m != 5; ++m)
          {
            *((_BYTE *)v73 + m) = v45;
            v45 >>= 8;
          }
          goto LABEL_167;
        }
        goto LABEL_218;
      case 45:
        if ((unint64_t)qword_256152F58 <= 5)
          sub_234255E34(v18);
        LOWORD(v73[1]) = 0;
        v73[0] = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v73[0] = 0;
          LOWORD(v73[1]) = 0x8000;
LABEL_209:
          v21 = 0;
          v64 = off_256152F50;
          *(_DWORD *)off_256152F50 = v73[0];
          *((_WORD *)v64 + 2) = v73[1];
          *(_DWORD *)buf = 0;
          *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-co"
                               "mpatibility-functions.cpp";
          *(_DWORD *)&buf[16] = 545;
          v23 = 6;
          goto LABEL_241;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341047B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v61 = *(_QWORD *)v78;
        v62 = 0xFFFF800000000000;
        if ((v20 & 0x40) != 0)
          v62 = 0xFFFF800000000001;
        if (v62 <= *(uint64_t *)v78 && *(uint64_t *)v78 <= 0x7FFFFFFFFFFFLL)
        {
          for (n = 0; n != 6; ++n)
          {
            *((_BYTE *)v73 + n) = v61;
            v61 >>= 8;
          }
          goto LABEL_209;
        }
        goto LABEL_218;
      case 46:
        if ((unint64_t)qword_256152F58 <= 6)
          sub_234255ED0(v18);
        memset(v73, 0, 7);
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          BYTE2(v73[1]) = 0x80;
          v73[0] = 0;
          LOWORD(v73[1]) = 0;
LABEL_217:
          v21 = 0;
          v68 = off_256152F50;
          *(_DWORD *)off_256152F50 = v73[0];
          *(_DWORD *)((char *)v68 + 3) = *(_DWORD *)((char *)v73 + 3);
          *(_DWORD *)buf = 0;
          *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-co"
                               "mpatibility-functions.cpp";
          *(_DWORD *)&buf[16] = 545;
          v23 = 7;
          goto LABEL_241;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341047B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v65 = *(_QWORD *)v78;
        v66 = 0xFF80000000000000;
        if ((v20 & 0x40) != 0)
          v66 = 0xFF80000000000001;
        if (v66 <= *(uint64_t *)v78 && *(uint64_t *)v78 <= 0x7FFFFFFFFFFFFFLL)
        {
          for (ii = 0; ii != 7; ++ii)
          {
            *((_BYTE *)v73 + ii) = v65;
            v65 >>= 8;
          }
          goto LABEL_217;
        }
LABEL_218:
        v21 = 47;
        *(_DWORD *)buf = 47;
        *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-comp"
                             "atibility-functions.cpp";
        *(_DWORD *)&buf[16] = 540;
LABEL_219:
        v23 = 0;
        goto LABEL_241;
      case 47:
        if ((unint64_t)qword_256152F58 <= 7)
          sub_234255F6C(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v30 = 0x8000000000000000;
          goto LABEL_237;
        }
        *(_QWORD *)v78 = 0;
        memset(buf, 0, 24);
        sub_2341047B0(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_236;
        v30 = *(_QWORD *)v78;
        if ((v20 & 0x40) != 0 && *(_QWORD *)v78 == 0x8000000000000000)
          goto LABEL_234;
        goto LABEL_237;
      case 57:
        if ((unint64_t)qword_256152F58 <= 3)
          sub_234256008(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v32 = 2143289344;
        }
        else
        {
          *(_DWORD *)v78 = 0;
          memset(buf, 0, 24);
          sub_234104ABC(a3, v78, (uint64_t)buf);
          v21 = *(_DWORD *)buf;
          if (*(_DWORD *)buf)
            goto LABEL_236;
          v32 = *(_DWORD *)v78;
        }
LABEL_230:
        *(_DWORD *)off_256152F50 = v32;
        *(_DWORD *)buf = 0;
        v23 = 4;
        goto LABEL_247;
      case 58:
        if ((unint64_t)qword_256152F58 <= 7)
          sub_2342560A4(v18);
        if ((*(_BYTE *)(v10 + 15) & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v30 = 0x7FF8000000000000;
        }
        else
        {
          *(_QWORD *)v78 = 0;
          memset(buf, 0, 24);
          sub_234104B00(a3, (double *)v78, (uint64_t)buf);
          v21 = *(_DWORD *)buf;
          if (*(_DWORD *)buf)
            goto LABEL_236;
          v30 = *(_QWORD *)v78;
        }
LABEL_237:
        *off_256152F50 = v30;
        *(_DWORD *)buf = 0;
        v23 = 8;
        goto LABEL_247;
      case 65:
      case 66:
        *(_QWORD *)v78 = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v21 = 0;
          *(_BYTE *)off_256152F50 = -1;
          v22 = 575;
          v23 = 1;
          goto LABEL_240;
        }
        v29 = sub_23410462C(a3);
        if (v19 == 65)
        {
          if (v29 != 16)
            goto LABEL_134;
        }
        else if (v29 != 12)
        {
          goto LABEL_134;
        }
        if (sub_2341046A4(a3) > 0xFF)
          goto LABEL_238;
        memset(buf, 0, 24);
        sub_234104C0C(a3, v78, (uint64_t)buf);
        v21 = *(_DWORD *)buf;
        if (*(_DWORD *)buf)
          goto LABEL_219;
        v43 = sub_2341046A4(a3);
        if (v43 == 0xFF)
          goto LABEL_254;
        v44 = v43;
        if (qword_256152F58 <= (unint64_t)v43)
          goto LABEL_255;
        *(_BYTE *)off_256152F50 = v43;
        memcpy((char *)off_256152F50 + 1, *(const void **)v78, v43);
        v21 = 0;
        v23 = v44 + 1;
        goto LABEL_133;
      case 67:
      case 68:
        *(_QWORD *)v78 = 0;
        if ((v20 & 0x40) != 0 && sub_23410462C(a3) == 20)
        {
          v21 = 0;
          *(_WORD *)off_256152F50 = -1;
          v22 = 575;
          v23 = 2;
          goto LABEL_240;
        }
        v28 = sub_23410462C(a3);
        if (v19 == 67)
        {
          if (v28 == 16)
          {
LABEL_122:
            if (sub_2341046A4(a3) >> 16)
            {
LABEL_238:
              v23 = 0;
              v22 = 565;
            }
            else
            {
              memset(buf, 0, 24);
              sub_234104C0C(a3, v78, (uint64_t)buf);
              v21 = *(_DWORD *)buf;
              if (*(_DWORD *)buf)
                goto LABEL_219;
              v41 = sub_2341046A4(a3);
              if (v41 == 0xFFFF)
              {
LABEL_254:
                v23 = 0;
                v22 = 568;
              }
              else
              {
                v42 = v41 + 2;
                if ((unint64_t)v41 + 2 <= qword_256152F58)
                {
                  *(_WORD *)off_256152F50 = v41;
                  memcpy((char *)off_256152F50 + 2, *(const void **)v78, v41);
                  v21 = 0;
                  v23 = v42;
LABEL_133:
                  v22 = 575;
                  goto LABEL_240;
                }
LABEL_255:
                v23 = 0;
                v22 = 570;
              }
            }
            v21 = 4;
LABEL_240:
            *(_DWORD *)buf = v21;
            *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-"
                                 "compatibility-functions.cpp";
            *(_DWORD *)&buf[16] = v22;
LABEL_241:
            v76 = *(_OWORD *)&buf[4];
            v77 = *(_DWORD *)&buf[20];
            if (v21)
            {
LABEL_242:
              v69 = sub_234117B80(0x1Du, "Zcl");
              if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v21;
                *(_OWORD *)&buf[4] = v76;
                *(_DWORD *)&buf[20] = v77;
                v70 = sub_2341083CC((const char **)buf, 1);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v70;
                _os_log_impl(&dword_233BF3000, v69, OS_LOG_TYPE_INFO, "Failed to prepare data to write: %s", buf, 0xCu);
              }
              if (sub_234114844(3u))
              {
                *(_DWORD *)buf = v21;
                *(_OWORD *)&buf[4] = v76;
                *(_DWORD *)&buf[20] = v77;
                sub_2341083CC((const char **)buf, 1);
                sub_2341147D0(0x1Du, 3);
              }
            }
            else
            {
LABEL_247:
              if (v23 <= *(unsigned __int16 *)(v72 + 12))
              {
                buf[0] = sub_233C01D54();
                buf[1] = 0;
                sub_2340FC390(a4, a2, buf, a5);
                return;
              }
              v71 = sub_234117B80(0x1Du, "Zcl");
              if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233BF3000, v71, OS_LOG_TYPE_INFO, "Data to write exceedes the attribute size claimed.", buf, 2u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(0x1Du, 3);
            }
            *(_WORD *)buf = 135;
            sub_2340FC390(a4, a2, buf, a5);
            return;
          }
        }
        else if (v28 == 12)
        {
          goto LABEL_122;
        }
LABEL_134:
        v23 = 0;
        v22 = 564;
        v21 = 47;
        goto LABEL_240;
      default:
        v39 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v78 = 67109120;
          *(_DWORD *)&v78[4] = v19;
          _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_ERROR, "Attribute type %x not handled", v78, 8u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(0xDu, 1);
        v21 = 49;
        *(_DWORD *)buf = 49;
        *(_QWORD *)&buf[8] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/util/ember-comp"
                             "atibility-functions.cpp";
        v40 = 656;
        goto LABEL_235;
    }
  }
  v24 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = *a2;
    v26 = HIWORD(*((_DWORD *)a2 + 1));
    v27 = (unsigned __int16)*((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v25;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v26;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v27;
    _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "Write Version mismatch for Endpoint %x, Cluster 0x%04X_%04X", buf, 0x14u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0xDu, 1);
  *(_WORD *)buf = 146;
  sub_2340FC390(a4, a2, buf, a5);
}

BOOL sub_233CBC908(uint64_t a1, unsigned __int16 *a2)
{
  _BYTE *v3;

  if (*(_BYTE *)(a1 + 260)
    && (v3 = sub_233CBCB78((_BYTE *)(a1 + 260)), *(unsigned __int16 *)v3 == *a2)
    && *((_DWORD *)v3 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)v3 + 2) == *((_DWORD *)a2 + 2))
  {
    return v3[12] == *((_BYTE *)a2 + 12);
  }
  else
  {
    return 0;
  }
}

BOOL sub_233CBC97C(unsigned __int16 *a1, int a2)
{
  _DWORD *v4;
  _BOOL8 result;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (_DWORD *)sub_233D55CCC(a1);
  if (v4)
    return *v4 == a2;
  v6 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = *a1;
    v8 = HIWORD(*((_DWORD *)a1 + 1));
    v9 = (unsigned __int16)*((_DWORD *)a1 + 1);
    *(_DWORD *)buf = 67109632;
    v11 = v7;
    v12 = 1024;
    v13 = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Endpoint %x, Cluster 0x%04X_%04X not found in IsClusterDataVersionEqual!", buf, 0x14u);
  }
  result = sub_234114844(1u);
  if (result)
  {
    sub_2341147D0(0xDu, 1);
    return 0;
  }
  return result;
}

BOOL sub_233CBCA9C(int a1, int a2)
{
  int *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  _DWORD v10[6];

  v3 = (int *)sub_233D55144(a2, (uint64_t)v10);
  if (v10[0] || !v4)
    return 0;
  v6 = 8 * v4 - 8;
  do
  {
    v7 = *v3;
    v3 += 2;
    v5 = v7 == a1;
    v8 = v7 == a1 || v6 == 0;
    v6 -= 8;
  }
  while (!v8);
  return v5;
}

uint64_t sub_233CBCB08(unsigned __int16 *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)sub_233D54BA8(*a1);
  if (v2)
  {
    if (sub_233D54C38(v2, *((_DWORD *)a1 + 1), 64, 0))
      return 0;
    else
      return -61;
  }
  else
  {
    return 127;
  }
}

uint64_t sub_233CBCB58(int a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a2 + 4) != a1)
    return 0;
  result = 1;
  *(_BYTE *)a2 = 1;
  return result;
}

_BYTE *sub_233CBCB78(_BYTE *a1)
{
  if (!*a1)
    sub_2342561EC((uint64_t)a1);
  return a1 + 4;
}

void sub_233CBCDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

_BYTE *sub_233CBCEC0(_BYTE *a1)
{
  if (!*a1)
    sub_234255460();
  return a1 + 2;
}

void sub_233CBD108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_233CBD150(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_233CBD22C;
  block[3] = &unk_2504F0168;
  objc_copyWeak(&v11, (id *)(a1 + 64));
  v9 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v10 = *(id *)(a1 + 56);
  v5 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void sub_233CBD22C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (WeakRetained[5])
      v2 = *(_QWORD *)(a1 + 32);
    else
      v2 = 0;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v2, *(_QWORD *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_233CBD29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CBD464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CBD5D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBD744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBD7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CBD870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CBD9EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_233CBDA58()
{
  JUMPOUT(0x233CBDA4CLL);
}

void sub_233CBDB04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CBDB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBDD18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBDE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  a9.super_class = (Class)MTRDownloads;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_233CBE024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CBE12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233CBE1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CBE280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBE6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  _Unwind_Resume(a1);
}

void sub_233CBE768(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const char *v6;
  _QWORD v7[5];
  id v8;
  __int16 v9;

  v3 = a2;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CBE808;
  v7[3] = &unk_2504F01B8;
  v4 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  v8 = v3;
  v9 = *(_WORD *)(a1 + 48);
  v5 = v3;
  objc_msgSend_asyncDispatchToMatterQueue_errorHandler_(v4, v6, (uint64_t)v7, 0);

}

void sub_233CBE7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_233CBE808(uint64_t a1, const char *a2)
{
  uint64_t v3;

  v3 = objc_msgSend_remove_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, *(_QWORD *)(a1 + 40));
  if (*(_WORD *)(a1 + 48))
    sub_233CBE848(v3, *(void **)(a1 + 40));
}

void sub_233CBE848(uint64_t a1, void *a2)
{
  _BOOL8 v2;
  uint64_t v3;
  id v4;

  v4 = a2;
  v2 = sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 604);
  v3 = sub_2341B1F60(v2);
  (*(void (**)(uint64_t, void (*)(uint64_t, void *), id))(*(_QWORD *)v3 + 72))(v3, sub_233CBF974, v4);

}

void sub_233CBE8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CBE8B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  LODWORD(v3) = 172;
  *((_QWORD *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/M"
                         "TRDiagnosticLogsDownloader.mm";
  v4 = 422;
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CBE924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CBE934(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 32), sel_checkInteractionModelResponse_error_, a2);
}

void sub_233CBE944(uint64_t a1, void *a2, unsigned int a3)
{
  _BOOL8 v4;
  uint64_t v5;
  id v6;

  v6 = a2;
  v4 = sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 598);
  v5 = sub_2341B1F60(v4);
  (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, void *), id))(*(_QWORD *)v5 + 40))(v5, 1000 * a3, sub_233CBF974, v6);

}

void sub_233CBE9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CBEB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_233CBEDCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_233CBEFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_233CBF000(uint64_t a1, void *a2)
{
  id v3;

  *(_QWORD *)a1 = &off_2504F0260;
  v3 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  objc_storeWeak((id *)(a1 + 8), v3);

  return a1;
}

uint64_t sub_233CBF048(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_2504F0260;
  v2 = (id *)(a1 + 8);
  objc_storeWeak((id *)(a1 + 8), 0);
  objc_destroyWeak(v2);
  return a1;
}

uint64_t sub_233CBF08C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_2504F0260;
  v2 = (id *)(a1 + 8);
  objc_storeWeak((id *)(a1 + 8), 0);
  objc_destroyWeak(v2);
  return a1;
}

void sub_233CBF0D0(uint64_t a1)
{
  id *v1;

  *(_QWORD *)a1 = &off_2504F0260;
  v1 = (id *)(a1 + 8);
  objc_storeWeak((id *)(a1 + 8), 0);
  objc_destroyWeak(v1);
  JUMPOUT(0x23493E704);
}

void sub_233CBF124(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id *v5;
  id WeakRetained;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  const char *v25;
  _QWORD v26[5];
  _QWORD v27[5];

  v5 = (id *)(a1 + 8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));

  if (WeakRetained)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v9 = v8;
    v10 = objc_alloc(MEMORY[0x24BDD17C8]);
    v12 = (void *)objc_msgSend_initWithBytes_length_encoding_(v10, v11, v7, v9, 4);
    if (v12)
    {
      v13 = (void *)MEMORY[0x24BDD16E0];
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      objc_msgSend_numberWithUnsignedChar_(v13, v15, v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)MEMORY[0x24BDD16E0];
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
      objc_msgSend_numberWithUnsignedLongLong_(v17, v19, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = MEMORY[0x24BDAC760];
      v27[0] = MEMORY[0x24BDAC760];
      v27[1] = 3221225472;
      v27[2] = sub_233CBF344;
      v27[3] = &unk_2504F0288;
      v27[4] = a2;
      v22 = (void *)MEMORY[0x23493EEA8](v27);
      v26[0] = v21;
      v26[1] = 3221225472;
      v26[2] = sub_233CBF400;
      v26[3] = &unk_2504F0288;
      v26[4] = a2;
      v23 = (void *)MEMORY[0x23493EEA8](v26);
      v24 = objc_loadWeakRetained(v5);
      objc_msgSend_handleBDXTransferSessionBeginForFileDesignator_fabricIndex_nodeID_completion_abortHandler_(v24, v25, (uint64_t)v12, v16, v20, v22, v23);

      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
      *(_DWORD *)(a3 + 16) = 538;

    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
      *(_DWORD *)(a3 + 16) = 511;
    }

  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDiagnosticLogsDownloader.mm";
    *(_DWORD *)(a3 + 16) = 507;
  }
}

void sub_233CBF310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233CBF344(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a2;
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 517);
  if (v3)
  {
    v8 = 0uLL;
    v9 = 0;
    sub_234002650(v3, (uint64_t)&v8);
    v4 = *(_QWORD *)(a1 + 32);
    v6 = v8;
    v7 = v9;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v4 + 24))(v5, v4, &v6);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 32) + 16))(&v8);
  }

}

void sub_233CBF3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBF400(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a2;
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 528);
  v8 = 0uLL;
  v9 = 0;
  sub_234002650(v3, (uint64_t)&v8);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v8;
  v7 = v9;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v4 + 24))(v5, v4, &v6);

}

void sub_233CBF484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBF49C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id *v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  id v24;
  const char *v25;
  __int128 v26;
  uint64_t v27;

  v7 = (id *)(a1 + 8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));

  if (WeakRetained)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v11 = v10;
    v12 = objc_alloc(MEMORY[0x24BDD17C8]);
    v14 = (void *)objc_msgSend_initWithBytes_length_encoding_(v12, v13, v9, v11, 4);
    if (v14)
    {
      if (*(_DWORD *)a3)
      {
        v26 = *(_OWORD *)a3;
        v27 = *(_QWORD *)(a3 + 16);
        sub_2340017F0((uint64_t)MTRError, &v26);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = 0;
      }
      v16 = (void *)MEMORY[0x24BDD16E0];
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      objc_msgSend_numberWithUnsignedChar_(v16, v18, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)MEMORY[0x24BDD16E0];
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
      objc_msgSend_numberWithUnsignedLongLong_(v20, v22, v21);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_loadWeakRetained(v7);
      objc_msgSend_handleBDXTransferSessionEndForFileDesignator_fabricIndex_nodeID_error_(v24, v25, (uint64_t)v14, v19, v23, v15);

      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
      *(_DWORD *)(a4 + 16) = 560;

    }
    else
    {
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
      *(_DWORD *)(a4 + 16) = 547;
    }

  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDiagnosticLogsDownloader.mm";
    *(_DWORD *)(a4 + 16) = 543;
  }
}

void sub_233CBF64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBF684(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id *v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  void *v25;
  id v26;
  const char *v27;
  _QWORD v28[5];

  v7 = (id *)(a1 + 8);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));

  if (WeakRetained)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v11 = v10;
    v12 = objc_alloc(MEMORY[0x24BDD17C8]);
    v14 = (void *)objc_msgSend_initWithBytes_length_encoding_(v12, v13, v9, v11, 4);
    if (v14)
    {
      v15 = (void *)MEMORY[0x24BDD16E0];
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      objc_msgSend_numberWithUnsignedChar_(v15, v17, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = (void *)MEMORY[0x24BDD16E0];
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
      objc_msgSend_numberWithUnsignedLongLong_(v19, v21, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v23, *a3, a3[1]);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
      {
        v28[0] = MEMORY[0x24BDAC760];
        v28[1] = 3221225472;
        v28[2] = sub_233CBF8B8;
        v28[3] = &unk_2504F0288;
        v28[4] = a2;
        v25 = (void *)MEMORY[0x23493EEA8](v28);
        v26 = objc_loadWeakRetained(v7);
        objc_msgSend_handleBDXTransferSessionDataForFileDesignator_fabricIndex_nodeID_data_completion_(v26, v27, (uint64_t)v14, v18, v22, v24, v25);

        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRDiagnosticLogsDownloader.mm";
        *(_DWORD *)(a4 + 16) = 593;

      }
      else
      {
        *(_DWORD *)a4 = 3;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRDiagnosticLogsDownloader.mm";
        *(_DWORD *)(a4 + 16) = 575;
      }

    }
    else
    {
      *(_DWORD *)a4 = 3;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
      *(_DWORD *)(a4 + 16) = 569;
    }

  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRDiagnosticLogsDownloader.mm";
    *(_DWORD *)(a4 + 16) = 565;
  }
}

void sub_233CBF87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233CBF8B8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = a2;
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 578);
  if (v3)
  {
    v8 = 0uLL;
    v9 = 0;
    sub_234002650(v3, (uint64_t)&v8);
    v4 = *(_QWORD *)(a1 + 32);
    v6 = v8;
    v7 = v9;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v4 + 24))(v5, v4, &v6);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(&v8);
  }

}

void sub_233CBF958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CBF974(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void (**v10)(_QWORD, _QWORD);
  __int128 v11;
  int v12;

  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRDiagnosticLogsDownloader.mm", 610);
  v3 = a2;
  if (v3)
  {
    LODWORD(v11) = 50;
    *((_QWORD *)&v11 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRDiagnosticLogsDownloader.mm";
    v12 = 619;
    sub_2340017F0((uint64_t)MTRError, &v11);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_abortHandler(v3, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      objc_msgSend_abortHandler(v3, v8, v9);
      v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, void *))v10)[2](v10, v4);

    }
    else
    {
      objc_msgSend_failure_(v3, v8, (uint64_t)v4);
    }

  }
}

void sub_233CBFA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_233CBFA68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7[8];
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = sub_2341CD3C0(*a3);
  v7[0] = 1;
  v8 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  (*(void (**)(uint64_t, uint64_t, char *, _QWORD, _QWORD))(v5 + 16))(v5, a2, v7, 0, 0);
  if (v7[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  sub_233CBFB24((int *)a1);
}

void sub_233CBFAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  _Unwind_Resume(exception_object);
}

void sub_233CBFB24(int *a1)
{
  int v1;
  void *v2;

  if (!*a1)
    sub_234256344();
  v1 = *a1 - 1;
  *a1 = v1;
  if (!v1)
  {
    v2 = (void *)sub_233CBFCA0((uint64_t)a1);
    j__free(v2);
  }
}

void sub_233CBFB58(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;

  if (*(_BYTE *)(a2 + 42))
  {
    v4 = (void *)MEMORY[0x24BDD16E0];
    LOWORD(v5) = *(_WORD *)sub_233CBFC80((_BYTE *)(a2 + 42));
    objc_msgSend_numberWithDouble_(v4, v6, v7, (double)v5 / 1000.0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v13[0] = 0;
  v11 = *(_OWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 32);
  sub_2340017F0((uint64_t)MTRError, &v11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, _BYTE *, void *, void *))(v9 + 16))(v9, 0, v13, v10, v8);

  if (v13[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  sub_233CBFB24((int *)a1);

}

void sub_233CBFC44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_233CBFC80(_BYTE *a1)
{
  if (!*a1)
    sub_234256400();
  return a1 + 2;
}

uint64_t sub_233CBFCA0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);
  void (*v6)(uint64_t);

  v2 = a1 + 16;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = 0;
    v3(a1 + 16);
  }
  v4 = *(void (**)(uint64_t))(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = 0;
    v4(a1 + 56);
    v5 = *(void (**)(uint64_t))(a1 + 72);
    if (v5)
    {
      *(_QWORD *)(a1 + 72) = 0;
      v5(a1 + 56);
    }
  }
  v6 = *(void (**)(uint64_t))(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = 0;
    v6(v2);
  }

  return a1;
}

uint64_t sub_233CBFD34(uint64_t a1)
{
  uint64_t result;

  result = 32;
  if ((int)a1 <= 50)
  {
    switch((int)a1)
    {
      case 24:
        return result;
      case 25:
        goto LABEL_9;
      case 26:
      case 28:
      case 29:
      case 30:
        goto LABEL_11;
      case 27:
        return 35;
      case 31:
        return 39;
      default:
        if ((_DWORD)a1 == 48)
          return result;
        if ((_DWORD)a1 == 49)
LABEL_9:
          result = 33;
        else
LABEL_11:
          result = a1;
        break;
    }
  }
  else
  {
    switch((int)a1)
    {
      case 192:
      case 193:
      case 194:
      case 231:
        goto LABEL_9;
      case 195:
      case 199:
      case 210:
      case 228:
      case 232:
      case 233:
      case 235:
      case 236:
      case 237:
      case 239:
        return 35;
      case 196:
      case 200:
      case 208:
      case 209:
      case 227:
      case 229:
      case 240:
        return 39;
      case 197:
      case 230:
      case 238:
        return result;
      case 198:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 234:
        goto LABEL_11;
      case 216:
        result = 41;
        break;
      case 217:
      case 218:
      case 219:
      case 220:
        result = 47;
        break;
      default:
        if ((_DWORD)a1 != 51)
          goto LABEL_11;
        break;
    }
  }
  return result;
}

void sub_233CBFEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CBFF44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC00E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC0184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC0380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC042C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC05E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC0680(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC0860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC090C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC0A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC0AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC0B70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC0D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC0DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC1004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC10B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC12FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC13AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC151C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC15E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC1684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC1828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC18C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC1A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC1B18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC1C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC1D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC1E60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC1EF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC208C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC22A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC2408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC25DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC2830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC29A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC2A38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC2C70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC2EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC2FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC30B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC31A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC32C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC33B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC34C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC35B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC36D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC37C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC38D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC3AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC3C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC3D50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CC3EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC402C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC4118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC42F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC43FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC44E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CC46C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC480C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC48F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC4A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC4B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC4BB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC4CA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC4D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC4DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC4EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC4F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC4FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC50D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC515C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC52EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC5398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC5558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC560C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC5984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC5A74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC5EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC5F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC6354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC6644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC66D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC67E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC692C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC69B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6A44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC6B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC6CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6D7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC6E98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC6F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC70F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7250(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC72E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC744C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC74E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC770C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC78E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC7970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC7B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7CB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC7E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC7F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC7FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC83F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC84D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC86C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC87A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC8F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC8FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC916C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC9214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC92E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CC9414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC94DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC957C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC9720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC97BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC9A20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC9B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CC9D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC9DD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CC9F14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CC9FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCA140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA2A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCA344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA4E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCA584(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCA770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA838(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCA8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCA928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCAA60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCAAFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCAC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCACE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCADDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCAE84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCAF20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB07C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCB10C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCB344(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCB530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB6CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCB768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCB8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCB954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCBA48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCBAF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCBB8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCBCE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCBD78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCBE6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCBF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCBFB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCC19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCC3D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC588(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCC628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC7A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCC830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCC9CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCCA68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCCB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCCC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCCD00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCCD88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCCE68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCCEF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCCFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCD3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCD51C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD5E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCD7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCD944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCD9D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCDAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCDB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCDC0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCDD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCDE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCDF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE30C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE5CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCE8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCE970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCEAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCEB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCEDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCEEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF0CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCF15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCF3FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCF644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCF81C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCF95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCF9EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCFB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCFB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCFC94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCFD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CCFE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CCFEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD00D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD0194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD04D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD06F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD09C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD0AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD0D58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD0F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD102C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD11D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD12C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD136C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD1550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD15F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD17EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD1898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD1A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD1AB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD1BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD1C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD1D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD1E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD1EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD1F80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD2060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD20E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD21C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD2250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD23AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD244C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD26A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD275C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD2924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD2A6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD2B60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CD2D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD2E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD2EC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD31F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD32C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD34EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD357C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD36A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD37C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD388C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD39F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD3A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3AF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD3C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD3E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD3EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD40C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD4160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD4330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD43D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD4548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD45D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD49D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD4AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD4DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD4F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD5018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD52A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD534C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD550C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD55A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD56C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD57DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD5878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD5ADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD5CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5DAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD5EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD5FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD61F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD629C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD6488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD6724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD67D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD69BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD6B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD6BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD6F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD6FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD70D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD74F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD759C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD79C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7BB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD7EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD7F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD81B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD8500(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD87A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD8864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD8AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD8D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD8F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD8FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD910C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD919C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CD93D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD95B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD970C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD97B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9864(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD99BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9A68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CD9FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDA168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDA238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDA3C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDA4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDA5B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CDA830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDA8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDAAD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDAB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDACC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDAD70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDAEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDAF84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDB10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDB1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDB330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDB3CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDB4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDB5B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDB668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDB7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDB87C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDB9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDBA4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDBB8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDBC1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDBE38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDBEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDC138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDC3E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDC4FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDC83C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDC8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDCA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDCABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDCBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDCC8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDCE2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDCECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDD04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDD1DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDD284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDD670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDD840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDD8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDDA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDDB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDDC68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDDED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDDF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE11C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDE1B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDE3E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDE62C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDE818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDE98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDEA28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDEB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDEB78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDEC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDED30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDEDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDEFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDF090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDF310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDF504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF5E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDF700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDF8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDF9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDFA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDFB88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDFC18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDFD14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CDFE5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CDFEFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE006C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE01B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE0298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE0494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE05DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE069C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE0A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE0B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE0D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE0DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE0E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE0FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE11BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1314(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE137C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE1404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE14B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE15DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE1720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE18D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE1AE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1BC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE1C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1D58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE1DE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE1FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_233CE20E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE2190(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CE2200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE2274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CE24AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_233CE2538(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  LODWORD(v3) = 3;
  *((_QWORD *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v4 = 309;
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

}

void sub_233CE25A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE25B4(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  int v31;
  NSObject *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[4];
  id v41;
  int v42;
  __int128 v43;
  int v44;
  _BYTE location[20];
  int v46;
  _QWORD v47[4];
  id v48;
  id v49;
  _QWORD v50[4];
  id v51;
  id v52;
  _QWORD v53[4];
  id v54;
  id v55;
  _QWORD v56[4];
  id v57;
  id v58;
  _QWORD v59[4];
  id v60;
  id v61;
  _QWORD *v62;
  _QWORD v63[4];
  id v64;
  _BYTE v65[40];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD block[4];
  id v71;
  id v72;
  __int128 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  if (v7)
  {
    v8 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233CE2DB4;
    block[3] = &unk_2504F03B0;
    v72 = *(id *)(a1 + 64);
    v71 = v7;
    dispatch_async(v8, block);

  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = -1;
    v39 = v9;
    *(_DWORD *)(v9 + 8) = -1;
    v10 = operator new();
    *(_QWORD *)v10 = -1;
    *(_WORD *)(v10 + 8) = -1;
    *(_BYTE *)(v10 + 10) = 0;
    v37 = v10;
    *(_BYTE *)(v10 + 10) = objc_msgSend_shouldReportEventsUrgently(*(void **)(a1 + 40), v11, v12);
    v13 = (uint64_t *)sub_233C25EA4(a3);
    sub_233CF06BC((uint64_t)v65, v13);
    objc_msgSend_toReadPrepareParams_(*(void **)(a1 + 40), v14, (uint64_t)v65);
    v68 = v39;
    v69 = 1;
    v66 = v10;
    v67 = 1;
    v15 = *(void **)(a1 + 48);
    if (v15)
    {
      objc_initWeak((id *)location, v15);
      v63[0] = MEMORY[0x24BDAC760];
      v63[1] = 3221225472;
      v63[2] = sub_233CE2DC4;
      v63[3] = &unk_2504F03D8;
      objc_copyWeak(&v64, (id *)location);
      v38 = (void *)MEMORY[0x23493EEA8](v63);
      objc_destroyWeak(&v64);
      objc_destroyWeak((id *)location);
    }
    else
    {
      v38 = 0;
    }
    v16 = MEMORY[0x24BDAC760];
    v59[0] = MEMORY[0x24BDAC760];
    v59[1] = 3221225472;
    v59[2] = sub_233CE2E24;
    v59[3] = &unk_2504F0400;
    v60 = *(id *)(a1 + 32);
    v61 = *(id *)(a1 + 72);
    v17 = (void *)MEMORY[0x23493EEA8](v59);
    v56[0] = v16;
    v56[1] = 3221225472;
    v56[2] = sub_233CE2ED4;
    v56[3] = &unk_2504F0400;
    v57 = *(id *)(a1 + 32);
    v58 = *(id *)(a1 + 80);
    v18 = (void *)MEMORY[0x23493EEA8](v56);
    v53[0] = v16;
    v53[1] = 3221225472;
    v53[2] = sub_233CE2F84;
    v53[3] = &unk_2504F0428;
    v54 = *(id *)(a1 + 32);
    v55 = *(id *)(a1 + 64);
    v19 = (void *)MEMORY[0x23493EEA8](v53);
    v50[0] = v16;
    v50[1] = 3221225472;
    v50[2] = sub_233CE3028;
    v50[3] = &unk_2504F0478;
    v51 = *(id *)(a1 + 32);
    v52 = *(id *)(a1 + 88);
    v20 = (void *)MEMORY[0x23493EEA8](v50);
    v47[0] = v16;
    v47[1] = 3221225472;
    v47[2] = sub_233CE30FC;
    v47[3] = &unk_2504F04A0;
    v48 = *(id *)(a1 + 32);
    v49 = *(id *)(a1 + 96);
    v21 = (void *)MEMORY[0x23493EEA8](v47);
    v22 = (_QWORD *)operator new();
    sub_233CF212C((uint64_t)v22, (uint64_t)v17, v18, v19, v20, v21, v38, 0, 0, 0);
    *v22 = &off_2504F08A0;
    v62 = v22;

    v23 = (uint64_t)v62;
    if (*(_QWORD *)(a1 + 48))
    {
      v24 = operator new();
      location[0] = 0;
      sub_233CF284C(v24, v23, location);
      v25 = v24 + 176;
    }
    else
    {
      v24 = 0;
      v25 = (uint64_t)(v62 + 11);
    }
    v26 = sub_2341FF930();
    v27 = operator new();
    sub_23420D650(v27, v26, a2, v25, 1);
    if ((objc_msgSend_shouldResubscribeAutomatically(*(void **)(a1 + 40), v28, v29) & 1) != 0)
    {
      sub_234210A84(v27, (uint64_t)v65, location);
      v37 = 0;
      v39 = 0;
    }
    else
    {
      sub_23420DF14(v27, (uint64_t)v65, (uint64_t)location);
    }
    v31 = *(_DWORD *)location;
    v73 = *(_OWORD *)&location[4];
    v74 = v46;
    if (*(_DWORD *)location)
    {
      v32 = *(NSObject **)(a1 + 32);
      v40[0] = v16;
      v40[1] = 3221225472;
      v40[2] = sub_233CE317C;
      v40[3] = &unk_2504F04C8;
      v41 = *(id *)(a1 + 64);
      v42 = v31;
      v43 = v73;
      v44 = v74;
      dispatch_async(v32, v40);

      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    else
    {
      v33 = *(void **)(a1 + 48);
      if (v33)
      {
        objc_msgSend_setCppClusterStateCache_(v33, v30, v24);
        v35 = v62[20];
        v62[20] = v24;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v24 = 0;
        objc_msgSend_setBaseDevice_(*(void **)(a1 + 48), v34, *(_QWORD *)(a1 + 56));
      }
      v36 = v62[19];
      v62[19] = v27;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v62 = 0;
    }
    sub_233CE31F0((uint64_t *)&v62);

    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    sub_2341CD754(v65);
    if (v37)
      MEMORY[0x23493E704](v37, 0x1000C40FD6F1FF4);
    if (v39)
      MEMORY[0x23493E704](v39, 0x1000C403E1C8BA9);
  }

}

void sub_233CE2BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t v63;

  (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  sub_233CE31F0(&a56);

  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  sub_2341CD754(&a62);
  if (a12)
    MEMORY[0x23493E704](a12, 0x1000C40FD6F1FF4);
  if (a14)
    MEMORY[0x23493E704](a14, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

uint64_t sub_233CE2DB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_233CE2DC4(uint64_t a1)
{
  const char *v1;
  const char *v2;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    objc_msgSend_setCppClusterStateCache_(WeakRetained, v1, 0);
    objc_msgSend_setBaseDevice_(WeakRetained, v2, 0);
  }

}

void sub_233CE2E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CE2E24(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CE2EB8;
  v7[3] = &unk_2504F03B0;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_233CE2EB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_233CE2ED4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CE2F68;
  v7[3] = &unk_2504F03B0;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_233CE2F68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_233CE2F84(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CE3018;
  v7[3] = &unk_2504F03B0;
  v4 = *(NSObject **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v8 = v3;
  v9 = v5;
  v6 = v3;
  dispatch_async(v4, v7);

}

uint64_t sub_233CE3018(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_233CE3028(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_233CE30E0;
  block[3] = &unk_2504F0450;
  v7 = *(NSObject **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(v7, block);

}

uint64_t sub_233CE30E0(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

void sub_233CE30FC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[4];
  id v3;

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_233CE3168;
  block[3] = &unk_2504F0208;
  v1 = *(NSObject **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);

}

uint64_t sub_233CE3168(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_233CE317C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

}

void sub_233CE31E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_233CE31F0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_233CF2738(v2);
    MEMORY[0x23493E704](v3, 0x10A1C40B03ED83DLL);
  }
  return a1;
}

id sub_233CE3234(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  __CFString *v6;
  const char *v7;
  NSObject *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  double v19;
  const char *v20;
  uint64_t v21;
  NSObject *v22;
  char *v23;
  NSObject *v24;
  char *v25;
  const char *v26;
  double v27;
  NSObject *v28;
  char *v29;
  void *v30;
  NSObject *v31;
  char *v32;
  id v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  const char *v41;
  void *v42;
  const char *v43;
  NSObject *v44;
  NSObject *v45;
  char *v46;
  void *v47;
  void *v48;
  void *v49;
  __int128 v50;
  id v51;
  const char *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  char *v57;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  NSObject *v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint8_t v102[4];
  char *v103;
  __int128 v104;
  uint8_t buf[16];
  uint64_t v106;
  uint8_t v107[16];
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = sub_23410462C(a1);
  v5 = v4;
  v6 = CFSTR("Structure");
  switch(v4)
  {
    case 4:
      *(_QWORD *)&v104 = 0;
      memset(v107, 0, sizeof(v107));
      v108 = 0;
      sub_23410499C(a1, &v104, (uint64_t)v107);
      if (*(_DWORD *)v107)
      {
        sub_234117B80(0, "NotSpecified");
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v96 = *(_OWORD *)v107;
          v97 = v108;
          v9 = sub_2341083CC((const char **)&v96, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v9;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Error(%s): TLV unsigned integer decoding failed", buf, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v94 = *(_OWORD *)v107;
          v95 = v108;
          sub_2341083CC((const char **)&v94, 1);
          sub_2341147D0(0, 1);
        }
        goto LABEL_45;
      }
      objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v7, v104);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      sub_233CE41BC(CFSTR("UnsignedInteger"), v47, v3);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      goto LABEL_46;
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
      goto LABEL_13;
    case 8:
      LOBYTE(v104) = 0;
      memset(v107, 0, sizeof(v107));
      v108 = 0;
      sub_2341046D0(a1, (char *)&v104, (uint64_t)v107);
      if (!*(_DWORD *)v107)
      {
        objc_msgSend_numberWithBool_(MEMORY[0x24BDD16E0], v14, v104);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_233CE41BC(CFSTR("Boolean"), v48, v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_46;
      }
      sub_234117B80(0, "NotSpecified");
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v92 = *(_OWORD *)v107;
        v93 = v108;
        v16 = sub_2341083CC((const char **)&v92, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Error(%s): TLV BOOLean decoding failed", buf, 0xCu);
      }

      if (sub_234114844(1u))
      {
        v90 = *(_OWORD *)v107;
        v91 = v108;
        sub_2341083CC((const char **)&v90, 1);
        sub_2341147D0(0, 1);
      }
      goto LABEL_45;
    case 10:
      *(_DWORD *)v102 = 0;
      memset(v107, 0, sizeof(v107));
      v108 = 0;
      sub_234104ABC(a1, v102, (uint64_t)v107);
      if (!*(_DWORD *)v107)
      {
        LODWORD(v19) = *(_DWORD *)v102;
        objc_msgSend_numberWithFloat_(MEMORY[0x24BDD16E0], v17, v18, v19);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        sub_233CE41BC(CFSTR("Float"), v49, v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_46;
      }
      *(_QWORD *)&v104 = 0;
      sub_234104B00(a1, (double *)&v104, (uint64_t)buf);
      *(_OWORD *)v107 = *(_OWORD *)buf;
      v108 = v106;
      if (!*(_DWORD *)buf)
      {
        objc_msgSend_numberWithDouble_(MEMORY[0x24BDD16E0], v20, v21, *(double *)&v104);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        sub_233CE41BC(CFSTR("Double"), v64, v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_46;
      }
      sub_234117B80(0, "NotSpecified");
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v88 = *(_OWORD *)v107;
        v89 = v108;
        v23 = sub_2341083CC((const char **)&v88, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v23;
        _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "Error(%s): TLV floating point decoding failed", buf, 0xCu);
      }

      if (sub_234114844(1u))
      {
        v86 = *(_OWORD *)v107;
        v87 = v108;
        sub_2341083CC((const char **)&v86, 1);
        sub_2341147D0(0, 1);
      }
      goto LABEL_45;
    case 12:
      v104 = 0uLL;
      memset(buf, 0, sizeof(buf));
      v106 = 0;
      sub_234104C8C(a1, &v104, buf);
      if (*(_DWORD *)buf)
      {
        sub_234117B80(0, "NotSpecified");
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v84 = *(_OWORD *)buf;
          v85 = v106;
          v25 = sub_2341083CC((const char **)&v84, 1);
          *(_DWORD *)v107 = 136315138;
          *(_QWORD *)&v107[4] = v25;
          _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "Error(%s): TLV UTF8String decoding failed", v107, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v82 = *(_OWORD *)buf;
          v83 = v106;
          sub_2341083CC((const char **)&v82, 1);
          sub_2341147D0(0, 1);
        }
        goto LABEL_45;
      }
      v50 = v104;
      v51 = objc_alloc(MEMORY[0x24BDD17C8]);
      v53 = (void *)objc_msgSend_initWithBytes_length_encoding_(v51, v52, v50, *((_QWORD *)&v50 + 1), 4);
      if (v53)
      {
        sub_233CE41BC(CFSTR("UTF8String"), v53, v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        sub_234117B80(0, "NotSpecified");
        v65 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)v107 = *(_OWORD *)buf;
          v108 = v106;
          *(_DWORD *)v102 = 136315138;
          v103 = sub_2341083CC((const char **)v107, 1);
          _os_log_impl(&dword_233BF3000, v65, OS_LOG_TYPE_ERROR, "Error(%s): TLV UTF8String value is not actually UTF-8", v102, 0xCu);
        }

        if (sub_234114844(1u))
        {
          *(_OWORD *)v107 = *(_OWORD *)buf;
          v108 = v106;
          sub_2341083CC((const char **)v107, 1);
          sub_2341147D0(0, 1);
        }
        v30 = 0;
      }

      goto LABEL_46;
    case 16:
      memset(buf, 0, sizeof(buf));
      memset(v107, 0, sizeof(v107));
      v108 = 0;
      v27 = sub_234104B68(a1, buf, v107);
      if (!*(_DWORD *)v107)
      {
        objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v26, *(uint64_t *)buf, *(_QWORD *)&buf[8], v27);
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        sub_233CE41BC(CFSTR("OctetString"), v54, v3);
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_46;
      }
      sub_234117B80(0, "NotSpecified");
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v80 = *(_OWORD *)v107;
        v81 = v108;
        v29 = sub_2341083CC((const char **)&v80, 1);
        LODWORD(v104) = 136315138;
        *(_QWORD *)((char *)&v104 + 4) = v29;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Error(%s): TLV ByteString decoding failed", (uint8_t *)&v104, 0xCu);
      }

      if (sub_234114844(1u))
      {
        v78 = *(_OWORD *)v107;
        v79 = v108;
        sub_2341083CC((const char **)&v78, 1);
        sub_2341147D0(0, 1);
      }
      goto LABEL_45;
    case 20:
      sub_233CE41BC(CFSTR("Null"), 0, v3);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_46;
    case 21:
      goto LABEL_40;
    case 22:
      v6 = CFSTR("Array");
LABEL_40:
      LODWORD(v104) = 0;
      memset(v107, 0, sizeof(v107));
      v108 = 0;
      sub_23410570C(a1, &v104, (uint64_t)v107);
      if (!*(_DWORD *)v107)
      {
        v34 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
        while (1)
        {
          sub_2341058CC(a1, buf);
          *(_OWORD *)v107 = *(_OWORD *)buf;
          v108 = v106;
          if (*(_DWORD *)buf)
          {
            if (*(_DWORD *)buf == 33)
            {
              sub_23410577C(a1, v104, (uint64_t)buf);
              *(_OWORD *)v107 = *(_OWORD *)buf;
              v108 = v106;
              if (*(_DWORD *)buf)
              {
                sub_234117B80(0, "NotSpecified");
                v45 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                {
                  v68 = *(_OWORD *)v107;
                  v69 = v108;
                  v46 = sub_2341083CC((const char **)&v68, 1);
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v46;
                  _os_log_impl(&dword_233BF3000, v45, OS_LOG_TYPE_ERROR, "Error(%s): TLV container exiting failed", buf, 0xCu);
                }

                if (sub_234114844(1u))
                {
                  v66 = *(_OWORD *)v107;
                  v67 = v108;
                  sub_2341083CC((const char **)&v66, 1);
LABEL_78:
                  sub_2341147D0(0, 1);
                  goto LABEL_83;
                }
                goto LABEL_83;
              }
              sub_233CE41BC(v6, v34, v3);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              sub_234117B80(0, "NotSpecified");
              v56 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              {
                v72 = *(_OWORD *)v107;
                v73 = v108;
                v57 = sub_2341083CC((const char **)&v72, 1);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v57;
                _os_log_impl(&dword_233BF3000, v56, OS_LOG_TYPE_ERROR, "Error(%s): TLV container decoding failed", buf, 0xCu);
              }

              if (sub_234114844(1u))
              {
                v70 = *(_OWORD *)v107;
                v71 = v108;
                sub_2341083CC((const char **)&v70, 1);
                goto LABEL_78;
              }
LABEL_83:
              v30 = 0;
            }

            goto LABEL_46;
          }
          v35 = *(_QWORD *)(a1 + 16);
          sub_233CE3234(a1, 0);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v38)
          {
            sub_234117B80(0, "NotSpecified");
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              v61 = objc_msgSend_UTF8String(v6, v59, v60);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v61;
              _os_log_impl(&dword_233BF3000, v58, OS_LOG_TYPE_ERROR, "Error when decoding TLV container of type %s", buf, 0xCu);
            }

            if (sub_234114844(1u))
            {
              objc_msgSend_UTF8String(v6, v62, v63);
              sub_2341147D0(0, 1);
            }
            goto LABEL_83;
          }
          objc_msgSend_dictionary(MEMORY[0x24BDBCED8], v36, v37);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKey_(v39, v40, (uint64_t)v38, CFSTR("data"));
          if (v5 != 21)
            goto LABEL_55;
          if (v35 < 0x100)
            goto LABEL_54;
          if (HIDWORD(v35))
            break;
          sub_234117B80(0, "NotSpecified");
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "Skipping unknown tag type when decoding TLV structure.", buf, 2u);
          }

          if (sub_234114844(1u))
            sub_2341147D0(0, 1);
LABEL_56:

        }
        v35 ^= 0xFFFFFFFF00000000;
LABEL_54:
        objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v41, v35);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKey_(v39, v43, (uint64_t)v42, CFSTR("contextTag"));

LABEL_55:
        objc_msgSend_addObject_(v34, v41, (uint64_t)v39);
        goto LABEL_56;
      }
      sub_234117B80(0, "NotSpecified");
      v31 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v76 = *(_OWORD *)v107;
        v77 = v108;
        v32 = sub_2341083CC((const char **)&v76, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v32;
        _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "Error(%s): TLV container entering failed", buf, 0xCu);
      }

      if (sub_234114844(1u))
      {
        v74 = *(_OWORD *)v107;
        v75 = v108;
        sub_2341083CC((const char **)&v74, 1);
        sub_2341147D0(0, 1);
      }
LABEL_45:
      v30 = 0;
LABEL_46:

      return v30;
    default:
      if (v4)
      {
LABEL_13:
        sub_234117B80(0, "NotSpecified");
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v107 = 67109120;
          *(_DWORD *)&v107[4] = sub_23410462C(a1);
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Error: Unsupported TLV type for conversion: %u", v107, 8u);
        }

        if (sub_234114844(1u))
        {
          sub_23410462C(a1);
          sub_2341147D0(0, 1);
        }
      }
      else
      {
        *(_QWORD *)&v104 = 0;
        memset(v107, 0, sizeof(v107));
        v108 = 0;
        sub_2341047B0(a1, &v104, (uint64_t)v107);
        if (!*(_DWORD *)v107)
        {
          objc_msgSend_numberWithLongLong_(MEMORY[0x24BDD16E0], v10, v104);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          sub_233CE41BC(CFSTR("SignedInteger"), v55, v3);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_46;
        }
        sub_234117B80(0, "NotSpecified");
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v100 = *(_OWORD *)v107;
          v101 = v108;
          v12 = sub_2341083CC((const char **)&v100, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v12;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Error(%s): TLV signed integer decoding failed", buf, 0xCu);
        }

        if (sub_234114844(1u))
        {
          v98 = *(_OWORD *)v107;
          v99 = v108;
          sub_2341083CC((const char **)&v98, 1);
          sub_2341147D0(0, 1);
        }
      }
      goto LABEL_45;
  }
}

void sub_233CE401C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_233CE41BC(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  const char *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  const __CFString *v14;
  id v15;
  _QWORD v16[2];
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[3];
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v9 = v7;
  if (v6 && v7)
  {
    v20[0] = CFSTR("type");
    v20[1] = CFSTR("value");
    v21[0] = v5;
    v21[1] = v6;
    v20[2] = CFSTR("dataVersion");
    v21[2] = v7;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v8, (uint64_t)v21, v20, 3);
  }
  else
  {
    if (v6)
    {
      v18[0] = CFSTR("type");
      v18[1] = CFSTR("value");
      v19[0] = v5;
      v19[1] = v6;
      v10 = v18;
      v11 = v19;
    }
    else
    {
      if (!v7)
      {
        v14 = CFSTR("type");
        v15 = v5;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v8, (uint64_t)&v15, &v14, 1);
        goto LABEL_9;
      }
      v16[0] = CFSTR("type");
      v16[1] = CFSTR("dataVersion");
      v17[0] = v5;
      v17[1] = v7;
      v10 = v16;
      v11 = v17;
    }
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v8, (uint64_t)v11, v10, 2);
  }
LABEL_9:
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_233CE42F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_233CE4318(void *a1, _QWORD *a2)
{
  id v3;
  const char *v4;
  void *v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11[44];
  unsigned int v12;
  _BYTE v13[1200];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  sub_234106C48((uint64_t)v11);
  sub_234106C70((uint64_t)v11, (uint64_t)v13, 0x4B0uLL);
  v9 = 0uLL;
  v10 = 0;
  sub_233CE4434(v3, v11, 0x100uLL, (uint64_t)&v9);
  if ((_DWORD)v9)
  {
    if (a2)
    {
      v7 = v9;
      v8 = v10;
      sub_2340017F0((uint64_t)MTRError, &v7);
      v5 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v4, (uint64_t)v13, v12);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_233CE4418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE4434(void *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  id v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  NSObject *v35;
  id v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  id v42;
  const char *v43;
  NSObject *v44;
  id v45;
  const char *v46;
  id v47;
  const char *v48;
  uint64_t v49;
  char *v50;
  NSObject *v51;
  id v52;
  const char *v53;
  id v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t j;
  void *v64;
  const char *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  BOOL v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  const char *v75;
  NSObject *v76;
  id v77;
  const char *v78;
  uint64_t i;
  void *v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  _BOOL4 v84;
  const char *v85;
  NSObject *v86;
  id v87;
  NSObject *v88;
  NSObject *v89;
  id v90;
  NSObject *v91;
  id v92;
  NSObject *v93;
  void *v94;
  id v95;
  NSObject *v96;
  int v97;
  NSObject *v98;
  void *v99;
  id v100;
  NSObject *v101;
  void *v102;
  id v103;
  int v104;
  NSObject *v105;
  id obj;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int v121;
  char *v122[2];
  _BYTE v123[128];
  uint8_t v124[128];
  uint8_t buf[4];
  id v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    sub_234117B80(0, "NotSpecified");
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v18 = v126;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Error: Unsupported object to encode: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    *(_DWORD *)(a4 + 16) = 583;
    goto LABEL_18;
  }
  objc_msgSend_objectForKeyedSubscript_(v7, v8, (uint64_t)CFSTR("type"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v7, v10, (uint64_t)CFSTR("value"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    sub_234117B80(0, "NotSpecified");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "Error: Object to encode is corrupt", buf, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 589;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v12, (uint64_t)CFSTR("SignedInteger")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v16 = objc_msgSend_longLongValue(v11, v14, v15);
      sub_23410731C(a2, a3, v16, a4);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v30 = v126;
      _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt signed integer type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 595;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v13, (uint64_t)CFSTR("UnsignedInteger")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v24 = objc_msgSend_unsignedLongLongValue(v11, v22, v23);
      sub_2341071EC(a2, a3, v24, a4);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v36 = v126;
      _os_log_impl(&dword_233BF3000, v35, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt unsigned integer type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 602;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v21, (uint64_t)CFSTR("Boolean")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v28 = objc_msgSend_BOOLValue(v11, v26, v27);
      sub_234106F04(a2, a3, v28, a4);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v42 = v126;
      _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt BOOLean type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 609;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v25, (uint64_t)CFSTR("Float")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_floatValue(v11, v32, v33);
      sub_2341073DC(a2, a3, a4, v34);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v45 = v126;
      _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt float type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 616;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v31, (uint64_t)CFSTR("Double")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_doubleValue(v11, v38, v39);
      sub_2341073EC(a2, a3, a4, v40);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v52 = v126;
      _os_log_impl(&dword_233BF3000, v51, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt double type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 623;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v37, (uint64_t)CFSTR("Null")))
  {
    sub_2341079D4(a2, a3, a4);
    goto LABEL_17;
  }
  if (objc_msgSend_isEqualToString_(v9, v43, (uint64_t)CFSTR("UTF8String")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v47 = objc_retainAutorelease(v11);
      v50 = (char *)objc_msgSend_UTF8String(v47, v48, v49);
      sub_23410753C(v50, a2, a3, a4);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v77 = v126;
      _os_log_impl(&dword_233BF3000, v76, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt UTF8 string type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 633;
    goto LABEL_16;
  }
  if (objc_msgSend_isEqualToString_(v9, v46, (uint64_t)CFSTR("OctetString")))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v54 = objc_retainAutorelease(v11);
      v57 = objc_msgSend_bytes(v54, v55, v56);
      v60 = objc_msgSend_length(v54, v58, v59);
      sub_233BF7114(v122, v57, v60);
      sub_2341073FC(a2, a3, v122[0], (unint64_t)v122[1], a4);
      goto LABEL_17;
    }
    sub_234117B80(0, "NotSpecified");
    v86 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v87 = v126;
      _os_log_impl(&dword_233BF3000, v86, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt octet string type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 640;
    goto LABEL_16;
  }
  if (!objc_msgSend_isEqualToString_(v9, v53, (uint64_t)CFSTR("Structure")))
  {
    if (objc_msgSend_isEqualToString_(v9, v61, (uint64_t)CFSTR("Array")))
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v121 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)a4 = 0;
        sub_234107E40(a2, a3, 22, &v121, a4);
        if (*(_DWORD *)a4)
          goto LABEL_17;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v108 = v11;
        v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v78, (uint64_t)&v113, v123, 16);
        if (v112)
        {
          v110 = *(_QWORD *)v114;
          do
          {
            for (i = 0; i != v112; ++i)
            {
              if (*(_QWORD *)v114 != v110)
                objc_enumerationMutation(v108);
              v80 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * i);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                sub_234117B80(0, "NotSpecified");
                v101 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                {
                  v102 = (void *)objc_opt_class();
                  *(_DWORD *)buf = 138412290;
                  v126 = v102;
                  v103 = v102;
                  _os_log_impl(&dword_233BF3000, v101, OS_LOG_TYPE_ERROR, "Error: Array element to encode has corrupt type: %@", buf, 0xCu);

                }
                if (sub_234114844(1u))
                {
                  objc_opt_class();
                  sub_2341147D0(0, 1);
                }
                v104 = 692;
                goto LABEL_154;
              }
              objc_msgSend_objectForKeyedSubscript_(v80, v81, (uint64_t)CFSTR("data"));
              v82 = objc_claimAutoreleasedReturnValue();
              v83 = (void *)v82;
              if (!v82)
              {
                sub_234117B80(0, "NotSpecified");
                v105 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v126 = v80;
                  _os_log_impl(&dword_233BF3000, v105, OS_LOG_TYPE_ERROR, "Error: Array element to encode has corrupt value: %@", buf, 0xCu);
                }

                if (sub_234114844(1u))
                  sub_2341147D0(0, 1);
                v104 = 697;
LABEL_154:
                *(_DWORD *)a4 = 47;
                *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Fra"
                                      "mework/CHIP/MTRBaseDevice.mm";
                *(_DWORD *)(a4 + 16) = v104;
LABEL_155:

                goto LABEL_17;
              }
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              sub_233CE4434(v82, a2, 256);
              v84 = *(_DWORD *)a4 == 0;

              if (!v84)
                goto LABEL_155;
            }
            v112 = objc_msgSend_countByEnumeratingWithState_objects_count_(v108, v85, (uint64_t)&v113, v123, 16);
          }
          while (v112);
        }

        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_234107FB0(a2, v121, a4);
        if (*(_DWORD *)a4)
          goto LABEL_17;
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRBaseDevice.mm";
        v20 = 702;
      }
      else
      {
        sub_234117B80(0, "NotSpecified");
        v91 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v126 = (id)objc_opt_class();
          v92 = v126;
          _os_log_impl(&dword_233BF3000, v91, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt array type: %@", buf, 0xCu);

        }
        if (sub_234114844(1u))
        {
          objc_opt_class();
          sub_2341147D0(0, 1);
        }
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRBaseDevice.mm";
        v20 = 685;
      }
    }
    else
    {
      sub_234117B80(0, "NotSpecified");
      v88 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v126 = v9;
        _os_log_impl(&dword_233BF3000, v88, OS_LOG_TYPE_ERROR, "Error: Unsupported type to encode: %@", buf, 0xCu);
      }

      if (sub_234114844(1u))
        sub_2341147D0(0, 1);
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRBaseDevice.mm";
      v20 = 705;
    }
LABEL_16:
    *(_DWORD *)(a4 + 16) = v20;
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    sub_234117B80(0, "NotSpecified");
    v89 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v126 = (id)objc_opt_class();
      v90 = v126;
      _os_log_impl(&dword_233BF3000, v89, OS_LOG_TYPE_ERROR, "Error: Object to encode has corrupt structure type: %@", buf, 0xCu);

    }
    if (sub_234114844(1u))
    {
      objc_opt_class();
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 647;
    goto LABEL_16;
  }
  v121 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_234107E40(a2, a3, 21, &v121, a4);
  if (*(_DWORD *)a4)
    goto LABEL_17;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  obj = v11;
  v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v62, (uint64_t)&v117, v124, 16);
  if (!v109)
    goto LABEL_84;
  v107 = *(id *)v118;
  while (2)
  {
    for (j = 0; j != v109; ++j)
    {
      if (*(id *)v118 != v107)
        objc_enumerationMutation(obj);
      v64 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * j);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        sub_234117B80(0, "NotSpecified");
        v93 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
        {
          v94 = (void *)objc_opt_class();
          *(_DWORD *)buf = 138412290;
          v126 = v94;
          v95 = v94;
          _os_log_impl(&dword_233BF3000, v93, OS_LOG_TYPE_ERROR, "Error: Structure element to encode has corrupt type: %@", buf, 0xCu);

        }
        if (sub_234114844(1u))
        {
          objc_opt_class();
          sub_2341147D0(0, 1);
        }
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRBaseDevice.mm";
        *(_DWORD *)(a4 + 16) = 654;
        goto LABEL_143;
      }
      objc_msgSend_objectForKeyedSubscript_(v64, v65, (uint64_t)CFSTR("contextTag"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v64, v67, (uint64_t)CFSTR("data"));
      v68 = objc_claimAutoreleasedReturnValue();
      v111 = (void *)v68;
      if (v66)
        v69 = v68 == 0;
      else
        v69 = 1;
      if (v69)
      {
        sub_234117B80(0, "NotSpecified");
        v96 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v126 = v64;
          _os_log_impl(&dword_233BF3000, v96, OS_LOG_TYPE_ERROR, "Error: Structure element to encode has corrupt value: %@", buf, 0xCu);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        v97 = 660;
LABEL_141:
        *(_DWORD *)a4 = 47;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRBaseDevice.mm";
        *(_DWORD *)(a4 + 16) = v97;
        v72 = v111;
LABEL_142:

LABEL_143:
        goto LABEL_17;
      }
      objc_opt_class();
      v72 = v111;
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        sub_234117B80(0, "NotSpecified");
        v98 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          v99 = (void *)objc_opt_class();
          *(_DWORD *)buf = 138412290;
          v126 = v99;
          v100 = v99;
          _os_log_impl(&dword_233BF3000, v98, OS_LOG_TYPE_ERROR, "Error: Structure element to encode has corrupt tag type: %@", buf, 0xCu);

        }
        if (sub_234114844(1u))
        {
          objc_opt_class();
          sub_2341147D0(0, 1);
        }
        v97 = 664;
        goto LABEL_141;
      }
      v73 = objc_msgSend_unsignedLongLongValue(v66, v70, v71);
      if (v73 <= 0xFF)
        v74 = v73;
      else
        v74 = v73 ^ 0xFFFFFFFF00000000;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_233CE4434(v111, a2, v74);
      if (*(_DWORD *)a4)
        goto LABEL_142;

    }
    v109 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v75, (uint64_t)&v117, v124, 16);
    if (v109)
      continue;
    break;
  }
LABEL_84:

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234107FB0(a2, v121, a4);
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v20 = 680;
    goto LABEL_16;
  }
LABEL_17:

LABEL_18:
}

void sub_233CE56CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_233CE58EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_233CE5A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_233CE5AA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  const char *v9;
  void *v10;
  MTRAttributeReport *v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  char isEqual;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  id v28;

  v5 = a2;
  v8 = a3;
  if (v8)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    if (objc_msgSend_count(v5, v6, v7))
    {
      objc_msgSend_objectAtIndexedSubscript_(v5, v9, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = [MTRAttributeReport alloc];
      v28 = 0;
      v13 = (void *)objc_msgSend_initWithResponseValue_error_(v11, v12, (uint64_t)v10, &v28);
      v16 = v28;
      if (v16)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      }
      else
      {
        objc_msgSend_path(v13, v14, v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        isEqual = objc_msgSend_isEqual_(v18, v19, *(_QWORD *)(a1 + 32));

        v23 = *(_QWORD *)(a1 + 40);
        if ((isEqual & 1) != 0)
        {
          objc_msgSend_value(v13, v21, v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_error(v13, v25, v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v24, v27);

        }
        else
        {
          objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v21, (uint64_t)CFSTR("MTRErrorDomain"), 13, 0);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);
        }

      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 40);
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v9, (uint64_t)CFSTR("MTRErrorDomain"), 13, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v17 + 16))(v17, 0, v10);
    }

  }
}

void sub_233CE5C78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_233CE5F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

uint64_t sub_233CE5FA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_233CE5FB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  size_t v16;
  void *v17;
  id v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  id v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void (***v52)(_QWORD);
  void (***v53)(_QWORD);
  unint64_t v54;
  _QWORD *v55;
  void (***v56)(_QWORD);
  unint64_t v57;
  _QWORD *v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void (***v76)(_QWORD);
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  char v84;
  void *v89;
  id v91;
  void (***v92)(_QWORD);
  char *v93;
  id v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  __int128 v98;
  void *v99;
  _BYTE v100[40];
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  void *v113;
  void *v114;
  id v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  int v121;
  _BYTE v122[128];
  _BYTE v123[128];
  _BYTE v124[24];
  _BYTE *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  void (***v132[3])(_QWORD);
  void (****v133)(_QWORD);
  _BYTE v134[20];
  int v135;
  _BYTE *v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_2504F0A28;
  LODWORD(v8[1].__vftable) = 0;
  v10 = v8 + 1;
  v8[1].__shared_owners_ = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Frame"
                                    "work/CHIP/MTRBaseDevice.mm";
  LODWORD(v8[1].__shared_weak_owners_) = 1028;
  v118 = v8 + 1;
  v119 = v8;
  v11 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v84 = *(_BYTE *)(a1 + 56);
  v91 = v11;
  v115 = v91;
  v116 = v8 + 1;
  v117 = v8;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v113 = 0;
  v114 = 0;
  v15 = *(void **)(a1 + 32);
  if (v15)
  {
    v16 = objc_msgSend_count(v15, v12, v13);
    v17 = sub_234114780(v16, 0xCuLL);
    v114 = v17;
    if (v16 && v17)
    {
      memset(v17, 255, 12 * v16);
    }
    else if (!v17)
    {
      v62 = a7;
      *(_DWORD *)a7 = 11;
      *(_QWORD *)(a7 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRBaseDevice.mm";
      v63 = 1078;
      goto LABEL_70;
    }
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v18 = *(id *)(a1 + 32);
    v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v109, v123, 16);
    if (v21)
    {
      v22 = 0;
      v23 = *(_QWORD *)v110;
      do
      {
        v24 = 0;
        v25 = 12 * v22;
        do
        {
          if (*(_QWORD *)v110 != v23)
            objc_enumerationMutation(v18);
          objc_msgSend_convertToAttributePathParams_(*(void **)(*((_QWORD *)&v109 + 1) + 8 * v24++), v20, (uint64_t)v114 + v25);
          v25 += 12;
        }
        while (v21 != v24);
        v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v20, (uint64_t)&v109, v123, 16);
        v22 += v24;
      }
      while (v21);
    }

  }
  v26 = *(void **)(a1 + 40);
  if (!v26)
    goto LABEL_26;
  v27 = objc_msgSend_count(v26, v12, v13);
  if (!*sub_233CE6A04(&v113, v27))
  {
    v62 = a7;
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    v63 = 1086;
LABEL_70:
    *(_DWORD *)(v62 + 16) = v63;
    goto LABEL_79;
  }
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v28 = *(id *)(a1 + 40);
  v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v29, (uint64_t)&v105, v122, 16);
  if (v31)
  {
    v32 = 0;
    v33 = *(_QWORD *)v106;
    do
    {
      v34 = 0;
      v35 = 12 * v32;
      do
      {
        if (*(_QWORD *)v106 != v33)
          objc_enumerationMutation(v28);
        objc_msgSend_convertToEventPathParams_(*(void **)(*((_QWORD *)&v105 + 1) + 8 * v34++), v30, (uint64_t)v113 + v35);
        v35 += 12;
      }
      while (v31 != v34);
      v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v30, (uint64_t)&v105, v122, 16);
      v32 += v34;
    }
    while (v31);
  }

LABEL_26:
  v36 = sub_2341FF930();
  v120 = xmmword_2504F053C;
  v121 = 0;
  sub_233CF06BC((uint64_t)v100, a3);
  objc_msgSend_toReadPrepareParams_(*(void **)(a1 + 48), v37, (uint64_t)v100);
  v103 = v114;
  v104 = objc_msgSend_count(*(void **)(a1 + 32), v38, v39);
  v101 = v113;
  v89 = v36;
  v102 = objc_msgSend_count(*(void **)(a1 + 40), v40, v41);
  v43 = v113;
  v42 = v114;
  v44 = v91;
  v94 = v44;
  v95 = v8 + 1;
  v96 = v8;
  do
    v45 = __ldxr(p_shared_owners);
  while (__stxr(v45 + 1, p_shared_owners));
  *(_QWORD *)&v97 = a6;
  *((_QWORD *)&v97 + 1) = a4;
  *(_QWORD *)&v98 = a5;
  *((_QWORD *)&v98 + 1) = v42;
  v99 = v43;
  v47 = (uint64_t)v113;
  v46 = v114;
  v48 = (char *)sub_234114774(0x130uLL);
  if (v48)
  {
    v49 = v104;
    v50 = v102;
    v51 = v44;
    *(_QWORD *)v134 = &off_2504F0A78;
    *(_QWORD *)&v134[8] = v51;
    v134[16] = v84;
    v136 = v134;
    v52 = (void (***)(_QWORD))v51;
    v132[0] = (void (***)(_QWORD))&off_2504F0B08;
    v132[1] = v52;
    v133 = v132;
    v53 = v52;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
    v131 = 0;
    v55 = operator new(0x20uLL);
    *v55 = &off_2504F0B98;
    v55[1] = v53;
    v55[2] = v10;
    v55[3] = v8;
    v131 = v55;
    v56 = v53;
    do
      v57 = __ldxr(p_shared_owners);
    while (__stxr(v57 + 1, p_shared_owners));
    v129 = 0;
    v58 = operator new(0x48uLL);
    *v58 = &off_2504F0C28;
    v58[1] = v56;
    v58[2] = v10;
    v58[3] = v8;
    v59 = v98;
    *((_OWORD *)v58 + 2) = v97;
    *((_OWORD *)v58 + 3) = v59;
    v58[8] = v99;
    v129 = v58;
    v127 = 0;
    v125 = 0;
    sub_233CF39E0((uint64_t)v48, (uint64_t)v46, v49, v47, v50, (uint64_t)v134, (uint64_t)v132, (uint64_t)v130, (uint64_t)v128, (uint64_t)v126, (uint64_t)v124);
    v60 = v125;
    if (v125 == v124)
    {
      v61 = 4;
      v60 = v124;
    }
    else
    {
      if (!v125)
        goto LABEL_40;
      v61 = 5;
    }
    (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_40:
    v64 = v127;
    if (v127 == v126)
    {
      v65 = 4;
      v64 = v126;
    }
    else
    {
      if (!v127)
        goto LABEL_45;
      v65 = 5;
    }
    (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_45:
    v66 = v129;
    if (v129 == v128)
    {
      v67 = 4;
      v66 = v128;
    }
    else
    {
      if (!v129)
        goto LABEL_50;
      v67 = 5;
    }
    (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_50:
    v68 = v131;
    if (v131 == v130)
    {
      v69 = 4;
      v68 = v130;
    }
    else
    {
      if (!v131)
        goto LABEL_55;
      v69 = 5;
    }
    (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_55:
    v70 = v133;
    if (v133 == v132)
    {
      v71 = 4;
      v70 = v132;
    }
    else
    {
      if (!v133)
        goto LABEL_60;
      v71 = 5;
    }
    (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_60:
    v72 = v136;
    if (v136 == v134)
    {
      v73 = 4;
      v72 = v134;
    }
    else
    {
      if (!v136)
      {
LABEL_65:
        v93 = v48;
        v74 = sub_234114774(0x158uLL);
        if (v74)
        {
          v132[0] = (void (***)(_QWORD))sub_23420D650(v74, v89, a2, v48 + 200, 0);
          sub_23420DF14((uint64_t)v132[0], (uint64_t)v100, (uint64_t)v134);
          v120 = *(_OWORD *)&v134[4];
          v121 = v135;
          if (*(_DWORD *)v134)
          {
            v75 = a7;
            *(_DWORD *)a7 = *(_DWORD *)v134;
          }
          else
          {
            v76 = v132[0];
            v132[0] = 0;
            v92 = 0;
            sub_233CF1EF4((void (****)(_QWORD))v93 + 33, v76);
            sub_233CF1EF4(&v92, 0);
            v93 = 0;
            v113 = 0;
            v114 = 0;
            v75 = a7;
            *(_DWORD *)a7 = 0;
          }
          *(_OWORD *)(v75 + 4) = v120;
          *(_DWORD *)(v75 + 20) = v121;
        }
        else
        {
          v132[0] = 0;
          *(_DWORD *)a7 = 11;
          *(_QWORD *)(a7 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework"
                                "/CHIP/MTRBaseDevice.mm";
          *(_DWORD *)(a7 + 16) = 1131;
        }
        sub_233CF1EF4(v132, 0);
        goto LABEL_74;
      }
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
    goto LABEL_65;
  }
  v93 = 0;
  *(_DWORD *)a7 = 11;
  *(_QWORD *)(a7 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  *(_DWORD *)(a7 + 16) = 1127;
LABEL_74:
  sub_233CF438C((uint64_t *)&v93, 0);
  do
    v77 = __ldaxr(p_shared_owners);
  while (__stlxr(v77 - 1, p_shared_owners));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }

  sub_2341CD754(v100);
  v8 = v117;
LABEL_79:
  sub_233C0BB74(&v113);
  sub_233C0BB74(&v114);
  if (v8)
  {
    v78 = (unint64_t *)&v8->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  v80 = v119;
  if (v119)
  {
    v81 = (unint64_t *)&v119->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
}

void sub_233CE67A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a65;
  id a66;
  char a69;
  uint64_t v69;

  sub_233CF1EF4((void (****)(_QWORD))(v69 - 168), 0);
  sub_233CF438C(&a23, 0);
  sub_233CF2D00(a18);

  sub_2341CD754(&a32);
  sub_233C0BB74(&a64);
  sub_233C0BB74(&a65);
  sub_233CF2D00(a13);

  sub_233CF2D00((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void **sub_233CE6A04(void **a1, size_t a2)
{
  size_t v2;
  _BYTE *v4;

  v2 = a2;
  sub_233CF1E4C(a1, a2, 0xCuLL);
  if (v2 && *a1)
  {
    v4 = (char *)*a1 + 10;
    do
    {
      *(_QWORD *)(v4 - 10) = -1;
      *((_WORD *)v4 - 1) = -1;
      *v4 = 0;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  return a1;
}

void sub_233CE6A5C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  id v11;

  v11 = a2;
  if (objc_msgSend_isPASEDevice(v11, v3, v4))
  {
    sub_233CF0F9C(a1, v11);
  }
  else
  {
    v7 = objc_msgSend_nodeID(v11, v5, v6);
    objc_msgSend_deviceController(v11, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_233CF105C(a1, v7, v10);

  }
}

void sub_233CE6ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_233CE6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v25 = v24;

  _Unwind_Resume(a1);
}

void sub_233CE6D50(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  const char *v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  const char *v26;
  id v27;
  void *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;
  unsigned int v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  void *v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  __int16 v58;
  const char *v59;
  uint64_t v60;
  unsigned int v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  NSObject *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id obj;
  id v89;
  unsigned __int8 v90[2];
  __int16 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  unsigned __int8 v99[2];
  __int16 v100;
  _BYTE v101[24];
  _BYTE *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _BYTE v107[128];
  _BYTE v108[24];
  _BYTE *v109;
  _QWORD v110[3];
  _QWORD *v111;
  _QWORD v112[3];
  _QWORD *v113;
  __int128 buf;
  char *v115;
  char *v116;
  char **v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v85 = a3;
    v86 = a4;
    v87 = a5;
    v84 = a2;
    v89 = *(id *)(a1 + 32);
    objc_msgSend_objectForKeyedSubscript_(v89, v12, (uint64_t)CFSTR("type"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      sub_234117B80(0, "NotSpecified");
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v89;
        _os_log_impl(&dword_233BF3000, v57, OS_LOG_TYPE_ERROR, "Error: Object to encode is corrupt: %@", (uint8_t *)&buf, 0xCu);
      }

      if (sub_234114844(1u))
        sub_2341147D0(0, 1);
      *(_DWORD *)a6 = 47;
      *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRBaseDevice.mm";
      *(_DWORD *)(a6 + 16) = 1186;
      goto LABEL_87;
    }
    if ((objc_msgSend_isEqualToString_(v13, v14, (uint64_t)CFSTR("Array")) & 1) != 0)
    {
      v83 = v13;
      objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)CFSTR("value"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        sub_234117B80(0, "NotSpecified");
        v68 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v17;
          _os_log_impl(&dword_233BF3000, v68, OS_LOG_TYPE_ERROR, "Error: Object to encode claims to be a list but isn't: %@", (uint8_t *)&buf, 0xCu);
        }

        if (sub_234114844(1u))
          sub_2341147D0(0, 1);
        *(_DWORD *)a6 = 47;
        *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/C"
                              "HIP/MTRBaseDevice.mm";
        *(_DWORD *)(a6 + 16) = 1201;
        goto LABEL_86;
      }
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v82 = v17;
      v20 = objc_msgSend_count(v17, v18, v19);
      sub_233CE7A40(&v96, v20);
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      obj = v17;
      v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v21, (uint64_t)&v92, v107, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v93;
        while (2)
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v93 != v23)
              objc_enumerationMutation(obj);
            v25 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              sub_234117B80(0, "NotSpecified");
              v75 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf) = 138412290;
                *(_QWORD *)((char *)&buf + 4) = obj;
                _os_log_impl(&dword_233BF3000, v75, OS_LOG_TYPE_ERROR, "Error: Can't encode corrupt list: %@", (uint8_t *)&buf, 0xCu);
              }

              if (sub_234114844(1u))
                sub_2341147D0(0, 1);
              *(_DWORD *)a6 = 47;
              *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Frame"
                                    "work/CHIP/MTRBaseDevice.mm";
              *(_DWORD *)(a6 + 16) = 1210;

              v17 = v82;
              goto LABEL_85;
            }
            objc_msgSend_objectForKeyedSubscript_(v25, v26, (uint64_t)CFSTR("data"));
            v27 = (id)objc_claimAutoreleasedReturnValue();
            v28 = v27;
            v29 = v97;
            if (v97 >= v98)
            {
              v31 = v96;
              v32 = (v97 - v96) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                sub_233C04968();
              v34 = v98 - v96;
              if ((v98 - v96) >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              v117 = &v98;
              if (v35)
              {
                v36 = (char *)sub_233CF5774((uint64_t)&v98, v35);
                v31 = v96;
                v29 = v97;
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = v28;
              v38 = v37;
              if (v29 != v31)
              {
                v39 = v29;
                do
                {
                  v40 = *((_QWORD *)v39 - 1);
                  v39 -= 8;
                  *(_QWORD *)v39 = 0;
                  *((_QWORD *)v38 - 1) = v40;
                  v38 -= 8;
                }
                while (v39 != v31);
              }
              v30 = v37 + 8;
              v96 = v38;
              v97 = v37 + 8;
              v41 = v98;
              v98 = &v36[8 * v35];
              v115 = v29;
              v116 = v41;
              *(_QWORD *)&buf = v31;
              *((_QWORD *)&buf + 1) = v31;
              sub_233CF57A8((uint64_t)&buf);
            }
            else
            {
              *(_QWORD *)v97 = v27;
              v30 = v29 + 8;
            }
            v97 = v30;

          }
          v22 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v42, (uint64_t)&v92, v107, 16);
          if (v22)
            continue;
          break;
        }
      }

      sub_233CAF22C(&buf, (uint64_t)v96, (v97 - v96) >> 3);
      v45 = objc_msgSend_unsignedShortValue(*(void **)(a1 + 40), v43, v44);
      v48 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 48), v46, v47);
      v53 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 56), v49, v50);
      v105[0] = &off_2504F0EB8;
      v105[1] = v85;
      v105[2] = v87;
      v106 = v105;
      v103[0] = &off_2504F0F48;
      v103[1] = v86;
      v103[2] = v87;
      v104 = v103;
      v54 = *(void **)(a1 + 64);
      if (v54)
      {
        v90[0] = 1;
        v91 = objc_msgSend_unsignedShortValue(v54, v51, v52);
      }
      else
      {
        v90[0] = 0;
      }
      v102 = 0;
      v99[0] = 0;
      sub_233CE7AEC(v84, v45, v48, v53, &buf, (uint64_t)v105, (uint64_t)v103, v90, (_QWORD *)a6, (uint64_t)v101, (uint64_t)v99, 0);
      v76 = v102;
      v17 = v82;
      if (v102 == v101)
      {
        v77 = 4;
        v76 = v101;
      }
      else
      {
        if (!v102)
          goto LABEL_75;
        v77 = 5;
      }
      (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_75:
      v78 = v104;
      if (v104 == v103)
      {
        v79 = 4;
        v78 = v103;
      }
      else
      {
        if (!v104)
          goto LABEL_80;
        v79 = 5;
      }
      (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_80:
      v80 = v106;
      if (v106 == v105)
      {
        v81 = 4;
        v80 = v105;
      }
      else
      {
        if (!v106)
        {
LABEL_85:
          *(_QWORD *)&buf = &v96;
          sub_233CF5708((void ***)&buf);
LABEL_86:

          v13 = v83;
          goto LABEL_87;
        }
        v81 = 5;
      }
      (*(void (**)(void))(*v80 + 8 * v81))();
      goto LABEL_85;
    }
    v58 = objc_msgSend_unsignedShortValue(*(void **)(a1 + 40), v15, v16);
    v61 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 48), v59, v60);
    v64 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 56), v62, v63);
    *(_QWORD *)&buf = *(id *)(a1 + 32);
    v112[0] = &off_2504F0EB8;
    v112[1] = v85;
    v112[2] = a5;
    v113 = v112;
    v110[0] = &off_2504F0F48;
    v110[1] = v86;
    v110[2] = a5;
    v111 = v110;
    v67 = *(void **)(a1 + 64);
    if (v67)
    {
      v99[0] = 1;
      v100 = objc_msgSend_unsignedShortValue(v67, v65, v66);
    }
    else
    {
      v99[0] = 0;
    }
    v109 = 0;
    LOBYTE(v96) = 0;
    sub_233CE77C4(v84, v58, v61, v64, (void **)&buf, (uint64_t)v112, (uint64_t)v110, v99, (_QWORD *)a6, (uint64_t)v108, (uint64_t)&v96, 0);
    v69 = v109;
    if (v109 == v108)
    {
      v70 = 4;
      v69 = v108;
    }
    else
    {
      if (!v109)
        goto LABEL_53;
      v70 = 5;
    }
    (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_53:
    v71 = v111;
    if (v111 == v110)
    {
      v72 = 4;
      v71 = v110;
    }
    else
    {
      if (!v111)
        goto LABEL_58;
      v72 = 5;
    }
    (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_58:
    v73 = v113;
    if (v113 == v112)
    {
      v74 = 4;
      v73 = v112;
    }
    else
    {
      if (!v113)
      {
LABEL_63:

LABEL_87:
        return;
      }
      v74 = 5;
    }
    (*(void (**)(void))(*v73 + 8 * v74))();
    goto LABEL_63;
  }
  sub_234117B80(0, "NotSpecified");
  v55 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
  {
    v56 = *(_QWORD *)(a1 + 32);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v56;
    _os_log_impl(&dword_233BF3000, v55, OS_LOG_TYPE_ERROR, "Error: Unsupported object to write as attribute value: %@", (uint8_t *)&buf, 0xCu);
  }

  if (sub_234114844(1u))
    sub_2341147D0(0, 1);
  *(_DWORD *)a6 = 47;
  *(_QWORD *)(a6 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  *(_DWORD *)(a6 + 16) = 1179;
}

void sub_233CE75CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,char *a44)
{
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v45 = a40;
  if (a40 == &a37)
  {
    v46 = 4;
    v45 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v46 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_6:
  v47 = a44;
  if (a44 == &a41)
  {
    v48 = 4;
    v47 = &a41;
  }
  else
  {
    if (!a44)
      goto LABEL_11;
    v48 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
LABEL_11:
  a32 = (void **)&a29;
  sub_233CF5708(&a32);

  _Unwind_Resume(a1);
}

void sub_233CE77C4(uint64_t *a1@<X0>, __int16 a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned __int8 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  __int128 v29;
  _BYTE v30[8];
  void (***v31)(_QWORD);
  _QWORD *v32;

  v20 = *a1;
  v21 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1) == 3
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) == 4;
  LOBYTE(v29) = v21;
  v32 = sub_233CF44FC(a6, a7, a10, (char *)&v29);
  if (v32)
  {
    v22 = *((_QWORD *)sub_2341FF930() + 10);
    v23 = v32;
    v24 = sub_234114774(0x158uLL);
    if (v24)
    {
      v31 = (void (***)(_QWORD))sub_233CF4BC8((uint64_t)v24, v22, (uint64_t)(v23 + 14), a8, 0);
      v25 = *a1;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1) == 3
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25) == 4)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        *(_QWORD *)&v29 = __PAIR64__(a4, a3);
        DWORD2(v29) = -1;
        v30[0] = 0;
        sub_233CF43B8((uint64_t)v31, (uint64_t *)&v29, a5, (uint64_t)v30, a9);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        *(_QWORD *)&v29 = __PAIR64__(a4, a3);
        WORD4(v29) = a2;
        WORD5(v29) = -1;
        sub_233CF43B8((uint64_t)v31, (uint64_t *)&v29, a5, a11, a9);
      }
      if (*(_DWORD *)a9)
        goto LABEL_15;
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      sub_2342095FC((uint64_t)v31, a1, 0, (uint64_t)a9);
      if (*(_DWORD *)a9)
        goto LABEL_15;
      if (a12)
      {
        *(_QWORD *)&v29 = v32;
        *((_QWORD *)&v29 + 1) = v31;
        sub_233CF4454(a12, &v29);
      }
      v27 = 0;
      v31 = 0;
      v32 = 0;
      v26 = 175;
    }
    else
    {
      v31 = 0;
      v26 = 147;
      v27 = 11;
    }
    *(_DWORD *)a9 = v27;
    a9[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/controller/WriteInteraction.h";
    *((_DWORD *)a9 + 4) = v26;
LABEL_15:
    sub_233CF5308(&v31, 0);
    goto LABEL_16;
  }
  *(_DWORD *)a9 = 11;
  a9[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/controller/WriteInteraction.h";
  *((_DWORD *)a9 + 4) = 143;
LABEL_16:
  sub_233CF5348(&v32, 0);
}

void sub_233CE7A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void (***v6)(_QWORD);
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void (***)(_QWORD));
  sub_233CF5308((void (****)(_QWORD))va, 0);
  sub_233CF5348((_QWORD **)va1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_233CE7A40(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_233C04968();
    v5 = a1[1] - *a1;
    v14[4] = result;
    v6 = (char *)sub_233CF5774(result, a2);
    v9 = *a1;
    v8 = a1[1];
    v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    if (v8 != *a1)
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      v11 = a1[1];
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v10 - 1) = v12;
        v10 -= 8;
      }
      while (v11 != v9);
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v14[2] = v8;
    v14[3] = v13;
    v14[0] = v9;
    v14[1] = v9;
    return sub_233CF57A8((uint64_t)v14);
  }
  return result;
}

void sub_233CE7AEC(uint64_t *a1@<X0>, __int16 a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned __int8 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  int v26;
  int v27;
  __int128 v29;
  _BYTE v30[8];
  void (***v31)(_QWORD);
  _QWORD *v32;

  v20 = *a1;
  v21 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1) == 3
     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) == 4;
  LOBYTE(v29) = v21;
  v32 = sub_233CF44FC(a6, a7, a10, (char *)&v29);
  if (v32)
  {
    v22 = *((_QWORD *)sub_2341FF930() + 10);
    v23 = v32;
    v24 = sub_234114774(0x158uLL);
    if (v24)
    {
      v31 = (void (***)(_QWORD))sub_233CF4BC8((uint64_t)v24, v22, (uint64_t)(v23 + 14), a8, 0);
      v25 = *a1;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1) == 3
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25) == 4)
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        *(_QWORD *)&v29 = __PAIR64__(a4, a3);
        DWORD2(v29) = -1;
        v30[0] = 0;
        sub_233CF57F8((uint64_t)v31, (uint64_t *)&v29, a5, (uint64_t)v30, a9);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        *(_QWORD *)&v29 = __PAIR64__(a4, a3);
        WORD4(v29) = a2;
        WORD5(v29) = -1;
        sub_233CF57F8((uint64_t)v31, (uint64_t *)&v29, a5, a11, a9);
      }
      if (*(_DWORD *)a9)
        goto LABEL_15;
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      sub_2342095FC((uint64_t)v31, a1, 0, (uint64_t)a9);
      if (*(_DWORD *)a9)
        goto LABEL_15;
      if (a12)
      {
        *(_QWORD *)&v29 = v32;
        *((_QWORD *)&v29 + 1) = v31;
        sub_233CF5914(a12, &v29);
      }
      v27 = 0;
      v31 = 0;
      v32 = 0;
      v26 = 175;
    }
    else
    {
      v31 = 0;
      v26 = 147;
      v27 = 11;
    }
    *(_DWORD *)a9 = v27;
    a9[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/controller/WriteInteraction.h";
    *((_DWORD *)a9 + 4) = v26;
LABEL_15:
    sub_233CF5308(&v31, 0);
    goto LABEL_16;
  }
  *(_DWORD *)a9 = 11;
  a9[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/controller/WriteInteraction.h";
  *((_DWORD *)a9 + 4) = 143;
LABEL_16:
  sub_233CF5348(&v32, 0);
}

void sub_233CE7D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void (***v6)(_QWORD);
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void (***)(_QWORD));
  sub_233CF5308((void (****)(_QWORD))va, 0);
  sub_233CF5348((_QWORD **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_233CE7D68(uint64_t a1, __n128 a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[3];
  void *v16;

  if (!*(_BYTE *)(a1 + 112))
  {
    *(_BYTE *)(a1 + 112) = 1;
    v16 = 0;
    a2.n128_u64[0] = 0x8E0000008ELL;
    if (*(_DWORD *)(a5 + 4) == *(_DWORD *)(a1 + 104))
    {
      if (a7 || *(_DWORD *)(a5 + 8) == *(_DWORD *)(a1 + 108))
      {
        if (!a7 || (sub_233CF77DC(&v16, a7, (uint64_t)v15), a2.n128_u64[0] = v15[0], !LODWORD(v15[0])))
        {
          v13 = *(_QWORD *)(a1 + 32);
          if (v13)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, void **, __n128))(*(_QWORD *)v13 + 48))(v13, a5, a6, &v16, a2);
            goto LABEL_10;
          }
LABEL_17:
          sub_233CF1E98();
        }
        v11 = (const char *)v15[1];
        a3 = *(double *)&v15[2];
LABEL_8:
        v14[0] = a2.n128_u64[0];
        v14[1] = v11;
        *(double *)&v14[2] = a3;
        v12 = *(_QWORD *)(a1 + 64);
        if (v12)
        {
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v14);
LABEL_10:

          return;
        }
        goto LABEL_17;
      }
      v10 = 1308;
    }
    else
    {
      v10 = 1303;
    }
    LODWORD(a3) = v10;
    v11 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
    goto LABEL_8;
  }
}

void sub_233CE7E74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_233CE8154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void sub_233CE820C(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  const char *v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  unsigned __int16 v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  id v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  __int16 v44;
  uint64_t *v45;
  int v46;
  int v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t *v54;
  char v56[4];
  int v57;
  id v58;
  _QWORD *v59;
  unsigned __int16 v60[2];
  int v61;
  int v62;
  char v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66[3];
  uint64_t *v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (objc_msgSend_isEqualToNumber_(*(void **)(a1 + 32), a2, (uint64_t)&unk_250591B78)
    && objc_msgSend_isEqualToNumber_(*(void **)(a1 + 40), v13, (uint64_t)&unk_250591B90)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3) == 2)
  {
    v14 = sub_2341CD3C0(*a3);
    objc_msgSend_dataWithBytes_length_(MEMORY[0x24BDBCE50], v15, v14 + 208, 16);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = 0;
  }
  v17 = v16;
  v20 = objc_msgSend_unsignedShortValue(*(void **)(a1 + 48), v18, v19);
  v23 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 32), v21, v22);
  v26 = objc_msgSend_unsignedLongValue(*(void **)(a1 + 40), v24, v25);
  v60[0] = v20;
  v60[1] = 0;
  v61 = v23;
  v62 = v26;
  v63 = 1;
  v27 = sub_234114774(0x78uLL);
  if (v27)
  {
    v54 = a3;
    v28 = v17;
    v29 = operator new(0x20uLL);
    *v29 = &off_2504F1058;
    v29[1] = a4;
    v29[2] = a6;
    v29[3] = v28;
    v71 = v29;
    v68[0] = &off_2504F10E8;
    v68[1] = a5;
    v68[2] = a6;
    v69 = v68;
    v67 = 0;
    sub_233CF623C((uint64_t)v27, v23, v26, (uint64_t)v70, (uint64_t)v68, (uint64_t)v66);
    v30 = v67;
    if (v67 == v66)
    {
      v31 = 4;
      v30 = v66;
    }
    else
    {
      if (!v67)
        goto LABEL_13;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_13:
    v32 = v69;
    if (v69 == v68)
    {
      v33 = 4;
      v32 = v68;
    }
    else
    {
      if (!v69)
        goto LABEL_18;
      v33 = 5;
    }
    (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_18:
    v34 = v71;
    if (v71 == v70)
    {
      v35 = 4;
      v34 = v70;
    }
    else
    {
      if (!v71)
        goto LABEL_23;
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_23:
    v59 = v27;
    v64[0] = &off_2504F1178;
    v64[1] = v27;
    v65 = v64;
    sub_233CF1118(v27 + 9, (uint64_t)v64);
    v36 = v65;
    if (v65 == v64)
    {
      v37 = 4;
      v36 = v64;
    }
    else
    {
      if (!v65)
        goto LABEL_28;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_28:
    v38 = *(_QWORD *)(a1 + 56);
    v39 = sub_234114774(0x198uLL);
    v40 = (uint64_t)v39;
    if (v39)
    {
      sub_2341FD1B4(v39, v59, a2, v38 != 0, 0, 0);
      v66[0] = v40;
      a7[1] = 0;
      a7[2] = 0;
      *a7 = 0;
      v58 = *(id *)(a1 + 64);
      v43 = *(void **)(a1 + 56);
      if (v43)
      {
        v44 = objc_msgSend_unsignedShortValue(v43, v41, v42);
        v45 = v54;
        LOBYTE(v68[0]) = 1;
        WORD1(v68[0]) = v44;
      }
      else
      {
        LOBYTE(v68[0]) = 0;
        v45 = v54;
      }
      BYTE4(v68[0]) = 0;
      v70[0] = &off_2504F1208;
      v70[1] = &v58;
      sub_2341FF118(v40, v60, (uint64_t)v70, (uint64_t)v68, a7);

      if (*(_DWORD *)a7)
        goto LABEL_39;
      v50 = *(void **)(a1 + 72);
      if (v50)
      {
        v51 = objc_msgSend_unsignedShortValue(v50, v48, v49);
        v52 = sub_2341CD548(*v45, 1000 * v51);
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        v53 = (unsigned __int8 *)v66[0];
        v56[0] = 1;
        v57 = v52;
      }
      else
      {
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
        v53 = (unsigned __int8 *)v66[0];
        v56[0] = 0;
      }
      sub_2341FD918(v53, v45, (uint64_t)v56, (uint64_t)a7);
      if (*(_DWORD *)a7)
        goto LABEL_39;
      v47 = 0;
      v59 = 0;
      v46 = 1451;
    }
    else
    {
      v46 = 1435;
      v47 = 11;
    }
    v66[0] = 0;
    *(_DWORD *)a7 = v47;
    a7[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
    *((_DWORD *)a7 + 4) = v46;
LABEL_39:
    sub_233CF6598(v66, 0);
    goto LABEL_40;
  }
  v59 = 0;
  *(_DWORD *)a7 = 11;
  a7[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  *((_DWORD *)a7 + 4) = 1423;
LABEL_40:
  sub_233CF6334(&v59, 0);

}

void sub_233CE8624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  _QWORD *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_233CF6598((uint64_t *)va1, 0);
  sub_233CF6334((_QWORD **)va, 0);

  _Unwind_Resume(a1);
}

void sub_233CE8924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_233CE8974(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_233CE8988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  const char *v10;
  objc_class *v11;
  id v12;
  const char *v13;
  void *v14;
  const char *v15;
  id v16;

  v5 = a2;
  v8 = a3;
  if (!v8)
  {
    if (objc_msgSend_count(v5, v6, v7) != 1)
    {
      v9 = 0;
      objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v10, (uint64_t)CFSTR("MTRErrorDomain"), 13, 0);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
    v11 = *(objc_class **)(a1 + 40);
    if (v11)
    {
      v12 = [v11 alloc];
      objc_msgSend_objectAtIndexedSubscript_(v5, v13, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 0;
      v9 = (void *)objc_msgSend_initWithResponseValue_error_(v12, v15, (uint64_t)v14, &v16);
      v8 = v16;

      goto LABEL_7;
    }
    v8 = 0;
  }
  v9 = 0;
LABEL_7:
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_233CE8AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CE8BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_233CE8D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  v25 = v19;

  _Unwind_Resume(a1);
}

void sub_233CE8D98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  MTRAttributeReport *v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  const char *v19;
  char isEqual;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  id obj;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v29 = v5;
  if (v6)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    obj = v5;
    v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v32, v36, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v33 != v9)
            objc_enumerationMutation(obj);
          v11 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * i);
          v12 = [MTRAttributeReport alloc];
          v31 = 0;
          v14 = (void *)objc_msgSend_initWithResponseValue_error_(v12, v13, v11, &v31);
          v17 = v31;
          if (v17)
          {
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
          }
          else
          {
            objc_msgSend_path(v14, v15, v16);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            isEqual = objc_msgSend_isEqual_(v18, v19, *(_QWORD *)(a1 + 32));

            v23 = *(_QWORD *)(a1 + 40);
            if ((isEqual & 1) != 0)
            {
              objc_msgSend_value(v14, v21, v22);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_error(v14, v25, v26);
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v24, v27);

            }
            else
            {
              objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v21, (uint64_t)CFSTR("MTRErrorDomain"), 13, 0);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              (*(void (**)(uint64_t, _QWORD, void *))(v23 + 16))(v23, 0, v24);
            }

          }
        }
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v28, (uint64_t)&v32, v36, 16);
      }
      while (v8);
    }

    v6 = 0;
  }

}

void sub_233CE8FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_233CE9324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_233CE93C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int16 v3;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = 128;
  sub_234001FF8((uint64_t)MTRError, (unsigned __int8 *)&v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CE941C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE942C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  LODWORD(v3) = 3;
  *((_QWORD *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v4 = 1580;
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CE949C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CE94AC(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  MTRReadClientContainer *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  void *v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  id v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  MTRReadClientContainer *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  void *v80;
  NSObject *v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  MTRReadClientContainer *v88;
  id v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  int v116;
  NSObject *v117;
  const char *v118;
  uint64_t v119;
  MTRReadClientContainer *v120;
  uint64_t v121;
  const char *v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  const char *v126;
  void *v127;
  _BOOL4 v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  void *v133;
  const char *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  void *v141;
  id v142;
  void *v143;
  id v144;
  void *v145;
  id v146;
  void *v147;
  id v148;
  void *v149;
  void *v150;
  _QWORD v151[4];
  MTRReadClientContainer *v152;
  int v153;
  __int128 v154;
  int v155;
  uint64_t v156;
  _BYTE v157[40];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _QWORD v166[4];
  id v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  _QWORD v172[4];
  id v173;
  _QWORD block[4];
  id v175;
  NSObject *v176;
  __int128 v177;
  int v178;
  _BYTE v179[128];
  _BYTE v180[128];
  _QWORD v181[3];
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _QWORD v185[3];
  _QWORD *v186;
  _QWORD v187[3];
  _QWORD *v188;
  _QWORD v189[3];
  _QWORD *v190;
  _BYTE v191[24];
  _BYTE *v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v8 = *(NSObject **)(a1 + 32);
  v150 = v7;
  if (!v7)
  {
    v139 = a2;
    v140 = v8;
    v141 = (void *)MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 72));
    v142 = *(id *)(a1 + 32);
    v143 = (void *)MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 72));
    v144 = *(id *)(a1 + 32);
    v145 = (void *)MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 72));
    v146 = *(id *)(a1 + 32);
    v147 = (void *)MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 80));
    v148 = *(id *)(a1 + 32);
    v149 = (void *)MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 88));
    v11 = objc_alloc_init(MTRReadClientContainer);
    v14 = objc_msgSend_nodeID(*(void **)(a1 + 40), v12, v13);
    objc_msgSend_setDeviceID_(v11, v15, v14);
    v18 = *(void **)(a1 + 48);
    if (v18)
    {
      v19 = objc_msgSend_count(v18, v16, v17);
      v20 = sub_234114780(v19, 0xCuLL);
      objc_msgSend_setPathParams_(v11, v21, (uint64_t)v20);
      if (!objc_msgSend_pathParams(v11, v22, v23))
      {
        v38 = *(NSObject **)(a1 + 32);
        v172[0] = MEMORY[0x24BDAC760];
        v172[1] = 3221225472;
        v172[2] = sub_233CEA158;
        v172[3] = &unk_2504F0208;
        v173 = *(id *)(a1 + 72);
        dispatch_async(v38, v172);
        objc_msgSend_cleanup(v11, v39, v40);

        goto LABEL_75;
      }
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      v24 = *(id *)(a1 + 48);
      v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v168, v180, 16);
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD *)v169;
        do
        {
          v31 = 0;
          v32 = v29;
          v33 = 12 * v29;
          do
          {
            if (*(_QWORD *)v169 != v30)
              objc_enumerationMutation(v24);
            v34 = *(void **)(*((_QWORD *)&v168 + 1) + 8 * v31);
            v35 = objc_msgSend_pathParams(v11, v26, v27);
            objc_msgSend_convertToAttributePathParams_(v34, v36, v35 + v33);
            ++v31;
            v33 += 12;
          }
          while (v28 != v31);
          v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v168, v180, 16);
          v29 = v32 + v31;
        }
        while (v28);
        v37 = v32 + v31;
      }
      else
      {
        v37 = 0;
      }

    }
    else
    {
      v37 = 0;
    }
    v41 = *(void **)(a1 + 56);
    if (!v41)
    {
      v60 = 0;
      goto LABEL_31;
    }
    v42 = objc_msgSend_count(v41, v16, v17);
    v43 = sub_234114780(v42, 0xCuLL);
    objc_msgSend_setEventPathParams_(v11, v44, (uint64_t)v43);
    if (objc_msgSend_eventPathParams(v11, v45, v46))
    {
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v47 = *(id *)(a1 + 56);
      v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v162, v179, 16);
      if (v51)
      {
        v137 = v37;
        v52 = 0;
        v53 = *(_QWORD *)v163;
        do
        {
          v54 = 0;
          v55 = v52;
          v56 = 12 * v52;
          do
          {
            if (*(_QWORD *)v163 != v53)
              objc_enumerationMutation(v47);
            v57 = *(void **)(*((_QWORD *)&v162 + 1) + 8 * v54);
            v58 = objc_msgSend_eventPathParams(v11, v49, v50);
            objc_msgSend_convertToEventPathParams_(v57, v59, v58 + v56);
            ++v54;
            v56 += 12;
          }
          while (v51 != v54);
          v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v49, (uint64_t)&v162, v179, 16);
          v52 = v55 + v54;
        }
        while (v51);
        v60 = v55 + v54;
        v37 = v137;
      }
      else
      {
        v60 = 0;
      }

LABEL_31:
      v64 = sub_2341FF930();
      v177 = xmmword_2504F05F4;
      v178 = 0;
      v65 = (uint64_t *)sub_233C25EA4(a3);
      sub_233CF06BC((uint64_t)v157, v65);
      objc_msgSend_toReadPrepareParams_(*(void **)(a1 + 64), v66, (uint64_t)v157);
      v160 = objc_msgSend_pathParams(v11, v67, v68);
      v161 = v37;
      v158 = objc_msgSend_eventPathParams(v11, v69, v70);
      v159 = v60;
      v71 = v11;
      v74 = objc_msgSend_pathParams(v71, v72, v73);
      v77 = objc_msgSend_eventPathParams(v71, v75, v76);
      v78 = (char *)sub_234114774(0x130uLL);
      if (!v78)
        goto LABEL_62;
      v138 = v77;
      v79 = v140;
      v80 = (void *)MEMORY[0x23493EEA8](v141);
      *(_QWORD *)v191 = &off_2504F1248;
      *(_QWORD *)&v191[8] = v79;
      v81 = v79;
      *(_QWORD *)&v191[16] = MEMORY[0x23493EEA8](v80);
      v192 = v191;

      v82 = v142;
      v83 = (void *)MEMORY[0x23493EEA8](v143);
      v190 = 0;
      v189[0] = &off_2504F12F0;
      v189[1] = v82;
      v84 = v82;
      v189[2] = MEMORY[0x23493EEA8](v83);
      v190 = v189;

      v85 = v144;
      v86 = (void *)MEMORY[0x23493EEA8](v145);
      v188 = 0;
      v187[0] = &off_2504F1370;
      v187[1] = v85;
      v87 = v85;
      v187[2] = MEMORY[0x23493EEA8](v86);
      v188 = v187;

      v88 = v71;
      v185[0] = &off_2504F1418;
      v185[1] = v88;
      v186 = v185;
      v89 = v146;
      v90 = (void *)MEMORY[0x23493EEA8](v147);
      v184 = 0;
      v183[0] = &off_2504F1498;
      v183[1] = v89;
      v91 = v89;
      v183[2] = MEMORY[0x23493EEA8](v90);
      v184 = v183;

      v92 = v148;
      v93 = (void *)MEMORY[0x23493EEA8](v149);
      v182 = 0;
      v181[0] = &off_2504F1518;
      v181[1] = v92;
      v94 = v92;
      v181[2] = MEMORY[0x23493EEA8](v93);
      v182 = v181;

      sub_233CF39E0((uint64_t)v78, v74, v37, v138, v60, (uint64_t)v191, (uint64_t)v189, (uint64_t)v187, (uint64_t)v185, (uint64_t)v183, (uint64_t)v181);
      v95 = v182;
      if (v182 == v181)
      {
        v96 = 4;
        v95 = v181;
      }
      else
      {
        if (!v182)
          goto LABEL_37;
        v96 = 5;
      }
      (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_37:
      v97 = v184;
      if (v184 == v183)
      {
        v98 = 4;
        v97 = v183;
      }
      else
      {
        if (!v184)
          goto LABEL_42;
        v98 = 5;
      }
      (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_42:
      v99 = v186;
      if (v186 == v185)
      {
        v100 = 4;
        v99 = v185;
      }
      else
      {
        if (!v186)
          goto LABEL_47;
        v100 = 5;
      }
      (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_47:
      v101 = v188;
      if (v188 == v187)
      {
        v102 = 4;
        v101 = v187;
      }
      else
      {
        if (!v188)
          goto LABEL_52;
        v102 = 5;
      }
      (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_52:
      v103 = v190;
      if (v190 == v189)
      {
        v104 = 4;
        v103 = v189;
      }
      else
      {
        if (!v190)
        {
LABEL_57:
          v105 = v192;
          if (v192 == v191)
          {
            v106 = 4;
            v105 = v191;
            goto LABEL_61;
          }
          if (v192)
          {
            v106 = 5;
LABEL_61:
            (*(void (**)(void))(*v105 + 8 * v106))();
          }
LABEL_62:
          v156 = (uint64_t)v78;
          v107 = sub_234114774(0x158uLL);
          v109 = (uint64_t)v107;
          if (v107)
            sub_23420D650(v107, v64, v139, v78 + 200, 1);
          objc_msgSend_setReadClientPtr_(v71, v108, v109);
          v110 = v156;
          v156 = 0;
          objc_msgSend_setCallback_(v71, v111, v110);
          if ((objc_msgSend_shouldResubscribeAutomatically(*(void **)(a1 + 64), v112, v113) & 1) != 0)
            sub_234210A84(v109, (uint64_t)v157, v191);
          else
            sub_23420DF14(v109, (uint64_t)v157, (uint64_t)v191);
          v177 = *(_OWORD *)&v191[4];
          v116 = *(_DWORD *)v191;
          v178 = *(_DWORD *)&v191[20];
          if (*(_DWORD *)v191)
          {
            v117 = *(NSObject **)(a1 + 32);
            v151[0] = MEMORY[0x24BDAC760];
            v151[1] = 3221225472;
            v151[2] = sub_233CEA258;
            v151[3] = &unk_2504F04C8;
            v152 = (MTRReadClientContainer *)*(id *)(a1 + 72);
            v153 = v116;
            v154 = v177;
            v155 = v178;
            dispatch_async(v117, v151);
            objc_msgSend_cleanup(v71, v118, v119);
            v120 = v152;
          }
          else
          {
            v121 = objc_msgSend_deviceID(v71, v114, v115);
            v120 = v71;
            if (qword_2561591E0 != -1)
              dispatch_once(&qword_2561591E0, &unk_2504F0720);
            objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v122, v121);
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_lock((void *)qword_2561591D0, v124, v125);
            objc_msgSend_objectForKeyedSubscript_((void *)qword_2561591D8, v126, (uint64_t)v123);
            v127 = (void *)objc_claimAutoreleasedReturnValue();
            v128 = v127 == 0;

            if (v128)
            {
              objc_msgSend_array(MEMORY[0x24BDBCEB8], v129, v130);
              v131 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2561591D8, v132, (uint64_t)v131, v123);

            }
            objc_msgSend_objectForKeyedSubscript_((void *)qword_2561591D8, v129, (uint64_t)v123);
            v133 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v133, v134, (uint64_t)v120);

            objc_msgSend_unlock((void *)qword_2561591D0, v135, v136);
          }

          sub_233CF438C(&v156, 0);
          sub_2341CD754(v157);
          goto LABEL_75;
        }
        v104 = 5;
      }
      (*(void (**)(void))(*v103 + 8 * v104))();
      goto LABEL_57;
    }
    v61 = *(NSObject **)(a1 + 32);
    v166[0] = MEMORY[0x24BDAC760];
    v166[1] = 3221225472;
    v166[2] = sub_233CEA1D8;
    v166[3] = &unk_2504F0208;
    v167 = *(id *)(a1 + 72);
    dispatch_async(v61, v166);
    objc_msgSend_cleanup(v11, v62, v63);

LABEL_75:
    v10 = v140;
    goto LABEL_76;
  }
  v9 = v7;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_233CEA144;
  block[3] = &unk_2504F03B0;
  v176 = *(id *)(a1 + 72);
  v175 = v9;
  dispatch_async(v8, block);

  v10 = v176;
LABEL_76:

}

void sub_233CE9ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;

  sub_233CF438C(&a35, 0);
  sub_2341CD754(&a36);

  _Unwind_Resume(a1);
}

uint64_t sub_233CEA144(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_233CEA158(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  LODWORD(v3) = 11;
  *((_QWORD *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v4 = 1681;
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CEA1C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEA1D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  LODWORD(v3) = 11;
  *((_QWORD *)&v3 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v4 = 1696;
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CEA248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEA258(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CEA2C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEA564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_233CEAB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_233CEABB8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = 3;
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  LODWORD(v4) = 3;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v5 = 1854;
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEAC58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEAC68(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = 143;
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  LODWORD(v4) = 143;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v5 = 1864;
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEAD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEAD1C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = 143;
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  LODWORD(v4) = 143;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v5 = 1875;
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEADC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEADD0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = 143;
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  LODWORD(v4) = 143;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v5 = 1887;
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEAE74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEAE84(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  id v9;
  uint64_t v10;
  id v11;
  void (*v12)(uint64_t);
  void (*v13)(uint64_t);
  void (*v14)(uint64_t);
  NSObject *v15;
  void *v16;
  _QWORD block[4];
  id v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  __int16 v25;
  __int16 v26;
  char v27;
  int v28;
  char **v29;
  char *v30[2];
  char **v31;
  char *v32[2];
  _QWORD v33[4];
  id v34;
  id v35;
  char v36[24];
  char v37[4];
  int v38;
  _BYTE v39[2];
  int v40;
  __int16 v41;
  __int16 v42;
  char v43;
  int v44;
  char **v45;
  char *v46[2];
  char **v47;
  char *v48[3];

  v33[0] = MEMORY[0x24BDAC760];
  v33[1] = 3221225472;
  v33[2] = sub_233CEB1FC;
  v33[3] = &unk_2504F0638;
  v34 = *(id *)(a1 + 32);
  v35 = *(id *)(a1 + 48);
  v23 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v24 = 0;
  v25 = 0;
  v29 = v30;
  v30[0] = 0;
  v32[0] = 0;
  v32[1] = 0;
  v30[1] = 0;
  v31 = v32;
  v21 = 0uLL;
  v22 = 0;
  v16 = (void *)MEMORY[0x23493EEA8](v33);
  v6 = objc_msgSend_nodeID(*(void **)(a1 + 40), v4, v5);
  v7 = *(_WORD *)(a1 + 56);
  v8 = *(_WORD *)(a1 + 64);
  v9 = v16;
  v10 = operator new();
  v11 = v9;
  sub_233CF1D44(v10, a2);
  *(_QWORD *)(v10 + 360) = v10 + 360;
  *(_QWORD *)(v10 + 368) = v10 + 360;
  *(_QWORD *)(v10 + 376) = 0;
  *(_QWORD *)(v10 + 384) = v10;
  *(_QWORD *)(v10 + 392) = sub_233CF1C7C;
  *(_QWORD *)(v10 + 400) = MEMORY[0x23493EEA8](v11);

  v39[0] = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v45 = v46;
  v46[0] = 0;
  v48[0] = 0;
  v48[1] = 0;
  v46[1] = 0;
  v47 = v48;
  v22 = 0;
  v21 = 0uLL;
  v37[0] = *(_BYTE *)(a1 + 72);
  if (v37[0])
    v38 = *(_DWORD *)(a1 + 76);
  v36[0] = 0;
  sub_23424A5DC((_QWORD *)v10, v6, v7, 1000, v8, v37, v36, v10 + 360, (uint64_t)&v21, (uint64_t)v39, 0);
  if ((_DWORD)v21)
  {

    v12 = *(void (**)(uint64_t))(v10 + 376);
    if (v12)
    {
      *(_QWORD *)(v10 + 376) = 0;
      v12(v10 + 360);
    }
    v13 = *(void (**)(uint64_t))(v10 + 336);
    if (v13)
    {
      *(_QWORD *)(v10 + 336) = 0;
      v13(v10 + 320);
    }
    v14 = *(void (**)(uint64_t))(v10 + 296);
    if (v14)
    {
      *(_QWORD *)(v10 + 296) = 0;
      v14(v10 + 280);
    }
    sub_233CF19DC(v10 + 88, *(char **)(v10 + 96));
    sub_233CF19DC(v10 + 64, *(char **)(v10 + 72));
    MEMORY[0x23493E704](v10, 0x10F0C40B089F3F3);
  }
  sub_233CF19DC((uint64_t)&v47, v48[0]);
  sub_233CF19DC((uint64_t)&v45, v46[0]);

  if ((_DWORD)v21)
  {
    v15 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233CEB5F4;
    block[3] = &unk_2504F04C8;
    v19 = v21;
    v20 = v22;
    v18 = *(id *)(a1 + 48);
    dispatch_async(v15, block);

  }
  sub_233CF19DC((uint64_t)&v31, v32[0]);
  sub_233CF19DC((uint64_t)&v29, v30[0]);

}

void sub_233CEB190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,id a38)
{
  void *v38;
  uint64_t v39;

  sub_233CEB4AC(v39 - 176);

  sub_233CEB4AC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_233CEB1FC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t **v5;
  MTRSetupPayload *v7;
  NSObject *v8;
  id *v9;
  _QWORD v10[4];
  uint64_t **v11;
  id v12;
  _QWORD v13[4];
  id v14;
  _BYTE v15[7];
  char v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20[3];
  uint64_t v21[3];
  _QWORD block[4];
  uint64_t **v23;
  __int128 v24;
  uint64_t v25;

  if (*(_DWORD *)a2)
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233CEB408;
    block[3] = &unk_2504F04C8;
    v24 = *a2;
    v25 = *((_QWORD *)a2 + 2);
    v4 = *(NSObject **)(a1 + 32);
    v23 = (uint64_t **)*(id *)(a1 + 40);
    dispatch_async(v4, block);
    v5 = v23;
  }
  else
  {
    v7 = [MTRSetupPayload alloc];
    *(_DWORD *)v15 = *(_DWORD *)a3;
    *(_DWORD *)&v15[3] = *(_DWORD *)(a3 + 3);
    if (*(_BYTE *)(a3 + 7))
      v17 = *(_BYTE *)(a3 + 8);
    v18 = *(_QWORD *)(a3 + 10);
    v19 = *(_WORD *)(a3 + 18);
    sub_233CF15A8(v20, a3 + 24);
    sub_233CF1A2C(v21, a3 + 48);
    v5 = sub_234043F58(v7, v15);
    sub_233CF19DC((uint64_t)v21, (char *)v21[1]);
    sub_233CF19DC((uint64_t)v20, (char *)v20[1]);
    v8 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      v10[0] = MEMORY[0x24BDAC760];
      v10[1] = 3221225472;
      v10[2] = sub_233CEB598;
      v10[3] = &unk_2504F03B0;
      v9 = &v12;
      v12 = *(id *)(a1 + 40);
      v11 = v5;
      dispatch_async(v8, v10);

    }
    else
    {
      v13[0] = MEMORY[0x24BDAC760];
      v13[1] = 3221225472;
      v13[2] = sub_233CEB4E4;
      v13[3] = &unk_2504F0208;
      v9 = &v14;
      v14 = *(id *)(a1 + 40);
      dispatch_async(v8, v13);
    }

  }
}

void sub_233CEB3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_233CEB4AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_233CEB408(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = *(_DWORD *)(a1 + 40);
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEB49C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CEB4AC(uint64_t a1)
{
  sub_233CF19DC(a1 + 48, *(char **)(a1 + 56));
  sub_233CF19DC(a1 + 24, *(char **)(a1 + 32));
  return a1;
}

void sub_233CEB4E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = 11;
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  LODWORD(v4) = 11;
  *((_QWORD *)&v4 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v5 = 1908;
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEB588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CEB598(uint64_t a1)
{
  int v3;
  const char *v4;
  int v5;
  char v6;

  v3 = 1;
  v4 = "dwnfw_open_pairing_window";
  v5 = 0;
  v6 = 3;
  sub_2341C4BEC((uint64_t)&v3);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_233CEB5F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  const char *v7;
  int v8;
  char v9;

  v6 = 1;
  v7 = "dwnfw_open_pairing_window";
  v8 = *(_DWORD *)(a1 + 40);
  v9 = 3;
  sub_2341C4BEC((uint64_t)&v6);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v2 + 16))(v2, 0, v3);

}

void sub_233CEB688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CEB698(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a2 + 72);
  *(_BYTE *)(result + 72) = v2;
  if (v2)
    *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
  return result;
}

void sub_233CEB6B4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = sub_233CEB74C;
  v6[3] = &unk_2504F04A0;
  v7 = v3;
  v4 = *(NSObject **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v5 = v3;
  dispatch_async(v4, v6);

}

uint64_t sub_233CEB74C(uint64_t a1)
{
  _DWORD v3[6];
  int v4;
  const char *v5;
  int v6;
  char v7;

  sub_234002650(*(void **)(a1 + 32), (uint64_t)v3);
  v4 = 1;
  v5 = "dwnfw_open_pairing_window";
  v6 = v3[0];
  v7 = 3;
  sub_2341C4BEC((uint64_t)&v4);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_233CEB8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_233CEB9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_233CEBF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CEC3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;

  sub_233CAF128(&a31);
  sub_233CAF128(v34);
  sub_233CAF128((uint64_t *)(v35 - 120));

  _Unwind_Resume(a1);
}

uint64_t sub_233CEC478(void *a1, void *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v8;
  id v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void *v19;

  v8 = a2;
  v9 = a4;
  objc_msgSend_objectForKeyedSubscript_(a1, v10, (uint64_t)v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    v13 = (void *)MEMORY[0x24BDD17C8];
    v14 = objc_retainAutorelease(v8);
    v17 = objc_msgSend_UTF8String(v14, v15, v16);
    objc_msgSend_stringWithFormat_(v13, v18, (uint64_t)CFSTR("%s is null when not expected to be"), v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    sub_233CEC58C(v19, 4, a5);

LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    sub_233CEC58C(v9, 4, a5);
    goto LABEL_6;
  }
  v12 = 1;
LABEL_7:

  return v12;
}

void sub_233CEC560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CEC58C(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint8_t buf[4];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  sub_234117B80(0, "NotSpecified");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = objc_retainAutorelease(v5);
    *(_DWORD *)buf = 136315138;
    v24 = objc_msgSend_UTF8String(v7, v8, v9);
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  if (sub_234114844(1u))
  {
    v12 = objc_retainAutorelease(v5);
    objc_msgSend_UTF8String(v12, v13, v14);
    sub_2341147D0(0, 1);
  }
  if (a3)
  {
    v21 = *MEMORY[0x24BDD0FD8];
    objc_msgSend_mainBundle(MEMORY[0x24BDD1488], v10, v11);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_localizedStringForKey_value_table_(v15, v16, (uint64_t)v5, &stru_2505249E8, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v17;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v18, (uint64_t)&v22, &v21, 1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v20, (uint64_t)CFSTR("MTRErrorDomain"), a2, v19);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void sub_233CEC734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEC784(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  sub_234117B80(0, "NotSpecified");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = objc_retainAutorelease(v5);
    v10 = objc_msgSend_UTF8String(v7, v8, v9);
    v17 = *(_OWORD *)a2;
    v18 = *(_QWORD *)(a2 + 16);
    v11 = sub_2341083CC((const char **)&v17, 1);
    *(_DWORD *)buf = 136315394;
    v20 = v10;
    v21 = 2080;
    v22 = v11;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "%s: %s", buf, 0x16u);
  }

  if (sub_234114844(1u))
  {
    v12 = objc_retainAutorelease(v5);
    objc_msgSend_UTF8String(v12, v13, v14);
    v17 = *(_OWORD *)a2;
    v18 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v17, 1);
    sub_2341147D0(0, 1);
  }
  if (a3)
  {
    v15 = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
    sub_2340017F0((uint64_t)MTRError, &v15);
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

}

void sub_233CEC908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEC9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_233CECBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_233CECD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_233CECE48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CECF44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CED01C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CED0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CED298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CED394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CED46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CED504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CED6E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CED7D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CED86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CED8F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEDBBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEDC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_233CEDD0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEDDC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEDE8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEDF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEDFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEE034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEE348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE3DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEE4AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEE560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEE61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEE6B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEE7C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE854(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEE8F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEEAD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEEB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEEC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEECEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEEDA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEEE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEEEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEEF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEEFE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEF1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CEF244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CEF360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEF60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  sub_233C0BB74((void **)(v7 - 96));
  sub_233CAF128((uint64_t *)(v7 - 88));

  _Unwind_Resume(a1);
}

uint64_t sub_233CEF678(uint64_t *a1, void **a2, void *a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  __CFString *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  __CFString *v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  int v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33[8];
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  const char *v39;
  int v40;
  __int128 v41;
  uint64_t v42;

  v9 = a3;
  sub_234118674(0x62FuLL, 0, v33);
  if (*a1)
    sub_23411814C(*a1);
  *a1 = v33[0];
  v33[0] = 0;
  sub_233CAF128(v33);
  if (*a1)
  {
    sub_234106C48((uint64_t)v33);
    v35 = 0;
    v36 = 0;
    v34 = &unk_250504030;
    v37 = 0;
    sub_233CAF098((uint64_t)&v34, a1, 1);
    sub_234106CA8((uint64_t)v33, (uint64_t)&v34, 0xFFFFFFFF, (uint64_t)&v41);
    v41 = 0uLL;
    v42 = 0;
    sub_233CE4434(v9, (char *)v33, 0x100uLL, (uint64_t)&v41);
    if ((_DWORD)v41)
    {
      v10 = CFSTR("Unable to encode data-value to TLV");
      v11 = &v32;
    }
    else
    {
      sub_233C115F0((uint64_t)v33, a1, &v30);
      v41 = v30;
      v42 = v31;
      if ((_DWORD)v30)
      {
        v10 = CFSTR("Unable to encode data-value to TLV");
        v11 = &v29;
      }
      else
      {
        v14 = (_QWORD *)*a1;
        if (*(_QWORD *)*a1)
        {
          v15 = v14[2];
          sub_233CF1E4C(a2, v15, 1uLL);
          if (!*a2)
          {
            v26 = 11;
            v27 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
            v28 = 2842;
            sub_233CEC784(CFSTR("Unable to allocate decoding buffer"), (uint64_t)&v26, a5);
            goto LABEL_10;
          }
          v16 = 0;
          while (1)
          {
            v17 = *a1;
            if (!*a1)
              break;
            v18 = *(_QWORD *)(v17 + 24);
            if (v18 > v15)
            {
              v25 = 3;
              v20 = CFSTR("Encoding buffer size is bigger than it claimed");
              v21 = 2850;
              v22 = &v25;
              goto LABEL_26;
            }
            memcpy((char *)*a2 + v16, *(const void **)(v17 + 8), v18);
            v19 = *(_QWORD *)(*a1 + 24);
            v16 += v19;
            v15 -= v19;
            sub_233CF1DD4((uint64_t **)a1);
          }
          if (v15)
          {
            v24 = 3;
            v20 = CFSTR("Did not copy all data from Encoding buffer for some reason");
            v21 = 2861;
            v22 = &v24;
LABEL_26:
            *((_QWORD *)v22 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framew"
                                   "ork/CHIP/MTRBaseDevice.mm";
            v22[4] = v21;
            sub_233CEC784(v20, (uint64_t)v22, a5);
            goto LABEL_10;
          }
          sub_234104498(a4, (uint64_t)*a2, v16);
        }
        else
        {
          sub_234104498(a4, v14[1], v14[3]);
        }
        sub_234105EE4(a4, 256, &v30);
        v41 = v30;
        v42 = v31;
        if (!(_DWORD)v30)
        {
          v12 = 1;
          goto LABEL_11;
        }
        v10 = CFSTR("data-value TLV encoding did not create a TLV element");
        v11 = (char *)&v23;
      }
    }
    *(_OWORD *)v11 = v41;
    *((_QWORD *)v11 + 2) = v42;
    sub_233CEC784(v10, (uint64_t)v11, a5);
LABEL_10:
    v12 = 0;
LABEL_11:
    v34 = &unk_250504030;
    sub_233CAF128(&v36);
    sub_233CAF128(&v35);
    goto LABEL_12;
  }
  v38 = 11;
  v39 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  v40 = 2819;
  sub_233CEC784(CFSTR("Unable to allocate encoding buffer"), (uint64_t)&v38, a5);
  v12 = 0;
LABEL_12:

  return v12;
}

void sub_233CEF990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v40;
  uint64_t *v41;

  sub_233CAF128(&a40);
  sub_233CAF128(v41);

  _Unwind_Resume(a1);
}

void sub_233CEFA9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEFD3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CEFE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CF02E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v10 = v7;

  sub_233C0BB74((void **)(v9 - 112));
  sub_233CAF128((uint64_t *)(v9 - 104));

  _Unwind_Resume(a1);
}

_QWORD *sub_233CF0434(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_233CF04E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CF05A4(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (!*(_BYTE *)(result + 112))
  {
    *(_BYTE *)(result + 112) = 1;
    v4 = *a3;
    v5 = *((_QWORD *)a3 + 2);
    v3 = *(_QWORD *)(result + 64);
    if (!v3)
      sub_233CF1E98();
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t sub_233CF05F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  int v7;
  uint64_t v8;

  if (!*(_BYTE *)(a1 + 112))
  {
    LODWORD(v6) = 33;
    *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP"
                           "/MTRBaseDevice.mm";
    v7 = 1274;
    sub_233CF05A4(a1, a2, &v6);
  }
  v8 = a2;
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
    sub_233CF1E98();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8);
}

void sub_233CF0674(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;

  objc_msgSend_dictionary(MEMORY[0x24BDBCED8], a2, a3);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_2561591D8;
  qword_2561591D8 = v3;

  v5 = objc_alloc_init(MEMORY[0x24BDD1648]);
  v6 = (void *)qword_2561591D0;
  qword_2561591D0 = (uint64_t)v5;

}

uint64_t sub_233CF06BC(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_250514968;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 113) = 1;
  sub_2341CDA90((_QWORD *)a1, a2);
  return a1;
}

void sub_233CF071C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2341CD754(v1);
  _Unwind_Resume(a1);
}

void sub_233CF0730(uint64_t a1, void *a2)
{
  sub_233CF0B54(a1, 0, a2);
}

uint64_t sub_233CF073C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  uint64_t v11;

  v9 = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_2504F07C0;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = a4;
  *(_QWORD *)(a1 + 24) = MEMORY[0x23493EEA8](a3);
  v11 = MEMORY[0x23493EEA8](v10);

  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = sub_233CF0EBC;
  return a1;
}

void sub_233CF07C0(id *a1)
{
  sub_233CF0F54(a1);
  JUMPOUT(0x23493E704);
}

void sub_233CF07E4(_QWORD *a1, uint64_t a2, _BYTE *a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v9;
  _BYTE *v10;
  NSObject *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a4;
  v8 = (void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x23493EEA8](a1[4]);
  v9 = (void *)a1[4];
  a1[4] = 0;

  if (v7)
  {
    sub_233CF0B54((uint64_t)a1, v7, 0);
  }
  else
  {
    v19 = 0uLL;
    v20 = 0;
    v10 = sub_233C25EA4(a3);
    ((void (**)(__int128 *__return_ptr, _QWORD, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD *))v8)[2](&v19, v8, a2, v10, a1[5], a1[6], a1);
    if ((_DWORD)v19)
    {
      sub_234117B80(9u, "Controller");
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v17 = v19;
        v18 = v20;
        v12 = sub_2341083CC((const char **)&v17, 1);
        *(_DWORD *)buf = 136315394;
        v22 = 0x80000002342AA222 & 0x7FFFFFFFFFFFFFFFLL;
        v23 = 2080;
        v24 = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Failure performing action. C++-mangled success callback type: '%s', error: %s", buf, 0x16u);
      }

      if (sub_234114844(1u))
      {
        v15 = v19;
        v16 = v20;
        sub_2341083CC((const char **)&v15, 1);
        sub_2341147D0(9u, 1);
      }
      v13 = v19;
      v14 = v20;
      sub_233CF0EBC((uint64_t)a1, (uint64_t)&v13);
    }
  }

}

void sub_233CF09CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF09FC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_date(MEMORY[0x24BDBCE60], a2, a3);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;

  v6 = (void *)MEMORY[0x24BDD17C8];
  v7 = arc4random();
  objc_msgSend_stringWithFormat_(v6, v8, (uint64_t)CFSTR("Response Time: %s+%u"), 0x80000002342AA222 & 0x7FFFFFFFFFFFFFFFLL, v7);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;

  sub_234117B80(9u, "Controller");
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v14 = objc_msgSend_UTF8String(*(void **)(a1 + 64), v12, v13);
    *(_DWORD *)buf = 136315138;
    v19 = v14;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
  }

  result = sub_234114844(3u);
  if ((_DWORD)result)
  {
    objc_msgSend_UTF8String(*(void **)(a1 + 64), v16, v17);
    return sub_2341147D0(9u, 3);
  }
  return result;
}

void sub_233CF0B3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CF0B54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  _QWORD block[4];
  id v21;
  id v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v8 = *(NSObject **)(a1 + 8);
    if (v8)
    {
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 3221225472;
      block[2] = sub_233CF0D48;
      block[3] = &unk_2504EE5A0;
      v23 = a1;
      v21 = v6;
      v22 = v5;
      dispatch_async(v8, block);

    }
    else
    {
      sub_234117B80(9u, "Controller");
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v12 = objc_msgSend_UTF8String(*(void **)(a1 + 64), v10, v11);
        objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 56), v13, v14);
        *(_DWORD *)buf = 136315394;
        v25 = v12;
        v26 = 2048;
        v27 = -v15;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "%s %f seconds: can't dispatch response; no queue",
          buf,
          0x16u);
      }

      if (sub_234114844(3u))
      {
        objc_msgSend_UTF8String(*(void **)(a1 + 64), v16, v17);
        objc_msgSend_timeIntervalSinceNow(*(void **)(a1 + 56), v18, v19);
        sub_2341147D0(9u, 3);
      }
      if (!*(_BYTE *)(a1 + 16))
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    }
  }

}

void sub_233CF0D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_BYTE *sub_233CF0D48(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  _BYTE **v13;
  uint64_t v14;
  _BYTE *result;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  sub_234117B80(9u, "Controller");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend_UTF8String(*(void **)(*(_QWORD *)(a1 + 48) + 64), v3, v4);
    objc_msgSend_timeIntervalSinceNow(*(void **)(*(_QWORD *)(a1 + 48) + 56), v6, v7);
    *(_DWORD *)buf = 136315394;
    v17 = v5;
    v18 = 2048;
    v19 = -v8;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "%s %f seconds", buf, 0x16u);
  }

  if (sub_234114844(3u))
  {
    objc_msgSend_UTF8String(*(void **)(*(_QWORD *)(a1 + 48) + 64), v9, v10);
    objc_msgSend_timeIntervalSinceNow(*(void **)(*(_QWORD *)(a1 + 48) + 56), v11, v12);
    sub_2341147D0(9u, 3);
  }
  v14 = *(_QWORD *)(a1 + 48);
  v13 = (_BYTE **)(a1 + 48);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v14 + 24) + 16))(*(_QWORD *)(v14 + 24), *(v13 - 2));
  result = *v13;
  if (*v13)
  {
    if (!result[16])
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_233CF0EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CF0EBC(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  sub_2340017F0((uint64_t)MTRError, &v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_233CF0B54(a1, v3, 0);

}

void sub_233CF0F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CF0F30(id *a1)
{
  sub_233CF0F54(a1);
  JUMPOUT(0x23493E704);
}

id *sub_233CF0F54(id *a1)
{

  return a1;
}

void sub_233CF0F9C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v11[5];

  v3 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  objc_msgSend_deviceController(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_nodeID(v3, v7, v8);
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_233CF10F8;
  v11[3] = &unk_2504F07E0;
  v11[4] = a1;
  objc_msgSend_getSessionForCommissioneeDevice_completion_(v6, v10, v9, v11);

}

void sub_233CF1040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_233CF105C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  const char *v6;
  _QWORD v7[5];

  v5 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 3221225472;
  v7[2] = sub_233CF1108;
  v7[3] = &unk_2504F07E0;
  v7[4] = a1;
  objc_msgSend_getSessionForNode_completion_(v5, v6, a2, v7);

}

void sub_233CF10E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF10F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_233CF1108(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_233CF1118(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_233CF11B0((uint64_t)v6, a2);
  sub_233CF1214(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_233CF11B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *sub_233CF1214(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_233CF137C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

void sub_233CF1388(uint64_t a1)
{
  id v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v12, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v2);
        objc_msgSend_cleanup(*(void **)(*((_QWORD *)&v12 + 1) + 8 * v8++), v4, v5, (_QWORD)v12);
      }
      while (v6 != v8);
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v4, (uint64_t)&v12, v16, 16);
    }
    while (v6);
  }

  objc_msgSend_removeAllObjects(*(void **)(a1 + 32), v9, v10);
  v11 = *(void **)(a1 + 48);
  if (v11)
    dispatch_async(*(dispatch_queue_t *)(a1 + 40), v11);
}

void sub_233CF148C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_233CF14AC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  id v15;

  v1 = *(void **)(a1 + 40);
  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 56);
  v15 = *(id *)(a1 + 32);
  v4 = v1;
  v5 = v2;
  v6 = v3;
  objc_msgSend_lock((void *)qword_2561591D0, v7, v8);
  objc_msgSend_objectForKeyedSubscript_((void *)qword_2561591D8, v9, (uint64_t)v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v10;
  if (v10)
    objc_msgSend_addObjectsFromArray_(v10, v11, (uint64_t)v15);
  else
    objc_msgSend_setObject_forKeyedSubscript_((void *)qword_2561591D8, v11, (uint64_t)v15, v4);
  objc_msgSend_unlock((void *)qword_2561591D0, v13, v14);
  if (v6)
    dispatch_async(v5, v6);

}

void sub_233CF1578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t *sub_233CF15A8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_233CF15FC(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_233CF15E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_233CF19DC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_233CF15FC(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_233CF1680(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_233CF1680(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_233CF1700(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_233CF18A8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_233C0DA3C(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_233CF1700(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_233CF18A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_233CF1928((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_233CF190C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_233CF1990(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_233CF1928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_233C0DAF8((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

void sub_233CF1990(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 71) < 0)
      operator delete(__p[6]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_233CF19DC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_233CF19DC(a1, *(_QWORD *)a2);
    sub_233CF19DC(a1, *((_QWORD *)a2 + 1));
    if (a2[71] < 0)
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

uint64_t *sub_233CF1A2C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_233CF1A80(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_233CF1A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_233CF19DC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_233CF1A80(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_233CF1B04(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_233CF1B04(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)sub_233CF1700(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_233CF1B84((uint64_t)a1, a4, (uint64_t)&v8);
    sub_233C0DA3C(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_233CF1B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x68uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_233CF1C04((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_233CF1BE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_233CF1990(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_233CF1C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_233C0DAF8((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t sub_233CF1C7C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(uint64_t);
  void (*v7)(uint64_t);
  void (*v8)(uint64_t);
  __int128 v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 400);
  v11 = *((_QWORD *)a3 + 2);
  v10 = *a3;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v5 + 16))(v5, &v10, a4);

  v6 = *(void (**)(uint64_t))(a1 + 376);
  if (v6)
  {
    *(_QWORD *)(a1 + 376) = 0;
    v6(a1 + 360);
  }
  v7 = *(void (**)(uint64_t))(a1 + 336);
  if (v7)
  {
    *(_QWORD *)(a1 + 336) = 0;
    v7(a1 + 320);
  }
  v8 = *(void (**)(uint64_t))(a1 + 296);
  if (v8)
  {
    *(_QWORD *)(a1 + 296) = 0;
    v8(a1 + 280);
  }
  sub_233CF19DC(a1 + 88, *(char **)(a1 + 96));
  sub_233CF19DC(a1 + 64, *(char **)(a1 + 72));
  return MEMORY[0x23493E704](a1, 0x10F0C40B089F3F3);
}

uint64_t sub_233CF1D44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = 0;
  *(_WORD *)(result + 50) = 0;
  *(_BYTE *)(result + 52) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 42) = 0;
  *(_WORD *)(result + 46) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = result + 96;
  *(_WORD *)(result + 112) = 0;
  *(_BYTE *)(result + 114) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_WORD *)(result + 128) = 0;
  *(_BYTE *)(result + 130) = 0;
  *(_DWORD *)(result + 228) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = result + 280;
  *(_QWORD *)(result + 288) = result + 280;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = result;
  *(_QWORD *)(result + 312) = sub_23424BC74;
  *(_QWORD *)(result + 320) = result + 320;
  *(_QWORD *)(result + 328) = result + 320;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = result;
  *(_QWORD *)(result + 352) = sub_23424BF50;
  return result;
}

uint64_t *sub_233CF1DD4(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *v2;
  if (*v2)
  {
    sub_234118648(*v2);
    v2 = *a1;
    v5 = v3;
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
  }
  sub_23411814C((uint64_t)v2);
  v3 = v5;
LABEL_6:
  *a1 = (uint64_t *)v3;
  v5 = 0;
  return sub_233CAF128(&v5);
}

void sub_233CF1E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_233CAF128((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_233CF1E4C(void **a1, size_t a2, size_t a3)
{
  void *v6;
  void *result;

  v6 = *a1;
  if (v6)
  {
    j__free(v6);
    *a1 = 0;
  }
  result = sub_234114780(a2, a3);
  *a1 = result;
  return result;
}

void sub_233CF1E98()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_2504F0878;
  __cxa_throw(exception, (struct type_info *)&unk_2504F0850, (void (*)(void *))std::exception::~exception);
}

void sub_233CF1ED0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23493E704);
}

void sub_233CF1EF4(void (****a1)(_QWORD), void (***a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    (**v2)(v2);
    j__free(v2);
  }
}

uint64_t sub_233CF1F38(uint64_t a1)
{
  void (****v2)(_QWORD);
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void **v16;

  v2 = (void (****)(_QWORD))(a1 + 264);
  sub_233CF1EF4((void (****)(_QWORD))(a1 + 264), 0);
  sub_233CF1EF4(v2, 0);
  *(_QWORD *)(a1 + 200) = off_250502E50;
  v16 = (void **)(a1 + 232);
  sub_233CF20BC(&v16);
  v3 = *(_QWORD **)(a1 + 192);
  if (v3 == (_QWORD *)(a1 + 168))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 168);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 160);
  if (v5 == (_QWORD *)(a1 + 136))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 136);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(a1 + 128);
  if (v7 == (_QWORD *)(a1 + 104))
  {
    v8 = 4;
    v7 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(a1 + 96);
  if (v9 == (_QWORD *)(a1 + 72))
  {
    v10 = 4;
    v9 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(_QWORD **)(a1 + 64);
  if (v11 == (_QWORD *)(a1 + 40))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = *(_QWORD **)(a1 + 32);
  if (v13 == (_QWORD *)(a1 + 8))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 8);
    goto LABEL_30;
  }
  if (v13)
  {
    v14 = 5;
LABEL_30:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return a1;
}

void sub_233CF20BC(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_233CAF128(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_233CF212C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v34;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_250500918;
  v34 = a10;
  v18 = a9;
  v19 = a8;
  v20 = a7;
  v21 = a6;
  v22 = a5;
  v23 = a4;
  v24 = a3;
  *(_QWORD *)(a1 + 24) = MEMORY[0x23493EEA8](a2);
  v25 = MEMORY[0x23493EEA8](v24);

  *(_QWORD *)(a1 + 32) = v25;
  v26 = MEMORY[0x23493EEA8](v23);

  *(_QWORD *)(a1 + 40) = v26;
  v27 = MEMORY[0x23493EEA8](v22);

  *(_QWORD *)(a1 + 48) = v27;
  v28 = MEMORY[0x23493EEA8](v21);

  *(_QWORD *)(a1 + 56) = v28;
  v29 = MEMORY[0x23493EEA8](v19);

  *(_QWORD *)(a1 + 64) = v29;
  v30 = MEMORY[0x23493EEA8](v18);

  *(_QWORD *)(a1 + 72) = v30;
  v31 = MEMORY[0x23493EEA8](v34);

  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = off_250502E50;
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 107) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v32 = MEMORY[0x23493EEA8](v20);

  *(_QWORD *)(a1 + 176) = v32;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_233CF22CC(uint64_t a1)
{
  sub_233CF2738(a1);
  JUMPOUT(0x23493E704);
}

void sub_233CF22F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  MTREventReport *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  MTREventReport *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  int v21;
  const char *v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  if (a4)
  {
    v6 = 0;
    sub_234001FF8((uint64_t)MTRError, a4);
    v7 = objc_claimAutoreleasedReturnValue();
LABEL_3:
    v8 = (void *)v7;
    goto LABEL_4;
  }
  if (!a3)
  {
    v6 = 0;
    LODWORD(v28) = 47;
    *((_QWORD *)&v28 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRBaseDevice.mm";
    v29 = 3134;
    sub_2340017F0((uint64_t)MTRError, &v28);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_3;
  }
  sub_2340393CC(a2, a3, (uint64_t)&v26);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v14;
  if ((_DWORD)v26)
  {
    if ((_DWORD)v26 == 182)
    {
LABEL_13:
      v8 = 0;
      goto LABEL_14;
    }

    v24 = v26;
    v25 = v27;
    sub_2340017F0((uint64_t)MTRError, &v24);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
  }
  else
  {
    v8 = 0;
  }
LABEL_4:
  v9 = *(void **)(a1 + 16);
  if (!v9)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
    v23 = 3151;
    sub_234009C44(a1, (uint64_t)&v21, 1);
    goto LABEL_14;
  }
  if (!v8)
  {
    v15 = [MTREventReport alloc];
    objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x24BDD16E0], v16, *(_QWORD *)(a2 + 16));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)objc_msgSend_initWithPath_eventNumber_priority_timestamp_value_(v15, v18, a2, v17, *(unsigned __int8 *)(a2 + 24), a2 + 32, v6);
    objc_msgSend_addObject_(v9, v20, (uint64_t)v19);

    goto LABEL_13;
  }
  v10 = [MTREventReport alloc];
  v12 = (void *)objc_msgSend_initWithPath_error_(v10, v11, a2, v8);
  objc_msgSend_addObject_(v9, v13, (uint64_t)v12);

LABEL_14:
}

void sub_233CF24C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CF2500(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  MTRAttributeReport *v10;
  const char *v11;
  void *v12;
  const char *v13;
  void *v14;
  int v15;
  const char *v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  int v24;
  const char *v25;
  int v26;

  if (*(unsigned __int8 *)(a2 + 14) >= 2u)
  {
    v24 = 3;
    v25 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
    v26 = 3170;
    sub_234009C44(a1, (uint64_t)&v24, 1);
    return;
  }
  if (*a4)
  {
    v6 = 0;
    sub_234001FF8((uint64_t)MTRError, a4);
    v7 = objc_claimAutoreleasedReturnValue();
LABEL_5:
    v8 = (void *)v7;
    goto LABEL_6;
  }
  if (!a3)
  {
    v6 = 0;
    LODWORD(v22) = 47;
    *((_QWORD *)&v22 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHI"
                            "P/MTRBaseDevice.mm";
    v23 = 3179;
    sub_2340017F0((uint64_t)MTRError, &v22);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  sub_23400DD80(a2, a3, (uint64_t)&v20);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v14;
  if (!(_DWORD)v20)
  {
    v8 = 0;
    goto LABEL_6;
  }
  if ((_DWORD)v20 != 181)
  {

    v18 = v20;
    v19 = v21;
    sub_2340017F0((uint64_t)MTRError, &v18);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = 0;
LABEL_6:
    v9 = *(void **)(a1 + 8);
    if (v9)
    {
      v10 = [MTRAttributeReport alloc];
      v12 = (void *)objc_msgSend_initWithPath_value_error_(v10, v11, a2, v6, v8);
      objc_msgSend_addObject_(v9, v13, (uint64_t)v12);

    }
    else
    {
      v15 = 3;
      v16 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
      v17 = 3196;
      sub_234009C44(a1, (uint64_t)&v15, 1);
    }
    goto LABEL_13;
  }
  v8 = 0;
LABEL_13:

}

void sub_233CF26BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_233CF26DC(_BYTE *a1@<X3>, uint64_t a2@<X8>)
{
  *a1 = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/ReadClient.h";
  *(_DWORD *)(a2 + 16) = 249;
}

void sub_233CF26FC(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/ReadClient.h";
  *(_DWORD *)(a2 + 16) = 260;
}

uint64_t sub_233CF2738(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;

  *(_QWORD *)a1 = &unk_250500918;
  v2 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 184);
  if (v3)
  {
    dispatch_block_cancel(v3);
    v4 = *(void **)(a1 + 184);
  }
  else
  {
    v4 = 0;
  }

  v5 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 88) = off_250502E50;
  v8 = (void **)(a1 + 120);
  sub_233CF20BC(&v8);

  return a1;
}

uint64_t sub_233CF284C(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;

  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_2504F0970;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = result + 24;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 48;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = result + 72;
  *(_QWORD *)(result + 96) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 112) = result + 120;
  *(_QWORD *)(result + 160) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_QWORD *)(result + 152) = result + 160;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = off_250502E50;
  *(_WORD *)(result + 184) = 0;
  *(_BYTE *)(result + 186) = 0;
  *(_BYTE *)(result + 200) = 0;
  *(_QWORD *)(result + 188) = 0;
  *(_DWORD *)(result + 195) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 232) = result;
  *(_WORD *)(result + 240) = -1;
  *(_DWORD *)(result + 244) = -1;
  *(_BYTE *)(result + 248) = 1;
  v3 = *a3;
  *(_BYTE *)(result + 136) = v3;
  if (v3)
    *(_QWORD *)(result + 144) = *((_QWORD *)a3 + 1);
  return result;
}

uint64_t sub_233CF2900(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_2504F0970;
  *(_QWORD *)(a1 + 176) = off_250502E50;
  v4 = (void **)(a1 + 208);
  sub_233CF20BC(&v4);
  sub_233CAF1EC(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_233CF2B80(a1 + 112, *(_QWORD **)(a1 + 120));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_233CAF1EC(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_233CAF1EC(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_233CF2BC8(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_233CF29A0(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_2504F0970;
  *(_QWORD *)(a1 + 176) = off_250502E50;
  v4 = (void **)(a1 + 208);
  sub_233CF20BC(&v4);
  sub_233CAF1EC(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_233CF2B80(a1 + 112, *(_QWORD **)(a1 + 120));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_233CAF1EC(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_233CAF1EC(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_233CF2BC8(a1 + 16, *(_QWORD **)(a1 + 24));
  return MEMORY[0x23493E704](a1, 0x10B1C40036DCBC2);
}

uint64_t sub_233CF2A54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF2A64(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v5 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v3, a2, &v5);
}

uint64_t sub_233CF2AA0(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 72))(v2, &v4);
}

uint64_t sub_233CF2ADC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 72);
  sub_233CAF1EC(a1 + 64, *(_QWORD **)(a1 + 72));
  *(v3 - 1) = v3;
  *v3 = 0;
  v3[1] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*(v3 - 8) + 80))(*(v3 - 8), a2);
}

uint64_t sub_233CF2B20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF2B30@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  v3 = *(unsigned __int8 *)(result + 136);
  *(_BYTE *)a2 = v3;
  if (v3)
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(result + 144);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/ClusterStateCache.h";
  *(_DWORD *)(a3 + 16) = 290;
  return result;
}

uint64_t sub_233CF2B60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF2B70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

void sub_233CF2B80(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_233CF2B80(a1, *a2);
    sub_233CF2B80(a1, a2[1]);
    sub_233CAF128(a2 + 10);
    operator delete(a2);
  }
}

void sub_233CF2BC8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_233CF2BC8(a1, *a2);
    sub_233CF2BC8(a1, a2[1]);
    sub_233CF2C14((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void sub_233CF2C14(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_233CF2C14(a1, *a2);
    sub_233CF2C14(a1, a2[1]);
    sub_233CF2C60((uint64_t)(a2 + 5), (void **)a2[6]);
    operator delete(a2);
  }
}

void sub_233CF2C60(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_233CF2C60(a1, *a2);
    sub_233CF2C60(a1, a2[1]);
    if (a2[5] == (void *)1)
    {
      a2[7] = 0;
      sub_233C0BB74(a2 + 6);
    }
    operator delete(a2);
  }
}

void sub_233CF2CB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2504F0A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_233CF2CC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2504F0A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CF2D00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_233CF2D58(uint64_t a1)
{

  return a1;
}

void sub_233CF2D80(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF2DB8(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F0A78;
  v2[1] = *(id *)(a1 + 8);
  *((_BYTE *)v2 + 16) = *(_BYTE *)(a1 + 16);
  return v2;
}

id sub_233CF2E04(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = &off_2504F0A78;
  result = *(id *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  return result;
}

void sub_233CF2E44(uint64_t a1)
{

}

void sub_233CF2E4C(id *a1)
{

  operator delete(a1);
}

void sub_233CF2E74(uint64_t a1, uint64_t a2, id *a3)
{
  _BYTE *v6;
  id v7;
  void *v8;
  MTRAttributePath *v9;
  const char *v10;
  id v11;
  const char *v12;
  void *v13;
  const char *v14;
  void *v15;
  void *v16;
  _BYTE *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  void *v24;
  MTRAttributePath *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const __CFString *v29;
  const __CFString *v30;
  id v31;
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 16) && (v6 = (_BYTE *)(a2 + 16), *(_BYTE *)(a2 + 16)))
  {
    v7 = *a3;
    v8 = *(void **)(a1 + 8);
    v29 = CFSTR("attributePath");
    v9 = [MTRAttributePath alloc];
    v11 = (id)objc_msgSend_initWithPath_(v9, v10, a2);
    v30 = CFSTR("data");
    v31 = v11;
    objc_msgSend_objectForKeyedSubscript_(v7, v12, (uint64_t)CFSTR("type"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_objectForKeyedSubscript_(v7, v14, (uint64_t)CFSTR("value"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x24BDD16E0];
    v17 = sub_233C20E2C(v6);
    objc_msgSend_numberWithUnsignedInt_(v16, v18, *(unsigned int *)v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    sub_233CE41BC(v13, v15, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = v20;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v21, (uint64_t)&v31, &v29, 2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v8, v23, (uint64_t)v22);

  }
  else
  {
    v24 = *(void **)(a1 + 8);
    v29 = CFSTR("attributePath");
    v25 = [MTRAttributePath alloc];
    v7 = (id)objc_msgSend_initWithPath_(v25, v26, a2);
    v30 = CFSTR("data");
    v31 = v7;
    v11 = *a3;
    v32 = v11;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v27, (uint64_t)&v31, &v29, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v24, v28, (uint64_t)v13);
  }

}

void sub_233CF3058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF30D0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0AE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF310C()
{
  return &unk_2504F0AE8;
}

BOOL sub_233CF3118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_233CF3164(uint64_t a1)
{

  return a1;
}

void sub_233CF318C(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF31C4(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_2504F0B08;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_233CF3208(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_2504F0B08;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_233CF323C(uint64_t a1)
{

}

void sub_233CF3244(id *a1)
{

  operator delete(a1);
}

void sub_233CF326C(uint64_t a1, uint64_t a2, id *a3)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  id v8;

  v4 = *(void **)(a1 + 8);
  v8 = *a3;
  objc_msgSend_eventReportForHeader_andData_(MTRBaseDevice, v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v4, v7, (uint64_t)v6);

}

void sub_233CF32DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF32FC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0B78))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF3338()
{
  return &unk_2504F0B78;
}

uint64_t sub_233CF3344(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504F0B98;
  sub_233CF2D00(a1 + 16);

  return a1;
}

void sub_233CF337C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504F0B98;
  sub_233CF2D00(a1 + 16);

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF33C4(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x20uLL);
  *v2 = &off_2504F0B98;
  v3 = *(id *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v2[1] = v3;
  v2[2] = v5;
  v2[3] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return v2;
}

id sub_233CF3428(uint64_t a1, _QWORD *a2)
{
  id result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = &off_2504F0B98;
  result = *(id *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  a2[1] = result;
  a2[2] = v6;
  a2[3] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_233CF3480(uint64_t a1)
{
  sub_233CF2D00(a1 + 16);

}

void sub_233CF34A8(id *a1)
{
  sub_233CF2D00((uint64_t)(a1 + 2));

  operator delete(a1);
}

__n128 sub_233CF34D8(uint64_t a1, uint64_t *a2, uint64_t *a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  MTRAttributePath *v7;
  unint64_t v8;
  const char *v9;
  __CFString *v10;
  __CFString *v11;
  const char *v12;
  void *v13;
  const char *v14;
  __n128 result;
  void *v16;
  MTREventPath *v17;
  const char *v18;
  void *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;
  __n128 *v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  unint64_t v30;
  _QWORD v31[2];
  const __CFString *v32;
  const __CFString *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  v25 = *a4;
  v26 = a4[1].n128_u64[0];
  if (*a2)
  {
    v6 = *(void **)(a1 + 8);
    v31[0] = CFSTR("attributePath");
    v7 = [MTRAttributePath alloc];
    v8 = *(_QWORD *)v4;
    v27.n128_u32[2] = *(_DWORD *)(v4 + 8);
    v27.n128_u64[0] = v8;
    v27.n128_u16[6] = 0;
    v27.n128_u8[14] = 0;
    LOBYTE(v28) = 0;
    v10 = (__CFString *)objc_msgSend_initWithPath_(v7, v9, (uint64_t)&v27);
    v31[1] = CFSTR("error");
    v32 = v10;
    v29 = v25;
    v30 = v26;
    sub_2340017F0((uint64_t)MTRError, (__int128 *)&v29);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v33 = v11;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v12, (uint64_t)&v32, v31, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v6, v14, (uint64_t)v13);

  }
  else if (v5)
  {
    v16 = *(void **)(a1 + 8);
    v32 = CFSTR("eventPath");
    v17 = [MTREventPath alloc];
    v19 = (void *)objc_msgSend_initWithPath_(v17, v18, v5);
    v29.n128_u64[0] = (unint64_t)v19;
    v33 = CFSTR("error");
    v27 = v25;
    v28 = v26;
    sub_2340017F0((uint64_t)MTRError, (__int128 *)&v27);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v29.n128_u64[1] = (unint64_t)v20;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v21, (uint64_t)&v29, &v32, 2);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v16, v23, (uint64_t)v22);

  }
  else
  {
    v24 = *(__n128 **)(a1 + 16);
    result = *a4;
    v24[1].n128_u64[0] = a4[1].n128_u64[0];
    *v24 = result;
  }
  return result;
}

void sub_233CF36B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF3710(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0C08))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF374C()
{
  return &unk_2504F0C08;
}

uint64_t sub_233CF3758(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504F0C28;
  sub_233CF2D00(a1 + 16);

  return a1;
}

void sub_233CF3790(uint64_t a1)
{
  *(_QWORD *)a1 = &off_2504F0C28;
  sub_233CF2D00(a1 + 16);

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF37D8(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v2 = operator new(0x48uLL);
  *v2 = &off_2504F0C28;
  v3 = *(id *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v2[1] = v3;
  v2[2] = v5;
  v2[3] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v2 + 3) = v8;
  v2[8] = *(_QWORD *)(a1 + 64);
  return v2;
}

__n128 sub_233CF384C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  *(_QWORD *)a2 = &off_2504F0C28;
  v4 = *(id *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v10;
  return result;
}

void sub_233CF38B4(uint64_t a1)
{
  sub_233CF2D00(a1 + 16);

}

void sub_233CF38DC(id *a1)
{
  sub_233CF2D00((uint64_t)(a1 + 2));

  operator delete(a1);
}

void sub_233CF390C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  void (*v6)(uint64_t, __int128 *);
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *(__int128 **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)v4)
  {
    v6 = *(void (**)(uint64_t, __int128 *))(a1 + 48);
    v7 = *((_QWORD *)v4 + 2);
    v11 = *v4;
    v12 = v7;
    v6(v5, &v11);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(a1 + 40))(v5, *(_QWORD *)(a1 + 8));
  }
  v8 = *(void **)(a1 + 56);
  if (v8)
    j__free(v8);
  v9 = *(void **)(a1 + 64);
  if (v9)
    j__free(v9);
  if (v3)
  {
    v10 = (void *)sub_233CF1F38(v3);
    j__free(v10);
  }
}

uint64_t sub_233CF3998(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0C98))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF39D4()
{
  return &unk_2504F0C98;
}

uint64_t sub_233CF39E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;

  *(_QWORD *)a1 = &off_2504F0CB8;
  v18 = a1 + 40;
  sub_233CF11B0(a1 + 8, a6);
  sub_233CF11B0(v18, a7);
  sub_233CF11B0(a1 + 72, a8);
  sub_233CF11B0(a1 + 104, a9);
  sub_233CF11B0(a1 + 136, a10);
  sub_233CF11B0(a1 + 168, a11);
  *(_QWORD *)(a1 + 200) = off_250502E50;
  *(_WORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 210) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = a1;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a2;
  *(_QWORD *)(a1 + 280) = a4;
  *(_QWORD *)(a1 + 288) = a3;
  *(_QWORD *)(a1 + 296) = a5;
  return a1;
}

void sub_233CF3AD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v8 = (_QWORD *)v1[20];
  if (v8 == v6)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v9 = 5;
    v6 = (_QWORD *)v1[20];
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v9))(v6);
LABEL_6:
  v10 = (_QWORD *)v1[16];
  if (v10 == v5)
  {
    v11 = 4;
    v10 = v5;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = (_QWORD *)v1[12];
  if (v12 == v4)
  {
    v13 = 4;
    v12 = v4;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  v14 = (_QWORD *)v1[8];
  if (v14 == v3)
  {
    v15 = 4;
    v14 = v3;
  }
  else
  {
    if (!v14)
      goto LABEL_21;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
  v16 = (_QWORD *)v1[4];
  if (v16 == v2)
  {
    v17 = 4;
    v16 = v2;
  }
  else
  {
    if (!v16)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  _Unwind_Resume(exception_object);
}

void sub_233CF3BE4(uint64_t a1)
{
  sub_233CF1F38(a1);
  JUMPOUT(0x23493E704);
}

void sub_233CF3C08(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v17 = 0;
  if (!a1[8])
    goto LABEL_20;
  v6 = a1[35];
  if (!v6)
    goto LABEL_20;
  v7 = a1[37];
  if (v7)
  {
    v8 = 12 * v7;
    v9 = a1[35];
    while (1)
    {
      v10 = *(unsigned __int16 *)(v9 + 8);
      if ((v10 == 0xFFFF || v10 == *a2) && (*(_DWORD *)v9 == -1 || *(_DWORD *)v9 == *((_DWORD *)a2 + 1)))
      {
        v13 = *(_DWORD *)(v9 + 4);
        if (v13 == -1 || v13 == *((_DWORD *)a2 + 2))
          break;
      }
      v9 += 12;
      v8 -= 12;
      if (!v8)
        goto LABEL_20;
    }
  }
  else
  {
    v9 = a1[35];
  }
  if (v9 == v6 + 12 * v7)
    goto LABEL_20;
  if (a4)
  {
    sub_23411E5CC(a4, (uint64_t)&v16);
    if (!(_DWORD)v16)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!a3 || (sub_233CF77DC(&v17, a3, (uint64_t)&v16), (_DWORD)v16))
  {
LABEL_20:
    sub_233CF42C8((uint64_t)(a1 + 9), 0, (uint64_t)a2);
    goto LABEL_21;
  }
  v15 = a1[8];
  if (!v15)
    sub_233CF1E98();
  (*(void (**)(uint64_t, unsigned __int16 *, void **))(*(_QWORD *)v15 + 48))(v15, a2, &v17);
LABEL_21:

}

void sub_233CF3D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_233CF3DB8(_QWORD *a1, unsigned __int16 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v13;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  int buf;
  const char *buf_4;
  __int16 v20;
  int v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  if (!a1[4])
    goto LABEL_32;
  v6 = a1[34];
  if (!v6)
    goto LABEL_32;
  if (*((unsigned __int8 *)a2 + 14) >= 2u)
  {
    sub_234117B80(0x1Bu, "Support");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      buf = 136315650;
      buf_4 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
      v20 = 1024;
      v21 = 835;
      v22 = 2080;
      v23 = "!aPath.IsListItemOperation()";
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", (uint8_t *)&buf, 0x1Cu);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0x1Bu, 1);
    abort();
  }
  v7 = a1[36];
  if (v7)
  {
    v8 = 12 * v7;
    v9 = a1[34];
    while (1)
    {
      v10 = *(unsigned __int16 *)(v9 + 8);
      if ((v10 == 0xFFFF || v10 == *a2) && (*(_DWORD *)v9 == -1 || *(_DWORD *)v9 == *((_DWORD *)a2 + 1)))
      {
        v13 = *(_DWORD *)(v9 + 4);
        if (v13 == -1 || v13 == *((_DWORD *)a2 + 2))
          break;
      }
      v9 += 12;
      v8 -= 12;
      if (!v8)
        goto LABEL_32;
    }
  }
  else
  {
    v9 = a1[34];
  }
  if (v9 == v6 + 12 * v7)
    goto LABEL_32;
  if (*a4)
  {
    sub_23411E5CC(a4, (uint64_t)&buf);
    if (!buf)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (!a3 || (sub_233CF77DC(&v17, a3, (uint64_t)&buf), buf))
  {
LABEL_32:
    sub_233CF42C8((uint64_t)(a1 + 9), (uint64_t)a2, 0);
    goto LABEL_33;
  }
  v15 = a1[4];
  if (!v15)
    sub_233CF1E98();
  (*(void (**)(uint64_t, unsigned __int16 *, void **))(*(_QWORD *)v15 + 48))(v15, a2, &v17);
LABEL_33:

}

void sub_233CF4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

uint64_t sub_233CF4078(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 160);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

__int128 *sub_233CF4090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *result;
  void *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v17 = 0uLL;
  v18 = 0;
  v19 = *(_OWORD *)a3;
  v20 = *(_QWORD *)(a3 + 16);
  result = (__int128 *)sub_2342112E8(a2, (uint64_t)&v19, (uint64_t)&v17);
  *(_OWORD *)a4 = v17;
  *(_QWORD *)(a4 + 16) = v18;
  if (!*(_DWORD *)a4)
  {
    if (*(_QWORD *)(a1 + 192))
    {
      sub_233CF11B0((uint64_t)&v19, a1 + 168);
      v15 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a3 + 16);
      sub_2340017F0((uint64_t)MTRError, &v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)MEMORY[0x24BDD16E0];
      v11 = sub_23420D9CC(a2);
      objc_msgSend_numberWithUnsignedInt_(v10, v12, v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_233CF4304((uint64_t)&v19, v9, v13);

      result = v21;
      if (v21 == &v19)
      {
        v14 = 4;
        result = &v19;
        goto LABEL_7;
      }
      if (v21)
      {
        v14 = 5;
LABEL_7:
        result = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v14))();
      }
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/"
                          "MTRBaseDevice.mm";
    *(_DWORD *)(a4 + 16) = 909;
  }
  return result;
}

void sub_233CF41F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  void *v18;
  void *v19;
  char *v21;
  uint64_t v22;

  v21 = a18;
  if (a18 == &a15)
  {
    v22 = 4;
    v21 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_233CF4250(uint64_t a1)
{
  return sub_233CF42C8(a1 + 72, 0, 0);
}

uint64_t sub_233CF428C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    sub_233CF1E98();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t sub_233CF42C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_233CF1E98();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void sub_233CF4304(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v7 = a2;
  v6 = a3;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    sub_233CF1E98();
  (*(void (**)(uint64_t, id *, id *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6);

}

void sub_233CF4370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_233CF438C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_233CF1F38(v3);
    j__free(v4);
  }
}

void sub_233CF43B8(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int16 v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v16;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_234209028(a1, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    v10 = *((_WORD *)a2 + 4);
    v12 = *a2;
    v11 = 0;
    v13 = 0;
    v14 = 0;
    if (*(_BYTE *)a4)
      v16 = *(_DWORD *)(a4 + 4);
    sub_233CF4E20(a1, &v10, a3, a5);
  }
}

_QWORD *sub_233CF4454(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_2504F0E28;
  v7 = *a2;
  v8 = &v6;
  sub_233CF5194(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void *sub_233CF44FC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = sub_234114774(0x98uLL);
  if (!v8)
    return v8;
  sub_233CF11B0((uint64_t)v20, a1);
  sub_233CF11B0((uint64_t)v18, a2);
  sub_233CF11B0((uint64_t)v16, a3);
  sub_233CF46F8((uint64_t)v8, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16, *a4);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
    goto LABEL_11;
  }
  if (v19)
  {
    v12 = 5;
LABEL_11:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_16;
  }
  if (v21)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  return v8;
}

void sub_233CF4648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  v25 = a17;
  if (a17 == &a14)
  {
    v26 = 4;
    v25 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_11:
  v27 = a21;
  if (a21 == &a18)
  {
    v28 = 4;
    v27 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t sub_233CF46F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;

  *(_QWORD *)a1 = &off_2504F0D60;
  v9 = a1 + 40;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(v9, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 105) = a5;
  *(_QWORD *)(a1 + 112) = &off_250502828;
  *(_BYTE *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1;
  return a1;
}

void sub_233CF478C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD **)(v1 + 64);
  if (v5 == v3)
  {
    v6 = v3;
    v7 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = 5;
    v6 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(_QWORD **)(v1 + 32);
  if (v8 == v2)
  {
    v9 = 4;
    v8 = v2;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_233CF47FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  a1[14] = &off_250502828;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_233CF48BC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  a1[14] = &off_250502828;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CF498C(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    if (*a4)
    {
      sub_23411E5CC(a4, (uint64_t)v8);
      v9 = a3;
      v6 = *(_QWORD *)(v5 + 64);
      if (v6)
        return (*(uint64_t (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v6 + 48))(v6, &v9, v8);
    }
    else
    {
      v7 = *(_QWORD *)(result + 32);
      if (v7)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a3);
    }
    sub_233CF1E98();
  }
  return result;
}

uint64_t sub_233CF4A20(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(result + 104))
  {
    *(_BYTE *)(result + 104) = 1;
    v4 = *a3;
    v5 = *((_QWORD *)a3 + 2);
    v6 = 0;
    v3 = *(_QWORD *)(result + 64);
    if (!v3)
      sub_233CF1E98();
    return (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v3 + 48))(v3, &v6, &v4);
  }
  return result;
}

void sub_233CF4A7C(_BYTE *a1, void (***a2)(_QWORD))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void (***v13)(_QWORD);

  if (!a1[105] && !a1[104])
  {
    LODWORD(v11) = 33;
    *((_QWORD *)&v11 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/controller/WriteInteraction.h";
    v12 = 104;
    sub_233CF4A20((uint64_t)a1, (uint64_t)a2, &v11);
  }
  v4 = *((_QWORD *)a1 + 12);
  if (v4)
  {
    v13 = a2;
    (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v4 + 48))(v4, &v13);
  }
  if (a2)
  {
    (**a2)(a2);
    j__free(a2);
  }
  *((_QWORD *)a1 + 14) = &off_250502828;
  v5 = (_QWORD *)*((_QWORD *)a1 + 12);
  if (v5 == (_QWORD *)(a1 + 72))
  {
    v6 = 4;
    v5 = a1 + 72;
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = (_QWORD *)*((_QWORD *)a1 + 8);
  if (v7 == (_QWORD *)(a1 + 40))
  {
    v8 = 4;
    v7 = a1 + 40;
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  v9 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v9 == (_QWORD *)(a1 + 8))
  {
    v10 = 4;
    v9 = a1 + 8;
    goto LABEL_22;
  }
  if (v9)
  {
    v10 = 5;
LABEL_22:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  j__free(a1);
}

uint64_t sub_233CF4BC8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char a5)
{
  int v8;

  *(_QWORD *)(a1 + 16) = &off_2504F0DD0;
  *(_QWORD *)a1 = &off_250516450;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 48) = 0;
  sub_234106C48(a1 + 56);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = &unk_250504030;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  sub_23411BFF8(a1 + 152);
  sub_23411BFF8(a1 + 192);
  sub_23411BFF8(a1 + 232);
  sub_23411BFF8(a1 + 272);
  *(_QWORD *)(a1 + 312) = 0;
  v8 = *a4;
  *(_BYTE *)(a1 + 320) = v8;
  if (v8)
    *(_WORD *)(a1 + 322) = *((_WORD *)a4 + 1);
  *(_BYTE *)(a1 + 324) = a5;
  *(_QWORD *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 338) = 0;
  sub_2341B1F64("/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h", 132);
  return a1;
}

void sub_233CF4CBC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  sub_233CAF128(v4);
  sub_233CAF128(v5);
  *(_QWORD *)(v2 + 120) = v6 + 16;
  sub_233CAF128((uint64_t *)(v2 + 136));
  sub_233CAF128(v3);
  sub_233CF4D08(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_233CF4D08(_QWORD *a1)
{
  *a1 = &off_2504F0DD0;
  sub_233CF4DD8((uint64_t)a1);
  return a1;
}

void sub_233CF4D3C(_QWORD *a1)
{
  *a1 = &off_2504F0DD0;
  sub_233CF4DD8((uint64_t)a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_233CF4D80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF4D90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF4DA0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    *(_QWORD *)(v1 + 40) = 0;
    if ((*(_WORD *)(v1 + 8) & 0x40) == 0)
      *(_QWORD *)(a1 + 16) = 0;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_233CF4DC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void sub_233CF4DD8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(v2 + 40) = 0;
    v3 = sub_2341AD08C(v2);
    v4 = *(_QWORD *)(a1 + 16);
    if ((v3 & 1) != 0 || (*(_WORD *)(v4 + 8) & 0x40) != 0)
      sub_2341AD5E0(v4);
  }
  *(_QWORD *)(a1 + 16) = 0;
}

void sub_233CF4E20(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_234106C48((uint64_t)&v18);
  v8 = *(__int128 **)(a1 + 216);
  v9 = v8[3];
  v11 = *v8;
  v10 = v8[1];
  v20 = v8[2];
  v21 = v9;
  v18 = v11;
  v19 = v10;
  v16 = 0uLL;
  v17 = 0;
  sub_233CF4F2C(a1, a2, a3, &v16);
  if ((_DWORD)v16 == 25 || (_DWORD)v16 == 11)
  {
    v12 = *(_OWORD **)(a1 + 216);
    v13 = v18;
    v14 = v19;
    v15 = v21;
    v12[2] = v20;
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
    sub_23411C030(a1 + 192);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234209054(a1, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CF4F2C(a1, a2, a3, a4);
  }
  else
  {
    *(_OWORD *)a4 = v16;
    a4[2] = v17;
  }
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
    *((_DWORD *)a4 + 4) = 309;
  }
}

void sub_233CF4F2C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, void **a3@<X2>, _QWORD *a4@<X8>)
{
  char *v7;
  int v8;
  int v9;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_234208CF0(a1, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v7 = (char *)sub_234208E8C(a1);
    if (!v7)
    {
      v9 = 263;
      v8 = 3;
      goto LABEL_7;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CE4434(*a3, v7, 2uLL, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_234208E28(a1, a4);
      if (!*(_DWORD *)a4)
      {
        v8 = 0;
        v9 = 267;
LABEL_7:
        *(_DWORD *)a4 = v8;
        a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
        *((_DWORD *)a4 + 4) = v9;
      }
    }
  }
}

void sub_233CF4FE4()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_233CF4FF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2504F0E28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_233CF5030(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2504F0E28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_233CF5050(uint64_t a1)
{
  sub_233CF50A0(a1 + 8);
}

uint64_t sub_233CF5058(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0E98))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF5094()
{
  return &unk_2504F0E98;
}

void sub_233CF50A0(uint64_t a1)
{
  void (***v2)(_QWORD);
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(void (****)(_QWORD))(a1 + 8);
  if (v2)
  {
    (**v2)(*(_QWORD *)(a1 + 8));
    j__free(v2);
  }
  v3 = *(_QWORD **)a1;
  if (v3)
  {
    v3[14] = &off_250502828;
    v4 = (_QWORD *)v3[12];
    if (v4 == v3 + 9)
    {
      v5 = 4;
      v4 = v3 + 9;
    }
    else
    {
      if (!v4)
        goto LABEL_10;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
    v6 = (_QWORD *)v3[8];
    if (v6 == v3 + 5)
    {
      v7 = 4;
      v6 = v3 + 5;
    }
    else
    {
      if (!v6)
        goto LABEL_15;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
    v8 = (_QWORD *)v3[4];
    if (v8 == v3 + 1)
    {
      v9 = 4;
      v8 = v3 + 1;
    }
    else
    {
      if (!v8)
      {
LABEL_20:
        j__free(v3);
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_20;
  }
}

_QWORD *sub_233CF5194(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_233CF52FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_233C063F8(a1);
}

void sub_233CF5308(void (****a1)(_QWORD), void (***a2)(_QWORD))
{
  void (***v2)(_QWORD);

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    (**v2)(v2);
    j__free(v2);
  }
}

void sub_233CF5348(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    sub_233CF5370((int)a1, v3);
}

void sub_233CF5370(int a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a2)
  {
    a2[14] = &off_250502828;
    v3 = (_QWORD *)a2[12];
    if (v3 == a2 + 9)
    {
      v4 = 4;
      v3 = a2 + 9;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)a2[8];
    if (v5 == a2 + 5)
    {
      v6 = 4;
      v5 = a2 + 5;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    v7 = (_QWORD *)a2[4];
    if (v7 == a2 + 1)
    {
      v8 = 4;
      v7 = a2 + 1;
    }
    else
    {
      if (!v7)
      {
LABEL_18:
        j__free(a2);
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_18;
  }
}

void sub_233CF543C()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_233CF5450(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2504F0EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_233CF5488(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2504F0EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_233CF54A8(uint64_t a1, uint64_t *a2)
{
  MTRAttributePath *v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  const __CFString *v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v16 = CFSTR("attributePath");
  v4 = [MTRAttributePath alloc];
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v6 = (void *)objc_msgSend_initWithPath_(v4, v5, (uint64_t)&v11);
  v17 = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v7, (uint64_t)&v17, &v16, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = v8;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v9, (uint64_t)v18, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(_QWORD, void *))(a1 + 8))(*(_QWORD *)(a1 + 16), v10);
}

void sub_233CF55A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF55D4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0F28))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF5610()
{
  return &unk_2504F0F28;
}

void sub_233CF5620()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_233CF5634(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2504F0F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_233CF566C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2504F0F48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_233CF568C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a3;
  v5 = *((_QWORD *)a3 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 8))(*(_QWORD *)(a1 + 16), &v4);
}

uint64_t sub_233CF56C0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F0FB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF56FC()
{
  return &unk_2504F0FB8;
}

void sub_233CF5708(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_233CF5774(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_233C04A24();
  return operator new(8 * a2);
}

uint64_t sub_233CF57A8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_233CF57F8(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10[2];
  unsigned __int16 v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  int v17;

  v11 = *((_WORD *)a2 + 4);
  v13 = *a2;
  v12 = 0;
  v14 = 0;
  v15 = 0;
  if (*(_BYTE *)a4)
    v17 = *(_DWORD *)(a4 + 4);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_234209028(a1, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v10[0] = 0;
    v10[1] = 0;
    sub_233CF59BC(a1, &v11, v10, a5);
    if (!*(_DWORD *)a5)
    {
      v15 = 4;
      if (a3[1])
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          sub_233CF4E20(a1, &v11, (void **)(*a3 + v8), a5);
          if (*(_DWORD *)a5)
            break;
          ++v9;
          v8 += 8;
          if (v9 >= a3[1])
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        *(_DWORD *)a5 = 0;
        a5[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
        *((_DWORD *)a5 + 4) = 186;
      }
    }
  }
}

_QWORD *sub_233CF5914(_QWORD *a1, __int128 *a2)
{
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &off_2504F0FD8;
  v7 = *a2;
  v8 = &v6;
  sub_233CF5194(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*v3)[v4]();
  }
  return a1;
}

void sub_233CF59BC(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 **a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_234106C48((uint64_t)&v18);
  v8 = *(__int128 **)(a1 + 216);
  v9 = v8[3];
  v11 = *v8;
  v10 = v8[1];
  v20 = v8[2];
  v21 = v9;
  v18 = v11;
  v19 = v10;
  v16 = 0uLL;
  v17 = 0;
  sub_233CF5AC8(a1, a2, a3, &v16);
  if ((_DWORD)v16 == 25 || (_DWORD)v16 == 11)
  {
    v12 = *(_OWORD **)(a1 + 216);
    v13 = v18;
    v14 = v19;
    v15 = v21;
    v12[2] = v20;
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
    sub_23411C030(a1 + 192);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234209054(a1, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CF5AC8(a1, a2, a3, a4);
  }
  else
  {
    *(_OWORD *)a4 = v16;
    a4[2] = v17;
  }
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
    *((_DWORD *)a4 + 4) = 309;
  }
}

void sub_233CF5AC8(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 **a3@<X2>, _QWORD *a4@<X8>)
{
  char *v7;
  char *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_234208CF0(a1, a2, (uint64_t)a4);
  if (*(_DWORD *)a4)
    return;
  v7 = (char *)sub_234208E8C(a1);
  if (!v7)
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
    v11 = 263;
    goto LABEL_12;
  }
  v8 = v7;
  v10 = *a3;
  v9 = a3[1];
  v12 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234107E40(v7, 2uLL, 22, &v12, (uint64_t)a4);
  if (*(_DWORD *)a4)
    return;
  if (!v9)
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234107FB0(v8, v12, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234208E28(a1, a4);
    if (*(_DWORD *)a4)
      return;
    *(_DWORD *)a4 = 0;
    a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/WriteClient.h";
    v11 = 267;
LABEL_12:
    *((_DWORD *)a4 + 4) = v11;
    return;
  }
  while (1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2341071D8(v8, 0x100uLL, *v10, (uint64_t)a4);
    if (*(_DWORD *)a4)
      break;
    ++v10;
    if (!--v9)
      goto LABEL_8;
  }
}

void sub_233CF5C00()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_233CF5C14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2504F0FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_233CF5C4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2504F0FD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_233CF5C6C(uint64_t a1)
{
  sub_233CF50A0(a1 + 8);
}

uint64_t sub_233CF5C74(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F1038))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF5CB0()
{
  return &unk_2504F1038;
}

uint64_t sub_233CF5CBC(uint64_t a1)
{

  return a1;
}

void sub_233CF5CE4(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

char *sub_233CF5D1C(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_2504F1058;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = *(id *)(a1 + 24);
  return v2;
}

id sub_233CF5D68(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)a2 = &off_2504F1058;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(id *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = result;
  return result;
}

void sub_233CF5DA4(uint64_t a1)
{

}

void sub_233CF5DAC(id *a1)
{

  operator delete(a1);
}

void sub_233CF5DD4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v7;
  id v8;
  const char *v9;
  void *v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  const char *v31;
  const char *v32;
  MTRCommandPath *v33;
  const char *v34;
  const char *v35;
  void *v36;
  const char *v37;
  MTRCommandPath *v38;
  const char *v39;
  const char *v40;
  void *v41;
  const char *v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  v7 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if (*a4)
  {
    v8 = *a4;
    v10 = v8;
    if (*(_QWORD *)(a1 + 24))
    {
      objc_msgSend_objectForKeyedSubscript_(v8, v9, (uint64_t)CFSTR("value"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_alloc(MEMORY[0x24BDBCEB8]);
      v15 = objc_msgSend_count(v11, v13, v14);
      v17 = (void *)objc_msgSend_initWithCapacity_(v12, v16, v15 + 1);
      objc_msgSend_addObjectsFromArray_(v17, v18, (uint64_t)v11);
      v47[1] = CFSTR("data");
      v48[0] = &unk_250591BD8;
      v45[0] = CFSTR("type");
      v45[1] = CFSTR("value");
      v19 = *(_QWORD *)(a1 + 24);
      v46[0] = CFSTR("OctetString");
      v46[1] = v19;
      v47[0] = CFSTR("contextTag");
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v20, (uint64_t)v46, v45, 2);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v48[1] = v21;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v22, (uint64_t)v48, v47, 2);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v17, v24, (uint64_t)v23);

      v25 = (void *)MEMORY[0x24BDBCED8];
      v28 = objc_msgSend_count(v10, v26, v27);
      objc_msgSend_dictionaryWithCapacity_(v25, v29, v28 + 1);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addEntriesFromDictionary_(v30, v31, (uint64_t)v10);
      objc_msgSend_setObject_forKeyedSubscript_(v30, v32, (uint64_t)v17, CFSTR("value"));

    }
    else
    {
      v30 = v8;
    }
    v43[0] = CFSTR("commandPath");
    v38 = [MTRCommandPath alloc];
    v36 = (void *)objc_msgSend_initWithPath_(v38, v39, a2);
    v43[1] = CFSTR("data");
    v44[0] = v36;
    v44[1] = v30;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v40, (uint64_t)v44, v43, 2);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v7, v42, (uint64_t)v41);

  }
  else
  {
    v47[0] = CFSTR("commandPath");
    v33 = [MTRCommandPath alloc];
    v30 = (void *)objc_msgSend_initWithPath_(v33, v34, a2);
    v48[0] = v30;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v35, (uint64_t)v48, v47, 1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v7, v37, (uint64_t)v36);
  }

  (*(void (**)(_QWORD, id))(a1 + 8))(*(_QWORD *)(a1 + 16), v7);
}

void sub_233CF6068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF6108(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F10C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF6144()
{
  return &unk_2504F10C8;
}

void sub_233CF6154()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_233CF6168(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_2504F10E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_233CF61A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2504F10E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_233CF61C0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 8))(*(_QWORD *)(a1 + 16), &v3);
}

uint64_t sub_233CF61F4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F1158))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF6230()
{
  return &unk_2504F1158;
}

uint64_t sub_233CF623C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  *(_QWORD *)a1 = &off_2504F06D0;
  v11 = a1 + 40;
  sub_233CF11B0(a1 + 8, a4);
  sub_233CF11B0(v11, a5);
  sub_233CF11B0(a1 + 72, a6);
  *(_DWORD *)(a1 + 104) = a2;
  *(_DWORD *)(a1 + 108) = a3;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

void sub_233CF62C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD **)(v1 + 64);
  if (v5 == v3)
  {
    v6 = v3;
    v7 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v7 = 5;
    v6 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(_QWORD **)(v1 + 32);
  if (v8 == v2)
  {
    v9 = 4;
    v8 = v2;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_233CF6334(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    sub_233CF635C((int)a1, v3);
}

void sub_233CF635C(int a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (a2)
  {
    v3 = (_QWORD *)a2[12];
    if (v3 == a2 + 9)
    {
      v4 = 4;
      v3 = a2 + 9;
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    v5 = (_QWORD *)a2[8];
    if (v5 == a2 + 5)
    {
      v6 = 4;
      v5 = a2 + 5;
    }
    else
    {
      if (!v5)
        goto LABEL_13;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
    v7 = (_QWORD *)a2[4];
    if (v7 == a2 + 1)
    {
      v8 = 4;
      v7 = a2 + 1;
    }
    else
    {
      if (!v7)
      {
LABEL_18:
        j__free(a2);
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_18;
  }
}

void sub_233CF6418()
{
  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF642C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2504F1178;
  result[1] = v3;
  return result;
}

uint64_t sub_233CF6460(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2504F1178;
  a2[1] = v2;
  return result;
}

void sub_233CF647C(uint64_t a1, _QWORD *a2)
{
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (*a2)
  {
    v3 = (void *)sub_2341FD350();
    j__free(v3);
  }
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v5 = (_QWORD *)v4[12];
    if (v5 == v4 + 9)
    {
      v6 = 4;
      v5 = v4 + 9;
    }
    else
    {
      if (!v5)
        goto LABEL_10;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
    v7 = (_QWORD *)v4[8];
    if (v7 == v4 + 5)
    {
      v8 = 4;
      v7 = v4 + 5;
    }
    else
    {
      if (!v7)
        goto LABEL_15;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
    v9 = (_QWORD *)v4[4];
    if (v9 == v4 + 1)
    {
      v10 = 4;
      v9 = v4 + 1;
    }
    else
    {
      if (!v9)
      {
LABEL_20:
        j__free(v4);
        return;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_20;
  }
}

uint64_t sub_233CF6550(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F11E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF658C()
{
  return &unk_2504F11E8;
}

void sub_233CF6598(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_2341FD350();
    j__free(v4);
  }
}

void sub_233CF65C8()
{
  JUMPOUT(0x23493E704);
}

void sub_233CF65DC(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_233CE4434(**(void ***)(a1 + 8), a2, a3, a4);
}

uint64_t sub_233CF65E8(uint64_t a1)
{

  return a1;
}

void sub_233CF6618(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF6658(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F1248;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_233CF66A8(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_2504F1248;
  a2[1] = *(id *)(a1 + 8);
  result = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_233CF66EC(uint64_t a1)
{

}

void sub_233CF6714(id *a1)
{

  operator delete(a1);
}

void sub_233CF6744(uint64_t a1, uint64_t *a2, id *a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v5 = *a3;
  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 3221225472;
  v9[2] = sub_233CF6820;
  v9[3] = &unk_2504F12B0;
  v7 = *(NSObject **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v10 = v5;
  v11 = v6;
  v8 = v5;
  dispatch_async(v7, v9);

}

uint64_t sub_233CF67D8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F12D0))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF6814()
{
  return &unk_2504F12D0;
}

void sub_233CF6820(uint64_t a1)
{
  uint64_t v2;
  MTRAttributePath *v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  char v13;
  char v14;
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v15[0] = CFSTR("attributePath");
  v3 = [MTRAttributePath alloc];
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 56);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v5 = (void *)objc_msgSend_initWithPath_(v3, v4, (uint64_t)&v10);
  v15[1] = CFSTR("data");
  v16[0] = v5;
  v16[1] = *(_QWORD *)(a1 + 32);
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v6, (uint64_t)v16, v15, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v7;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v8, (uint64_t)v17, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v2 + 16))(v2, v9, 0);

}

void sub_233CF6930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF6960(uint64_t a1)
{

  return a1;
}

void sub_233CF6990(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF69D0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F12F0;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_233CF6A20(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_2504F12F0;
  a2[1] = *(id *)(a1 + 8);
  result = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_233CF6A64(uint64_t a1)
{

}

void sub_233CF6A8C(id *a1)
{

  operator delete(a1);
}

void sub_233CF6ABC(uint64_t a1, uint64_t a2, id *a3)
{
  id v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;

  v5 = *a3;
  objc_msgSend_eventReportForHeader_andData_(MTRBaseDevice, v6, a2, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 3221225472;
  v11[2] = sub_233CF6BC8;
  v11[3] = &unk_2504F03B0;
  v9 = *(NSObject **)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v12 = v7;
  v13 = v8;
  v10 = v7;
  dispatch_async(v9, v11);

}

void sub_233CF6B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF6B80(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F1350))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF6BBC()
{
  return &unk_2504F1350;
}

void sub_233CF6BC8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  v4[0] = *(_QWORD *)(a1 + 32);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], a2, (uint64_t)v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v2 + 16))(v2, v3, 0);

}

void sub_233CF6C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF6C6C(uint64_t a1)
{

  return a1;
}

void sub_233CF6C9C(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF6CDC(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F1370;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_233CF6D2C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_2504F1370;
  a2[1] = *(id *)(a1 + 8);
  result = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_233CF6D70(uint64_t a1)
{

}

void sub_233CF6D98(id *a1)
{

  operator delete(a1);
}

void sub_233CF6DC8(uint64_t a1, uint64_t **a2, uint64_t **a3, __int128 *a4)
{
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v4 = *a2;
  if (*a2)
  {
    v5 = *v4;
    v17 = *((_DWORD *)v4 + 2);
    v9 = MEMORY[0x24BDAC760];
    v10 = 3221225472;
    v6 = sub_233CF6F0C;
  }
  else
  {
    v7 = *a3;
    if (!*a3)
    {
      v9 = MEMORY[0x24BDAC760];
      v10 = 3221225472;
      v11 = sub_233CF71E8;
      v12 = &unk_2504F04C8;
      v8 = *(NSObject **)(a1 + 8);
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *a4;
      v15 = *((_QWORD *)a4 + 2);
      goto LABEL_6;
    }
    v5 = *v7;
    v17 = *((_DWORD *)v7 + 2);
    v9 = MEMORY[0x24BDAC760];
    v10 = 3221225472;
    v6 = sub_233CF7088;
  }
  v11 = v6;
  v12 = &unk_2504F13D8;
  v8 = *(NSObject **)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  v16 = v5;
LABEL_6:
  dispatch_async(v8, &v9);
}

uint64_t sub_233CF6EC4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F13F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF6F00()
{
  return &unk_2504F13F8;
}

void sub_233CF6F0C(uint64_t a1)
{
  uint64_t v2;
  MTRAttributePath *v3;
  const char *v4;
  void *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  char v16;
  char v17;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v18[0] = CFSTR("attributePath");
  v3 = [MTRAttributePath alloc];
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_DWORD *)(a1 + 72);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = (void *)objc_msgSend_initWithPath_(v3, v4, (uint64_t)&v13);
  v18[1] = CFSTR("error");
  v19[0] = v5;
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v7, (uint64_t)v19, v18, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v8;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v9, (uint64_t)v20, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v2 + 16))(v2, v10, 0);

}

void sub_233CF704C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CF7088(uint64_t a1)
{
  uint64_t v2;
  MTREventPath *v3;
  const char *v4;
  void *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v13[0] = CFSTR("eventPath");
  v3 = [MTREventPath alloc];
  v5 = (void *)objc_msgSend_initWithPath_(v3, v4, a1 + 64);
  v13[1] = CFSTR("error");
  v14[0] = v5;
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14[1] = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v7, (uint64_t)v14, v13, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v8;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x24BDBCE30], v9, (uint64_t)v15, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, _QWORD))(v2 + 16))(v2, v10, 0);

}

void sub_233CF71AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_233CF71E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  sub_2340017F0((uint64_t)MTRError, &v3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v2);

}

void sub_233CF7250(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_233CF7260(uint64_t a1)
{

  return a1;
}

void sub_233CF7288(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF72C0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_2504F1418;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

id sub_233CF7304(uint64_t a1, _QWORD *a2)
{
  id result;

  *a2 = &off_2504F1418;
  result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void sub_233CF7338(uint64_t a1)
{

}

void sub_233CF7340(id *a1)
{

  operator delete(a1);
}

uint64_t sub_233CF7368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x24BEDD108](*(_QWORD *)(a1 + 8), sel_onDone, a3);
}

uint64_t sub_233CF7370(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F1478))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF73AC()
{
  return &unk_2504F1478;
}

uint64_t sub_233CF73B8(uint64_t a1)
{

  return a1;
}

void sub_233CF73E8(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF7428(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F1498;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_233CF7478(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_2504F1498;
  a2[1] = *(id *)(a1 + 8);
  result = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_233CF74BC(uint64_t a1)
{

}

void sub_233CF74E4(id *a1)
{

  operator delete(a1);
}

void sub_233CF7514(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    dispatch_async(*(dispatch_queue_t *)(a1 + 8), v1);
}

uint64_t sub_233CF7528(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F14F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF7564()
{
  return &unk_2504F14F8;
}

uint64_t sub_233CF7570(uint64_t a1)
{

  return a1;
}

void sub_233CF75A0(uint64_t a1)
{

  JUMPOUT(0x23493E704);
}

_QWORD *sub_233CF75E0(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  *v2 = &off_2504F1518;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  return v2;
}

uint64_t sub_233CF7630(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_2504F1518;
  a2[1] = *(id *)(a1 + 8);
  result = MEMORY[0x23493EEA8](*(_QWORD *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_233CF7674(uint64_t a1)
{

}

void sub_233CF769C(id *a1)
{

  operator delete(a1);
}

void sub_233CF76CC(uint64_t a1, id *a2, void **a3)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;

  v4 = *a3;
  v5 = *a2;
  v6 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(NSObject **)(a1 + 8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3221225472;
    block[2] = sub_233CF77C8;
    block[3] = &unk_2504F0450;
    v12 = v7;
    v10 = v5;
    v11 = v6;
    dispatch_async(v8, block);

  }
}

uint64_t sub_233CF7780(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2504F1588))
    return a1 + 8;
  else
    return 0;
}

void *sub_233CF77BC()
{
  return &unk_2504F1588;
}

uint64_t sub_233CF77C8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_233CF77DC(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  int v7;
  NSObject *v8;
  uint8_t v9[16];

  sub_233CE3234(a2, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  *a1 = (void *)v5;

  if (*a1)
  {
    v7 = 0;
  }
  else
  {
    sub_234117B80(0, "NotSpecified");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Error: Failed to get value from TLV data for attribute reading response", v9, 2u);
    }

    if (sub_234114844(1u))
      sub_2341147D0(0, 1);
    if (*a1)
      v7 = 0;
    else
      v7 = 176;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/darwin/Framework/CHIP/MTRBaseDevice.mm";
  *(_DWORD *)(a3 + 16) = 750;
}

uint64_t sub_233CF78D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

double sub_233CF78E0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D452B4(a2, 0, (_BYTE *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 4), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF79EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1598;
      v11 = 103;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 4), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        *(_BYTE *)a1 = 1;
        *(_WORD *)(a1 + 2) = 0;
        v9 = 0;
        v8 = 0uLL;
        sub_233D45404(a2, (_WORD *)(a1 + 2), &v8);
        if (!(_DWORD)v8)
        {
          LODWORD(v8) = 0;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 61;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

void sub_233CF7B40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;

  if (*(_BYTE *)a1)
  {
LABEL_2:
    v4 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v7 = 0uLL;
      v8 = 0;
      sub_2341058CC(v4, &v7);
      if ((_DWORD)v7)
        break;
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(v4 + 16);
      if (v5 <= 0xFF)
      {
        v6 = 0;
        *(_BYTE *)a2 = v5;
        goto LABEL_13;
      }
    }
    if ((_DWORD)v7 == 33)
      sub_23410577C(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 4), (uint64_t)&v7);
    goto LABEL_10;
  }
  if (sub_23410462C(*(_QWORD *)(a1 + 8)) != 21)
  {
    *(_DWORD *)a2 = 38;
    *(_QWORD *)(a2 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common/a"
                          "pp-common/zap-generated/cluster-objects.cpp";
    *(_DWORD *)(a2 + 16) = 47;
    goto LABEL_12;
  }
  v7 = 0uLL;
  v8 = 0;
  sub_23410570C(*(_QWORD *)(a1 + 8), (_DWORD *)(a1 + 4), (uint64_t)&v7);
  if (!(_DWORD)v7)
  {
    *(_BYTE *)a1 = 1;
    goto LABEL_2;
  }
LABEL_10:
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
LABEL_12:
  v6 = 1;
LABEL_13:
  *(_DWORD *)(a2 + 24) = v6;
}

double sub_233CF7C38@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107684(v7, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(v7, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233CF7D54((uint64_t)&v7, 2u, (uint64_t *)(a1 + 24));
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF7D54(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 6 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_233CF78E0(v5, v4, 0x100uLL, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 6;
          v7 -= 6;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233CF7E40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F15B0;
    v11 = 145;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233D45328(a1 + 24, a2, (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_234104C8C(a2, (_OWORD *)a1, &v10);
        goto LABEL_10;
      }
      sub_23410492C(a2, (_BYTE *)(a1 + 16), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233CF7F6C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_23410731C(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_23410731C(a2, 1uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D452B4(a2, 2uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D452B4(a2, 3uLL, (_BYTE *)(a1 + 20), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_233D452B4(a2, 4uLL, (_BYTE *)(a1 + 24), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_233D3B7EC(a2, 5uLL, (_BYTE *)(a1 + 32), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_233D3B7EC(a2, 6uLL, (_BYTE *)(a1 + 48), (uint64_t)&v11);
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_233D3B7EC(a2, 7uLL, (_BYTE *)(a1 + 64), (uint64_t)&v11);
                  v9 = v12;
                  v8 = v11;
                  if (!(_DWORD)v11)
                  {
                    sub_234107FB0(a2, v10, (uint64_t)&v11);
                    v8 = v11;
                    v9 = v12;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF8180@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  _QWORD *v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  uint64_t v20;

  v19[0] = 0;
  v20 = a2;
  sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
  v6 = v18;
  if (v18 == 1)
  {
LABEL_17:
    result = *(double *)&v16;
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
  }
  else
  {
    while (1)
    {
      v14 = xmmword_2504F15C8;
      v15 = 196;
      if (v6)
        sub_233D4527C();
      switch((char)v16)
      {
        case 0:
          sub_2341047B0(a2, (_QWORD *)a1, (uint64_t)&v14);
          break;
        case 1:
          sub_2341047B0(a2, (_QWORD *)(a1 + 8), (uint64_t)&v12);
          goto LABEL_14;
        case 2:
          *(_BYTE *)(a1 + 16) = 1;
          *(_WORD *)(a1 + 18) = 0;
          v7 = a2;
          v8 = (_WORD *)(a1 + 18);
          goto LABEL_9;
        case 3:
          *(_BYTE *)(a1 + 20) = 1;
          *(_WORD *)(a1 + 22) = 0;
          v7 = a2;
          v8 = (_WORD *)(a1 + 22);
          goto LABEL_9;
        case 4:
          *(_BYTE *)(a1 + 24) = 1;
          *(_WORD *)(a1 + 26) = 0;
          v7 = a2;
          v8 = (_WORD *)(a1 + 26);
LABEL_9:
          sub_2341049E0(v7, v8, (uint64_t)&v12);
          goto LABEL_14;
        case 5:
          *(_BYTE *)(a1 + 32) = 1;
          *(_QWORD *)(a1 + 40) = 0;
          v9 = a2;
          v10 = (_QWORD *)(a1 + 40);
          goto LABEL_13;
        case 6:
          *(_BYTE *)(a1 + 48) = 1;
          *(_QWORD *)(a1 + 56) = 0;
          v9 = a2;
          v10 = (_QWORD *)(a1 + 56);
          goto LABEL_13;
        case 7:
          *(_BYTE *)(a1 + 64) = 1;
          *(_QWORD *)(a1 + 72) = 0;
          v9 = a2;
          v10 = (_QWORD *)(a1 + 72);
LABEL_13:
          sub_23410499C(v9, v10, (uint64_t)&v12);
LABEL_14:
          v14 = v12;
          v15 = v13;
          break;
        default:
          break;
      }
      result = *(double *)&v14;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
      v6 = v18;
      if (v18 == 1)
        goto LABEL_17;
    }
  }
  return result;
}

double sub_233CF836C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF84C4((uint64_t)&v7, 0, (unsigned __int16 *)a1);
  if (!(_DWORD)v8)
  {
    sub_234106F04(v7, 1uLL, *(unsigned __int8 *)(a1 + 2), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_23410731C(v7, 2uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_23410731C(v7, 3uLL, *(_QWORD *)(a1 + 16), (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  sub_233CF853C((uint64_t)&v7, 4u, (uint64_t *)(a1 + 24));
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF84C4(uint64_t a1, unsigned int a2, unsigned __int16 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 15)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_234107224(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CF853C(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 80 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_233CF7F6C(v5, v4, 0x100uLL, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 80;
          v7 -= 80;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233CF8628@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_13:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F15E0;
      v13 = 264;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CF879C(a2, (_WORD *)a1, &v12);
          break;
        case 1:
          sub_2341046D0(a2, (char *)(a1 + 2), (uint64_t)&v10);
          goto LABEL_10;
        case 2:
          v7 = a2;
          v8 = (_QWORD *)(a1 + 8);
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = (_QWORD *)(a1 + 16);
LABEL_8:
          sub_2341047B0(v7, v8, (uint64_t)&v10);
          goto LABEL_10;
        case 4:
          sub_233D45328(a1 + 24, a2, (uint64_t)&v10);
LABEL_10:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_233CF879C@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233D45404(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = (unsigned __int16)*a2;
    if (v6 >= 0xF)
      LOWORD(v6) = 15;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233CF87FC@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107684(a2, 1uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF8908@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F15F8;
      v11 = 317;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CF8A14@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(a2, 1uLL, a1 + 8, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D09660(a2, 2uLL, a1 + 32, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF8B4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _OWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F1610;
    v13 = 359;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      *(_BYTE *)(a1 + 32) = 1;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      v7 = a2;
      v8 = (_OWORD *)(a1 + 40);
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      v7 = a2;
      v8 = (_OWORD *)(a1 + 16);
    }
    sub_234104C8C(v7, v8, &v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233CF8C90@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107684(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107684(a2, 1uLL, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF8D9C@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1628;
      v11 = 404;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, a1 + 1, &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_234104C8C(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CF8EA8@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(a2, 1uLL, a1 + 8, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF8FB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1640;
      v11 = 445;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 8) = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CF90CC@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF91AC@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1658;
      v9 = 490;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233CF9280@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF9354((uint64_t)&v7, 0, a1);
  sub_233CF93CC((uint64_t)&v7, 1u, a1 + 1);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF9354(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 3)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CF93CC(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 1)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CF9444@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1670;
      v11 = 525;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233CF95CC(a2, (BOOL *)(a1 + 1), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CF9550(a2, (char *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_233CF9550@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    if ((*a2 + 2) > 0xDu)
      v6 = 3;
    else
      v6 = byte_2342ACD65[(char)(*a2 + 2)];
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

uint64_t sub_233CF95CC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = *a2;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233CF9628(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _WORD *v4;
  int v5;
  uint64_t v6;

  v4 = (_WORD *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 65528:
      v6 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v6 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v6 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v6 = a1 + 248;
LABEL_3:
      sub_233D45328(v6, a2, a4);
      return;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      return;
    case 65533:
      v4 = (_WORD *)(a1 + 332);
      goto LABEL_12;
    default:
      if (v5 == 1)
      {
        sub_233CF96D0(a2, (_BYTE *)(a1 + 2), (_QWORD *)a4);
      }
      else if (v5)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 568;
      }
      else
      {
LABEL_12:
        sub_2341049E0(a2, v4, a4);
      }
      return;
  }
}

uint64_t sub_233CF96D0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 6)
      LOBYTE(v6) = 6;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233CF9730@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1688;
      v11 = 599;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CF983C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *((unsigned __int16 *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF9948@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F16A0;
      v11 = 638;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CF9A54@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F16B8;
      v9 = 676;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233CF9B28@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *((unsigned __int16 *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107684(a2, 2uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF9C60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F16D0;
    v11 = 712;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233CF9D8C@<D0>(unsigned __int16 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF9E50((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CF9E50(uint64_t a1, unsigned int a2, unsigned __int16 **a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 2 * (_QWORD)v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_234107224(v4, 0x100uLL, *v5, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          ++v5;
          v7 -= 2;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233CF9F38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F16E8;
      v9 = 754;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D45328(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233CFA00C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D02A94(v7, 0, (unsigned __int8 *)a1, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  sub_233CF9E50((uint64_t)&v7, 1u, (unsigned __int16 **)(a1 + 8));
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFA0FC@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1700;
      v11 = 789;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328((uint64_t)(a1 + 8), a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CFA208(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_233CFA208@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_23410492C(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233CFA2DC@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1718;
      v9 = 827;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233CFA3B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1730;
      v11 = 862;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFA4BC@<D0>(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  sub_234107E40(a1, a2, 21, &v8, (uint64_t)&v9);
  v6 = v9;
  v7 = v10;
  if (!(_DWORD)v9)
  {
    sub_234107FB0(a1, v8, (uint64_t)&v9);
    v6 = v9;
    v7 = v10;
  }
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  return result;
}

double sub_233CFA564@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  uint64_t v5;
  int v6;
  _BYTE v7[8];
  uint64_t v8;

  v7[0] = 0;
  v8 = a1;
  do
    sub_233CF7B40((uint64_t)v7, (uint64_t)&v4);
  while (v6 != 1);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

double sub_233CFA5B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1748;
      v11 = 921;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233CFA6C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      v5 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v5 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v5 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v5 = a1 + 248;
LABEL_3:
      sub_233D45328(v5, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
      break;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 962;
      }
      else
      {
        sub_233D45468(a2, (_BYTE *)a1, (_QWORD *)a4);
      }
      break;
  }
}

double sub_233CFA760@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFA850((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_2341071D8(v7, 1uLL, a1[1], (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFA850(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 2)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CFA8C8@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1760;
      v11 = 1053;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_23410492C(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CFA9D4(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_233CFA9D4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 2)
      LOBYTE(v6) = 2;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233CFAA34@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *((unsigned __int16 *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, *((unsigned __int16 *)a1 + 2), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFAB6C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _WORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F1778;
    v13 = 1113;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      v7 = a2;
      v8 = a1 + 4;
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_233D45468(a2, a1, &v12);
        goto LABEL_10;
      }
      v7 = a2;
      v8 = a1 + 2;
    }
    sub_2341049E0(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void sub_233CFAC94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 65528:
      v6 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v6 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v6 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v6 = a1 + 248;
LABEL_3:
      sub_233D45328(v6, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      break;
    case 65533:
      v7 = (_WORD *)(a1 + 332);
LABEL_15:
      sub_2341049E0(a2, v7, a4);
      break;
    default:
      switch(v5)
      {
        case 16384:
          v4 = (char *)(a1 + 1);
          goto LABEL_7;
        case 16385:
          v7 = (_WORD *)(a1 + 2);
          goto LABEL_15;
        case 16386:
          v7 = (_WORD *)(a1 + 4);
          goto LABEL_15;
        case 16387:
          sub_233CFAD7C(a2, (unsigned __int8 *)(a1 + 6), a4);
          return;
        default:
          if (v5)
          {
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-"
                                  "common/app-common/zap-generated/cluster-objects.cpp";
            *(_DWORD *)(a4 + 16) = 1166;
          }
          else
          {
LABEL_7:
            sub_2341046D0(a2, v4, a4);
          }
          break;
      }
      break;
  }
}

uint64_t sub_233CFAD7C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233CFDFA8(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

void sub_233CFAE50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;

  v4 = (_BYTE *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 65528:
      v6 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v6 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v6 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v6 = a1 + 248;
LABEL_3:
      sub_233D45328(v6, a2, a4);
      return;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
      return;
    default:
      if (v5 == 16)
      {
        v4 = (_BYTE *)(a1 + 1);
      }
      else if (v5)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 1200;
        return;
      }
      sub_23410492C(a2, v4, a4);
      return;
  }
}

double sub_233CFAEF8@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *(unsigned __int8 *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233CFDCB0(a2, 1uLL, a1 + 1, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341071D8(a2, 2uLL, *((unsigned __int8 *)a1 + 6), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_2341071D8(a2, 3uLL, *((unsigned __int8 *)a1 + 7), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(a2, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFB05C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_12:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1790;
      v13 = 1233;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v12);
          break;
        case 1:
          sub_233CFB1B0(a2, (__int16 *)(a1 + 2), (uint64_t)&v10);
          goto LABEL_9;
        case 2:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 6);
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 7);
LABEL_8:
          sub_233D45468(v7, v8, &v10);
LABEL_9:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_233CFB1B0@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*((_BYTE *)a2 + 2))
      *((_BYTE *)a2 + 2) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *a2 = 0;
  *((_BYTE *)a2 + 2) = 1;
  result = sub_2341049E0(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!*((_BYTE *)a2 + 2))
      sub_233CAF304();
    if (*a2 == -1)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233CFB288@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFA850((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D02A94(v7, 1uLL, a1 + 1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(v7, 2uLL, a1[3], (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341071D8(v7, 3uLL, a1[4], (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(v7, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFB3D0@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_12:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F17A8;
      v13 = 1282;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CFA9D4(a2, a1, &v12);
          break;
        case 1:
          sub_233CFA208(a2, a1 + 1, (uint64_t)&v10);
          goto LABEL_9;
        case 2:
          v7 = a2;
          v8 = a1 + 3;
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = a1 + 4;
LABEL_8:
          sub_233D45468(v7, v8, &v10);
LABEL_9:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233CFB524@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFA850((uint64_t)&v7, 0, (unsigned __int8 *)a1);
  if (!(_DWORD)v8)
  {
    sub_2341071D8(v7, 1uLL, *(unsigned __int8 *)(a1 + 1), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233CFDCB0(v7, 2uLL, (unsigned __int16 *)(a1 + 2), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341071D8(v7, 3uLL, *(unsigned __int8 *)(a1 + 6), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_2341071D8(v7, 4uLL, *(unsigned __int8 *)(a1 + 7), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(v7, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFB698@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_13:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F17C0;
      v13 = 1332;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CFA9D4(a2, (_BYTE *)a1, &v12);
          break;
        case 1:
          sub_23410492C(a2, (_BYTE *)(a1 + 1), (uint64_t)&v10);
          goto LABEL_10;
        case 2:
          sub_233CFB1B0(a2, (__int16 *)(a1 + 2), (uint64_t)&v10);
          goto LABEL_10;
        case 3:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 6);
          goto LABEL_9;
        case 4:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 7);
LABEL_9:
          sub_233D45468(v7, v8, &v10);
LABEL_10:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

double sub_233CFB80C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(a2, 1uLL, a1[1], (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFB918@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F17D8;
      v11 = 1383;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45468(a2, a1 + 1, &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45468(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFBA24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_12:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F17F0;
      v13 = 1424;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v12);
          break;
        case 1:
          sub_233CFB1B0(a2, (__int16 *)(a1 + 2), (uint64_t)&v10);
          goto LABEL_9;
        case 2:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 6);
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 7);
LABEL_8:
          sub_233D45468(v7, v8, &v10);
LABEL_9:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233CFBB78@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_12:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1808;
      v13 = 1473;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CFA9D4(a2, a1, &v12);
          break;
        case 1:
          sub_233CFA208(a2, a1 + 1, (uint64_t)&v10);
          goto LABEL_9;
        case 2:
          v7 = a2;
          v8 = a1 + 3;
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = a1 + 4;
LABEL_8:
          sub_233D45468(v7, v8, &v10);
LABEL_9:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233CFBCCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_13:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1820;
      v13 = 1523;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CFA9D4(a2, (_BYTE *)a1, &v12);
          break;
        case 1:
          sub_23410492C(a2, (_BYTE *)(a1 + 1), (uint64_t)&v10);
          goto LABEL_10;
        case 2:
          sub_233CFB1B0(a2, (__int16 *)(a1 + 2), (uint64_t)&v10);
          goto LABEL_10;
        case 3:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 6);
          goto LABEL_9;
        case 4:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 7);
LABEL_9:
          sub_233D45468(v7, v8, &v10);
LABEL_10:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

double sub_233CFBE40@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1838;
      v11 = 1574;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45468(a2, a1 + 1, &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45468(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFBF4C@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1850;
      v9 = 1612;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233CFC020(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v4;
  int v5;
  _WORD *v6;
  uint64_t v7;
  _BYTE *v8;
  __int16 *v9;

  v4 = (unsigned __int8 *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      goto LABEL_22;
    case 1:
      v6 = (_WORD *)(a1 + 2);
      goto LABEL_28;
    case 2:
      v8 = (_BYTE *)(a1 + 4);
      goto LABEL_11;
    case 3:
      v8 = (_BYTE *)(a1 + 5);
LABEL_11:
      sub_23410492C(a2, v8, a4);
      return;
    case 4:
      v6 = (_WORD *)(a1 + 6);
      goto LABEL_28;
    case 5:
      v6 = (_WORD *)(a1 + 8);
      goto LABEL_28;
    case 6:
      v6 = (_WORD *)(a1 + 10);
      goto LABEL_28;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
LABEL_8:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 1675;
      return;
    case 15:
      sub_233D45468(a2, (_BYTE *)(a1 + 12), (_QWORD *)a4);
      return;
    case 16:
      v6 = (_WORD *)(a1 + 14);
LABEL_28:
      sub_2341049E0(a2, v6, a4);
      return;
    case 17:
      v4 = (unsigned __int8 *)(a1 + 16);
      goto LABEL_22;
    case 18:
      v9 = (__int16 *)(a1 + 18);
      goto LABEL_20;
    case 19:
      v9 = (__int16 *)(a1 + 22);
LABEL_20:
      sub_233CFB1B0(a2, v9, a4);
      break;
    case 20:
      v4 = (unsigned __int8 *)(a1 + 26);
LABEL_22:
      sub_233CFA208(a2, v4, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v7 = a1 + 32;
          goto LABEL_5;
        case 65529:
          v7 = a1 + 112;
          goto LABEL_5;
        case 65530:
          v7 = a1 + 192;
          goto LABEL_5;
        case 65531:
          v7 = a1 + 272;
LABEL_5:
          sub_233D45328(v7, a2, a4);
          return;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 352), a4);
          return;
        case 65533:
          v6 = (_WORD *)(a1 + 356);
          goto LABEL_28;
        default:
          if (v5 != 0x4000)
            goto LABEL_8;
          v4 = (unsigned __int8 *)(a1 + 28);
          goto LABEL_22;
      }
  }
}

void sub_233CFC15C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  _DWORD *v8;
  char *v9;

  v4 = (_OWORD *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 <= 110)
  {
    if (v5 <= 80)
    {
      if (v5 != 4)
      {
        if (v5 == 28)
        {
          v4 = (_OWORD *)(a1 + 16);
        }
        else
        {
          if (v5 != 46)
            goto LABEL_25;
          v4 = (_OWORD *)(a1 + 32);
        }
      }
      sub_234104C8C(a2, v4, (_QWORD *)a4);
      return;
    }
    if (v5 > 84)
    {
      if (v5 != 85)
      {
        if (v5 == 103)
        {
          v6 = (_BYTE *)(a1 + 51);
          goto LABEL_33;
        }
LABEL_25:
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 1723;
        return;
      }
      v9 = (char *)(a1 + 50);
    }
    else
    {
      if (v5 != 81)
      {
        if (v5 == 84)
        {
          v6 = (_BYTE *)(a1 + 49);
LABEL_33:
          sub_23410492C(a2, v6, a4);
          return;
        }
        goto LABEL_25;
      }
      v9 = (char *)(a1 + 48);
    }
    sub_2341046D0(a2, v9, a4);
    return;
  }
  switch(v5)
  {
    case 65528:
      v7 = a1 + 64;
      goto LABEL_9;
    case 65529:
      v7 = a1 + 144;
      goto LABEL_9;
    case 65530:
      v7 = a1 + 224;
      goto LABEL_9;
    case 65531:
      v7 = a1 + 304;
LABEL_9:
      sub_233D45328(v7, a2, a4);
      return;
    case 65532:
      v8 = (_DWORD *)(a1 + 384);
      goto LABEL_30;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 388), a4);
      return;
    default:
      if (v5 == 111)
      {
        v6 = (_BYTE *)(a1 + 52);
        goto LABEL_33;
      }
      if (v5 != 256)
        goto LABEL_25;
      v8 = (_DWORD *)(a1 + 56);
LABEL_30:
      sub_234104A50(a2, v8, a4);
      break;
  }
}

void sub_233CFC2A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 1753;
      break;
  }
}

double sub_233CFC324@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_23410726C(a2, 0, *(_DWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 4), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFC430@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1868;
      v11 = 1784;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 4), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_234104A50(a2, (_DWORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFC53C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233CFDCB0(a2, 0, (unsigned __int16 *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(a2, 1uLL, *(unsigned __int8 *)(a1 + 4), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341071D8(a2, 2uLL, *(unsigned __int8 *)(a1 + 5), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D1E8A0(a2, 3uLL, (_BYTE *)(a1 + 8), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(a2, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFC6A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_12:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1880;
      v13 = 1827;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233CFC80C(a2, (__int16 *)a1, (uint64_t)&v12);
          break;
        case 1:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 4);
          goto LABEL_7;
        case 2:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 5);
LABEL_7:
          sub_23410492C(v7, v8, (uint64_t)&v10);
          goto LABEL_9;
        case 3:
          *(_BYTE *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          sub_233D0AC9C(a2, a1 + 16, &v10);
LABEL_9:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t sub_233CFC80C@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*((_BYTE *)a2 + 2))
      *((_BYTE *)a2 + 2) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *a2 = 0;
  *((_BYTE *)a2 + 2) = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  result = sub_233D45404(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *(_DWORD *)(a3 + 16) = 61;
    if (!*((_BYTE *)a2 + 2))
      sub_233CAF304();
    if (*a2 == -1)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

void sub_233CFC8E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 400;
      goto LABEL_3;
    case 65529:
      a1 += 480;
      goto LABEL_3;
    case 65530:
      a1 += 560;
      goto LABEL_3;
    case 65531:
      a1 += 640;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 720), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 724), a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          a1 += 80;
          goto LABEL_3;
        case 2:
          a1 += 160;
          goto LABEL_3;
        case 3:
          a1 += 240;
          goto LABEL_3;
        case 4:
          a1 += 320;
          goto LABEL_3;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 1887;
          break;
      }
      break;
  }
}

double sub_233CFC9B4@<D0>(_BYTE *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233CFC9D8(a1, a2, a3, v5, a4);
}

double sub_233CFC9D8@<D0>(_BYTE *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  double result;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  sub_234107E40(a2, a3, 21, &v13, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  v8 = v14;
  if (!(_DWORD)v14)
  {
    sub_233D3B7EC(a2, 1uLL, a1, (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
    if (!(_DWORD)v14)
    {
      sub_233D452B4(a2, 2uLL, a1 + 16, (uint64_t)&v14);
      v12 = v15;
      v11 = v14;
      v8 = v14;
      if (!(_DWORD)v14)
      {
        sub_233D452B4(a2, 3uLL, a1 + 20, (uint64_t)&v14);
        v12 = v15;
        v11 = v14;
        v8 = v14;
        if (!(_DWORD)v14)
        {
          sub_233D454CC(a2, 4uLL, a1 + 24, (uint64_t)&v14);
          v12 = v15;
          v11 = v14;
          v8 = v14;
        }
      }
    }
  }
  if (*a4)
  {
    if (v8)
      goto LABEL_11;
    sub_2341071D8(a2, 0xFEuLL, a1[32], (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (!v8)
  {
    sub_234107FB0(a2, v13, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
LABEL_11:
  result = *(double *)&v11;
  *(_OWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = v12;
  return result;
}

double sub_233CFCB74@<D0>(_BYTE *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233CFC9D8(a1, a2, a3, v6, a5);
}

double sub_233CFCBA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _WORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 != 1)
  {
    while (2)
    {
      v12 = xmmword_2504F1898;
      v13 = 1937;
      if (!v6)
      {
        switch((char)v14)
        {
          case 1:
            *(_BYTE *)a1 = 1;
            *(_QWORD *)(a1 + 8) = 0;
            sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v12);
            goto LABEL_12;
          case 2:
            *(_BYTE *)(a1 + 16) = 1;
            *(_WORD *)(a1 + 18) = 0;
            v7 = a2;
            v8 = (_WORD *)(a1 + 18);
            goto LABEL_9;
          case 3:
            *(_BYTE *)(a1 + 20) = 1;
            *(_WORD *)(a1 + 22) = 0;
            v7 = a2;
            v8 = (_WORD *)(a1 + 22);
LABEL_9:
            sub_2341049E0(v7, v8, (uint64_t)&v10);
            goto LABEL_11;
          case 4:
            *(_BYTE *)(a1 + 24) = 1;
            *(_DWORD *)(a1 + 28) = 0;
            sub_234104A50(a2, (_DWORD *)(a1 + 28), (uint64_t)&v10);
            goto LABEL_11;
          default:
            if (v14 != 254)
              goto LABEL_12;
            sub_23410492C(a2, (_BYTE *)(a1 + 32), (uint64_t)&v10);
LABEL_11:
            v12 = v10;
            v13 = v11;
LABEL_12:
            result = *(double *)&v12;
            *(_OWORD *)a3 = v12;
            *(_QWORD *)(a3 + 16) = v13;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
            v6 = v16;
            if (v16 == 1)
              goto LABEL_14;
            continue;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_14:
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void sub_233CFCD4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 80;
      goto LABEL_3;
    case 65529:
      a1 += 160;
      goto LABEL_3;
    case 65530:
      a1 += 240;
      goto LABEL_3;
    case 65531:
      a1 += 320;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 400), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 404), a4);
      return;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 1993;
      }
      else
      {
LABEL_3:
        sub_233D45328(a1, a2, a4);
      }
      return;
  }
}

double sub_233CFCDDC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D025E4(a2, 0, a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233CFDCB0(a2, 1uLL, (unsigned __int16 *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D025E4(a2, 2uLL, a1 + 12, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFCF14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F18B0;
    v11 = 2025;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233CFD040(a2, a1 + 12, (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_233CFD040(a2, a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_233CFB1B0(a2, (__int16 *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_233CFD040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*(_BYTE *)(a2 + 4))
      *(_BYTE *)(a2 + 4) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  result = sub_234104A50(a1, (_DWORD *)a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!*(_BYTE *)(a2 + 4))
      sub_233CAF304();
    if (*(_DWORD *)a2 == -1)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233CFD118@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233CFD13C(a1, a2, a3, v5, a4);
}

double sub_233CFD13C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  double result;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  if (*a4)
  {
    v10 = *sub_233C27DCC(a4);
    v11 = a1[56];
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
    if (v10 != v11)
      goto LABEL_8;
  }
  else
  {
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  sub_233CFD364((uint64_t)&v13, 1u, a1);
  sub_233CFD364((uint64_t)&v13, 2u, a1 + 1);
  if (!(_DWORD)v14)
  {
    sub_233D45540(v13, 3uLL, (uint64_t)(a1 + 8), &v17);
    v15 = v18;
    v14 = v17;
    if (!(_DWORD)v17)
    {
      sub_233D45630(v13, 4uLL, (uint64_t)(a1 + 32), &v17);
      v14 = v17;
      v15 = v18;
    }
  }
LABEL_8:
  if (*a4 && !(_DWORD)v14)
  {
    sub_2341071D8(v13, 0xFEuLL, a1[56], (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_234107FB0(v13, v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v15;
  return result;
}

double sub_233CFD338@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233CFD13C(a1, a2, a3, v6, a5);
}

double sub_233CFD364(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4)
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    else
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CFD3D8@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (2)
    {
      v10 = xmmword_2504F18C8;
      v11 = 2102;
      if (!v6)
      {
        switch((char)v12)
        {
          case 1:
            sub_233CFD55C(a2, a1, &v10);
            goto LABEL_11;
          case 2:
            sub_233CFD5BC(a2, a1 + 1, &v8);
            goto LABEL_10;
          case 3:
            sub_233CFD61C(a2, (uint64_t)(a1 + 8), &v8);
            goto LABEL_10;
          case 4:
            sub_233CFD61C(a2, (uint64_t)(a1 + 96), &v8);
            goto LABEL_10;
          default:
            if (v12 != 254)
              goto LABEL_11;
            sub_23410492C(a2, a1 + 184, (uint64_t)&v8);
LABEL_10:
            v10 = v8;
            v11 = v9;
LABEL_11:
            result = *(double *)&v10;
            *(_OWORD *)a3 = v10;
            *(_QWORD *)(a3 + 16) = v11;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
            v6 = v14;
            if (v14 == 1)
              goto LABEL_13;
            continue;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_13:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_233CFD55C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if ((v6 - 1) >= 5)
      LOBYTE(v6) = 0;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

uint64_t sub_233CFD5BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if ((v6 - 1) >= 3)
      LOBYTE(v6) = 0;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233CFD61C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 80))
      *(_BYTE *)(a2 + 80) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v7 = sub_233D45724(a2);
    sub_233D45328(v7, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

double sub_233CFD6A4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233CFD6C8(a1, a2, a3, v5, a4);
}

double sub_233CFD6C8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  double result;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  if (*a4)
  {
    v10 = *sub_233C27DCC(a4);
    v11 = *(unsigned __int8 *)(a1 + 16);
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
    if (v10 != v11)
      goto LABEL_7;
  }
  else
  {
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_2341073FC(v13, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
LABEL_7:
  if (*a4 && !(_DWORD)v14)
  {
    sub_2341071D8(v13, 0xFEuLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_234107FB0(v13, v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v15;
  return result;
}

double sub_233CFD878@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233CFD6C8(a1, a2, a3, v6, a5);
}

double sub_233CFD8A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F18E0;
      v11 = 2175;
      if (v6)
        sub_233D4527C();
      if (v12 == 254)
      {
        sub_23410492C(a2, (_BYTE *)(a1 + 16), (uint64_t)&v10);
      }
      else if (v12 == 1)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

void sub_233CFD9EC(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_23410462C(a1) == 16)
  {
    sub_234104B68(a1, a2, (_QWORD *)a3);
  }
  else
  {
    *(_DWORD *)a3 = 43;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *(_DWORD *)(a3 + 16) = 80;
  }
}

void sub_233CFDA5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  _WORD *v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 168;
      goto LABEL_3;
    case 65529:
      a1 += 248;
      goto LABEL_3;
    case 65530:
      a1 += 328;
      goto LABEL_3;
    case 65531:
      a1 += 408;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 488), a4);
      break;
    case 65533:
      v5 = (_WORD *)(a1 + 492);
LABEL_15:
      sub_2341049E0(a2, v5, a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          a1 += 80;
          goto LABEL_3;
        case 2:
          v5 = (_WORD *)(a1 + 160);
          goto LABEL_15;
        case 3:
          v5 = (_WORD *)(a1 + 162);
          goto LABEL_15;
        case 4:
          v5 = (_WORD *)(a1 + 164);
          goto LABEL_15;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 2227;
          break;
      }
      break;
  }
}

void sub_233CFDB28(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v7;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CFDC74(a2, 1uLL, a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_233CFDCB0(a2, 2uLL, (unsigned __int16 *)(a1 + 16), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v7 = *(unsigned __int8 *)(a1 + 20);
        if (v7 == 3)
        {
          *(_DWORD *)a4 = 1415;
          a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
          *((_DWORD *)a4 + 4) = 75;
        }
        else
        {
          sub_2341071D8(a2, 3uLL, v7, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            sub_233CFDCF0(a2, 4uLL, *(_BYTE *)(a1 + 96), (unsigned __int8 *)(a1 + 24), (uint64_t)a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              sub_2341071D8(a2, 0xFEuLL, *(unsigned __int8 *)(a1 + 96), (uint64_t)a4);
              if (!*(_DWORD *)a4)
                sub_234107FB0(a2, v8, (uint64_t)a4);
            }
          }
        }
      }
    }
  }
}

char *sub_233CFDC74@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4;

  if (!*(_BYTE *)(a3 + 8))
    return sub_2341079D4(result, a2, a4);
  v4 = *(_QWORD *)a3;
  if (v4 != -1)
    return sub_2341071EC(result, a2, v4, a4);
  *(_DWORD *)a4 = 1415;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
  *(_DWORD *)(a4 + 16) = 193;
  return result;
}

char *sub_233CFDCB0@<X0>(char *result@<X0>, unint64_t a2@<X1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;

  if (!*((_BYTE *)a3 + 2))
    return sub_2341079D4(result, a2, a4);
  v4 = *a3;
  if (v4 != 0xFFFF)
    return sub_234107224(result, a2, v4, a4);
  *(_DWORD *)a4 = 1415;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
  *(_DWORD *)(a4 + 16) = 193;
  return result;
}

void sub_233CFDCF0(char *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE v5[2];

  if (a4[64])
  {
    v5[0] = 1;
    v5[1] = a3;
    sub_233CFD13C(a4, a1, a2, v5, a5);
  }
  else
  {
    sub_2341079D4(a1, a2, a5);
  }
}

double sub_233CFDD4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (2)
    {
      v10 = xmmword_2504F18F8;
      v11 = 2257;
      if (!v6)
      {
        switch((char)v12)
        {
          case 1:
            sub_233CFDED0(a2, a1, (uint64_t)&v10);
            goto LABEL_11;
          case 2:
            sub_233CFB1B0(a2, (__int16 *)(a1 + 16), (uint64_t)&v8);
            goto LABEL_10;
          case 3:
            sub_233CFDFA8(a2, (_BYTE *)(a1 + 20), &v8);
            goto LABEL_10;
          case 4:
            sub_233CFE008(a2, a1 + 24, &v8);
            goto LABEL_10;
          default:
            if (v12 != 254)
              goto LABEL_11;
            sub_23410492C(a2, (_BYTE *)(a1 + 224), (uint64_t)&v8);
LABEL_10:
            v10 = v8;
            v11 = v9;
LABEL_11:
            result = *(double *)&v10;
            *(_OWORD *)a3 = v10;
            *(_QWORD *)(a3 + 16) = v11;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
            v6 = v14;
            if (v14 == 1)
              goto LABEL_13;
            continue;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_13:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_233CFDED0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  result = sub_23410499C(a1, (_QWORD *)a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!*(_BYTE *)(a2 + 8))
      sub_233CAF304();
    if (*(_QWORD *)a2 == -1)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_233CFDFA8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 3)
      LOBYTE(v6) = 3;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233CFE008(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 192))
      *(_BYTE *)(a2 + 192) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_BYTE *)(a2 + 192) = 1;
    sub_233CFD3D8((_BYTE *)a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

void sub_233CFE0B0(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v7;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CFDC74(a2, 1uLL, a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_233CFDCB0(a2, 2uLL, (unsigned __int16 *)(a1 + 16), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v7 = *(unsigned __int8 *)(a1 + 20);
        if (v7 == 3)
        {
          *(_DWORD *)a4 = 1415;
          a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
          *((_DWORD *)a4 + 4) = 75;
        }
        else
        {
          sub_2341071D8(a2, 3uLL, v7, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            sub_233CFE1FC(a2, 4uLL, *(_BYTE *)(a1 + 56), a1 + 24, (uint64_t)a4);
            if (!*(_DWORD *)a4)
            {
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
              sub_2341071D8(a2, 0xFEuLL, *(unsigned __int8 *)(a1 + 56), (uint64_t)a4);
              if (!*(_DWORD *)a4)
                sub_234107FB0(a2, v8, (uint64_t)a4);
            }
          }
        }
      }
    }
  }
}

void sub_233CFE1FC(char *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE v5[2];

  if (*(_BYTE *)(a4 + 24))
  {
    v5[0] = 1;
    v5[1] = a3;
    sub_233CFD6C8(a4, a1, a2, v5, a5);
  }
  else
  {
    sub_2341079D4(a1, a2, a5);
  }
}

double sub_233CFE258@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (2)
    {
      v10 = xmmword_2504F1910;
      v11 = 2312;
      if (!v6)
      {
        switch((char)v12)
        {
          case 1:
            sub_233CFDED0(a2, a1, (uint64_t)&v10);
            goto LABEL_11;
          case 2:
            sub_233CFB1B0(a2, (__int16 *)(a1 + 16), (uint64_t)&v8);
            goto LABEL_10;
          case 3:
            sub_233CFDFA8(a2, (_BYTE *)(a1 + 20), &v8);
            goto LABEL_10;
          case 4:
            sub_233CFE3DC(a2, a1 + 24, &v8);
            goto LABEL_10;
          default:
            if (v12 != 254)
              goto LABEL_11;
            sub_23410492C(a2, (_BYTE *)(a1 + 56), (uint64_t)&v8);
LABEL_10:
            v10 = v8;
            v11 = v9;
LABEL_11:
            result = *(double *)&v10;
            *(_OWORD *)a3 = v10;
            *(_QWORD *)(a3 + 16) = v11;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
            v6 = v14;
            if (v14 == 1)
              goto LABEL_13;
            continue;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_13:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

void sub_233CFE3DC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 24))
      *(_BYTE *)(a2 + 24) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 1;
    sub_233CFD8A4(a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

double sub_233CFE470@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(v7, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107684(v7, 1uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233CFE5F4((uint64_t)&v7, 2u, (unsigned __int8 *)a1 + 24);
  if (!(_DWORD)v8)
  {
    sub_234107224(v7, 3uLL, a1[13], (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(v7, 4uLL, a1[14], (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233CFE66C((uint64_t)&v7, 5u, (unsigned __int8 *)a1 + 30);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFE5F4(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 7)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CFE66C(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 4)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233CFE6E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_13:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1928;
      v11 = 2373;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
          goto LABEL_10;
        case 2:
          sub_233CFE874(a2, (_BYTE *)(a1 + 24), &v8);
          goto LABEL_10;
        case 3:
          sub_2341049E0(a2, (_WORD *)(a1 + 26), (uint64_t)&v8);
          goto LABEL_10;
        case 4:
          sub_233D45770(a2, (_WORD *)(a1 + 28), &v8);
          goto LABEL_10;
        case 5:
          sub_233C05F48(a2, (_BYTE *)(a1 + 30), &v8);
LABEL_10:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_233CFE874@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 7)
      LOBYTE(v6) = 7;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233CFE8D4@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(v7, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107684(v7, 1uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233CF9354((uint64_t)&v7, 2u, (unsigned __int8 *)a1 + 24);
  sub_233CF9E50((uint64_t)&v7, 3u, (unsigned __int16 **)a1 + 4);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFEA00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1940;
      v11 = 2432;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
          goto LABEL_8;
        case 2:
          sub_233CFDFA8(a2, (_BYTE *)(a1 + 24), &v8);
          goto LABEL_8;
        case 3:
          sub_233D45328(a1 + 32, a2, (uint64_t)&v8);
LABEL_8:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

double sub_233CFEB58@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D454CC(a2, 1uLL, (_BYTE *)a1 + 4, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFEC64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1958;
      v11 = 2483;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFED7C@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D454CC(a2, 1uLL, (_BYTE *)a1 + 4, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, a1[6], (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFEEB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1970;
    v11 = 2523;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_2341049E0(a2, (_WORD *)(a1 + 12), (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_DWORD *)(a1 + 8) = 0;
      sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233CFEFF4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1988;
      v11 = 2566;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFF10C@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D454CC(a2, 1uLL, (_BYTE *)a1 + 4, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_23410726C(a2, 2uLL, *((_DWORD *)a1 + 3), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233CFF244@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _DWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F19A0;
    v13 = 2606;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      v7 = a2;
      v8 = (_DWORD *)(a1 + 12);
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_DWORD *)(a1 + 8) = 0;
      v7 = a2;
      v8 = (_DWORD *)(a1 + 8);
    }
    sub_234104A50(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233CFF380@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F19B8;
      v11 = 2649;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFF498@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F19D0;
      v11 = 2688;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFF5B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _DWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F19E8;
    v13 = 2728;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      v7 = a2;
      v8 = (_DWORD *)(a1 + 12);
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_DWORD *)(a1 + 8) = 0;
      v7 = a2;
      v8 = (_DWORD *)(a1 + 8);
    }
    sub_234104A50(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233CFF6EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1A00;
      v11 = 2771;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFF804@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1A18;
      v11 = 2810;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFF91C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _DWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F1A30;
    v13 = 2850;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      v7 = a2;
      v8 = (_DWORD *)(a1 + 12);
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_DWORD *)(a1 + 8) = 0;
      v7 = a2;
      v8 = (_DWORD *)(a1 + 8);
    }
    sub_234104A50(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233CFFA58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1A48;
      v11 = 2893;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 4) = 1;
        *(_DWORD *)(a1 + 8) = 0;
        sub_234104A50(a2, (_DWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233CFFB70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  _DWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F1A60;
    v13 = 2933;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      v7 = a2;
      v8 = (_DWORD *)(a1 + 12);
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_DWORD *)(a1 + 8) = 0;
      v7 = a2;
      v8 = (_DWORD *)(a1 + 8);
    }
    sub_234104A50(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void sub_233CFFCAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  if (v4 <= 65527)
  {
    if (v4)
    {
      if (v4 != 1)
      {
        if (v4 == 2)
        {
          sub_234104C8C(a2, (_OWORD *)(a1 + 160), (_QWORD *)a4);
        }
        else
        {
LABEL_16:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 2982;
        }
        return;
      }
      a1 += 80;
    }
LABEL_4:
    sub_233D45328(a1, a2, a4);
    return;
  }
  switch(v4)
  {
    case 65528:
      a1 += 176;
      goto LABEL_4;
    case 65529:
      a1 += 256;
      goto LABEL_4;
    case 65530:
      a1 += 336;
      goto LABEL_4;
    case 65531:
      a1 += 416;
      goto LABEL_4;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 496), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 500), a4);
      break;
    default:
      goto LABEL_16;
  }
}

char *sub_233CFFD70@<X0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  int v9;

  v9 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_234107224(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_23410726C(a2, 1uLL, *((_DWORD *)a1 + 1), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v8 = *((unsigned __int8 *)a1 + 8);
        if (v8 == 4)
        {
          *(_DWORD *)a4 = 1415;
          a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
          *((_DWORD *)a4 + 4) = 75;
        }
        else
        {
          result = sub_2341071D8(a2, 2uLL, v8, (uint64_t)a4);
          if (!*(_DWORD *)a4)
            return sub_234107FB0(a2, v9, (uint64_t)a4);
        }
      }
    }
  }
  return result;
}

double sub_233CFFE70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1A78;
    v11 = 3010;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233C05F48(a2, (_BYTE *)(a1 + 8), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_234104A50(a2, (_DWORD *)(a1 + 4), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

char *sub_233CFFF9C@<X0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v10 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v10, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_234107224(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_23410726C(a2, 1uLL, *((_DWORD *)a1 + 1), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v8 = *((unsigned __int8 *)a1 + 8);
        if (v8 == 4)
        {
LABEL_5:
          *(_DWORD *)a4 = 1415;
          a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
          *((_DWORD *)a4 + 4) = 75;
          return result;
        }
        result = sub_2341071D8(a2, 2uLL, v8, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v9 = *((unsigned __int8 *)a1 + 9);
          if (v9 == 2)
            goto LABEL_5;
          result = sub_2341071D8(a2, 3uLL, v9, (uint64_t)a4);
          if (!*(_DWORD *)a4)
            return sub_234107FB0(a2, v10, (uint64_t)a4);
        }
      }
    }
  }
  return result;
}

double sub_233D000CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1A90;
      v11 = 3056;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          sub_234104A50(a2, (_DWORD *)(a1 + 4), (uint64_t)&v8);
          goto LABEL_8;
        case 2:
          sub_233C05F48(a2, (_BYTE *)(a1 + 8), &v8);
          goto LABEL_8;
        case 3:
          sub_233CFA9D4(a2, (_BYTE *)(a1 + 9), &v8);
LABEL_8:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

double sub_233D00224@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, a1[1], (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D00330@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1AA8;
      v11 = 3109;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0043C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D0052C((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D457D4(v7, 1uLL, (uint64_t)&v11, a1 + 1);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0052C(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 6)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233D005A4@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1AC0;
      v11 = 3150;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D006B0(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CF96D0(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_233D006B0@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233D45834(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

void sub_233D00784(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _WORD *v4;
  int v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  char *v11;

  v4 = (_WORD *)a1;
  v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case 0:
      goto LABEL_39;
    case 1:
      v7 = (_OWORD *)(a1 + 8);
      goto LABEL_24;
    case 2:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_233D45404(a2, (_WORD *)(a1 + 24), a4);
      if (!*(_DWORD *)a4)
      {
        *(_DWORD *)a4 = 0;
        a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
        v9 = 61;
LABEL_30:
        *((_DWORD *)a4 + 4) = v9;
      }
      return;
    case 3:
      v7 = (_OWORD *)(a1 + 32);
      goto LABEL_24;
    case 4:
      v4 = (_WORD *)(a1 + 48);
      goto LABEL_39;
    case 5:
      v7 = (_OWORD *)(a1 + 56);
      goto LABEL_24;
    case 6:
      v7 = (_OWORD *)(a1 + 72);
      goto LABEL_24;
    case 7:
      v4 = (_WORD *)(a1 + 88);
      goto LABEL_39;
    case 8:
      v7 = (_OWORD *)(a1 + 96);
      goto LABEL_24;
    case 9:
      v10 = (_DWORD *)(a1 + 112);
      goto LABEL_37;
    case 10:
      v7 = (_OWORD *)(a1 + 120);
      goto LABEL_24;
    case 11:
      v7 = (_OWORD *)(a1 + 136);
      goto LABEL_24;
    case 12:
      v7 = (_OWORD *)(a1 + 152);
      goto LABEL_24;
    case 13:
      v7 = (_OWORD *)(a1 + 168);
      goto LABEL_24;
    case 14:
      v7 = (_OWORD *)(a1 + 184);
      goto LABEL_24;
    case 15:
      v7 = (_OWORD *)(a1 + 200);
      goto LABEL_24;
    case 16:
      v11 = (char *)(a1 + 216);
      goto LABEL_22;
    case 17:
      v11 = (char *)(a1 + 217);
LABEL_22:
      sub_2341046D0(a2, v11, (uint64_t)a4);
      break;
    case 18:
      v7 = (_OWORD *)(a1 + 224);
LABEL_24:
      sub_234104C8C(a2, v7, a4);
      break;
    case 19:
      sub_233D00330((_WORD *)(a1 + 240), a2, (uint64_t)a4);
      break;
    case 20:
      sub_233D005A4((_BYTE *)(a1 + 244), a2, (uint64_t)a4);
      break;
    case 21:
      v10 = (_DWORD *)(a1 + 248);
LABEL_37:
      sub_234104A50(a2, v10, (uint64_t)a4);
      break;
    case 22:
      v4 = (_WORD *)(a1 + 252);
LABEL_39:
      sub_2341049E0(a2, v4, (uint64_t)a4);
      break;
    default:
      switch(v6)
      {
        case 65528:
          v8 = a1 + 256;
          break;
        case 65529:
          v8 = a1 + 336;
          break;
        case 65530:
          v8 = a1 + 416;
          break;
        case 65531:
          v8 = a1 + 496;
          break;
        case 65532:
          v10 = (_DWORD *)(a1 + 576);
          goto LABEL_37;
        case 65533:
          v4 = (_WORD *)(a1 + 580);
          goto LABEL_39;
        default:
          *(_DWORD *)a4 = 0;
          a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common/app-commo"
                  "n/zap-generated/cluster-objects.cpp";
          v9 = 3259;
          goto LABEL_30;
      }
      sub_233D45328(v8, a2, (uint64_t)a4);
      break;
  }
}

char *sub_233D00990@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_23410726C(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
      return sub_234107FB0(a2, v8, (uint64_t)a4);
  }
  return result;
}

double sub_233D00A20@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1AD8;
      v9 = 3285;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D00AF4@<X0>(char *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  char *result;
  int v6;

  v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a1, a2, 21, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
    return sub_234107FB0(a1, v6, (uint64_t)a3);
  return result;
}

char *sub_233D00B54@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341071D8(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
      return sub_234107FB0(a2, v8, (uint64_t)a4);
  }
  return result;
}

double sub_233D00BE4@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1AF0;
      v9 = 3341;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D00CB8@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_234106F04(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
      return sub_234107FB0(a2, v8, (uint64_t)a4);
  }
  return result;
}

double sub_233D00D48@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1B08;
      v9 = 3376;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341046D0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D00E1C@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(v7, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(v7, 1uLL, a1[1], (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_23410726C(v7, 2uLL, *((_DWORD *)a1 + 1), (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  sub_233D01014((uint64_t)&v7, 3u, (unsigned __int8 **)a1 + 1);
  if (!(_DWORD)v8)
  {
    sub_233D452B4(v7, 4uLL, (_BYTE *)a1 + 24, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(v7, 5uLL, (_BYTE *)a1 + 32, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D45894(v7, 6uLL, (_BYTE *)a1 + 56, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D096D4(v7, 7uLL, (_BYTE *)a1 + 64, (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(v7, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D01014(uint64_t a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const char *v7;
  unsigned int v8;
  int v9;
  int v10;
  double result;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v14 = 0;
    v13 = 0;
    v12 = 0uLL;
    sub_234107E40(v4, a2, 22, &v14, (uint64_t)&v12);
    if (!(_DWORD)v12)
    {
      if (v6)
      {
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
        while (1)
        {
          v12 = 0uLL;
          v13 = 0;
          v8 = *v5;
          if (v8 == 4)
            break;
          sub_2341071D8(v4, 0x100uLL, v8, (uint64_t)&v12);
          if ((_DWORD)v12)
            goto LABEL_12;
          ++v5;
          if (!--v6)
            goto LABEL_8;
        }
        v10 = 75;
        v9 = 1415;
        goto LABEL_11;
      }
LABEL_8:
      v12 = 0uLL;
      v13 = 0;
      sub_234107FB0(v4, v14, (uint64_t)&v12);
      if (!(_DWORD)v12)
      {
        v9 = 0;
        v10 = 86;
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
LABEL_11:
        LODWORD(v12) = v9;
        *((_QWORD *)&v12 + 1) = v7;
        LODWORD(v13) = v10;
      }
    }
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)v3 = v12;
    *(_QWORD *)(v3 + 16) = v13;
  }
  return result;
}

double sub_233D01120@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_16:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1B20;
      v11 = 3423;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          v8 = 0uLL;
          v9 = 0;
          sub_233D45404(a2, (_WORD *)a1, &v8);
          if (!(_DWORD)v8)
          {
            LODWORD(v8) = 0;
            *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v9) = 61;
          }
          goto LABEL_13;
        case 1:
          sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v10);
          break;
        case 2:
          sub_234104A50(a2, (_DWORD *)(a1 + 4), (uint64_t)&v8);
          goto LABEL_13;
        case 3:
          sub_233D45328(a1 + 8, a2, (uint64_t)&v8);
          goto LABEL_13;
        case 4:
          *(_BYTE *)(a1 + 88) = 1;
          *(_WORD *)(a1 + 90) = 0;
          sub_2341049E0(a2, (_WORD *)(a1 + 90), (uint64_t)&v8);
          goto LABEL_13;
        case 5:
          *(_BYTE *)(a1 + 96) = 1;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 112) = 0;
          sub_234104C8C(a2, (_OWORD *)(a1 + 104), &v8);
          goto LABEL_13;
        case 6:
          *(_WORD *)(a1 + 120) = 1;
          sub_2341046D0(a2, (char *)(a1 + 121), (uint64_t)&v8);
          goto LABEL_13;
        case 7:
          sub_233D01328(a2, a1 + 128, (uint64_t)&v8);
LABEL_13:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_16;
    }
  }
  return result;
}

void sub_233D01328(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v5;

  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (_OWORD *)(a2 + 8);
  if (sub_23410462C(a1) == 16)
  {
    sub_234104B68(a1, v5, (_QWORD *)a3);
  }
  else
  {
    *(_DWORD *)a3 = 43;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *(_DWORD *)(a3 + 16) = 80;
  }
}

double sub_233D013A8@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFE66C((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D454CC(v7, 1uLL, a1 + 4, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(v7, 2uLL, a1 + 16, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D454CC(v7, 3uLL, a1 + 40, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D09660(v7, 4uLL, a1 + 48, (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_233D096D4(v7, 5uLL, a1 + 72, (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_233D45894(v7, 6uLL, a1 + 96, (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_233D096D4(v7, 7uLL, a1 + 104, (uint64_t)&v11);
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_234107FB0(v7, v10, (uint64_t)&v11);
                  v8 = v11;
                  v9 = v12;
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D015A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  _BYTE v21[8];
  uint64_t v22;

  v21[0] = 0;
  v22 = a2;
  sub_233CF7B40((uint64_t)v21, (uint64_t)&v18);
  v6 = v20;
  if (v20 == 1)
  {
LABEL_18:
    result = *(double *)&v18;
    *(_OWORD *)a3 = v18;
    *(_QWORD *)(a3 + 16) = v19;
  }
  else
  {
    while (1)
    {
      v16 = xmmword_2504F1B38;
      v17 = 3492;
      if (v6)
        sub_233D4527C();
      switch((char)v18)
      {
        case 0:
          sub_233C05F48(a2, (_BYTE *)a1, &v16);
          break;
        case 1:
          *(_BYTE *)(a1 + 4) = 1;
          *(_DWORD *)(a1 + 8) = 0;
          v7 = a2;
          v8 = (_DWORD *)(a1 + 8);
          goto LABEL_8;
        case 2:
          *(_BYTE *)(a1 + 16) = 1;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v9 = a2;
          v10 = (_OWORD *)(a1 + 24);
          goto LABEL_10;
        case 3:
          *(_BYTE *)(a1 + 40) = 1;
          *(_DWORD *)(a1 + 44) = 0;
          v7 = a2;
          v8 = (_DWORD *)(a1 + 44);
LABEL_8:
          sub_234104A50(v7, v8, (uint64_t)&v14);
          goto LABEL_15;
        case 4:
          *(_BYTE *)(a1 + 48) = 1;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v9 = a2;
          v10 = (_OWORD *)(a1 + 56);
LABEL_10:
          sub_234104C8C(v9, v10, &v14);
          goto LABEL_15;
        case 5:
          v11 = a2;
          v12 = a1 + 72;
          goto LABEL_14;
        case 6:
          *(_WORD *)(a1 + 96) = 1;
          sub_2341046D0(a2, (char *)(a1 + 97), (uint64_t)&v14);
          goto LABEL_15;
        case 7:
          v11 = a2;
          v12 = a1 + 104;
LABEL_14:
          sub_233D01328(v11, v12, (uint64_t)&v14);
LABEL_15:
          v16 = v14;
          v17 = v15;
          break;
        default:
          break;
      }
      result = *(double *)&v16;
      *(_OWORD *)a3 = v16;
      *(_QWORD *)(a3 + 16) = v17;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v21, (uint64_t)&v18);
      v6 = v20;
      if (v20 == 1)
        goto LABEL_18;
    }
  }
  return result;
}

double sub_233D01784@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_23410726C(a2, 1uLL, *(_DWORD *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D01890@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1B50;
      v11 = 3555;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104A50(a2, (_DWORD *)(a1 + 16), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D019D4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF9354((uint64_t)&v7, 0, (unsigned __int8 *)a1);
  if (!(_DWORD)v8)
  {
    sub_23410726C(v7, 1uLL, *(_DWORD *)(a1 + 4), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D01AC4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1B68;
      v11 = 3594;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104A50(a2, (_DWORD *)(a1 + 4), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CFDFA8(a2, (_BYTE *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D01BD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1B80;
      v11 = 3633;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104A50(a2, (_DWORD *)(a1 + 16), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

void sub_233D01D14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 3672;
      break;
  }
}

double sub_233D01D98@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D01DBC(a1, a2, a3, v5, a4);
}

double sub_233D01DBC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  double result;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  sub_234107E40(a2, a3, 21, &v13, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  v8 = v14;
  if (!(_DWORD)v14)
  {
    sub_2341071EC(a2, 1uLL, *(_QWORD *)a1, (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
    if (!(_DWORD)v14)
    {
      sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 8), (uint64_t)&v14);
      v12 = v15;
      v11 = v14;
      v8 = v14;
    }
  }
  if (*a4)
  {
    if (v8)
      goto LABEL_9;
    sub_2341071D8(a2, 0xFEuLL, *(unsigned __int8 *)(a1 + 10), (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (!v8)
  {
    sub_234107FB0(a2, v13, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
LABEL_9:
  result = *(double *)&v11;
  *(_OWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = v12;
  return result;
}

double sub_233D01F00@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D01DBC(a1, a2, a3, v6, a5);
}

double sub_233D01F2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1B98;
    v11 = 3720;
    if (i)
      sub_233D4527C();
    if (v12 == 254)
    {
      sub_23410492C(a2, (_BYTE *)(a1 + 10), (uint64_t)&v8);
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_2341049E0(a2, (_WORD *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0205C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(v7, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(v7, 1uLL, *(unsigned __int16 *)(a1 + 8), (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233CF9354((uint64_t)&v7, 2u, (unsigned __int8 *)(a1 + 10));
  if (!(_DWORD)v8)
  {
    sub_233D096D4(v7, 3uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(v7, 4uLL, *(unsigned __int16 *)(a1 + 40), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(v7, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D021D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_13:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1BB0;
      v11 = 3770;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          v8 = 0uLL;
          v9 = 0;
          sub_233D45404(a2, (_WORD *)(a1 + 8), &v8);
          if (!(_DWORD)v8)
          {
            LODWORD(v8) = 0;
            *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v9) = 61;
          }
          goto LABEL_10;
        case 2:
          sub_233CFDFA8(a2, (_BYTE *)(a1 + 10), &v8);
          goto LABEL_10;
        case 3:
          sub_233D01328(a2, a1 + 16, (uint64_t)&v8);
          goto LABEL_10;
        case 4:
          sub_2341049E0(a2, (_WORD *)(a1 + 40), (uint64_t)&v8);
LABEL_10:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

void sub_233D02370(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 88;
      goto LABEL_3;
    case 65529:
      a1 += 168;
      goto LABEL_3;
    case 65530:
      a1 += 248;
      goto LABEL_3;
    case 65531:
      a1 += 328;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 408), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 412), a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          sub_2341046D0(a2, (char *)(a1 + 80), a4);
          break;
        case 2:
          sub_233D0244C(a2, (_BYTE *)(a1 + 81), (_QWORD *)a4);
          break;
        case 3:
          sub_233CFA208(a2, (unsigned __int8 *)(a1 + 82), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 3829;
          break;
      }
      break;
  }
}

uint64_t sub_233D0244C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 9)
      LOBYTE(v6) = 9;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

char *sub_233D024AC@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v11 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v11, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a1;
    if (v8 == 9)
    {
LABEL_3:
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
      return result;
    }
    result = sub_2341071D8(a2, 0, v8, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = a1[1];
      if (v9 == 9)
        goto LABEL_3;
      result = sub_2341071D8(a2, 1uLL, v9, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v10 = a1[2];
        if (v10 == 5)
          goto LABEL_3;
        result = sub_2341071D8(a2, 2uLL, v10, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_233D025E4(a2, 3uLL, (uint64_t)(a1 + 4), (uint64_t)a4);
          if (!*(_DWORD *)a4)
            return sub_234107FB0(a2, v11, (uint64_t)a4);
        }
      }
    }
  }
  return result;
}

char *sub_233D025E4@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;

  if (!*(_BYTE *)(a3 + 4))
    return sub_2341079D4(result, a2, a4);
  v4 = *(_DWORD *)a3;
  if (v4 != -1)
    return sub_23410726C(result, a2, v4, a4);
  *(_DWORD *)a4 = 1415;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
  *(_DWORD *)(a4 + 16) = 193;
  return result;
}

double sub_233D02620@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1BC8;
      v11 = 3858;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_233D0244C(a2, a1, &v10);
          break;
        case 1:
          sub_233D0244C(a2, a1 + 1, &v8);
          goto LABEL_8;
        case 2:
          sub_233D02778(a2, a1 + 2, &v8);
          goto LABEL_8;
        case 3:
          sub_233CFD040(a2, (uint64_t)(a1 + 4), (uint64_t)&v8);
LABEL_8:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_233D02778@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 5)
      LOBYTE(v6) = 5;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

char *sub_233D027D8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_23410726C(a2, 0, *(_DWORD *)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 4), (uint64_t)a4);
      if (!*(_DWORD *)a4)
        return sub_234107FB0(a2, v8, (uint64_t)a4);
    }
  }
  return result;
}

double sub_233D0288C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1BE0;
      v11 = 3906;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 4), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_234104A50(a2, (_DWORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

char *sub_233D02998@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_23410726C(a2, 0, *(_DWORD *)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_2341071EC(a2, 1uLL, *(_QWORD *)(a1 + 8), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_233D02A94(a2, 2uLL, (unsigned __int8 *)(a1 + 16), (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_233D02AD0(a2, 3uLL, (uint64_t)a4, a1 + 24);
          if (!*(_DWORD *)a4)
            return sub_234107FB0(a2, v8, (uint64_t)a4);
        }
      }
    }
  }
  return result;
}

char *sub_233D02A94@<X0>(char *result@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;

  if (!a3[1])
    return sub_2341079D4(result, a2, a4);
  v4 = *a3;
  if (v4 != 255)
    return sub_2341071D8(result, a2, v4, a4);
  *(_DWORD *)a4 = 1415;
  *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
  *(_DWORD *)(a4 + 16) = 193;
  return result;
}

char *sub_233D02AD0@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4@<X2>)
{
  uint64_t v4;

  if (!*(_BYTE *)(a4 + 8))
    return sub_2341079D4(a1, a2, a3);
  v4 = *(_QWORD *)a4;
  if (v4 != 0x8000000000000000)
    return sub_23410731C(a1, a2, v4, a3);
  *(_DWORD *)a3 = 1415;
  *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
  *(_DWORD *)(a3 + 16) = 193;
  return a1;
}

double sub_233D02B10@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1BF8;
      v11 = 3948;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_234104A50(a2, (_DWORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
          goto LABEL_8;
        case 2:
          sub_233CFA208(a2, (unsigned __int8 *)(a1 + 16), (uint64_t)&v8);
          goto LABEL_8;
        case 3:
          sub_233D02C68(a2, a1 + 24, (uint64_t)&v8);
LABEL_8:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_233D02C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  result = sub_2341047B0(a1, (_QWORD *)a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!*(_BYTE *)(a2 + 8))
      sub_233CAF304();
    if (*(_QWORD *)a2 == 0x8000000000000000)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

void sub_233D02D44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      v5 = a1 + 96;
      goto LABEL_3;
    case 65529:
      v5 = a1 + 176;
      goto LABEL_3;
    case 65530:
      v5 = a1 + 256;
      goto LABEL_3;
    case 65531:
      v5 = a1 + 336;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 416), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 420), a4);
      return;
    default:
      if (v4 == 1)
      {
        v5 = a1 + 16;
LABEL_3:
        sub_233D45328(v5, a2, a4);
      }
      else if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 4004;
      }
      else
      {
        sub_234104C8C(a2, (_OWORD *)a1, (_QWORD *)a4);
      }
      return;
  }
}

void sub_233D02DF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  if (v4 <= 65527)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        sub_233D02F28(a2, (char *)(a1 + 1), (_QWORD *)a4);
      }
      else if (v4 == 2)
      {
        v5 = a1 + 8;
LABEL_4:
        sub_233D45328(v5, a2, a4);
      }
      else
      {
LABEL_16:
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 4040;
      }
    }
    else
    {
      sub_233D02EC0(a2, (char *)a1, (_QWORD *)a4);
    }
  }
  else
  {
    switch(v4)
    {
      case 65528:
        v5 = a1 + 88;
        goto LABEL_4;
      case 65529:
        v5 = a1 + 168;
        goto LABEL_4;
      case 65530:
        v5 = a1 + 248;
        goto LABEL_4;
      case 65531:
        v5 = a1 + 328;
        goto LABEL_4;
      case 65532:
        sub_234104A50(a2, (_DWORD *)(a1 + 408), a4);
        break;
      case 65533:
        sub_2341049E0(a2, (_WORD *)(a1 + 412), a4);
        break;
      default:
        goto LABEL_16;
    }
  }
}

uint64_t sub_233D02EC0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if ((*a2 + 1) >= 3u)
      v6 = 2;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

uint64_t sub_233D02F28@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if ((*a2 + 1) >= 0xDu)
      v6 = 12;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233D02F90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      v5 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v5 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v5 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v5 = a1 + 248;
LABEL_3:
      sub_233D45328(v5, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
      break;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 4072;
      }
      else
      {
        sub_233CFDFA8(a2, (_BYTE *)a1, (_QWORD *)a4);
      }
      break;
  }
}

void sub_233D0302C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 80;
      goto LABEL_3;
    case 65529:
      a1 += 160;
      goto LABEL_3;
    case 65530:
      a1 += 240;
      goto LABEL_3;
    case 65531:
      a1 += 320;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 400), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 404), a4);
      return;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 4104;
      }
      else
      {
LABEL_3:
        sub_233D45328(a1, a2, a4);
      }
      return;
  }
}

double sub_233D030BC@<D0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D03190((uint64_t)&v7, 0, a1);
  sub_233D03190((uint64_t)&v7, 1u, a1 + 2);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D03190(uint64_t a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const char *v7;
  unsigned int v8;
  int v9;
  int v10;
  double result;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v14 = 0;
    v13 = 0;
    v12 = 0uLL;
    sub_234107E40(v4, a2, 22, &v14, (uint64_t)&v12);
    if (!(_DWORD)v12)
    {
      if (v6)
      {
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
        while (1)
        {
          v12 = 0uLL;
          v13 = 0;
          v8 = *v5;
          if (v8 == 11)
            break;
          sub_2341071D8(v4, 0x100uLL, v8, (uint64_t)&v12);
          if ((_DWORD)v12)
            goto LABEL_12;
          ++v5;
          if (!--v6)
            goto LABEL_8;
        }
        v10 = 75;
        v9 = 1415;
        goto LABEL_11;
      }
LABEL_8:
      v12 = 0uLL;
      v13 = 0;
      sub_234107FB0(v4, v14, (uint64_t)&v12);
      if (!(_DWORD)v12)
      {
        v9 = 0;
        v10 = 86;
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
LABEL_11:
        LODWORD(v12) = v9;
        *((_QWORD *)&v12 + 1) = v7;
        LODWORD(v13) = v10;
      }
    }
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)v3 = v12;
    *(_QWORD *)(v3 + 16) = v13;
  }
  return result;
}

double sub_233D0329C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C10;
      v11 = 4135;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D033A8@<D0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D0347C((uint64_t)&v7, 0, a1);
  sub_233D0347C((uint64_t)&v7, 1u, a1 + 2);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0347C(uint64_t a1, unsigned int a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  const char *v7;
  unsigned int v8;
  int v9;
  int v10;
  double result;
  __int128 v12;
  uint64_t v13;
  int v14;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v14 = 0;
    v13 = 0;
    v12 = 0uLL;
    sub_234107E40(v4, a2, 22, &v14, (uint64_t)&v12);
    if (!(_DWORD)v12)
    {
      if (v6)
      {
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
        while (1)
        {
          v12 = 0uLL;
          v13 = 0;
          v8 = *v5;
          if (v8 == 3)
            break;
          sub_2341071D8(v4, 0x100uLL, v8, (uint64_t)&v12);
          if ((_DWORD)v12)
            goto LABEL_12;
          ++v5;
          if (!--v6)
            goto LABEL_8;
        }
        v10 = 75;
        v9 = 1415;
        goto LABEL_11;
      }
LABEL_8:
      v12 = 0uLL;
      v13 = 0;
      sub_234107FB0(v4, v14, (uint64_t)&v12);
      if (!(_DWORD)v12)
      {
        v9 = 0;
        v10 = 86;
        v7 = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
LABEL_11:
        LODWORD(v12) = v9;
        *((_QWORD *)&v12 + 1) = v7;
        LODWORD(v13) = v10;
      }
    }
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)v3 = v12;
    *(_QWORD *)(v3 + 16) = v13;
  }
  return result;
}

double sub_233D03588@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C28;
      v11 = 4176;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D03694@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C40;
      v11 = 4217;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D037A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  _OWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;

  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      v6 = a2;
      v7 = (_BYTE *)a1;
      goto LABEL_3;
    case 1:
      v9 = (_BYTE *)(a1 + 1);
      goto LABEL_33;
    case 2:
      v10 = (_OWORD *)(a1 + 8);
      goto LABEL_29;
    case 3:
      v11 = a1 + 24;
      goto LABEL_38;
    case 4:
      sub_233CFB1B0(a2, (__int16 *)(a1 + 32), a4);
      return;
    case 5:
      sub_233CFA9D4(a2, (_BYTE *)(a1 + 36), (_QWORD *)a4);
      return;
    case 6:
      v11 = a1 + 40;
      goto LABEL_38;
    case 7:
      v12 = (_DWORD *)(a1 + 48);
      goto LABEL_46;
    case 8:
      v12 = (_DWORD *)(a1 + 52);
      goto LABEL_46;
    case 9:
      v13 = (char *)(a1 + 56);
      goto LABEL_36;
    case 10:
      v8 = a1 + 64;
      goto LABEL_6;
    case 11:
      v11 = a1 + 144;
      goto LABEL_38;
    case 12:
      sub_233CFA208(a2, (unsigned __int8 *)(a1 + 152), a4);
      return;
    case 13:
      v11 = a1 + 156;
      goto LABEL_38;
    case 14:
      sub_233CFDFA8(a2, (_BYTE *)(a1 + 164), (_QWORD *)a4);
      return;
    case 15:
      v13 = (char *)(a1 + 165);
      goto LABEL_36;
    case 16:
      v14 = (_BYTE *)(a1 + 166);
      v6 = a2;
      v7 = v14;
      goto LABEL_3;
    case 17:
      v13 = (char *)(a1 + 167);
      goto LABEL_36;
    case 18:
      v8 = a1 + 168;
      goto LABEL_6;
    case 19:
      v10 = (_OWORD *)(a1 + 248);
      goto LABEL_29;
    case 20:
      sub_233D039B0(a2, (_WORD *)(a1 + 264), (_QWORD *)a4);
      return;
    case 21:
      v10 = (_OWORD *)(a1 + 272);
      goto LABEL_29;
    case 22:
      v10 = (_OWORD *)(a1 + 288);
LABEL_29:
      sub_234104C8C(a2, v10, (_QWORD *)a4);
      return;
    case 23:
      sub_233D03A10(a2, (_WORD *)(a1 + 304), (_QWORD *)a4);
      return;
    case 24:
      v12 = (_DWORD *)(a1 + 308);
LABEL_46:
      sub_234104A50(a2, v12, a4);
      return;
    case 25:
      v9 = (_BYTE *)(a1 + 312);
LABEL_33:
      sub_23410492C(a2, v9, a4);
      return;
    case 26:
      v15 = (_BYTE *)(a1 + 313);
      v6 = a2;
      v7 = v15;
LABEL_3:
      sub_233C05F48(v6, v7, (_QWORD *)a4);
      return;
    case 27:
      v11 = a1 + 316;
      goto LABEL_38;
    case 28:
      v13 = (char *)(a1 + 324);
LABEL_36:
      sub_2341046D0(a2, v13, a4);
      return;
    case 29:
      v11 = a1 + 328;
LABEL_38:
      sub_233CFD040(a2, v11, a4);
      return;
    case 30:
      v8 = a1 + 336;
      goto LABEL_6;
    case 31:
      v8 = a1 + 416;
LABEL_6:
      sub_233D45328(v8, a2, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v8 = a1 + 496;
          goto LABEL_6;
        case 65529:
          v8 = a1 + 576;
          goto LABEL_6;
        case 65530:
          v8 = a1 + 656;
          goto LABEL_6;
        case 65531:
          v8 = a1 + 736;
          goto LABEL_6;
        case 65532:
          v12 = (_DWORD *)(a1 + 816);
          goto LABEL_46;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 820), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 4323;
          break;
      }
      break;
  }
}

uint64_t sub_233D039B0@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233D45404(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = (unsigned __int16)*a2;
    if (v6 >= 0x51)
      LOWORD(v6) = 81;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

uint64_t sub_233D03A10@<X0>(uint64_t a1@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233D45404(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = (unsigned __int16)*a2;
    if (v6 >= 0x21)
      LOWORD(v6) = 33;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

char *sub_233D03A70@<X0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;

  v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *a1;
    v9 = a1[1];
    v15 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = sub_234107E40(a2, 0, 22, &v15, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      if (v9)
      {
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v10 = *v8;
          if (v10 == 3)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v10, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v8;
          if (!--v9)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107FB0(a2, v15, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        v12 = a1[2];
        v11 = a1[3];
        v16 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        result = sub_234107E40(a2, 1uLL, 22, &v16, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        if (!v11)
        {
LABEL_14:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_234107FB0(a2, v16, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
            *((_DWORD *)a4 + 4) = 86;
            return sub_234107FB0(a2, v14, (uint64_t)a4);
          }
          return result;
        }
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v13 = *v12;
          if (v13 == 3)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v13, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v12;
          if (!--v11)
            goto LABEL_14;
        }
      }
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
  }
  return result;
}

double sub_233D03C38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C58;
      v11 = 4350;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D03D44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C70;
      v11 = 4390;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

char *sub_233D03E50@<X0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;

  v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *a1;
    v9 = a1[1];
    v15 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = sub_234107E40(a2, 0, 22, &v15, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      if (v9)
      {
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v10 = *v8;
          if (v10 == 11)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v10, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v8;
          if (!--v9)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107FB0(a2, v15, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        v12 = a1[2];
        v11 = a1[3];
        v16 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        result = sub_234107E40(a2, 1uLL, 22, &v16, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        if (!v11)
        {
LABEL_14:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_234107FB0(a2, v16, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
            *((_DWORD *)a4 + 4) = 86;
            return sub_234107FB0(a2, v14, (uint64_t)a4);
          }
          return result;
        }
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v13 = *v12;
          if (v13 == 11)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v13, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v12;
          if (!--v11)
            goto LABEL_14;
        }
      }
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
  }
  return result;
}

double sub_233D04018@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1C88;
      v11 = 4430;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D04124@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1CA0;
      v11 = 4475;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D04230@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *((_QWORD *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0433C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1CB8;
      v11 = 4518;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D04448@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D04538((uint64_t)&v7, 0, (unsigned __int8 *)a1);
  if (!(_DWORD)v8)
  {
    sub_234107684(v7, 1uLL, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D04538(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 5)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233D045B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1CD0;
      v11 = 4557;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D02778(a2, (_BYTE *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D046BC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF9354((uint64_t)&v7, 0, (unsigned __int8 *)a1);
  if (!(_DWORD)v8)
  {
    sub_234107684(v7, 1uLL, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(v7, 2uLL, *(_QWORD *)(a1 + 24), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(v7, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D047D8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1CE8;
    v11 = 4597;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_23410499C(a2, (_QWORD *)(a1 + 24), (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_233CFDFA8(a2, (_BYTE *)a1, &v10);
        goto LABEL_10;
      }
      sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D04904@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1D00;
      v11 = 4640;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D02778(a2, (_BYTE *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D04A10@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1D18;
      v11 = 4699;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_234104C8C(a2, (_OWORD *)(a1 + 8), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D02778(a2, (_BYTE *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D04B1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      v5 = a1 + 16;
      goto LABEL_3;
    case 65529:
      v5 = a1 + 96;
      goto LABEL_3;
    case 65530:
      v5 = a1 + 176;
      goto LABEL_3;
    case 65531:
      v5 = a1 + 256;
LABEL_3:
      sub_233D45328(v5, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 336), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 340), a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, a4);
          break;
        case 1:
          sub_233D04124((_WORD *)(a1 + 8), a2, a4);
          break;
        case 2:
          v6 = (_BYTE *)(a1 + 12);
          goto LABEL_15;
        case 3:
          v6 = (_BYTE *)(a1 + 13);
LABEL_15:
          sub_233CFDFA8(a2, v6, (_QWORD *)a4);
          break;
        case 4:
          sub_2341046D0(a2, (char *)(a1 + 14), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 4748;
          break;
      }
      break;
  }
}

double sub_233D04C04@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234106F04(a2, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D45908(a2, 2uLL, (_BYTE *)(a1 + 24), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D45908(a2, 3uLL, (_BYTE *)(a1 + 56), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(a2, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D04D68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_2:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1D30;
      v13 = 4781;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          if (sub_23410462C(a2) == 16)
          {
            sub_234104B68(a2, (_OWORD *)a1, &v10);
          }
          else
          {
            LODWORD(v10) = 43;
            *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v11) = 80;
          }
          goto LABEL_12;
        case 1:
          sub_2341046D0(a2, (char *)(a1 + 16), (uint64_t)&v12);
          break;
        case 2:
          *(_BYTE *)(a1 + 24) = 1;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v8 = a2;
          v9 = a1 + 32;
          goto LABEL_11;
        case 3:
          *(_BYTE *)(a1 + 56) = 1;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v8 = a2;
          v9 = a1 + 64;
LABEL_11:
          sub_233D073BC(v8, v9, &v10);
LABEL_12:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_2;
    }
  }
  return result;
}

double sub_233D04F14@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *((_QWORD *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107684(a2, 2uLL, *((char **)a1 + 2), *((_QWORD *)a1 + 3), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107224(a2, 3uLL, a1[16], (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_2341071D8(a2, 4uLL, *((unsigned __int8 *)a1 + 34), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_2341073FC(a2, 5uLL, *((char **)a1 + 5), *((_QWORD *)a1 + 6), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_234107314(a2, 6uLL, *((char *)a1 + 56), (uint64_t)&v11);
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_2341071D8(a2, 7uLL, *((unsigned __int8 *)a1 + 57), (uint64_t)&v11);
                  v9 = v12;
                  v8 = v11;
                  if (!(_DWORD)v11)
                  {
                    sub_234107FB0(a2, v10, (uint64_t)&v11);
                    v8 = v11;
                    v9 = v12;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D05128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_18:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1D48;
      v13 = 4836;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
          break;
        case 1:
          sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v10);
          goto LABEL_15;
        case 2:
          sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v10);
          goto LABEL_15;
        case 3:
          sub_2341049E0(a2, (_WORD *)(a1 + 32), (uint64_t)&v10);
          goto LABEL_15;
        case 4:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 34);
          goto LABEL_13;
        case 5:
          if (sub_23410462C(a2) == 16)
          {
            sub_234104B68(a2, (_OWORD *)(a1 + 40), &v10);
          }
          else
          {
            LODWORD(v10) = 43;
            *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v11) = 80;
          }
          goto LABEL_15;
        case 6:
          sub_234104734(a2, (_BYTE *)(a1 + 56), (uint64_t)&v10);
          goto LABEL_15;
        case 7:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 57);
LABEL_13:
          sub_23410492C(v7, v8, (uint64_t)&v10);
LABEL_15:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_18;
    }
  }
  return result;
}

double sub_233D05318@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(v7, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341073FC(v7, 1uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341073FC(v7, 2uLL, *((char **)a1 + 3), *((_QWORD *)a1 + 4), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107224(v7, 3uLL, *((unsigned __int16 *)a1 + 20), (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  sub_233D0052C((uint64_t)&v7, 4u, a1 + 42);
  if (!(_DWORD)v8)
  {
    sub_234107314(v7, 5uLL, (char)a1[43], (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D054B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_17:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1D60;
      v13 = 4905;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233D45468(a2, (_BYTE *)a1, &v12);
          break;
        case 1:
          if (sub_23410462C(a2) != 16)
            goto LABEL_13;
          v7 = a2;
          v8 = (_OWORD *)(a1 + 8);
          goto LABEL_9;
        case 2:
          if (sub_23410462C(a2) == 16)
          {
            v7 = a2;
            v8 = (_OWORD *)(a1 + 24);
LABEL_9:
            sub_234104B68(v7, v8, &v10);
          }
          else
          {
LABEL_13:
            LODWORD(v10) = 43;
            *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v11) = 80;
          }
          goto LABEL_14;
        case 3:
          sub_2341049E0(a2, (_WORD *)(a1 + 40), (uint64_t)&v10);
          goto LABEL_14;
        case 4:
          sub_233CF96D0(a2, (_BYTE *)(a1 + 42), &v10);
          goto LABEL_14;
        case 5:
          sub_234104734(a2, (_BYTE *)(a1 + 43), (uint64_t)&v10);
LABEL_14:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_17;
    }
  }
  return result;
}

double sub_233D05684@<D0>(_BYTE *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D45908(a2, 0, a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D3B7EC(a2, 1uLL, a1 + 32, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D05790@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1D78;
      v11 = 4964;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 32) = 1;
        *(_QWORD *)(a1 + 40) = 0;
        sub_23410499C(a2, (_QWORD *)(a1 + 40), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        sub_233D073BC(a2, a1 + 8, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D058C0@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D05A08((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D09660(v7, 1uLL, a1 + 8, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D45994(v7, 2uLL, a1 + 32, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D45A9C(v7, 3uLL, a1 + 56, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(v7, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D05A08(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unsigned int v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *a3;
    if (v4 == 13)
    {
      LODWORD(v6) = 1415;
      *((_QWORD *)&v6 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      LODWORD(v7) = 75;
    }
    else
    {
      sub_2341071D8(*(char **)a1, a2, v4, (uint64_t)&v6);
    }
    result = *(double *)&v6;
    *(_OWORD *)v3 = v6;
    *(_QWORD *)(v3 + 16) = v7;
  }
  return result;
}

double sub_233D05A80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1D90;
      v11 = 5005;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_233D05BEC(a2, (_BYTE *)a1, &v10);
          break;
        case 1:
          *(_BYTE *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
          goto LABEL_8;
        case 2:
          sub_233D05C4C(a2, (_BYTE *)(a1 + 32), (uint64_t)&v8);
          goto LABEL_8;
        case 3:
          sub_233D05C4C(a2, (_BYTE *)(a1 + 120), (uint64_t)&v8);
LABEL_8:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_233D05BEC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 0xD)
      LOBYTE(v6) = 13;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233D05C4C(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *a2 = 1;
  v6 = (uint64_t)(a2 + 8);
  sub_234104468((uint64_t)(a2 + 8));
  a2[80] = 0;
  sub_234104498(v7, 0, 0);
  sub_233D45328(v6, a1, a3);
}

double sub_233D05CA8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341073FC(a2, 1uLL, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D3B7EC(a2, 2uLL, (_BYTE *)(a1 + 32), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D096D4(a2, 3uLL, (_BYTE *)(a1 + 48), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_233D096D4(a2, 4uLL, (_BYTE *)(a1 + 72), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_233D096D4(a2, 5uLL, (_BYTE *)(a1 + 96), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_234107FB0(a2, v10, (uint64_t)&v11);
                v8 = v11;
                v9 = v12;
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D05E64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  uint64_t v20;

  v19[0] = 0;
  v20 = a2;
  sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
  v6 = v18;
  if (v18 == 1)
  {
LABEL_18:
    result = *(double *)&v16;
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
  }
  else
  {
    while (1)
    {
      v14 = xmmword_2504F1DA8;
      v15 = 5056;
      if (v6)
        sub_233D4527C();
      switch((char)v16)
      {
        case 0:
          if (sub_23410462C(a2) != 16)
            goto LABEL_14;
          v7 = a2;
          v8 = (_OWORD *)a1;
          goto LABEL_8;
        case 1:
          if (sub_23410462C(a2) == 16)
          {
            v7 = a2;
            v8 = (_OWORD *)(a1 + 16);
LABEL_8:
            sub_234104B68(v7, v8, &v12);
          }
          else
          {
LABEL_14:
            LODWORD(v12) = 43;
            *((_QWORD *)&v12 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v13) = 80;
          }
          goto LABEL_15;
        case 2:
          *(_BYTE *)(a1 + 32) = 1;
          *(_QWORD *)(a1 + 40) = 0;
          sub_23410499C(a2, (_QWORD *)(a1 + 40), (uint64_t)&v14);
          break;
        case 3:
          v9 = a2;
          v10 = a1 + 48;
          goto LABEL_13;
        case 4:
          v9 = a2;
          v10 = a1 + 72;
          goto LABEL_13;
        case 5:
          v9 = a2;
          v10 = a1 + 96;
LABEL_13:
          sub_233D01328(v9, v10, (uint64_t)&v12);
LABEL_15:
          v14 = v12;
          v15 = v13;
          break;
        default:
          break;
      }
      result = *(double *)&v14;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
      v6 = v18;
      if (v18 == 1)
        goto LABEL_18;
    }
  }
  return result;
}

double sub_233D06034@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D3B7EC(a2, 1uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D06140@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1DC0;
      v11 = 5111;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 16) = 1;
        *(_QWORD *)(a1 + 24) = 0;
        sub_23410499C(a2, (_QWORD *)(a1 + 24), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D06298@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1DD8;
      v11 = 5150;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 16) = 1;
        *(_QWORD *)(a1 + 24) = 0;
        sub_23410499C(a2, (_QWORD *)(a1 + 24), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D063F0@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D05A08((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D09660(v7, 1uLL, a1 + 8, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D19C20(v7, 2uLL, a1 + 32, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D096D4(v7, 3uLL, a1 + 40, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D096D4(v7, 4uLL, a1 + 64, (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107FB0(v7, v10, (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D06564@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_13:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1DF0;
      v13 = 5192;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233D05BEC(a2, (_BYTE *)a1, &v12);
          break;
        case 1:
          *(_BYTE *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v10);
          goto LABEL_10;
        case 2:
          *(_WORD *)(a1 + 32) = 1;
          sub_23410492C(a2, (_BYTE *)(a1 + 33), (uint64_t)&v10);
          goto LABEL_10;
        case 3:
          v7 = a2;
          v8 = a1 + 40;
          goto LABEL_9;
        case 4:
          v7 = a2;
          v8 = a1 + 64;
LABEL_9:
          sub_233D01328(v7, v8, (uint64_t)&v10);
LABEL_10:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

double sub_233D066E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1E08;
      v11 = 5243;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 16) = 1;
        *(_QWORD *)(a1 + 24) = 0;
        sub_23410499C(a2, (_QWORD *)(a1 + 24), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D06840@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D05A08((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D09660(v7, 1uLL, a1 + 8, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D45BA0(v7, 2uLL, (uint64_t)&v11, (uint64_t)(a1 + 32));
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(v7, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0695C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1E20;
    v11 = 5283;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233D06A9C(a2, a1 + 32, (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_233D05BEC(a2, (_BYTE *)a1, &v10);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_233D06A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*(_BYTE *)(a2 + 4))
      *(_BYTE *)(a2 + 4) = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 1;
  result = sub_2341048B0(a1, (_DWORD *)a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!*(_BYTE *)(a2 + 4))
      sub_233CAF304();
    if (*(_DWORD *)a2 == 0x80000000)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233D06B78@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(a2, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D3B7EC(a2, 2uLL, (_BYTE *)(a1 + 24), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D06CB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (1)
    {
      v10 = xmmword_2504F1E38;
      v11 = 5327;
      if (v6)
        sub_233D4527C();
      if (v12 == 2)
        break;
      if (v12 == 1)
      {
        sub_23410492C(a2, (_BYTE *)(a1 + 16), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        goto LABEL_11;
      }
LABEL_12:
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        return result;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_14;
    }
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    sub_23410499C(a2, (_QWORD *)(a1 + 32), (uint64_t)&v8);
LABEL_11:
    v10 = v8;
    v11 = v9;
    goto LABEL_12;
  }
LABEL_14:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D06E28@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D096D4(a2, 1uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D06F34@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1E50;
      v11 = 5370;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D01328(a2, (uint64_t)(a1 + 1), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D07078@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1E68;
      v11 = 5409;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D01328(a2, (uint64_t)(a1 + 1), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

void sub_233D071BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;

  v4 = (_BYTE *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v6 = a1 + 8;
      goto LABEL_3;
    case 2:
      v4 = (_BYTE *)(a1 + 88);
      goto LABEL_8;
    case 3:
      v4 = (_BYTE *)(a1 + 89);
LABEL_8:
      sub_23410492C(a2, v4, a4);
      break;
    case 4:
      sub_2341046D0(a2, (char *)(a1 + 90), a4);
      break;
    case 5:
      sub_233D072E8(a2, (unsigned __int8 *)(a1 + 91), a4);
      break;
    case 6:
      sub_233D073BC(a2, a1 + 96, (_QWORD *)a4);
      break;
    case 7:
      sub_233D06A9C(a2, a1 + 120, a4);
      break;
    case 8:
      v6 = a1 + 128;
LABEL_3:
      sub_233D45328(v6, a2, a4);
      break;
    case 9:
      sub_233D45770(a2, (_WORD *)(a1 + 208), (_QWORD *)a4);
      break;
    case 10:
      v7 = (_WORD *)(a1 + 210);
LABEL_22:
      sub_2341049E0(a2, v7, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v6 = a1 + 216;
          goto LABEL_3;
        case 65529:
          v6 = a1 + 296;
          goto LABEL_3;
        case 65530:
          v6 = a1 + 376;
          goto LABEL_3;
        case 65531:
          v6 = a1 + 456;
          goto LABEL_3;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 536), a4);
          break;
        case 65533:
          v7 = (_WORD *)(a1 + 540);
          goto LABEL_22;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 5470;
          break;
      }
      break;
  }
}

uint64_t sub_233D072E8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233D05BEC(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

void sub_233D073BC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;

  if (sub_23410462C(a1) == 20)
  {
    v6 = 0;
    if (*(_BYTE *)(a2 + 16))
      *(_BYTE *)(a2 + 16) = 0;
    v7 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    if (sub_23410462C(a1) == 16)
    {
      sub_234104B68(a1, (_OWORD *)a2, a3);
      if (*(_DWORD *)a3)
        return;
      v6 = 0;
      v7 = 177;
    }
    else
    {
      v7 = 80;
      v6 = 43;
    }
  }
  *(_DWORD *)a3 = v6;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v7;
}

double sub_233D07478@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CF9354((uint64_t)&v7, 0, a1);
  sub_233CFA850((uint64_t)&v7, 1u, a1 + 1);
  if (!(_DWORD)v8)
  {
    sub_233D09660(v7, 2uLL, a1 + 8, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D07578@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1E80;
    v11 = 5502;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_233CFDFA8(a2, (_BYTE *)a1, &v10);
        goto LABEL_10;
      }
      sub_233CFA9D4(a2, (_BYTE *)(a1 + 1), &v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D076B8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D04538((uint64_t)&v7, 0, (unsigned __int8 *)a1);
  if (!(_DWORD)v8)
  {
    sub_2341073FC(v7, 1uLL, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D3B7EC(v7, 2uLL, (_BYTE *)(a1 + 24), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D3B7EC(v7, 3uLL, (_BYTE *)(a1 + 40), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(v7, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D07800@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_2:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1E98;
      v13 = 5547;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_233D02778(a2, (_BYTE *)a1, &v12);
          break;
        case 1:
          if (sub_23410462C(a2) == 16)
          {
            sub_234104B68(a2, (_OWORD *)(a1 + 8), &v10);
          }
          else
          {
            LODWORD(v10) = 43;
            *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v11) = 80;
          }
          goto LABEL_12;
        case 2:
          *(_BYTE *)(a1 + 24) = 1;
          *(_QWORD *)(a1 + 32) = 0;
          v8 = a2;
          v9 = (_QWORD *)(a1 + 32);
          goto LABEL_11;
        case 3:
          *(_BYTE *)(a1 + 40) = 1;
          *(_QWORD *)(a1 + 48) = 0;
          v8 = a2;
          v9 = (_QWORD *)(a1 + 48);
LABEL_11:
          sub_23410499C(v8, v9, (uint64_t)&v10);
LABEL_12:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_2;
    }
  }
  return result;
}

void sub_233D079A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 5594;
      break;
  }
}

double sub_233D07A28@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107684(v7, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234106F04(v7, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D45BE0(v7, 2uLL, (unsigned __int8 *)(a1 + 17), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D45BE0(v7, 3uLL, (unsigned __int8 *)(a1 + 19), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_2341073FC(v7, 4uLL, *(char **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)&v11);
            v8 = v11;
            v9 = v12;
          }
        }
      }
    }
  }
  sub_233D07BE8((uint64_t)&v7, 5u, (uint64_t *)(a1 + 40));
  sub_233D07BE8((uint64_t)&v7, 6u, (uint64_t *)(a1 + 56));
  sub_233D04538((uint64_t)&v7, 7u, (unsigned __int8 *)(a1 + 72));
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D07BE8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = v5 + 16 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_2341073FC(v4, 0x100uLL, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 16;
          if (v5 == v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233D07CD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _BYTE v18[8];
  uint64_t v19;

  v18[0] = 0;
  v19 = a2;
  sub_233CF7B40((uint64_t)v18, (uint64_t)&v15);
  v6 = v17;
  if (v17 == 1)
  {
LABEL_19:
    result = *(double *)&v15;
    *(_OWORD *)a3 = v15;
    *(_QWORD *)(a3 + 16) = v16;
  }
  else
  {
    while (1)
    {
      v13 = xmmword_2504F1EB0;
      v14 = 5631;
      if (v6)
        sub_233D4527C();
      switch((char)v15)
      {
        case 0:
          sub_234104C8C(a2, (_OWORD *)a1, &v13);
          break;
        case 1:
          sub_2341046D0(a2, (char *)(a1 + 16), (uint64_t)&v11);
          goto LABEL_16;
        case 2:
          v7 = a2;
          v8 = (char *)(a1 + 17);
          goto LABEL_8;
        case 3:
          v7 = a2;
          v8 = (char *)(a1 + 19);
LABEL_8:
          sub_233D07EB8(v7, v8, &v11);
          goto LABEL_16;
        case 4:
          if (sub_23410462C(a2) == 16)
          {
            sub_234104B68(a2, (_OWORD *)(a1 + 24), &v11);
          }
          else
          {
            LODWORD(v11) = 43;
            *((_QWORD *)&v11 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v12) = 80;
          }
          goto LABEL_16;
        case 5:
          v9 = a1 + 40;
          goto LABEL_13;
        case 6:
          v9 = a1 + 120;
LABEL_13:
          sub_233D45328(v9, a2, (uint64_t)&v11);
          goto LABEL_16;
        case 7:
          sub_233D02778(a2, (_BYTE *)(a1 + 200), &v11);
LABEL_16:
          v13 = v11;
          v14 = v12;
          break;
        default:
          break;
      }
      result = *(double *)&v13;
      *(_OWORD *)a3 = v13;
      *(_QWORD *)(a3 + 16) = v14;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v18, (uint64_t)&v15);
      v6 = v17;
      if (v17 == 1)
        goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_233D07EB8@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    v7 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_WORD *)a2 = 256;
    result = sub_2341046D0(a1, a2, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return result;
    v7 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v7;
  return result;
}

double sub_233D07F44@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *(_QWORD *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D08050@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1EC8;
      v11 = 5698;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_23410499C(a2, (_QWORD *)(a1 + 16), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D08194@<D0>(unint64_t *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233CFDC74(a2, 1uLL, (uint64_t)(a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D082A0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1EE0;
      v11 = 5757;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233CFDED0(a2, (uint64_t)(a1 + 1), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410499C(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D083AC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(a2, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 18), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D084E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (1)
    {
      v10 = xmmword_2504F1EF8;
      v11 = 5797;
      if (v6)
        sub_233D4527C();
      if (v12 == 2)
        break;
      if (v12 == 1)
      {
        sub_23410492C(a2, (_BYTE *)(a1 + 16), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        goto LABEL_11;
      }
LABEL_12:
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        return result;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_14;
    }
    sub_2341049E0(a2, (_WORD *)(a1 + 18), (uint64_t)&v8);
LABEL_11:
    v10 = v8;
    v11 = v9;
    goto LABEL_12;
  }
LABEL_14:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D08650@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D08730@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1F10;
      v11 = 5839;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_10;
    }
  }
  return result;
}

void sub_233D08854(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  _WORD *v5;
  _DWORD *v6;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 0:
      goto LABEL_2;
    case 1:
      v5 = (_WORD *)(a1 + 80);
LABEL_20:
      sub_2341049E0(a2, v5, a4);
      return;
    case 2:
      sub_23410499C(a2, (_QWORD *)(a1 + 88), a4);
      return;
    case 3:
      v6 = (_DWORD *)(a1 + 96);
LABEL_18:
      sub_234104A50(a2, v6, a4);
      return;
    case 4:
      sub_233CFE874(a2, (_BYTE *)(a1 + 100), (_QWORD *)a4);
      return;
    case 5:
      a1 += 104;
      goto LABEL_2;
    case 6:
      a1 += 184;
      goto LABEL_2;
    case 7:
      a1 += 264;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 8:
      sub_2341046D0(a2, (char *)(a1 + 344), a4);
      break;
    default:
      switch(v4)
      {
        case 65528:
          a1 += 352;
          goto LABEL_2;
        case 65529:
          a1 += 432;
          goto LABEL_2;
        case 65530:
          a1 += 512;
          goto LABEL_2;
        case 65531:
          a1 += 592;
          goto LABEL_2;
        case 65532:
          v6 = (_DWORD *)(a1 + 672);
          goto LABEL_18;
        case 65533:
          v5 = (_WORD *)(a1 + 676);
          goto LABEL_20;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 5892;
          break;
      }
      break;
  }
}

double sub_233D08958@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1F28;
      v11 = 5919;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

char *sub_233D08A64@<X0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;

  v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *a1;
    v9 = a1[1];
    v15 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = sub_234107E40(a2, 0, 22, &v15, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      if (v9)
      {
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v10 = *v8;
          if (v10 == 7)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v10, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v8;
          if (!--v9)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107FB0(a2, v15, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        v12 = a1[2];
        v11 = a1[3];
        v16 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        result = sub_234107E40(a2, 1uLL, 22, &v16, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        if (!v11)
        {
LABEL_14:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_234107FB0(a2, v16, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
            *((_DWORD *)a4 + 4) = 86;
            return sub_234107FB0(a2, v14, (uint64_t)a4);
          }
          return result;
        }
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v13 = *v12;
          if (v13 == 7)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v13, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v12;
          if (!--v11)
            goto LABEL_14;
        }
      }
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
  }
  return result;
}

double sub_233D08C2C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1F40;
      v11 = 5959;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

char *sub_233D08D38@<X0>(unsigned __int8 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;

  v14 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *a1;
    v9 = a1[1];
    v15 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = sub_234107E40(a2, 0, 22, &v15, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      if (v9)
      {
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v10 = *v8;
          if (v10 == 4)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v10, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v8;
          if (!--v9)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107FB0(a2, v15, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        v12 = a1[2];
        v11 = a1[3];
        v16 = 0;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        result = sub_234107E40(a2, 1uLL, 22, &v16, (uint64_t)a4);
        if (*(_DWORD *)a4)
          return result;
        if (!v11)
        {
LABEL_14:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = sub_234107FB0(a2, v16, (uint64_t)a4);
          if (!*(_DWORD *)a4)
          {
            *(_DWORD *)a4 = 0;
            a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
            *((_DWORD *)a4 + 4) = 86;
            return sub_234107FB0(a2, v14, (uint64_t)a4);
          }
          return result;
        }
        while (1)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          v13 = *v12;
          if (v13 == 4)
            break;
          result = sub_2341071D8(a2, 0x100uLL, v13, (uint64_t)a4);
          if (*(_DWORD *)a4)
            return result;
          ++v12;
          if (!--v11)
            goto LABEL_14;
        }
      }
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
  }
  return result;
}

double sub_233D08F00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F1F58;
      v11 = 5999;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

char *sub_233D0900C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  int v9;

  v9 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a1;
    if (v8 == 7)
    {
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
    else
    {
      result = sub_2341071D8(a2, 0, v8, (uint64_t)a4);
      if (!*(_DWORD *)a4)
        return sub_234107FB0(a2, v9, (uint64_t)a4);
    }
  }
  return result;
}

double sub_233D090C4@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F1F70;
      v9 = 6038;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233CFE874(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D09198@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(a2, 1uLL, (_BYTE *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D454CC(a2, 2uLL, (_BYTE *)(a1 + 32), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D454CC(a2, 3uLL, (_BYTE *)(a1 + 40), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_233D454CC(a2, 4uLL, (_BYTE *)(a1 + 48), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_234107FB0(a2, v10, (uint64_t)&v11);
              v8 = v11;
              v9 = v12;
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D09328@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _DWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_13:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1F88;
      v13 = 6082;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v12);
          break;
        case 1:
          *(_BYTE *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v10);
          goto LABEL_10;
        case 2:
          *(_BYTE *)(a1 + 32) = 1;
          *(_DWORD *)(a1 + 36) = 0;
          v7 = a2;
          v8 = (_DWORD *)(a1 + 36);
          goto LABEL_9;
        case 3:
          *(_BYTE *)(a1 + 40) = 1;
          *(_DWORD *)(a1 + 44) = 0;
          v7 = a2;
          v8 = (_DWORD *)(a1 + 44);
          goto LABEL_9;
        case 4:
          *(_BYTE *)(a1 + 48) = 1;
          *(_DWORD *)(a1 + 52) = 0;
          v7 = a2;
          v8 = (_DWORD *)(a1 + 52);
LABEL_9:
          sub_234104A50(v7, v8, (uint64_t)&v10);
LABEL_10:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_13;
    }
  }
  return result;
}

void sub_233D094BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  _QWORD *v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 104;
      goto LABEL_3;
    case 65529:
      a1 += 184;
      goto LABEL_3;
    case 65530:
      a1 += 264;
      goto LABEL_3;
    case 65531:
      a1 += 344;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 424), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 428), a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          v5 = (_QWORD *)(a1 + 80);
          goto LABEL_14;
        case 2:
          v5 = (_QWORD *)(a1 + 88);
          goto LABEL_14;
        case 3:
          v5 = (_QWORD *)(a1 + 96);
LABEL_14:
          sub_23410499C(a2, v5, a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 6165;
          break;
      }
      break;
  }
}

char *sub_233D09588@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_233D09660(a2, 1uLL, (_BYTE *)(a1 + 8), (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_233D096D4(a2, 2uLL, (_BYTE *)(a1 + 32), (uint64_t)a4);
        if (!*(_DWORD *)a4)
          return sub_234107FB0(a2, v8, (uint64_t)a4);
      }
    }
  }
  return result;
}

char *sub_233D09660@<X0>(char *result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  _BYTE *v7;

  if (*a3)
  {
    v6 = result;
    v7 = sub_233C05DB8(a3);
    return sub_234107684(v6, a2, *(char **)v7, *((_QWORD *)v7 + 1), a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
    *(_DWORD *)(a4 + 16) = 171;
  }
  return result;
}

char *sub_233D096D4@<X0>(char *result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  _BYTE *v7;

  if (*a3)
  {
    v6 = result;
    v7 = sub_233C05DB8(a3);
    return sub_2341073FC(v6, a2, *(char **)v7, *((_QWORD *)v7 + 1), a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
    *(_DWORD *)(a4 + 16) = 171;
  }
  return result;
}

double sub_233D09748@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F1FA0;
    v11 = 6193;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233D01328(a2, a1 + 32, (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D09888@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_23410726C(a2, 1uLL, *(_DWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 12), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_23410726C(a2, 3uLL, *(_DWORD *)(a1 + 16), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_23410726C(a2, 4uLL, *(_DWORD *)(a1 + 20), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_2341071D8(a2, 5uLL, *(unsigned __int8 *)(a1 + 24), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_233D45BF4(a2, 6uLL, (uint64_t)&v11, (unsigned __int8 *)(a1 + 25));
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_233D45BF4(a2, 7uLL, (uint64_t)&v11, (unsigned __int8 *)(a1 + 27));
                  v9 = v12;
                  v8 = v11;
                  if (!(_DWORD)v11)
                  {
                    sub_2341071D8(a2, 8uLL, *(unsigned __int8 *)(a1 + 29), (uint64_t)&v11);
                    v9 = v12;
                    v8 = v11;
                    if (!(_DWORD)v11)
                    {
                      sub_2341071D8(a2, 9uLL, *(unsigned __int8 *)(a1 + 30), (uint64_t)&v11);
                      v9 = v12;
                      v8 = v11;
                      if (!(_DWORD)v11)
                      {
                        sub_234106F04(a2, 0xAuLL, *(unsigned __int8 *)(a1 + 31), (uint64_t)&v11);
                        v9 = v12;
                        v8 = v11;
                        if (!(_DWORD)v11)
                        {
                          sub_234106F04(a2, 0xBuLL, *(unsigned __int8 *)(a1 + 32), (uint64_t)&v11);
                          v9 = v12;
                          v8 = v11;
                          if (!(_DWORD)v11)
                          {
                            sub_234106F04(a2, 0xCuLL, *(unsigned __int8 *)(a1 + 33), (uint64_t)&v11);
                            v9 = v12;
                            v8 = v11;
                            if (!(_DWORD)v11)
                            {
                              sub_234106F04(a2, 0xDuLL, *(unsigned __int8 *)(a1 + 34), (uint64_t)&v11);
                              v9 = v12;
                              v8 = v11;
                              if (!(_DWORD)v11)
                              {
                                sub_234107FB0(a2, v10, (uint64_t)&v11);
                                v8 = v11;
                                v9 = v12;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D09BA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  double result;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  _BYTE v23[8];
  uint64_t v24;

  v23[0] = 0;
  v24 = a2;
  sub_233CF7B40((uint64_t)v23, (uint64_t)&v20);
  v6 = v22;
  if (v22 == 1)
  {
LABEL_25:
    result = *(double *)&v20;
    *(_OWORD *)a3 = v20;
    *(_QWORD *)(a3 + 16) = v21;
  }
  else
  {
    while (1)
    {
      v18 = xmmword_2504F1FB8;
      v19 = 6254;
      if (v6)
        sub_233D4527C();
      switch((char)v20)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v18);
          break;
        case 1:
          v7 = a2;
          v8 = (_DWORD *)(a1 + 8);
          goto LABEL_12;
        case 2:
          sub_2341049E0(a2, (_WORD *)(a1 + 12), (uint64_t)&v16);
          goto LABEL_22;
        case 3:
          v7 = a2;
          v8 = (_DWORD *)(a1 + 16);
          goto LABEL_12;
        case 4:
          v7 = a2;
          v8 = (_DWORD *)(a1 + 20);
LABEL_12:
          sub_234104A50(v7, v8, (uint64_t)&v16);
          goto LABEL_22;
        case 5:
          v9 = a2;
          v10 = (_BYTE *)(a1 + 24);
          goto LABEL_18;
        case 6:
          v13 = a2;
          v14 = (unsigned __int8 *)(a1 + 25);
          goto LABEL_16;
        case 7:
          v13 = a2;
          v14 = (unsigned __int8 *)(a1 + 27);
LABEL_16:
          sub_233D09DE8(v13, v14, (uint64_t)&v16);
          goto LABEL_22;
        case 8:
          v9 = a2;
          v10 = (_BYTE *)(a1 + 29);
          goto LABEL_18;
        case 9:
          v9 = a2;
          v10 = (_BYTE *)(a1 + 30);
LABEL_18:
          sub_23410492C(v9, v10, (uint64_t)&v16);
          goto LABEL_22;
        case 10:
          v11 = a2;
          v12 = (char *)(a1 + 31);
          goto LABEL_21;
        case 11:
          v11 = a2;
          v12 = (char *)(a1 + 32);
          goto LABEL_21;
        case 12:
          v11 = a2;
          v12 = (char *)(a1 + 33);
          goto LABEL_21;
        case 13:
          v11 = a2;
          v12 = (char *)(a1 + 34);
LABEL_21:
          sub_2341046D0(v11, v12, (uint64_t)&v16);
LABEL_22:
          v18 = v16;
          v19 = v17;
          break;
        default:
          break;
      }
      result = *(double *)&v18;
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v19;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v23, (uint64_t)&v20);
      v6 = v22;
      if (v22 == 1)
        goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_233D09DE8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_234104734(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 128)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233D09EBC@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234106F04(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234106F04(a2, 1uLL, a1[1], (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234106F04(a2, 2uLL, a1[2], (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234106F04(a2, 3uLL, a1[3], (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234106F04(a2, 4uLL, a1[4], (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_234106F04(a2, 5uLL, a1[5], (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_234106F04(a2, 6uLL, a1[6], (uint64_t)&v11);
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_234106F04(a2, 7uLL, a1[7], (uint64_t)&v11);
                  v9 = v12;
                  v8 = v11;
                  if (!(_DWORD)v11)
                  {
                    sub_234106F04(a2, 8uLL, a1[8], (uint64_t)&v11);
                    v9 = v12;
                    v8 = v11;
                    if (!(_DWORD)v11)
                    {
                      sub_234106F04(a2, 9uLL, a1[9], (uint64_t)&v11);
                      v9 = v12;
                      v8 = v11;
                      if (!(_DWORD)v11)
                      {
                        sub_234106F04(a2, 0xAuLL, a1[10], (uint64_t)&v11);
                        v9 = v12;
                        v8 = v11;
                        if (!(_DWORD)v11)
                        {
                          sub_234106F04(a2, 0xBuLL, a1[11], (uint64_t)&v11);
                          v9 = v12;
                          v8 = v11;
                          if (!(_DWORD)v11)
                          {
                            sub_234107FB0(a2, v10, (uint64_t)&v11);
                            v8 = v11;
                            v9 = v12;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0A180@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_19:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F1FD0;
      v13 = 6353;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_2341046D0(a2, a1, (uint64_t)&v12);
          break;
        case 1:
          v7 = a2;
          v8 = a1 + 1;
          goto LABEL_16;
        case 2:
          v7 = a2;
          v8 = a1 + 2;
          goto LABEL_16;
        case 3:
          v7 = a2;
          v8 = a1 + 3;
          goto LABEL_16;
        case 4:
          v7 = a2;
          v8 = a1 + 4;
          goto LABEL_16;
        case 5:
          v7 = a2;
          v8 = a1 + 5;
          goto LABEL_16;
        case 6:
          v7 = a2;
          v8 = a1 + 6;
          goto LABEL_16;
        case 7:
          v7 = a2;
          v8 = a1 + 7;
          goto LABEL_16;
        case 8:
          v7 = a2;
          v8 = a1 + 8;
          goto LABEL_16;
        case 9:
          v7 = a2;
          v8 = a1 + 9;
          goto LABEL_16;
        case 10:
          v7 = a2;
          v8 = a1 + 10;
          goto LABEL_16;
        case 11:
          v7 = a2;
          v8 = a1 + 11;
LABEL_16:
          sub_2341046D0(v7, v8, (uint64_t)&v10);
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_19;
    }
  }
  return result;
}

double sub_233D0A384@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341071D8(a2, 2uLL, *(unsigned __int8 *)(a1 + 10), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_2341071D8(a2, 3uLL, *(unsigned __int8 *)(a1 + 11), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_2341071D8(a2, 4uLL, *(unsigned __int8 *)(a1 + 12), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_2341071D8(a2, 5uLL, *(unsigned __int8 *)(a1 + 13), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_2341071D8(a2, 6uLL, *(unsigned __int8 *)(a1 + 14), (uint64_t)&v11);
                v9 = v12;
                v8 = v11;
                if (!(_DWORD)v11)
                {
                  sub_2341071D8(a2, 7uLL, *(unsigned __int8 *)(a1 + 15), (uint64_t)&v11);
                  v9 = v12;
                  v8 = v11;
                  if (!(_DWORD)v11)
                  {
                    sub_234106F04(a2, 8uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
                    v9 = v12;
                    v8 = v11;
                    if (!(_DWORD)v11)
                    {
                      sub_234106F04(a2, 9uLL, *(unsigned __int8 *)(a1 + 17), (uint64_t)&v11);
                      v9 = v12;
                      v8 = v11;
                      if (!(_DWORD)v11)
                      {
                        sub_234107FB0(a2, v10, (uint64_t)&v11);
                        v8 = v11;
                        v9 = v12;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0A5F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  uint64_t v20;

  v19[0] = 0;
  v20 = a2;
  sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
  v6 = v18;
  if (v18 == 1)
  {
LABEL_19:
    result = *(double *)&v16;
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
  }
  else
  {
    while (1)
    {
      v14 = xmmword_2504F1FE8;
      v15 = 6442;
      if (v6)
        sub_233D4527C();
      switch((char)v16)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v14);
          break;
        case 1:
          sub_2341049E0(a2, (_WORD *)(a1 + 8), (uint64_t)&v12);
          goto LABEL_16;
        case 2:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 10);
          goto LABEL_12;
        case 3:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 11);
          goto LABEL_12;
        case 4:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 12);
          goto LABEL_12;
        case 5:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 13);
          goto LABEL_12;
        case 6:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 14);
          goto LABEL_12;
        case 7:
          v7 = a2;
          v8 = (_BYTE *)(a1 + 15);
LABEL_12:
          sub_23410492C(v7, v8, (uint64_t)&v12);
          goto LABEL_16;
        case 8:
          v9 = a2;
          v10 = (char *)(a1 + 16);
          goto LABEL_15;
        case 9:
          v9 = a2;
          v10 = (char *)(a1 + 17);
LABEL_15:
          sub_2341046D0(v9, v10, (uint64_t)&v12);
LABEL_16:
          v14 = v12;
          v15 = v13;
          break;
        default:
          break;
      }
      result = *(double *)&v14;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
      v6 = v18;
      if (v18 == 1)
        goto LABEL_19;
    }
  }
  return result;
}

double sub_233D0A7D0@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2000;
      v11 = 6515;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341049E0(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D0A8DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int16 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _DWORD *v11;

  v4 = (__int16 *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      goto LABEL_17;
    case 1:
      sub_233D0ABC8(a2, (unsigned __int8 *)(a1 + 4), a4);
      return;
    case 2:
      sub_233D0AC9C(a2, a1 + 8, (_QWORD *)a4);
      return;
    case 3:
      v4 = (__int16 *)(a1 + 32);
      goto LABEL_17;
    case 4:
      v7 = a1 + 40;
      goto LABEL_63;
    case 5:
      v8 = a1 + 56;
      goto LABEL_68;
    case 6:
      sub_23410499C(a2, (_QWORD *)(a1 + 80), a4);
      return;
    case 7:
      v6 = a1 + 88;
      goto LABEL_5;
    case 8:
      v6 = a1 + 168;
      goto LABEL_5;
    case 9:
      v9 = a1 + 248;
      goto LABEL_65;
    case 10:
      v4 = (__int16 *)(a1 + 256);
      goto LABEL_17;
    case 11:
      v4 = (__int16 *)(a1 + 260);
      goto LABEL_17;
    case 12:
      v4 = (__int16 *)(a1 + 264);
LABEL_17:
      sub_233CFB1B0(a2, v4, a4);
      return;
    case 13:
      sub_233CFA208(a2, (unsigned __int8 *)(a1 + 268), a4);
      return;
    case 14:
      v10 = (_WORD *)(a1 + 270);
      goto LABEL_78;
    case 15:
      v10 = (_WORD *)(a1 + 272);
      goto LABEL_78;
    case 16:
      v10 = (_WORD *)(a1 + 274);
      goto LABEL_78;
    case 17:
      v10 = (_WORD *)(a1 + 276);
      goto LABEL_78;
    case 18:
      v10 = (_WORD *)(a1 + 278);
      goto LABEL_78;
    case 19:
      v10 = (_WORD *)(a1 + 280);
      goto LABEL_78;
    case 20:
      v10 = (_WORD *)(a1 + 282);
      goto LABEL_78;
    case 21:
      v10 = (_WORD *)(a1 + 284);
LABEL_78:
      sub_2341049E0(a2, v10, a4);
      return;
    case 22:
      v11 = (_DWORD *)(a1 + 288);
      goto LABEL_76;
    case 23:
      v11 = (_DWORD *)(a1 + 292);
      goto LABEL_76;
    case 24:
      v11 = (_DWORD *)(a1 + 296);
      goto LABEL_76;
    case 25:
      v11 = (_DWORD *)(a1 + 300);
      goto LABEL_76;
    case 26:
      v11 = (_DWORD *)(a1 + 304);
      goto LABEL_76;
    case 27:
      v11 = (_DWORD *)(a1 + 308);
      goto LABEL_76;
    case 28:
      v11 = (_DWORD *)(a1 + 312);
      goto LABEL_76;
    case 29:
      v11 = (_DWORD *)(a1 + 316);
      goto LABEL_76;
    case 30:
      v11 = (_DWORD *)(a1 + 320);
      goto LABEL_76;
    case 31:
      v11 = (_DWORD *)(a1 + 324);
      goto LABEL_76;
    case 32:
      v11 = (_DWORD *)(a1 + 328);
      goto LABEL_76;
    case 33:
      v11 = (_DWORD *)(a1 + 332);
      goto LABEL_76;
    case 34:
      v11 = (_DWORD *)(a1 + 336);
      goto LABEL_76;
    case 35:
      v11 = (_DWORD *)(a1 + 340);
      goto LABEL_76;
    case 36:
      v11 = (_DWORD *)(a1 + 344);
      goto LABEL_76;
    case 37:
      v11 = (_DWORD *)(a1 + 348);
      goto LABEL_76;
    case 38:
      v11 = (_DWORD *)(a1 + 352);
      goto LABEL_76;
    case 39:
      v11 = (_DWORD *)(a1 + 356);
      goto LABEL_76;
    case 40:
      v11 = (_DWORD *)(a1 + 360);
      goto LABEL_76;
    case 41:
      v11 = (_DWORD *)(a1 + 364);
      goto LABEL_76;
    case 42:
      v11 = (_DWORD *)(a1 + 368);
      goto LABEL_76;
    case 43:
      v11 = (_DWORD *)(a1 + 372);
      goto LABEL_76;
    case 44:
      v11 = (_DWORD *)(a1 + 376);
      goto LABEL_76;
    case 45:
      v11 = (_DWORD *)(a1 + 380);
      goto LABEL_76;
    case 46:
      v11 = (_DWORD *)(a1 + 384);
      goto LABEL_76;
    case 47:
      v11 = (_DWORD *)(a1 + 388);
      goto LABEL_76;
    case 48:
      v11 = (_DWORD *)(a1 + 392);
      goto LABEL_76;
    case 49:
      v11 = (_DWORD *)(a1 + 396);
      goto LABEL_76;
    case 50:
      v11 = (_DWORD *)(a1 + 400);
      goto LABEL_76;
    case 51:
      v11 = (_DWORD *)(a1 + 404);
      goto LABEL_76;
    case 52:
      v11 = (_DWORD *)(a1 + 408);
      goto LABEL_76;
    case 53:
      v11 = (_DWORD *)(a1 + 412);
      goto LABEL_76;
    case 54:
      v11 = (_DWORD *)(a1 + 416);
      goto LABEL_76;
    case 55:
      v11 = (_DWORD *)(a1 + 420);
LABEL_76:
      sub_234104A50(a2, v11, a4);
      return;
    case 56:
      v7 = a1 + 424;
      goto LABEL_63;
    case 57:
      v7 = a1 + 440;
LABEL_63:
      sub_233CFDED0(a2, v7, a4);
      break;
    case 58:
      v9 = a1 + 456;
LABEL_65:
      sub_233CFD040(a2, v9, a4);
      break;
    case 59:
      sub_233D0AD2C(a2, a1 + 464, (_QWORD *)a4);
      break;
    case 60:
      v8 = a1 + 472;
LABEL_68:
      sub_233D073BC(a2, v8, (_QWORD *)a4);
      break;
    case 61:
      sub_233D0ADBC(a2, a1 + 496, (_QWORD *)a4);
      break;
    case 62:
      v6 = a1 + 512;
LABEL_5:
      sub_233D45328(v6, a2, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v6 = a1 + 592;
          goto LABEL_5;
        case 65529:
          v6 = a1 + 672;
          goto LABEL_5;
        case 65530:
          v6 = a1 + 752;
          goto LABEL_5;
        case 65531:
          v6 = a1 + 832;
          goto LABEL_5;
        case 65532:
          v11 = (_DWORD *)(a1 + 912);
          goto LABEL_76;
        case 65533:
          v10 = (_WORD *)(a1 + 916);
          goto LABEL_78;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 6704;
          break;
      }
      break;
  }
}

uint64_t sub_233D0ABC8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233CFE874(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_233D0AC9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (*(_BYTE *)(a2 + 16))
      *(_BYTE *)(a2 + 16) = 0;
    v7 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    result = sub_234104C8C(a1, (_OWORD *)a2, a3);
    if (*(_DWORD *)a3)
      return result;
    v7 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v7;
  return result;
}

void sub_233D0AD2C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 4))
      *(_BYTE *)(a2 + 4) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_DWORD *)a2 = 0;
    *(_BYTE *)(a2 + 4) = 1;
    sub_233D0A7D0((_WORD *)a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

void sub_233D0ADBC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 12))
      *(_BYTE *)(a2 + 12) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 1;
    sub_233D0A180((char *)a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

char *sub_233D0AE50@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  int v9;

  v9 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a1;
    if (v8 == 2)
    {
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
    else
    {
      result = sub_2341071D8(a2, 0, v8, (uint64_t)a4);
      if (!*(_DWORD *)a4)
        return sub_234107FB0(a2, v9, (uint64_t)a4);
    }
  }
  return result;
}

double sub_233D0AF08@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2018;
      v9 = 6730;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233CFA9D4(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0AFDC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2030;
      v11 = 6766;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D45328(a1 + 80, a2, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233D45328(a1, a2, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D0B0E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 0:
      sub_233D073BC(a2, a1, (_QWORD *)a4);
      return;
    case 1:
      sub_233D0B230(a2, (unsigned __int8 *)(a1 + 24), a4);
      return;
    case 2:
      sub_233D0ABC8(a2, (unsigned __int8 *)(a1 + 26), a4);
      return;
    case 3:
      sub_233CFB1B0(a2, (__int16 *)(a1 + 28), a4);
      return;
    case 4:
      sub_233D09DE8(a2, (unsigned __int8 *)(a1 + 32), a4);
      return;
    case 5:
      v6 = a1 + 36;
      goto LABEL_25;
    case 6:
      v6 = a1 + 44;
      goto LABEL_25;
    case 7:
      v6 = a1 + 52;
      goto LABEL_25;
    case 8:
      v6 = a1 + 60;
      goto LABEL_25;
    case 9:
      v6 = a1 + 68;
      goto LABEL_25;
    case 10:
      v6 = a1 + 76;
LABEL_25:
      sub_233CFD040(a2, v6, a4);
      return;
    case 11:
      v7 = a1 + 88;
      goto LABEL_17;
    case 12:
      v7 = a1 + 104;
LABEL_17:
      sub_233CFDED0(a2, v7, a4);
      break;
    default:
      switch(v4)
      {
        case 65528:
          v5 = a1 + 120;
          goto LABEL_5;
        case 65529:
          v5 = a1 + 200;
          goto LABEL_5;
        case 65530:
          v5 = a1 + 280;
          goto LABEL_5;
        case 65531:
          v5 = a1 + 360;
LABEL_5:
          sub_233D45328(v5, a2, a4);
          break;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 440), a4);
          break;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 444), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 6857;
          break;
      }
      break;
  }
}

uint64_t sub_233D0B230@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233CF96D0(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

char *sub_233D0B304@<X0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_234107224(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
      return sub_234107FB0(a2, v8, (uint64_t)a4);
  }
  return result;
}

double sub_233D0B394@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2048;
      v9 = 6883;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D0B468@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  unsigned int v8;
  int v9;

  v9 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v9, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v8 = *a1;
    if (v8 == 4)
    {
      *(_DWORD *)a4 = 1415;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
      *((_DWORD *)a4 + 4) = 75;
    }
    else
    {
      result = sub_2341071D8(a2, 0, v8, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_234107224(a2, 1uLL, *((unsigned __int16 *)a1 + 1), (uint64_t)a4);
        if (!*(_DWORD *)a4)
          return sub_234107FB0(a2, v9, (uint64_t)a4);
      }
    }
  }
  return result;
}

double sub_233D0B544@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2060;
      v11 = 6919;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233C05F48(a2, (_BYTE *)a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0B650@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2078;
      v9 = 6958;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233CFA9D4(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D0B724(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 0:
      sub_233D0B82C(a2, (unsigned __int8 *)a1, a4);
      return;
    case 1:
      v6 = (char *)(a1 + 2);
      goto LABEL_13;
    case 2:
      v7 = (_QWORD *)(a1 + 8);
      goto LABEL_15;
    case 3:
      v7 = (_QWORD *)(a1 + 16);
      goto LABEL_15;
    case 4:
      v7 = (_QWORD *)(a1 + 24);
      goto LABEL_15;
    case 5:
      v7 = (_QWORD *)(a1 + 32);
      goto LABEL_15;
    case 6:
      v7 = (_QWORD *)(a1 + 40);
      goto LABEL_15;
    case 7:
      v6 = (char *)(a1 + 48);
LABEL_13:
      sub_233D07EB8(a2, v6, (_QWORD *)a4);
      return;
    case 8:
      v7 = (_QWORD *)(a1 + 56);
LABEL_15:
      sub_23410499C(a2, v7, a4);
      break;
    default:
      switch(v4)
      {
        case 65528:
          v5 = a1 + 64;
          goto LABEL_5;
        case 65529:
          v5 = a1 + 144;
          goto LABEL_5;
        case 65530:
          v5 = a1 + 224;
          goto LABEL_5;
        case 65531:
          v5 = a1 + 304;
LABEL_5:
          sub_233D45328(v5, a2, a4);
          break;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 384), a4);
          break;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 388), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 7037;
          break;
      }
      break;
  }
}

uint64_t sub_233D0B82C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233D1C944(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233D0B900@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107314(a2, 0, *(_DWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233CFDC74(a2, 2uLL, a1 + 16, (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0BA38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F2090;
    v11 = 7069;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_233CFDED0(a2, a1 + 16, (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_2341048B0(a2, (_DWORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0BB64@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0BC70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F20A8;
      v11 = 7114;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, (_WORD *)(a1 + 8), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0BD7C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107314(a2, 0, *(_DWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D09660(a2, 2uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0BEB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F20C0;
    v11 = 7156;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      *(_BYTE *)(a1 + 16) = 1;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      sub_234104C8C(a2, (_OWORD *)(a1 + 24), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_2341048B0(a2, (_DWORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0BFF4@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(a2, 1uLL, *((_QWORD *)a1 + 1), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, *((unsigned __int16 *)a1 + 8), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_234107FB0(a2, v10, (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0C12C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F20D8;
    v11 = 7202;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      sub_2341049E0(a2, (_WORD *)(a1 + 16), (uint64_t)&v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0C258@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(v7, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  sub_233D04538((uint64_t)&v7, 1u, (unsigned __int8 *)(a1 + 8));
  if (!(_DWORD)v8)
  {
    sub_233D45C34(v7, 2uLL, (_BYTE *)(a1 + 9), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(v7, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0C374@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F20F0;
    v11 = 7250;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      *(_WORD *)(a1 + 9) = 1;
      sub_233D0D0AC(a2, (_BYTE *)(a1 + 10), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_233D02778(a2, (_BYTE *)(a1 + 8), &v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0C4B0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D45CCC(a2, 0, a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0C590@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2108;
      v9 = 7292;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D0C664(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D0C664(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 16))
      *(_BYTE *)(a2 + 16) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    sub_233D0BC70(a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

double sub_233D0C6F4@<D0>(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D0C7B8((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0C7B8(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 40 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_233D0BD7C(v5, v4, 0x100uLL, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 40;
          v7 -= 40;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233D0C8A4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2120;
      v9 = 7326;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D45328(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0C978@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234106F04(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0CA58@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2138;
      v9 = 7360;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341046D0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0CB2C@<D0>(uint64_t *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233D0CBF0((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0CBF0(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *a3;
    v6 = a3[1];
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 32 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_233D0B900(v5, v4, 0x100uLL, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 32;
          v7 -= 32;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

double sub_233D0CCD8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2150;
      v9 = 7394;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D45328(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0CDAC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D45CF4(a2, 0, a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0CE8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2168;
      v9 = 7428;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D0AC9C(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D0CF60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;

  v4 = a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      goto LABEL_12;
    case 1:
      sub_233D02778(a2, (_BYTE *)(a1 + 16), (_QWORD *)a4);
      return;
    case 2:
      sub_233D0D0AC(a2, (_BYTE *)(a1 + 17), (_QWORD *)a4);
      return;
    case 3:
      sub_233D0D10C(a2, a1 + 24, (_QWORD *)a4);
      return;
    case 4:
      sub_233D0AC9C(a2, a1 + 56, (_QWORD *)a4);
      return;
    case 5:
      v6 = a1 + 80;
      goto LABEL_5;
    case 6:
      v6 = a1 + 160;
LABEL_5:
      sub_233D45328(v6, a2, a4);
      return;
    case 7:
      v4 = a1 + 240;
LABEL_12:
      sub_233CFDED0(a2, v4, a4);
      return;
    case 8:
      sub_233CFDFA8(a2, (_BYTE *)(a1 + 256), (_QWORD *)a4);
      return;
    case 9:
      v7 = (char *)(a1 + 257);
      goto LABEL_18;
    case 10:
      v8 = (_BYTE *)(a1 + 258);
      goto LABEL_16;
    case 11:
      v8 = (_BYTE *)(a1 + 259);
LABEL_16:
      sub_23410492C(a2, v8, a4);
      break;
    case 12:
      v7 = (char *)(a1 + 260);
LABEL_18:
      sub_2341046D0(a2, v7, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v6 = a1 + 264;
          goto LABEL_5;
        case 65529:
          v6 = a1 + 344;
          goto LABEL_5;
        case 65530:
          v6 = a1 + 424;
          goto LABEL_5;
        case 65531:
          v6 = a1 + 504;
          goto LABEL_5;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 584), a4);
          break;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 588), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 7489;
          break;
      }
      break;
  }
}

uint64_t sub_233D0D0AC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 >= 0x11)
      LOBYTE(v6) = 17;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

void sub_233D0D10C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  if (sub_23410462C(a1) == 20)
  {
    if (*(_BYTE *)(a2 + 24))
      *(_BYTE *)(a2 + 24) = 0;
    v6 = 168;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 1;
    sub_233D0C12C(a2, a1, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return;
    v6 = 177;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
  *((_DWORD *)a3 + 4) = v6;
}

double sub_233D0D1A0@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2180;
      v9 = 7536;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341046D0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D0D274@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_234107314(a2, 0, *(_DWORD *)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_233D09660(a2, 1uLL, (_BYTE *)(a1 + 8), (uint64_t)a4);
      if (!*(_DWORD *)a4)
        return sub_234107FB0(a2, v8, (uint64_t)a4);
    }
  }
  return result;
}

double sub_233D0D328@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2198;
      v11 = 7572;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 8) = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_2341048B0(a2, (_DWORD *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0D440@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F21B0;
      v11 = 7659;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D006B0(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_233CF96D0(a2, a1, &v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D0D54C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD *v4;
  int v6;
  int v7;
  uint64_t v8;
  _WORD *v9;
  _DWORD *v10;

  v4 = (_OWORD *)a1;
  v6 = *(_DWORD *)(a3 + 8);
  switch(v6)
  {
    case 1:
      goto LABEL_22;
    case 2:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_233D45404(a2, (_WORD *)(a1 + 16), a4);
      if (*(_DWORD *)a4)
        return;
      *(_DWORD *)a4 = 0;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 61;
LABEL_7:
      *((_DWORD *)a4 + 4) = v7;
      break;
    case 3:
      v4 = (_OWORD *)(a1 + 24);
      goto LABEL_22;
    case 4:
    case 6:
    case 16:
    case 19:
LABEL_6:
      *(_DWORD *)a4 = 0;
      a4[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common/app-common/za"
              "p-generated/cluster-objects.cpp";
      v7 = 7733;
      goto LABEL_7;
    case 5:
      v4 = (_OWORD *)(a1 + 40);
      goto LABEL_22;
    case 7:
      v9 = (_WORD *)(a1 + 56);
LABEL_31:
      sub_2341049E0(a2, v9, (uint64_t)a4);
      return;
    case 8:
      v4 = (_OWORD *)(a1 + 64);
      goto LABEL_22;
    case 9:
      v10 = (_DWORD *)(a1 + 80);
LABEL_29:
      sub_234104A50(a2, v10, (uint64_t)a4);
      return;
    case 10:
      v4 = (_OWORD *)(a1 + 88);
      goto LABEL_22;
    case 11:
      v4 = (_OWORD *)(a1 + 104);
      goto LABEL_22;
    case 12:
      v4 = (_OWORD *)(a1 + 120);
      goto LABEL_22;
    case 13:
      v4 = (_OWORD *)(a1 + 136);
      goto LABEL_22;
    case 14:
      v4 = (_OWORD *)(a1 + 152);
      goto LABEL_22;
    case 15:
      v4 = (_OWORD *)(a1 + 168);
      goto LABEL_22;
    case 17:
      sub_2341046D0(a2, (char *)(a1 + 184), (uint64_t)a4);
      return;
    case 18:
      v4 = (_OWORD *)(a1 + 192);
LABEL_22:
      sub_234104C8C(a2, v4, a4);
      break;
    case 20:
      sub_233D0D440((_BYTE *)(a1 + 208), a2, (uint64_t)a4);
      break;
    default:
      switch(v6)
      {
        case 65528:
          v8 = a1 + 216;
          break;
        case 65529:
          v8 = a1 + 296;
          break;
        case 65530:
          v8 = a1 + 376;
          break;
        case 65531:
          v8 = a1 + 456;
          break;
        case 65532:
          v10 = (_DWORD *)(a1 + 536);
          goto LABEL_29;
        case 65533:
          v9 = (_WORD *)(a1 + 540);
          goto LABEL_31;
        default:
          goto LABEL_6;
      }
      sub_233D45328(v8, a2, (uint64_t)a4);
      break;
  }
}

double sub_233D0D718@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F21C8;
      v9 = 7759;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0D7EC@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F21E0;
      v9 = 7836;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341046D0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D0D8C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;

  v4 = (_BYTE *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 <= 65527)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        v4 = (_BYTE *)(a1 + 1);
      }
      else
      {
        if (v5 != 2)
        {
LABEL_16:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 7882;
          return;
        }
        v4 = (_BYTE *)(a1 + 2);
      }
    }
    sub_23410492C(a2, v4, a4);
    return;
  }
  switch(v5)
  {
    case 65528:
      v6 = a1 + 8;
      goto LABEL_4;
    case 65529:
      v6 = a1 + 88;
      goto LABEL_4;
    case 65530:
      v6 = a1 + 168;
      goto LABEL_4;
    case 65531:
      v6 = a1 + 248;
LABEL_4:
      sub_233D45328(v6, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
      break;
    default:
      goto LABEL_16;
  }
}

double sub_233D0D984@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F21F8;
      v9 = 7908;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0DA58@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2210;
      v9 = 7943;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0DB2C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2228;
      v9 = 7978;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0DC00@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2240;
      v9 = 8013;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D0DCD4@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2258;
      v9 = 8048;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D0DDA8@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341071D8(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_2341071D8(a2, 1uLL, a1[1], (uint64_t)a4);
      if (!*(_DWORD *)a4)
        return sub_234107FB0(a2, v8, (uint64_t)a4);
    }
  }
  return result;
}

double sub_233D0DE5C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2270;
      v11 = 8085;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_23410492C(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0DF68@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2288;
      v11 = 8126;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_23410492C(a2, a1 + 1, (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D0E074@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341073FC(a2, 1uLL, *((char **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107224(a2, 2uLL, a1[12], (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_23410726C(a2, 3uLL, *((_DWORD *)a1 + 7), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_2341073FC(a2, 4uLL, *((char **)a1 + 4), *((_QWORD *)a1 + 5), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_234107FB0(a2, v10, (uint64_t)&v11);
              v8 = v11;
              v9 = v12;
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0E204@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 == 1)
  {
LABEL_16:
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
  }
  else
  {
    while (1)
    {
      v12 = xmmword_2504F22A0;
      v13 = 8174;
      if (v6)
        sub_233D4527C();
      switch((char)v14)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v12);
          break;
        case 1:
          if (sub_23410462C(a2) != 16)
            goto LABEL_12;
          v7 = a2;
          v8 = (_OWORD *)(a1 + 8);
          goto LABEL_11;
        case 2:
          sub_2341049E0(a2, (_WORD *)(a1 + 24), (uint64_t)&v10);
          goto LABEL_13;
        case 3:
          sub_234104A50(a2, (_DWORD *)(a1 + 28), (uint64_t)&v10);
          goto LABEL_13;
        case 4:
          if (sub_23410462C(a2) == 16)
          {
            v7 = a2;
            v8 = (_OWORD *)(a1 + 32);
LABEL_11:
            sub_234104B68(v7, v8, &v10);
          }
          else
          {
LABEL_12:
            LODWORD(v10) = 43;
            *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v11) = 80;
          }
LABEL_13:
          v12 = v10;
          v13 = v11;
          break;
        default:
          break;
      }
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_16;
    }
  }
  return result;
}

double sub_233D0E3B8@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F22B8;
      v9 = 8224;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D0E48C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  if (v4 <= 65527)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        sub_233CFA208(a2, (unsigned __int8 *)(a1 + 1), a4);
      }
      else if (v4 == 2)
      {
        sub_233CFC80C(a2, (__int16 *)(a1 + 4), a4);
      }
      else
      {
LABEL_16:
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 8285;
      }
    }
    else
    {
      sub_233CFDFA8(a2, (_BYTE *)a1, (_QWORD *)a4);
    }
  }
  else
  {
    switch(v4)
    {
      case 65528:
        v5 = a1 + 8;
        goto LABEL_4;
      case 65529:
        v5 = a1 + 88;
        goto LABEL_4;
      case 65530:
        v5 = a1 + 168;
        goto LABEL_4;
      case 65531:
        v5 = a1 + 248;
LABEL_4:
        sub_233D45328(v5, a2, a4);
        break;
      case 65532:
        sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
        break;
      case 65533:
        sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
        break;
      default:
        goto LABEL_16;
    }
  }
}

double sub_233D0E564@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D0E588(a1, a2, a3, v5, a4);
}

double sub_233D0E588@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  double result;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  sub_234107E40(a2, a3, 21, &v13, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  v8 = v14;
  if (!(_DWORD)v14)
  {
    sub_2341073FC(a2, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
    if (!(_DWORD)v14)
    {
      sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 16), (uint64_t)&v14);
      v12 = v15;
      v11 = v14;
      v8 = v14;
      if (!(_DWORD)v14)
      {
        sub_2341071EC(a2, 3uLL, *(_QWORD *)(a1 + 24), (uint64_t)&v14);
        v12 = v15;
        v11 = v14;
        v8 = v14;
        if (!(_DWORD)v14)
        {
          sub_2341071EC(a2, 4uLL, *(_QWORD *)(a1 + 32), (uint64_t)&v14);
          v12 = v15;
          v11 = v14;
          v8 = v14;
          if (!(_DWORD)v14)
          {
            sub_234107684(a2, 5uLL, *(char **)(a1 + 40), *(_QWORD *)(a1 + 48), (uint64_t)&v14);
            v12 = v15;
            v11 = v14;
            v8 = v14;
          }
        }
      }
    }
  }
  if (*a4)
  {
    if (v8)
      goto LABEL_12;
    sub_2341071D8(a2, 0xFEuLL, *(unsigned __int8 *)(a1 + 56), (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (!v8)
  {
    sub_234107FB0(a2, v13, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
LABEL_12:
  result = *(double *)&v11;
  *(_OWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = v12;
  return result;
}

double sub_233D0E750@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D0E588(a1, a2, a3, v6, a5);
}

double sub_233D0E77C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _BYTE v16[8];
  uint64_t v17;

  v16[0] = 0;
  v17 = a2;
  sub_233CF7B40((uint64_t)v16, (uint64_t)&v13);
  v6 = v15;
  if (v15 != 1)
  {
    while (2)
    {
      v11 = xmmword_2504F22D0;
      v12 = 8336;
      if (!v6)
      {
        switch((char)v13)
        {
          case 1:
            if (sub_23410462C(a2) == 16)
            {
              sub_234104B68(a2, (_OWORD *)a1, &v9);
              goto LABEL_15;
            }
            LODWORD(v9) = 43;
            *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            v7 = 80;
            goto LABEL_14;
          case 2:
            v9 = 0uLL;
            v10 = 0;
            sub_233D45404(a2, (_WORD *)(a1 + 16), &v9);
            if (!(_DWORD)v9)
            {
              LODWORD(v9) = 0;
              *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
              v7 = 61;
LABEL_14:
              LODWORD(v10) = v7;
            }
            goto LABEL_15;
          case 3:
            sub_23410499C(a2, (_QWORD *)(a1 + 24), (uint64_t)&v11);
            goto LABEL_16;
          case 4:
            sub_23410499C(a2, (_QWORD *)(a1 + 32), (uint64_t)&v9);
            goto LABEL_15;
          case 5:
            sub_234104C8C(a2, (_OWORD *)(a1 + 40), &v9);
            goto LABEL_15;
          default:
            if (v13 != 254)
              goto LABEL_16;
            sub_23410492C(a2, (_BYTE *)(a1 + 56), (uint64_t)&v9);
LABEL_15:
            v11 = v9;
            v12 = v10;
LABEL_16:
            result = *(double *)&v11;
            *(_OWORD *)a3 = v11;
            *(_QWORD *)(a3 + 16) = v12;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v16, (uint64_t)&v13);
            v6 = v15;
            if (v15 == 1)
              goto LABEL_18;
            continue;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_18:
  result = *(double *)&v13;
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  return result;
}

double sub_233D0E96C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D0E990(a1, a2, a3, v5, a4);
}

double sub_233D0E990@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  double result;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  if (*a4)
  {
    v10 = *sub_233C27DCC(a4);
    v11 = *(unsigned __int8 *)(a1 + 40);
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
    if (v10 != v11)
      goto LABEL_8;
  }
  else
  {
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_2341073FC(v13, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v17);
    v15 = v18;
    v14 = v17;
    if (!(_DWORD)v17)
    {
      sub_233D4597C(v13, 2uLL, a1 + 16, (uint64_t)&v17);
      v14 = v17;
      v15 = v18;
    }
  }
LABEL_8:
  if (*a4 && !(_DWORD)v14)
  {
    sub_2341071D8(v13, 0xFEuLL, *(unsigned __int8 *)(a1 + 40), (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_234107FB0(v13, v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v15;
  return result;
}

double sub_233D0EB6C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D0E990(a1, a2, a3, v6, a5);
}

double sub_233D0EB98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 != 1)
  {
    while (1)
    {
      v10 = xmmword_2504F22E8;
      v11 = 8417;
      if (v6)
        sub_233D4527C();
      if (v12 == 254)
        break;
      if (v12 == 2)
      {
        sub_233D073BC(a2, a1 + 16, &v10);
      }
      else if (v12 == 1)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        goto LABEL_11;
      }
LABEL_12:
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        return result;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_14;
    }
    sub_23410492C(a2, (_BYTE *)(a1 + 40), (uint64_t)&v8);
LABEL_11:
    v10 = v8;
    v11 = v9;
    goto LABEL_12;
  }
LABEL_14:
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D0ED08@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2300;
      v11 = 8463;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_10;
    }
  }
  return result;
}

double sub_233D0EE2C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341073FC(a2, 1uLL, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0EF38@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 != 1)
  {
    while (1)
    {
      v12 = xmmword_2504F2318;
      v13 = 8498;
      if (v6)
        sub_233D4527C();
      if (v14 == 1)
        break;
      if (!(_BYTE)v14)
      {
        if (sub_23410462C(a2) == 16)
        {
          v7 = a2;
          v8 = a1;
          goto LABEL_9;
        }
LABEL_10:
        LODWORD(v10) = 43;
        *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
        LODWORD(v11) = 80;
        goto LABEL_11;
      }
LABEL_12:
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        return result;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_14;
    }
    if (sub_23410462C(a2) != 16)
      goto LABEL_10;
    v7 = a2;
    v8 = a1 + 1;
LABEL_9:
    sub_234104B68(v7, v8, &v10);
LABEL_11:
    v12 = v10;
    v13 = v11;
    goto LABEL_12;
  }
LABEL_14:
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233D0F088@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFD364((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0F14C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2330;
      v9 = 8536;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D0F220(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_233D0F220@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if ((v6 - 1) >= 2)
      LOBYTE(v6) = 0;
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233D0F280@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2348;
      v11 = 8570;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_10;
    }
  }
  return result;
}

double sub_233D0F3A4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D45894(a2, 1uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0F4B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2360;
      v11 = 8605;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_WORD *)(a1 + 16) = 1;
        sub_2341046D0(a2, (char *)(a1 + 17), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, (_OWORD *)a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D0F604@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  v6 = v16;
  if (v16 != 1)
  {
    while (1)
    {
      v12 = xmmword_2504F2378;
      v13 = 8644;
      if (v6)
        sub_233D4527C();
      if (v14 == 1)
        break;
      if (!(_BYTE)v14)
      {
        if (sub_23410462C(a2) == 16)
        {
          v7 = a2;
          v8 = a1;
          goto LABEL_9;
        }
LABEL_10:
        LODWORD(v10) = 43;
        *((_QWORD *)&v10 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
        LODWORD(v11) = 80;
        goto LABEL_11;
      }
LABEL_12:
      result = *(double *)&v12;
      *(_OWORD *)a3 = v12;
      *(_QWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a3)
        return result;
      sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
      v6 = v16;
      if (v16 == 1)
        goto LABEL_14;
    }
    if (sub_23410462C(a2) != 16)
      goto LABEL_10;
    v7 = a2;
    v8 = a1 + 1;
LABEL_9:
    sub_234104B68(v7, v8, &v10);
LABEL_11:
    v12 = v10;
    v13 = v11;
    goto LABEL_12;
  }
LABEL_14:
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233D0F754@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341073FC(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D096D4(a2, 1uLL, (_BYTE *)(a1 + 16), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341073FC(a2, 2uLL, *(char **)(a1 + 40), *(_QWORD *)(a1 + 48), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_2341071EC(a2, 3uLL, *(_QWORD *)(a1 + 56), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_234107224(a2, 4uLL, *(unsigned __int16 *)(a1 + 64), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_234107FB0(a2, v10, (uint64_t)&v11);
              v8 = v11;
              v9 = v12;
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0F8E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  double result;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _BYTE v18[8];
  uint64_t v19;

  v18[0] = 0;
  v19 = a2;
  sub_233CF7B40((uint64_t)v18, (uint64_t)&v15);
  v6 = v17;
  if (v17 != 1)
  {
    while (2)
    {
      v13 = xmmword_2504F2390;
      v14 = 8686;
      if (!v6)
      {
        switch((char)v15)
        {
          case 0:
            if (sub_23410462C(a2) != 16)
              goto LABEL_13;
            v7 = a2;
            v8 = (_OWORD *)a1;
            goto LABEL_9;
          case 1:
            sub_233D01328(a2, a1 + 16, (uint64_t)&v13);
            goto LABEL_16;
          case 2:
            if (sub_23410462C(a2) == 16)
            {
              v7 = a2;
              v8 = (_OWORD *)(a1 + 40);
LABEL_9:
              sub_234104B68(v7, v8, &v11);
            }
            else
            {
LABEL_13:
              LODWORD(v11) = 43;
              *((_QWORD *)&v11 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
              v9 = 80;
LABEL_14:
              LODWORD(v12) = v9;
            }
LABEL_15:
            v13 = v11;
            v14 = v12;
LABEL_16:
            result = *(double *)&v13;
            *(_OWORD *)a3 = v13;
            *(_QWORD *)(a3 + 16) = v14;
            if (*(_DWORD *)a3)
              return result;
            sub_233CF7B40((uint64_t)v18, (uint64_t)&v15);
            v6 = v17;
            if (v17 == 1)
              goto LABEL_18;
            continue;
          case 3:
            sub_23410499C(a2, (_QWORD *)(a1 + 56), (uint64_t)&v11);
            goto LABEL_15;
          case 4:
            v11 = 0uLL;
            v12 = 0;
            sub_233D45404(a2, (_WORD *)(a1 + 64), &v11);
            if ((_DWORD)v11)
              goto LABEL_15;
            LODWORD(v11) = 0;
            *((_QWORD *)&v11 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            v9 = 61;
            goto LABEL_14;
          default:
            goto LABEL_16;
        }
      }
      break;
    }
    sub_233D4527C();
  }
LABEL_18:
  result = *(double *)&v15;
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = v16;
  return result;
}

double sub_233D0FAB4@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_12:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F23A8;
      v11 = 8737;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D01328(a2, (uint64_t)(a1 + 1), (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_12;
    }
  }
  return result;
}

double sub_233D0FBF8@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  sub_233CFE5F4((uint64_t)&v7, 0, a1);
  if (!(_DWORD)v8)
  {
    sub_233D19C20(v7, 1uLL, a1 + 1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D09660(v7, 2uLL, a1 + 8, (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(v7, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0FD14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F23C0;
    v11 = 8777;
    if (i)
      sub_233D4527C();
    if (v12 == 2)
    {
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
    }
    else
    {
      if (v12 != 1)
      {
        if (!(_BYTE)v12)
          sub_233D0FE58(a2, (char *)a1, &v10);
        goto LABEL_10;
      }
      *(_WORD *)(a1 + 1) = 1;
      sub_23410492C(a2, (_BYTE *)(a1 + 2), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

uint64_t sub_233D0FE58@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  char v7;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_233C05FA8(a1, a2, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *a2;
    if (v6 > 0xB)
      v7 = 7;
    else
      v7 = byte_2342ACD73[v6];
    *a2 = v7;
    *(_DWORD *)a3 = 0;
    a3[1] = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    *((_DWORD *)a3 + 4) = 61;
  }
  return result;
}

double sub_233D0FEC8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107684(a2, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D0FFA8@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F23D8;
      v9 = 8819;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104C8C(a2, a1, &v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D1007C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071D8(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D1015C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F23F0;
      v9 = 8853;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D10230@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2408;
      v11 = 8887;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v12)
      {
        if (sub_23410462C(a2) == 16)
        {
          sub_234104B68(a2, a1, &v8);
        }
        else
        {
          LODWORD(v8) = 43;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 80;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_10;
    }
  }
  return result;
}

void sub_233D10354(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  _BYTE *v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 0:
      goto LABEL_4;
    case 1:
      a1 += 80;
      goto LABEL_4;
    case 2:
      v5 = (_BYTE *)(a1 + 160);
      goto LABEL_17;
    case 3:
      v5 = (_BYTE *)(a1 + 161);
      goto LABEL_17;
    case 4:
      a1 += 168;
LABEL_4:
      sub_233D45328(a1, a2, a4);
      break;
    case 5:
      v5 = (_BYTE *)(a1 + 248);
LABEL_17:
      sub_23410492C(a2, v5, a4);
      break;
    default:
      switch(v4)
      {
        case 65528:
          a1 += 256;
          goto LABEL_4;
        case 65529:
          a1 += 336;
          goto LABEL_4;
        case 65530:
          a1 += 416;
          goto LABEL_4;
        case 65531:
          a1 += 496;
          goto LABEL_4;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 576), a4);
          break;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 580), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 8934;
          break;
      }
      break;
  }
}

double sub_233D10430@<D0>(unsigned __int16 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D10454(a1, a2, a3, v5, a4);
}

double sub_233D10454@<D0>(unsigned __int16 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  double result;
  char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  v10 = a2;
  sub_234107E40(a2, a3, 21, &v13, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  if (!(_DWORD)v14)
  {
    sub_234107224(v10, 1uLL, *(unsigned __int16 *)a1, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
  sub_233CF9E50((uint64_t)&v10, 2u, a1 + 1);
  v8 = v11;
  if (!(_DWORD)v11)
  {
    sub_233D09660(v10, 3uLL, (_BYTE *)a1 + 24, (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (*a4)
  {
    if (v8)
      goto LABEL_10;
    sub_2341071D8(v10, 0xFEuLL, *((unsigned __int8 *)a1 + 48), (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (!v8)
  {
    sub_234107FB0(v10, v13, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
LABEL_10:
  result = *(double *)&v11;
  *(_OWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = v12;
  return result;
}

double sub_233D105A8@<D0>(unsigned __int16 **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D10454(a1, a2, a3, v6, a5);
}

double sub_233D105D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F2420;
    v11 = 8983;
    if (i)
      sub_233D4527C();
    if (v12 > 2u)
    {
      if (v12 == 3)
      {
        *(_BYTE *)(a1 + 88) = 1;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        sub_234104C8C(a2, (_OWORD *)(a1 + 96), &v8);
        goto LABEL_12;
      }
      if (v12 == 254)
      {
        sub_23410492C(a2, (_BYTE *)(a1 + 112), (uint64_t)&v8);
        goto LABEL_12;
      }
    }
    else if (v12 == 1)
    {
      sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
    }
    else if (v12 == 2)
    {
      sub_233D45328(a1 + 8, a2, (uint64_t)&v8);
LABEL_12:
      v10 = v8;
      v11 = v9;
    }
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D10740@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D10764(a1, a2, a3, v5, a4);
}

double sub_233D10764@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  double result;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  sub_234107E40(a2, a3, 21, &v13, (uint64_t)&v14);
  v11 = v14;
  v12 = v15;
  v8 = v14;
  if (!(_DWORD)v14)
  {
    sub_234107224(a2, 1uLL, *a1, (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
    if (!(_DWORD)v14)
    {
      sub_234107224(a2, 2uLL, a1[1], (uint64_t)&v14);
      v12 = v15;
      v11 = v14;
      v8 = v14;
    }
  }
  if (*a4)
  {
    if (v8)
      goto LABEL_9;
    sub_2341071D8(a2, 0xFEuLL, *((unsigned __int8 *)a1 + 4), (uint64_t)&v14);
    v12 = v15;
    v11 = v14;
    v8 = v14;
  }
  if (!v8)
  {
    sub_234107FB0(a2, v13, (uint64_t)&v14);
    v11 = v14;
    v12 = v15;
  }
LABEL_9:
  result = *(double *)&v11;
  *(_OWORD *)a5 = v11;
  *(_QWORD *)(a5 + 16) = v12;
  return result;
}

double sub_233D108A8@<D0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D10764(a1, a2, a3, v6, a5);
}

double sub_233D108D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F2438;
    v11 = 9049;
    if (i)
      sub_233D4527C();
    if (v12 == 254)
    {
      sub_23410492C(a2, (_BYTE *)(a1 + 4), (uint64_t)&v8);
    }
    else
    {
      if (v12 != 2)
      {
        if (v12 == 1)
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v10);
        goto LABEL_10;
      }
      sub_2341049E0(a2, (_WORD *)(a1 + 2), (uint64_t)&v8);
    }
    v10 = v8;
    v11 = v9;
LABEL_10:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D10A04@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107224(v7, 0, *(unsigned __int16 *)a1, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  sub_233CFA850((uint64_t)&v7, 1u, a1 + 2);
  if (!(_DWORD)v8)
  {
    sub_233D4597C(v7, 2uLL, (uint64_t)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233CFDC74(v7, 3uLL, (uint64_t)(a1 + 32), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_233D4597C(v7, 4uLL, (uint64_t)(a1 + 48), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233CFDC74(v7, 5uLL, (uint64_t)(a1 + 72), (uint64_t)&v11);
          v9 = v12;
          v8 = v11;
          if (!(_DWORD)v11)
          {
            sub_233D4597C(v7, 6uLL, (uint64_t)(a1 + 88), (uint64_t)&v11);
            v9 = v12;
            v8 = v11;
            if (!(_DWORD)v11)
            {
              sub_233CFDC74(v7, 7uLL, (uint64_t)(a1 + 112), (uint64_t)&v11);
              v9 = v12;
              v8 = v11;
              if (!(_DWORD)v11)
              {
                sub_234107FB0(v7, v10, (uint64_t)&v11);
                v8 = v11;
                v9 = v12;
              }
            }
          }
        }
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D10BFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _BYTE v19[8];
  uint64_t v20;

  v19[0] = 0;
  v20 = a2;
  sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
  v6 = v18;
  if (v18 == 1)
  {
LABEL_17:
    result = *(double *)&v16;
    *(_OWORD *)a3 = v16;
    *(_QWORD *)(a3 + 16) = v17;
  }
  else
  {
    while (1)
    {
      v14 = xmmword_2504F2450;
      v15 = 9100;
      if (v6)
        sub_233D4527C();
      switch((char)v16)
      {
        case 0:
          sub_2341049E0(a2, (_WORD *)a1, (uint64_t)&v14);
          break;
        case 1:
          sub_233CFA9D4(a2, (_BYTE *)(a1 + 2), &v12);
          goto LABEL_14;
        case 2:
          v7 = a2;
          v8 = a1 + 8;
          goto LABEL_11;
        case 3:
          v9 = a2;
          v10 = a1 + 32;
          goto LABEL_13;
        case 4:
          v7 = a2;
          v8 = a1 + 48;
          goto LABEL_11;
        case 5:
          v9 = a2;
          v10 = a1 + 72;
          goto LABEL_13;
        case 6:
          v7 = a2;
          v8 = a1 + 88;
LABEL_11:
          sub_233D073BC(v7, v8, &v12);
          goto LABEL_14;
        case 7:
          v9 = a2;
          v10 = a1 + 112;
LABEL_13:
          sub_233CFDED0(v9, v10, (uint64_t)&v12);
LABEL_14:
          v14 = v12;
          v15 = v13;
          break;
        default:
          break;
      }
      result = *(double *)&v14;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v15;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v19, (uint64_t)&v16);
      v6 = v18;
      if (v18 == 1)
        goto LABEL_17;
    }
  }
  return result;
}

double sub_233D10DB0@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233D10A04(a1, a2, 0, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D10E90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2468;
      v9 = 9166;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D10BFC(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D10F64@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2480;
      v9 = 9200;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D11038@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2498;
      v9 = 9234;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D10BFC(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D1110C@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F24B0;
      v9 = 9268;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341049E0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D111E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F24C8;
      v9 = 9322;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233D45328(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D112B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  _WORD *v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 168;
      goto LABEL_3;
    case 65529:
      a1 += 248;
      goto LABEL_3;
    case 65530:
      a1 += 328;
      goto LABEL_3;
    case 65531:
      a1 += 408;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 488), a4);
      break;
    case 65533:
      v5 = (_WORD *)(a1 + 492);
LABEL_14:
      sub_2341049E0(a2, v5, a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          a1 += 80;
          goto LABEL_3;
        case 2:
          v5 = (_WORD *)(a1 + 160);
          goto LABEL_14;
        case 3:
          v5 = (_WORD *)(a1 + 162);
          goto LABEL_14;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 9365;
          break;
      }
      break;
  }
}

void sub_233D11378(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 80;
      goto LABEL_3;
    case 65529:
      a1 += 160;
      goto LABEL_3;
    case 65530:
      a1 += 240;
      goto LABEL_3;
    case 65531:
      a1 += 320;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 400), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 404), a4);
      return;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 9398;
      }
      else
      {
LABEL_3:
        sub_233D45328(a1, a2, a4);
      }
      return;
  }
}

void sub_233D11408(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 80;
      goto LABEL_3;
    case 65529:
      a1 += 160;
      goto LABEL_3;
    case 65530:
      a1 += 240;
      goto LABEL_3;
    case 65531:
      a1 += 320;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 400), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 404), a4);
      return;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 9431;
      }
      else
      {
LABEL_3:
        sub_233D45328(a1, a2, a4);
      }
      return;
  }
}

void sub_233D11498(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 9461;
      break;
  }
}

void sub_233D1151C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 9491;
      break;
  }
}

void sub_233D115A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0xFFF8:
      goto LABEL_2;
    case 0xFFF9:
      a1 += 80;
      goto LABEL_2;
    case 0xFFFA:
      a1 += 160;
      goto LABEL_2;
    case 0xFFFB:
      a1 += 240;
LABEL_2:
      sub_233D45328(a1, a2, a4);
      break;
    case 0xFFFC:
      sub_234104A50(a2, (_DWORD *)(a1 + 320), a4);
      break;
    case 0xFFFD:
      sub_2341049E0(a2, (_WORD *)(a1 + 324), a4);
      break;
    default:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-common"
                            "/app-common/zap-generated/cluster-objects.cpp";
      *(_DWORD *)(a4 + 16) = 9521;
      break;
  }
}

void sub_233D11624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      v5 = a1 + 8;
      goto LABEL_3;
    case 65529:
      v5 = a1 + 88;
      goto LABEL_3;
    case 65530:
      v5 = a1 + 168;
      goto LABEL_3;
    case 65531:
      v5 = a1 + 248;
LABEL_3:
      sub_233D45328(v5, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 328), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 332), a4);
      break;
    default:
      if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 9553;
      }
      else
      {
        sub_2341046D0(a2, (char *)a1, a4);
      }
      break;
  }
}

double sub_233D116C0@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F24E0;
      v9 = 9579;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_2341046D0(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D11794@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[2];

  v5[0] = 0;
  return sub_233D117B8(a1, a2, a3, v5, a4);
}

double sub_233D117B8@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  double result;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  if (*a4)
  {
    v10 = *sub_233C27DCC(a4);
    v11 = *(unsigned __int8 *)(a1 + 17);
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
    if (v10 != v11)
      goto LABEL_9;
  }
  else
  {
    v13 = a2;
    sub_234107E40(a2, a3, 21, &v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_2341071EC(v13, 1uLL, *(_QWORD *)a1, (uint64_t)&v17);
    v15 = v18;
    v14 = v17;
    if (!(_DWORD)v17)
    {
      sub_2341071EC(v13, 2uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v17);
      v14 = v17;
      v15 = v18;
    }
  }
  sub_233CFA850((uint64_t)&v13, 4u, (unsigned __int8 *)(a1 + 16));
LABEL_9:
  if (*a4 && !(_DWORD)v14)
  {
    sub_2341071D8(v13, 0xFEuLL, *(unsigned __int8 *)(a1 + 17), (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  if (!(_DWORD)v14)
  {
    sub_234107FB0(v13, v16, (uint64_t)&v17);
    v14 = v17;
    v15 = v18;
  }
  result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  *(_QWORD *)(a5 + 16) = v15;
  return result;
}

double sub_233D119A4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _BYTE v6[2];

  v6[0] = 1;
  v6[1] = a4;
  return sub_233D117B8(a1, a2, a3, v6, a5);
}

double sub_233D119D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  for (i = v14; v14 != 1; i = v14)
  {
    v10 = xmmword_2504F24F8;
    v11 = 9648;
    if (i)
      sub_233D4527C();
    if (v12 > 3u)
    {
      if (v12 == 4)
      {
        sub_233CFA9D4(a2, (_BYTE *)(a1 + 16), &v8);
        goto LABEL_12;
      }
      if (v12 == 254)
      {
        sub_23410492C(a2, (_BYTE *)(a1 + 17), (uint64_t)&v8);
        goto LABEL_12;
      }
    }
    else if (v12 == 1)
    {
      sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
    }
    else if (v12 == 2)
    {
      sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
LABEL_12:
      v10 = v8;
      v11 = v9;
    }
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  }
  result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(_QWORD *)(a3 + 16) = v13;
  return result;
}

double sub_233D11B30@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(v7, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071EC(v7, 1uLL, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_2341073FC(v7, 2uLL, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v11);
        v9 = v12;
        v8 = v11;
        if (!(_DWORD)v11)
        {
          sub_233D096D4(v7, 3uLL, (_BYTE *)(a1 + 32), (uint64_t)&v11);
          v8 = v11;
          v9 = v12;
        }
      }
    }
  }
  sub_233CFA850((uint64_t)&v7, 4u, (unsigned __int8 *)(a1 + 56));
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D11CA4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_14:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2510;
      v11 = 9702;
      if (v6)
        sub_233D4527C();
      switch((char)v12)
      {
        case 0:
          sub_23410499C(a2, (_QWORD *)a1, (uint64_t)&v10);
          break;
        case 1:
          sub_23410499C(a2, (_QWORD *)(a1 + 8), (uint64_t)&v8);
          goto LABEL_11;
        case 2:
          if (sub_23410462C(a2) == 16)
          {
            sub_234104B68(a2, (_OWORD *)(a1 + 16), &v8);
          }
          else
          {
            LODWORD(v8) = 43;
            *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
            LODWORD(v9) = 80;
          }
          goto LABEL_11;
        case 3:
          sub_233D01328(a2, a1 + 32, (uint64_t)&v8);
          goto LABEL_11;
        case 4:
          sub_233CFA9D4(a2, (_BYTE *)(a1 + 56), &v8);
LABEL_11:
          v10 = v8;
          v11 = v9;
          break;
        default:
          break;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_14;
    }
  }
  return result;
}

double sub_233D11E4C@<D0>(unsigned int *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_23410726C(a2, 0, *a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D11F2C@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2528;
      v9 = 9752;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D12000@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_2341071EC(a2, 0, *(_QWORD *)a1, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_233D096D4(a2, 1uLL, (_BYTE *)(a1 + 8), (uint64_t)&v11);
      v9 = v12;
      v8 = v11;
      if (!(_DWORD)v11)
      {
        sub_234107FB0(a2, v10, (uint64_t)&v11);
        v8 = v11;
        v9 = v12;
      }
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D1210C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2540;
      v11 = 9787;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_233D01328(a2, (uint64_t)(a1 + 1), (uint64_t)&v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410499C(a2, a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

double sub_233D12218@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2558;
      v9 = 9825;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D122EC@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2570;
      v9 = 9859;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D123C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;

  v4 = (_DWORD *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  switch(v5)
  {
    case 0:
      goto LABEL_19;
    case 1:
      v4 = (_DWORD *)(a1 + 4);
      goto LABEL_19;
    case 2:
      v7 = (_WORD *)(a1 + 8);
      goto LABEL_21;
    case 3:
      v6 = a1 + 16;
LABEL_5:
      sub_233D45328(v6, a2, a4);
      return;
    case 4:
      v4 = (_DWORD *)(a1 + 96);
      goto LABEL_19;
    case 5:
      v7 = (_WORD *)(a1 + 100);
LABEL_21:
      sub_2341049E0(a2, v7, a4);
      break;
    case 6:
      sub_233D45D0C(a2, (_DWORD *)(a1 + 104), (_QWORD *)a4);
      break;
    case 7:
      sub_234104C8C(a2, (_OWORD *)(a1 + 112), (_QWORD *)a4);
      break;
    case 8:
      sub_233CFA9D4(a2, (_BYTE *)(a1 + 128), (_QWORD *)a4);
      break;
    case 9:
      v4 = (_DWORD *)(a1 + 132);
LABEL_19:
      sub_234104A50(a2, v4, a4);
      break;
    default:
      switch(v5)
      {
        case 65528:
          v6 = a1 + 136;
          goto LABEL_5;
        case 65529:
          v6 = a1 + 216;
          goto LABEL_5;
        case 65530:
          v6 = a1 + 296;
          goto LABEL_5;
        case 65531:
          v6 = a1 + 376;
          goto LABEL_5;
        case 65532:
          v4 = (_DWORD *)(a1 + 456);
          goto LABEL_19;
        case 65533:
          v7 = (_WORD *)(a1 + 460);
          goto LABEL_21;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 9914;
          break;
      }
      break;
  }
}

double sub_233D124CC@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2588;
      v9 = 9944;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D125A0@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F25A0;
      v9 = 9998;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D12674@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F25B8;
      v9 = 10032;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_234104A50(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_233D12748(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v4 = (_DWORD *)a1;
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 <= 65527)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        if (v5 == 2)
        {
          sub_233C05F48(a2, (_BYTE *)(a1 + 8), (_QWORD *)a4);
        }
        else
        {
LABEL_16:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 10073;
        }
        return;
      }
      v4 = (_DWORD *)(a1 + 4);
    }
LABEL_15:
    sub_234104A50(a2, v4, a4);
    return;
  }
  switch(v5)
  {
    case 65528:
      v6 = a1 + 16;
      goto LABEL_4;
    case 65529:
      v6 = a1 + 96;
      goto LABEL_4;
    case 65530:
      v6 = a1 + 176;
      goto LABEL_4;
    case 65531:
      v6 = a1 + 256;
LABEL_4:
      sub_233D45328(v6, a2, a4);
      break;
    case 65532:
      v4 = (_DWORD *)(a1 + 336);
      goto LABEL_15;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 340), a4);
      break;
    default:
      goto LABEL_16;
  }
}

double sub_233D1280C@<D0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_233CF8A14(a1, a2, 0, (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_234107FB0(a2, v10, (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D128EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F25D0;
      v9 = 10184;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233CF8B4C(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D129C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  double result;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 0:
      sub_233CFD61C(a2, a1, (_QWORD *)a4);
      break;
    case 1:
      sub_233CFA208(a2, (unsigned __int8 *)(a1 + 88), a4);
      break;
    case 2:
      sub_233CFD040(a2, a1 + 92, a4);
      break;
    case 3:
      v5 = a1 + 104;
LABEL_4:
      sub_233D45328(v5, a2, a4);
      break;
    case 4:
      sub_233C05F48(a2, (_BYTE *)(a1 + 184), (_QWORD *)a4);
      break;
    case 5:
      result = sub_233CF8B4C(a1 + 192, a2, a4);
      break;
    default:
      switch(v4)
      {
        case 65528:
          v5 = a1 + 248;
          goto LABEL_4;
        case 65529:
          v5 = a1 + 328;
          goto LABEL_4;
        case 65530:
          v5 = a1 + 408;
          goto LABEL_4;
        case 65531:
          v5 = a1 + 488;
          goto LABEL_4;
        case 65532:
          sub_234104A50(a2, (_DWORD *)(a1 + 568), a4);
          break;
        case 65533:
          sub_2341049E0(a2, (_WORD *)(a1 + 572), a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 10231;
          break;
      }
      break;
  }
  return result;
}

void sub_233D12AB8(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v7;

  v7 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234107E40(a2, a3, 21, &v7, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233CF8A14(a1, a2, 0, (uint64_t)a4);
    if (!*(_DWORD *)a4)
      sub_234107FB0(a2, v7, (uint64_t)a4);
  }
}

double sub_233D12B48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F25E8;
      v9 = 10257;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_233CF8B4C(a1, a2, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

char *sub_233D12C1C@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *result;
  int v8;

  v8 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = sub_234107E40(a2, a3, 21, &v8, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341071D8(a2, 0, *a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      result = sub_233D12CF4(a2, 1uLL, a1 + 4, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        result = sub_233D12CF4(a2, 2uLL, a1 + 16, (uint64_t)a4);
        if (!*(_DWORD *)a4)
          return sub_234107FB0(a2, v8, (uint64_t)a4);
      }
    }
  }
  return result;
}

char *sub_233D12CF4@<X0>(char *result@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  _BYTE *v7;

  if (*a3)
  {
    v6 = result;
    v7 = sub_233D45D70(a3);
    return sub_233D025E4(v6, a2, (uint64_t)v7, a4);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Encode.h";
    *(_DWORD *)(a4 + 16) = 171;
  }
  return result;
}

double sub_233D12D68@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int i;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;

  v17[0] = 0;
  v18 = a2;
  sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  for (i = v16; v16 != 1; i = v16)
  {
    v12 = xmmword_2504F2600;
    v13 = 10294;
    if (i)
      sub_233D4527C();
    if (v14 == 2)
    {
      *(_BYTE *)(a1 + 16) = 1;
      *(_QWORD *)(a1 + 20) = 0;
      v7 = a2;
      v8 = a1 + 20;
    }
    else
    {
      if (v14 != 1)
      {
        if (!(_BYTE)v14)
          sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v12);
        goto LABEL_10;
      }
      *(_BYTE *)(a1 + 4) = 1;
      *(_QWORD *)(a1 + 8) = 0;
      v7 = a2;
      v8 = a1 + 8;
    }
    sub_233CFD040(v7, v8, (uint64_t)&v10);
    v12 = v10;
    v13 = v11;
LABEL_10:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    if (*(_DWORD *)a3)
      return result;
    sub_233CF7B40((uint64_t)v17, (uint64_t)&v14);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

double sub_233D12EAC@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  v13[0] = 0;
  v14 = a2;
  sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
  v6 = v12;
  if (v12 == 1)
  {
LABEL_7:
    result = *(double *)&v10;
    *(_OWORD *)a3 = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    while (1)
    {
      v8 = xmmword_2504F2618;
      v9 = 10343;
      if (v6)
        sub_233D4527C();
      if (!(_BYTE)v10)
        sub_23410492C(a2, a1, (uint64_t)&v8);
      result = *(double *)&v8;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v13, (uint64_t)&v10);
      v6 = v12;
      if (v12 == 1)
        goto LABEL_7;
    }
  }
  return result;
}

double sub_233D12F80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_9:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2630;
      v11 = 10378;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        *(_BYTE *)(a1 + 8) = 1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        sub_234104C8C(a2, (_OWORD *)(a1 + 16), &v8);
        v10 = v8;
        v11 = v9;
      }
      else if (!(_BYTE)v12)
      {
        sub_23410492C(a2, (_BYTE *)a1, (uint64_t)&v10);
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_9;
    }
  }
  return result;
}

void sub_233D13098(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  unsigned __int8 *v5;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 88;
      goto LABEL_3;
    case 65529:
      a1 += 168;
      goto LABEL_3;
    case 65530:
      a1 += 248;
      goto LABEL_3;
    case 65531:
      a1 += 328;
LABEL_3:
      sub_233D45328(a1, a2, a4);
      break;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 408), a4);
      break;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 412), a4);
      break;
    default:
      switch(v4)
      {
        case 0:
          goto LABEL_3;
        case 1:
          sub_23410492C(a2, (_BYTE *)(a1 + 80), a4);
          return;
        case 2:
          v5 = (unsigned __int8 *)(a1 + 81);
          goto LABEL_14;
        case 3:
          v5 = (unsigned __int8 *)(a1 + 83);
LABEL_14:
          sub_233CFA208(a2, v5, a4);
          break;
        default:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-co"
                                "mmon/app-common/zap-generated/cluster-objects.cpp";
          *(_DWORD *)(a4 + 16) = 10425;
          break;
      }
      break;
  }
}

void sub_233D1316C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  switch(v4)
  {
    case 65528:
      a1 += 88;
      goto LABEL_3;
    case 65529:
      a1 += 168;
      goto LABEL_3;
    case 65530:
      a1 += 248;
      goto LABEL_3;
    case 65531:
      a1 += 328;
      goto LABEL_3;
    case 65532:
      sub_234104A50(a2, (_DWORD *)(a1 + 408), a4);
      return;
    case 65533:
      sub_2341049E0(a2, (_WORD *)(a1 + 412), a4);
      return;
    default:
      if (v4 == 1)
      {
        sub_233D13214(a2, (unsigned __int8 *)(a1 + 80), a4);
      }
      else if (v4)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/zzz_generated/app-comm"
                              "on/app-common/zap-generated/cluster-objects.cpp";
        *(_DWORD *)(a4 + 16) = 10459;
      }
      else
      {
LABEL_3:
        sub_233D45328(a1, a2, a4);
      }
      return;
  }
}

uint64_t sub_233D13214@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;

  result = sub_23410462C(a1);
  if ((_DWORD)result == 20)
  {
    if (a2[1])
      a2[1] = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
    v7 = 168;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_WORD *)a2 = 256;
  result = sub_233C05F48(a1, a2, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2[1])
      sub_233CAF304();
    if (*a2 == 255)
    {
      *(_DWORD *)a3 = 1415;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 175;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
      v7 = 177;
    }
    goto LABEL_5;
  }
  return result;
}

double sub_233D132E8@<D0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[8];
  uint64_t v16;

  v15[0] = 0;
  v16 = a2;
  sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
  v6 = v14;
  if (v14 == 1)
  {
LABEL_11:
    result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
  }
  else
  {
    while (1)
    {
      v10 = xmmword_2504F2648;
      v11 = 10490;
      if (v6)
        sub_233D4527C();
      if (v12 == 1)
      {
        sub_2341049E0(a2, a1 + 1, (uint64_t)&v10);
      }
      else if (!(_BYTE)v12)
      {
        v8 = 0uLL;
        v9 = 0;
        sub_233D45404(a2, a1, &v8);
        if (!(_DWORD)v8)
        {
          LODWORD(v8) = 0;
          *((_QWORD *)&v8 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/Decode.h";
          LODWORD(v9) = 61;
        }
        v10 = v8;
        v11 = v9;
      }
      result = *(double *)&v10;
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_DWORD *)a3)
        break;
      sub_233CF7B40((uint64_t)v15, (uint64_t)&v12);
      v6 = v14;
      if (v14 == 1)
        goto LABEL_11;
    }
  }
  return result;
}

double sub_233D13424@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;

  v7 = a2;
  sub_234107E40(a2, a3, 21, &v10, (uint64_t)&v11);
  v8 = v11;
  v9 = v12;
  if (!(_DWORD)v11)
  {
    sub_234107684(v7, 0, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)&v11);
    v9 = v12;
    v8 = v11;
    if (!(_DWORD)v11)
    {
      sub_2341071D8(v7, 1uLL, *(unsigned __int8 *)(a1 + 16), (uint64_t)&v11);
      v8 = v11;
      v9 = v12;
    }
  }
  sub_233D13540((uint64_t)&v7, 2u, a1 + 24);
  if (!(_DWORD)v8)
  {
    sub_234107FB0(v7, v10, (uint64_t)&v11);
    v8 = v11;
    v9 = v12;
  }
  result = *(double *)&v8;
  *(_OWORD *)a4 = v8;
  *(_QWORD *)(a4 + 16) = v9;
  return result;
}

double sub_233D13540(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = a1 + 8;
  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(char **)a1;
    v5 = *(unsigned __int16 **)a3;
    v6 = *(_QWORD *)(a3 + 8);
    v11 = 0;
    v10 = 0;
    v9 = 0uLL;
    sub_234107E40(v4, a2, 22, &v11, (uint64_t)&v9);
    if (!(_DWORD)v9)
    {
      if (v6)
      {
        v7 = 4 * v6;
        while (1)
        {
          v9 = 0uLL;
          v10 = 0;
          sub_233D00224(v5, v4, 0x100uLL, (uint64_t)&v9);
          if ((_DWORD)v9)
            break;
          v5 += 2;
          v7 -= 4;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v9 = 0uLL;
        v10 = 0;
        sub_234107FB0(v4, v11, (uint64_t)&v9);
        if (!(_DWORD)v9)
        {
          LODWORD(v9) = 0;
          *((_QWORD *)&v9 + 1) = "/Library/Caches/com.apple.xbs/Sources/CHIPFramework/connectedhomeip/src/app/data-model/List.h";
          LODWORD(v10) = 86;
        }
      }
    }
    result = *(double *)&v9;
    *(_OWORD *)v3 = v9;
    *(_QWORD *)(v3 + 16) = v10;
  }
  return result;
}

