_QWORD *sub_2341DF61C@<X0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  BOOL v10;
  int v11;
  __int128 v12;
  uint64_t v13;

  result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
  v8 = v12;
  if (!(_DWORD)v12)
  {
    if (*a1 || a1[1] != 16)
    {
      LODWORD(v7) = 417;
      LODWORD(v8) = 773;
      v9 = "src/credentials/CertificationDeclaration.cpp";
      goto LABEL_16;
    }
    result = (_QWORD *)sub_234137338((uint64_t)a1, (uint64_t)&v12);
    v8 = v12;
    if (!(_DWORD)v12)
    {
      result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
      v8 = v12;
      if (!(_DWORD)v12)
      {
        LODWORD(v7) = 420;
        LODWORD(v8) = 773;
        v9 = "src/credentials/CertificationDeclaration.cpp";
        if (*a1 || a1[1] != 6)
          goto LABEL_16;
        result = sub_233BF7114(&v12, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
        if (*((_QWORD *)&v12 + 1) != 9
          || (*(_QWORD *)v12 == 0x7010DF78648862ALL ? (v10 = *(_BYTE *)(v12 + 8) == 1) : (v10 = 0), !v10))
        {
          *(_DWORD *)a3 = 774;
          *(_QWORD *)(a3 + 8) = "src/credentials/CertificationDeclaration.cpp";
          *(_DWORD *)(a3 + 16) = 422;
          return result;
        }
        result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
        v8 = v12;
        if (!(_DWORD)v12)
        {
          LODWORD(v7) = 425;
          LODWORD(v8) = 773;
          if (*a1 != 128 || a1[1])
            goto LABEL_16;
          result = (_QWORD *)sub_234137338((uint64_t)a1, (uint64_t)&v12);
          v8 = v12;
          if (!(_DWORD)v12)
          {
            result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
            v8 = v12;
            if (!(_DWORD)v12)
            {
              LODWORD(v7) = 428;
              LODWORD(v8) = 773;
              if (*a1 || a1[1] != 4)
                goto LABEL_16;
              sub_233BF7114(&v12, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
              *a2 = v12;
              result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
              v8 = v12;
              v7 = v13;
              if (!(_DWORD)v12)
              {
                LODWORD(v8) = 773;
                v11 = 431;
                goto LABEL_33;
              }
              if ((_DWORD)v12 != 768)
                goto LABEL_31;
              result = sub_234137434(&v12, a1);
              v8 = v12;
              if (!(_DWORD)v12)
              {
                result = (_QWORD *)sub_23413712C((uint64_t)a1, (uint64_t)&v12);
                v8 = v12;
                v7 = v13;
                if ((_DWORD)v12)
                {
                  if ((_DWORD)v12 == 768)
                  {
                    result = sub_234137434(&v12, a1);
                    v8 = v12;
                    goto LABEL_2;
                  }
LABEL_31:
                  v9 = (const char *)*((_QWORD *)&v12 + 1);
                  goto LABEL_16;
                }
                LODWORD(v8) = 773;
                v11 = 433;
LABEL_33:
                LODWORD(v7) = v11;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
  }
LABEL_2:
  v9 = (const char *)*((_QWORD *)&v12 + 1);
  v7 = v13;
LABEL_16:
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v7;
  return result;
}

double sub_2341DF8A8@<D0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v8;
  double result;
  const char *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  _QWORD v15[2];
  __int128 v16;
  unint64_t v17;

  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  v11 = 773;
  if (*a1 || a1[1] != 17)
  {
    LODWORD(v8) = 503;
LABEL_33:
    LODWORD(result) = v11;
LABEL_34:
    v10 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_35;
  }
  sub_234137338((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 505;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16)
    goto LABEL_35;
  sub_234137338((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  v15[0] = 0;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 510;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 2)
    goto LABEL_35;
  sub_234137574(a1, v15, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  if (v15[0] != 3)
  {
    LODWORD(v8) = 513;
    v11 = 774;
    goto LABEL_33;
  }
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 517;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 != 128 || a1[1])
    goto LABEL_35;
  sub_233BF7114(&v16, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
  *a2 = v16;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 521;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16)
    goto LABEL_35;
  sub_234137338((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 523;
  LODWORD(result) = 773;
  if (*a1)
    goto LABEL_51;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (a1[1] != 6)
    goto LABEL_35;
  sub_233BF7114(&v16, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
  if (*((_QWORD *)&v16 + 1) != 9
    || (*(_QWORD *)v16 == 0x204036501488660 ? (v12 = *(_BYTE *)(v16 + 8) == 1) : (v12 = 0), !v12))
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    v13 = 525;
LABEL_31:
    a4[1].n128_u32[0] = v13;
    return result;
  }
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  v8 = v17;
  if (!(_DWORD)v16)
  {
    LODWORD(result) = 773;
    v14 = 527;
LABEL_53:
    LODWORD(v8) = v14;
    goto LABEL_34;
  }
  if ((_DWORD)v16 != 768)
    goto LABEL_68;
  sub_234137434(&v16, a1);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 530;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 16)
    goto LABEL_35;
  sub_234137338((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 532;
  LODWORD(result) = 773;
  if (*a1)
  {
LABEL_51:
    v10 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_35;
  }
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (a1[1] != 6)
    goto LABEL_35;
  sub_233BF7114(&v16, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
  if (*((_QWORD *)&v16 + 1) != 8 || *(_QWORD *)v16 != 0x203043DCE48862ALL)
  {
    a4->n128_u32[0] = 774;
    a4->n128_u64[1] = (unint64_t)"src/credentials/CertificationDeclaration.cpp";
    v13 = 535;
    goto LABEL_31;
  }
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  v8 = v17;
  if (!(_DWORD)v16)
  {
    LODWORD(result) = 773;
    v14 = 537;
    goto LABEL_53;
  }
  if ((_DWORD)v16 != 768)
    goto LABEL_68;
  sub_234137434(&v16, a1);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  sub_23413712C((uint64_t)a1, (uint64_t)&v16);
  result = *(double *)&v16;
  if ((_DWORD)v16)
    goto LABEL_2;
  LODWORD(v8) = 540;
  LODWORD(result) = 773;
  v10 = "src/credentials/CertificationDeclaration.cpp";
  if (*a1 || a1[1] != 4)
    goto LABEL_35;
  sub_233CAF22C(&v16, a3, 64);
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  sub_233BF7114(v15, *((_QWORD *)a1 + 1), *((unsigned int *)a1 + 4));
  result = sub_2341343A4(32, v15, (uint64_t *)&v16, a4);
  if (!a4->n128_u32[0])
  {
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    if (*((_QWORD *)&v16 + 1) >= 0x41uLL)
    {
      a4->n128_u32[0] = 47;
      a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.h";
      v13 = 289;
      goto LABEL_31;
    }
    *(_QWORD *)(a3 + 64) = *((_QWORD *)&v16 + 1);
    a4->n128_u64[1] = (unint64_t)"src/crypto/CHIPCryptoPAL.h";
    a4[1].n128_u32[0] = 291;
    sub_23413712C((uint64_t)a1, (uint64_t)&v16);
    result = *(double *)&v16;
    v8 = v17;
    if ((_DWORD)v16)
    {
      if ((_DWORD)v16 != 768)
        goto LABEL_68;
      sub_234137434(&v16, a1);
      result = *(double *)&v16;
      if ((_DWORD)v16)
      {
LABEL_2:
        v10 = (const char *)*((_QWORD *)&v16 + 1);
        v8 = v17;
LABEL_35:
        a4->n128_f64[0] = result;
        a4->n128_u64[1] = (unint64_t)v10;
        a4[1].n128_u64[0] = v8;
        return result;
      }
      sub_23413712C((uint64_t)a1, (uint64_t)&v16);
      result = *(double *)&v16;
      v8 = v17;
      if ((_DWORD)v16)
      {
        if ((_DWORD)v16 == 768)
        {
          sub_234137434(&v16, a1);
          result = *(double *)&v16;
          goto LABEL_2;
        }
LABEL_68:
        v10 = (const char *)*((_QWORD *)&v16 + 1);
        goto LABEL_35;
      }
      LODWORD(result) = 773;
      v14 = 549;
    }
    else
    {
      LODWORD(result) = 773;
      v14 = 547;
    }
    goto LABEL_53;
  }
  return result;
}

_QWORD *sub_2341DFE84@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unsigned __int32 v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a1[1] >= 0xFFFFFFFF)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = a1[1];
  sub_2341370F4((uint64_t)&v12, *a1, v5);
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  if (v12 || v13 != 16)
  {
    LODWORD(v7) = 701;
    LODWORD(v8) = 773;
LABEL_32:
    v9 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_33;
  }
  result = (_QWORD *)sub_234137338((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  LODWORD(v7) = 708;
  LODWORD(v8) = 773;
  v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v12 != 128 || v13)
    goto LABEL_33;
  result = (_QWORD *)sub_234137338((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  LODWORD(v7) = 710;
  LODWORD(v8) = 773;
  v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v12 || v13 != 16)
    goto LABEL_33;
  result = (_QWORD *)sub_234137338((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  v17 = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  sub_2341DF8A8(&v12, a2, (uint64_t)&v14, a3);
  v10 = a3->n128_u32[0];
  result = (_QWORD *)sub_23413A7A4(&v14, 64);
  if (v10)
    return result;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  v7 = v16;
  if (!(_DWORD)v14)
  {
    LODWORD(v8) = 773;
    v11 = 725;
LABEL_37:
    LODWORD(v7) = v11;
    goto LABEL_32;
  }
  if ((_DWORD)v14 != 768)
    goto LABEL_35;
  result = sub_234137434(&v14, &v12);
  v8 = v14;
  if ((_DWORD)v14)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
  v8 = v14;
  v7 = v16;
  if (!(_DWORD)v14)
  {
    LODWORD(v8) = 773;
    v11 = 727;
    goto LABEL_37;
  }
  if ((_DWORD)v14 != 768)
    goto LABEL_35;
  result = sub_234137434(&v14, &v12);
  v8 = v14;
  if (!(_DWORD)v14)
  {
    result = (_QWORD *)sub_23413712C((uint64_t)&v12, (uint64_t)&v14);
    v8 = v14;
    v7 = v16;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 768)
      {
        result = sub_234137434(&v14, &v12);
        v8 = v14;
        goto LABEL_5;
      }
LABEL_35:
      v9 = v15;
      goto LABEL_33;
    }
    LODWORD(v8) = 773;
    v11 = 729;
    goto LABEL_37;
  }
LABEL_5:
  v9 = v15;
  v7 = v16;
LABEL_33:
  a3->n128_u64[0] = v8;
  a3->n128_u64[1] = (unint64_t)v9;
  a3[1].n128_u64[0] = v7;
  return result;
}

_QWORD *sub_2341E01A4@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  char v15;

  if ((unint64_t)a1[1] >= 0xFFFFFFFF)
    v5 = 0xFFFFFFFFLL;
  else
    v5 = a1[1];
  sub_2341370F4((uint64_t)&v14, *a1, v5);
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  if (v14 || v15 != 16)
  {
    LODWORD(v7) = 744;
    LODWORD(v8) = 773;
LABEL_32:
    v9 = "src/credentials/CertificationDeclaration.cpp";
    goto LABEL_33;
  }
  result = (_QWORD *)sub_234137338((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  LODWORD(v7) = 751;
  LODWORD(v8) = 773;
  v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v14 != 128 || v15)
    goto LABEL_33;
  result = (_QWORD *)sub_234137338((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  LODWORD(v7) = 753;
  LODWORD(v8) = 773;
  v9 = "src/credentials/CertificationDeclaration.cpp";
  if (v14 || v15 != 16)
    goto LABEL_33;
  result = (_QWORD *)sub_234137338((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_2341DF61C(&v14, a2, (uint64_t)a3);
  if (*(_DWORD *)a3)
    return result;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  v7 = v13;
  if (!(_DWORD)v11)
  {
    LODWORD(v8) = 773;
    v10 = 767;
LABEL_37:
    LODWORD(v7) = v10;
    goto LABEL_32;
  }
  if ((_DWORD)v11 != 768)
    goto LABEL_35;
  result = sub_234137434(&v11, &v14);
  v8 = v11;
  if ((_DWORD)v11)
    goto LABEL_5;
  result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
  v8 = v11;
  v7 = v13;
  if (!(_DWORD)v11)
  {
    LODWORD(v8) = 773;
    v10 = 769;
    goto LABEL_37;
  }
  if ((_DWORD)v11 != 768)
    goto LABEL_35;
  result = sub_234137434(&v11, &v14);
  v8 = v11;
  if (!(_DWORD)v11)
  {
    result = (_QWORD *)sub_23413712C((uint64_t)&v14, (uint64_t)&v11);
    v8 = v11;
    v7 = v13;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 768)
      {
        result = sub_234137434(&v11, &v14);
        v8 = v11;
        goto LABEL_5;
      }
LABEL_35:
      v9 = v12;
      goto LABEL_33;
    }
    LODWORD(v8) = 773;
    v10 = 771;
    goto LABEL_37;
  }
LABEL_5:
  v9 = v12;
  v7 = v13;
LABEL_33:
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v7;
  return result;
}

double sub_2341E0484@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  int v11;
  _BYTE v12[20];
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v12);
  v11 = 21;
  sub_234104498((uint64_t)v12, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010((uint64_t)v12, 21, 256, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23410570C((uint64_t)v12, &v11, a3);
    if (!*(_DWORD *)a3)
    {
      v7 = 0;
      while (1)
      {
        sub_2341058CC((uint64_t)v12, &v8);
        result = *(double *)&v9;
        v14 = v9;
        v15 = v10;
        if (v8)
          break;
        if (v13)
          ++v7;
      }
      if (v8 == 33)
      {
        *a2 = v7;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
        *(_DWORD *)(a3 + 16) = 70;
      }
      else
      {
        *(_DWORD *)a3 = v8;
        result = *(double *)&v14;
        *(_OWORD *)(a3 + 4) = v14;
        *(_DWORD *)(a3 + 20) = v15;
      }
    }
  }
  return result;
}

void sub_2341E05CC(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v14;
  char i;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE v21[20];
  int v22;
  int v23;
  _BYTE v24[16];
  unint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v24);
  v23 = 21;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  sub_234104498((uint64_t)v24, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_234106010((uint64_t)v24, 21, 256, (_QWORD *)a7);
  if (*(_DWORD *)a7)
    return;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_23410570C((uint64_t)v24, &v23, a7);
  if (*(_DWORD *)a7)
    return;
  v14 = 0;
  v20 = 0;
  v19 = 0;
  v18 = a6;
  while (2)
  {
    for (i = BYTE4(v20); ; i = 1)
    {
LABEL_5:
      v16 = v14;
LABEL_6:
      sub_2341058CC((uint64_t)v24, v21);
      v26 = *(_OWORD *)&v21[4];
      v27 = v22;
      if (*(_DWORD *)v21)
      {
        if (*(_DWORD *)v21 != 33)
        {
          *(_DWORD *)a7 = *(_DWORD *)v21;
          *(_OWORD *)(a7 + 4) = v26;
          *(_DWORD *)(a7 + 20) = v27;
          return;
        }
LABEL_21:
        if ((v20 & v19 & HIDWORD(v20) & 1) != 0)
        {
          *(_QWORD *)v21 = 0;
          *(_QWORD *)(a7 + 8) = 0;
          *(_QWORD *)(a7 + 16) = 0;
          *(_QWORD *)a7 = 0;
          sub_2341E0484(a1, v21, a7);
          if (*(_DWORD *)a7)
            return;
          *(_QWORD *)a7 = 0;
          *(_QWORD *)(a7 + 8) = 0;
          *(_QWORD *)(a7 + 16) = 0;
          sub_2341E08E8(v18, (_OWORD *)a1, *(uint64_t *)v21, (_QWORD *)a7);
          if (*(_DWORD *)a7)
            return;
          *(_DWORD *)a7 = 0;
          *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
          v17 = 150;
        }
        else
        {
          *(_DWORD *)a7 = 61;
          *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
          v17 = 145;
        }
LABEL_28:
        *(_DWORD *)(a7 + 16) = v17;
        return;
      }
      v14 = v25;
      if (v25 > 0xFF)
        goto LABEL_21;
      if ((i & 1) != 0)
        break;
      if ((_DWORD)v25 != 1)
      {
        *(_DWORD *)a7 = 43;
        *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
        v17 = 108;
        goto LABEL_28;
      }
LABEL_14:
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      sub_234106600((uint64_t)v24, a2, (_QWORD *)a7);
      LODWORD(v20) = 1;
      if (*(_DWORD *)a7)
        return;
    }
    if (v16 >= v25)
    {
      *(_DWORD *)a7 = 43;
      *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      v17 = 114;
      goto LABEL_28;
    }
    i = 1;
    v16 = v25;
    switch((int)v25)
    {
      case 1:
        goto LABEL_14;
      case 2:
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        sub_234106600((uint64_t)v24, a3, (_QWORD *)a7);
        v19 = 1;
        if (!*(_DWORD *)a7)
          goto LABEL_5;
        break;
      case 3:
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        sub_234104A50((uint64_t)v24, a4, a7);
        HIDWORD(v20) = 1;
        if (!*(_DWORD *)a7)
          continue;
        break;
      case 4:
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        sub_234106600((uint64_t)v24, (_OWORD *)a5, (_QWORD *)a7);
        v16 = v14;
        if (!*(_DWORD *)a7)
          goto LABEL_6;
        break;
      default:
        goto LABEL_6;
    }
    break;
  }
}

void sub_2341E08E8(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = 0;
  *(_QWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = *a2;
  v6 = a1 + 32;
  sub_234104498(a1 + 32, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_234106010(v6, *(_DWORD *)(a1 + 104), 256, a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_23410570C(v6, (_DWORD *)(a1 + 104), (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      while (1)
      {
        v7 = 0uLL;
        v8 = 0;
        sub_2341058CC(v6, &v7);
        if ((_DWORD)v7 == 33)
          break;
        *(_OWORD *)a4 = v7;
        a4[2] = v8;
        if (*(_DWORD *)a4)
          return;
        if (*(_QWORD *)(a1 + 48) > 0xFFuLL)
          goto LABEL_8;
      }
      *(_BYTE *)(a1 + 26) = 1;
LABEL_8:
      *(_WORD *)(a1 + 24) = 257;
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/DeviceAttestationVendorReserved.h";
      *((_DWORD *)a4 + 4) = 74;
    }
  }
}

double sub_2341E09F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  int v22;
  char v23[44];
  unsigned int v24;

  result = sub_234106C48((uint64_t)v23);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 != 32)
  {
    if (v15)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      v16 = 162;
      goto LABEL_17;
    }
LABEL_4:
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
    v16 = 161;
LABEL_17:
    *(_DWORD *)(a7 + 16) = v16;
    return result;
  }
  sub_234106C70((uint64_t)v23, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  v22 = -1;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  sub_234107E40(v23, 0x100uLL, 21, &v22, a7);
  if (!*(_DWORD *)a7)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    sub_2341073FC(v23, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), a7);
    if (!*(_DWORD *)a7)
    {
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      sub_2341073FC(v23, 2uLL, *(char **)a2, *(_QWORD *)(a2 + 8), a7);
      if (!*(_DWORD *)a7)
      {
        *(_QWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = 0;
        *(_QWORD *)(a7 + 16) = 0;
        sub_23410726C(v23, 3uLL, a3, a7);
        if (!*(_DWORD *)a7)
        {
          v17 = *(_QWORD *)(a4 + 8);
          if (!v17
            || (*(_QWORD *)a7 = 0,
                *(_QWORD *)(a7 + 8) = 0,
                *(_QWORD *)(a7 + 16) = 0,
                sub_2341073FC(v23, 4uLL, *(char **)a4, v17, a7),
                !*(_DWORD *)a7))
          {
            sub_2341E11A0(a5);
            a5[3] = 0;
            while (1)
            {
              v18 = a5[3];
              if (v18 >= a5[2])
                break;
              v19 = *a5;
              a5[3] = v18 + 1;
              if (!v19)
                break;
              v20 = (unsigned __int16 *)(v19 + 24 * v18);
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              sub_2341073FC(v23, (((unint64_t)*v20 << 48) | ((unint64_t)v20[1] << 32) | *((unsigned int *)v20 + 1)) ^ 0xFFFFFFFF00000000, *((char **)v20 + 1), *((_QWORD *)v20 + 2), a7);
              if (*(_DWORD *)a7)
                return result;
            }
            *(_QWORD *)a7 = 0;
            *(_QWORD *)(a7 + 8) = 0;
            *(_QWORD *)(a7 + 16) = 0;
            sub_234107FB0(v23, v22, a7);
            if (!*(_DWORD *)a7)
            {
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              result = sub_234106D88((uint64_t)v23, a7);
              if (!*(_DWORD *)a7)
              {
                *(_QWORD *)a6 = sub_2341291A4((_QWORD *)a6, 0, v24);
                *(_QWORD *)(a6 + 8) = v21;
                if (v21 >= 0x385)
                {
                  *(_DWORD *)a7 = 4;
                  *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                  v16 = 186;
                }
                else
                {
                  *(_DWORD *)a7 = 0;
                  *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                  v16 = 188;
                }
                goto LABEL_17;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2341E0C74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char v21[44];
  unsigned int v22;

  sub_234106C48((uint64_t)v21);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_4;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != 32)
  {
    if (v14)
    {
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      v15 = 199;
      goto LABEL_19;
    }
LABEL_4:
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
    v15 = 198;
LABEL_19:
    *(_DWORD *)(a7 + 16) = v15;
    return;
  }
  sub_234106C70((uint64_t)v21, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  v20 = -1;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  sub_234107E40(v21, 0x100uLL, 21, &v20, a7);
  if (!*(_DWORD *)a7)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    sub_2341073FC(v21, 1uLL, *(char **)a1, *(_QWORD *)(a1 + 8), a7);
    if (!*(_DWORD *)a7)
    {
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      sub_2341073FC(v21, 2uLL, *(char **)a2, *(_QWORD *)(a2 + 8), a7);
      if (!*(_DWORD *)a7)
      {
        v16 = *(_QWORD *)(a3 + 8);
        if (!v16
          || (*(_QWORD *)a7 = 0,
              *(_QWORD *)(a7 + 8) = 0,
              *(_QWORD *)(a7 + 16) = 0,
              sub_2341073FC(v21, 3uLL, *(char **)a3, v16, a7),
              !*(_DWORD *)a7))
        {
          v17 = *(_QWORD *)(a4 + 8);
          if (!v17
            || (*(_QWORD *)a7 = 0,
                *(_QWORD *)(a7 + 8) = 0,
                *(_QWORD *)(a7 + 16) = 0,
                sub_2341073FC(v21, 4uLL, *(char **)a4, v17, a7),
                !*(_DWORD *)a7))
          {
            v18 = *(_QWORD *)(a5 + 8);
            if (!v18
              || (*(_QWORD *)a7 = 0,
                  *(_QWORD *)(a7 + 8) = 0,
                  *(_QWORD *)(a7 + 16) = 0,
                  sub_2341073FC(v21, 5uLL, *(char **)a5, v18, a7),
                  !*(_DWORD *)a7))
            {
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              sub_234107FB0(v21, v20, a7);
              if (!*(_DWORD *)a7)
              {
                *(_QWORD *)a7 = 0;
                *(_QWORD *)(a7 + 8) = 0;
                *(_QWORD *)(a7 + 16) = 0;
                sub_234106D88((uint64_t)v21, a7);
                if (!*(_DWORD *)a7)
                {
                  *(_QWORD *)a6 = sub_2341291A4((_QWORD *)a6, 0, v22);
                  *(_QWORD *)(a6 + 8) = v19;
                  if (v19 >= 0x385)
                  {
                    *(_DWORD *)a7 = 4;
                    *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                    v15 = 223;
                  }
                  else
                  {
                    *(_DWORD *)a7 = 0;
                    *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
                    v15 = 225;
                  }
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2341E0EB8(uint64_t a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v14;
  char i;
  unsigned int v16;
  _QWORD *v17;
  _OWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  _BYTE v25[16];
  unint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v25);
  v24 = 21;
  *a6 = 0;
  a6[1] = 0;
  *a5 = 0;
  a5[1] = 0;
  *a4 = 0;
  a4[1] = 0;
  sub_234104498((uint64_t)v25, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_234106010((uint64_t)v25, 21, 256, (_QWORD *)a7);
  if (!*(_DWORD *)a7)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    sub_23410570C((uint64_t)v25, &v24, a7);
    if (!*(_DWORD *)a7)
    {
      v14 = 0;
      v20 = 0;
      while (2)
      {
        for (i = BYTE4(v20); ; i = 1)
        {
          v16 = v14;
LABEL_6:
          sub_2341058CC((uint64_t)v25, &v21);
          v27 = v22;
          v28 = v23;
          if (v21)
          {
            if (v21 != 33)
            {
              *(_DWORD *)a7 = v21;
              *(_OWORD *)(a7 + 4) = v27;
              *(_DWORD *)(a7 + 20) = v28;
              return;
            }
LABEL_22:
            if ((v20 & HIDWORD(v20) & 1) != 0)
            {
              *(_DWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              v19 = 302;
            }
            else
            {
              *(_DWORD *)a7 = 61;
              *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              v19 = 300;
            }
            goto LABEL_28;
          }
          v14 = v26;
          if (v26 > 0xFF)
            goto LABEL_22;
          if ((i & 1) != 0)
            break;
          if ((_DWORD)v26 != 1)
          {
            *(_DWORD *)a7 = 43;
            *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
            v19 = 262;
            goto LABEL_28;
          }
LABEL_17:
          *(_QWORD *)a7 = 0;
          *(_QWORD *)(a7 + 8) = 0;
          *(_QWORD *)(a7 + 16) = 0;
          sub_234106600((uint64_t)v25, a2, (_QWORD *)a7);
          LODWORD(v20) = 1;
          if (*(_DWORD *)a7)
            return;
        }
        if (v16 < v26)
        {
          switch((int)v26)
          {
            case 1:
              goto LABEL_17;
            case 2:
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              sub_234106600((uint64_t)v25, a3, (_QWORD *)a7);
              HIDWORD(v20) = 1;
              if (!*(_DWORD *)a7)
                continue;
              return;
            case 3:
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              v17 = (_QWORD *)a7;
              v18 = a4;
              goto LABEL_14;
            case 4:
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              v17 = (_QWORD *)a7;
              v18 = a5;
              goto LABEL_14;
            case 5:
              *(_QWORD *)a7 = 0;
              *(_QWORD *)(a7 + 8) = 0;
              *(_QWORD *)(a7 + 16) = 0;
              v17 = (_QWORD *)a7;
              v18 = a6;
LABEL_14:
              sub_234104B68((uint64_t)v25, v18, v17);
              i = 1;
              v16 = v14;
              if (*(_DWORD *)a7)
                return;
              goto LABEL_6;
            default:
              *(_DWORD *)a7 = 35;
              *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
              v19 = 293;
              goto LABEL_28;
          }
        }
        break;
      }
      *(_DWORD *)a7 = 43;
      *(_QWORD *)(a7 + 8) = "src/credentials/DeviceAttestationConstructor.cpp";
      v19 = 268;
LABEL_28:
      *(_DWORD *)(a7 + 16) = v19;
    }
  }
}

uint64_t *sub_2341E11A0(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = result[2];
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 2;
    v5 = 4;
    do
    {
      v6 = *result;
      v7 = (unsigned __int16 *)(*result + v2);
      v8 = -1;
      v9 = v3;
      do
      {
        v11 = *v7;
        v7 += 12;
        v10 = v11;
        if (v8 >= v11)
          v8 = v10;
        ++v9;
      }
      while (v9 < v1);
      if (v3 >= v1)
        goto LABEL_23;
      v12 = (unsigned __int16 *)(v6 + v4);
      v13 = -1;
      v14 = v1;
      do
      {
        if (v8 == *(v12 - 1) && v13 >= *v12)
          v13 = *v12;
        v12 += 12;
        --v14;
      }
      while (v3 != v14);
      if (v3 >= v1)
      {
LABEL_23:
        v16 = -1;
      }
      else
      {
        v15 = (unsigned int *)(v6 + v5);
        v16 = -1;
        v17 = -1;
        v18 = v3;
        do
        {
          if (v8 == *((unsigned __int16 *)v15 - 2) && v13 == *((unsigned __int16 *)v15 - 1))
          {
            v19 = *v15;
            v20 = v17 > v19;
            if (v17 >= v19)
              v17 = *v15;
            if (v20)
              v16 = v18;
          }
          v15 += 6;
          ++v18;
        }
        while (v1 != v18);
      }
      if (v16 != v3)
      {
        v21 = (__int128 *)(v6 + 24 * v3);
        v22 = *((_QWORD *)v21 + 2);
        v23 = *v21;
        v24 = 3 * v16;
        v25 = (__int128 *)(v6 + 24 * v16);
        v26 = *((_QWORD *)v25 + 2);
        *v21 = *v25;
        *((_QWORD *)v21 + 2) = v26;
        v27 = *result + 8 * v24;
        *(_OWORD *)v27 = v23;
        *(_QWORD *)(v27 + 16) = v22;
        v1 = result[2];
      }
      ++v3;
      v2 += 24;
      v4 += 24;
      v5 += 24;
    }
    while (v3 < v1);
  }
  return result;
}

void sub_2341E12DC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2341E13CC(a2, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    sub_233C0BD1C(a1);
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 48);
    v6 = *(_OWORD *)(a2 + 64);
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_OWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 112);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 48) = v6;
    *(_WORD *)(a1 + 138) = *(_WORD *)(a2 + 120);
    *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 123);
    v9 = *(_QWORD *)(a2 + 24);
    if (!v9)
      goto LABEL_7;
    v10 = *(unsigned __int8 *)(a2 + 122);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v10)
      sub_2341E1444(a1, v9, (uint64_t)a3);
    else
      sub_2341E14D0(a1, v9, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
LABEL_7:
      *(_DWORD *)a3 = 0;
      a3[1] = "src/credentials/FabricTable.cpp";
      *((_DWORD *)a3 + 4) = 103;
    }
  }
}

uint64_t sub_2341E13CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (*(_QWORD *)(result + 32) && *(_BYTE *)(result + 16))
  {
    if ((unint64_t)(*(_QWORD *)(result + 8) - 1) >= 0xFFFFFFEFFFFFFFFFLL)
    {
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.h";
      v2 = 133;
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.h";
      v2 = 136;
    }
  }
  else
  {
    *(_DWORD *)a2 = 47;
    *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.h";
    v2 = 132;
  }
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

void sub_2341E1444(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (***v6)(_QWORD);
  int v7;
  int v8;

  if (a2)
  {
    if (!*(_BYTE *)(a1 + 140))
    {
      v6 = *(void (****)(_QWORD))(a1 + 144);
      if (v6)
      {
        (**v6)(*(_QWORD *)(a1 + 144));
        j__free(v6);
      }
    }
    v7 = 0;
    *(_BYTE *)(a1 + 140) = 1;
    *(_QWORD *)(a1 + 144) = a2;
    v8 = 274;
  }
  else
  {
    v8 = 265;
    v7 = 47;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

uint64_t sub_2341E14D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v7[104];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a3 + 16) = 243;
    return result;
  }
  v4 = result;
  v8 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 56))(a2, v7);
  if (!*(_DWORD *)a3)
  {
    if (*(_BYTE *)(v4 + 140))
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_BYTE *)(v4 + 140) = 0;
    }
    else
    {
      v6 = *(_QWORD **)(v4 + 144);
      if (v6)
      {
LABEL_9:
        (*(void (**)(_QWORD *, _BYTE *))(*v6 + 64))(v6, v7);
        return sub_23413A7A4(v7, 97);
      }
    }
    v5 = sub_234114774(0x260uLL);
    if (!v5)
    {
      *(_QWORD *)(v4 + 144) = 0;
      *(_DWORD *)a3 = 11;
      *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      *(_DWORD *)(a3 + 16) = 259;
      return sub_23413A7A4(v7, 97);
    }
    v6 = v5;
    bzero(v5 + 2, 0x250uLL);
    *v6 = &off_2505057E0;
    v6[1] = &off_250505A50;
    *(_QWORD *)(v4 + 144) = v6;
    goto LABEL_9;
  }
  return sub_23413A7A4(v7, 97);
}

void sub_2341E1620(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  const void *v8;
  size_t v9;

  sub_233C0BD1C(a1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 138) = *(_WORD *)(a2 + 138);
  *(_BYTE *)(a1 + 141) = *(_BYTE *)(a2 + 141);
  v8 = (const void *)sub_23400A580(a2);
  if (v7 >= 0x20)
    v9 = 32;
  else
    v9 = v7;
  memcpy((void *)(a1 + 104), v8, v9);
  *(_BYTE *)(a1 + 104 + v9) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 140) = *(_BYTE *)(a2 + 140);
  *(_QWORD *)(a2 + 144) = 0;
  *(_BYTE *)(a2 + 140) = 0;
  sub_233C0BD1C(a2);
}

void *sub_2341E16E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  size_t v5;
  void *result;

  v4 = a1 + 104;
  if (*(_QWORD *)(a2 + 8) >= 0x20uLL)
    v5 = 32;
  else
    v5 = *(_QWORD *)(a2 + 8);
  result = memcpy((void *)(a1 + 104), *(const void **)a2, v5);
  *(_BYTE *)(v4 + v5) = 0;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 214;
  return result;
}

char *sub_2341E174C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  size_t v7;
  unsigned __int16 v8;
  int v9;
  int v10;
  char v11[44];
  unsigned int v12;
  char *v13[4];
  _BYTE v14[44];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v11);
  sub_234106C70((uint64_t)v11, (uint64_t)v14, 0x2CuLL);
  v10 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(v11, 0x100uLL, 21, &v10, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(v11, 0, *(unsigned __int16 *)(a1 + 138), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = strlen((const char *)(a1 + 104));
      sub_233CAF22C(v13, a1 + 104, v7);
      result = sub_234107684(v11, 1uLL, v13[0], (unint64_t)v13[1], (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_234107FB0(v11, v10, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          v8 = v12;
          if (v12 >= 0x10000)
          {
            *(_DWORD *)a3 = 25;
            a3[1] = "src/credentials/FabricTable.cpp";
            v9 = 146;
          }
          else
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_2340F4B80("f/%x/m", (uint64_t)v13, *(unsigned __int8 *)(a1 + 137));
            result = (char *)(*(uint64_t (**)(uint64_t, char **, _BYTE *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v13, v14, v8);
            if (*(_DWORD *)a3)
              return result;
            *(_DWORD *)a3 = 0;
            a3[1] = "src/credentials/FabricTable.cpp";
            v9 = 153;
          }
          *((_DWORD *)a3 + 4) = v9;
        }
      }
    }
  }
  return result;
}

void sub_2341E18FC(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  int v16;
  int v17;
  unsigned __int16 v18;
  __int128 __src;
  uint64_t v20[9];
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 137) = a3;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_2341D83F0(a5, (_QWORD *)a1, (_QWORD *)(a1 + 8), a6);
  if (!*(_DWORD *)a6)
  {
    v21[0] = &unk_2342EDFA4;
    a6[1] = 0;
    a6[2] = 0;
    *a6 = 0;
    sub_2341D8344(a4, v21, a6);
    if (!*(_DWORD *)a6)
    {
      v10 = v21[0];
      *(_OWORD *)(a1 + 32) = *(_OWORD *)v21[0];
      v12 = *(_OWORD *)(v10 + 32);
      v11 = *(_OWORD *)(v10 + 48);
      v13 = *(_OWORD *)(v10 + 16);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(v10 + 64);
      *(_OWORD *)(a1 + 64) = v12;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v13;
      v20[0] = (uint64_t)&__src;
      v20[1] = 8;
      a6[1] = 0;
      a6[2] = 0;
      *a6 = 0;
      sub_234134770(a1 + 24, *(_QWORD *)(a1 + 8), v20, (uint64_t)a6);
      if (!*(_DWORD *)a6)
      {
        *(_QWORD *)(a1 + 16) = bswap64(__src);
        v18 = 44;
        a6[1] = 0;
        a6[2] = 0;
        *a6 = 0;
        sub_2340F4B80("f/%x/m", (uint64_t)v20, *(unsigned __int8 *)(a1 + 137));
        (*(void (**)(uint64_t, uint64_t *, _QWORD *, unsigned __int16 *))(*(_QWORD *)a2 + 16))(a2, v20, v21, &v18);
        if (!*(_DWORD *)a6)
        {
          sub_234104468((uint64_t)v20);
          sub_234104498((uint64_t)v20, (uint64_t)v21, v18);
          *a6 = 0;
          a6[1] = 0;
          a6[2] = 0;
          sub_234106010((uint64_t)v20, 21, 256, a6);
          if (!*(_DWORD *)a6)
          {
            v17 = 0;
            a6[1] = 0;
            a6[2] = 0;
            *a6 = 0;
            sub_23410570C((uint64_t)v20, &v17, (uint64_t)a6);
            if (!*(_DWORD *)a6)
            {
              *a6 = 0;
              a6[1] = 0;
              a6[2] = 0;
              sub_234105EE4((uint64_t)v20, 0, a6);
              if (!*(_DWORD *)a6)
              {
                *a6 = 0;
                a6[1] = 0;
                a6[2] = 0;
                sub_233D45404((uint64_t)v20, (_WORD *)(a1 + 138), a6);
                if (!*(_DWORD *)a6)
                {
                  *a6 = 0;
                  a6[1] = 0;
                  a6[2] = 0;
                  sub_234105EE4((uint64_t)v20, 1, a6);
                  if (!*(_DWORD *)a6)
                  {
                    __src = 0uLL;
                    a6[1] = 0;
                    a6[2] = 0;
                    *a6 = 0;
                    sub_234104C8C((uint64_t)v20, &__src, a6);
                    if (!*(_DWORD *)a6)
                    {
                      v14 = *((_QWORD *)&__src + 1);
                      if (*((_QWORD *)&__src + 1) >= 0x21uLL)
                      {
                        *(_DWORD *)a6 = 25;
                        a6[1] = "src/credentials/FabricTable.cpp";
                        v16 = 198;
                        goto LABEL_16;
                      }
                      v15 = (void *)(a1 + 104);
                      memcpy(v15, (const void *)__src, *((size_t *)&__src + 1));
                      *((_BYTE *)v15 + v14) = 0;
                      a6[1] = 0;
                      a6[2] = 0;
                      *a6 = 0;
                      sub_23410577C((uint64_t)v20, v17, (uint64_t)a6);
                      if (!*(_DWORD *)a6)
                      {
                        *a6 = 0;
                        a6[1] = 0;
                        a6[2] = 0;
                        sub_234105840((uint64_t)v20, (uint64_t)a6);
                        if (!*(_DWORD *)a6)
                        {
                          *(_DWORD *)a6 = 0;
                          a6[1] = "src/credentials/FabricTable.cpp";
                          v16 = 207;
LABEL_16:
                          *((_DWORD *)a6 + 4) = v16;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_2341E1BDC@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  NSObject *v6;
  int v7;
  NSObject *v8;
  char *v9;
  _BYTE buf[24];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2 - 1 >= 0xFE)
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 219;
LABEL_11:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  v4 = *(_QWORD *)(result + 2584);
  if (!v4)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 220;
    goto LABEL_11;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2340F4B80("f/%x/m", (uint64_t)buf, a2);
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 32))(v4, buf);
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 160)
    {
      v6 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Warning: metadata not found during delete of fabric 0x%x", buf, 8u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        return sub_2341147D0(0x11u, 1);
    }
    else
    {
      v8 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)a3;
        *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 16);
        v9 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v9;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Error deleting metadata for fabric fabric 0x%x: %s", buf, 0x12u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        *(_OWORD *)buf = *(_OWORD *)a3;
        *(_QWORD *)&buf[16] = *(_QWORD *)(a3 + 16);
        sub_2341083CC((const char **)buf, 1);
        return sub_2341147D0(0x11u, 1);
      }
    }
  }
  return result;
}

void sub_2341E1DF0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, unint64_t *a7@<X6>, _QWORD *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  char *v23;
  int v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  __int128 v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  const char *v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint8_t v36[16];
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v20 = sub_2341C4608();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    v31 = 2080;
    v32 = "ValidateIncomingNOCChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_QWORD *)buf = -1;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_2341D6834((uint64_t)buf);
  v33 |= 1u;
  v34 |= 1u;
  v35 = a5;
  v21 = sub_234117B80(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_DEFAULT, "Validating NOC chain", v36, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x11u, 2);
  v28 = 0uLL;
  v29 = 0;
  sub_2341E21D8(a1, a2, a3, (uint64_t)buf, a6, a7, a8, a10, (uint64_t)&v28, a11);
  if ((_DWORD)v28)
  {
    if ((_DWORD)v28 != 92)
    {
      LODWORD(v28) = 80;
      *((_QWORD *)&v28 + 1) = "src/credentials/FabricTable.cpp";
      LODWORD(v29) = 313;
    }
    v22 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)v36 = v28;
      v37 = v29;
      v23 = sub_2341083CC((const char **)v36, 1);
      *(_DWORD *)v36 = 136315138;
      *(_QWORD *)&v36[4] = v23;
      _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "Failed NOC chain validation: %s", v36, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)v36 = v28;
      v37 = v29;
      sub_2341083CC((const char **)v36, 1);
      sub_2341147D0(0x11u, 1);
    }
  }
  *(_OWORD *)a9 = v28;
  *(_QWORD *)(a9 + 16) = v29;
  if (!*(_DWORD *)a9)
  {
    if (!a4 || *a7 == a4)
    {
      v26 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_DEFAULT, "NOC chain validation successful", v36, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x11u, 2);
      v25 = 0;
      v24 = 328;
    }
    else
    {
      v24 = 324;
      v25 = 80;
    }
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a9 + 16) = v24;
  }
  v27 = sub_2341C4608();
  if (os_signpost_enabled(v27))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    v31 = 2080;
    v32 = "ValidateIncomingNOCChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_2341E21D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, unint64_t *a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  uint64_t v36[2];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  _BYTE v42[24];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  unint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  sub_2341D5420((uint64_t)&v40);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2341D5490((uint64_t)&v40, 3u, a9);
  if (*(_DWORD *)a9)
    return sub_2341D542C((uint64_t)&v40);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2341D5670((uint64_t)&v40, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), 2, (_QWORD *)a9);
  if (*(_DWORD *)a9)
    return sub_2341D542C((uint64_t)&v40);
  v20 = a2[1];
  if (v20)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    sub_2341D5670((uint64_t)&v40, *a2, v20, 1, (_QWORD *)a9);
    if (*(_DWORD *)a9)
      return sub_2341D542C((uint64_t)&v40);
  }
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2341D5670((uint64_t)&v40, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 1, (_QWORD *)a9);
  if (*(_DWORD *)a9)
    return sub_2341D542C((uint64_t)&v40);
  v21 = v41;
  if (v41)
  {
    v21 = v40 + 424 * (v41 - 1);
    v22 = v21 + 16;
  }
  else
  {
    v22 = 16;
  }
  v39 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  sub_2341D6168((uint64_t)&v40, v22, v21 + 336, a4, &v39, a9);
  if (*(_DWORD *)a9)
    return sub_2341D542C((uint64_t)&v40);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2341D8164(v40 + 424 * (v41 - 1), a7, a6, a9);
  if (*(_DWORD *)a9)
    return sub_2341D542C((uint64_t)&v40);
  v38 = 0;
  if (a2[1])
  {
    sub_2341D84F8(v40 + 424, &v38, (uint64_t)v42);
    v23 = *(_DWORD *)v42;
    v48 = *(_OWORD *)&v42[4];
    v49 = *(_DWORD *)&v42[20];
    if (*(_DWORD *)v42 != 216)
    {
      if (*(_DWORD *)v42)
        goto LABEL_19;
      if (v38 != *a6)
      {
        *(_DWORD *)a9 = 198;
        *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
        v35 = 401;
        goto LABEL_27;
      }
    }
  }
  v37 = 0;
  sub_2341D84F8(v40, &v37, (uint64_t)v42);
  v23 = *(_DWORD *)v42;
  v48 = *(_OWORD *)&v42[4];
  v49 = *(_DWORD *)&v42[20];
  if (*(_DWORD *)v42)
  {
    if (*(_DWORD *)v42 == 216)
    {
      v24 = *a6;
      goto LABEL_21;
    }
LABEL_19:
    *(_DWORD *)a9 = v23;
    *(_OWORD *)(a9 + 4) = v48;
    *(_DWORD *)(a9 + 20) = v49;
    return sub_2341D542C((uint64_t)&v40);
  }
  v24 = v37;
  if (v37 != *a6)
  {
    *(_DWORD *)a9 = 89;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v35 = 414;
LABEL_27:
    *(_DWORD *)(a9 + 16) = v35;
    return sub_2341D542C((uint64_t)&v40);
  }
LABEL_21:
  v36[0] = (uint64_t)&v47;
  v36[1] = 8;
  *(_QWORD *)v42 = &off_250505A50;
  v25 = *(_QWORD *)(v40 + 360);
  *(_OWORD *)&v42[8] = *(_OWORD *)v25;
  v26 = *(_OWORD *)(v25 + 16);
  v27 = *(_OWORD *)(v25 + 32);
  v28 = *(_OWORD *)(v25 + 48);
  v46 = *(_BYTE *)(v25 + 64);
  v44 = v27;
  v45 = v28;
  v43 = v26;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  *(_QWORD *)a9 = 0;
  sub_234134770((uint64_t)v42, v24, v36, a9);
  if (!*(_DWORD *)a9)
  {
    *a5 = bswap64(v47);
    if (a10)
    {
      v29 = *(_OWORD *)&v42[8];
      *(_OWORD *)(a10 + 24) = v43;
      v30 = v45;
      *(_OWORD *)(a10 + 40) = v44;
      *(_OWORD *)(a10 + 56) = v30;
      *(_BYTE *)(a10 + 72) = v46;
      *(_OWORD *)(a10 + 8) = v29;
    }
    v31 = *(_QWORD *)(v40 + 424 * (v41 - 1) + 360);
    *(_OWORD *)(a8 + 8) = *(_OWORD *)v31;
    v33 = *(_OWORD *)(v31 + 32);
    v32 = *(_OWORD *)(v31 + 48);
    v34 = *(_BYTE *)(v31 + 64);
    *(_OWORD *)(a8 + 24) = *(_OWORD *)(v31 + 16);
    *(_BYTE *)(a8 + 72) = v34;
    *(_OWORD *)(a8 + 56) = v32;
    *(_OWORD *)(a8 + 40) = v33;
    *(_DWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v35 = 442;
    goto LABEL_27;
  }
  return sub_2341D542C((uint64_t)&v40);
}

void sub_2341E2578(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v13 = 136315394;
    v14 = "Fabric";
    v15 = 2080;
    v16 = "SignWithOpKeypair";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
  v11 = *(_QWORD *)(a1 + 144);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, a2, a3, a4);
  }
  else
  {
    *(_DWORD *)a5 = 16;
    *(_QWORD *)(a5 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a5 + 16) = 334;
  }
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    v13 = 136315394;
    v14 = "Fabric";
    v15 = 2080;
    v16 = "SignWithOpKeypair";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
}

void sub_2341E2710(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v13 = 136315394;
    v14 = "Fabric";
    v15 = 2080;
    v16 = "FetchRootPubKey";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
  if (*(_BYTE *)(a1 + 137) && (unint64_t)(*(_QWORD *)a1 - 1) <= 0xFFFFFFEFFFFFFFFELL)
  {
    v7 = 0;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 32);
    v8 = *(_OWORD *)(a1 + 48);
    v9 = *(_OWORD *)(a1 + 64);
    v10 = *(_OWORD *)(a1 + 80);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 96);
    *(_OWORD *)(a2 + 56) = v10;
    *(_OWORD *)(a2 + 40) = v9;
    *(_OWORD *)(a2 + 24) = v8;
    v11 = 344;
  }
  else
  {
    v11 = 342;
    v7 = 16;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v11;
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    v13 = 136315394;
    v14 = "Fabric";
    v15 = 2080;
    v16 = "FetchRootPubKey";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
}

void sub_2341E28C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, unint64_t *a7@<X6>, _QWORD *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[2];
  uint8_t *v23;
  uint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v20 = sub_2341C4608();
  if (os_signpost_enabled(v20))
  {
    *(_DWORD *)buf = 136315394;
    v26 = "Fabric";
    v27 = 2080;
    v28 = "VerifyCredentials";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_2341B1F64("src/credentials/FabricTable.cpp", 353);
  v23 = buf;
  v24 = 400;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_2341E2AB4(a1, a2, (uint64_t)&v23, (uint64_t)a9);
  if (!*(_DWORD *)a9)
  {
    sub_233BF7114(v22, (uint64_t)v23, v24);
    sub_2341E21D8(a3, a4, (uint64_t)v22, a5, a6, a7, a8, a10, (uint64_t)a9, a11);
  }
  v21 = sub_2341C4608();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 136315394;
    v26 = "Fabric";
    v27 = 2080;
    v28 = "VerifyCredentials";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341E2AB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchRootCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  v9 = *(_QWORD *)(a1 + 2600);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, 0, a3);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 571;
  }
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchRootCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

uint64_t *sub_2341E2C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2341E2C48(a1, a2, a3, 0);
}

uint64_t *sub_2341E2C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD v14[6];
  _QWORD v15[11];

  v15[10] = *MEMORY[0x24BDAC8D0];
  v15[0] = &off_250505A50;
  if (*(_BYTE *)(a1 + 2569)
    && (unint64_t)(*(_QWORD *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0)
  {
    v8 = (uint64_t *)(a1 + 2432);
    sub_2341E2710(a1 + 2432, (uint64_t)v15, (uint64_t)v14);
    v9 = a4;
    if (a4)
    {
      if (!v14[0])
        goto LABEL_8;
    }
    else
    {
      v9 = *v8;
      if (!v14[0])
      {
LABEL_8:
        if (sub_233D50ED4(a2, (uint64_t)v15) && *(_QWORD *)(a1 + 2440) == a3 && v9 == *v8)
          return v8;
      }
    }
  }
  v10 = 0;
  while (1)
  {
    v11 = (uint64_t *)(a1 + v10);
    v12 = a4;
    if (!a4)
      v12 = *v11;
    if (*((_BYTE *)v11 + 137))
    {
      if ((unint64_t)(*v11 - 1) <= 0xFFFFFFEFFFFFFFFELL)
      {
        sub_2341E2710(a1 + v10, (uint64_t)v15, (uint64_t)v14);
        if (!v14[0] && sub_233D50ED4(a2, (uint64_t)v15) && *(_QWORD *)(a1 + v10 + 8) == a3 && v12 == *v11)
          break;
      }
    }
    v10 += 152;
    if (v10 == 2432)
      return 0;
  }
  return (uint64_t *)(a1 + v10);
}

uint64_t sub_2341E2DEC(uint64_t a1, int a2)
{
  uint64_t i;

  if (*(_BYTE *)(a1 + 2569)
    && (unint64_t)(*(_QWORD *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(unsigned __int8 *)(a1 + 2569) == a2)
  {
    return a1 + 2432;
  }
  for (i = 0; i != 2432; i += 152)
  {
    if (*(_BYTE *)(a1 + i + 137))
    {
      if (*(unsigned __int8 *)(a1 + i + 137) == a2
        && (unint64_t)(*(_QWORD *)(a1 + i) - 1) < 0xFFFFFFEFFFFFFFFFLL)
      {
        return a1 + i;
      }
    }
  }
  return 0;
}

uint64_t sub_2341E2E70(uint64_t a1, int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (*(_BYTE *)(a1 + 2569)
    && (unint64_t)(*(_QWORD *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(unsigned __int8 *)(a1 + 2569) == a2)
  {
    return a1 + 2432;
  }
  v3 = 0;
  while (1)
  {
    if (*(_BYTE *)(a1 + v3 + 137))
    {
      if (*(unsigned __int8 *)(a1 + v3 + 137) == a2
        && (unint64_t)(*(_QWORD *)(a1 + v3) - 1) < 0xFFFFFFEFFFFFFFFFLL)
      {
        break;
      }
    }
    v3 += 152;
    if (v3 == 2432)
      return 0;
  }
  return a1 + v3;
}

uint64_t sub_2341E2EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 2569)
    && (unint64_t)(*(_QWORD *)(a1 + 2432) - 1) <= 0xFFFFFFEFFFFFFFFELL
    && (~*(unsigned __int16 *)(a1 + 2644) & 5) == 0
    && *(_QWORD *)(a1 + 2448) == a2)
  {
    return a1 + 2432;
  }
  v3 = 0;
  while (1)
  {
    if (*(_BYTE *)(a1 + v3 + 137))
    {
      if ((unint64_t)(*(_QWORD *)(a1 + v3) - 1) <= 0xFFFFFFEFFFFFFFFELL)
      {
        v2 = a1 + v3;
        if (*(_QWORD *)(a1 + v3 + 16) == a2)
          break;
      }
    }
    v3 += 152;
    if (v3 == 2432)
      return 0;
  }
  return v2;
}

void sub_2341E2F8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  __int16 v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "FetchPendingNonFabricAssociatedRootCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  if (*(_QWORD *)(a1 + 2600))
  {
    v7 = *(_WORD *)(a1 + 2644);
    if ((v7 & 2) != 0)
    {
      if ((v7 & 8) == 0)
      {
        sub_2341E2AB4(a1, *(unsigned __int8 *)(a1 + 2616), a2, a3);
        goto LABEL_11;
      }
      *(_DWORD *)a3 = 216;
      *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      v8 = 588;
    }
    else
    {
      *(_DWORD *)a3 = 216;
      *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      v8 = 581;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v8 = 578;
  }
  *(_DWORD *)(a3 + 16) = v8;
LABEL_11:
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "FetchPendingNonFabricAssociatedRootCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_2341E3150(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _BYTE v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)v12 = 136315394;
    *(_QWORD *)&v12[4] = "Fabric";
    *(_WORD *)&v12[12] = 2080;
    *(_QWORD *)&v12[14] = "FetchICACert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", v12, 0x16u);
  }
  v9 = *(_QWORD *)(a1 + 2600);
  if (v9)
  {
    memset(v12, 0, sizeof(v12));
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v12, v9, a2, 1, a3);
    if (*(_DWORD *)v12 != 216
      || !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2600) + 32))(*(_QWORD *)(a1 + 2600), a2, 2))
    {
      *(_OWORD *)a4 = *(_OWORD *)v12;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)&v12[16];
      goto LABEL_10;
    }
    sub_233BF7588(a3, 0);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v10 = 606;
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v10 = 597;
  }
  *(_DWORD *)(a4 + 16) = v10;
LABEL_10:
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)v12 = 136315394;
    *(_QWORD *)&v12[4] = "Fabric";
    *(_WORD *)&v12[12] = 2080;
    *(_QWORD *)&v12[14] = "FetchICACert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", v12, 0x16u);
  }
}

void sub_2341E3340(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchNOCCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  v9 = *(_QWORD *)(a1 + 2600);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, 2, a3);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 617;
  }
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchNOCCert";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_2341E34CC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchRootPubkey";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  v9 = sub_2341E2E70(a1, a2);
  if (v9)
  {
    sub_2341E2710(v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = 625;
  }
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    v12 = "Fabric";
    v13 = 2080;
    v14 = "FetchRootPubkey";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_2341E3650(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD v6[2];
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = &v9;
  v8 = 400;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_2341E3340(a1, a2, (uint64_t)&v7, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_233BF7114(v6, (uint64_t)v7, v8);
    sub_2341D8570((uint64_t)v6, a3, a4);
    if (!*(_DWORD *)a4)
    {
      *(_DWORD *)a4 = 0;
      a4[1] = "src/credentials/FabricTable.cpp";
      *((_DWORD *)a4 + 4) = 635;
    }
  }
}

uint64_t sub_2341E3718@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 2584);
  if (v4)
  {
    if (!a2)
      sub_23425E4A4(result);
    v5 = *(unsigned __int8 *)(a2 + 137);
    if ((v5 - 1) > 0xFD)
    {
      v8 = 644;
      v7 = 172;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = (uint64_t)sub_2341E174C(a2, v4, a3);
      if (*(_DWORD *)a3)
        return result;
      v6 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v5;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Metadata for Fabric 0x%x persisted to storage.", buf, 8u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        result = sub_2341147D0(0x11u, 2);
      v7 = 0;
      v8 = 651;
    }
  }
  else
  {
    v8 = 640;
    v7 = 3;
  }
  *(_DWORD *)a3 = v7;
  a3[1] = "src/credentials/FabricTable.cpp";
  *((_DWORD *)a3 + 4) = v8;
  return result;
}

void sub_2341E385C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _BYTE buf[26];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 2584))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v8 = 656;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 137) && (unint64_t)(*(_QWORD *)a2 - 1) <= 0xFFFFFFEFFFFFFFFELL)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v8 = 657;
LABEL_14:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  v25 = &v37;
  v26 = 400;
  v23 = &v36;
  v24 = 400;
  v21 = 0uLL;
  v22 = 0;
  sub_2341E3340(a1, a3, (uint64_t)&v25, (uint64_t)&v21);
  if (!(_DWORD)v21)
  {
    sub_2341E2AB4(a1, a3, (uint64_t)&v23, (uint64_t)buf);
    v21 = *(_OWORD *)buf;
    v22 = *(_QWORD *)&buf[16];
    if (!*(_DWORD *)buf)
    {
      v9 = *(_QWORD *)(a1 + 2584);
      sub_233BF7114(v20, (uint64_t)v23, v24);
      sub_233BF7114(v19, (uint64_t)v25, v26);
      sub_2341E18FC(a2, v9, a3, (uint64_t)v20, (uint64_t)v19, buf);
      v21 = *(_OWORD *)buf;
      v22 = *(_QWORD *)&buf[16];
      if (!*(_DWORD *)buf)
      {
        v12 = sub_234117B80(0x11u, "FabricProvisioning");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *(unsigned __int8 *)(a2 + 137);
          v15 = *(_QWORD *)(a2 + 8);
          v14 = *(_QWORD *)(a2 + 16);
          v16 = *(_QWORD *)a2;
          v17 = HIDWORD(*(_QWORD *)a2);
          v18 = *(unsigned __int16 *)(a2 + 138);
          *(_DWORD *)buf = 67110912;
          *(_DWORD *)&buf[4] = v13;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = HIDWORD(v14);
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v14;
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = HIDWORD(v15);
          v28 = 1024;
          v29 = v15;
          v30 = 1024;
          v31 = v17;
          v32 = 1024;
          v33 = v16;
          v34 = 1024;
          v35 = v18;
          _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Fabric index 0x%x was retrieved from storage. Compressed FabricId 0x%08X%08X, FabricId 0x%08X%08X, NodeId 0x%08X%08X, VendorId 0x%04X", buf, 0x32u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(0x11u, 2);
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
        v8 = 692;
        goto LABEL_14;
      }
    }
  }
  v10 = sub_234117B80(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = v21;
    *(_QWORD *)&buf[16] = v22;
    v11 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to load Fabric (0x%x): %s", buf, 0x12u);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = v21;
    *(_QWORD *)&buf[16] = v22;
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0x11u, 1);
  }
  sub_233C0BD1C(a2);
  *(_OWORD *)a4 = v21;
  *(_QWORD *)(a4 + 16) = v22;
}

uint64_t sub_2341E3BCC@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, __int128 **a4@<X4>, _BYTE *a5@<X5>, uint64_t a6@<X8>)
{
  unsigned __int8 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[6];
  char v28;
  uint64_t v29;
  _QWORD v30[75];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a5)
  {
    *(_DWORD *)a6 = 47;
    *(_QWORD *)(a6 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a6 + 16) = 698;
    return result;
  }
  v10 = (unsigned __int8 *)result;
  v30[0] = &off_2505057E0;
  v30[1] = &off_250505A50;
  v31 = 0;
  v29 = 0;
  v11 = a4[1];
  if (v11)
  {
    if (v11 != (__int128 *)97)
    {
      *(_DWORD *)a6 = 47;
      *(_QWORD *)(a6 + 8) = "src/credentials/FabricTable.cpp";
      *(_DWORD *)(a6 + 16) = 708;
      goto LABEL_14;
    }
    v12 = *a4;
    v13 = **a4;
    v14 = (*a4)[2];
    v27[1] = (*a4)[1];
    v27[2] = v14;
    v27[0] = v13;
    v15 = v12[3];
    v16 = v12[4];
    v17 = v12[5];
    v28 = *((_BYTE *)v12 + 96);
    v27[4] = v16;
    v27[5] = v17;
    v27[3] = v15;
    v29 = 97;
    v18 = v30;
    sub_23413AB80((uint64_t)v30, (uint64_t)v27, (uint64_t)&v24);
    v19 = v24;
    if ((_DWORD)v24)
      goto LABEL_10;
  }
  else
  {
    v18 = 0;
  }
  sub_2341E3DDC(v10, (uint64_t)&v24);
  v19 = v24;
  if ((_DWORD)v24
    || (sub_2341E7640((uint64_t)v10, a3, a2, 65521, (uint64_t)v18, 0, 0, a5, (uint64_t)&v24), v19 = v24, (_DWORD)v24))
  {
LABEL_10:
    v23 = v19;
    v20 = v25;
    v21 = v26;
    goto LABEL_11;
  }
  sub_2341E3EE0(v10, (uint64_t)&v24);
  HIDWORD(v22) = HIDWORD(v24);
  v20 = v25;
  v21 = v26;
  if (!(_DWORD)v24)
  {
    LODWORD(v22) = 0;
    goto LABEL_12;
  }
  v23 = v24;
LABEL_11:
  sub_2341E4A68((uint64_t)v10);
  v22 = v23;
LABEL_12:
  *(_QWORD *)a6 = v22;
  *(_QWORD *)(a6 + 8) = v20;
  *(_QWORD *)(a6 + 16) = v21;
LABEL_14:
  sub_23413A7A4(v27, 97);
  return sub_23413AE44((uint64_t)v30);
}

unsigned __int8 *sub_2341E3DDC@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;

  if (!*((_QWORD *)result + 325))
  {
    v4 = 1593;
    goto LABEL_5;
  }
  v3 = result;
  if ((*((_WORD *)result + 1322) & 0xE) != 0)
  {
    v4 = 1598;
LABEL_5:
    v5 = 3;
LABEL_6:
    *(_DWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = v4;
    return result;
  }
  result = sub_2341E6D34(result);
  if (!v3[2640])
  {
    v4 = 1610;
    v5 = 11;
    goto LABEL_6;
  }
  result = sub_233CB65A8(v3 + 2640);
  v6 = *result;
  if ((v6 - 1) > 0xFDu)
  {
    v4 = 1613;
    v5 = 113;
    goto LABEL_6;
  }
  if (v3[2616] && v3[2616] != v6)
  {
    v4 = 1614;
    goto LABEL_5;
  }
  v3[2616] = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 325) + 40))(*((_QWORD *)v3 + 325));
  if (!*(_DWORD *)a2)
  {
    v5 = 0;
    *((_WORD *)v3 + 1322) |= 3u;
    v4 = 1619;
    goto LABEL_6;
  }
  return result;
}

_QWORD *sub_2341E3EE0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  char v11;
  _BOOL4 v13;
  _BOOL4 v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  __int128 *v27;
  __int128 v28;
  NSObject *v29;
  char *v30;
  __int128 *v31;
  __int128 v32;
  NSObject *v33;
  char *v34;
  NSObject *v35;
  char *v36;
  __int128 *v37;
  __int128 v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint8_t buf[16];
  __int128 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!result[323] || (v3 = (uint64_t)result, !result[325]))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = 1802;
    return result;
  }
  v4 = *((unsigned __int16 *)result + 1322);
  v5 = *((unsigned __int8 *)result + 2616);
  v6 = (v4 & 1) != 0 && (v5 + 1) >= 2u;
  v7 = !v6;
  v8 = v7 ^ 1 | v4;
  if (v6 && (v4 & 0xC) != 0)
  {
    v8 = 0;
    if ((v4 & 6) != 2 && (v4 & 8) != 0)
    {
      v9 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = (v4 & 8) >> 3;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = (v4 & 4) >> 2;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v57) = (v4 & 2) >> 1;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Found inconsistent interlocks during commit %u/%u/%u!", buf, 0x14u);
      }
      v8 = 1;
      if (sub_234114844(1u))
        sub_2341147D0(0x11u, 1);
    }
  }
  v10 = sub_2341E2DEC(v3, v5);
  if ((~v4 & 5) == 0
    && (v8 & 1) == 0
    && (!*(_BYTE *)(v3 + 2569)
     || (unint64_t)(*(_QWORD *)(v3 + 2432) - 1) > 0xFFFFFFEFFFFFFFFELL
     || *(unsigned __int8 *)(v3 + 2569) != (_DWORD)v5
     || !v10))
  {
    v16 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Missing pending fabric on update during commit!", buf, 2u);
    }
    if (sub_234114844(1u))
      goto LABEL_110;
    goto LABEL_111;
  }
  if (!(((~v4 & 9) != 0) | v8 & 1))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 2600) + 32))(*(_QWORD *)(v3 + 2600), v5, 0);
    if ((*(_WORD *)(v3 + 2644) & 2) == 0 || (v11 & 1) == 0)
    {
      v39 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v39, OS_LOG_TYPE_ERROR, "Missing trusted root for fabric add during commit!", buf, 2u);
      }
      if (sub_234114844(1u))
        goto LABEL_110;
      goto LABEL_111;
    }
  }
  v13 = (v4 & 1) == 0 || (v4 & 0xC) == 0;
  if (((v13 | v8) & 1) == 0 && (sub_2341E7038(v3, v5) & 1) == 0)
  {
    v40 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v40, OS_LOG_TYPE_ERROR, "Could not find an operational key during commit!", buf, 2u);
    }
    if (sub_234114844(1u))
LABEL_110:
      sub_2341147D0(0x11u, 1);
LABEL_111:
    *(_OWORD *)a2 = xmmword_250514F30;
    *(_QWORD *)(a2 + 16) = 1861;
    if ((((v4 & 0xE) == 2) & v4) == 0)
      goto LABEL_116;
    goto LABEL_112;
  }
  v15 = (v4 & 1) == 0 || (v4 & 0xE) == 2;
  if (((v15 | v8) & 1) != 0)
  {
    *(_OWORD *)a2 = xmmword_250514F30;
    *(_QWORD *)(a2 + 16) = 1861;
    if ((((v4 & 0xE) == 2) & v4) == 0)
    {
      if ((v8 & 1) == 0)
      {
LABEL_121:
        *(_WORD *)(v3 + 2644) = 0;
        *(_BYTE *)(v3 + 2616) = 0;
        sub_233C0BD1C(v3 + 2432);
        (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 2600) + 80))(*(_QWORD *)(v3 + 2600));
        result = *(_QWORD **)(v3 + 2592);
        if (result)
          return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
        return result;
      }
LABEL_116:
      v44 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "Failed to commit: internally inconsistent state!", buf, 2u);
      }
      v42 = 1872;
      v43 = 172;
      if (!sub_234114844(1u))
        goto LABEL_120;
      goto LABEL_119;
    }
LABEL_112:
    v41 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_ERROR, "Failed to commit: tried to commit with only a new trusted root cert. No data committed.", buf, 2u);
    }
    v42 = 1867;
    v43 = 3;
    if (!sub_234114844(1u))
      goto LABEL_120;
LABEL_119:
    sub_2341147D0(0x11u, 1);
LABEL_120:
    *(_DWORD *)a2 = v43;
    *(_QWORD *)(a2 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a2 + 16) = v42;
    goto LABEL_121;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  buf[0] = v5;
  buf[1] = (v4 & 8) >> 3;
  sub_2341E6E5C(v3, buf, (_QWORD *)a2);
  if (*(_DWORD *)a2)
  {
    v17 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Failed to store commit marker, may be inconsistent if reboot happens during fail-safe!", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x11u, 1);
  }
  *(_WORD *)(v3 + 2644) &= ~1u;
  if ((v4 & 4) != 0)
  {
    v18 = sub_2341E2DEC(v3, v5);
    if (!v18 || v18 == v3 + 2432)
      sub_23425E5CC(v18);
    sub_2341E1620(v18, v3 + 2432);
  }
  v19 = sub_2341E2DEC(v3, v5);
  if (!v19)
    sub_23425E538(0);
  v54 = 0uLL;
  v55 = 0;
  sub_2341E3718(v3, v19, &v54);
  if ((_DWORD)v54)
  {
    v20 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v54;
      *(_QWORD *)&v57 = v55;
      v21 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Failed to commit pending fabric metadata: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v54;
      *(_QWORD *)&v57 = v55;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x11u, 1);
    }
  }
  if (*(_DWORD *)a2)
    v22 = (__int128 *)a2;
  else
    v22 = &v54;
  v23 = *v22;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v22 + 2);
  *(_OWORD *)a2 = v23;
  v52 = xmmword_250514F48;
  v53 = 1935;
  v24 = *(_QWORD *)(v3 + 2592);
  if (v24)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v5))
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 2592) + 16))(*(_QWORD *)(v3 + 2592)))
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v3 + 2592) + 48))(&v52, *(_QWORD *)(v3 + 2592), v5);
        if ((_DWORD)v52)
        {
          v25 = sub_234117B80(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v52;
            *(_QWORD *)&v57 = v53;
            v26 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_ERROR, "Failed to commit pending operational keypair %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v52;
            *(_QWORD *)&v57 = v53;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0x11u, 1);
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 2592) + 80))(*(_QWORD *)(v3 + 2592));
        }
      }
    }
  }
  v27 = &v52;
  if (*(_DWORD *)a2)
    v27 = (__int128 *)a2;
  v28 = *v27;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v27 + 2);
  *(_OWORD *)a2 = v28;
  v50 = 0uLL;
  v51 = 0;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v3 + 2600) + 64))(&v50, *(_QWORD *)(v3 + 2600), v5);
  if ((_DWORD)v50)
  {
    v29 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v50;
      *(_QWORD *)&v57 = v51;
      v30 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "Failed to commit pending operational certificates %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v50;
      *(_QWORD *)&v57 = v51;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x11u, 1);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 2600) + 80))(*(_QWORD *)(v3 + 2600));
  }
  if (*(_DWORD *)a2)
    v31 = (__int128 *)a2;
  else
    v31 = &v50;
  v32 = *v31;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v31 + 2);
  *(_OWORD *)a2 = v32;
  v48 = 0uLL;
  v49 = 0;
  sub_2341F2150(v3 + 2624, &v48);
  if ((_DWORD)v48)
  {
    v33 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v48;
      *(_QWORD *)&v57 = v49;
      v34 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl(&dword_233BF3000, v33, OS_LOG_TYPE_ERROR, "Failed to commit Last Known Good Time: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v48;
      *(_QWORD *)&v57 = v49;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x11u, 1);
    }
  }
  v46 = xmmword_250514F60;
  v47 = 1988;
  if ((*(_BYTE *)(v3 + 2644) & 8) != 0)
  {
    sub_2341E6CA4(v3);
    sub_2341E5AFC(v3, &v46);
    if ((_DWORD)v46)
    {
      v35 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v46;
        *(_QWORD *)&v57 = v47;
        v36 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v36;
        _os_log_impl(&dword_233BF3000, v35, OS_LOG_TYPE_ERROR, "Failed to commit pending fabric indices: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v46;
        *(_QWORD *)&v57 = v47;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x11u, 1);
      }
    }
  }
  v37 = &v46;
  if (*(_DWORD *)a2)
    v37 = (__int128 *)a2;
  v38 = *v37;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v37 + 2);
  *(_OWORD *)a2 = v38;
  *(_WORD *)(v3 + 2644) = 0;
  *(_BYTE *)(v3 + 2616) = 0;
  sub_233C0BD1C(v3 + 2432);
  if (*(_DWORD *)a2)
  {
    sub_2341E5630(v3, v5, (uint64_t)buf);
    sub_2341E4A68(v3);
  }
  else
  {
    sub_2341E4D60(v3, v5, (uint64_t)buf);
  }
  v45 = *(_QWORD *)(v3 + 2584);
  *(_OWORD *)buf = *(_OWORD *)"g/fs/c";
  v57 = unk_2342EE0BF;
  v58 = 0;
  return (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v45 + 32))(&v54, v45, buf);
}

void sub_2341E4A68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = sub_2341C4608();
  if (os_signpost_enabled(v2))
  {
    v6 = 136315394;
    v7 = "Fabric";
    v8 = 2080;
    v9 = "RevertPendingFabricData";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v6, 0x16u);
  }
  sub_2341E7A54(a1);
  v3 = *(_QWORD *)(a1 + 2592);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
  v4 = *(_QWORD *)(a1 + 2600);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
  sub_2341F22D8(a1 + 2624, &v6);
  *(_WORD *)(a1 + 2644) = 0;
  *(_BYTE *)(a1 + 2616) = 0;
  v5 = sub_2341C4608();
  if (os_signpost_enabled(v5))
  {
    v6 = 136315394;
    v7 = "Fabric";
    v8 = 2080;
    v9 = "RevertPendingFabricData";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v6, 0x16u);
  }
}

void sub_2341E4BE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "NotifyFabricUpdated";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  v7 = *(_QWORD **)(a1 + 2608);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)v7[1];
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 40))(v7, a1, a2);
      v7 = v8;
    }
    while (v8);
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 770;
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "NotifyFabricUpdated";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_2341E4D60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "NotifyFabricCommitted";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
  v7 = *(_QWORD **)(a1 + 2608);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)v7[1];
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 32))(v7, a1, a2);
      v7 = v8;
    }
    while (v8);
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 786;
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    v10 = 136315394;
    v11 = "Fabric";
    v12 = 2080;
    v13 = "NotifyFabricCommitted";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v10, 0x16u);
  }
}

void sub_2341E4EE0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, __int16 a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  uint64_t v29;
  size_t v30;
  NSObject *v31;
  _BOOL4 v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  char *v43;
  const void *v44;
  unint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51[2];
  _QWORD v52[2];
  uint64_t v53[2];
  void *v54;
  unsigned int v55;
  uint8_t buf[16];
  _QWORD v57[2];
  _QWORD v58[10];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t (**v64)();
  __int16 v65;
  __int16 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = &off_250505A50;
  v66 = 0;
  if (a3)
  {
    v14 = 0;
    while (1)
    {
      v15 = a1 + v14;
      if (!*(_BYTE *)(a1 + v14 + 137) || (unint64_t)(*(_QWORD *)v15 - 1) >= 0xFFFFFFEFFFFFFFFFLL)
        break;
      v14 += 152;
      if (v14 == 2432)
      {
        *(_DWORD *)a8 = 11;
        *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
        v16 = 815;
        goto LABEL_20;
      }
    }
    v46 = a3;
    v47 = a7;
    v45 = 0;
    v20 = 0;
    v19 = 0;
    v65 = a6;
    v61 = a2;
  }
  else
  {
    v17 = sub_2341E2E70(a1, a2);
    if (!v17)
    {
      *(_DWORD *)a8 = 172;
      *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
      v16 = 824;
      goto LABEL_20;
    }
    v18 = v17;
    v46 = 0;
    v47 = a7;
    v15 = a1 + 2432;
    sub_233C0BD1C(a1 + 2432);
    v65 = *(_WORD *)(v18 + 138);
    v61 = a2;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = sub_23400A580(v18);
    v45 = v21;
  }
  v54 = &unk_250514F88;
  v55 = 0;
  v58[0] = &off_250505A50;
  v22 = sub_234114774(0x190uLL);
  if (!v22)
  {
    *(_DWORD *)a8 = 11;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    v16 = 846;
    goto LABEL_20;
  }
  v23 = v22;
  v24 = sub_234114774(0x190uLL);
  if (!v24)
  {
    *(_DWORD *)a8 = 11;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a8 + 16) = 847;
    j__free(v23);
    return;
  }
  v25 = v24;
  v44 = (const void *)v20;
  v26 = sub_234114774(0x190uLL);
  if (v26)
  {
    v27 = v26;
    sub_233CAF22C(buf, (uint64_t)v23, 400);
    sub_233CAF22C(&v48, (uint64_t)v25, 400);
    sub_233CAF22C(v53, (uint64_t)v27, 400);
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    sub_2341E3340(a1, a2, (uint64_t)buf, a8);
    if (*(_DWORD *)a8)
      goto LABEL_16;
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    sub_2341E3150(a1, a2, (uint64_t)&v48, a8);
    if (*(_DWORD *)a8
      || (*(_QWORD *)a8 = 0,
          *(_QWORD *)(a8 + 8) = 0,
          *(_QWORD *)(a8 + 16) = 0,
          sub_2341E2AB4(a1, a2, (uint64_t)v53, a8),
          *(_DWORD *)a8))
    {
LABEL_16:
      v28 = 1;
    }
    else
    {
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_QWORD *)(a8 + 16) = 0;
      sub_233BF7114(v52, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
      sub_233BF7114(v51, v48, *((uint64_t *)&v48 + 1));
      sub_233BF7114(v50, v53[0], v53[1]);
      sub_2341E1DF0((uint64_t)v52, v51, (uint64_t)v50, v19, (uint64_t)&v54, &v59, &v63, &v60, a8, (uint64_t)v58, (uint64_t)&v64);
      v28 = *(_DWORD *)a8 != 0;
    }
    j__free(v27);
  }
  else
  {
    *(_DWORD *)a8 = 11;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a8 + 16) = 848;
    v28 = 1;
  }
  j__free(v25);
  j__free(v23);
  if (v28)
    return;
  if (a4)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
    if (sub_233D50ED4(v29, (uint64_t)v58))
    {
      v62 = a4;
      LOBYTE(v66) = a5;
      goto LABEL_28;
    }
    *(_DWORD *)a8 = 197;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    v16 = 868;
LABEL_20:
    *(_DWORD *)(a8 + 16) = v16;
    return;
  }
  v38 = *(_QWORD *)(a1 + 2592);
  if (!v38)
  {
    *(_DWORD *)a8 = 3;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    v16 = 887;
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    (*(void (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 2592) + 40))(*(_QWORD *)(a1 + 2592), a2, v58);
    if (*(_DWORD *)a8)
      return;
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2592) + 24))(*(_QWORD *)(a1 + 2592), a2) & 1) == 0)
  {
    *(_DWORD *)a8 = 16;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    v16 = 882;
    goto LABEL_20;
  }
LABEL_28:
  HIBYTE(v66) = v47 == 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)a8 = 0;
  sub_2341E12DC(v15, (uint64_t)&v59, (_QWORD *)a8);
  if (!*(_DWORD *)a8)
  {
    if (v45 >= 0x20)
      v30 = 32;
    else
      v30 = v45;
    memcpy((void *)(v15 + 104), v44, v30);
    *(_BYTE *)(v15 + 104 + v30) = 0;
    v31 = sub_234117B80(0x11u, "FabricProvisioning");
    v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    if (v46)
    {
      if (v32)
      {
        v33 = *(unsigned __int8 *)(v15 + 137);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v33;
        _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "Added new fabric at index: 0x%x", buf, 8u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x11u, 2);
      v34 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(_QWORD *)(v15 + 16);
        v36 = *(_QWORD *)v15;
        v37 = HIDWORD(*(_QWORD *)v15);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = HIDWORD(v35);
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v35;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v57[0]) = v37;
        WORD2(v57[0]) = 1024;
        *(_DWORD *)((char *)v57 + 6) = v36;
        _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_DEFAULT, "Assigned compressed fabric ID: 0x%08X%08X, node ID: 0x%08X%08X", buf, 0x1Au);
      }
      if (!sub_234114844(2u))
        goto LABEL_54;
    }
    else
    {
      if (v32)
      {
        v39 = *(unsigned __int8 *)(v15 + 137);
        v40 = *(_QWORD *)v15;
        v41 = HIDWORD(*(_QWORD *)v15);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v41;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v57[0]) = v40;
        _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "Updated fabric at index: 0x%x, Node ID: 0x%08X%08X", buf, 0x14u);
      }
      if (!sub_234114844(2u))
        goto LABEL_54;
    }
    sub_2341147D0(0x11u, 2);
LABEL_54:
    v48 = 0uLL;
    v49 = 0;
    sub_2341F2014(a1 + 2624, v55, (uint64_t)&v48);
    if ((_DWORD)v48)
    {
      v42 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v48;
        v57[0] = v49;
        v43 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v43;
        _os_log_impl(&dword_233BF3000, v42, OS_LOG_TYPE_ERROR, "Failed to update pending Last Known Good Time: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v48;
        v57[0] = v49;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x11u, 1);
      }
    }
    if (v46)
      ++*(_BYTE *)(a1 + 2642);
    *(_DWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = "src/credentials/FabricTable.cpp";
    v16 = 930;
    goto LABEL_20;
  }
}

void sub_2341E5630(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint8_t v28[8];
  const char *v29;
  uint64_t v30;
  uint8_t buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Delete";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(_QWORD *)(a1 + 2584))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v13 = 936;
LABEL_36:
    *(_DWORD *)(a3 + 16) = v13;
    goto LABEL_37;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v13 = 937;
    goto LABEL_36;
  }
  v9 = *(_QWORD **)(a1 + 2608);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)v9[1];
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v9 + 16))(v9, a1, a2);
      v9 = v10;
    }
    while (v10);
  }
  v11 = sub_2341E2DEC(a1, a2);
  v12 = v11;
  if (v11 == a1 + 2432)
  {
    sub_2341E4A68(a1);
    v12 = sub_2341E2DEC(a1, a2);
    if (!v12)
      goto LABEL_15;
  }
  else if (!v11)
  {
    goto LABEL_15;
  }
  if (*(_BYTE *)(v12 + 137))
  {
    v14 = (unint64_t)(*(_QWORD *)v12 - 1) < 0xFFFFFFEFFFFFFFFFLL;
    goto LABEL_16;
  }
LABEL_15:
  v14 = 0;
LABEL_16:
  memset(buf, 0, sizeof(buf));
  sub_2341E1BDC(a1, a2, (uint64_t)buf);
  v15 = *(_QWORD *)(a1 + 2592);
  if (!v15)
  {
    v3 = 963;
    goto LABEL_20;
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 72))(v28, v15, a2);
  if (*(_DWORD *)v28 == 113)
  {
    LODWORD(v3) = 971;
LABEL_20:
    v27 = 0;
    v26 = "src/credentials/FabricTable.cpp";
    goto LABEL_22;
  }
  v27 = *(_QWORD *)v28;
  v26 = v29;
  v3 = v30;
LABEL_22:
  v16 = *(_QWORD *)(a1 + 2600);
  v17 = "src/credentials/FabricTable.cpp";
  if (!v16)
  {
    v4 = 975;
    v18 = 0;
    if (v14)
      goto LABEL_27;
    goto LABEL_35;
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 72))(v28, v16, a2);
  v18 = *(_QWORD *)v28;
  if (*(_DWORD *)v28 != 113)
  {
    v17 = v29;
    v4 = v30;
    if (v14)
      goto LABEL_27;
LABEL_35:
    *(_DWORD *)a3 = 216;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v13 = 991;
    goto LABEL_36;
  }
  LODWORD(v4) = 983;
  v18 = 0;
  if (!v14)
    goto LABEL_35;
LABEL_27:
  v25 = v18;
  sub_233C0BD1C(v12);
  if (!*(_BYTE *)(a1 + 2640))
  {
    *(_BYTE *)(a1 + 2640) = 1;
    *(_BYTE *)(a1 + 2641) = a2;
  }
  sub_2341E5AFC(a1, v28);
  if (*(_BYTE *)(a1 + 2642))
  {
    --*(_BYTE *)(a1 + 2642);
    v19 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v28 = 67109120;
      *(_DWORD *)&v28[4] = a2;
      _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_DEFAULT, "Fabric (0x%x) deleted.", v28, 8u);
    }
    if (sub_234114844(2u))
    {
      v20 = 2;
LABEL_44:
      sub_2341147D0(0x11u, v20);
    }
  }
  else
  {
    v22 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "Trying to delete a fabric, but the current fabric count is already 0", v28, 2u);
    }
    if (sub_234114844(1u))
    {
      v20 = 1;
      goto LABEL_44;
    }
  }
  v23 = *(_QWORD **)(a1 + 2608);
  if (v23)
  {
    do
    {
      v24 = (_QWORD *)v23[1];
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v23 + 24))(v23, a1, a2);
      v23 = v24;
    }
    while (v24);
  }
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = v27;
    *(_QWORD *)(a3 + 8) = v26;
    *(_QWORD *)(a3 + 16) = v3;
    if (!(_DWORD)v27)
    {
      *(_QWORD *)a3 = v25;
      *(_QWORD *)(a3 + 8) = v17;
      *(_QWORD *)(a3 + 16) = v4;
      if (!(_DWORD)v25)
      {
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
        v13 = 1040;
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  v21 = sub_2341C4608();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "Delete";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

char *sub_2341E5AFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *result;
  _BYTE *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16[44];
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _BYTE v21[44];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v16);
  sub_234106C70((uint64_t)v16, (uint64_t)v21, 0x2CuLL);
  v15 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = sub_234107E40(v16, 0x100uLL, 21, &v15, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    if (*(_BYTE *)(a1 + 2640))
    {
      v5 = sub_233C27DCC((_BYTE *)(a1 + 2640));
      sub_2341071D8(v16, 0, *v5, (uint64_t)&v18);
    }
    else
    {
      sub_2341079D4(v16, 0, (uint64_t)&v18);
    }
    v14 = 0;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    result = sub_234107E40(v16, 1uLL, 22, &v14, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      sub_233C0BD8C((_QWORD *)a1, (uint64_t)&v18);
      if ((_QWORD)v19 != *((_QWORD *)&v19 + 1))
      {
        if (v19 != __PAIR128__(16, 16))
          goto LABEL_15;
        v6 = v18;
LABEL_9:
        if (v6 != a1)
        {
LABEL_15:
          v11 = sub_233C06A04((uint64_t *)&v18);
          sub_2341071D8(v16, 0x100uLL, *(unsigned __int8 *)(v11 + 137), (uint64_t)&v13);
          v12 = v19;
          v6 = v18;
          while (1)
          {
            if (v12 < *((_QWORD *)&v19 + 1))
              *(_QWORD *)&v19 = ++v12;
            if (v12 == *((_QWORD *)&v19 + 1))
              break;
            if (*(_BYTE *)(v18 + 152 * v12 + 137)
              && (unint64_t)(*(_QWORD *)(v18 + 152 * v12) - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (*((_QWORD *)&v19 + 1) == 16 && v12 == 16)
                goto LABEL_9;
              goto LABEL_15;
            }
          }
        }
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      result = sub_234107FB0(v16, v14, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        result = sub_234107FB0(v16, v15, (uint64_t)a2);
        if (!*(_DWORD *)a2)
        {
          v7 = v17;
          if (HIWORD(v17))
          {
            v10 = 1330;
            v9 = 25;
          }
          else
          {
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            v8 = *(_QWORD *)(a1 + 2584);
            v18 = *(_OWORD *)"g/fidx";
            v19 = unk_2342EE09D;
            v20 = 0;
            result = (char *)(*(uint64_t (**)(uint64_t, __int128 *, _BYTE *, _QWORD))(*(_QWORD *)v8 + 24))(v8, &v18, v21, v7);
            if (*(_DWORD *)a2)
              return result;
            v9 = 0;
            v10 = 1335;
          }
          *(_DWORD *)a2 = v9;
          a2[1] = "src/credentials/FabricTable.cpp";
          *((_DWORD *)a2 + 4) = v10;
        }
      }
    }
  }
  return result;
}

void sub_2341E5D5C(_QWORD *a1)
{
  BOOL v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[24];
  uint64_t v7[2];
  uint64_t v8;
  unint64_t v9;

  sub_2341E4A68((uint64_t)a1);
  sub_233C0BD8C(a1, (uint64_t)v7);
  if (v8 != v9)
  {
    v2 = v9 == 16 && v8 == 16;
    if (!v2 || v7[0] != (_QWORD)a1)
    {
LABEL_9:
      v4 = sub_233C06A04(v7);
      sub_2341E5630((uint64_t)a1, *(unsigned __int8 *)(v4 + 137), (uint64_t)v6);
      v5 = v8;
      while (1)
      {
        if (v5 < v9)
          v8 = ++v5;
        if (v5 == v9)
          break;
        if (*(_BYTE *)(v7[0] + 152 * v5 + 137)
          && (unint64_t)(*(_QWORD *)(v7[0] + 152 * v5) - 1) < 0xFFFFFFEFFFFFFFFFLL)
        {
          if (v9 != 16 || v5 != 16 || (_QWORD *)v7[0] != a1)
            goto LABEL_9;
          return;
        }
      }
    }
  }
}

void sub_2341E5E30(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint8_t buf[16];
  __int128 v19;
  char v20;
  uint8_t v21[44];
  uint8_t v22[16];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!*a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v10 = 1057;
LABEL_32:
    *(_DWORD *)(a3 + 16) = v10;
    return;
  }
  if (!a2[2])
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
    v10 = 1058;
    goto LABEL_32;
  }
  *(_QWORD *)(a1 + 2584) = *a2;
  *(_QWORD *)(a1 + 2592) = a2[1];
  *(_QWORD *)(a1 + 2600) = a2[2];
  v5 = sub_234117B80(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "Initializing FabricTable from persistent storage", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x11u, 3);
  v6 = 0;
  *(_BYTE *)(a1 + 2642) = 0;
  do
  {
    sub_233C0BD1C(a1 + v6);
    v6 += 152;
  }
  while (v6 != 2432);
  *(_WORD *)(a1 + 2640) = 257;
  sub_2341F1BA8(a1 + 2624, *(_QWORD *)(a1 + 2584), (uint64_t)buf);
  v17 = 44;
  v15 = 0uLL;
  v16 = 0;
  v7 = *(_QWORD *)(a1 + 2584);
  *(_OWORD *)buf = *(_OWORD *)"g/fidx";
  v19 = unk_2342EE09D;
  v20 = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint8_t *, uint8_t *, unsigned __int16 *))(*(_QWORD *)v7 + 16))(&v15, v7, buf, v21, &v17);
  if ((_DWORD)v15 == 160)
    goto LABEL_10;
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = v16;
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)buf);
    sub_234104498((uint64_t)buf, (uint64_t)v21, v17);
    sub_2341E6294((unsigned __int8 *)a1, (uint64_t)buf, (uint64_t)v22);
    v15 = *(_OWORD *)v22;
    v16 = v23;
    if (*(_DWORD *)v22)
    {
      v11 = sub_234117B80(0x11u, "FabricProvisioning");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v22 = v15;
        v23 = v16;
        v12 = sub_2341083CC((const char **)v22, 1);
        *(_DWORD *)v22 = 136315138;
        *(_QWORD *)&v22[4] = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Error loading fabric table: %s, we are in a bad state!", v22, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v22 = v15;
        v23 = v16;
        sub_2341083CC((const char **)v22, 1);
        sub_2341147D0(0x11u, 1);
      }
    }
    *(_OWORD *)a3 = v15;
    *(_QWORD *)(a3 + 16) = v16;
    if (!*(_DWORD *)a3)
    {
LABEL_10:
      *(_WORD *)v22 = 0;
      sub_2341E6550(a1, v22, buf);
      v15 = *(_OWORD *)buf;
      v16 = v19;
      if (*(_DWORD *)buf != 160)
      {
        if (*(_DWORD *)buf)
        {
          v13 = sub_234117B80(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v15;
            *(_QWORD *)&v19 = v16;
            v14 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v14;
            _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Error loading Table commit marker: %s, hope for the best!", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v15;
            *(_QWORD *)&v19 = v16;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(0x11u, 1);
          }
        }
        else
        {
          v8 = sub_234117B80(0x11u, "FabricProvisioning");
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v22[0];
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v22[1];
            _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Found a FabricTable aborted commit for index 0x%x (isAddition: %d), removing!", buf, 0xEu);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0x11u, 1);
          v9 = v22[0];
          *(_BYTE *)(a1 + 2617) = v22[0];
          sub_2341E5630(a1, v9, (uint64_t)buf);
        }
      }
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
      v10 = 1126;
      goto LABEL_32;
    }
  }
}

void sub_2341E6294(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_234106010(a2, 21, 256, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    v13 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_23410570C(a2, &v13, a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_234105EE4(a2, 0, (_QWORD *)a3);
      if (!*(_DWORD *)a3)
      {
        if (sub_23410462C(a2) == 20)
        {
          a1[2640] = 0;
        }
        else
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *((_WORD *)a1 + 1320) = 1;
          sub_23410492C(a2, a1 + 2641, a3);
          if (*(_DWORD *)a3)
            return;
        }
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_234106010(a2, 22, 1, (_QWORD *)a3);
        if (!*(_DWORD *)a3)
        {
          v12 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_23410570C(a2, &v12, a3);
          if (!*(_DWORD *)a3)
          {
            while (1)
            {
              sub_2341058CC(a2, &v9);
              v14 = v10;
              v15 = v11;
              if (v9)
                break;
              v6 = a1[2642];
              if (v6 >= 0x10)
              {
                *(_DWORD *)a3 = 11;
                *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
                v7 = 1379;
                goto LABEL_22;
              }
              v8 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              *(_QWORD *)a3 = 0;
              sub_23410492C(a2, &v8, a3);
              if (*(_DWORD *)a3)
                return;
              sub_2341E385C((uint64_t)a1, (uint64_t)&a1[152 * v6], v8, (uint64_t)&v9);
              v14 = v10;
              v15 = v11;
              if (!v9)
                ++a1[2642];
            }
            if (v9 != 33)
            {
              *(_DWORD *)a3 = v9;
              *(_OWORD *)(a3 + 4) = v14;
              *(_DWORD *)(a3 + 20) = v15;
              return;
            }
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            sub_23410577C(a2, v12, a3);
            if (!*(_DWORD *)a3)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              sub_23410577C(a2, v13, a3);
              if (!*(_DWORD *)a3)
              {
                *(_QWORD *)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
                *(_QWORD *)(a3 + 16) = 0;
                sub_234105840(a2, a3);
                if (!*(_DWORD *)a3)
                {
                  sub_2341E6D34(a1);
                  *(_DWORD *)a3 = 0;
                  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
                  v7 = 1411;
LABEL_22:
                  *(_DWORD *)(a3 + 16) = v7;
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2341E6550(uint64_t a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  unsigned __int16 v7;
  _OWORD v8[2];
  char v9;
  _BYTE v10[36];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = 36;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v5 = *(_QWORD *)(a1 + 2584);
  v8[0] = *(_OWORD *)"g/fs/c";
  v8[1] = unk_2342EE0BF;
  v9 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, _BYTE *, unsigned __int16 *))(*(_QWORD *)v5 + 16))(a3, v5, v8, v10, &v7);
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)v8);
    sub_234104498((uint64_t)v8, (uint64_t)v10, v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234106010((uint64_t)v8, 21, 256, a3);
    if (!*(_DWORD *)a3)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C((uint64_t)v8, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4((uint64_t)v8, 0, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_23410492C((uint64_t)v8, a2, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_234105EE4((uint64_t)v8, 1, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341046D0((uint64_t)v8, a2 + 1, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *(_DWORD *)a3 = 0;
                a3[1] = "src/credentials/FabricTable.cpp";
                *((_DWORD *)a3 + 4) = 1479;
              }
            }
          }
        }
      }
    }
  }
}

void sub_2341E66E8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0x11u, "FabricProvisioning");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Forgetting fabric 0x%x", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x11u, 2);
  v5 = sub_2341E2DEC(a1, a2);
  if (v5)
  {
    v6 = v5;
    sub_2341E4A68(a1);
    sub_233C0BD1C(v6);
  }
}

void sub_2341E67E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint8_t v6[16];

  if (*(_QWORD *)(a1 + 2584))
  {
    v2 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Shutting down FabricTable", v6, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x11u, 2);
    v3 = *(_QWORD *)(a1 + 2608);
    if (v3)
    {
      do
      {
        v4 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0;
        v3 = v4;
      }
      while (v4);
    }
    sub_2341E4A68(a1);
    for (i = 0; i != 2432; i += 152)
      sub_233C0BD1C(a1 + i);
    *(_QWORD *)(a1 + 2584) = 0;
  }
}

uint64_t sub_2341E68B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 2617);
  *(_BYTE *)(a1 + 2617) = 0;
  return v1;
}

uint64_t sub_2341E68C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 2608);
    if (v3)
    {
      v4 = *(_QWORD *)(result + 2608);
      while (v4 != a2)
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          goto LABEL_6;
      }
      v5 = 0;
      v6 = 1182;
    }
    else
    {
LABEL_6:
      v5 = 0;
      *(_QWORD *)(a2 + 8) = v3;
      *(_QWORD *)(result + 2608) = a2;
      v6 = 1187;
    }
  }
  else
  {
    v6 = 1177;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341E6924(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = *(_QWORD *)(result + 2608);
    if (v2 == a2)
    {
      *(_QWORD *)(result + 2608) = *(_QWORD *)(a2 + 8);
    }
    else
    {
      while (v2)
      {
        v3 = v2;
        v2 = *(_QWORD *)(v2 + 8);
        if (v2 == a2)
        {
          *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = 0;
          return result;
        }
      }
    }
  }
  return result;
}

double sub_2341E6964@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  NSObject *v16;
  char *v17;
  _QWORD v19[2];
  unsigned int v20;
  int v21;
  __int128 v22;
  int v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t buf[4];
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;

  v5 = 0;
  v6 = 0;
  v31 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v7 = a1 + v5;
    v8 = *(unsigned __int8 *)(a1 + v5 + 137);
    if (*(_BYTE *)(a1 + v5 + 137))
    {
      if ((unint64_t)(*(_QWORD *)v7 - 1) <= 0xFFFFFFEFFFFFFFFELL)
        break;
    }
LABEL_11:
    v5 += 152;
    if (v5 == 2432)
    {
LABEL_24:
      sub_2341F1E04(a1 + 2624, a2, v6, (uint64_t)buf);
      v9 = *(_DWORD *)buf;
      v29 = v27;
      v30 = v28;
LABEL_25:
      if (v9)
      {
LABEL_26:
        v16 = sub_234117B80(0x11u, "FabricProvisioning");
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v9;
          v27 = v29;
          v28 = v30;
          v17 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&v27 = v17;
          _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to update Known Good Time: %s", buf, 0xCu);
        }
        if (sub_234114844(1u))
        {
          *(_DWORD *)buf = v9;
          v27 = v29;
          v28 = v30;
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(0x11u, 1);
        }
      }
      *a3 = v9;
      result = *(double *)&v29;
      *(_OWORD *)(a3 + 1) = v29;
      a3[5] = v30;
      return result;
    }
  }
  v24 = buf;
  v25 = 400;
  sub_2341E2AB4(a1, v8, (uint64_t)&v24, (uint64_t)&v21);
  v9 = v21;
  v29 = v22;
  v30 = v23;
  if (v21)
    goto LABEL_26;
  sub_233BF7114(v19, (uint64_t)v24, v25);
  sub_2341D8858((uint64_t)v19, &v20, &v21);
  v9 = v21;
  v29 = v22;
  v30 = v23;
  if (v21)
    goto LABEL_26;
  if (v6 <= v20)
    v6 = v20;
  v24 = buf;
  v25 = 400;
  sub_2341E3150(a1, *(unsigned __int8 *)(v7 + 137), (uint64_t)&v24, (uint64_t)&v21);
  v9 = v21;
  result = *(double *)&v22;
  v29 = v22;
  v30 = v23;
  if (v21)
  {
LABEL_9:
    v11 = 8;
    goto LABEL_10;
  }
  v12 = v25;
  if (!v25)
  {
LABEL_18:
    v24 = buf;
    v25 = 400;
    sub_2341E3340(a1, *(unsigned __int8 *)(v7 + 137), (uint64_t)&v24, (uint64_t)&v21);
    v9 = v21;
    result = *(double *)&v22;
    v29 = v22;
    v30 = v23;
    if (!v21)
    {
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      sub_233BF7114(&v21, (uint64_t)v24, v25);
      sub_2341D8858((uint64_t)&v21, v19, a3);
      v13 = *a3;
      v14 = v19[0];
      if (v6 > LODWORD(v19[0]))
        v14 = v6;
      v15 = v13 == 0;
      v11 = v13 != 0;
      if (v15)
        v6 = v14;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  sub_233BF7114(&v21, (uint64_t)v24, v12);
  sub_2341D8858((uint64_t)&v21, v19, a3);
  if (!*a3)
  {
    if (v6 <= LODWORD(v19[0]))
      v6 = v19[0];
    goto LABEL_18;
  }
  v11 = 1;
LABEL_10:
  switch(v11)
  {
    case 0:
    case 3:
      goto LABEL_11;
    case 2:
      goto LABEL_24;
    case 8:
      goto LABEL_25;
    default:
      return result;
  }
  return result;
}

unsigned __int8 *sub_2341E6CA4(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 *result;

  v2 = (_BYTE *)(a1 + 2640);
  v3 = *sub_233CB65A8((_BYTE *)(a1 + 2640));
  if (v3 == 254)
    v4 = 1;
  else
    v4 = v3 + 1;
  while (1)
  {
    result = sub_233CB65A8(v2);
    if (*result == v4)
    {
      *v2 = 0;
      return result;
    }
    result = (unsigned __int8 *)sub_2341E2E70(a1, v4);
    if (!result)
      break;
    if (v4 == 254)
      v4 = 1;
    else
      ++v4;
  }
  *(_BYTE *)(a1 + 2640) = 1;
  *(_BYTE *)(a1 + 2641) = v4;
  return result;
}

unsigned __int8 *sub_2341E6D34(unsigned __int8 *result)
{
  uint64_t v1;

  if (!result[2640])
  {
    v1 = (uint64_t)result;
    if (result[2642] <= 0xFDu)
    {
      *((_WORD *)result + 1320) = 257;
      result = (unsigned __int8 *)sub_2341E2E70((uint64_t)result, 1);
      if (result)
        return sub_2341E6CA4(v1);
    }
  }
  return result;
}

uint64_t sub_2341E6D8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 2592);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
  v3 = sub_234114774(0x260uLL);
  v4 = v3;
  if (v3)
  {
    bzero(v3 + 2, 0x250uLL);
    *v4 = &off_2505057E0;
    v4[1] = &off_250505A50;
  }
  return (uint64_t)v4;
}

void sub_2341E6DFC(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 2592);
  if (v3)
  {
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  else if (a2)
  {
    (**a2)(a2);
    j__free(a2);
  }
}

char *sub_2341E6E5C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  uint64_t v7;
  int v8;
  char v9[44];
  unsigned int v10;
  _OWORD v11[2];
  char v12;
  _BYTE v13[36];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v9);
  sub_234106C70((uint64_t)v9, (uint64_t)v13, 0x24uLL);
  v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(v9, 0x100uLL, 21, &v8, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_2341071D8(v9, 0, *a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234106F04(v9, 1uLL, a2[1], (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_234107FB0(v9, v8, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          if (v10 >= 0x10000)
          {
            *(_DWORD *)a3 = 25;
            a3[1] = "src/credentials/FabricTable.cpp";
            *((_DWORD *)a3 + 4) = 1449;
          }
          else
          {
            v7 = *(_QWORD *)(a1 + 2584);
            v11[0] = *(_OWORD *)"g/fs/c";
            v11[1] = unk_2342EE0BF;
            v12 = 0;
            return (char *)(*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, _QWORD))(*(_QWORD *)v7 + 24))(v7, v11, v13, (unsigned __int16)v10);
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2341E6FC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];
  _OWORD v4[2];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 2584);
  v4[0] = *(_OWORD *)"g/fs/c";
  v4[1] = unk_2342EE0BF;
  v5 = 0;
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _OWORD *))(*(_QWORD *)v1 + 32))(v3, v1, v4);
}

uint64_t sub_2341E7038(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_2341E2E70(a1, a2);
  if (result)
  {
    if (*(_QWORD *)(result + 144))
    {
      return 1;
    }
    else
    {
      result = *(_QWORD *)(a1 + 2592);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
    }
  }
  return result;
}

void sub_2341E708C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v12 = sub_2341E2E70(a1, a2);
  if (v12)
  {
    if (*(_QWORD *)(v12 + 144))
    {
      sub_2341E2578(v12, a3, a4, a5, a6);
      return;
    }
    v14 = *(_QWORD *)(a1 + 2592);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v14 + 96))(v14, a2, v15, a5);
      return;
    }
    *(_DWORD *)a6 = 16;
    *(_QWORD *)(a6 + 8) = "src/credentials/FabricTable.cpp";
    v13 = 1520;
  }
  else
  {
    *(_DWORD *)a6 = 16;
    *(_QWORD *)(a6 + 8) = "src/credentials/FabricTable.cpp";
    v13 = 1508;
  }
  *(_DWORD *)(a6 + 16) = v13;
}

uint64_t sub_2341E7170(uint64_t a1, BOOL *a2)
{
  unsigned int v2;

  v2 = *(unsigned __int16 *)(a1 + 2644);
  if ((v2 & 0x10) != 0)
    *a2 = (v2 & 0x20) != 0;
  return (v2 >> 4) & 1;
}

uint64_t sub_2341E7188(uint64_t a1, int a2)
{
  BOOL v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 2616))
    v2 = *(unsigned __int8 *)(a1 + 2616) == a2;
  else
    v2 = 1;
  v3 = v2;
  if (v2)
    *(_BYTE *)(a1 + 2616) = a2;
  return v3;
}

unsigned __int8 *sub_2341E71A8@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  __int16 v7;
  int v8;
  int v9;
  int v10;

  if (!*((_QWORD *)result + 324))
  {
    v8 = 1552;
LABEL_9:
    v9 = 3;
LABEL_10:
    *(_DWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    *(_DWORD *)(a4 + 16) = v8;
    return result;
  }
  v5 = result;
  if ((*((_WORD *)result + 1322) & 1) != 0)
  {
    v8 = 1556;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a3 + 8) < 0xFFuLL)
  {
    v8 = 1557;
    v9 = 25;
    goto LABEL_10;
  }
  result = sub_2341E6D34(result);
  if (*a2)
  {
    if ((*((_WORD *)v5 + 1322) & 2) != 0)
    {
      v8 = 1565;
      goto LABEL_9;
    }
    result = sub_233CB65A8(a2);
    v7 = *((_WORD *)v5 + 1322) | 0x20;
  }
  else
  {
    if (!v5[2640])
    {
      v8 = 1580;
      v9 = 11;
      goto LABEL_10;
    }
    result = sub_233CB65A8(v5 + 2640);
    v7 = *((_WORD *)v5 + 1322) & 0xFFDF;
  }
  v10 = *result;
  *((_WORD *)v5 + 1322) = v7;
  if ((v10 - 1) > 0xFDu)
  {
    v8 = 1583;
    v9 = 113;
    goto LABEL_10;
  }
  if (v5[2616] && v5[2616] != v10)
  {
    v8 = 1584;
    goto LABEL_9;
  }
  v5[2616] = v10;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v5 + 324) + 32))(*((_QWORD *)v5 + 324));
  if (!*(_DWORD *)a4)
  {
    v9 = 0;
    *((_WORD *)v5 + 1322) |= 0x10u;
    v8 = 1588;
    goto LABEL_10;
  }
  return result;
}

void sub_2341E72FC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v10;
  __int128 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[2];
  _OWORD *v25;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  const char *v29;
  uint64_t (**v30)();
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    v28 = 2080;
    v29 = "FindExistingFabricByNocChaining";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v26 = 0;
  *(_QWORD *)buf = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341D83F0(a3, buf, &v26, a5);
  if (!*(_DWORD *)a5)
  {
    v30 = &off_250505A50;
    v20 = buf;
    v21 = 400;
    v25 = &unk_2342EDFA4;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_2341E2AB4((uint64_t)a1, a2, (uint64_t)&v20, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_233BF7114(v24, (uint64_t)v20, v21);
      sub_2341D8344((uint64_t)v24, &v25, a5);
      if (!*(_DWORD *)a5)
      {
        v31 = *v25;
        v12 = v25[2];
        v11 = v25[3];
        v13 = *((_BYTE *)v25 + 64);
        v32 = v25[1];
        v35 = v13;
        v34 = v11;
        v33 = v12;
        sub_233C0BD8C(a1, (uint64_t)&v20);
        if (v22 == v23)
          goto LABEL_11;
        if (v23 == 16 && v22 == 16)
        {
          v14 = (uint64_t)v20;
LABEL_10:
          if ((_QWORD *)v14 == a1)
          {
LABEL_11:
            *a4 = 0;
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/FabricTable.cpp";
            v15 = 1664;
LABEL_12:
            *((_DWORD *)a5 + 4) = v15;
            goto LABEL_13;
          }
        }
LABEL_16:
        v17 = sub_233C06A04((uint64_t *)&v20);
        if (*(_QWORD *)(v17 + 8) != v26)
        {
LABEL_19:
          v19 = v22;
          v14 = (uint64_t)v20;
          while (1)
          {
            if (v19 < v23)
              v22 = ++v19;
            if (v19 == v23)
              goto LABEL_11;
            if (v20[152 * v19 + 137] && (unint64_t)(*(_QWORD *)&v20[152 * v19] - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (v23 == 16 && v19 == 16)
                goto LABEL_10;
              goto LABEL_16;
            }
          }
        }
        v18 = v17;
        *(_QWORD *)buf = &off_250505A50;
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        sub_2341E34CC((uint64_t)a1, *(unsigned __int8 *)(v17 + 137), (uint64_t)buf, (uint64_t)a5);
        if (!*(_DWORD *)a5)
        {
          if (sub_233D50ED4((uint64_t)buf, (uint64_t)&v30))
          {
            *a4 = *(_BYTE *)(v18 + 137);
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/FabricTable.cpp";
            v15 = 1657;
            goto LABEL_12;
          }
          goto LABEL_19;
        }
      }
    }
  }
LABEL_13:
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    v28 = 2080;
    v29 = "FindExistingFabricByNocChaining";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341E7640(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, _BYTE *a8@<X7>, uint64_t a9@<X8>)
{
  NSObject *v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  _BYTE v24[24];
  uint8_t buf[24];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18 = sub_2341C4608();
  if (os_signpost_enabled(v18))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "AddNewPendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v18, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(_QWORD *)(a1 + 2600))
  {
    *(_DWORD *)a9 = 3;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1672;
    goto LABEL_20;
  }
  if (!a8)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1673;
    goto LABEL_20;
  }
  v19 = *(_WORD *)(a1 + 2644);
  if ((v19 & 2) == 0)
  {
    *(_DWORD *)a9 = 3;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1677;
LABEL_20:
    *(_DWORD *)(a9 + 16) = v20;
    goto LABEL_21;
  }
  if ((v19 & 4) != 0)
  {
    *(_DWORD *)a9 = 3;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1679;
    goto LABEL_20;
  }
  sub_2341E6D34((unsigned __int8 *)a1);
  if (!*(_BYTE *)(a1 + 2640))
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1690;
    goto LABEL_20;
  }
  v21 = *sub_233CB65A8((_BYTE *)(a1 + 2640));
  if ((v21 - 1) >= 0xFEu)
  {
    *(_DWORD *)a9 = 113;
    *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
    v20 = 1695;
    goto LABEL_20;
  }
  if (!a5)
  {
    v23 = *(_QWORD *)(a1 + 2592);
    if (!v23)
    {
      *(_DWORD *)a9 = 16;
      *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      v20 = 1701;
      goto LABEL_20;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v21) & 1) == 0
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2592) + 16))(*(_QWORD *)(a1 + 2592)) & 1) == 0)
    {
      *(_DWORD *)a9 = 16;
      *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      v20 = 1705;
      goto LABEL_20;
    }
  }
  if ((*(_WORD *)(a1 + 2644) & 0x40) == 0)
  {
    buf[0] = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)a9 = 0;
    sub_2341E72FC((_QWORD *)a1, v21, a2, buf, (_QWORD *)a9);
    if (*(_DWORD *)a9)
      goto LABEL_21;
    if (buf[0])
    {
      *(_DWORD *)a9 = 126;
      *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      v20 = 1713;
      goto LABEL_20;
    }
  }
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2600) + 48))(*(_QWORD *)(a1 + 2600), v21, a2, a3);
  if (!*(_DWORD *)a9)
  {
    if (*(_BYTE *)(a1 + 2616) && *(unsigned __int8 *)(a1 + 2616) != (_DWORD)v21)
    {
      *(_DWORD *)a9 = 3;
      *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      v20 = 1718;
      goto LABEL_20;
    }
    *(_BYTE *)(a1 + 2616) = v21;
    memset(buf, 0, sizeof(buf));
    sub_2341E4EE0(a1, v21, 1, a5, a6, a4, a7, (uint64_t)buf);
    if (!*(_DWORD *)buf)
    {
      *(_WORD *)(a1 + 2644) |= 9u;
      *a8 = v21;
      sub_2341E4BE0(a1, v21, (uint64_t)v24);
      *(_DWORD *)a9 = 0;
      *(_QWORD *)(a9 + 8) = "src/credentials/FabricTable.cpp";
      v20 = 1736;
      goto LABEL_20;
    }
    sub_2341E7A54(a1);
    *(_OWORD *)a9 = *(_OWORD *)buf;
    *(_QWORD *)(a9 + 16) = *(_QWORD *)&buf[16];
  }
LABEL_21:
  v22 = sub_2341C4608();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "AddNewPendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341E7A54(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = sub_2341C4608();
  if (os_signpost_enabled(v2))
  {
    *(_DWORD *)buf = 136315394;
    v9 = "Fabric";
    v10 = 2080;
    v11 = "RevertPendingOpCertsExceptRoot";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  sub_233C0BD1C(a1 + 2432);
  if ((*(_WORD *)(a1 + 2644) & 1) != 0)
  {
    v3 = sub_234117B80(0x11u, "FabricProvisioning");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *(unsigned __int8 *)(a1 + 2616);
      *(_DWORD *)buf = 67109120;
      LODWORD(v9) = v4;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Reverting pending fabric data for fabric 0x%x", buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x11u, 1);
  }
  v5 = *(_QWORD *)(a1 + 2600);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  v6 = *(_WORD *)(a1 + 2644);
  if ((v6 & 8) != 0)
  {
    sub_2341E5630(buf, a1, *(unsigned __int8 *)(a1 + 2616));
    v6 = *(_WORD *)(a1 + 2644);
  }
  *(_WORD *)(a1 + 2644) = v6 & 0xFFF3;
  if ((v6 & 2) == 0)
    *(_BYTE *)(a1 + 2616) = 0;
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v9 = "Fabric";
    v10 = 2080;
    v11 = "RevertPendingOpCertsExceptRoot";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2341E7C58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>)
{
  NSObject *v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _BYTE v23[24];
  uint8_t buf[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "UpdatePendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(_QWORD *)(a1 + 2600))
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1744;
    goto LABEL_26;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a8 = 47;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1745;
    goto LABEL_26;
  }
  if (!a5)
  {
    v20 = *(_QWORD *)(a1 + 2592);
    if (!v20)
    {
      *(_DWORD *)a8 = 16;
      a8[1] = "src/credentials/FabricTable.cpp";
      v19 = 1751;
      goto LABEL_26;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, a2) & 1) == 0
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2592) + 16))(*(_QWORD *)(a1 + 2592)) & 1) == 0)
    {
      *(_DWORD *)a8 = 16;
      a8[1] = "src/credentials/FabricTable.cpp";
      v19 = 1754;
      goto LABEL_26;
    }
  }
  v17 = *(_WORD *)(a1 + 2644);
  if ((v17 & 2) != 0)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1758;
    goto LABEL_26;
  }
  if ((v17 & 8) != 0)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1761;
    goto LABEL_26;
  }
  v18 = sub_2341E2E70(a1, a2);
  if (!v18)
  {
    *(_DWORD *)a8 = 113;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1765;
    goto LABEL_26;
  }
  v22 = v18;
  if ((v17 & 0x40) == 0)
  {
    buf[0] = 0;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    sub_2341E72FC((_QWORD *)a1, a2, a3, buf, a8);
    if (*(_DWORD *)a8)
      goto LABEL_27;
    if (buf[0] != (_DWORD)a2)
    {
      *(_DWORD *)a8 = 113;
      a8[1] = "src/credentials/FabricTable.cpp";
      v19 = 1773;
      goto LABEL_26;
    }
  }
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2600) + 56))(*(_QWORD *)(a1 + 2600), a2, a3, a4);
  if (*(_DWORD *)a8)
    goto LABEL_27;
  if (*(_BYTE *)(a1 + 2616) && *(unsigned __int8 *)(a1 + 2616) != (_DWORD)a2)
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1778;
LABEL_26:
    *((_DWORD *)a8 + 4) = v19;
    goto LABEL_27;
  }
  *(_BYTE *)(a1 + 2616) = a2;
  memset(buf, 0, sizeof(buf));
  sub_2341E4EE0(a1, a2, 0, a5, a6, *(_WORD *)(v22 + 138), a7, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    *(_WORD *)(a1 + 2644) |= 5u;
    sub_2341E4BE0(a1, a2, (uint64_t)v23);
    *(_DWORD *)a8 = 0;
    a8[1] = "src/credentials/FabricTable.cpp";
    v19 = 1797;
    goto LABEL_26;
  }
  sub_2341E7A54(a1);
  *(_OWORD *)a8 = *(_OWORD *)buf;
  a8[2] = *(_QWORD *)&buf[16];
LABEL_27:
  v21 = sub_2341C4608();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "Fabric";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "UpdatePendingFabricCommon";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_2341E803C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(result + 2584))
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 2082;
    goto LABEL_15;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 2083;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= 0x21)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 2085;
LABEL_15:
    *(_DWORD *)(a4 + 16) = v7;
    return result;
  }
  v8 = result;
  result = sub_2341E2DEC(result, a2);
  if (!result
    || (v9 = result, !*(_BYTE *)(result + 137))
    || (unint64_t)(*(_QWORD *)result - 1) >= 0xFFFFFFEFFFFFFFFFLL)
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 2089;
    goto LABEL_15;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (uint64_t)memcpy((void *)(result + 104), *(const void **)a3, v6);
  *(_BYTE *)(v9 + 104 + v6) = 0;
  if ((*(_WORD *)(v8 + 2644) & 0xC) != 0
    || v9 == v8 + 2432
    || (*(_QWORD *)a4 = 0,
        *(_QWORD *)(a4 + 8) = 0,
        *(_QWORD *)(a4 + 16) = 0,
        result = sub_2341E3718(v8, v9, (_QWORD *)a4),
        !*(_DWORD *)a4))
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
    v7 = 2100;
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_2341E819C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = sub_2341E2E70(a1, a2);
  if (result)
  {
    result = sub_23400A580(result);
    v7 = 0;
    *a3 = result;
    a3[1] = v8;
    v9 = 2109;
  }
  else
  {
    v9 = 2106;
    v7 = 113;
  }
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

unsigned __int8 *sub_2341E81F4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  int v7;
  int v8;
  int v9;

  result = sub_2341E6D34(a1);
  if (a1[2640])
  {
    result = sub_233CB65A8(a1 + 2640);
    v7 = *result;
    if ((v7 - 1) > 0xFD)
    {
      v9 = 2121;
      v8 = 113;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
      v9 = 2124;
    }
  }
  else
  {
    v9 = 2117;
    v8 = 11;
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_2341E827C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;

  if ((*(_WORD *)(result + 2644) & 1) != 0)
  {
    v6 = 2129;
    v7 = 3;
  }
  else if ((a2 - 1) > 0xFDu)
  {
    v6 = 2130;
    v7 = 113;
  }
  else
  {
    v5 = result;
    result = sub_2341E2E70(result, a2);
    if (result)
    {
      v6 = 2133;
      v7 = 126;
    }
    else
    {
      v7 = 0;
      *(_BYTE *)(v5 + 2640) = 1;
      *(_BYTE *)(v5 + 2641) = a2;
      v6 = 2136;
    }
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341E8318@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;

  v3 = *(_DWORD *)(a2 + 352);
  if (v3 > *(_DWORD *)(result + 8))
    *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/credentials/FabricTable.cpp";
  *(_DWORD *)(a3 + 16) = 753;
  return result;
}

uint64_t sub_2341E8348@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  __int128 v11;
  int v12;
  _BYTE v13[160];
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  sub_2341D67D0((uint64_t)v13);
  sub_2341D8D6C((uint64_t)v13);
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  sub_234138CD8((uint64_t)a2, 128, 0, (uint64_t)&v10);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  sub_23413828C(a2, 2uLL, (uint64_t)&v10);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  sub_234138CE4(&v10, a2);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23413828C(a2, 1uLL, a3);
  if (*(_DWORD *)a3)
    return nullsub_13(v13, v6);
  sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  sub_2341370A0(a2, 513, (uint64_t)&v10);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  sub_234138CE4(&v10, a2);
  v7 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_5;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_2341D704C((uint64_t)v13, a2, a3);
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341E86A4(1, 0, a2, a3);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_2341D704C((uint64_t)v13, a2, a3);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_2341E8800(a1, a2, a3);
        if (!*(_DWORD *)a3)
        {
          sub_234138CD8((uint64_t)a2, 128, 3u, (uint64_t)&v10);
          v7 = v10;
          v14 = v11;
          v15 = v12;
          if (!v10)
          {
            sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v10);
            v7 = v10;
            v14 = v11;
            v15 = v12;
            if (!v10)
            {
              sub_2341E898C(1, a2, (uint64_t)&v10);
              sub_2341E8B34(1u, a2, (uint64_t)&v10);
              v9 = 100730370;
              sub_2341E8C84((unsigned __int16 *)&v9, 2, a2, (uint64_t)&v10);
              sub_234138CE4(&v10, a2);
              v7 = v10;
              v14 = v11;
              v15 = v12;
              if (!v10)
              {
                sub_234138CE4(&v10, a2);
                v7 = v10;
                v14 = v11;
                v15 = v12;
                if (!v10)
                {
                  sub_234138CE4(&v10, a2);
                  v7 = v10;
                  v14 = v11;
                  v15 = v12;
                }
              }
            }
          }
LABEL_5:
          *(_DWORD *)a3 = v7;
          *(_OWORD *)(a3 + 4) = v14;
          *(_DWORD *)(a3 + 20) = v15;
        }
      }
    }
  }
  return nullsub_13(v13, v6);
}

uint64_t sub_2341E86A4@<X0>(_BOOL8 a1@<X0>, _BOOL8 a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  int v10;
  __int128 v11;
  int v12;
  unsigned __int8 v13[8];
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  result = sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)&v10);
  v9 = v10;
  v14 = v11;
  v15 = v12;
  if (v10)
    goto LABEL_2;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = sub_2341D791C(a1, (uint64_t)v13, a4);
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t)sub_234138AFC(a3, v13, &v10);
    v9 = v10;
    v14 = v11;
    v15 = v12;
    if (!v10)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      result = sub_2341D791C(a2, (uint64_t)v13, a4);
      if (*(_DWORD *)a4)
        return result;
      result = (uint64_t)sub_234138AFC(a3, v13, &v10);
      v9 = v10;
      v14 = v11;
      v15 = v12;
      if (!v10)
      {
        result = (uint64_t)sub_234138CE4(&v10, a3);
        v9 = v10;
        v14 = v11;
        v15 = v12;
      }
    }
LABEL_2:
    *(_DWORD *)a4 = v9;
    *(_OWORD *)(a4 + 4) = v14;
    *(_DWORD *)(a4 + 20) = v15;
  }
  return result;
}

_QWORD *sub_2341E8800@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  int v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_6;
  result = (_QWORD *)sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_6;
  result = sub_2341370A0(a2, 257, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_6;
  result = sub_2341370A0(a2, 1025, (uint64_t)&v8);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_6;
  result = sub_234138CE4(&v8, a2);
  v7 = v8;
  v11 = v9;
  v12 = v10;
  if (v8)
    goto LABEL_6;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_23413891C(a2, 0, (const void *)(a1 + 8), 0x41u, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_234138CE4(&v8, a2);
    v7 = v8;
    v11 = v9;
    v12 = v10;
LABEL_6:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v11;
    *(_DWORD *)(a3 + 20) = v12;
  }
  return result;
}

double sub_2341E898C@<D0>(int a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v7;
  uint64_t v8;

  *(_OWORD *)a3 = xmmword_250514FB8;
  *(_QWORD *)(a3 + 16) = 177;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, a3);
  if (!*(_DWORD *)a3)
  {
    sub_2341370A0(a2, 1281, (uint64_t)&v7);
    result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = v8;
    if (!*(_DWORD *)a3)
    {
      sub_2341383F4(a2, 1, &v7);
      result = *(double *)&v7;
      *(_OWORD *)a3 = v7;
      *(_QWORD *)(a3 + 16) = v8;
      if (!*(_DWORD *)a3)
      {
        sub_234138E44(a2, 0, 4u, 0, &v7);
        result = *(double *)&v7;
        *(_OWORD *)a3 = v7;
        *(_QWORD *)(a3 + 16) = v8;
        if (!*(_DWORD *)a3)
        {
          sub_234138CD8((uint64_t)a2, 0, 0x10u, (uint64_t)&v7);
          result = *(double *)&v7;
          *(_OWORD *)a3 = v7;
          *(_QWORD *)(a3 + 16) = v8;
          if (!*(_DWORD *)a3)
          {
            if (a1
              || (sub_2341383F4(a2, 1, &v7),
                  result = *(double *)&v7,
                  *(_OWORD *)a3 = v7,
                  *(_QWORD *)(a3 + 16) = v8,
                  !*(_DWORD *)a3))
            {
              sub_234138CE4(&v7, a2);
              result = *(double *)&v7;
              *(_OWORD *)a3 = v7;
              *(_QWORD *)(a3 + 16) = v8;
              if (!*(_DWORD *)a3)
              {
                sub_234138CE4(&v7, a2);
                result = *(double *)&v7;
                *(_OWORD *)a3 = v7;
                *(_QWORD *)(a3 + 16) = v8;
                if (!*(_DWORD *)a3)
                {
                  sub_234138CE4(&v7, a2);
                  result = *(double *)&v7;
                  *(_OWORD *)a3 = v7;
                  *(_QWORD *)(a3 + 16) = v8;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_2341E8B34@<D0>(unsigned __int16 a1@<W0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v7;
  uint64_t v8;

  *(_OWORD *)a3 = xmmword_250514FD0;
  *(_QWORD *)(a3 + 16) = 156;
  sub_234138CD8((uint64_t)a2, 0, 0x10u, a3);
  if (!*(_DWORD *)a3)
  {
    sub_2341370A0(a2, 1282, (uint64_t)&v7);
    result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = v8;
    if (!*(_DWORD *)a3)
    {
      sub_2341383F4(a2, 1, &v7);
      result = *(double *)&v7;
      *(_OWORD *)a3 = v7;
      *(_QWORD *)(a3 + 16) = v8;
      if (!*(_DWORD *)a3)
      {
        sub_234138E44(a2, 0, 4u, 0, &v7);
        result = *(double *)&v7;
        *(_OWORD *)a3 = v7;
        *(_QWORD *)(a3 + 16) = v8;
        if (!*(_DWORD *)a3)
        {
          sub_23413874C(a2, a1, (uint64_t)&v7);
          result = *(double *)&v7;
          *(_OWORD *)a3 = v7;
          *(_QWORD *)(a3 + 16) = v8;
          if (!*(_DWORD *)a3)
          {
            sub_234138CE4(&v7, a2);
            result = *(double *)&v7;
            *(_OWORD *)a3 = v7;
            *(_QWORD *)(a3 + 16) = v8;
            if (!*(_DWORD *)a3)
            {
              sub_234138CE4(&v7, a2);
              result = *(double *)&v7;
              *(_OWORD *)a3 = v7;
              *(_QWORD *)(a3 + 16) = v8;
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_2341E8C84@<D0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  *(_OWORD *)a4 = xmmword_250514FE8;
  *(_QWORD *)(a4 + 16) = 128;
  sub_234138CD8((uint64_t)a3, 0, 0x10u, a4);
  if (!*(_DWORD *)a4)
  {
    sub_2341370A0(a3, 1283, (uint64_t)&v10);
    result = *(double *)&v10;
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v11;
    if (!*(_DWORD *)a4)
    {
      sub_2341383F4(a3, 1, &v10);
      result = *(double *)&v10;
      *(_OWORD *)a4 = v10;
      *(_QWORD *)(a4 + 16) = v11;
      if (!*(_DWORD *)a4)
      {
        sub_234138E44(a3, 0, 4u, 0, &v10);
        result = *(double *)&v10;
        *(_OWORD *)a4 = v10;
        *(_QWORD *)(a4 + 16) = v11;
        if (!*(_DWORD *)a4)
        {
          sub_234138CD8((uint64_t)a3, 0, 0x10u, (uint64_t)&v10);
          result = *(double *)&v10;
          *(_OWORD *)a4 = v10;
          *(_QWORD *)(a4 + 16) = v11;
          if (!*(_DWORD *)a4)
          {
            if (a2)
            {
              v9 = 2 * a2;
              while (1)
              {
                sub_2341370A0(a3, *a1, (uint64_t)&v10);
                result = *(double *)&v10;
                *(_OWORD *)a4 = v10;
                *(_QWORD *)(a4 + 16) = v11;
                if (*(_DWORD *)a4)
                  break;
                ++a1;
                v9 -= 2;
                if (!v9)
                  goto LABEL_10;
              }
            }
            else
            {
LABEL_10:
              sub_234138CE4(&v10, a3);
              result = *(double *)&v10;
              *(_OWORD *)a4 = v10;
              *(_QWORD *)(a4 + 16) = v11;
              if (!*(_DWORD *)a4)
              {
                sub_234138CE4(&v10, a3);
                result = *(double *)&v10;
                *(_OWORD *)a4 = v10;
                *(_QWORD *)(a4 + 16) = v11;
                if (!*(_DWORD *)a4)
                {
                  sub_234138CE4(&v10, a3);
                  result = *(double *)&v10;
                  *(_OWORD *)a4 = v10;
                  *(_QWORD *)(a4 + 16) = v11;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2341E8E3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  int v18;
  _QWORD v19[14];
  _BYTE v20[64];
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_23413824C((uint64_t)v19, *a4, a4[1]);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  sub_2341E90A8(a1, a2, v10, (unsigned __int8 *)v19, a5);
  if (!*(_DWORD *)a5)
  {
    v21 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    v11 = *a4;
    v12 = sub_234138270(v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v11, v12, v20);
    if (!*(_DWORD *)a5)
    {
      sub_23413824C((uint64_t)v19, *a4, a4[1]);
      sub_234138CD8((uint64_t)v19, 0, 0x10u, (uint64_t)&v16);
      v13 = v16;
      v22 = v17;
      v23 = v18;
      if (!v16)
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
        sub_2341E90A8(a1, a2, v14, (unsigned __int8 *)v19, a5);
        if (*(_DWORD *)a5)
          goto LABEL_6;
        sub_234138CD8((uint64_t)v19, 0, 0x10u, (uint64_t)&v16);
        v13 = v16;
        v22 = v17;
        v23 = v18;
        if (!v16)
        {
          sub_2341370A0(v19, 513, (uint64_t)&v16);
          v13 = v16;
          v22 = v17;
          v23 = v18;
          if (!v16)
          {
            sub_234138CE4(&v16, v19);
            v13 = v16;
            v22 = v17;
            v23 = v18;
            if (!v16)
            {
              *(_QWORD *)a5 = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 16) = 0;
              sub_2341E93CC((uint64_t)v20, v19, a5);
              if (*(_DWORD *)a5)
                goto LABEL_6;
              sub_234138CE4(&v16, v19);
              v13 = v16;
              v22 = v17;
              v23 = v18;
              if (!v16)
              {
                v15 = sub_234138270(v19);
                sub_233BF7588((uint64_t)a4, v15);
                v13 = 0;
              }
            }
          }
        }
      }
      *(_DWORD *)a5 = v13;
      *(_OWORD *)(a5 + 4) = v22;
      *(_DWORD *)(a5 + 20) = v23;
    }
LABEL_6:
    sub_23413A7A4(v20, 64);
  }
}

double sub_2341E90A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v7;
  BOOL v8;
  double result;
  int v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  int v18;
  unsigned __int8 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
    v15 = 319;
    goto LABEL_14;
  }
  v7 = *(_DWORD *)(a1 + 12);
  if (v7)
    v8 = v7 >= *(_DWORD *)(a1 + 8);
  else
    v8 = 1;
  if (!v8)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
    v15 = 321;
LABEL_14:
    *(_DWORD *)(a5 + 16) = v15;
    return result;
  }
  v19 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_2341D63F8(a1 + 16, &v19, a5);
  if (*(_DWORD *)a5)
    return result;
  v13 = v19;
  sub_234138CD8((uint64_t)a4, 0, 0x10u, (uint64_t)&v16);
  v14 = v16;
  v20 = v17;
  v21 = v18;
  if (v16)
    goto LABEL_12;
  sub_234138CD8((uint64_t)a4, 128, 0, (uint64_t)&v16);
  v14 = v16;
  v20 = v17;
  v21 = v18;
  if (v16)
    goto LABEL_12;
  sub_23413828C(a4, 2uLL, (uint64_t)&v16);
  v14 = v16;
  v20 = v17;
  v21 = v18;
  if (v16 || (sub_234138CE4(&v16, a4), v14 = v16, v20 = v17, v21 = v18, v16))
  {
LABEL_12:
    *(_DWORD *)a5 = v14;
    result = *(double *)&v20;
    *(_OWORD *)(a5 + 4) = v20;
    *(_DWORD *)(a5 + 20) = v21;
    return result;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_23413828C(a4, *(_QWORD *)a1, a5);
  if (!*(_DWORD *)a5)
  {
    sub_234138CD8((uint64_t)a4, 0, 0x10u, (uint64_t)&v16);
    v14 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_12;
    sub_2341370A0(a4, 513, (uint64_t)&v16);
    v14 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_12;
    sub_234138CE4(&v16, a4);
    v14 = v16;
    v20 = v17;
    v21 = v18;
    if (v16)
      goto LABEL_12;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_2341D704C(a1 + 176, a4, a5);
    if (!*(_DWORD *)a5)
    {
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      sub_2341E86A4(*(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12), a4, a5);
      if (!*(_DWORD *)a5)
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        sub_2341D704C(a1 + 16, a4, a5);
        if (!*(_DWORD *)a5)
        {
          *(_QWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_QWORD *)(a5 + 16) = 0;
          sub_2341E8800(a2, a4, a5);
          if (!*(_DWORD *)a5)
          {
            *(_QWORD *)a5 = 0;
            *(_QWORD *)(a5 + 8) = 0;
            *(_QWORD *)(a5 + 16) = 0;
            *(_QWORD *)&result = sub_2341E978C((v13 - 1) < 2, a2, a3, (_BYTE *)(a1 + 336), a4, a5).n128_u64[0];
            if (!*(_DWORD *)a5)
            {
              sub_234138CE4(&v16, a4);
              v14 = v16;
              v20 = v17;
              v21 = v18;
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_2341E93CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  _BYTE v8[20];
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  result = sub_234138E44(a2, 0, 3u, 1, v8);
  v7 = *(_DWORD *)v8;
  v10 = *(_OWORD *)&v8[4];
  v11 = v9;
  if (*(_DWORD *)v8)
    goto LABEL_2;
  sub_2341E9DA8(v8, a1);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_2341D7D3C(*(uint64_t *)v8, a2, a3);
  if (!*(_DWORD *)a3)
  {
    result = sub_234138CE4(v8, a2);
    v7 = *(_DWORD *)v8;
    v10 = *(_OWORD *)&v8[4];
    v11 = v9;
LABEL_2:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a3 + 4) = v10;
    *(_DWORD *)(a3 + 20) = v11;
  }
  return result;
}

void sub_2341E94C4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  v11 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v8 = a1 + 16;
  sub_2341D63F8(a1 + 16, &v11, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (v11 == 1)
    {
      if (sub_2341D6674(v8, a1 + 176))
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        sub_2341E8E3C(a1, v9, a2, a3, (uint64_t)a4);
        return;
      }
      *(_DWORD *)a4 = 47;
      a4[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 460;
    }
    else
    {
      *(_DWORD *)a4 = 47;
      a4[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 459;
    }
    *((_DWORD *)a4 + 4) = v10;
  }
}

void sub_2341E95A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  char v11;

  v11 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341D63F8(a1 + 16, &v11, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    if (v11 == 2)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_2341D63F8(a1 + 176, &v11, (uint64_t)a5);
      if (*(_DWORD *)a5)
        return;
      if (v11 == 1)
      {
        sub_2341E8E3C(a1, a2, a3, a4, (uint64_t)a5);
        return;
      }
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 474;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 471;
    }
    *((_DWORD *)a5 + 4) = v10;
  }
}

void sub_2341E9698(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  int v10;
  unsigned __int8 v11;

  v11 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341D63F8(a1 + 16, &v11, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    if (v11 == 3)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_2341D63F8(a1 + 176, &v11, (uint64_t)a5);
      if (*(_DWORD *)a5)
        return;
      if (v11 - 1 < 2)
      {
        sub_2341E8E3C(a1, a2, a3, a4, (uint64_t)a5);
        return;
      }
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 489;
    }
    else
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GenerateChipX509Cert.cpp";
      v10 = 486;
    }
    *((_DWORD *)a5 + 4) = v10;
  }
}

__n128 sub_2341E978C@<Q0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  int v12;
  __n128 result;
  int v14;
  int v15;
  int v16;
  int v17;
  __n128 *v18;
  int v19;
  int v20;
  int v21;
  const void *v22;
  _BYTE *v23;
  const void *v24;
  _BYTE *v25;
  int v26;
  int v27;
  __n128 v28;
  int v29;
  int v30;
  __n128 v31;
  int v32;
  __n128 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  sub_234138CD8((uint64_t)a5, 128, 3u, (uint64_t)&v30);
  v12 = v30;
  v28 = v31;
  v29 = v32;
  if (v30)
    goto LABEL_3;
  sub_234138CD8((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
  v12 = v30;
  v28 = v31;
  v29 = v32;
  if (v30)
    goto LABEL_3;
  if (a1)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_2341E898C(0, a5, a6);
    if (*(_DWORD *)a6)
      return result;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_2341E8B34(0x60u, a5, a6);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_2341E898C(1, a5, a6);
    if (*(_DWORD *)a6)
      return result;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    result.n128_f64[0] = sub_2341E8B34(1u, a5, a6);
    if (*(_DWORD *)a6)
      return result;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v30 = 100730370;
    result.n128_f64[0] = sub_2341E8C84((unsigned __int16 *)&v30, 2, a5, a6);
  }
  if (!*(_DWORD *)a6)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    sub_234138CD8((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
    v15 = v30;
    v33 = v31;
    v34 = v32;
    if (v30)
      goto LABEL_16;
    sub_2341370A0(a5, 1284, (uint64_t)&v30);
    v15 = v30;
    v33 = v31;
    v34 = v32;
    if (v30)
      goto LABEL_16;
    sub_234138E44(a5, 0, 4u, 0, &v30);
    v15 = v30;
    v33 = v31;
    v34 = v32;
    if (v30)
      goto LABEL_16;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    sub_234139454((char *)(a2 + 8), 0x41uLL, &v30, a6);
    if (!*(_DWORD *)a6)
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      sub_234138628(a5, &v30, 0x14u, (_QWORD *)a6);
      if (!*(_DWORD *)a6)
      {
        sub_234138CE4(&v30, a5);
        v15 = v30;
        v33 = v31;
        v34 = v32;
        if (v30)
        {
LABEL_16:
          *(_DWORD *)a6 = v15;
          result.n128_u64[0] = v33.n128_u64[0];
          *(__n128 *)(a6 + 4) = v33;
          v14 = v34;
          goto LABEL_4;
        }
        sub_234138CE4(&v30, a5);
        v16 = v30;
        v17 = v32;
        v34 = v32;
        result = v31;
        v33 = v31;
        *(_DWORD *)a6 = v30;
        *(__n128 *)(a6 + 4) = result;
        *(_DWORD *)(a6 + 20) = v17;
        if (!v16)
        {
          v18 = (__n128 *)(a6 + 4);
          *(_QWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_QWORD *)(a6 + 16) = 0;
          sub_234138CD8((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
          v19 = v30;
          v33 = v31;
          v34 = v32;
          if (v30)
            goto LABEL_25;
          sub_2341370A0(a5, 1285, (uint64_t)&v30);
          v19 = v30;
          v33 = v31;
          v34 = v32;
          if (v30)
            goto LABEL_25;
          sub_234138E44(a5, 0, 4u, 0, &v30);
          v19 = v30;
          v33 = v31;
          v34 = v32;
          if (v30)
            goto LABEL_25;
          sub_234138CD8((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
          v19 = v30;
          v33 = v31;
          v34 = v32;
          if (v30)
            goto LABEL_25;
          *(_QWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_QWORD *)(a6 + 16) = 0;
          sub_234139454((char *)(a3 + 8), 0x41uLL, &v30, a6);
          if (!*(_DWORD *)a6)
          {
            *(_QWORD *)a6 = 0;
            *(_QWORD *)(a6 + 8) = 0;
            *(_QWORD *)(a6 + 16) = 0;
            sub_234138640(a5, 128, 0, &v30, 0x14u, (_QWORD *)a6);
            if (!*(_DWORD *)a6)
            {
              sub_234138CE4(&v30, a5);
              v19 = v30;
              v33 = v31;
              v34 = v32;
              if (v30)
                goto LABEL_25;
              sub_234138CE4(&v30, a5);
              v19 = v30;
              v33 = v31;
              v34 = v32;
              if (v30)
                goto LABEL_25;
              sub_234138CE4(&v30, a5);
              v20 = v30;
              v21 = v32;
              v34 = v32;
              result = v31;
              v33 = v31;
              *(_DWORD *)a6 = v30;
              *v18 = result;
              *(_DWORD *)(a6 + 20) = v21;
              if (v20)
                return result;
              *(_QWORD *)a6 = 0;
              *(_QWORD *)(a6 + 8) = 0;
              *(_QWORD *)(a6 + 16) = 0;
              if (!*a4)
              {
                *(_DWORD *)a6 = 0;
                *(_QWORD *)(a6 + 8) = "src/credentials/GenerateChipX509Cert.cpp";
                *(_DWORD *)(a6 + 16) = 226;
                goto LABEL_40;
              }
              sub_234138CD8((uint64_t)a5, 0, 0x10u, (uint64_t)&v30);
              v19 = v30;
              v33 = v31;
              v34 = v32;
              if (v30)
                goto LABEL_25;
              *(_QWORD *)a6 = 0;
              *(_QWORD *)(a6 + 8) = 0;
              *(_QWORD *)(a6 + 16) = 0;
              v22 = *(const void **)sub_2341E9D88(a4);
              v23 = sub_2341E9D88(a4);
              sub_2341385F8(a5, v22, *((unsigned __int16 *)v23 + 4), (_QWORD *)a6);
              if (*(_DWORD *)a6)
                return result;
              sub_234138E44(a5, 0, 4u, 0, &v30);
              v19 = v30;
              v33 = v31;
              v34 = v32;
              if (v30)
                goto LABEL_25;
              *(_QWORD *)a6 = 0;
              *(_QWORD *)(a6 + 8) = 0;
              *(_QWORD *)(a6 + 16) = 0;
              v24 = (const void *)*((_QWORD *)sub_2341E9D88(a4) + 2);
              v25 = sub_2341E9D88(a4);
              sub_234138628(a5, v24, *((unsigned __int16 *)v25 + 12), (_QWORD *)a6);
              if (*(_DWORD *)a6)
                return result;
              sub_234138CE4(&v30, a5);
              v19 = v30;
              v33 = v31;
              v34 = v32;
              if (v30)
              {
LABEL_25:
                *(_DWORD *)a6 = v19;
                result.n128_u64[0] = v33.n128_u64[0];
                *v18 = v33;
                *(_DWORD *)(a6 + 20) = v34;
                return result;
              }
              sub_234138CE4(&v30, a5);
              v26 = v30;
              v27 = v32;
              v34 = v32;
              result = v31;
              v33 = v31;
              *(_DWORD *)a6 = v30;
              *v18 = result;
              *(_DWORD *)(a6 + 20) = v27;
              if (!v26)
              {
LABEL_40:
                sub_234138CE4(&v30, a5);
                v12 = v30;
                v28 = v31;
                v29 = v32;
                if (!v30)
                {
                  sub_234138CE4(&v30, a5);
                  v12 = v30;
                  v28 = v31;
                  v29 = v32;
                }
LABEL_3:
                *(_DWORD *)a6 = v12;
                result = v28;
                *(__n128 *)(a6 + 4) = v28;
                v14 = v29;
LABEL_4:
                *(_DWORD *)(a6 + 20) = v14;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_BYTE *sub_2341E9D88(_BYTE *a1)
{
  if (!*a1)
    sub_23425AE7C((uint64_t)a1);
  return a1 + 8;
}

_QWORD *sub_2341E9DA8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  if (!a2)
    sub_23425E408((uint64_t)result);
  return result;
}

uint64_t sub_2341E9DC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = 822;
  v3 = 3;
  if (*(_QWORD *)(result + 24))
  {
    v4 = *(_QWORD *)(result + 32);
    if (v4)
      v3 = 0;
    else
      v3 = 3;
    if (v4)
      v2 = 824;
    else
      v2 = 822;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_2341E9E00(_QWORD *a1)
{
  sub_234115DFC(a1 + 7, (uint64_t)(a1 + 5), (unsigned int (*)(uint64_t))sub_2341F16E4);
  sub_234115DFC(a1 + 14, (uint64_t)(a1 + 12), (unsigned int (*)(uint64_t))sub_2341F16FC);
  sub_234115DFC(a1 + 21, (uint64_t)(a1 + 19), (unsigned int (*)(uint64_t))sub_2341F1714);
  sub_234115DFC(a1 + 28, (uint64_t)(a1 + 26), (unsigned int (*)(uint64_t))sub_2341F172C);
  sub_234115DFC(a1 + 35, (uint64_t)(a1 + 33), (unsigned int (*)(uint64_t))sub_2341F1744);
  return sub_234115DFC(a1 + 42, (uint64_t)(a1 + 40), (unsigned int (*)(uint64_t))sub_2341F175C);
}

uint64_t sub_2341E9E90(uint64_t result, uint64_t a2)
{
  if (!a2)
    sub_23425E660(result);
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t *sub_2341E9EAC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[27];
  char v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v6 = result[3];
  if (v6)
  {
    v8 = result;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v34 = 0;
    v25 = &unk_250515388;
    v35 = a2;
    v36 = 0;
    v37 = 0xFFFF;
    v38 = 0;
    memset(v20, 0, sizeof(v20));
    v19 = 0u;
    v18 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0;
    v11 = &unk_250515418;
    v21 = 0;
    v22 = -1;
    v23 = 0;
    v24 = 1;
    v9 = 0uLL;
    result = sub_2341EA094(&v25, v6, (uint64_t)&v9);
    if ((_DWORD)v9 && (_DWORD)v9 != 216)
    {
      *(_OWORD *)a4 = v9;
      a4[2] = v10;
    }
    else if (sub_2341EA1FC((uint64_t)&v11, v8[3], (uint64_t)&v25, *(unsigned __int16 *)a3))
    {
      strncpy(&v20[10], a3 + 2, 0x11uLL);
      v20[26] = 0;
      return (uint64_t *)sub_2341EA2B8((uint64_t)&v11, v8[3], a4);
    }
    else
    {
      *(_WORD *)&v20[8] = *(_WORD *)a3;
      strncpy(&v20[10], a3 + 2, 0x11uLL);
      v20[26] = 0;
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _BYTE *))(*v8 + 56))(v8, a2, WORD1(v36), &v20[8]);
    }
  }
  else
  {
    *(_DWORD *)a4 = 172;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a4 + 4) = 849;
  }
  return result;
}

_QWORD *sub_2341EA094@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  double v7;
  _BYTE v8[72];
  __int128 v9;
  uint64_t v10;
  unsigned __int16 v11;
  _OWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/lib/support/PersistentData.h";
    v6 = 62;
    goto LABEL_6;
  }
  v5 = result;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _OWORD *))(*result + 16))(result, v12);
  if (*(_DWORD *)a3)
    return result;
  (*(void (**)(_QWORD *))(*v5 + 40))(v5);
  v11 = 128;
  v10 = 0;
  v9 = 0uLL;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, _OWORD *, _QWORD *, unsigned __int16 *))(*(_QWORD *)a2 + 16))(&v9, a2, v12, v5 + 2, &v11);
  if ((_DWORD)v9 == 160)
  {
    *(_DWORD *)a3 = 216;
    *(_QWORD *)(a3 + 8) = "src/lib/support/PersistentData.h";
    v6 = 75;
LABEL_6:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v10;
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)v8);
    v7 = sub_234104498((uint64_t)v8, (uint64_t)(v5 + 2), v11);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _BYTE *, double))(*v5 + 32))(v5, v8, v7);
  }
  return result;
}

uint64_t sub_2341EA1FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  unsigned __int16 v9;
  _QWORD v11[3];

  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 146);
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 174) = 1;
  if (*(_WORD *)(a3 + 148))
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v11, a1, a2);
      if (LODWORD(v11[0]))
        break;
      v8 = *(unsigned __int16 *)(a1 + 144);
      if (v8 == a4)
        return 1;
      *(_BYTE *)(a1 + 174) = 0;
      *(_WORD *)(a1 + 172) = v8;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 170);
      v9 = *(_WORD *)(a1 + 168) + 1;
      *(_WORD *)(a1 + 168) = v9;
    }
    while (*(unsigned __int16 *)(a3 + 148) > v9);
  }
  return 0;
}

uint64_t sub_2341EA2B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  double v6;
  _WORD v7[32];
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = result;
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)result + 16))(result, v8);
    if (!*(_DWORD *)a3)
    {
      sub_234106C48((uint64_t)v7);
      v6 = sub_234106C70((uint64_t)v7, v5 + 16, 0x80uLL);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = (*(uint64_t (**)(uint64_t, _WORD *, double))(*(_QWORD *)v5 + 24))(v5, v7, v6);
      if (!*(_DWORD *)a3)
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v8, v5 + 16, v7[22]);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 43;
  }
  return result;
}

uint64_t sub_2341EA3D0@<X0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  int v10;
  int v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21[28];
  __int16 v22;
  uint64_t v23;
  char v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v34 = 0;
  v25 = &unk_250515388;
  v35 = a2;
  v36 = 0;
  v37 = 0xFFFF;
  v38 = 0;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = &unk_250515418;
  v22 = -1;
  v23 = 0;
  v24 = 1;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = (uint64_t)sub_2341EA094(&v25, *(_QWORD *)(a1 + 24), (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    result = sub_2341EA1FC((uint64_t)&v12, *(_QWORD *)(a1 + 24), (uint64_t)&v25, a3);
    if ((_DWORD)result)
    {
      *(_WORD *)a4 = a3;
      result = (uint64_t)strncpy((char *)(a4 + 2), &v21[10], 0x11uLL);
      v10 = 0;
      *(_BYTE *)(a4 + 18) = 0;
      v11 = 881;
    }
    else
    {
      v11 = 877;
      v10 = 216;
    }
    *(_DWORD *)a5 = v10;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a5 + 4) = v11;
  }
  return result;
}

uint64_t sub_2341EA54C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[28];
  __int16 v19;
  uint64_t v20;
  char v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v31 = 0;
  v22 = &unk_250515388;
  v32 = a2;
  v33 = 0;
  v34 = 0xFFFF;
  v35 = 0;
  memset(v18, 0, sizeof(v18));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = &unk_250515418;
  v19 = -1;
  v20 = 0;
  v21 = 1;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  result = (uint64_t)sub_2341EA094(&v22, a1[3], (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    result = sub_2341EA1FC((uint64_t)&v9, a1[3], (uint64_t)&v22, a3);
    if ((result & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a1 + 72))(a1, a2, WORD1(v20));
    }
    else
    {
      *(_DWORD *)a4 = 216;
      a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a4 + 4) = 890;
    }
  }
  return result;
}

_QWORD *sub_2341EA6C0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[27];
  char v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[27];
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v7 = result[3];
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v12 = 897;
    goto LABEL_8;
  }
  v10 = (uint64_t)result;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v53 = 0;
  v44 = &unk_250515388;
  v54 = a2;
  v55 = 0;
  v56 = 0xFFFF;
  v57 = 0;
  memset(v39, 0, sizeof(v39));
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = &unk_250515418;
  v40 = 0;
  v41 = -1;
  v42 = 0;
  v43 = 1;
  v14 = 0uLL;
  v15 = 0;
  result = sub_2341EA094(&v44, v7, (uint64_t)&v14);
  if ((_DWORD)v14 && (_DWORD)v14 != 216)
  {
    *(_OWORD *)a5 = v14;
    a5[2] = v15;
    return result;
  }
  result = (_QWORD *)sub_2341EA1FC((uint64_t)&v30, *(_QWORD *)(v10 + 24), (uint64_t)&v44, *(unsigned __int16 *)a4);
  v11 = (int)result;
  if ((_DWORD)result && WORD1(v42) != a3)
  {
    *(_DWORD *)a5 = 26;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v12 = 908;
LABEL_8:
    *((_DWORD *)a5 + 4) = v12;
    return result;
  }
  *(_WORD *)&v39[8] = *(_WORD *)a4;
  LOWORD(v42) = 0;
  result = strncpy(&v39[10], a4 + 2, 0x11uLL);
  v39[26] = 0;
  if (v11)
    return (_QWORD *)sub_2341EA2B8((uint64_t)&v30, *(_QWORD *)(v10 + 24), a5);
  if (WORD1(v55) <= a3)
  {
    if (WORD1(v55) != a3)
    {
      *(_DWORD *)a5 = 47;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      v12 = 935;
      goto LABEL_8;
    }
    if (WORD1(v55) >= *(unsigned __int16 *)(v10 + 8))
    {
      *(_DWORD *)a5 = 31;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      v12 = 936;
      goto LABEL_8;
    }
    ++WORD1(v55);
  }
  else
  {
    memset(v25, 0, sizeof(v25));
    v24 = 0u;
    v23 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v16 = &unk_250515418;
    v26 = 0;
    v27 = -1;
    v28 = 0;
    v29 = 1;
    sub_2341EAB08((uint64_t)&v16, *(_QWORD *)(v10 + 24), (uint64_t)&v44, a3);
    v43 = v29;
    HIDWORD(v42) = HIDWORD(v28);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = (_QWORD *)sub_2341EABC4(v10, a2, *(unsigned __int16 *)&v25[8], (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = (_QWORD *)sub_2341EAE40((uint64_t)&v16, *(_QWORD *)(v10 + 24), a5);
    if (*(_DWORD *)a5)
      return result;
    v13 = *(_QWORD *)(v10 + 16);
    if (v13)
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 24))(v13, a2, &v25[8]);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = (_QWORD *)sub_2341EA2B8((uint64_t)&v30, *(_QWORD *)(v10 + 24), a5);
  if (*(_DWORD *)a5)
    return result;
  if (v43)
  {
    LOWORD(v55) = *(_WORD *)&v39[8];
  }
  else
  {
    *(_WORD *)&v25[8] = HIWORD(v42);
    memset(&v25[10], 0, 17);
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_QWORD *)v25 = 0;
    v16 = &unk_250515418;
    v26 = a2;
    v27 = -1;
    v28 = 0;
    v29 = 1;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = sub_2341EA094(&v16, *(_QWORD *)(v10 + 24), (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    WORD2(v28) = *(_WORD *)&v39[8];
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = (_QWORD *)sub_2341EA2B8((uint64_t)&v16, *(_QWORD *)(v10 + 24), a5);
    if (*(_DWORD *)a5)
      return result;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = sub_2341EAF00((uint64_t)&v44, *(_QWORD *)(v10 + 24), a5);
  if (!*(_DWORD *)a5)
  {
    result = *(_QWORD **)(v10 + 16);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, _BYTE *))(*result + 16))(result, a2, &v39[8]);
    *(_DWORD *)a5 = 0;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v12 = 958;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_2341EAB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int16 v9;
  _QWORD v11[3];

  *(_BYTE *)(a1 + 163) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 146);
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 174) = 1;
  if (*(_WORD *)(a3 + 148))
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v11, a1, a2);
      if (LODWORD(v11[0]))
        break;
      v8 = *(unsigned __int16 *)(a1 + 168);
      if (v8 == a4)
        return 1;
      *(_BYTE *)(a1 + 174) = 0;
      *(_WORD *)(a1 + 172) = *(_WORD *)(a1 + 144);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 170);
      v9 = v8 + 1;
      *(_WORD *)(a1 + 168) = v9;
    }
    while (*(unsigned __int16 *)(a3 + 148) > v9);
  }
  return 0;
}

uint64_t sub_2341EABC4@<X0>(uint64_t result@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD v11[3];
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char v24;
  int v25;
  __int16 v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[27];
  char v38;
  _BYTE v39[10];
  char v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1321;
    goto LABEL_13;
  }
  v8 = result;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v50 = 0;
  v41 = &unk_250515388;
  v51 = a2;
  v52 = 0;
  v53 = 0xFFFF;
  v54 = 0;
  memset(v37, 0, sizeof(v37));
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = &unk_250515418;
  v38 = 0;
  *(_WORD *)v39 = -1;
  *(_QWORD *)&v39[2] = 0;
  v40 = 1;
  result = (uint64_t)sub_2341EA094(&v41, v6, (uint64_t)&v12);
  if ((_DWORD)v12)
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1326;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  result = sub_2341EA1FC((uint64_t)&v28, *(_QWORD *)(v8 + 24), (uint64_t)&v41, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 16;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1327;
    goto LABEL_13;
  }
  v22 = *(_WORD *)&v37[8];
  v23 = *(_WORD *)v39;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v12 = &unk_2505154C8;
  v24 = a2;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  if (!*(_WORD *)&v39[2])
  {
LABEL_10:
    *(_DWORD *)v39 = 0xFFFF;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = sub_2341EA2B8((uint64_t)&v28, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
    if (*(_DWORD *)a4)
      return result;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1342;
    goto LABEL_13;
  }
  v10 = 0;
  while (1)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = (uint64_t)sub_2341EA094(&v12, *(_QWORD *)(v8 + 24), a4);
    if (*(_DWORD *)a4)
      return result;
    sub_2341EAE40((uint64_t)&v12, *(_QWORD *)(v8 + 24), v11);
    v23 = HIWORD(v25);
    if (++v10 >= (unint64_t)*(unsigned __int16 *)&v39[2])
      goto LABEL_10;
  }
}

uint64_t sub_2341EAE40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)result + 16))(result, v5);
    if (!*(_DWORD *)a3)
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v5);
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 86;
  }
  return result;
}

_QWORD *sub_2341EAF00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_2341F0220(a1, a2, a3);
  if (!*(_DWORD *)a3)
    return (_QWORD *)sub_2341EA2B8(a1, a2, a3);
  return result;
}

uint64_t sub_2341EAF5C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[27];
  char v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 24);
  if (v7)
  {
    v10 = result;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v36 = 0;
    v27 = &unk_250515388;
    v37 = a2;
    v38 = 0;
    v39 = 0xFFFF;
    v40 = 0;
    memset(v22, 0, sizeof(v22));
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = &unk_250515418;
    v23 = 0;
    v24 = -1;
    v25 = 0;
    v26 = 1;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = (uint64_t)sub_2341EA094(&v27, v7, (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    result = sub_2341EAB08((uint64_t)&v13, *(_QWORD *)(v10 + 24), (uint64_t)&v27, a3);
    if ((_DWORD)result)
    {
      *(_WORD *)a4 = *(_WORD *)&v22[8];
      result = (uint64_t)strncpy((char *)(a4 + 2), &v22[10], 0x11uLL);
      v11 = 0;
      *(_BYTE *)(a4 + 18) = 0;
      v12 = 974;
    }
    else
    {
      v12 = 969;
      v11 = 216;
    }
    *(_DWORD *)a5 = v11;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v12 = 963;
  }
  *((_DWORD *)a5 + 4) = v12;
  return result;
}

uint64_t sub_2341EB0FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  __int16 v26;
  uint64_t v27;
  char v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[27];
  char v55;
  __int16 v56;
  uint64_t v57;
  char v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v10 = 979;
LABEL_19:
    *(_DWORD *)(a4 + 16) = v10;
    return result;
  }
  v8 = result;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v68 = 0;
  v59 = &unk_250515388;
  v69 = a2;
  v70 = 0;
  v71 = 0xFFFF;
  v72 = 0;
  memset(v54, 0, sizeof(v54));
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = &unk_250515418;
  v55 = 0;
  v56 = -1;
  v57 = 0;
  v58 = 1;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = (uint64_t)sub_2341EA094(&v59, v6, a4);
  if (*(_DWORD *)a4)
    return result;
  result = sub_2341EAB08((uint64_t)&v45, *(_QWORD *)(v8 + 24), (uint64_t)&v59, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v10 = 985;
    goto LABEL_19;
  }
  v39 = *(_WORD *)&v54[8];
  v40 = v56;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v29 = &unk_2505154C8;
  v41 = a2;
  v42 = 0;
  v43 = 0;
  v44 = 1;
  if ((_WORD)v57)
  {
    v9 = 0;
    do
    {
      sub_2341EA094(&v29, *(_QWORD *)(v8 + 24), (uint64_t)&v11);
      if ((_DWORD)v11)
        break;
      sub_2341EAE40((uint64_t)&v29, *(_QWORD *)(v8 + 24), &v11);
      v40 = HIWORD(v42);
      ++v9;
    }
    while (v9 < (unsigned __int16)v57);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = sub_2341EAE40((uint64_t)&v45, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    if (v58)
    {
      LOWORD(v70) = WORD2(v57);
    }
    else
    {
      v21 = HIWORD(v57);
      v23 = 0;
      v22 = 0;
      v24 = 0;
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0;
      v11 = &unk_250515418;
      v25 = a2;
      v26 = -1;
      v27 = 0;
      v28 = 1;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      result = (uint64_t)sub_2341EA094(&v11, *(_QWORD *)(v8 + 24), a4);
      if (*(_DWORD *)a4)
        return result;
      WORD2(v27) = WORD2(v57);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)a4 = 0;
      result = sub_2341EA2B8((uint64_t)&v11, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
      if (*(_DWORD *)a4)
        return result;
    }
    if (WORD1(v70))
      --WORD1(v70);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    result = (uint64_t)sub_2341EAF00((uint64_t)&v59, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      result = *(_QWORD *)(v8 + 16);
      if (result)
        result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 24))(result, a2, &v54[8]);
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
      v10 = 1021;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_2341EB464(uint64_t a1, char a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t result;
  _DWORD v10[6];
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  __int16 v24;
  char v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[28];
  __int16 v36;
  uint64_t v37;
  char v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    return 0;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v48 = 0;
  v39 = &unk_250515388;
  v49 = a2;
  v50 = 0;
  v51 = 0xFFFF;
  v52 = 0;
  memset(v35, 0, sizeof(v35));
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = &unk_250515418;
  v36 = -1;
  v37 = 0;
  v38 = 1;
  v21 = -65536;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v11 = &unk_2505154C8;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  sub_2341EA094(&v39, v5, (uint64_t)v10);
  result = 0;
  if (!v10[0])
  {
    result = sub_2341EA1FC((uint64_t)&v26, *(_QWORD *)(a1 + 24), (uint64_t)&v39, a3);
    if ((_DWORD)result)
      return sub_2341EB604((uint64_t)&v11, *(_QWORD *)(a1 + 24), (uint64_t)&v39, &v26, a4);
  }
  return result;
}

uint64_t sub_2341EB604(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, int a5)
{
  int v9;
  unsigned __int16 v10;
  _QWORD v12[3];

  *(_BYTE *)(a1 + 148) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = a4[72];
  *(_WORD *)(a1 + 146) = a4[82];
  *(_WORD *)(a1 + 150) = 0;
  *(_BYTE *)(a1 + 156) = 1;
  if (a4[83])
  {
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
        break;
      v9 = *(unsigned __int16 *)(a1 + 146);
      if (v9 == a5)
        return 1;
      *(_BYTE *)(a1 + 156) = 0;
      *(_WORD *)(a1 + 154) = v9;
      *(_WORD *)(a1 + 146) = *(_WORD *)(a1 + 152);
      v10 = *(_WORD *)(a1 + 150) + 1;
      *(_WORD *)(a1 + 150) = v10;
    }
    while ((unsigned __int16)a4[83] > v10);
  }
  return 0;
}

uint64_t sub_2341EB6C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  char v26;
  int v27;
  __int16 v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  int v42;
  __int16 v43;
  char v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[27];
  char v55;
  __int16 v56;
  uint64_t v57;
  char v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1039;
    goto LABEL_21;
  }
  v10 = result;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v68 = 0;
  v59 = &unk_250515388;
  v69 = a2;
  v70 = 0;
  v71 = 0xFFFF;
  v72 = 0;
  memset(v54, 0, sizeof(v54));
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = &unk_250515418;
  v55 = 0;
  v56 = -1;
  v57 = 0;
  v58 = 1;
  v12 = 0uLL;
  v13 = 0;
  result = (uint64_t)sub_2341EA094(&v59, v7, (uint64_t)&v12);
  if ((_DWORD)v12 && (_DWORD)v12 != 216)
  {
    *(_OWORD *)a5 = v12;
    a5[2] = v13;
    return result;
  }
  result = sub_2341EA1FC((uint64_t)&v45, *(_QWORD *)(v10 + 24), (uint64_t)&v59, a3);
  if ((result & 1) != 0)
  {
    v40 = -65536;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
    v30 = &unk_2505154C8;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 1;
    result = sub_2341EB604((uint64_t)&v30, *(_QWORD *)(v10 + 24), (uint64_t)&v59, &v45, a4);
    if ((_DWORD)result)
    {
      *(_DWORD *)a5 = 0;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      v11 = 1071;
LABEL_21:
      *((_DWORD *)a5 + 4) = v11;
      return result;
    }
    HIWORD(v40) = a4;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = sub_2341EA2B8((uint64_t)&v30, *(_QWORD *)(v10 + 24), a5);
    if (*(_DWORD *)a5)
      return result;
    if (v44)
    {
      v56 = HIWORD(v40);
LABEL_19:
      LOWORD(v57) = v57 + 1;
      return sub_2341EA2B8((uint64_t)&v45, *(_QWORD *)(v10 + 24), a5);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = sub_2341EA2B8((uint64_t)&v30, *(_QWORD *)(v10 + 24), a5);
    if (!*(_DWORD *)a5)
    {
      v24 = *(_WORD *)&v54[8];
      v25 = v43;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0;
      v14 = &unk_2505154C8;
      v26 = a2;
      v27 = 0;
      v28 = 0;
      v29 = 1;
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      result = (uint64_t)sub_2341EA094(&v14, *(_QWORD *)(v10 + 24), (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        HIWORD(v27) = HIWORD(v40);
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        result = sub_2341EA2B8((uint64_t)&v14, *(_QWORD *)(v10 + 24), a5);
        if (!*(_DWORD *)a5)
          goto LABEL_19;
      }
    }
  }
  else
  {
    if (WORD1(v70) >= *(unsigned __int16 *)(v10 + 8))
    {
      *(_DWORD *)a5 = 31;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      v11 = 1051;
      goto LABEL_21;
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    LOWORD(v40) = a3;
    HIWORD(v40) = a4;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0;
    v30 = &unk_2505154C8;
    v41 = a2;
    v42 = 0;
    v43 = 0;
    v44 = 1;
    result = sub_2341EA2B8((uint64_t)&v30, *(_QWORD *)(v10 + 24), a5);
    if (!*(_DWORD *)a5)
    {
      *(_WORD *)&v54[8] = a3;
      v54[10] = 0;
      v56 = a4;
      LOWORD(v57) = 1;
      HIDWORD(v57) = (unsigned __int16)v70;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      result = sub_2341EA2B8((uint64_t)&v45, *(_QWORD *)(v10 + 24), a5);
      if (!*(_DWORD *)a5)
      {
        LODWORD(v70) = __PAIR32__(WORD1(v70), *(unsigned __int16 *)&v54[8]) + 0x10000;
        a5[1] = 0;
        a5[2] = 0;
        *a5 = 0;
        result = (uint64_t)sub_2341EAF00((uint64_t)&v59, *(_QWORD *)(v10 + 24), a5);
        if (!*(_DWORD *)a5)
        {
          result = *(_QWORD *)(v10 + 16);
          if (result)
            result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)result + 16))(result, a2, &v54[8]);
          *(_DWORD *)a5 = 0;
          a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
          v11 = 1066;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2341EBB34@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v10;
  int v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  char v24;
  int v25;
  __int16 v26;
  char v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;
  int v40;
  __int16 v41;
  char v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[27];
  char v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1097;
LABEL_12:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  v10 = (uint64_t *)result;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v66 = 0;
  v57 = &unk_250515388;
  v67 = a2;
  v68 = 0;
  v69 = 0xFFFF;
  v70 = 0;
  memset(v52, 0, sizeof(v52));
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = &unk_250515418;
  v53 = 0;
  v54 = -1;
  v55 = 0;
  v56 = 1;
  v38 = -65536;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v28 = &unk_2505154C8;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  result = (uint64_t)sub_2341EA094(&v57, v7, a5);
  if (*(_DWORD *)a5)
    return result;
  result = sub_2341EA1FC((uint64_t)&v43, v10[3], (uint64_t)&v57, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a5 = 216;
    *(_QWORD *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1104;
    goto LABEL_12;
  }
  result = sub_2341EB604((uint64_t)&v28, v10[3], (uint64_t)&v57, &v43, a4);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a5 = 216;
    *(_QWORD *)(a5 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1105;
    goto LABEL_12;
  }
  sub_2341EAE40((uint64_t)&v28, v10[3], &v12);
  if (v42)
  {
    v54 = HIWORD(v40);
LABEL_7:
    if ((unsigned __int16)v55 < 2u)
      return (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*v10 + 72))(v10, a2, WORD1(v55));
    LOWORD(v55) = v55 - 1;
    return sub_2341EA2B8((uint64_t)&v43, v10[3], (_QWORD *)a5);
  }
  v22 = *(_WORD *)&v52[8];
  v23 = v41;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v12 = &unk_2505154C8;
  v24 = a2;
  v25 = 0;
  v26 = 0;
  v27 = 1;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  result = (uint64_t)sub_2341EA094(&v12, v10[3], a5);
  if (!*(_DWORD *)a5)
  {
    HIWORD(v25) = HIWORD(v40);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    result = sub_2341EA2B8((uint64_t)&v12, v10[3], (_QWORD *)a5);
    if (!*(_DWORD *)a5)
      goto LABEL_7;
  }
  return result;
}

uint64_t sub_2341EBE44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  unint64_t i;
  int v10;
  _DWORD v11[6];
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  __int16 v25;
  char v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  __int16 v42;
  uint64_t v43;
  char v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 24);
  if (v6)
  {
    v8 = (uint64_t *)result;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v54 = 0;
    v45 = &unk_250515388;
    v55 = a2;
    v56 = 0;
    v57 = 0xFFFF;
    v58 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = (uint64_t)sub_2341EA094(&v45, v6, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return result;
    v37 = v56;
    v39 = 0;
    v38 = 0;
    v40 = 0;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0;
    v27 = &unk_250515418;
    v41 = a2;
    v42 = -1;
    v43 = 0;
    v44 = 1;
    v22 = -65536;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0;
    v12 = &unk_2505154C8;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 1;
    if (WORD1(v56))
    {
      for (i = 0; i < WORD1(v56); ++i)
      {
        result = (uint64_t)sub_2341EA094(&v27, v8[3], (uint64_t)v11);
        if (v11[0])
          break;
        result = sub_2341EB604((uint64_t)&v12, v8[3], (uint64_t)&v45, &v27, a3);
        if ((_DWORD)result)
        {
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          result = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, uint64_t))(*v8 + 96))(v8, a2, v37, a3);
          if (*(_DWORD *)a4)
            return result;
        }
        v37 = WORD2(v43);
      }
    }
    *(_DWORD *)a4 = 0;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v10 = 1163;
  }
  else
  {
    *(_DWORD *)a4 = 172;
    a4[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v10 = 1136;
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

void *sub_2341EC088(uint64_t a1, char a2)
{
  char v3;

  v3 = a2;
  if (*(_QWORD *)(a1 + 24))
    return sub_2341EC0C8((unint64_t *)(a1 + 40), a1, &v3);
  else
    return 0;
}

void *sub_2341EC0C8(unint64_t *a1, uint64_t a2, char *a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v6 = sub_234114774(0x28uLL);
  v7 = v6;
  if (v6)
  {
    sub_2341EC164((uint64_t)v6, a2, *a3);
    v8 = sub_234114774(0x18uLL);
    if (v8)
    {
      *v8 = v7;
      v8[1] = a1 + 2;
      v8[2] = 0;
      v8[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      v9 = a1[1];
      v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9)
        a1[1] = v10;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_2341EC164(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _DWORD v6[6];
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250515010;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = &unk_250515388;
  v17 = a3;
  v18 = 0;
  v19 = 0xFFFF;
  v20 = 0;
  sub_2341EA094(&v7, *(_QWORD *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = v18;
    v4 = WORD1(v18);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_2341EC240(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL sub_2341EC248(uint64_t a1, uint64_t a2)
{
  char v4;
  _BOOL8 v5;
  _DWORD v7[6];
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  _QWORD v19[2];
  char v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 32))
    return 0;
  v4 = *(_BYTE *)(a1 + 16);
  v18 = *(_WORD *)(a1 + 18);
  v19[1] = 0;
  v19[0] = 0;
  v20 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v8 = &unk_250515418;
  v21 = v4;
  v22 = -1;
  v23 = 0;
  v24 = 1;
  sub_2341EA094(&v8, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v7);
  v5 = v7[0] == 0;
  if (!v7[0])
  {
    ++*(_QWORD *)(a1 + 24);
    *(_WORD *)(a1 + 18) = WORD2(v23);
    *(_WORD *)a2 = v18;
    strncpy((char *)(a2 + 2), (const char *)v19, 0x11uLL);
    *(_BYTE *)(a2 + 18) = 0;
  }
  return v5;
}

void sub_2341EC378(uint64_t a1)
{
  sub_2341EC388(*(_QWORD *)(a1 + 8) + 40, (void (***)(_QWORD))a1);
}

void sub_2341EC388(uint64_t a1, void (***a2)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425C1D4(0);
    v5 = v4;
    *v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

void *sub_2341EC41C(uint64_t a1, char a2, int a3)
{
  char v4;
  int v5;

  v5 = a3;
  v4 = a2;
  if (*(_QWORD *)(a1 + 24))
    return sub_2341EC464((unint64_t *)(a1 + 152), a1, &v4, &v5);
  else
    return 0;
}

void *sub_2341EC464(unint64_t *a1, uint64_t a2, char *a3, int *a4)
{
  void *v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v8 = sub_234114774(0x48uLL);
  v9 = v8;
  if (v8)
  {
    sub_2341EC510((uint64_t)v8, a2, *a3, *a4);
    v10 = sub_234114774(0x18uLL);
    if (v10)
    {
      *v10 = v9;
      v10[1] = a1 + 2;
      v10[2] = 0;
      v10[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      v11 = a1[1];
      v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11)
        a1[1] = v12;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_2341EC510(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v9;
  __int16 v10;
  _DWORD v11[6];
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250515048;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v39 = 0;
  v30 = &unk_250515388;
  v40 = a3;
  v41 = 0;
  v42 = 0xFFFF;
  v43 = 0;
  sub_2341EA094(&v30, *(_QWORD *)(a2 + 24), (uint64_t)&v12);
  if (!(_DWORD)v12)
  {
    if ((*(_QWORD *)&a4 & 0xFF0000) != 0)
    {
      v22 = a4;
      v24 = 0;
      v23 = 0;
      v25 = 0;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0;
      v12 = &unk_250515418;
      v26 = a3;
      v27 = -1;
      v28 = 0;
      v29 = 1;
      sub_2341EA094(&v12, *(_QWORD *)(a2 + 24), (uint64_t)v11);
      if (v11[0])
        return a1;
      *(_WORD *)(a1 + 20) = a4;
      *(_WORD *)(a1 + 18) = a4;
      v9 = 1;
    }
    else
    {
      v22 = v41;
      v24 = 0;
      v23 = 0;
      v25 = 0;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0;
      v12 = &unk_250515418;
      v26 = a3;
      v27 = -1;
      v28 = 0;
      v29 = 1;
      sub_2341EA094(&v12, *(_QWORD *)(a2 + 24), (uint64_t)v11);
      if (v11[0])
        return a1;
      v10 = v41;
      *(_WORD *)(a1 + 20) = v41;
      *(_WORD *)(a1 + 18) = v10;
      v9 = WORD1(v41);
    }
    *(_QWORD *)(a1 + 32) = v9;
    *(_WORD *)(a1 + 40) = v27;
    *(_QWORD *)(a1 + 56) = (unsigned __int16)v28;
  }
  return a1;
}

uint64_t sub_2341EC730(uint64_t a1, uint64_t a2, char a3, int a4)
{
  return sub_2341EC510(a1, a2, a3, a4);
}

uint64_t sub_2341EC738(uint64_t a1)
{
  char v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  _DWORD v9[6];
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  char v22;
  int v23;
  __int16 v24;
  char v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v1 = *(_BYTE *)(a1 + 16);
  v36 = *(_WORD *)(a1 + 18);
  v38 = 0;
  v37 = 0;
  v39 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0;
  v26 = &unk_250515418;
  v40 = v1;
  v41 = -1;
  v42 = 0;
  v43 = 1;
  if (!*(_QWORD *)(a1 + 32))
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    sub_2341EA094(&v26, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v10);
    if ((_DWORD)v10)
      break;
    v5 = *(_BYTE *)(a1 + 16);
    v20 = v36;
    v21 = v41;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v10 = &unk_2505154C8;
    v22 = v5;
    v23 = 0;
    v24 = 0;
    v25 = 1;
    if ((_WORD)v42)
    {
      v6 = 0;
      do
      {
        sub_2341EA094(&v10, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v9);
        if (v9[0])
          break;
        v21 = HIWORD(v23);
        ++v6;
      }
      while (v6 < (unsigned __int16)v42);
      v3 += v6;
    }
    v36 = WORD2(v42);
  }
  while (v4++ < *(_QWORD *)(a1 + 32));
  return v3;
}

BOOL sub_2341EC8F8(uint64_t a1, _WORD *a2)
{
  __int16 v4;
  char v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD v14[6];
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char v27;
  int v28;
  __int16 v29;
  char v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 32))
    return 0;
  v4 = *(_WORD *)(a1 + 20);
  while (1)
  {
    v5 = *(_BYTE *)(a1 + 16);
    v41 = v4;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0;
    v31 = &unk_250515418;
    v45 = v5;
    v46 = -1;
    v47 = 0;
    v48 = 1;
    sub_2341EA094(&v31, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v15);
    v6 = (_DWORD)v15 == 0;
    if ((_DWORD)v15)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 32);
      return v6;
    }
    if (*(_BYTE *)(a1 + 64))
    {
      v7 = 0;
      *(_WORD *)(a1 + 40) = v46;
      v8 = (unsigned __int16)v47;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = v8;
      *(_BYTE *)(a1 + 64) = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
    }
    if (v7 < v8)
    {
      v9 = *(_BYTE *)(a1 + 16);
      v10 = *(_WORD *)(a1 + 40);
      v25 = *(_WORD *)(a1 + 20);
      v26 = v10;
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      v15 = &unk_2505154C8;
      v27 = v9;
      v28 = 0;
      v29 = 0;
      v30 = 1;
      sub_2341EA094(&v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v14);
      if (!v14[0])
        break;
    }
    v4 = WORD2(v47);
    *(_WORD *)(a1 + 20) = WORD2(v47);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 24) + 1;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 64) = 1;
    if (v12 >= v11)
      return 0;
  }
  *a2 = v41;
  a2[1] = v26;
  *(_WORD *)(a1 + 40) = HIWORD(v28);
  ++*(_QWORD *)(a1 + 48);
  return v6;
}

void sub_2341ECAFC(uint64_t a1)
{
  sub_2341EC388(*(_QWORD *)(a1 + 8) + 152, (void (***)(_QWORD))a1);
}

_QWORD *sub_2341ECB0C@<X0>(_QWORD *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, unsigned __int16 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  _QWORD *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  char v41;
  int v42;
  char v43;
  int v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v7 = result[3];
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1351;
    goto LABEL_8;
  }
  v10 = result;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v54 = 0;
  v45 = &unk_250515388;
  v55 = a2;
  v56 = 0;
  v57 = 0xFFFF;
  v58 = 0;
  v42 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = 1;
  v30 = &unk_250515578;
  v43 = a2;
  v44 = 0;
  v12 = 0uLL;
  v13 = 0;
  result = sub_2341EA094(&v45, v7, (uint64_t)&v12);
  if ((_DWORD)v12 && (_DWORD)v12 != 216)
  {
    *(_OWORD *)a5 = v12;
    a5[2] = v13;
    return result;
  }
  result = (_QWORD *)sub_2341ECE2C((uint64_t)&v30, v10[3], (uint64_t)&v45, a4);
  if ((_DWORD)result && WORD5(v39) != a3)
  {
    *(_DWORD *)a5 = 26;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1362;
LABEL_8:
    *((_DWORD *)a5 + 4) = v11;
    return result;
  }
  result = (_QWORD *)sub_2341ECF24((uint64_t)&v30, v10[3], (uint64_t)&v45, a3);
  v44 = *(_DWORD *)a4;
  if ((_DWORD)result)
    return (_QWORD *)sub_2341EA2B8((uint64_t)&v30, v10[3], a5);
  if (HIWORD(v56) != a3)
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1375;
    goto LABEL_8;
  }
  if (HIWORD(v56) >= *((unsigned __int16 *)v10 + 4))
  {
    *(_DWORD *)a5 = 31;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1376;
    goto LABEL_8;
  }
  WORD6(v39) = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = (_QWORD *)sub_2341EA2B8((uint64_t)&v30, v10[3], a5);
  if (!*(_DWORD *)a5)
  {
    if (v41)
    {
      WORD2(v56) = WORD4(v39);
LABEL_18:
      ++HIWORD(v56);
      return sub_2341EAF00((uint64_t)&v45, v10[3], a5);
    }
    v27 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0;
    v24 = HIWORD(v39);
    v25 = 0;
    v26 = 1;
    v14 = &unk_250515578;
    v28 = a2;
    v29 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = sub_2341EA094(&v14, v10[3], (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      WORD1(v25) = WORD4(v39);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      result = (_QWORD *)sub_2341EA2B8((uint64_t)&v14, v10[3], a5);
      if (!*(_DWORD *)a5)
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_2341ECE2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  unsigned int v5;
  unsigned int v9;
  unsigned __int16 v10;
  uint64_t result;
  _QWORD v12[3];

  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(_BYTE *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_10;
      }
      if (*(unsigned __int16 *)(a1 + 162) == *a4 && *(unsigned __int16 *)(a1 + 164) == a4[1])
        return 1;
      v9 = *(unsigned __int16 *)(a1 + 144);
      v5 = *(unsigned __int16 *)(a1 + 152);
      if (v9 > v5)
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      *(_WORD *)(a1 + 152) = v5;
      *(_BYTE *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v9;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      v10 = *(_WORD *)(a1 + 146) + 1;
      *(_WORD *)(a1 + 146) = v10;
      if (*(unsigned __int16 *)(a3 + 152) <= v10)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    result = 0;
    *(_WORD *)(a1 + 144) = v5 + 1;
  }
  return result;
}

uint64_t sub_2341ECF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  unsigned __int16 v11;
  uint64_t result;
  _QWORD v13[3];

  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(_BYTE *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v13, a1, a2);
      if (LODWORD(v13[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_9;
      }
      v9 = *(unsigned __int16 *)(a1 + 146);
      if (v9 == a4)
        return 1;
      v10 = *(unsigned __int16 *)(a1 + 144);
      v5 = *(unsigned __int16 *)(a1 + 152);
      if (v10 > v5)
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      *(_WORD *)(a1 + 152) = v5;
      *(_BYTE *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v10;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      v11 = v9 + 1;
      *(_WORD *)(a1 + 146) = v11;
      if (*(unsigned __int16 *)(a3 + 152) <= v11)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    result = 0;
    *(_WORD *)(a1 + 144) = v5 + 1;
  }
  return result;
}

uint64_t sub_2341ED004@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  int v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 24);
  if (v7)
  {
    v10 = result;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v38 = 0;
    v29 = &unk_250515388;
    v39 = a2;
    v40 = 0;
    v41 = 0xFFFF;
    v42 = 0;
    v26 = 0;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v23 = 1;
    v24 = 0;
    v25 = 1;
    v13 = &unk_250515578;
    v27 = 0;
    v28 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = (uint64_t)sub_2341EA094(&v29, v7, (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    result = sub_2341ECF24((uint64_t)&v13, *(_QWORD *)(v10 + 24), (uint64_t)&v29, a3);
    if ((_DWORD)result)
    {
      v11 = 0;
      *a4 = v28;
      v12 = 1412;
    }
    else
    {
      v12 = 1407;
      v11 = 216;
    }
    *(_DWORD *)a5 = v11;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v12 = 1401;
  }
  *((_DWORD *)a5 + 4) = v12;
  return result;
}

uint64_t sub_2341ED1A0@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  char v38;
  int v39;
  char v40;
  int v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1417;
LABEL_12:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  v8 = result;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v51 = 0;
  v42 = &unk_250515388;
  v52 = a2;
  v53 = 0;
  v54 = 0xFFFF;
  v55 = 0;
  v39 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v36 = 1;
  v37 = 0;
  v38 = 1;
  v35 = 0;
  v26 = &unk_250515578;
  v40 = 0;
  v41 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = (uint64_t)sub_2341EA094(&v42, v6, a4);
  if (*(_DWORD *)a4)
    return result;
  result = sub_2341ECF24((uint64_t)&v26, *(_QWORD *)(v8 + 24), (uint64_t)&v42, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 1423;
    goto LABEL_12;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = sub_2341EAE40((uint64_t)&v26, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return result;
  if (v38)
  {
    WORD2(v53) = WORD1(v37);
  }
  else
  {
    v23 = 0;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    v20 = WORD2(v37);
    v21 = 0;
    v22 = 1;
    v10 = &unk_250515578;
    v24 = a2;
    v25 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = (uint64_t)sub_2341EA094(&v10, *(_QWORD *)(v8 + 24), a4);
    if (*(_DWORD *)a4)
      return result;
    WORD1(v21) = WORD1(v37);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = sub_2341EA2B8((uint64_t)&v10, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
    if (*(_DWORD *)a4)
      return result;
  }
  if (HIWORD(v53))
    --HIWORD(v53);
  return (uint64_t)sub_2341EAF00((uint64_t)&v42, *(_QWORD *)(v8 + 24), (_QWORD *)a4);
}

_QWORD *sub_2341ED408@<X0>(_QWORD *result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  _QWORD v9[3];
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = result[3];
  if (!v5)
  {
    *(_DWORD *)a3 = 172;
    *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v7 = 1449;
    goto LABEL_5;
  }
  v6 = result;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v35 = 0;
  v26 = &unk_250515388;
  v36 = a2;
  v37 = 0;
  v38 = 0xFFFF;
  v39 = 0;
  result = sub_2341EA094(&v26, v5, (uint64_t)&v10);
  if ((_DWORD)v10)
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v7 = 1452;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  v23 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = WORD2(v37);
  v22 = 1;
  v21 = 0;
  v10 = &unk_250515578;
  v24 = a2;
  v25 = 0;
  if (HIWORD(v37))
  {
    v8 = 0;
    do
    {
      sub_2341EA094(&v10, v6[3], (uint64_t)v9);
      if (LODWORD(v9[0]))
        break;
      sub_2341EAE40((uint64_t)&v10, v6[3], v9);
      v20 = WORD1(v21);
      ++v8;
    }
    while (v8 < HIWORD(v37));
  }
  HIDWORD(v37) = 0;
  return sub_2341EAF00((uint64_t)&v26, v6[3], (_QWORD *)a3);
}

void *sub_2341ED5D4(uint64_t a1, char a2)
{
  char v3;

  v3 = a2;
  if (*(_QWORD *)(a1 + 24))
    return sub_2341ED614((unint64_t *)(a1 + 96), a1, &v3);
  else
    return 0;
}

void *sub_2341ED614(unint64_t *a1, uint64_t a2, char *a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v6 = sub_234114774(0x28uLL);
  v7 = v6;
  if (v6)
  {
    sub_2341ED6B0((uint64_t)v6, a2, *a3);
    v8 = sub_234114774(0x18uLL);
    if (v8)
    {
      *v8 = v7;
      v8[1] = a1 + 2;
      v8[2] = 0;
      v8[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      v9 = a1[1];
      v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9)
        a1[1] = v10;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_2341ED6B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _DWORD v6[6];
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250515080;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = &unk_250515388;
  v17 = a3;
  v18 = 0;
  v19 = 0xFFFF;
  v20 = 0;
  sub_2341EA094(&v7, *(_QWORD *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = WORD2(v18);
    v4 = HIWORD(v18);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_2341ED78C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL sub_2341ED794(uint64_t a1, _DWORD *a2)
{
  char v4;
  __int16 v5;
  _BOOL8 result;
  _DWORD v7[6];
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 32))
    return 0;
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_WORD *)(a1 + 18);
  v21 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v18 = v5;
  v19 = 0;
  v20 = 1;
  v8 = &unk_250515578;
  v22 = v4;
  v23 = 0;
  sub_2341EA094(&v8, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v7);
  result = v7[0] == 0;
  if (!v7[0])
  {
    ++*(_QWORD *)(a1 + 24);
    *(_WORD *)(a1 + 18) = WORD1(v19);
    *a2 = v23;
  }
  return result;
}

void sub_2341ED8A4(uint64_t a1)
{
  sub_2341EC388(*(_QWORD *)(a1 + 8) + 96, (void (***)(_QWORD))a1);
}

void sub_2341ED8B4(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18[2];
  __int128 v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v17 = 1525;
    goto LABEL_11;
  }
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v54 = 0;
  v45 = &unk_250515388;
  v55 = a2;
  v56 = 0;
  v57 = 0xFFFF;
  v58 = 0;
  v30 = 0;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v20 = 0;
  v21 = &unk_250515640;
  v31 = 0;
  v32 = -1;
  v33 = 1;
  v34 = 0x10000;
  v19 = 0uLL;
  sub_2341EA094(&v45, v7, (uint64_t)&v19);
  if ((_DWORD)v19 && (_DWORD)v19 != 216)
  {
    *(_OWORD *)a5 = v19;
    a5[2] = v20;
    return;
  }
  v11 = sub_2341EDB8C((uint64_t)&v21, *(_QWORD *)(a1 + 24), (uint64_t)&v45, *((unsigned __int16 *)a4 + 36));
  v34 = *((_DWORD *)a4 + 18);
  v12 = &v35;
  v42 = 0u;
  v43 = 0u;
  v38 = 0u;
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v13 = a4[3];
  v35 = *a4;
  *((_QWORD *)&v38 + 1) = v13;
  v14 = a4[6];
  v44 = 0;
  *((_QWORD *)&v41 + 1) = v14;
  if (!HIBYTE(v34))
  {
LABEL_8:
    if (v11)
    {
      sub_2341EA2B8((uint64_t)&v21, *(_QWORD *)(a1 + 24), a5);
      return;
    }
    if (HIWORD(v57) < *(unsigned __int16 *)(a1 + 10))
    {
      LOWORD(v32) = v57;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      sub_2341EA2B8((uint64_t)&v21, *(_QWORD *)(a1 + 24), a5);
      if (!*(_DWORD *)a5)
      {
        ++HIWORD(v57);
        LOWORD(v57) = *((_WORD *)a4 + 36);
        sub_2341EAF00((uint64_t)&v45, *(_QWORD *)(a1 + 24), a5);
      }
      return;
    }
    *(_DWORD *)a5 = 31;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v17 = 1560;
LABEL_11:
    *((_DWORD *)a5 + 4) = v17;
    return;
  }
  v15 = 0;
  v16 = (uint64_t)(a4 + 1);
  while (1)
  {
    sub_233BF7114(v18, v16, 16);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_234134B64(v18, a3, (uint64_t)v12, a5);
    if (*(_DWORD *)a5)
      break;
    ++v15;
    v16 += 24;
    v12 += 6;
    if (v15 >= *((unsigned __int8 *)a4 + 75))
      goto LABEL_8;
  }
}

uint64_t sub_2341EDB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  _QWORD v12[3];

  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a3 + 154);
  *(_BYTE *)(a1 + 150) = 1;
  if (*(_WORD *)(a3 + 156))
  {
    v8 = 1;
    do
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
        break;
      v9 = *(unsigned __int16 *)(a1 + 152);
      if (v9 == a4)
        return 1;
      *(_BYTE *)(a1 + 150) = 0;
      *(_WORD *)(a1 + 148) = v9;
      *(_WORD *)(a1 + 152) = *(_WORD *)(a1 + 146);
    }
    while (*(unsigned __int16 *)(a3 + 156) > (unsigned __int16)v8++);
  }
  return 0;
}

uint64_t sub_2341EDC48@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t i;
  int v12;
  uint64_t v13;
  int v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(result + 24);
  if (v7)
  {
    v10 = result;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v41 = 0;
    v32 = &unk_250515388;
    v42 = a2;
    v43 = 0;
    v44 = 0xFFFF;
    v45 = 0;
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = &unk_250515640;
    v25 = 0;
    v26 = -1;
    v27 = 1;
    v28 = 0x10000;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    result = (uint64_t)sub_2341EA094(&v32, v7, (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      result = sub_2341EDB8C((uint64_t)&v15, *(_QWORD *)(v10 + 24), (uint64_t)&v32, a3);
      if ((_DWORD)result)
      {
        for (i = 0; i != 72; i += 24)
        {
          *(_QWORD *)(a4 + i) = 0;
          result = sub_23413A7A4(a4 + i + 8, 16);
        }
        v12 = 0;
        *(_DWORD *)(a4 + 72) = v28;
        v13 = v30;
        *(_QWORD *)a4 = v29;
        *(_QWORD *)(a4 + 24) = v13;
        *(_QWORD *)(a4 + 48) = v31;
        v14 = 1591;
      }
      else
      {
        v14 = 1579;
        v12 = 216;
      }
      *(_DWORD *)a5 = v12;
      a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a5 + 4) = v14;
    }
  }
  else
  {
    *(_DWORD *)a5 = 172;
    a5[1] = "src/credentials/GroupDataProviderImpl.cpp";
    *((_DWORD *)a5 + 4) = 1573;
  }
  return result;
}

uint64_t sub_2341EDE0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD v12[3];
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  char v27;
  int v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  int v40;
  char v41;
  int v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 24);
  if (!v6)
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1596;
LABEL_17:
    *(_DWORD *)(a4 + 16) = v11;
    return result;
  }
  v8 = (uint64_t *)result;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v52 = 0;
  v43 = &unk_250515388;
  v53 = a2;
  v54 = 0;
  v55 = 0xFFFF;
  v56 = 0;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v38 = 0;
  v29 = &unk_250515640;
  v39 = 0;
  v40 = -1;
  v41 = 1;
  v42 = 0x10000;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  result = (uint64_t)sub_2341EA094(&v43, v6, a4);
  if (*(_DWORD *)a4)
    return result;
  result = sub_2341EDB8C((uint64_t)&v29, v8[3], (uint64_t)&v43, a3);
  if ((result & 1) == 0)
  {
    *(_DWORD *)a4 = 216;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1602;
    goto LABEL_17;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = sub_2341EAE40((uint64_t)&v29, v8[3], (_QWORD *)a4);
  if (*(_DWORD *)a4)
    return result;
  if (v41)
  {
    LOWORD(v55) = v40;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v13 = &unk_250515640;
    LOBYTE(v23) = a2;
    LODWORD(v24) = -1;
    BYTE4(v24) = 1;
    v25 = 1;
    HIWORD(v24) = HIWORD(v40);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = (uint64_t)sub_2341EA094(&v13, v8[3], a4);
    if (*(_DWORD *)a4)
      return result;
    LOWORD(v24) = v40;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    result = sub_2341EA2B8((uint64_t)&v13, v8[3], (_QWORD *)a4);
    if (*(_DWORD *)a4)
      return result;
  }
  if (HIWORD(v55))
    --HIWORD(v55);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = (uint64_t)sub_2341EAF00((uint64_t)&v43, v8[3], (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    v26 = 0;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
    v23 = 1;
    LOBYTE(v25) = 1;
    v24 = 0;
    v13 = &unk_250515578;
    v27 = 0;
    v28 = 0;
    v9 = HIWORD(v54);
    if (HIWORD(v54))
    {
      v10 = 0;
      do
      {
        sub_2341EA094(&v43, v8[3], (uint64_t)v12);
        result = sub_2341EE14C((uint64_t)&v13, v8[3], (uint64_t)&v43, a3);
        if (result == -1)
          break;
        result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(*v8 + 144))(v12, v8, a2, result);
        ++v10;
      }
      while (v10 < v9);
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v11 = 1641;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_2341EE14C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v5;
  unsigned int v9;
  unsigned __int16 v10;
  _QWORD v12[3];

  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a3 + 144);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a3 + 150);
  *(_WORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 146) = 0;
  *(_BYTE *)(a1 + 154) = 1;
  LOWORD(v5) = *(_WORD *)(a3 + 152);
  if ((_WORD)v5)
  {
    while (1)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(v12, a1, a2);
      if (LODWORD(v12[0]))
      {
        LOWORD(v5) = *(_WORD *)(a1 + 152);
        goto LABEL_9;
      }
      if (*(unsigned __int16 *)(a1 + 164) == a4)
        return *(unsigned __int16 *)(a1 + 146);
      v9 = *(unsigned __int16 *)(a1 + 144);
      v5 = *(unsigned __int16 *)(a1 + 152);
      if (v9 > v5)
        LOWORD(v5) = *(_WORD *)(a1 + 144);
      *(_WORD *)(a1 + 152) = v5;
      *(_BYTE *)(a1 + 154) = 0;
      *(_WORD *)(a1 + 150) = v9;
      *(_WORD *)(a1 + 144) = *(_WORD *)(a1 + 148);
      v10 = *(_WORD *)(a1 + 146) + 1;
      *(_WORD *)(a1 + 146) = v10;
      if (*(unsigned __int16 *)(a3 + 152) <= v10)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    *(_WORD *)(a1 + 144) = v5 + 1;
    return -1;
  }
}

void *sub_2341EE230(uint64_t a1, char a2)
{
  char v3;

  v3 = a2;
  if (*(_QWORD *)(a1 + 24))
    return sub_2341EE270((unint64_t *)(a1 + 208), a1, &v3);
  else
    return 0;
}

void *sub_2341EE270(unint64_t *a1, uint64_t a2, char *a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v6 = sub_234114774(0x28uLL);
  v7 = v6;
  if (v6)
  {
    sub_2341EE30C((uint64_t)v6, a2, *a3);
    v8 = sub_234114774(0x18uLL);
    if (v8)
    {
      *v8 = v7;
      v8[1] = a1 + 2;
      v8[2] = 0;
      v8[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      v9 = a1[1];
      v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9)
        a1[1] = v10;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_2341EE30C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _DWORD v6[6];
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_2505150B8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = &unk_250515388;
  v17 = a3;
  v18 = 0;
  v19 = 0xFFFF;
  v20 = 0;
  sub_2341EA094(&v7, *(_QWORD *)(a2 + 24), (uint64_t)v6);
  if (!v6[0])
  {
    *(_WORD *)(a1 + 18) = v19;
    v4 = HIWORD(v19);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v4;
  }
  return a1;
}

uint64_t sub_2341EE3E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL sub_2341EE3F0(uint64_t a1, uint64_t a2)
{
  char v4;
  __int16 v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v10[6];
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  int v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 32))
    return 0;
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_WORD *)(a1 + 18);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v11 = &unk_250515640;
  v21 = v4;
  v22 = -1;
  v23 = 1;
  HIWORD(v24) = 1;
  LOWORD(v24) = v5;
  sub_2341EA094(&v11, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)v10);
  v6 = v10[0] == 0;
  if (!v10[0])
  {
    v7 = 0;
    ++*(_QWORD *)(a1 + 24);
    *(_WORD *)(a1 + 18) = v22;
    do
    {
      *(_QWORD *)(a2 + v7) = 0;
      sub_23413A7A4(a2 + v7 + 8, 16);
      v7 += 24;
    }
    while (v7 != 72);
    *(_DWORD *)(a2 + 72) = v24;
    v8 = v26;
    *(_QWORD *)a2 = v25;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 48) = v27;
  }
  return v6;
}

void sub_2341EE538(uint64_t a1)
{
  sub_2341EC388(*(_QWORD *)(a1 + 8) + 208, (void (***)(_QWORD))a1);
}

double sub_2341EE548@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  int v28;
  char v29;
  unsigned __int16 v30;
  __int16 v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v41 = 0;
  v32 = &unk_250515388;
  v42 = a2;
  v43 = 0;
  v44 = 0xFFFF;
  v45 = 0;
  v15 = 0uLL;
  v16 = 0;
  sub_2341EA094(&v32, a1[3], (uint64_t)&v15);
  if ((_DWORD)v15 != 216 && (_DWORD)v15)
  {
    result = *(double *)&v15;
    *(_OWORD *)a3 = v15;
    a3[2] = v16;
  }
  else
  {
    v6 = HIWORD(v43);
    if (HIWORD(v43))
    {
      v7 = 0;
      v8 = -1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t, uint64_t))(*a1 + 144))(&v17, a1, a2, v6 + v8);
        ++v7;
        v6 = HIWORD(v43);
        --v8;
      }
      while (v7 < HIWORD(v43));
    }
    v9 = WORD1(v43);
    if (WORD1(v43))
    {
      v10 = 0;
      v11 = -1;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t *, uint64_t, uint64_t))(*a1 + 72))(&v17, a1, a2, v9 + v11);
        ++v10;
        v9 = WORD1(v43);
        --v11;
      }
      while (v10 < WORD1(v43));
    }
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0;
    v17 = &unk_250515640;
    v27 = a2;
    v28 = -1;
    v29 = 1;
    v31 = 1;
    v30 = v44;
    if (HIWORD(v44))
    {
      v12 = 0;
      do
      {
        sub_2341EA094(&v17, a1[3], (uint64_t)v14);
        if (LODWORD(v14[0]))
          break;
        (*(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t, _QWORD))(*a1 + 184))(v14, a1, a2, v30);
        v30 = v28;
        ++v12;
      }
      while (v12 < HIWORD(v44));
    }
    sub_2341EE780((uint64_t)&v32, a1[3], a3);
  }
  return result;
}

_QWORD *sub_2341EE780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_2341F1214(a1, a2, a3);
  if (!*(_DWORD *)a3)
    return (_QWORD *)sub_2341EAE40(a1, a2, a3);
  return result;
}

char *sub_2341EE7DC(uint64_t a1, char a2, int a3)
{
  char *result;
  unsigned int i;
  BOOL v7;
  __int16 *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  v42 = 0u;
  v50 = 0;
  v41 = &unk_250515388;
  v51 = a2;
  v52 = 0;
  v53 = 0xFFFF;
  v54 = 0;
  sub_2341EA094(&v41, *(_QWORD *)(a1 + 24), (uint64_t)&v9);
  result = 0;
  if (!(_DWORD)v9)
  {
    v38 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v35 = WORD2(v52);
    v36 = 0;
    v37 = 1;
    v34 = 0;
    v25 = &unk_250515578;
    v39 = v51;
    v40 = 0;
    if (HIWORD(v52))
    {
      for (i = 0; i < HIWORD(v52); ++i)
      {
        sub_2341EA094(&v25, *(_QWORD *)(a1 + 24), (uint64_t)&v9);
        if ((_DWORD)v9)
          return 0;
        if (HIWORD(v40))
          v7 = (unsigned __int16)v40 == a3;
        else
          v7 = 0;
        if (v7)
        {
          v18 = 0;
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          v12 = 0u;
          v13 = 0u;
          v10 = 0u;
          v11 = 0u;
          v9 = &unk_250515640;
          v19 = 0;
          v20 = -1;
          v21 = 1;
          v22 = 0x10000;
          if (!sub_2341EDB8C((uint64_t)&v9, *(_QWORD *)(a1 + 24), (uint64_t)&v41, HIWORD(v40)))
            return 0;
          if (HIBYTE(v22) - 1 < 2)
          {
            v8 = (__int16 *)&v23;
            return sub_2341EEA14((unint64_t *)(a1 + 320), a1, (uint64_t)(v8 + 5), v8 + 4, (uint64_t)(v8 + 13));
          }
          if (HIBYTE(v22) == 3)
          {
            v8 = (__int16 *)&v24;
            return sub_2341EEA14((unint64_t *)(a1 + 320), a1, (uint64_t)(v8 + 5), v8 + 4, (uint64_t)(v8 + 13));
          }
        }
        v35 = WORD1(v36);
      }
    }
    return 0;
  }
  return result;
}

char *sub_2341EEA14(unint64_t *a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5)
{
  char *v10;
  char *v11;
  __int16 v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  v10 = (char *)sub_234114774(0x38uLL);
  v11 = v10;
  if (v10)
  {
    v12 = *a4;
    *(_QWORD *)v10 = off_250515248;
    *((_QWORD *)v10 + 1) = a2;
    *((_WORD *)v10 + 8) = 0;
    *(_OWORD *)(v10 + 24) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    sub_2341EF6C8((uint64_t)v10, a3, v12, a5);
    v13 = sub_234114774(0x18uLL);
    if (v13)
    {
      *v13 = v11;
      v13[1] = a1 + 2;
      v13[2] = 0;
      v13[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v13;
      a1[4] = (unint64_t)v13;
      v14 = a1[1];
      v15 = *a1 + 1;
      *a1 = v15;
      if (v15 > v14)
        a1[1] = v15;
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

uint64_t sub_2341EEAE0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v37 = 0;
  v28 = &unk_250515388;
  v38 = a2;
  v39 = 0;
  v40 = 0xFFFF;
  v41 = 0;
  result = (uint64_t)sub_2341EA094(&v28, *(_QWORD *)(a1 + 24), (uint64_t)&v13);
  if ((_DWORD)v13)
  {
    *(_DWORD *)a4 = 216;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
    v8 = 1775;
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = &unk_250515640;
    v23 = 0;
    v24 = -1;
    v25 = 1;
    v26 = 0x10000;
    result = sub_2341EDB8C((uint64_t)&v13, *(_QWORD *)(a1 + 24), (uint64_t)&v28, 0);
    if ((_DWORD)result)
    {
      if ((_WORD)v26)
      {
        v8 = 1784;
        v9 = 172;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        *(_WORD *)(a3 + 72) = 0;
        *(_WORD *)(a3 + 74) = HIWORD(v26);
        v12 = &v27;
        do
        {
          *(_QWORD *)(a3 + v10) = 0;
          result = sub_23413A7A4(a3 + v10 + 8, 16);
          if (v11 < HIBYTE(v26))
          {
            *(_QWORD *)(a3 + v10) = *v12;
            *(_OWORD *)(a3 + v10 + 8) = *(_OWORD *)((char *)v12 + 10);
          }
          ++v11;
          v10 += 24;
          v12 += 6;
        }
        while (v10 != 72);
        v9 = 0;
        v8 = 1800;
      }
    }
    else
    {
      v8 = 1781;
      v9 = 216;
    }
    *(_DWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  }
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

void sub_2341EECD0(_QWORD *a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1[1] + 32);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 40))(v2, a1 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 40))(v2, a1 + 5);
  sub_2341EED28(a1[1] + 320, a1);
}

void sub_2341EED28(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425C1D4(0);
    v5 = v4;
    *v4 = 0;
    (*(void (**)(void *))(*(_QWORD *)a2 + 8))(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

void sub_2341EEDBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
  sub_234138F5C(*(char **)a2, *(_QWORD *)(a2 + 8), a1 + 24, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *a5, a6, *(char **)a4, *(_QWORD *)(a4 + 8));
}

void sub_2341EEE04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
  sub_2341391E0(*(char **)a2, *(_QWORD *)(a2 + 8), *a4, a4[1], a1 + 24, *a3, a6, a3[1], *a5);
}

void sub_2341EEE4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t a5@<X8>)
{
  sub_234134704(*(char **)a2, *(_QWORD *)(a2 + 8), a1 + 40, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *a4, a5);
}

void sub_2341EEE6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t a5@<X8>)
{
  sub_234134704(*(char **)a2, *(_QWORD *)(a2 + 8), a1 + 40, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *a4, a5);
}

void *sub_2341EEE8C(uint64_t a1, __int16 a2)
{
  __int16 v3;

  v3 = a2;
  if (*(_QWORD *)(a1 + 24))
    return sub_2341EEECC((unint64_t *)(a1 + 264), a1, &v3);
  else
    return 0;
}

void *sub_2341EEECC(unint64_t *a1, uint64_t a2, __int16 *a3)
{
  void *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v6 = sub_234114774(0x60uLL);
  v7 = v6;
  if (v6)
  {
    sub_2341EEF68((uint64_t)v6, a2, *a3);
    v8 = sub_234114774(0x18uLL);
    if (v8)
    {
      *v8 = v7;
      v8[1] = a1 + 2;
      v8[2] = 0;
      v8[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v8;
      a1[4] = (unint64_t)v8;
      v9 = a1[1];
      v10 = *a1 + 1;
      *a1 = v10;
      if (v10 > v9)
        a1[1] = v10;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_2341EEF68(uint64_t a1, uint64_t a2, __int16 a3)
{
  char v4;
  _QWORD v6[3];
  void *v7;
  __int128 v8;
  _BYTE v9[25];
  __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_2505150F0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 18) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = off_250515248;
  *(_QWORD *)(a1 + 48) = a2;
  *(_WORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = 0;
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  v7 = &unk_2505156C0;
  memset(v6, 0, sizeof(v6));
  sub_2341EF050(&v7, *(_QWORD *)(a2 + 24), (uint64_t)v6);
  if (!LODWORD(v6[0]))
  {
    v4 = v9[24];
    *(_BYTE *)(a1 + 18) = v9[24];
    *(_BYTE *)(a1 + 19) = v4;
    *(_WORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 22) = v10;
    *(_WORD *)(a1 + 26) = 0;
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

_QWORD *sub_2341EF050@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  double v7;
  _BYTE v8[72];
  __int128 v9;
  uint64_t v10;
  unsigned __int16 v11;
  _OWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/lib/support/PersistentData.h";
    v6 = 62;
    goto LABEL_6;
  }
  v5 = result;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _OWORD *))(*result + 16))(result, v12);
  if (*(_DWORD *)a3)
    return result;
  (*(void (**)(_QWORD *))(*v5 + 40))(v5);
  v11 = 32;
  v10 = 0;
  v9 = 0uLL;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, _OWORD *, _QWORD *, unsigned __int16 *))(*(_QWORD *)a2 + 16))(&v9, a2, v12, v5 + 2, &v11);
  if ((_DWORD)v9 == 160)
  {
    *(_DWORD *)a3 = 216;
    *(_QWORD *)(a3 + 8) = "src/lib/support/PersistentData.h";
    v6 = 75;
LABEL_6:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v10;
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)v8);
    v7 = sub_234104498((uint64_t)v8, (uint64_t)(v5 + 2), v11);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _BYTE *, double))(*v5 + 32))(v5, v8, v7);
  }
  return result;
}

uint64_t sub_2341EF1BC(uint64_t a1)
{
  char v1;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  char v37;
  int v38;
  char v39;
  int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v1 = *(_BYTE *)(a1 + 18);
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v41 = &unk_250515388;
  v51 = v1;
  v52 = 0;
  v53 = 0xFFFF;
  v54 = 0;
  if (!*(_WORD *)(a1 + 22))
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    sub_2341EA094(&v41, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v10);
    if ((_DWORD)v10)
      break;
    v38 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0;
    v35 = WORD2(v52);
    v36 = 0;
    v37 = 1;
    v25 = &unk_250515578;
    v39 = v51;
    v40 = 0;
    if (HIWORD(v52))
    {
      v5 = 0;
      do
      {
        sub_2341EA094(&v25, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v10);
        if ((_DWORD)v10)
          break;
        v19 = 0;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = &unk_250515640;
        v20 = 0;
        v21 = -1;
        v22 = 1;
        v23 = 0x10000;
        if (!sub_2341EDB8C((uint64_t)&v10, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v41, HIWORD(v40)))break;
        v6 = HIBYTE(v23);
        if (HIBYTE(v23))
        {
          v7 = (unsigned __int16 *)&v24;
          do
          {
            v8 = *v7;
            v7 += 24;
            if (v8 == *(unsigned __int16 *)(a1 + 16))
              ++v4;
            --v6;
          }
          while (v6);
        }
        ++v5;
        v35 = WORD1(v36);
      }
      while (v5 < HIWORD(v52));
    }
    ++v3;
    v51 = v54;
  }
  while (v3 < *(unsigned __int16 *)(a1 + 22));
  return v4;
}

uint64_t sub_2341EF3F4(uint64_t a1, uint64_t a2)
{
  char v2;
  __int128 v4;
  char v5;
  __int16 v6;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  uint64_t v12;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  int v25;
  char v26;
  int v27;
  _BYTE v28[136];
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  char v41;
  int v42;
  char v43;
  int v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v12 = a1 + 40;
  v4 = 0uLL;
  while (*(unsigned __int16 *)(a1 + 20) < *(unsigned __int16 *)(a1 + 22))
  {
    v5 = *(_BYTE *)(a1 + 19);
    v46 = v4;
    v47 = v4;
    v48 = v4;
    v49 = v4;
    v50 = v4;
    v51 = v4;
    v52 = v4;
    v53 = v4;
    v54 = 0;
    v45 = &unk_250515388;
    v55 = v5;
    v56 = 0;
    v57 = 0xFFFF;
    v58 = 0;
    sub_2341EA094(&v45, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v14);
    if ((_DWORD)v14)
      break;
    if (*(unsigned __int16 *)(a1 + 26) >= HIWORD(v56))
    {
      *(_BYTE *)(a1 + 19) = v58;
      ++*(_WORD *)(a1 + 20);
      *(_BYTE *)(a1 + 32) = 1;
      *(_WORD *)(a1 + 26) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 32))
      {
        v6 = WORD2(v56);
        *(_WORD *)(a1 + 24) = WORD2(v56);
        *(_BYTE *)(a1 + 32) = 0;
      }
      else
      {
        v6 = *(_WORD *)(a1 + 24);
      }
      v8 = *(_BYTE *)(a1 + 19);
      v42 = 0;
      v30 = 0uLL;
      v31 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      v38 = 0;
      v39 = v6;
      v40 = 0;
      v7 = 1;
      v41 = 1;
      v29 = &unk_250515578;
      v43 = v8;
      v44 = 0;
      sub_2341EA094(&v29, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v14);
      if ((_DWORD)v14)
        goto LABEL_15;
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = &unk_250515640;
      v24 = 0;
      v25 = -1;
      v26 = 1;
      v27 = 0x10000;
      if (!sub_2341EDB8C((uint64_t)&v14, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&v45, HIWORD(v44)))
      {
LABEL_15:
        v2 = 0;
        goto LABEL_16;
      }
      v9 = *(unsigned __int16 *)(a1 + 28);
      if (v9 < HIBYTE(v27))
      {
        *(_WORD *)(a1 + 28) = v9 + 1;
        v10 = *(unsigned __int16 *)&v28[48 * v9];
        if (v10 == *(unsigned __int16 *)(a1 + 16))
        {
          sub_2341EF6C8(v12, (uint64_t)&v28[48 * v9 + 2], v10, (uint64_t)&v28[48 * v9 + 18]);
          *(_BYTE *)(a2 + 2) = v55;
          *(_WORD *)a2 = v44;
          *(_BYTE *)(a2 + 3) = BYTE2(v27);
          *(_QWORD *)(a2 + 8) = v12;
          v2 = 1;
        }
        else
        {
          v7 = 0;
        }
        goto LABEL_16;
      }
      *(_WORD *)(a1 + 24) = WORD1(v40);
      ++*(_WORD *)(a1 + 26);
      *(_WORD *)(a1 + 28) = 0;
    }
    v7 = 2;
LABEL_16:
    v4 = 0uLL;
    if (v7 == 1)
      return v2 & 1;
  }
  v2 = 0;
  return v2 & 1;
}

_QWORD *sub_2341EF6C8(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v9 = a1 + 24;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a1 + 40);
  *(_WORD *)(a1 + 16) = a3;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v12, v10, a2, v9);
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v12, v10, a4, a1 + 40);
}

void sub_2341EF78C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 80);
  sub_2341EC388(*(_QWORD *)(a1 + 8) + 264, (void (***)(_QWORD))a1);
}

uint64_t sub_2341EF7E4()
{
  return qword_25615DA30;
}

uint64_t sub_2341EF7F0(uint64_t result)
{
  qword_25615DA30 = result;
  return result;
}

void sub_2341EF800(_QWORD *a1)
{
  sub_233C0BEE4(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341EF824(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 16);
}

_QWORD *sub_2341EF82C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_250515248;
  v2 = a1 + 3;
  sub_23413A7A4(a1 + 5, 16);
  sub_23413A7A4(v2, 16);
  return a1;
}

void sub_2341EF874(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = off_250515248;
  v1 = a1 + 3;
  sub_23413A7A4(a1 + 5, 16);
  sub_23413A7A4(v1, 16);
  JUMPOUT(0x23493E704);
}

void sub_2341EF8CC()
{
  JUMPOUT(0x23493E704);
}

void sub_2341EF8E0()
{
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2341EF8F4(_QWORD *a1)
{
  *a1 = &off_2505150F0;
  a1[5] = off_250515248;
  sub_23413A7A4(a1 + 10, 16);
  sub_23413A7A4(a1 + 8, 16);
  return a1;
}

void sub_2341EF944(_QWORD *a1)
{
  *a1 = &off_2505150F0;
  a1[5] = off_250515248;
  sub_23413A7A4(a1 + 10, 16);
  sub_23413A7A4(a1 + 8, 16);
  JUMPOUT(0x23493E704);
}

void sub_2341EF9A4()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341EF9B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 144))
  {
    result = sub_2340F4B80("f/%x/g", (uint64_t)v8, *(unsigned __int8 *)(result + 144));
    v5 = 0;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = v9;
    v7 = 88;
  }
  else
  {
    v7 = 86;
    v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_2341EFA64@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  int v7;

  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 146), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 148), (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_234107224(a2, 3uLL, *(unsigned __int16 *)(a1 + 150), (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          result = sub_234107224(a2, 4uLL, *(unsigned __int16 *)(a1 + 152), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = sub_234107224(a2, 5uLL, *(unsigned __int16 *)(a1 + 154), (uint64_t)a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              result = sub_234107224(a2, 6uLL, *(unsigned __int16 *)(a1 + 156), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                result = sub_234107224(a2, 7uLL, *(unsigned __int8 *)(a1 + 158), (uint64_t)a3);
                if (!*(_DWORD *)a3)
                  return sub_234107FB0(a2, v7, (uint64_t)a3);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2341EFBCC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_23410462C(a2) == 21)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_2341049E0(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_234105EE4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341049E0(a2, (_WORD *)(a1 + 148), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_234105EE4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_2341049E0(a2, (_WORD *)(a1 + 150), (uint64_t)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *a3 = 0;
                    a3[1] = 0;
                    a3[2] = 0;
                    sub_234105EE4(a2, 4, a3);
                    if (!*(_DWORD *)a3)
                    {
                      *a3 = 0;
                      a3[1] = 0;
                      a3[2] = 0;
                      sub_2341049E0(a2, (_WORD *)(a1 + 152), (uint64_t)a3);
                      if (!*(_DWORD *)a3)
                      {
                        *a3 = 0;
                        a3[1] = 0;
                        a3[2] = 0;
                        sub_234105EE4(a2, 5, a3);
                        if (!*(_DWORD *)a3)
                        {
                          *a3 = 0;
                          a3[1] = 0;
                          a3[2] = 0;
                          sub_2341049E0(a2, (_WORD *)(a1 + 154), (uint64_t)a3);
                          if (!*(_DWORD *)a3)
                          {
                            *a3 = 0;
                            a3[1] = 0;
                            a3[2] = 0;
                            sub_234105EE4(a2, 6, a3);
                            if (!*(_DWORD *)a3)
                            {
                              *a3 = 0;
                              a3[1] = 0;
                              a3[2] = 0;
                              sub_2341049E0(a2, (_WORD *)(a1 + 156), (uint64_t)a3);
                              if (!*(_DWORD *)a3)
                              {
                                *a3 = 0;
                                a3[1] = 0;
                                a3[2] = 0;
                                sub_234105EE4(a2, 7, a3);
                                if (!*(_DWORD *)a3)
                                {
                                  *a3 = 0;
                                  a3[1] = 0;
                                  a3[2] = 0;
                                  sub_23410492C(a2, (_BYTE *)(a1 + 158), (uint64_t)a3);
                                  if (!*(_DWORD *)a3)
                                    sub_23410577C(a2, v6, (uint64_t)a3);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 118;
    }
  }
}

uint64_t sub_2341EFE40(uint64_t result)
{
  *(_DWORD *)(result + 146) = 0;
  *(_DWORD *)(result + 154) = 0xFFFF;
  *(_BYTE *)(result + 158) = 0;
  return result;
}

uint64_t sub_2341EFE54(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 56))(a1, a1[1]);
}

uint64_t sub_2341EFE60(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 72))(a1, a1[1]);
}

void sub_2341EFE6C()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341EFE80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 163))
  {
    result = sub_2340F4B80("f/%x/g/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 163), *(unsigned __int16 *)(result + 144));
    v5 = 0;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = v9;
    v7 = 286;
  }
  else
  {
    v7 = 284;
    v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_2341EFF30@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  unsigned int v7;
  int v8;

  v8 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v8, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    v7 = strnlen((const char *)(a1 + 146), 0x10uLL);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (char *)sub_2341075BC(a2, 1uLL, (char *)(a1 + 146), v7, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 164), (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_234107224(a2, 3uLL, *(unsigned __int16 *)(a1 + 166), (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          result = sub_234107224(a2, 4uLL, *(unsigned __int16 *)(a1 + 170), (uint64_t)a3);
          if (!*(_DWORD *)a3)
            return sub_234107FB0(a2, v8, (uint64_t)a3);
        }
      }
    }
  }
  return result;
}

void sub_2341F0040(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_23410462C(a2) == 21)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_23410515C(a2, (char *)(a1 + 146), 0x11uLL, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *(_BYTE *)(a1 + 146 + strnlen((const char *)(a1 + 146), 0x10uLL)) = 0;
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            sub_234105EE4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341049E0(a2, (_WORD *)(a1 + 164), (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_234105EE4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_2341049E0(a2, (_WORD *)(a1 + 166), (uint64_t)a3);
                  if (!*(_DWORD *)a3)
                  {
                    *a3 = 0;
                    a3[1] = 0;
                    a3[2] = 0;
                    sub_234105EE4(a2, 4, a3);
                    if (!*(_DWORD *)a3)
                    {
                      *a3 = 0;
                      a3[1] = 0;
                      a3[2] = 0;
                      sub_2341049E0(a2, (_WORD *)(a1 + 170), (uint64_t)a3);
                      if (!*(_DWORD *)a3)
                        sub_23410577C(a2, v6, (uint64_t)a3);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 313;
    }
  }
}

uint64_t sub_2341F020C(uint64_t result)
{
  *(_BYTE *)(result + 146) = 0;
  *(_DWORD *)(result + 164) = 0xFFFF;
  *(_WORD *)(result + 170) = 0;
  return result;
}

_QWORD *sub_2341F0220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  __int16 v7;
  char v8;
  unsigned __int16 v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  void *v29;
  __int128 v30;
  _BYTE v31[25];
  unsigned __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v32 = 0;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v29 = &unk_2505156C0;
  v13 = 0uLL;
  v14 = 0;
  result = sub_2341EF050(&v29, a2, (uint64_t)&v13);
  if ((_DWORD)v13 == 216)
  {
    v31[24] = *(_BYTE *)(a1 + 144);
    v7 = 1;
LABEL_13:
    v32 = v7;
    return (_QWORD *)sub_2341F03F0((uint64_t)&v29, a2, a3);
  }
  *(_OWORD *)a3 = v13;
  a3[2] = v14;
  if (*(_DWORD *)a3)
    return result;
  v8 = v31[24];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v15 = &unk_250515388;
  v25 = v31[24];
  v26 = 0;
  v27 = 0xFFFF;
  v28 = 0;
  v9 = v32;
  if (!v32)
  {
LABEL_12:
    *(_BYTE *)(a1 + 158) = v8;
    v31[24] = *(_BYTE *)(a1 + 144);
    v7 = v9 + 1;
    goto LABEL_13;
  }
  v10 = 0;
  while (1)
  {
    result = sub_2341EA094(&v15, a2, (uint64_t)&v11);
    v13 = v11;
    v14 = v12;
    if ((_DWORD)v11)
    {
      v9 = v32;
LABEL_11:
      v8 = v31[24];
      goto LABEL_12;
    }
    if (v25 == *(_BYTE *)(a1 + 144))
      break;
    v25 = v28;
    ++v10;
    v9 = v32;
    if (v10 >= v32)
      goto LABEL_11;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
  *((_DWORD *)a3 + 4) = 174;
  return result;
}

uint64_t sub_2341F03F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  double v6;
  _WORD v7[32];
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = result;
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)result + 16))(result, v8);
    if (!*(_DWORD *)a3)
    {
      sub_234106C48((uint64_t)v7);
      v6 = sub_234106C70((uint64_t)v7, v5 + 16, 0x20uLL);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = (*(uint64_t (**)(uint64_t, _WORD *, double))(*(_QWORD *)v5 + 24))(v5, v7, v6);
      if (!*(_DWORD *)a3)
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v8, v5 + 16, v7[22]);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/lib/support/PersistentData.h";
    *((_DWORD *)a3 + 4) = 43;
  }
  return result;
}

void sub_2341F0508()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341F051C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 148))
  {
    result = sub_2340F4B80("f/%x/g/%x/e/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 148), *(unsigned __int16 *)(result + 144), *(unsigned __int16 *)(result + 146));
    v5 = 0;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = v9;
    v7 = 561;
  }
  else
  {
    v7 = 559;
    v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_2341F05D4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  int v7;

  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(a2, 1uLL, *(unsigned __int16 *)(a1 + 146), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 152), (uint64_t)a3);
      if (!*(_DWORD *)a3)
        return sub_234107FB0(a2, v7, (uint64_t)a3);
    }
  }
  return result;
}

void sub_2341F0688(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_23410462C(a2) == 21)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_2341049E0(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_234105EE4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341049E0(a2, (_WORD *)(a1 + 152), (uint64_t)a3);
              if (!*(_DWORD *)a3)
                sub_23410577C(a2, v6, (uint64_t)a3);
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 579;
    }
  }
}

uint64_t sub_2341F07BC(uint64_t result)
{
  *(_WORD *)(result + 152) = -1;
  return result;
}

void sub_2341F07C8()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341F07DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  __int128 v6;
  int v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 160))
  {
    result = sub_2340F4B80("f/%x/gk/%x", (uint64_t)v8, *(unsigned __int8 *)(result + 160), *(unsigned __int16 *)(result + 144));
    v5 = 0;
    v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 32) = v9;
    v7 = 410;
  }
  else
  {
    v7 = 408;
    v5 = 113;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_2341F088C@<X0>(unsigned __int16 *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  int v7;

  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(a2, 1uLL, a1[81], (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, a1[82], (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        result = sub_234107224(a2, 3uLL, a1[74], (uint64_t)a3);
        if (!*(_DWORD *)a3)
          return sub_234107FB0(a2, v7, (uint64_t)a3);
      }
    }
  }
  return result;
}

void sub_2341F0964(_WORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_23410462C(a2) == 21)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_2341049E0(a2, a1 + 81, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_234105EE4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341049E0(a2, a1 + 82, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_234105EE4(a2, 3, a3);
                if (!*(_DWORD *)a3)
                {
                  *a3 = 0;
                  a3[1] = 0;
                  a3[2] = 0;
                  sub_2341049E0(a2, a1 + 74, (uint64_t)a3);
                  if (!*(_DWORD *)a3)
                    sub_23410577C(a2, v6, (uint64_t)a3);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
      *((_DWORD *)a3 + 4) = 429;
    }
  }
}

void sub_2341F0AD8()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341F0AEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  __int128 v7;
  int v8;
  _OWORD v9[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(result + 144))
  {
    v4 = *(unsigned __int16 *)(result + 152);
    if ((_DWORD)v4 == 0xFFFF)
    {
      v8 = 653;
      v6 = 133;
    }
    else
    {
      result = sub_2340F4B80("f/%x/k/%x", (uint64_t)v9, *(unsigned __int8 *)(result + 144), v4);
      v6 = 0;
      v7 = v9[1];
      *(_OWORD *)a2 = v9[0];
      *(_OWORD *)(a2 + 16) = v7;
      *(_BYTE *)(a2 + 32) = v10;
      v8 = 655;
    }
  }
  else
  {
    v8 = 652;
    v6 = 113;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

char *sub_2341F0BB4@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  uint64_t v7;
  unsigned int i;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  char v14[24];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v13, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(a2, 1uLL, *(unsigned __int8 *)(a1 + 154), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, *(unsigned __int8 *)(a1 + 155), (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        v11 = 0;
        v12 = 0;
        a3[1] = 0;
        a3[2] = 0;
        *a3 = 0;
        result = sub_234107E40(a2, 3uLL, 22, &v12, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          v7 = 0;
          for (i = 0; ; ++i)
          {
            *(_OWORD *)v14 = 0uLL;
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            result = sub_234107E40(a2, 0x100uLL, 21, &v11, (uint64_t)a3);
            if (*(_DWORD *)a3)
              break;
            if (i >= *(unsigned __int8 *)(a1 + 155))
            {
              v10 = 0;
              v9 = 0;
            }
            else
            {
              v9 = *(_QWORD *)(a1 + v7 + 160);
              v10 = *(unsigned __int16 *)(a1 + v7 + 168);
              *(_OWORD *)v14 = *(_OWORD *)(a1 + v7 + 170);
            }
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = sub_2341071EC(a2, 4uLL, v9, (uint64_t)a3);
            if (*(_DWORD *)a3)
              break;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = sub_234107224(a2, 5uLL, v10, (uint64_t)a3);
            if (*(_DWORD *)a3)
              break;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = sub_2341073FC(a2, 6uLL, v14, 0x10uLL, (uint64_t)a3);
            if (*(_DWORD *)a3)
              break;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            result = sub_234107FB0(a2, v11, (uint64_t)a3);
            if (*(_DWORD *)a3)
              break;
            v7 += 48;
            if (v7 == 144)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              result = sub_234107FB0(a2, v12, (uint64_t)a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                result = sub_234107224(a2, 7uLL, *(unsigned __int16 *)(a1 + 146), (uint64_t)a3);
                if (!*(_DWORD *)a3)
                  return sub_234107FB0(a2, v13, (uint64_t)a3);
              }
              return result;
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2341F0E14(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10[2];
  __int128 v11;
  int v12;
  int v13;
  int v14;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (*(_DWORD *)a3)
    return;
  if (sub_23410462C(a2) != 21)
  {
    *(_DWORD *)a3 = 172;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 730;
LABEL_30:
    *((_DWORD *)a3 + 4) = v9;
    return;
  }
  v14 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23410570C(a2, &v14, (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 1, a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_233C05FA8(a2, (_BYTE *)(a1 + 154), a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 2, a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23410492C(a2, (_BYTE *)(a1 + 155), (uint64_t)a3);
  if (*(_DWORD *)a3)
    return;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 3, a3);
  if (*(_DWORD *)a3)
    return;
  if (sub_23410462C(a2) != 22)
  {
    *(_DWORD *)a3 = 172;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v9 = 745;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23410570C(a2, &v13, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    v6 = (_QWORD *)(a1 + 160);
    while (1)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234105EE4(a2, 256, a3);
      if (*(_DWORD *)a3)
        break;
      if (sub_23410462C(a2) != 21)
      {
        *(_DWORD *)a3 = 172;
        a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
        v9 = 752;
        goto LABEL_30;
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23410570C(a2, &v12, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234105EE4(a2, 4, a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23410499C(a2, v6, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234105EE4(a2, 5, a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      v7 = v6 + 1;
      a3[2] = 0;
      sub_2341049E0(a2, v7, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      v11 = 0uLL;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_234105EE4(a2, 6, a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234104B68(a2, &v11, a3);
      if (*(_DWORD *)a3)
        return;
      if (*((_QWORD *)&v11 + 1) != 16)
      {
        *(_DWORD *)a3 = 172;
        a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
        v9 = 765;
        goto LABEL_30;
      }
      *(_OWORD *)((char *)v7 + 2) = *(_OWORD *)v11;
      v8 = (uint64_t)v7 + 18;
      v10[0] = v8;
      v10[1] = 16;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_234134AB8((uint64_t *)&v11, v10, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23410577C(a2, v12, (uint64_t)a3);
      if (*(_DWORD *)a3)
        return;
      v6 = (_QWORD *)(v8 + 22);
      if (v6 == (_QWORD *)(a1 + 304))
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_23410577C(a2, v13, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_234105EE4(a2, 7, a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_2341049E0(a2, (_WORD *)(a1 + 146), (uint64_t)a3);
            if (!*(_DWORD *)a3)
              sub_23410577C(a2, v14, (uint64_t)a3);
          }
        }
        return;
      }
    }
  }
}

double sub_2341F11E8(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 154) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_WORD *)(a1 + 146) = -1;
  return result;
}

_QWORD *sub_2341F1214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t i;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[15];
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[15];
  void *v35;
  __int128 v36;
  _BYTE v37[25];
  unsigned __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  v35 = &unk_2505156C0;
  v11 = 0uLL;
  v12 = 0;
  result = sub_2341EF050(&v35, a2, (uint64_t)&v11);
  if ((_DWORD)v11 && (_DWORD)v11 != 216)
  {
    *(_OWORD *)a3 = v11;
    a3[2] = v12;
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
    v24 = &unk_250515388;
    v34[0] = v37[24];
    *(_QWORD *)&v34[2] = 0;
    *(_DWORD *)&v34[10] = 0xFFFF;
    v34[14] = 0;
    v22 = 0;
    v21 = 0u;
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = &unk_250515388;
    v23[0] = 0;
    *(_QWORD *)&v23[2] = 0;
    *(_DWORD *)&v23[10] = 0xFFFF;
    v23[14] = 0;
    if (v38)
    {
      for (i = 0; i < v38; ++i)
      {
        result = sub_2341EA094(&v24, a2, (uint64_t)&v9);
        v11 = v9;
        v12 = v10;
        if ((_DWORD)v9)
          break;
        if (v34[0] == *(unsigned __int8 *)(a1 + 144))
        {
          if (i)
          {
            v23[14] = *(_BYTE *)(a1 + 158);
            a3[1] = 0;
            a3[2] = 0;
            *a3 = 0;
            result = sub_2341EAF00((uint64_t)&v13, a2, a3);
            if (*(_DWORD *)a3)
              return result;
          }
          else
          {
            v37[24] = *(_BYTE *)(a1 + 158);
          }
          if (v38)
          {
            --v38;
            return (_QWORD *)sub_2341F03F0((uint64_t)&v35, a2, a3);
          }
          *(_DWORD *)a3 = 172;
          a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
          v8 = 217;
          goto LABEL_9;
        }
        v20 = v31;
        v21 = v32;
        v22 = v33;
        v16 = v27;
        v17 = v28;
        v18 = v29;
        v19 = v30;
        v14 = v25;
        v15 = v26;
        *(_QWORD *)v23 = *(_QWORD *)v34;
        *(_QWORD *)&v23[7] = *(_QWORD *)&v34[7];
        v34[0] = v34[14];
      }
    }
    *(_DWORD *)a3 = 216;
    a3[1] = "src/credentials/GroupDataProviderImpl.cpp";
    v8 = 225;
LABEL_9:
    *((_DWORD *)a3 + 4) = v8;
  }
  return result;
}

void sub_2341F14AC()
{
  JUMPOUT(0x23493E704);
}

double sub_2341F14C0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)"g/gfl";
  *(_OWORD *)a1 = *(_OWORD *)"g/gfl";
  *(_OWORD *)(a1 + 16) = unk_2342EE68F;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/credentials/GroupDataProviderImpl.cpp";
  *(_DWORD *)(a2 + 16) = 42;
  return result;
}

char *sub_2341F14F0@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  int v7;

  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(a2, 0x100uLL, 21, &v7, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_234107224(a2, 1uLL, *(unsigned __int8 *)(a1 + 48), (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107224(a2, 2uLL, *(unsigned __int16 *)(a1 + 50), (uint64_t)a3);
      if (!*(_DWORD *)a3)
        return sub_234107FB0(a2, v7, (uint64_t)a3);
    }
  }
  return result;
}

void sub_2341F15A4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234105EE4(a2, 256, a3);
  if (!*(_DWORD *)a3)
  {
    if (sub_23410462C(a2) == 21)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C(a2, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4(a2, 1, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_23410492C(a2, (_BYTE *)(a1 + 48), (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            sub_234105EE4(a2, 2, a3);
            if (!*(_DWORD *)a3)
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341049E0(a2, (_WORD *)(a1 + 50), (uint64_t)a3);
              if (!*(_DWORD *)a3)
                sub_23410577C(a2, v6, (uint64_t)a3);
            }
          }
        }
      }
    }
    else
    {
      *(_DWORD *)a3 = 172;
      a3[1] = "src/lib/support/CommonPersistentData.h";
      *((_DWORD *)a3 + 4) = 61;
    }
  }
}

uint64_t sub_2341F16D8(uint64_t result)
{
  *(_BYTE *)(result + 48) = 0;
  *(_WORD *)(result + 50) = 0;
  return result;
}

uint64_t sub_2341F16E4(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_2341F16FC(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_2341F1714(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_2341F172C(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_2341F1744(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_2341F175C(uint64_t a1, void *a2)
{
  sub_2341EED28(a1, a2);
  return 0;
}

uint64_t sub_2341F1774(uint64_t a1, const char *a2, unsigned int a3)
{
  NSObject *v4;
  const char *v5;
  uint64_t result;
  unsigned __int8 v7;
  __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  char __str[8];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)__str = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  sub_234117514(a3, &v10, (_BYTE *)&v9 + 1, &v9, (_BYTE *)&v8 + 1, &v8, &v7);
  snprintf(__str, 0x1AuLL, "%04u-%02u-%02uT%02u:%02u:%02u", v10, HIBYTE(v9), v9, HIBYTE(v8), v8, v7);
  v4 = sub_234117B80(0x17u, "TimeService");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v5 = a2;
    else
      v5 = "(null)";
    *(_DWORD *)buf = 136315394;
    v12 = v5;
    v13 = 2080;
    v14 = __str;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(0x17u, 2);
  return result;
}

void sub_2341F18E4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  _OWORD v9[2];
  char v10;
  _BYTE v11[18];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = 18;
  v7 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v5 = *a1;
  v9[0] = *(_OWORD *)"g/lkgt";
  v9[1] = unk_2342EE6B1;
  v10 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _OWORD *, _BYTE *, unsigned __int16 *))(*(_QWORD *)v5 + 16))(a3, v5, v9, v11, &v8);
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)v9);
    sub_234104498((uint64_t)v9, (uint64_t)v11, v8);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234106010((uint64_t)v9, 21, 256, a3);
    if (!*(_DWORD *)a3)
    {
      v6 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23410570C((uint64_t)v9, &v6, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234105EE4((uint64_t)v9, 0, a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_234104A50((uint64_t)v9, &v7, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            *a2 = v7;
            *(_DWORD *)a3 = 0;
            a3[1] = "src/credentials/LastKnownGoodTime.cpp";
            *((_DWORD *)a3 + 4) = 69;
          }
        }
      }
    }
  }
}

char *sub_2341F1A48@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *result;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12[44];
  unsigned int v13;
  _OWORD v14[2];
  char v15;
  _BYTE v16[18];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_234106C48((uint64_t)v12);
  sub_234106C70((uint64_t)v12, (uint64_t)v16, 0x12uLL);
  v11 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234107E40(v12, 0x100uLL, 21, &v11, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_23410726C(v12, 0, a2, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      result = sub_234107FB0(v12, v11, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        v7 = v13;
        if (HIWORD(v13))
        {
          v10 = 82;
          v9 = 25;
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          v8 = *a1;
          v14[0] = *(_OWORD *)"g/lkgt";
          v14[1] = unk_2342EE6B1;
          v15 = 0;
          result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, _QWORD))(*(_QWORD *)v8 + 24))(v8, v14, v16, v7);
          if (*(_DWORD *)a3)
            return result;
          v9 = 0;
          v10 = 85;
        }
        *(_DWORD *)a3 = v9;
        a3[1] = "src/credentials/LastKnownGoodTime.cpp";
        *((_DWORD *)a3 + 4) = v10;
      }
    }
  }
  return result;
}

uint64_t sub_2341F1BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _UNKNOWN **v5;
  NSObject *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint8_t buf[16];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250515770;
  *(_QWORD *)(a3 + 16) = 90;
  *(_QWORD *)a1 = a2;
  v5 = sub_2341B2114();
  (*((void (**)(_UNKNOWN **, unsigned int *))*v5 + 5))(v5, &v14);
  if (*(_DWORD *)a3)
    goto LABEL_2;
  sub_2341F18E4((uint64_t *)a1, &v13, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = v16;
  if (!*(_DWORD *)a3)
  {
    v11 = v13;
    result = sub_2341F1774(v9, "Last Known Good Time: ", v13);
    if (v11 >= v14)
    {
      *(_BYTE *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v11;
      return result;
    }
LABEL_14:
    sub_2341F1774(result, "Setting Last Known Good Time to firmware build time ", v14);
    *(_BYTE *)(a1 + 8) = 1;
    v12 = v14;
    *(_DWORD *)(a1 + 12) = v14;
    result = (uint64_t)sub_2341F1A48((uint64_t *)a1, v12, buf);
    *(_OWORD *)a3 = *(_OWORD *)buf;
    *(_QWORD *)(a3 + 16) = v16;
    if (!*(_DWORD *)a3)
      return result;
    goto LABEL_2;
  }
  if (*(_DWORD *)a3 == 160)
  {
    v10 = sub_234117B80(0x17u, "TimeService");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Last Known Good Time: [unknown]", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x17u, 2);
    goto LABEL_14;
  }
LABEL_2:
  v6 = sub_234117B80(0x17u, "TimeService");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a3 + 16);
    v7 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Failed to init Last Known Good Time: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0x17u, 1);
  }
  return result;
}

uint64_t sub_2341F1E04@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _BYTE *v6;
  int v7;
  unsigned int *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  int v13;
  int v14;
  NSObject *v15;
  char *v16;
  uint64_t result;
  char *v18;
  unsigned int v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_250515788;
  *(_QWORD *)(a4 + 16) = 133;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v6 = (_BYTE *)(a1 + 8);
  if (!v7)
  {
    v13 = 134;
    v14 = 3;
LABEL_9:
    *(_DWORD *)a4 = v14;
    *(_QWORD *)(a4 + 8) = "src/credentials/LastKnownGoodTime.cpp";
    *(_DWORD *)(a4 + 16) = v13;
    goto LABEL_10;
  }
  v10 = (unsigned int *)sub_2341B3D70(v6);
  v11 = sub_2341F1774((uint64_t)v10, "Last Known Good Time: ", *v10);
  sub_2341F1774(v11, "New proposed Last Known Good Time: ", a2);
  v12 = sub_2341B2114();
  (*((void (**)(_UNKNOWN **, unsigned int *))*v12 + 5))(v12, &v19);
  if (!*(_DWORD *)a4)
  {
    if (v19 > a2)
    {
      v13 = 141;
LABEL_8:
      v14 = 47;
      goto LABEL_9;
    }
    if (a2 < a3)
    {
      v13 = 143;
      goto LABEL_8;
    }
    v18 = sub_2341F1A48((uint64_t *)a1, a2, buf);
    *(_OWORD *)a4 = *(_OWORD *)buf;
    *(_QWORD *)(a4 + 16) = v21;
    if (!*(_DWORD *)a4)
    {
      *(_BYTE *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = a2;
      return sub_2341F1774((uint64_t)v18, "Updating Last Known Good Time to ", a2);
    }
  }
LABEL_10:
  v15 = sub_234117B80(0x17u, "TimeService");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v21 = *(_QWORD *)(a4 + 16);
    v16 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Failed to update Last Known Good Time: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v21 = *(_QWORD *)(a4 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0x17u, 1);
  }
  return result;
}

uint64_t sub_2341F2014@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE *v8;
  NSObject *v9;
  uint8_t v10[16];

  *(_OWORD *)a3 = xmmword_2505157A0;
  *(_QWORD *)(a3 + 16) = 172;
  v3 = (_BYTE *)(result + 8);
  if (*(_BYTE *)(result + 8))
  {
    v5 = result;
    v6 = (unsigned int *)sub_2341B3D70((_BYTE *)(result + 8));
    v7 = sub_2341F1774((uint64_t)v6, "Last Known Good Time: ", *v6);
    sub_2341F1774(v7, "New proposed Last Known Good Time: ", a2);
    v8 = sub_2341B3D70(v3);
    if (*(_DWORD *)v8 >= a2)
    {
      v9 = sub_234117B80(0x17u, "TimeService");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Retaining current Last Known Good Time", v10, 2u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        return sub_2341147D0(0x17u, 2);
    }
    else
    {
      result = sub_2341F1774((uint64_t)v8, "Updating pending Last Known Good Time to ", a2);
      *(_BYTE *)(v5 + 8) = 1;
      *(_DWORD *)(v5 + 12) = a2;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/LastKnownGoodTime.cpp";
    *(_DWORD *)(a3 + 16) = 173;
  }
  return result;
}

char *sub_2341F2150@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  unsigned int *v5;
  unsigned int *v6;
  char *result;
  NSObject *v8;
  char *v9;
  uint8_t buf[16];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = xmmword_2505157B8;
  a2[2] = 191;
  v3 = (_BYTE *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = (unsigned int *)sub_2341B3D70((_BYTE *)(a1 + 8));
    sub_2341F1774((uint64_t)v5, "Committing Last Known Good Time to storage: ", *v5);
    v6 = (unsigned int *)sub_2341B3D70(v3);
    result = sub_2341F1A48((uint64_t *)a1, *v6, a2);
    if (!*(_DWORD *)a2)
      return result;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/credentials/LastKnownGoodTime.cpp";
    *((_DWORD *)a2 + 4) = 192;
  }
  v8 = sub_234117B80(0x17u, "TimeService");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v11 = a2[2];
    v9 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to commit Last Known Good Time: %s", buf, 0xCu);
  }
  result = (char *)sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v11 = a2[2];
    sub_2341083CC((const char **)buf, 1);
    return (char *)sub_2341147D0(0x17u, 1);
  }
  return result;
}

uint64_t sub_2341F22D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t result;
  NSObject *v10;
  char *v11;
  unsigned int v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a2 = xmmword_2505157D0;
  a2[2] = 205;
  v3 = (_BYTE *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v5 = (unsigned int *)sub_2341B3D70((_BYTE *)(a1 + 8));
    sub_2341F1774((uint64_t)v5, "Pending Last Known Good Time: ", *v5);
    sub_2341F18E4((uint64_t *)a1, &v12, a2);
    if (!*(_DWORD *)a2)
    {
      v7 = v12;
      sub_2341F1774(v6, "Previous Last Known Good Time: ", v12);
      *(_BYTE *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v7;
      v8 = sub_234117B80(0x17u, "TimeService");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Reverted Last Known Good Time to previous value", buf, 2u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        return sub_2341147D0(0x17u, 2);
      return result;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/credentials/LastKnownGoodTime.cpp";
    *((_DWORD *)a2 + 4) = 207;
  }
  v10 = sub_234117B80(0x17u, "TimeService");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v14 = a2[2];
    v11 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Clearing Last Known Good Time; failed to load a previous value from persistence: %s",
      buf,
      0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v14 = a2[2];
    sub_2341083CC((const char **)buf, 1);
    result = sub_2341147D0(0x17u, 1);
  }
  *v3 = 0;
  return result;
}

uint64_t sub_2341F24E4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 24))
    return (*(unsigned __int8 *)(a1 + 72) >> 1) & 1;
  else
    return 0;
}

BOOL sub_2341F2508(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 56) && (*(_BYTE *)(a1 + 72) & 5) != 0;
}

BOOL sub_2341F2534(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if ((a2 - 1) > 0xFDu || v4 == 0)
    return 0;
  if (*(unsigned __int8 *)(a1 + 16) == a2)
  {
    if (a3 == 2)
    {
      if (!*(_QWORD *)(a1 + 56))
        return sub_2341F25AC(v4, a2, a3);
      return 1;
    }
    if (a3 != 1)
    {
      if (!a3)
      {
        if (!*(_QWORD *)(a1 + 24))
          return sub_2341F25AC(v4, a2, a3);
        return 1;
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 40))
      return 1;
    if (*(_QWORD *)(a1 + 56))
      return 0;
  }
  return sub_2341F25AC(v4, a2, a3);
}

BOOL sub_2341F25AC(uint64_t a1, unsigned int a2, int a3)
{
  double v4;
  _QWORD v6[3];
  __int16 v7;
  _BYTE v8[400];
  _BYTE v9[33];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341F3684(a2, a3, (uint64_t)v9);
  if (!v9[0])
    return 0;
  v7 = 400;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *, _BYTE *, __int16 *, double))(*(_QWORD *)a1 + 16))(v6, a1, v9, v8, &v7, v4);
  return LODWORD(v6[0]) == 0;
}

uint64_t sub_2341F2658@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;

  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    v9 = 213;
LABEL_11:
    v10 = 3;
    goto LABEL_12;
  }
  if ((a2 - 1) > 0xFDu)
  {
    v9 = 214;
    v10 = 113;
    goto LABEL_12;
  }
  if ((unint64_t)(*(_QWORD *)(a3 + 8) - 401) < 0xFFFFFFFFFFFFFE70)
  {
    v9 = 215;
    v10 = 47;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 72) & 7) != 0)
  {
    v9 = 219;
    goto LABEL_11;
  }
  result = sub_2341F25AC(result, a2, 0);
  if ((result & 1) != 0)
  {
    v9 = 220;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a3 + 8);
  result = (uint64_t)sub_234114774(v11);
  if (result)
  {
    v12 = result;
    result = (uint64_t)memcpy((void *)result, *(const void **)a3, *(_QWORD *)(a3 + 8));
    v10 = 0;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 16) = a2;
    *(_BYTE *)(a1 + 72) |= 2u;
    v9 = 231;
  }
  else
  {
    v9 = 223;
    v10 = 11;
  }
LABEL_12:
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a4 + 16) = v9;
  return result;
}

void sub_2341F2760(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  int v10;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 237;
    goto LABEL_7;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 238;
    goto LABEL_7;
  }
  if ((unint64_t)(*(_QWORD *)(a3 + 8) - 401) <= 0xFFFFFFFFFFFFFE6FLL)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 239;
LABEL_7:
    *(_DWORD *)(a5 + 16) = v10;
    return;
  }
  if (*(_QWORD *)(a4 + 8) >= 0x191uLL)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 240;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 72) & 5) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 244;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) == 0)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 247;
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a1 + 16) != a2)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 250;
    goto LABEL_7;
  }
  if (sub_2341F25AC(v7, a2, 2))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 253;
    goto LABEL_7;
  }
  if (sub_2341F25AC(*(_QWORD *)(a1 + 8), a2, 1))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 254;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a3 + 8);
  v13 = sub_234114774(v12);
  if (!v13)
  {
    *(_DWORD *)a5 = 11;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 257;
    goto LABEL_7;
  }
  v14 = v13;
  memcpy(v13, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v15 = *(_QWORD *)(a4 + 8);
  if (!v15)
  {
    v17 = 0;
    goto LABEL_26;
  }
  v16 = sub_234114774(*(_QWORD *)(a4 + 8));
  if (v16)
  {
    v17 = v16;
    memcpy(v16, *(const void **)a4, *(_QWORD *)(a4 + 8));
LABEL_26:
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v15;
    *(_BYTE *)(a1 + 72) |= 1u;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 272;
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 11;
  *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a5 + 16) = 263;
  j__free(v14);
}

void sub_2341F29DC(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  int v10;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 278;
    goto LABEL_7;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 279;
    goto LABEL_7;
  }
  if ((unint64_t)(*(_QWORD *)(a3 + 8) - 401) <= 0xFFFFFFFFFFFFFE6FLL)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 280;
LABEL_7:
    *(_DWORD *)(a5 + 16) = v10;
    return;
  }
  if (*(_QWORD *)(a4 + 8) >= 0x191uLL)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 281;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 72) & 3) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 285;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 288;
    goto LABEL_7;
  }
  if (!sub_2341F25AC(v7, a2, 0))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 291;
    goto LABEL_7;
  }
  if (!sub_2341F25AC(*(_QWORD *)(a1 + 8), a2, 2))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 294;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a3 + 8);
  v13 = sub_234114774(v12);
  if (!v13)
  {
    *(_DWORD *)a5 = 11;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 300;
    goto LABEL_7;
  }
  v14 = v13;
  memcpy(v13, *(const void **)a3, *(_QWORD *)(a3 + 8));
  v15 = *(_QWORD *)(a4 + 8);
  if (!v15)
  {
    v17 = 0;
    goto LABEL_24;
  }
  v16 = sub_234114774(*(_QWORD *)(a4 + 8));
  if (v16)
  {
    v17 = v16;
    memcpy(v16, *(const void **)a4, *(_QWORD *)(a4 + 8));
LABEL_24:
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v15;
    *(_BYTE *)(a1 + 16) = a2;
    *(_BYTE *)(a1 + 72) |= 4u;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 319;
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 11;
  *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  *(_DWORD *)(a5 + 16) = 306;
  j__free(v14);
}

double sub_2341F2C30@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  double result;
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  _QWORD v23[2];

  if (!*(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v6 = 324;
    goto LABEL_12;
  }
  if ((a2 - 1) > 0xFD || *(unsigned __int8 *)(a1 + 16) != a2)
  {
    *(_DWORD *)a3 = 113;
    *(_QWORD *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v6 = 325;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 56);
  if (!v5 || (*(_BYTE *)(a1 + 72) & 5) == 0)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v6 = 327;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a1 + 24) && (*(_BYTE *)(a1 + 72) & 6) == 6)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v6 = 332;
LABEL_12:
    *(_DWORD *)(a3 + 16) = v6;
    return result;
  }
  sub_233BF7114(v23, v5, *(_QWORD *)(a1 + 64));
  v21 = 0uLL;
  v22 = 0;
  sub_2341F2EA4(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 2, v23, (uint64_t)&v21);
  sub_233BF7114(v20, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  memset(v19, 0, sizeof(v19));
  sub_2341F2EA4(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 1, v20, (uint64_t)v19);
  v17 = xmmword_2505157E8;
  v18 = 346;
  if (*(_QWORD *)(a1 + 8))
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      if ((*(_BYTE *)(a1 + 72) & 2) != 0)
      {
        sub_233BF7114(&v15, v7, *(_QWORD *)(a1 + 32));
        sub_2341F2EA4(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 0, &v15, (uint64_t)&v17);
      }
    }
  }
  v15 = v21;
  v16 = v22;
  v8 = &v15;
  if ((_DWORD)v21)
    v9 = &v15;
  else
    v9 = (__int128 *)v19;
  v10 = *((_QWORD *)v9 + 2);
  v15 = *v9;
  v16 = v10;
  if (!(_DWORD)v15)
    v8 = &v17;
  v11 = *((_QWORD *)v8 + 2);
  v15 = *v8;
  v16 = v11;
  if (!(_DWORD)v15)
  {
    sub_233C0BA7C(a1);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v6 = 382;
    goto LABEL_12;
  }
  v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 1) != 0)
  {
    sub_2341F2FCC(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 2, (uint64_t)v14);
    sub_2341F2FCC(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 1, (uint64_t)v14);
    v12 = *(_BYTE *)(a1 + 72);
  }
  if ((v12 & 2) != 0)
    sub_2341F2FCC(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), 0, (uint64_t)v14);
  result = *(double *)&v15;
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = v16;
  return result;
}

double sub_2341F2EA4@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v9;
  int v10;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[33];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v9.n128_f64[0] = sub_2341F3684(a2, a3, (uint64_t)v14);
  if (v14[0])
  {
    if (a3 != 1 || a4[1])
    {
      (*(void (**)(uint64_t, _BYTE *, _QWORD, _QWORD, __n128))(*(_QWORD *)a1 + 24))(a1, v14, *a4, (unsigned __int16)a4[1], v9);
      return v9.n128_f64[0];
    }
    v12 = 0uLL;
    v13 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, double))(*(_QWORD *)a1 + 32))(&v12, a1, v14, v9.n128_f64[0]);
    if ((_DWORD)v12 != 160 && (_DWORD)v12)
    {
      v9.n128_u64[0] = v12;
      *(_OWORD *)a5 = v12;
      *(_QWORD *)(a5 + 16) = v13;
      return v9.n128_f64[0];
    }
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 127;
  }
  else
  {
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 118;
  }
  *(_DWORD *)(a5 + 16) = v10;
  return v9.n128_f64[0];
}

void sub_2341F2FCC(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v6;
  _BYTE v7[33];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341F3684(a2, a3, (uint64_t)v7);
  if (v7[0])
  {
    (*(void (**)(uint64_t, _BYTE *, double))(*(_QWORD *)a1 + 32))(a1, v7, v6);
  }
  else
  {
    *(_DWORD *)a4 = 172;
    *(_QWORD *)(a4 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    *(_DWORD *)(a4 + 16) = 140;
  }
}

uint64_t sub_2341F3070(uint64_t *a1, unsigned int a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;

  if ((a2 - 1) > 0xFDu)
    return 0;
  v4 = sub_2341F25AC(a1[1], a2, 0);
  v5 = 1;
  v6 = sub_2341F25AC(a1[1], a2, 1);
  v7 = sub_2341F25AC(a1[1], a2, 2);
  if (!a1[3] && !a1[5])
    v5 = a1[7] != 0;
  return (v4 || v6) | v7 | v5;
}

__n128 sub_2341F3118@<Q0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>, __n128 result@<Q0>)
{
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  const char *v10;
  int v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  const char *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;

  if (!a1[1])
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    v11 = 404;
LABEL_9:
    a3[1].n128_u32[0] = v11;
    return result;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    a3->n128_u32[0] = 113;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    v11 = 405;
    goto LABEL_9;
  }
  if ((sub_2341F3070(a1, a2) & 1) == 0)
  {
    a3->n128_u32[0] = 113;
    a3->n128_u64[1] = (unint64_t)"src/credentials/PersistentStorageOpCertStore.cpp";
    v11 = 408;
    goto LABEL_9;
  }
  sub_233C0BA7C((uint64_t)a1);
  v25 = 0uLL;
  v26 = 0;
  sub_2341F2FCC(a1[1], a2, 2, (uint64_t)&v25);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  sub_2341F2FCC(a1[1], a2, 1, (uint64_t)&v22);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_2341F2FCC(a1[1], a2, 0, (uint64_t)&v19);
  v9 = v25.n128_u32[0];
  if (v25.n128_u32[0] == 160)
  {
    v9 = 0;
    LODWORD(v8) = 419;
    v10 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    v7 = v25.n128_u32[1];
    v10 = (const char *)v25.n128_u64[1];
    v8 = v26;
  }
  v25.n128_u64[0] = __PAIR64__(v7, v9);
  v25.n128_u64[1] = (unint64_t)v10;
  v26 = v8;
  v12 = v22;
  if ((_DWORD)v22 == 160)
  {
    v12 = 0;
    LODWORD(v8) = 420;
    v13 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    v7 = HIDWORD(v22);
    v13 = v23;
    v8 = v24;
  }
  v22 = __PAIR64__(v7, v12);
  v23 = v13;
  v24 = v8;
  v14 = v19;
  if ((_DWORD)v19 == 160)
  {
    v14 = 0;
    LODWORD(v8) = 421;
    v15 = "src/credentials/PersistentStorageOpCertStore.cpp";
  }
  else
  {
    v7 = HIDWORD(v19);
    v15 = v20;
    v8 = v21;
  }
  v19 = __PAIR64__(v7, v14);
  v20 = v15;
  v21 = v8;
  *a3 = v25;
  a3[1].n128_u64[0] = v26;
  v16 = &v22;
  if (a3->n128_u32[0])
    v16 = (unint64_t *)a3;
  v17 = v16[2];
  *a3 = *(__n128 *)v16;
  a3[1].n128_u64[0] = v17;
  v18 = (__n128 *)&v19;
  if (a3->n128_u32[0])
    v18 = a3;
  result = *v18;
  a3[1].n128_u64[0] = v18[1].n128_u64[0];
  *a3 = result;
  return result;
}

uint64_t sub_2341F3328@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  int v11;
  void *__src;
  size_t __n;

  if (*(unsigned __int8 *)(result + 16) != a2)
  {
    *(_DWORD *)a5 = 216;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v9 = 436;
    goto LABEL_18;
  }
  if (a3 == 2)
  {
    v7 = *(_QWORD *)(result + 56);
    if (v7)
    {
      v8 = *(_QWORD *)(result + 64);
      goto LABEL_12;
    }
LABEL_14:
    *(_DWORD *)a5 = 216;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v9 = 467;
    goto LABEL_18;
  }
  if (a3 == 1)
  {
    v7 = *(_QWORD *)(result + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(result + 48);
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  if (a3)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v9 = 464;
    goto LABEL_18;
  }
  v7 = *(_QWORD *)(result + 24);
  if (!v7)
    goto LABEL_14;
  v8 = *(_QWORD *)(result + 32);
LABEL_12:
  result = (uint64_t)sub_233BF7114(&__src, v7, v8);
  v10 = __n;
  if (*(_QWORD *)(a4 + 8) >= __n)
  {
    memcpy(*(void **)a4, __src, __n);
    result = sub_233BF7588(a4, v10);
    v11 = 0;
    v9 = 380;
  }
  else
  {
    v9 = 375;
    v11 = 25;
  }
  *(_DWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = "src/lib/support/Span.h";
LABEL_18:
  *(_DWORD *)(a5 + 16) = v9;
  return result;
}

void sub_2341F3454(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int16 v19;
  _BYTE v20[33];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 473;
    goto LABEL_9;
  }
  if ((a2 - 1) >= 0xFEu)
  {
    *(_DWORD *)a5 = 113;
    *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
    v10 = 474;
    goto LABEL_9;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_2341F3328(a1, a2, a3, (uint64_t)a4, (uint64_t)&v15);
  if ((_DWORD)v15 != 216)
  {
    *(_OWORD *)a5 = v15;
    v11 = v16;
    goto LABEL_12;
  }
  if (a3 != 1 || !*(_QWORD *)(a1 + 56))
  {
    v12 = *(_QWORD *)(a1 + 8);
    v13 = sub_2341F3684(a2, a3, (uint64_t)v20);
    if (!v20[0])
    {
      *(_DWORD *)a5 = 172;
      *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
      v10 = 84;
      goto LABEL_9;
    }
    v14 = *a4;
    v19 = a4[1];
    v17 = 0uLL;
    v18 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *, uint64_t, unsigned __int16 *, double))(*(_QWORD *)v12 + 16))(&v17, v12, v20, v14, &v19, v13);
    if (a3 == 1 && (_DWORD)v17 == 160)
    {
      sub_233BF7588((uint64_t)a4, 0);
      *(_DWORD *)a5 = 216;
      *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
      v10 = 95;
      goto LABEL_9;
    }
    if ((_DWORD)v17 == 160)
    {
      LODWORD(v17) = 216;
      *((_QWORD *)&v17 + 1) = "src/credentials/PersistentStorageOpCertStore.cpp";
      LODWORD(v18) = 106;
    }
    else if (!(_DWORD)v17)
    {
      sub_233BF7588((uint64_t)a4, v19);
    }
    *(_OWORD *)a5 = v17;
    v11 = v18;
LABEL_12:
    *(_QWORD *)(a5 + 16) = v11;
    return;
  }
  *(_DWORD *)a5 = 216;
  *(_QWORD *)(a5 + 8) = "src/credentials/PersistentStorageOpCertStore.cpp";
  v10 = 490;
LABEL_9:
  *(_DWORD *)(a5 + 16) = v10;
}

void sub_2341F3660(uint64_t a1)
{
  sub_233C0BB18(a1);
  JUMPOUT(0x23493E704);
}

double sub_2341F3684@<D0>(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;

  if (a2)
  {
    if (a2 == 1)
    {
      sub_2340F4B80("f/%x/i", a3, a1);
    }
    else if (a2 == 2)
    {
      sub_2340F4B80("f/%x/n", a3, a1);
    }
    else
    {
      *(_BYTE *)(a3 + 32) = 0;
      result = 0.0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    sub_2340F4B80("f/%x/r", a3, a1);
  }
  return result;
}

void *sub_2341F36FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  char *v11;
  uint64_t v12;
  char v13;
  _BYTE v14[120];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  nullsub_13(v14, a1);
  v11 = &v13;
  v12 = 32;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2341394DC((uint64_t)v14, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_234139528((uint64_t)v14, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)a5);
    if (!*(_DWORD *)a5)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      sub_234139528((uint64_t)v14, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        *a5 = 0;
        a5[1] = 0;
        a5[2] = 0;
        sub_234139610((uint64_t)v14, (uint64_t *)&v11, (uint64_t)a5);
        if (!*(_DWORD *)a5)
        {
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          sub_23413A114(a1, (uint64_t)v11, v12, a4, (uint64_t)a5);
          if (!*(_DWORD *)a5)
          {
            *(_DWORD *)a5 = 0;
            a5[1] = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
            *((_DWORD *)a5 + 4) = 106;
          }
        }
      }
    }
  }
  return sub_2341394AC(v14);
}

uint64_t sub_2341F3840()
{
  return qword_256158988;
}

uint64_t sub_2341F384C(uint64_t result)
{
  if (result)
    qword_256158988 = result;
  return result;
}

uint64_t sub_2341F385C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _DWORD v12[6];
  _BYTE v13[8];
  uint64_t v14;
  _QWORD v15[2];
  _DWORD v16[20];
  _QWORD v17[2];
  int v18;
  __int128 v19;
  __int128 v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  sub_234104068((void **)a1, v4);
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    memcpy(v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 72);
  sub_234104068((void **)(a1 + 16), v6);
  v7 = *(void **)(a1 + 16);
  if (v7)
  {
    *(_QWORD *)(a1 + 24) = v6;
    memcpy(v7, *(const void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 96);
  *(_WORD *)(a1 + 50) = *(_WORD *)(a2 + 98);
  v20 = 0uLL;
  v19 = 0uLL;
  v18 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v14 = 0;
  v15[0] = 0;
  *(_DWORD *)((char *)v15 + 7) = 0;
  sub_234104468((uint64_t)v16);
  v16[18] = 21;
  sub_2341E05CC(a2, &v20, &v19, &v18, (uint64_t)v17, (uint64_t)v13, (uint64_t)v12);
  if (!v12[0])
  {
    v8 = *((_QWORD *)&v20 + 1);
    v9 = sub_234114774(*((size_t *)&v20 + 1));
    v10 = v9;
    if (v9)
      memcpy(v9, (const void *)v20, *((size_t *)&v20 + 1));
    else
      v8 = 0;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

void sub_2341F397C()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341F3994()
{
  return 0xFFFFLL;
}

uint64_t sub_2341F399C()
{
  return 0xFFFFLL;
}

void sub_2341F39A4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
  *(_DWORD *)(a1 + 16) = 70;
}

void sub_2341F39C4()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  const char *v6;

  v0 = sub_234117B80(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v2 = "src/credentials/attestation_verifier/DeviceAttestationVerifier.cpp";
    v3 = 1024;
    v4 = 78;
    v5 = 2080;
    v6 = "false";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x1Bu, 1);
  abort();
}

uint64_t *sub_2341F3A88()
{
  uint64_t *result;

  result = (uint64_t *)qword_25615DE10;
  if (!qword_25615DE10)
  {
    result = sub_2341F6FC0();
    qword_25615DE10 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_2341F3AB4(uint64_t result)
{
  qword_25615DE10 = result;
  return result;
}

double sub_2341F3AC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  uint64_t i;
  int v8;
  _OWORD *v9;
  int v10;
  int *v11;
  unsigned int v12;
  double result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >= 2)
  {
    v15 = v2;
    v16 = v3;
    v6 = 2;
    for (i = 1; i != a2; ++i)
    {
      v14 = *(_OWORD *)(a1 + 16 * i);
      v8 = i;
      if ((int)i >= 1)
      {
        v9 = (_OWORD *)(a1 + 16 * i);
        v8 = i;
        v10 = v6;
        while (1)
        {
          v11 = (int *)(a1 + 16 * (v8 - 1));
          v12 = sub_2341F3C68((int *)&v14);
          if (v12 <= sub_2341F3C68(v11))
            break;
          *v9-- = *(_OWORD *)v11;
          --v10;
          --v8;
          if (v10 <= 1)
          {
            v8 = 0;
            break;
          }
        }
      }
      result = *(double *)&v14;
      *(_OWORD *)(a1 + 16 * v8) = v14;
      ++v6;
    }
  }
  return result;
}

double sub_2341F3B94(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t i;
  int v5;
  _OWORD *v6;
  int v7;
  int *v8;
  unsigned int v9;
  double result;
  __int128 v11;

  v1 = a1[1];
  if (v1 >= 2)
  {
    v2 = *a1;
    v3 = 2;
    for (i = 1; i != v1; ++i)
    {
      v11 = *(_OWORD *)(v2 + 16 * i);
      v5 = i;
      if ((int)i >= 1)
      {
        v6 = (_OWORD *)(v2 + 16 * i);
        v5 = i;
        v7 = v3;
        while (1)
        {
          v8 = (int *)(v2 + 16 * (v5 - 1));
          v9 = sub_2341F3C68((int *)&v11);
          if (v9 <= sub_2341F3C68(v8))
            break;
          *v6-- = *(_OWORD *)v8;
          --v7;
          --v5;
          if (v7 <= 1)
          {
            v5 = 0;
            break;
          }
        }
      }
      result = *(double *)&v11;
      *(_OWORD *)(v2 + 16 * v5) = v11;
      ++v3;
    }
  }
  return result;
}

uint64_t sub_2341F3C68(int *a1)
{
  if (!sub_23410EED0((uint64_t)a1))
    return 2;
  if (sub_23410EF74(a1))
    return 7;
  if (!sub_234110140(a1))
    goto LABEL_10;
  if (sub_23410EF4C(a1))
    return 6;
  if (sub_23410EF60(a1))
    return 5;
LABEL_10:
  if (sub_23410EF4C(a1))
    return 4;
  if (sub_23410EF60(a1))
    return 3;
  return 1;
}

uint64_t *sub_2341F3D04()
{
  uint64_t *result;

  result = (uint64_t *)qword_25615DE18;
  if (!qword_25615DE18)
  {
    result = sub_2341F7000();
    qword_25615DE18 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_2341F3D30(uint64_t result)
{
  qword_25615DE18 = result;
  return result;
}

_QWORD *sub_2341F3D3C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  _QWORD *v5;

  if (result[1])
  {
    v3 = 27;
    v4 = 3;
LABEL_3:
    *(_DWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  v5 = result;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)*result + 16))((_QWORD *)a2);
  if (!*(_DWORD *)a2)
  {
    result = sub_234114774(0x20uLL);
    if (result)
    {
      v4 = 0;
      *(_OWORD *)result = 0u;
      *((_OWORD *)result + 1) = 0u;
      *(_DWORD *)result = 1;
      v3 = 33;
    }
    else
    {
      v3 = 31;
      v4 = 11;
    }
    v5[1] = result;
    goto LABEL_3;
  }
  return result;
}

void sub_2341F3DE0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    *(_QWORD *)(v1 + 8) = 0;
    sub_2341F3E14(*(int **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_2341F3E14(int *a1)
{
  int v1;

  if (!*a1)
    sub_2342592D0();
  v1 = *a1 - 1;
  *a1 = v1;
  if (!v1)
    j__free(a1);
}

uint64_t *sub_2341F3E44@<X0>(uint64_t *result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (result[1])
  {
    v3 = *result;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v3, 2, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 46;
  }
  return result;
}

uint64_t *sub_2341F3EAC@<X0>(uint64_t *result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (result[1])
  {
    v3 = *result;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v3, 3, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 53;
  }
  return result;
}

uint64_t *sub_2341F3F14@<X0>(uint64_t *result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  if (result[1])
  {
    v3 = *result;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v3 + 64))(v3, 1, &v4);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
    *(_DWORD *)(a3 + 16) = 60;
  }
  return result;
}

_QWORD *sub_2341F3F7C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  if (result[1])
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*result + 72))(*result);
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = "src/lib/dnssd/ResolverProxy.cpp";
  *(_DWORD *)(a2 + 16) = 67;
  return result;
}

uint64_t sub_2341F3FB4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  _QWORD v6[2];

  v1 = a1[1];
  if (v1)
  {
    v2 = 0;
    while (*(_BYTE *)(*a1 + v2) != 43)
    {
      if (v1 == ++v2)
      {
        v2 = a1[1];
        break;
      }
    }
  }
  else
  {
    v2 = 0;
  }
  if (v2 >= v1 - 1)
  {
    return 0;
  }
  else
  {
    sub_233BF7114(v6, *a1 + v2 + 1, v1 + ~v2);
    v3 = sub_2341F4108((uint64_t)v6, 0);
    if (v3 >= 0x10000)
      return 0;
    else
      return (unsigned __int16)v3;
  }
}

uint64_t sub_2341F404C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  v3 = 0;
  if (v2)
  {
    while (*(_BYTE *)(v1 + v3) != 43)
    {
      if (v2 == ++v3)
      {
        v3 = a1[1];
        break;
      }
    }
  }
  sub_233BF7114(v7, v1, v3);
  v4 = sub_2341F4108((uint64_t)v7, 0);
  if (v4 >= 0x10000)
    return 0;
  else
    return (unsigned __int16)v4;
}

uint64_t sub_2341F40B0(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_2341F4108(a1, 0);
  if (v1 >= 0x10000)
    return 0;
  else
    return (unsigned __int16)v1;
}

uint64_t sub_2341F40D8(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_2341F4108(a1, 0);
  if (v1 >= 0x100)
    return 0;
  else
    return v1;
}

uint64_t sub_2341F4100(uint64_t a1)
{
  return sub_2341F4108(a1, 0);
}

uint64_t sub_2341F4108(uint64_t a1, uint64_t a2)
{
  size_t v3;
  _BYTE *v4;
  unint64_t v5;
  BOOL v6;
  char *v8;
  char __dst[11];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 <= 0xA)
  {
    if (v3 <= 1)
    {
      v4 = *(_BYTE **)a1;
    }
    else
    {
      v4 = *(_BYTE **)a1;
      if (**(_BYTE **)a1 == 48)
        return a2;
    }
    memcpy(__dst, v4, v3);
    __dst[v3] = 0;
    v8 = 0;
    v5 = strtoul(__dst, &v8, 10);
    if (v8 > __dst)
    {
      if (*v8)
        v6 = 1;
      else
        v6 = v5 == -1;
      if (!v6)
      {
        if (HIDWORD(v5))
          return a2;
        else
          return v5;
      }
    }
  }
  return a2;
}

const void **sub_2341F41E0(const void **result, void *__dst)
{
  size_t v3;

  if (__dst)
  {
    if ((unint64_t)result[1] >= 0x20)
      v3 = 32;
    else
      v3 = (size_t)result[1];
    result = (const void **)memcpy(__dst, *result, v3);
    *((_BYTE *)__dst + v3) = 0;
  }
  return result;
}

uint64_t sub_2341F4220(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  result = sub_234115404(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, 50);
  *a3 = result;
  return result;
}

const void **sub_2341F4254(const void **result, void *__dst)
{
  size_t v3;

  if (__dst)
  {
    if ((unint64_t)result[1] >= 0x80)
      v3 = 128;
    else
      v3 = (size_t)result[1];
    result = (const void **)memcpy(__dst, *result, v3);
    *((_BYTE *)__dst + v3) = 0;
  }
  return result;
}

BOOL sub_2341F4294(unsigned __int8 **a1)
{
  return a1[1] == (unsigned __int8 *)1 && **a1 == 49;
}

unint64_t sub_2341F42BC(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_2341F4108(a1, 0xFFFFFFFFLL);
  LODWORD(v2) = v1 & 0xFFFFFF00;
  if (v1 <= 0x36EE80)
    v3 = v1;
  else
    v3 = 0;
  if (v1 <= 0x36EE80)
    v2 = v2;
  else
    v2 = 0;
  return v2 | ((unint64_t)(v1 < 0x36EE81) << 32) | v3;
}

uint64_t sub_2341F4308(uint64_t a1)
{
  unsigned int v1;
  int v2;

  v1 = sub_2341F4108(a1, 0);
  if (v1 >= 0x10000)
    v2 = 0x10000;
  else
    v2 = v1;
  if ((_WORD)v2)
    return v2 | 0x10000u;
  else
    return 0;
}

uint64_t sub_2341F4338(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = (char *)&unk_2342EE7A8;
  while (1)
  {
    v3 = a1[1];
    if (v3 == strlen(v2 + 10))
      break;
LABEL_8:
    v2 += 16;
    if (v2 == &jpt_2341F6070)
      return 0;
  }
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      v5 = __tolower(*(unsigned __int8 *)(*a1 + v4));
      if (v5 != __tolower(v2[v4 + 10]))
        break;
      if ((unint64_t)++v4 >= a1[1])
        return v2[8];
    }
    goto LABEL_8;
  }
  return v2[8];
}

uint64_t sub_2341F43E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int16 v6;
  char v7;
  void *v8;
  const void *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  __int16 v14;
  BOOL v15;

  result = sub_2341F4338(a1);
  switch((int)result)
  {
    case 1:
      result = sub_2341F4108(a2, 0);
      if (result >= 0x10000)
        v6 = 0;
      else
        v6 = result;
      *(_WORD *)(a3 + 180) = v6;
      break;
    case 2:
      *(_WORD *)(a3 + 182) = sub_2341F404C((uint64_t *)a2);
      result = sub_2341F3FB4((_QWORD *)a2);
      *(_WORD *)(a3 + 184) = result;
      break;
    case 3:
      result = sub_2341F4108(a2, 0);
      if (result >= 0x100)
        v7 = 0;
      else
        v7 = result;
      *(_BYTE *)(a3 + 188) = v7;
      break;
    case 4:
      result = sub_2341F4108(a2, 0);
      *(_DWORD *)(a3 + 176) = result;
      break;
    case 5:
      v8 = (void *)(a3 + 257);
      v9 = *(const void **)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v10 >= 0x20;
      v12 = 32;
      goto LABEL_15;
    case 6:
      result = sub_234115404(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), a3 + 190, 50);
      *(_QWORD *)(a3 + 168) = result;
      break;
    case 7:
      v8 = (void *)(a3 + 290);
      v9 = *(const void **)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = v10 >= 0x80;
      v12 = 128;
LABEL_15:
      if (v11)
        v13 = v12;
      else
        v13 = v10;
      result = (uint64_t)memcpy(v8, v9, v13);
      *((_BYTE *)v8 + v13) = 0;
      break;
    case 8:
      result = sub_2341F4108(a2, 0);
      if (result >= 0x10000)
        v14 = 0;
      else
        v14 = result;
      *(_WORD *)(a3 + 186) = v14;
      break;
    case 9:
      v15 = *(_QWORD *)(a2 + 8) == 1 && **(_BYTE **)a2 == 49;
      *(_BYTE *)(a3 + 189) = v15;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2341F4534(_QWORD *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  _BOOL4 v14;
  __int16 v15;
  __int16 v16;

  result = sub_2341F4338(a1);
  switch((int)result)
  {
    case 10:
      result = sub_2341F4108((uint64_t)a2, 0xFFFFFFFFLL);
      v6 = result & 0xFFFFFF00;
      v7 = result;
      if (result > 0x36EE80)
      {
        v7 = 0;
        v6 = 0;
      }
      *(_DWORD *)(a3 + 144) = v6 | v7;
      *(_BYTE *)(a3 + 148) = result <= 0x36EE80;
      break;
    case 11:
      result = sub_2341F4108((uint64_t)a2, 0xFFFFFFFFLL);
      v8 = result & 0xFFFFFF00;
      v9 = result;
      if (result > 0x36EE80)
      {
        v9 = 0;
        v8 = 0;
      }
      *(_DWORD *)(a3 + 152) = v8 | v9;
      *(_BYTE *)(a3 + 156) = result <= 0x36EE80;
      break;
    case 12:
      result = sub_2341F4108((uint64_t)a2, 0);
      if (result >= 0x10000)
        v10 = 0x10000;
      else
        v10 = result;
      if ((_WORD)v10)
        v11 = v10 | 0x10000;
      else
        v11 = 0;
      *(_WORD *)(a3 + 160) = v11;
      *(_BYTE *)(a3 + 162) = BYTE2(v11);
      break;
    case 13:
      result = sub_2341F4108((uint64_t)a2, 0);
      if (result >= 0x100)
        v12 = 0;
      else
        v12 = result;
      *(_BYTE *)(a3 + 139) = (v12 & 2) != 0;
      *(_BYTE *)(a3 + 140) = (v12 & 4) != 0;
      break;
    case 14:
      v13 = **a2;
      v14 = a2[1] == (unsigned __int8 *)1 && (v13 & 0xFE) == 48;
      v15 = v14 && v13 == 49;
      if (v14)
        v16 = 256;
      else
        v16 = 0;
      *(_WORD *)(a3 + 141) = v16 | v15;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_2341F4690(uint64_t a1, uint64_t a2, __int128 **a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t (*v7)(void);
  uint64_t result;
  NSObject *v9;
  uint64_t v12;
  uint64_t *v13;
  uint64_t i;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unsigned __int8 *v25[2];
  uint8_t v26[16];
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  const char *v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint8_t buf[16];
  uint64_t v36;
  __int16 v37;
  char v38[38];
  _DWORD v39[2];
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (*(_DWORD *)a4)
    {
      memset(buf, 0, sizeof(buf));
      v33 = *a4;
      v34 = *((_QWORD *)a4 + 2);
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 24);
      return v7();
    }
    if (!a2)
    {
      memset(buf, 0, sizeof(buf));
      v30 = 166;
      v31 = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
      v32 = 329;
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 24);
      return v7();
    }
    v29 = 0uLL;
    sub_2341C4D3C((const char *)a2, &v29, (uint64_t)buf);
    *a4 = *(_OWORD *)buf;
    *((_QWORD *)a4 + 2) = v36;
    if (*(_DWORD *)a4)
    {
      v12 = *(_QWORD *)(a1 + 32);
      memset(buf, 0, sizeof(buf));
      v27 = *a4;
      v28 = *((_QWORD *)a4 + 2);
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v12 + 24);
      return v7();
    }
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    *(_QWORD *)&buf[8] = 0;
    v13 = &v36;
    v39[0] = 0;
    *(_DWORD *)((char *)v39 + 3) = 0;
    for (i = 16; i != 96; i += 16)
      *(_OWORD *)&buf[i] = xmmword_25615DD84;
    strncpy(v38, (const char *)(a2 + 34), 0x29uLL);
    BYTE2(v39[0]) = 0;
    *(_DWORD *)buf = *(_DWORD *)(a2 + 92);
    v37 = *(_WORD *)(a2 + 88);
    v46 = v29;
    v15 = a3[1];
    if (v15)
    {
      v16 = 0;
      v17 = *a3;
      v18 = 16 * (_QWORD)v15;
      while (v16 != -5)
      {
        v19 = *v17++;
        *(_OWORD *)v13 = v19;
        v13 += 2;
        --v16;
        v18 -= 16;
        if (!v18)
        {
          v20 = -v16;
          goto LABEL_26;
        }
      }
      v21 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_DEFAULT, "Can't add more IPs to ResolvedNodeData", v26, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x22u, 2);
      v20 = 5;
    }
    else
    {
      v20 = 0;
    }
LABEL_26:
    *(_QWORD *)&buf[8] = v20;
    if (*(_QWORD *)(a2 + 104))
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = strlen(*(const char **)(*(_QWORD *)(a2 + 96) + v22));
        sub_233BF7114(v26, *(_QWORD *)(*(_QWORD *)(a2 + 96) + v22), v24);
        sub_233BF7114(v25, *(_QWORD *)(*(_QWORD *)(a2 + 96) + v22 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 96) + v22 + 16));
        sub_2341F4534(v26, v25, (uint64_t)buf);
        ++v23;
        v22 += 24;
      }
      while (v23 < *(_QWORD *)(a2 + 104));
    }
    sub_2341F49EC((uint64_t)buf);
    return (*(uint64_t (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), buf);
  }
  else
  {
    v9 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "No delegate to handle node resolution data.", buf, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 1);
  }
  return result;
}

uint64_t sub_2341F49EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 168);
    v3 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)buf = 67109888;
    v7 = HIDWORD(v3);
    v8 = 1024;
    v9 = v3;
    v10 = 1024;
    v11 = HIDWORD(v4);
    v12 = 1024;
    v13 = v4;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Node ID resolved for %08X%08X-%08X%08X", buf, 0x1Au);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  return sub_2341F70EC(a1);
}

_QWORD *sub_2341F4AF0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;
  _BYTE v6[24];

  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1;
  v4 = sub_2341D660C(a2);
  sub_2341C4D3C((const char *)a1, v4, (uint64_t)v6);
  LOBYTE(a1) = *(_DWORD *)(a1 + 148) == 0;
  result = sub_2341D660C(a2);
  *((_BYTE *)result + 16) = a1;
  return result;
}

void sub_2341F4B54(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD v18[2];
  uint8_t buf[28];
  int v20;

  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 156) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 164) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  *(_BYTE *)(a3 + 170) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 135) = 0u;
  sub_2341F7078(a3 + 8);
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 411) = 0u;
  *(_QWORD *)a3 = 0;
  v6 = sub_2341D65EC((_QWORD *)a3);
  strncpy((char *)v6 + 98, (const char *)(a1 + 34), 0x29uLL);
  *((_BYTE *)v6 + 138) = 0;
  strncpy((char *)v6 + 240, (const char *)a1, 0x11uLL);
  *((_BYTE *)v6 + 256) = 0;
  v20 = *(_DWORD *)(a1 + 92);
  sub_2341F3B94(a2);
  v7 = a2[1];
  if (v7)
  {
    v8 = 0;
    v9 = (__int128 *)*a2;
    v10 = v6 + 2;
    v11 = 16 * v7;
    while (v8 != -5)
    {
      v12 = *v9++;
      *v10++ = v12;
      --v8;
      v11 -= 16;
      if (!v11)
      {
        v13 = -v8;
        goto LABEL_12;
      }
    }
    v14 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Can't add more IPs to DiscoveredNodeData", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    v13 = 5;
  }
  else
  {
    v13 = 0;
  }
LABEL_12:
  *(_DWORD *)v6 = *(_DWORD *)(a1 + 92);
  v6[1] = v13;
  *((_WORD *)v6 + 48) = *(_WORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 104))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = strlen(*(const char **)(*(_QWORD *)(a1 + 96) + v15));
      sub_233BF7114(buf, *(_QWORD *)(*(_QWORD *)(a1 + 96) + v15), v17);
      sub_233BF7114(v18, *(_QWORD *)(*(_QWORD *)(a1 + 96) + v15 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 96) + v15 + 16));
      sub_2341F43E0(buf, (uint64_t)v18, (uint64_t)v6);
      sub_2341F43E0(buf, (uint64_t)v18, (uint64_t)v6);
      ++v16;
      v15 += 24;
    }
    while (v16 < *(_QWORD *)(a1 + 104));
  }
}

double sub_2341F4D7C@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  double result;
  _QWORD v6[3];
  __int128 v7;
  uint64_t v8;

  if (a1[16])
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v3 = 420;
LABEL_3:
    *(_DWORD *)(a2 + 16) = v3;
    return result;
  }
  a1[16] = 1;
  v7 = 0uLL;
  v8 = 0;
  sub_2341BA604((uint64_t (*)(uint64_t, int *))sub_2341F4E3C, (uint64_t)sub_2341F5064, (uint64_t)a1, (uint64_t)&v7);
  if (!(_DWORD)v7)
  {
    (*(void (**)(_QWORD *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 80))(v6, a1);
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v3 = 431;
    goto LABEL_3;
  }
  a1[16] = 0;
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  return result;
}

void sub_2341F4E3C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[16];
  uint64_t v11;
  uint8_t v12[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2)
  {
    v4 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v11 = *(_QWORD *)(a2 + 16);
      v5 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "DNS-SD initialization failed with %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v11 = *(_QWORD *)(a2 + 16);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x22u, 1);
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 2;
    *(_WORD *)buf = -32750;
    v8 = 0uLL;
    v9 = 0;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE820((uint64_t)&byte_2542530C0, (__int128 *)buf, (uint64_t)&v8);
    if ((_DWORD)v8)
    {
      v6 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v12 = v8;
        v13 = v9;
        v7 = sub_2341083CC((const char **)v12, 1);
        *(_DWORD *)v12 = 136315138;
        *(_QWORD *)&v12[4] = v7;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Posting DNS-SD platform initialized event failed with %s", v12, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v12 = v8;
        v13 = v9;
        sub_2341083CC((const char **)v12, 1);
        sub_2341147D0(0x22u, 1);
      }
    }
  }
}

void sub_2341F5064(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  NSObject *v5;
  char *v6;
  uint8_t v7[16];
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2 == 69)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *(_WORD *)v7 = -32749;
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    sub_2341BE820((uint64_t)&byte_2542530C0, (__int128 *)v7, (uint64_t)buf);
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_QWORD *)(a2 + 16) = v10;
    if (*(_DWORD *)a2)
    {
      v3 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)a2;
        v10 = *(_QWORD *)(a2 + 16);
        v4 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v4;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Failed to post DNS-SD restart event: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)a2;
        v10 = *(_QWORD *)(a2 + 16);
        sub_2341083CC((const char **)buf, 1);
LABEL_13:
        sub_2341147D0(0x22u, 1);
      }
    }
  }
  else
  {
    v5 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v6 = sub_2341083CC((const char **)v7, 1);
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)&v7[4] = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "DNS-SD error: %s", v7, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      v8 = *(_QWORD *)(a2 + 16);
      sub_2341083CC((const char **)v7, 1);
      goto LABEL_13;
    }
  }
}

void sub_2341F5280(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
  {
    sub_2341BA680();
    *(_BYTE *)(a1 + 16) = 0;
  }
}

void sub_2341F52AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_2341BA680();
    *(_BYTE *)(a1 + 8) = 0;
  }
}

char *sub_2341F52D8@<X0>(char *result@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 > 0x10)
    return sub_234115248(result + 17, 8, a2, a3, 3u, a4);
  *(_DWORD *)a4 = 11;
  *(_QWORD *)(a4 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a4 + 16) = 494;
  return result;
}

uint64_t sub_2341F5318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_234136ABC();
  *(_QWORD *)(a1 + 17) = result;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a2 + 16) = 506;
  return result;
}

uint64_t sub_2341F5358(uint64_t a1, const char *a2, const char *a3, int *a4)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  const char *v13;
  const char *v14;
  _BYTE buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  v8 = sub_234117B80(0x22u, "Discovery");
  v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a4;
      *(_QWORD *)&buf[16] = *((_QWORD *)a4 + 2);
      v10 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "mDNS service published error: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = *(_OWORD *)a4;
      *(_QWORD *)&buf[16] = *((_QWORD *)a4 + 2);
      sub_2341083CC((const char **)buf, 1);
      v12 = 1;
      return sub_2341147D0(0x22u, v12);
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
        v13 = a2;
      else
        v13 = "(null)";
      if (a3)
        v14 = a3;
      else
        v14 = "(null)";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v14;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "mDNS service published: %s; instance name: %s",
        buf,
        0x16u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
    {
      v12 = 2;
      return sub_2341147D0(0x22u, v12);
    }
  }
  return result;
}

void sub_2341F5510(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  __int16 v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;

  v8 = *(_WORD *)a7;
  v11 = *(_DWORD *)(a7 + 4);
  v9 = *(_QWORD *)(a7 + 24);
  v10[0] = a7 + 9;
  v10[1] = v9;
  sub_2341F5564(a1, a2, a3, a4, a5, a6, v8, &v11, a8, v10, 1, *(_QWORD *)(a7 + 56), *(_QWORD *)(a7 + 64));
}

void sub_2341F5564(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, int *a8@<X7>, __n128 *a9@<X8>, _QWORD *a10, char a11, uint64_t a12, uint64_t a13)
{
  _QWORD v22[2];
  char v23[34];
  _BYTE v24[41];
  char v25[13];
  __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v22[0] = a12;
  v22[1] = a13;
  memset(v24, 0, sizeof(v24));
  v27 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 120;
  a9->n128_u64[1] = 0;
  a9[1].n128_u64[0] = 0;
  a9->n128_u64[0] = 0;
  sub_2341C4EC4((uint64_t)v24, 0x29uLL, a10, (uint64_t)a9);
  if (!a9->n128_u32[0])
  {
    a9->n128_u64[0] = 0;
    a9->n128_u64[1] = 0;
    a9[1].n128_u64[0] = 0;
    if (a11 == 1)
      sub_2341C4CC8(v23, 0x22uLL, v22, (uint64_t)a9);
    else
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v23, 34);
    if (!a9->n128_u32[0])
    {
      strncpy(v25, a2, 9uLL);
      v25[8] = 0;
      v25[10] = 3;
      v27 = *a8;
      v25[9] = a11;
      v26 = a7;
      v28 = a3;
      v29 = a4;
      v30 = a5;
      v31 = a6;
      a9->n128_u64[1] = 0;
      a9[1].n128_u64[0] = 0;
      a9->n128_u64[0] = 0;
      sub_2341BA72C((uint64_t)v23, (uint64_t)sub_2341F5358, a1, a9);
      if (!a9->n128_u32[0])
      {
        a9->n128_u32[0] = 0;
        a9->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
        a9[1].n128_u32[0] = 580;
      }
    }
  }
}

void sub_2341F5710(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  __int16 v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;

  v8 = *(_WORD *)a7;
  v11 = *(_DWORD *)(a7 + 4);
  v9 = *(_QWORD *)(a7 + 24);
  v10[0] = a7 + 9;
  v10[1] = v9;
  sub_2341F5564(a1, a2, a3, a4, a5, a6, v8, &v11, a8, v10, 0, 0, 0);
}

void sub_2341F575C(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v6;
  int v7;
  char v8[2];
  char v9[2];
  char v10[6];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char __str[19];
  char v16[8];
  char v17[8];
  uint64_t v18;
  _BYTE v19[120];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v7 = 604;
    goto LABEL_11;
  }
  v11 = 0;
  v12 = 0;
  v18 = 0;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_2341F5968(0xAu, (uint64_t)v19, &v12, v17, 8uLL, a2, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_2341F5968(0xBu, (uint64_t)v19, &v12, v16, 8uLL, a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_2341F5968(0xCu, (uint64_t)v19, &v12, v10, 6uLL, a2, (uint64_t)a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_2341F5968(0xDu, (uint64_t)v19, &v12, v9, 2uLL, a2, (uint64_t)a3);
        if (!a3->n128_u32[0])
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          sub_2341F5968(0xEu, (uint64_t)v19, &v12, v8, 2uLL, a2, (uint64_t)a3);
          if (!a3->n128_u32[0])
          {
            a3->n128_u64[0] = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            v6 = *(_QWORD *)(a2 + 64);
            LOBYTE(v13) = 8;
            *((_QWORD *)&v13 + 1) = v6;
            v14 = 0;
            sub_2341F7794(__str, 0x13uLL, &v13, (uint64_t)&v18, &v11, a3);
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_2341F5510(a1, "_matter", (uint64_t)v19, v12, (uint64_t)&v18, v11, a2, a3);
              if (!a3->n128_u32[0])
              {
                a3->n128_u32[0] = 0;
                a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                v7 = 616;
LABEL_11:
                a3[1].n128_u32[0] = v7;
              }
            }
          }
        }
      }
    }
  }
}

double sub_2341F5968@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  double result;
  uint64_t v14;
  char *v15;
  int v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;

  v20 = 0uLL;
  v21 = 0;
  if (a1 - 10 >= 3)
  {
    if (a1 == 14)
    {
      if (!*(_BYTE *)(a6 + 50))
        goto LABEL_12;
      v14 = *(unsigned __int8 *)(a6 + 50) == 2;
      v15 = "%d";
    }
    else
    {
      if (a1 != 13)
      {
        LODWORD(v20) = 47;
        *((_QWORD *)&v20 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        LODWORD(v21) = 263;
        goto LABEL_16;
      }
      v14 = *(unsigned __int16 *)(a6 + 48);
      if (!*(_WORD *)(a6 + 48))
        goto LABEL_12;
      v15 = "%u";
    }
    sub_2341F8360(v15, a4, a5, 1, (uint64_t)&v20, v14);
  }
  else
  {
    sub_2341F81AC(a4, a5, (unsigned int *)(a6 + 32), a1, (uint64_t)&v20);
  }
  if (!(_DWORD)v20)
  {
    v17 = strnlen(a4, a5);
    v18 = (*a3)++;
    v19 = (_QWORD *)(a2 + 24 * v18);
    *v19 = (char *)&unk_2342EE908 + 16 * a1 + 10;
    v19[1] = a4;
    v19[2] = v17;
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v16 = 305;
    goto LABEL_14;
  }
  if ((_DWORD)v20 == 28)
  {
LABEL_12:
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v16 = 300;
LABEL_14:
    *(_DWORD *)(a7 + 16) = v16;
    return result;
  }
LABEL_16:
  result = *(double *)&v20;
  *(_OWORD *)a7 = v20;
  *(_QWORD *)(a7 + 16) = v21;
  return result;
}

void sub_2341F5ADC(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11[4];
  char v12[7];
  char v13[5];
  char v14[2];
  char v15[6];
  char v16[2];
  char v17[2];
  char v18[6];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25[11];
  char v26[101];
  char v27[13];
  char __str[8];
  char v29[8];
  char v30[8];
  char v31[33];
  char v32[11];
  char v33[12];
  _BYTE v34[32];
  uint64_t v35;
  _BYTE v36[336];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v8 = 621;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = 0;
  v35 = 0;
  memset(v34, 0, sizeof(v34));
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  sub_2341F6008(2u, (uint64_t)v36, &v20, v33, 0xCuLL, (__int16 *)a2, (uint64_t)a3);
  if (!a3->n128_u32[0])
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    sub_2341F6008(4u, (uint64_t)v36, &v20, v32, 0xBuLL, (__int16 *)a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      a3[1].n128_u64[0] = 0;
      sub_2341F6008(5u, (uint64_t)v36, &v20, v31, 0x21uLL, (__int16 *)a2, (uint64_t)a3);
      if (!a3->n128_u32[0])
      {
        a3->n128_u64[0] = 0;
        a3->n128_u64[1] = 0;
        a3[1].n128_u64[0] = 0;
        sub_2341F6008(0xAu, (uint64_t)v36, &v20, v30, 8uLL, (__int16 *)a2, (uint64_t)a3);
        if (!a3->n128_u32[0])
        {
          a3->n128_u64[0] = 0;
          a3->n128_u64[1] = 0;
          a3[1].n128_u64[0] = 0;
          sub_2341F6008(0xBu, (uint64_t)v36, &v20, v29, 8uLL, (__int16 *)a2, (uint64_t)a3);
          if (!a3->n128_u32[0])
          {
            a3->n128_u64[0] = 0;
            a3->n128_u64[1] = 0;
            a3[1].n128_u64[0] = 0;
            sub_2341F6008(0xCu, (uint64_t)v36, &v20, v18, 6uLL, (__int16 *)a2, (uint64_t)a3);
            if (!a3->n128_u32[0])
            {
              a3->n128_u64[0] = 0;
              a3->n128_u64[1] = 0;
              a3[1].n128_u64[0] = 0;
              sub_2341F6008(0xDu, (uint64_t)v36, &v20, v17, 2uLL, (__int16 *)a2, (uint64_t)a3);
              if (!a3->n128_u32[0])
              {
                a3->n128_u64[0] = 0;
                a3->n128_u64[1] = 0;
                a3[1].n128_u64[0] = 0;
                sub_2341F6008(0xEu, (uint64_t)v36, &v20, v16, 2uLL, (__int16 *)a2, (uint64_t)a3);
                if (!a3->n128_u32[0])
                {
                  a3->n128_u64[0] = 0;
                  a3->n128_u64[1] = 0;
                  a3[1].n128_u64[0] = 0;
                  v6 = *(_DWORD *)(a2 + 60);
                  if ((v6 & 0xFF0000) == 0
                    || (LOBYTE(v23) = 3,
                        *((_QWORD *)&v23 + 1) = (unsigned __int16)v6,
                        v24 = 0,
                        sub_2341F7794(__str, 8uLL, &v23, (uint64_t)v34, &v19, a3),
                        !a3->n128_u32[0]))
                  {
                    a3->n128_u64[0] = 0;
                    a3->n128_u64[1] = 0;
                    a3[1].n128_u64[0] = 0;
                    v7 = *(_QWORD *)(a2 + 68);
                    if ((v7 & 0xFF00000000) == 0
                      || (LOBYTE(v23) = 4,
                          *((_QWORD *)&v23 + 1) = v7,
                          v24 = 0,
                          sub_2341F7794(v27, 0xDuLL, &v23, (uint64_t)v34, &v19, a3),
                          !a3->n128_u32[0]))
                    {
                      if (*(_BYTE *)(a2 + 54) == 1)
                      {
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_2341F6008(9u, (uint64_t)v36, &v20, (char *)&v23, 2uLL, (__int16 *)a2, (uint64_t)a3);
                        if (!a3->n128_u32[0])
                        {
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_2341F5710(a1, "_matterd", (uint64_t)v36, v20, (uint64_t)v34, v19, a2, a3);
                          if (!a3->n128_u32[0])
                          {
                            a3->n128_u32[0] = 0;
                            a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                            v8 = 639;
LABEL_19:
                            a3[1].n128_u32[0] = v8;
                          }
                        }
                      }
                      else
                      {
                        a3->n128_u64[0] = 0;
                        a3->n128_u64[1] = 0;
                        a3[1].n128_u64[0] = 0;
                        sub_2341F6008(1u, (uint64_t)v36, &v20, v15, 6uLL, (__int16 *)a2, (uint64_t)a3);
                        if (!a3->n128_u32[0])
                        {
                          a3->n128_u64[0] = 0;
                          a3->n128_u64[1] = 0;
                          a3[1].n128_u64[0] = 0;
                          sub_2341F6008(3u, (uint64_t)v36, &v20, v14, 2uLL, (__int16 *)a2, (uint64_t)a3);
                          if (!a3->n128_u32[0])
                          {
                            a3->n128_u64[0] = 0;
                            a3->n128_u64[1] = 0;
                            a3[1].n128_u64[0] = 0;
                            sub_2341F6008(6u, (uint64_t)v36, &v20, v26, 0x65uLL, (__int16 *)a2, (uint64_t)a3);
                            if (!a3->n128_u32[0])
                            {
                              a3->n128_u64[0] = 0;
                              a3->n128_u64[1] = 0;
                              a3[1].n128_u64[0] = 0;
                              sub_2341F6008(8u, (uint64_t)v36, &v20, v25, 0xBuLL, (__int16 *)a2, (uint64_t)a3);
                              if (!a3->n128_u32[0])
                              {
                                a3->n128_u64[0] = 0;
                                a3->n128_u64[1] = 0;
                                a3[1].n128_u64[0] = 0;
                                sub_2341F6008(7u, (uint64_t)v36, &v20, (char *)&v23, 0x81uLL, (__int16 *)a2, (uint64_t)a3);
                                if (!a3->n128_u32[0])
                                {
                                  a3->n128_u64[0] = 0;
                                  a3->n128_u64[1] = 0;
                                  a3[1].n128_u64[0] = 0;
                                  v9 = *(unsigned __int8 *)(a2 + 51);
                                  LOBYTE(v21) = 1;
                                  *((_QWORD *)&v21 + 1) = v9;
                                  v22 = 0;
                                  sub_2341F7794(v13, 5uLL, &v21, (uint64_t)v34, &v19, a3);
                                  if (!a3->n128_u32[0])
                                  {
                                    a3->n128_u64[0] = 0;
                                    a3->n128_u64[1] = 0;
                                    a3[1].n128_u64[0] = 0;
                                    v10 = *(unsigned __int16 *)(a2 + 52);
                                    LOBYTE(v21) = 2;
                                    *((_QWORD *)&v21 + 1) = v10;
                                    v22 = 0;
                                    sub_2341F7794(v12, 7uLL, &v21, (uint64_t)v34, &v19, a3);
                                    if (!a3->n128_u32[0])
                                    {
                                      a3->n128_u64[0] = 0;
                                      a3->n128_u64[1] = 0;
                                      a3[1].n128_u64[0] = 0;
                                      if (!*(_DWORD *)(a2 + 56)
                                        || (LOBYTE(v21) = 5,
                                            *((_QWORD *)&v21 + 1) = 0,
                                            v22 = 0,
                                            sub_2341F7794(v11, 4uLL, &v21, (uint64_t)v34, &v19, a3),
                                            !a3->n128_u32[0]))
                                      {
                                        a3->n128_u64[0] = 0;
                                        a3->n128_u64[1] = 0;
                                        a3[1].n128_u64[0] = 0;
                                        sub_2341F5710(a1, "_matterc", (uint64_t)v36, v20, (uint64_t)v34, v19, a2, a3);
                                        if (!a3->n128_u32[0])
                                        {
                                          a3->n128_u32[0] = 0;
                                          a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
                                          v8 = 653;
                                          goto LABEL_19;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_2341F6008@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char *a4@<X3>, size_t a5@<X4>, __int16 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  int v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int128 v28;
  _BYTE v29[27];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0uLL;
  v25 = 0;
  switch(a1)
  {
    case 1u:
      v13 = (unsigned __int16)a6[26];
      goto LABEL_23;
    case 2u:
      if ((*((_DWORD *)a6 + 15) & 0xFF0000) == 0)
        goto LABEL_27;
      v13 = (unsigned __int16)*((_DWORD *)a6 + 15);
      if ((*((_DWORD *)a6 + 16) & 0xFF0000) == 0)
        goto LABEL_23;
      sub_2341F8360("%u+%u", a4, a5, 3, (uint64_t)&v24, v13, (unsigned __int16)*((_DWORD *)a6 + 16));
      goto LABEL_25;
    case 3u:
      v13 = (unsigned __int16)a6[28];
      goto LABEL_23;
    case 4u:
      v13 = *(_QWORD *)(a6 + 34);
      if ((v13 & 0xFF00000000) == 0)
        goto LABEL_27;
      goto LABEL_23;
    case 5u:
      if (!*((_BYTE *)a6 + 113))
        goto LABEL_27;
      v15 = (uint64_t)(a6 + 40);
      goto LABEL_17;
    case 6u:
      if (!*((_BYTE *)a6 + 215))
        goto LABEL_27;
      v15 = (uint64_t)(a6 + 57);
      goto LABEL_17;
    case 7u:
      if (!*((_BYTE *)a6 + 345))
        goto LABEL_27;
      v15 = (uint64_t)(a6 + 108);
LABEL_17:
      sub_2341F8360("%s", a4, a5, 0, (uint64_t)&v24, v15);
      goto LABEL_25;
    case 8u:
      if ((*((_DWORD *)a6 + 19) & 0xFF0000) == 0)
        goto LABEL_27;
      v13 = (unsigned __int16)*((_DWORD *)a6 + 19);
      goto LABEL_23;
    case 9u:
      v16 = (unsigned __int16)a6[173];
      if (v16 <= 0x100)
        LOBYTE(v16) = 0;
      v13 = v16 != 0;
      goto LABEL_23;
    default:
      v26 = *a6;
      v27 = *((_DWORD *)a6 + 1);
      v28 = *(_OWORD *)(a6 + 4);
      *(_OWORD *)v29 = *(_OWORD *)(a6 + 12);
      v14 = *(_OWORD *)((char *)a6 + 35);
      *(_OWORD *)&v29[11] = v14;
      if (a1 - 10 < 3)
      {
        sub_2341F81AC(a4, a5, (unsigned int *)&v29[8], a1, (uint64_t)&v24);
        goto LABEL_25;
      }
      if (a1 == 14)
      {
        if (!v29[26])
        {
          LODWORD(v24) = 28;
          *((_QWORD *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
          v22 = 260;
          goto LABEL_39;
        }
        v13 = v29[26] == 2;
        v17 = "%d";
LABEL_24:
        sub_2341F8360(v17, a4, a5, 1, (uint64_t)&v24, v13);
        goto LABEL_25;
      }
      if (a1 != 13)
      {
        LODWORD(v24) = 47;
        *((_QWORD *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        v22 = 263;
        goto LABEL_39;
      }
      v13 = *(unsigned __int16 *)&v29[24];
      if (*(_WORD *)&v29[24])
      {
LABEL_23:
        v17 = "%u";
        goto LABEL_24;
      }
      LODWORD(v24) = 28;
      *((_QWORD *)&v24 + 1) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
      v22 = 243;
LABEL_39:
      LODWORD(v25) = v22;
LABEL_25:
      if ((_DWORD)v24)
      {
        if ((_DWORD)v24 != 28)
        {
          *(_QWORD *)&v14 = v24;
          *(_OWORD *)a7 = v24;
          *(_QWORD *)(a7 + 16) = v25;
          return *(double *)&v14;
        }
LABEL_27:
        *(_DWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        v18 = 300;
      }
      else
      {
        v19 = strnlen(a4, a5);
        v20 = (*a3)++;
        v21 = (_QWORD *)(a2 + 24 * v20);
        *v21 = (char *)&unk_2342EE908 + 16 * a1 + 10;
        v21[1] = a4;
        v21[2] = v19;
        *(_DWORD *)a7 = 0;
        *(_QWORD *)(a7 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
        v18 = 305;
      }
      *(_DWORD *)(a7 + 16) = v18;
      return *(double *)&v14;
  }
}

void sub_2341F630C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_2341BA6A0(a2);
    if (*(_DWORD *)a2)
      return;
    v3 = 0;
    v4 = 661;
  }
  else
  {
    v4 = 658;
    v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  a2[1] = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *((_DWORD *)a2 + 4) = v4;
}

void sub_2341F6378(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
  {
    sub_2341BAC84(a2);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 666;
  }
}

BOOL sub_2341F63D0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) == 2;
}

BOOL sub_2341F63E0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 8) == 2;
}

void sub_2341F63F0(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint32_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int128 v19;
  _BYTE v20[25];
  uint64_t v21;
  __int16 v22;
  char v23;
  int v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 16) == 2)
  {
    v6 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *a2;
      v7 = a2[1];
      v9 = HIDWORD(*a2);
      *(_DWORD *)buf = 67109888;
      v12 = HIDWORD(v7);
      v13 = 1024;
      v14 = v7;
      v15 = 1024;
      v16 = v9;
      v17 = 1024;
      v18 = v8;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Resolving %08X%08X:%08X%08X ...", buf, 0x1Au);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    memset(v20, 0, sizeof(v20));
    v19 = 0u;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 120;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    sub_2341C4CC8((char *)buf, 0x22uLL, a2, (uint64_t)a3);
    if (!a3->n128_u32[0])
    {
      v21 = 0x72657474616D5FLL;
      v22 = 256;
      v23 = 3;
      v10 = 0;
      sub_2341BB21C((uint64_t)buf, &v10, (uint64_t)sub_2341F4690, a1, a3);
    }
  }
  else
  {
    a3->n128_u32[0] = 3;
    a3->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
    a3[1].n128_u32[0] = 679;
  }
}

void sub_2341F65BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  sub_2341F63F0(a1 - 8, a2, a3);
}

char *sub_2341F65C4(uint64_t a1, _QWORD *a2)
{
  char *result;
  _QWORD v3[3];
  char v4[34];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  memset(v3, 0, sizeof(v3));
  result = sub_2341C4CC8(v4, 0x22uLL, a2, (uint64_t)v3);
  if (!LODWORD(v3[0]))
    return (char *)sub_2341BB58C(v4);
  return result;
}

void sub_2341F6638(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  double v8;
  int *v9;
  int *v10;
  uint32_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint32_t v15;
  __int128 v16;
  uint64_t v17;
  char __str[34];
  __int128 v19;
  _BYTE v20[25];
  uint64_t v21;
  __int16 v22;
  char v23;
  int v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  v8 = sub_2341F4D7C(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, _BYTE *, uint64_t, double))(*(_QWORD *)a1 + 120))(__str, a1, a3, v8);
    if (*(_BYTE *)a2 == 6)
    {
      memset(v20, 0, sizeof(v20));
      v19 = 0u;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 120;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v16 = *(_OWORD *)a2;
      v17 = *(_QWORD *)(a2 + 16);
      sub_2341C4F80(__str, 0x22uLL, (uint64_t)&v16, (uint64_t)a4);
      if (a4->n128_u32[0])
        return;
      v21 = 0x6372657474616D5FLL;
      v22 = 0;
      v23 = 3;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v15 = 0;
      v9 = sub_2341F68F8((int *)a3);
      sub_2341BB21C((uint64_t)__str, &v15, (uint64_t)sub_2341F6838, (uint64_t)v9, a4);
      if (!a4->n128_u32[0])
        return;
    }
    else
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      v13 = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a2 + 16);
      sub_2341C517C((uint64_t)__str, 0x21uLL, &v13, 2, (uint64_t)a4);
      if (a4->n128_u32[0])
        return;
      v12 = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v11 = 0;
      v10 = sub_2341F68F8((int *)a3);
      sub_2341BACA0(__str, 0, &v11, (uint64_t)sub_2341F6928, (uint64_t)v10, &v12, a4);
      if (!a4->n128_u32[0])
      {
        *(_QWORD *)(a3 + 16) = v12;
        *(_BYTE *)(a3 + 24) = 1;
        return;
      }
    }
    sub_2341F3E14((int *)a3);
  }
}

void sub_2341F6838(int *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  _QWORD *v5;
  _QWORD v6[55];

  v6[54] = *MEMORY[0x24BDAC8D0];
  if (*a4)
  {
    sub_2341F3E14(a1);
  }
  else
  {
    v6[0] = -1;
    sub_2341F4B54(a2, a3, (uint64_t)v6);
    v5 = sub_2341D65EC(v6);
    sub_2341F7828((uint64_t)v5);
    sub_2341F7EF8((uint64_t)a1);
    sub_2341F3E14(a1);
  }
}

int *sub_2341F68F8(int *result)
{
  int v1;

  v1 = *result;
  if (*result == -1)
    sub_2342590FC((uint64_t)result);
  if (!v1)
    sub_234259060((uint64_t)result);
  *result = v1 + 1;
  return result;
}

void sub_2341F6928(uint64_t a1, uint64_t a2, uint64_t a3, char a4, __int128 *a5)
{
  uint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint32_t v13;
  __n128 v14[27];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a5)
  {
    if (*(_BYTE *)(a1 + 24))
      *(_BYTE *)(a1 + 24) = 0;
    sub_2341F3E14((int *)a1);
  }
  else
  {
    v7 = a3;
    if (a3)
    {
      v9 = a2 + 75;
      do
      {
        sub_2341F68F8((int *)a1);
        if (!strcmp((const char *)v9, "_matter"))
        {
          if (!*(_DWORD *)a5)
          {
            v14[0].n128_u64[0] = -1;
            sub_2341F4AF0(v9 - 75, v14);
            v10 = sub_2341D660C(v14);
            sub_2341F7FA0(v10);
            sub_2341F7EF8(a1);
          }
          sub_2341F3E14((int *)a1);
        }
        else if (*(_BYTE *)(v9 - 41) && *(_QWORD *)(v9 + 29) && *(_BYTE *)(v9 + 69))
        {
          sub_2341B864C(v14, v9 + 53, 1);
          v11 = *a5;
          v12 = *((_QWORD *)a5 + 2);
          sub_2341F6838((int *)a1, v9 - 75, (uint64_t *)v14, &v11);
        }
        else
        {
          v13 = *(_DWORD *)(v9 + 17);
          sub_2341BB21C(v9 - 75, &v13, (uint64_t)sub_2341F6838, a1, v14);
        }
        v9 += 152;
        --v7;
      }
      while (v7);
    }
    if ((a4 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 24))
        *(_BYTE *)(a1 + 24) = 0;
      sub_2341F3E14((int *)a1);
    }
  }
}

void sub_2341F6AFC(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  double v8;
  int *v9;
  int *v10;
  uint32_t v11;
  __int128 v12;
  uint64_t v13;
  uint32_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char __str[34];
  __int128 v20;
  _BYTE v21[25];
  uint64_t v22;
  __int16 v23;
  char v24;
  int v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  v8 = sub_2341F4D7C(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, _BYTE *, uint64_t, double))(*(_QWORD *)a1 + 120))(__str, a1, a3, v8);
    if (*(_BYTE *)a2 == 6)
    {
      memset(v21, 0, sizeof(v21));
      v20 = 0u;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = 120;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v17 = *(_OWORD *)a2;
      v18 = *(_QWORD *)(a2 + 16);
      sub_2341C4F80(__str, 0x22uLL, (uint64_t)&v17, (uint64_t)a4);
      if (a4->n128_u32[0])
        return;
      v22 = 0x6472657474616D5FLL;
      v23 = 0;
      v24 = 3;
      v15 = 0uLL;
      v16 = 0;
      v14 = 0;
      v9 = sub_2341F68F8((int *)a3);
      sub_2341BB21C((uint64_t)__str, &v14, (uint64_t)sub_2341F6838, (uint64_t)v9, &v15);
      if (v15.n128_u32[0])
        sub_2341F3E14((int *)a3);
    }
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    sub_2341C517C((uint64_t)__str, 0x21uLL, &v12, 3, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      v15.n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v11 = 0;
      v10 = sub_2341F68F8((int *)a3);
      sub_2341BACA0(__str, 0, &v11, (uint64_t)sub_2341F6928, (uint64_t)v10, &v15, a4);
      if (a4->n128_u32[0])
      {
        sub_2341F3E14((int *)a3);
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v15.n128_u64[0];
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
  }
}

void sub_2341F6CFC(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  double v8;
  int *v9;
  uint32_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char __str[56];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  a4->n128_u64[0] = 0;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  v8 = sub_2341F4D7C(a1, (uint64_t)a4);
  if (!a4->n128_u32[0])
  {
    (*(void (**)(char *__return_ptr, _BYTE *, uint64_t, double))(*(_QWORD *)a1 + 120))(__str, a1, a3, v8);
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    sub_2341C517C((uint64_t)__str, 0x35uLL, &v12, 1, (uint64_t)a4);
    if (!a4->n128_u32[0])
    {
      v11 = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      a4->n128_u64[0] = 0;
      v10 = 0;
      v9 = sub_2341F68F8((int *)a3);
      sub_2341BACA0(__str, 1u, &v10, (uint64_t)sub_2341F6928, (uint64_t)v9, &v11, a4);
      if (a4->n128_u32[0])
      {
        sub_2341F3E14((int *)a3);
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v11;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
  }
}

void sub_2341F6E2C(_BYTE *a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  switch(a2)
  {
    case 1:
      v5 = *a3;
      v6 = *((_QWORD *)a3 + 2);
      sub_2341F6CFC(a1, (uint64_t)&v5, a4, a5);
      break;
    case 3:
      v7 = *a3;
      v8 = *((_QWORD *)a3 + 2);
      sub_2341F6AFC(a1, (uint64_t)&v7, a4, a5);
      break;
    case 2:
      v9 = *a3;
      v10 = *((_QWORD *)a3 + 2);
      sub_2341F6638(a1, (uint64_t)&v9, a4, a5);
      break;
    default:
      a5->n128_u32[0] = 47;
      a5->n128_u64[1] = (unint64_t)"src/lib/dnssd/Discovery_ImplPlatform.cpp";
      a5[1].n128_u32[0] = 827;
      break;
  }
}

void sub_2341F6ED8(uint64_t a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X8>)
{
  sub_2341F6E2C((_BYTE *)(a1 - 8), a2, a3, a4, a5);
}

void sub_2341F6EE0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)(a1 + 16);
    *(_BYTE *)(a1 + 24) = 0;
    sub_2341BAE00(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 837;
  }
}

void sub_2341F6F10(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)(a1 + 16);
    *(_BYTE *)(a1 + 24) = 0;
    sub_2341BAE00(v2, a2);
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *(_DWORD *)(a2 + 16) = 837;
  }
}

void sub_2341F6F40(_BYTE *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint32_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint32_t v11;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_2341F4D7C(a1, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    v11 = *a5;
    sub_2341BB718(a2, a3, a4, &v11, (uint64_t)a6);
  }
}

void sub_2341F6FB8(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint32_t *a5@<X4>, _QWORD *a6@<X8>)
{
  sub_2341F6F40((_BYTE *)(a1 - 8), a2, a3, a4, a5, a6);
}

uint64_t *sub_2341F6FC0()
{
  if (!byte_254253828)
  {
    byte_254253828 = 1;
    qword_254253818 = 0;
    unk_254253820 = 0;
    qword_254253800 = (uint64_t)&off_250515928;
    qword_254253808 = (uint64_t)&unk_2505159C0;
    unk_254253810 = 0;
  }
  return &qword_254253800;
}

uint64_t *sub_2341F7000()
{
  if (!byte_254253828)
  {
    byte_254253828 = 1;
    qword_254253818 = 0;
    unk_254253820 = 0;
    qword_254253800 = (uint64_t)&off_250515928;
    qword_254253808 = (uint64_t)&unk_2505159C0;
    unk_254253810 = 0;
  }
  return &qword_254253808;
}

void sub_2341F7040()
{
  JUMPOUT(0x23493E704);
}

void sub_2341F7058()
{
  JUMPOUT(0x23493E704);
}

double sub_2341F7070@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2341F4D7C((_BYTE *)(a1 - 8), a2);
}

double sub_2341F7078(uint64_t a1)
{
  uint64_t i;
  double result;

  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  *(_OWORD *)(a1 + 98) = 0u;
  if (*(_BYTE *)(a1 + 148))
    *(_BYTE *)(a1 + 148) = 0;
  if (*(_BYTE *)(a1 + 156))
    *(_BYTE *)(a1 + 156) = 0;
  if (*(_BYTE *)(a1 + 162))
    *(_BYTE *)(a1 + 162) = 0;
  if (*(_BYTE *)(a1 + 142))
    *(_BYTE *)(a1 + 142) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 139) = 0;
  *(_DWORD *)a1 = 0;
  for (i = 16; i != 96; i += 16)
  {
    result = *(double *)&xmmword_25615DD84;
    *(_OWORD *)(a1 + i) = xmmword_25615DD84;
  }
  return result;
}

uint64_t sub_2341F70EC(uint64_t a1)
{
  const char *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  NSObject *v7;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  int v19;
  NSObject *v20;
  _BOOL4 v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  int v27;
  NSObject *v28;
  _BOOL4 v29;
  const char *v30;
  uint64_t result;
  uint8_t v32[4];
  unsigned int v33;
  __int16 v34;
  const char *v35;
  uint8_t buf[4];
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v2 = (const char *)(a1 + 98);
  if (*(_BYTE *)(a1 + 98))
  {
    v3 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v37 = v2;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "\tHostname: %s", buf, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = sub_23410EA90((_DWORD *)(a1 + 16 * v4 + 16), (char *)buf, 0x2Eu);
      v7 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v32 = 67109378;
        v33 = v5;
        v34 = 2080;
        v35 = v6;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "\tIP Address #%d: %s", v32, 0x12u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x22u, 3);
      v4 = v5;
    }
    while (*(_QWORD *)(a1 + 8) > (unint64_t)v5++);
  }
  if (*(_WORD *)(a1 + 96))
  {
    v9 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(unsigned __int16 *)(a1 + 96);
      *(_DWORD *)buf = 67109120;
      LODWORD(v37) = v10;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "\tPort: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  v11 = *(unsigned __int8 *)(a1 + 148);
  v12 = sub_234117B80(0x22u, "Discovery");
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
  if (v11)
  {
    if (v13)
    {
      v14 = *(_DWORD *)(a1 + 144);
      *(_DWORD *)buf = 67109120;
      LODWORD(v37) = v14;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "\tMrp Interval idle: %u ms", buf, 8u);
    }
    if (sub_234114844(3u))
LABEL_26:
      sub_2341147D0(0x22u, 3);
  }
  else
  {
    if (v13)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "\tMrp Interval idle: not present", buf, 2u);
    }
    if (sub_234114844(3u))
      goto LABEL_26;
  }
  v15 = *(unsigned __int8 *)(a1 + 156);
  v16 = sub_234117B80(0x22u, "Discovery");
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_INFO);
  if (v15)
  {
    if (v17)
    {
      v18 = *(_DWORD *)(a1 + 152);
      *(_DWORD *)buf = 67109120;
      LODWORD(v37) = v18;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "\tMrp Interval active: %u ms", buf, 8u);
    }
    if (sub_234114844(3u))
LABEL_35:
      sub_2341147D0(0x22u, 3);
  }
  else
  {
    if (v17)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "\tMrp Interval active: not present", buf, 2u);
    }
    if (sub_234114844(3u))
      goto LABEL_35;
  }
  v19 = *(unsigned __int8 *)(a1 + 162);
  v20 = sub_234117B80(0x22u, "Discovery");
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
  if (v19)
  {
    if (v21)
    {
      v22 = *(unsigned __int16 *)(a1 + 160);
      *(_DWORD *)buf = 67109120;
      LODWORD(v37) = v22;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "\tMrp Active Threshold: %u ms", buf, 8u);
    }
    if (sub_234114844(3u))
LABEL_44:
      sub_2341147D0(0x22u, 3);
  }
  else
  {
    if (v21)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "\tMrp Active Threshold: not present", buf, 2u);
    }
    if (sub_234114844(3u))
      goto LABEL_44;
  }
  v23 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    v24 = *(unsigned __int8 *)(a1 + 139);
    *(_DWORD *)buf = 67109120;
    LODWORD(v37) = v24;
    _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_INFO, "\tTCP Client Supported: %d", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  v25 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    v26 = *(unsigned __int8 *)(a1 + 140);
    *(_DWORD *)buf = 67109120;
    LODWORD(v37) = v26;
    _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_INFO, "\tTCP Server Supported: %d", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  v27 = *(unsigned __int8 *)(a1 + 142);
  v28 = sub_234117B80(0x22u, "Discovery");
  v29 = os_log_type_enabled(v28, OS_LOG_TYPE_INFO);
  if (v27)
  {
    if (v29)
    {
      if (*(_BYTE *)(a1 + 141))
        v30 = "LIT";
      else
        v30 = "SIT";
      *(_DWORD *)buf = 136315138;
      v37 = v30;
      _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_INFO, "\tThe ICD operates in %s", buf, 0xCu);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 3);
  }
  else
  {
    if (v29)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_INFO, "\tICD: not present", buf, 2u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 3);
  }
  return result;
}

char *sub_2341F7794@<X0>(char *__str@<X3>, size_t __size@<X4>, __int128 *a3@<X0>, uint64_t a4@<X1>, _QWORD *a5@<X2>, _QWORD *a6@<X8>)
{
  char *result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  result = sub_2341C4F80(__str, __size, (uint64_t)&v12, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    v11 = (*a5)++;
    *(_QWORD *)(a4 + 8 * v11) = __str;
    *(_DWORD *)a6 = 0;
    a6[1] = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    *((_DWORD *)a6 + 4) = 129;
  }
  return result;
}

uint64_t sub_2341F7828(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  const char *v21;
  uint64_t result;
  uint8_t v23[4];
  uint8_t *v24;
  uint8_t buf[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[21];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Discovered commissionable/commissioner node:", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  sub_2341F70EC(a1);
  v3 = *(_QWORD *)(a1 + 168);
  if (v3)
  {
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)buf = 0u;
    v26 = 0u;
    sub_234115248((char *)(a1 + 190), v3, buf, 0x65uLL, 3u, (uint64_t)v23);
    v4 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v23 = 136315138;
      v24 = buf;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "\tRotating ID: %s", v23, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_BYTE *)(a1 + 257))
  {
    v5 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a1 + 257;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "\tDevice Name: %s", buf, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_WORD *)(a1 + 182))
  {
    v6 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(unsigned __int16 *)(a1 + 182);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "\tVendor ID: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_WORD *)(a1 + 184))
  {
    v8 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(unsigned __int16 *)(a1 + 184);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "\tProduct ID: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_DWORD *)(a1 + 176))
  {
    v10 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(a1 + 176);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "\tDevice Type: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_WORD *)(a1 + 180))
  {
    v12 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *(unsigned __int16 *)(a1 + 180);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "\tLong Discriminator: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_BYTE *)(a1 + 290))
  {
    v14 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a1 + 290;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "\tPairing Instruction: %s", buf, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_WORD *)(a1 + 186))
  {
    v15 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = *(unsigned __int16 *)(a1 + 186);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "\tPairing Hint: %u", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  if (*(_BYTE *)(a1 + 240))
  {
    v17 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a1 + 240;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_INFO, "\tInstance Name: %s", buf, 0xCu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  v18 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    v19 = *(unsigned __int8 *)(a1 + 188);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_INFO, "\tCommissioning Mode: %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  v20 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(a1 + 189))
      v21 = "true";
    else
      v21 = "false";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "\tSupports Commissioner Generated Passcode: %s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0x22u, 3);
  return result;
}

uint64_t sub_2341F7EF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  v3 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Missing commissioning delegate. Data discarded", v4, 2u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
    return sub_2341147D0(0x22u, 1);
  return result;
}

uint64_t sub_2341F7FA0(unint64_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t result;
  uint8_t buf[4];
  _BYTE v11[10];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Discovered Operational node:\r\n", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  v3 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v5 = *a1;
    v4 = a1[1];
    v6 = HIDWORD(*a1);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v11 = HIDWORD(v4);
    *(_WORD *)&v11[4] = 1024;
    *(_DWORD *)&v11[6] = v4;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "\tNode Instance: %08X%08X-%08X%08X", buf, 0x1Au);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x22u, 3);
  v7 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    if (*((_BYTE *)a1 + 16))
      v8 = "true";
    else
      v8 = "false";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v11 = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "\thasZeroTTL: %s\r\n", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0x22u, 3);
  return result;
}

char *sub_2341F81AC@<X0>(char *result@<X0>, size_t a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  NSObject *v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((a4 - 10) >= 3)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v10 = 213;
LABEL_7:
    *(_DWORD *)(a5 + 16) = v10;
    return result;
  }
  if (!*((_BYTE *)a3 + 12))
  {
    *(_DWORD *)a5 = 28;
    *(_QWORD *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
    v10 = 214;
    goto LABEL_7;
  }
  v8 = result;
  if (a4 == 12)
  {
    v9 = *((unsigned __int16 *)a3 + 4);
  }
  else
  {
    v11 = a3 + 1;
    if (a4 == 10)
      v11 = a3;
    v9 = *v11;
    if (v9 > 0x36EE80)
    {
      v12 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (a4 == 10)
          v13 = "idle";
        else
          v13 = "active";
        *(_DWORD *)buf = 136315138;
        v15 = v13;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "MRP retry interval %s value exceeds allowed range of 1 hour, using maximum available", buf, 0xCu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x22u, 2);
      v9 = 3600000;
    }
  }
  return (char *)sub_2341F8360("%u", v8, a2, 1, a5, v9);
}

uint64_t sub_2341F8360@<X0>(char *__format@<X3>, char *a2@<X0>, size_t a3@<X1>, int a4@<W2>, uint64_t a5@<X8>, ...)
{
  uint64_t result;
  int v8;
  va_list va;

  va_start(va, a5);
  result = vsnprintf(a2, a3, __format, va);
  if ((int)result >= a4)
    v8 = 0;
  else
    v8 = 30;
  *(_DWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = "src/lib/dnssd/Discovery_ImplPlatform.cpp";
  *(_DWORD *)(a5 + 16) = 161;
  return result;
}

uint64_t sub_2341F83C4(_BYTE *a1)
{
  uint64_t v1;

  v1 = 16;
  if (!a1[8])
    v1 = 8;
  if (a1[24])
    return v1 + 8;
  if (a1[40])
    return v1 | 2;
  return v1;
}

uint64_t sub_2341F83FC(uint64_t a1)
{
  unsigned int v1;

  if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
    v1 = 8;
  else
    v1 = 6;
  if (*(_BYTE *)(a1 + 12))
    return v1 + 4;
  else
    return v1;
}

uint64_t sub_2341F8424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v7;
  char v8;
  unsigned __int8 v9;

  v9 = 0;
  result = sub_234114DD8(a2, &v9);
  *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 40);
  if (!*(_DWORD *)a3)
  {
    if (v9 >= 0x10u)
    {
      *(_DWORD *)a3 = 167;
      *(_QWORD *)(a3 + 8) = "src/transport/raw/MessageHeader.cpp";
      *(_DWORD *)(a3 + 16) = 142;
    }
    else
    {
      *(_BYTE *)(a1 + 47) = v9;
      result = sub_234114EA0(a2, (_WORD *)(a1 + 44));
      *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 40);
      if (!*(_DWORD *)a3)
      {
        v8 = 0;
        result = sub_234114DD8(a2, &v8);
        *(_OWORD *)a3 = *(_OWORD *)(a2 + 24);
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 40);
        if (!*(_DWORD *)a3)
        {
          v7 = v8;
          *(_BYTE *)(a1 + 48) = v8;
          *(_BYTE *)(a1 + 46) = v7 & 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2341F8510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;
  int v7;
  const char *v8;
  int v9;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5[0] = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v5[1] = v5[0];
  v6 = v3;
  v7 = 0;
  v8 = "src/lib/support/BufferReader.h";
  v9 = 330;
  if (!v5[0])
    v6 = 0;
  return sub_2341F8424(a1, (uint64_t)v5, a3);
}

double sub_2341F8564@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  double result;
  unsigned int v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;

  v14 = a2;
  v15 = a2;
  *(_OWORD *)a5 = xmmword_250515A70;
  *(_QWORD *)(a5 + 16) = 166;
  v16 = a3;
  LODWORD(v17) = 0;
  *((_QWORD *)&v17 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v18) = 330;
  if (!a2)
    v16 = 0;
  sub_2341F8424(a1, (uint64_t)&v14, a5);
  if (*(_DWORD *)a5)
    return result;
  sub_234114F0C((uint64_t)&v14, (_DWORD *)a1);
  result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  if (*(_DWORD *)a5)
    return result;
  if ((*(_BYTE *)(a1 + 47) & 4) != 0)
  {
    v13 = 0;
    sub_234114F78((uint64_t)&v14, &v13);
    result = *(double *)&v17;
    *(_OWORD *)a5 = v17;
    *(_QWORD *)(a5 + 16) = v18;
    if (*(_DWORD *)a5)
      return result;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
  }
  v9 = *(unsigned __int8 *)(a1 + 46);
  if (v9 >= 2)
  {
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    v11 = 189;
    goto LABEL_13;
  }
  v10 = *(unsigned __int8 *)(a1 + 47);
  if ((~v10 & 3) == 0)
  {
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    v11 = 195;
LABEL_13:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  if ((v10 & 1) != 0)
  {
    v13 = 0;
    sub_234114F78((uint64_t)&v14, &v13);
    result = *(double *)&v17;
    *(_OWORD *)a5 = v17;
    *(_QWORD *)(a5 + 16) = v18;
    if (*(_DWORD *)a5)
      return result;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_20;
  }
  if ((v10 & 2) == 0)
  {
    *(_BYTE *)(a1 + 24) = 0;
LABEL_20:
    *(_BYTE *)(a1 + 40) = 0;
    goto LABEL_21;
  }
  if (v9 != 1)
  {
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
    v11 = 211;
    goto LABEL_13;
  }
  LOWORD(v13) = 0;
  sub_234114EA0((uint64_t)&v14, &v13);
  result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  if (*(_DWORD *)a5)
    return result;
  *(_BYTE *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 42) = v13;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_21:
  if ((*(_BYTE *)(a1 + 48) & 0x20) == 0)
  {
    v12 = v15;
    goto LABEL_23;
  }
  LOWORD(v13) = 0;
  sub_234114EA0((uint64_t)&v14, &v13);
  result = *(double *)&v17;
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  if (!*(_DWORD *)a5)
  {
    if (v16 < (unsigned __int16)v13)
    {
      *(_DWORD *)a5 = 172;
      *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
      v11 = 230;
      goto LABEL_13;
    }
    v12 = v15 + v13;
LABEL_23:
    *a4 = v12 - v14;
  }
  return result;
}

void sub_2341F87E4(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int16 v5;

  v5 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_2341F8564(a1, (*a2)[1], (*a2)[3], &v5, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    sub_2341183F8(*a2, v5);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 247;
  }
}

uint64_t sub_2341F885C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v9;
  int v10;
  char v11;
  __int16 v12;
  int v13;
  unsigned __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;

  v16 = a2;
  v17 = a2;
  v18 = a3;
  LODWORD(v19) = 0;
  *((_QWORD *)&v19 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v20) = 330;
  if (!a2)
    v18 = 0;
  v15 = 0;
  sub_234114DD8((uint64_t)&v16, &v15);
  sub_234114DD8((uint64_t)&v16, (_BYTE *)a1);
  result = sub_234114EA0((uint64_t)&v16, (_WORD *)(a1 + 2));
  *(_OWORD *)a5 = v19;
  *(_QWORD *)(a5 + 16) = v20;
  if (!*(_DWORD *)a5)
  {
    v9 = v15;
    *(_BYTE *)(a1 + 8) = v15;
    if ((v9 & 0x10) != 0)
    {
      LOWORD(v13) = 0;
      result = sub_234114EA0((uint64_t)&v16, &v13);
      *(_OWORD *)a5 = v19;
      *(_QWORD *)(a5 + 16) = v20;
      if (*(_DWORD *)a5)
        return result;
      v10 = (unsigned __int16)v13;
    }
    else
    {
      v10 = 0;
    }
    v14 = 0;
    result = sub_234114EA0((uint64_t)&v16, &v14);
    *(_OWORD *)a5 = v19;
    *(_QWORD *)(a5 + 16) = v20;
    if (!*(_DWORD *)a5)
    {
      *(_DWORD *)(a1 + 4) = v10 | (v14 << 16);
      v11 = *(_BYTE *)(a1 + 8);
      if ((v11 & 2) != 0)
      {
        v13 = 0;
        result = sub_234114F0C((uint64_t)&v16, &v13);
        *(_OWORD *)a5 = v19;
        *(_QWORD *)(a5 + 16) = v20;
        if (*(_DWORD *)a5)
          return result;
        *(_BYTE *)(a1 + 12) = 1;
        *(_DWORD *)(a1 + 16) = v13;
        if ((*(_BYTE *)(a1 + 8) & 8) == 0)
          goto LABEL_12;
      }
      else
      {
        *(_BYTE *)(a1 + 12) = 0;
        if ((v11 & 8) == 0)
        {
LABEL_12:
          v12 = v17;
          goto LABEL_13;
        }
      }
      LOWORD(v13) = 0;
      result = sub_234114EA0((uint64_t)&v16, &v13);
      *(_OWORD *)a5 = v19;
      *(_QWORD *)(a5 + 16) = v20;
      if (*(_DWORD *)a5)
        return result;
      if (v18 < (unsigned __int16)v13)
      {
        *(_DWORD *)a5 = 172;
        *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
        *(_DWORD *)(a5 + 16) = 295;
        return result;
      }
      v12 = v17 + v13;
LABEL_13:
      *a4 = v12 - v16;
    }
  }
  return result;
}

uint64_t sub_2341F8A44@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  unsigned __int16 v6;

  v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_2341F885C(a1, (*a2)[1], (*a2)[3], &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    result = (uint64_t)sub_2341183F8(*a2, v6);
    *(_DWORD *)a3 = 0;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 312;
  }
  return result;
}

_BYTE *sub_2341F8ABC@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *v7;
  _BYTE *v9;
  unint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v14;
  _QWORD *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;

  v7 = result;
  v9 = result + 8;
  if (result[8])
    v10 = 16;
  else
    v10 = 8;
  v11 = result + 24;
  if (result[24])
  {
    if (v10 + 8 <= a3)
    {
      v12 = result[40];
      if (result[40])
      {
        v13 = 318;
LABEL_32:
        v14 = 172;
        goto LABEL_33;
      }
      goto LABEL_12;
    }
LABEL_11:
    v13 = 317;
    v14 = 47;
    goto LABEL_33;
  }
  v12 = result[40];
  if (result[40])
    v10 |= 2uLL;
  if (v10 > a3)
    goto LABEL_11;
LABEL_12:
  if (!a4)
  {
    v13 = 319;
    goto LABEL_32;
  }
  if (result[46] > 1u)
  {
    v13 = 320;
    goto LABEL_32;
  }
  *(_BYTE *)a2 = (2 * (v12 != 0)) | (4 * (result[8] != 0)) | result[24];
  *(_WORD *)(a2 + 1) = *((_WORD *)result + 22);
  *(_BYTE *)(a2 + 3) = result[48];
  *(_DWORD *)(a2 + 4) = *(_DWORD *)result;
  if (result[8])
  {
    result = sub_233C25EA4(result + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)result;
    v15 = (_QWORD *)(a2 + 16);
  }
  else
  {
    v15 = (_QWORD *)(a2 + 8);
  }
  v16 = v7 + 40;
  if (*v11)
  {
    result = sub_233C25EA4(v9 + 16);
    *v15++ = *(_QWORD *)result;
  }
  else if (*v16)
  {
    result = sub_233C05D98(v16);
    *(_WORD *)v15 = *(_WORD *)result;
    v15 = (_QWORD *)((char *)v15 + 2);
  }
  v17 = (char *)v15 - a2;
  v18 = 16;
  if (!*v9)
    v18 = 8;
  if (*v11)
  {
    v18 += 8;
  }
  else if (*v16)
  {
    v18 |= 2uLL;
  }
  if (v17 != (char *)v18)
  {
    v13 = 348;
    goto LABEL_32;
  }
  v14 = 0;
  *a4 = (_WORD)v17;
  v13 = 351;
LABEL_33:
  *(_DWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t sub_2341F8C80@<X0>(_BYTE *a1@<X0>, _QWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned __int16 v11;

  v6 = 16;
  if (!a1[8])
    v6 = 8;
  if (a1[24])
  {
    v7 = v6 + 8;
  }
  else if (a1[40])
  {
    v7 = v6 | 2;
  }
  else
  {
    v7 = v6;
  }
  result = sub_23411853C(*a2, v7);
  if ((result & 1) != 0)
  {
    sub_2341181B4(*a2, (*a2)[1] - v7);
    v11 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (uint64_t)sub_2341F8ABC(a1, (*a2)[1], (*a2)[3], &v11, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (v11 == (_DWORD)v7)
        v9 = 0;
      else
        v9 = 172;
      if (v11 == (_DWORD)v7)
        v10 = 364;
      else
        v10 = 363;
      *(_DWORD *)a3 = v9;
      a3[1] = "src/transport/raw/MessageHeader.cpp";
      *((_DWORD *)a3 + 4) = v10;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 359;
  }
  return result;
}

_BYTE *sub_2341F8D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _WORD *a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE *result;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(unsigned __int8 *)(a1 + 12);
  result = (_BYTE *)(a1 + 12);
  v8 = v9;
  v10 = 8;
  if ((*(result - 4) & 0x10) == 0)
    v10 = 6;
  if (v8)
    v11 = v10 + 4;
  else
    v11 = v10;
  if (v11 <= a3)
  {
    *(_BYTE *)a2 = *(result - 4);
    *(_BYTE *)(a2 + 1) = *(_BYTE *)a1;
    *(_WORD *)(a2 + 2) = *(_WORD *)(a1 + 2);
    if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
    {
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      v16 = a2 + 6;
    }
    else
    {
      v16 = a2 + 4;
    }
    *(_WORD *)v16 = *(_WORD *)(a1 + 6);
    if (*(_BYTE *)(a1 + 12))
    {
      result = sub_233C20E2C(result);
      *(_DWORD *)(v16 + 2) = *(_DWORD *)result;
      v17 = v16 - a2 + 6;
      v18 = 8;
      if ((*(_BYTE *)(a1 + 8) & 0x10) == 0)
        v18 = 6;
      if (*(_BYTE *)(a1 + 12))
        v18 += 4;
    }
    else
    {
      v17 = v16 + 2 - a2;
      v18 = 8;
      if ((*(_BYTE *)(a1 + 8) & 0x10) == 0)
        v18 = 6;
    }
    if (v17 == v18)
    {
      v13 = 0;
      *a4 = v17;
      v12 = 391;
    }
    else
    {
      v12 = 388;
      v13 = 172;
    }
  }
  else
  {
    v12 = 369;
    v13 = 47;
  }
  *(_DWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a5 + 16) = v12;
  return result;
}

uint64_t sub_2341F8EBC@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  unsigned __int16 v11;

  v6 = 8;
  if ((*(_BYTE *)(a1 + 8) & 0x10) == 0)
    v6 = 6;
  if (*(_BYTE *)(a1 + 12))
    v7 = v6 + 4;
  else
    v7 = v6;
  result = sub_23411853C(*a2, v7);
  if ((result & 1) != 0)
  {
    sub_2341181B4(*a2, (*a2)[1] - v7);
    v11 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = (uint64_t)sub_2341F8D84(a1, (*a2)[1], (*a2)[3], &v11, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      if (v11 == (_DWORD)v7)
        v9 = 0;
      else
        v9 = 172;
      if (v11 == (_DWORD)v7)
        v10 = 404;
      else
        v10 = 403;
      *(_DWORD *)a3 = v9;
      a3[1] = "src/transport/raw/MessageHeader.cpp";
      *((_DWORD *)a3 + 4) = v10;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/transport/raw/MessageHeader.cpp";
    *((_DWORD *)a3 + 4) = 399;
  }
  return result;
}

_OWORD *sub_2341F8FB0@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X8>)
{
  BOOL v6;
  int v7;
  int v8;

  if (*(_WORD *)(a2 + 44))
    v6 = 0;
  else
    v6 = *(_BYTE *)(a2 + 46) == 0;
  if (v6)
  {
    v7 = 412;
    v8 = 128;
  }
  else if (a4 >= 0x10)
  {
    v8 = 0;
    *result = *a3;
    *a5 = 16;
    v7 = 419;
  }
  else
  {
    v7 = 413;
    v8 = 47;
  }
  *(_DWORD *)a6 = v8;
  *(_QWORD *)(a6 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

_OWORD *sub_2341F9018@<X0>(_OWORD *result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t a4@<X3>, _WORD *a5@<X4>, uint64_t a6@<X8>)
{
  BOOL v6;
  int v7;
  int v8;

  if (*(_WORD *)(a2 + 44))
    v6 = 0;
  else
    v6 = *(_BYTE *)(a2 + 46) == 0;
  if (v6)
  {
    v7 = 428;
    v8 = 17;
  }
  else if (a4 >= 0x10)
  {
    v8 = 0;
    *a3 = *result;
    *a5 = 16;
    v7 = 436;
  }
  else
  {
    v7 = 429;
    v8 = 47;
  }
  *(_DWORD *)a6 = v8;
  *(_QWORD *)(a6 + 8) = "src/transport/raw/MessageHeader.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

_QWORD *sub_2341F9080(_QWORD *a1)
{
  *a1 = &off_250515A98;
  sub_2341F9750((uint64_t)a1);
  return a1;
}

_QWORD *sub_2341F90B0(_QWORD *a1)
{
  *a1 = &off_250515A98;
  sub_2341F9750((uint64_t)a1);
  return a1;
}

void sub_2341F90E0(_QWORD *a1)
{
  *a1 = &off_250515A98;
  sub_2341F9750((uint64_t)a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341F9120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t result;
  NSObject *v15;
  int v16;
  int v17;
  uint8_t buf[16];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250515AE8;
  *(_QWORD *)(a3 + 16) = 43;
  if (*(_DWORD *)(a1 + 28))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = (uint64_t *)(a1 + 16);
  sub_2341F9458(*(_BYTE **)a2, (uint64_t *)(a1 + 16), a3);
  if (*(_DWORD *)a3)
    goto LABEL_10;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v6 + 32))(*v6, *(_QWORD *)(a2 + 16));
  v7 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v8 = *(unsigned __int16 *)(a2 + 10);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "UDP::Init bind&listen port=%d", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  v9 = *v6;
  v10 = *(unsigned __int8 *)(a2 + 8);
  v11 = *(unsigned __int16 *)(a2 + 10);
  v17 = *(_DWORD *)(a2 + 12);
  sub_234112C34(v9, v10, &xmmword_25615DD84, v11, &v17, buf);
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = v19;
  if (*(_DWORD *)a3
    || (sub_234112DC4(*(_QWORD *)(a1 + 16), (uint64_t)sub_2341F95D0, (uint64_t)sub_2341F962C, a1, buf),
        *(_OWORD *)a3 = *(_OWORD *)buf,
        *(_QWORD *)(a3 + 16) = v19,
        *(_DWORD *)a3))
  {
LABEL_10:
    v12 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a3 + 16);
      v13 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Failed to initialize Udp transport: %s", buf, 0xCu);
    }
    if (sub_234114844(2u))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a3 + 16);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 2);
    }
    result = *v6;
    if (*v6)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      *v6 = 0;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = 1;
    v15 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 16))(*v6);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "UDP::Init bound to port=%d", buf, 8u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
    {
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 16))(*v6);
      return sub_2341147D0(1u, 3);
    }
  }
  return result;
}

uint64_t sub_2341F9458@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int *v8;
  char v9;
  int v10;
  int v11;
  NSObject *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = sub_2341B1F64("src/inet/InetLayer.h", 82);
  if (a1[8] == 2)
  {
    v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
    *a2 = v7;
    if (v7)
    {
      v8 = sub_234118AFC();
      v9 = *((_BYTE *)v8 + 3) + 1;
      *((_BYTE *)v8 + 3) = v9;
      result = (uint64_t)sub_234118B08();
      if (*(char *)(result + 3) >= v9)
      {
        v10 = 0;
      }
      else
      {
        result = (uint64_t)sub_234118B08();
        v10 = 0;
        *(_BYTE *)(result + 3) = v9;
      }
      v11 = 93;
    }
    else
    {
      v12 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v14 = &unk_2342EEA29;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "%s endpoint pool FULL", buf, 0xCu);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(1u, 1);
      v11 = 89;
      v10 = 193;
    }
  }
  else
  {
    v11 = 83;
    v10 = 3;
  }
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/inet/InetLayer.h";
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_2341F95D0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  __int128 v7;
  char v8;
  __int16 v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *((_WORD *)a3 + 18);
  v5 = *((_DWORD *)a3 + 8);
  v7 = *a3;
  v8 = 1;
  v9 = v4;
  v10 = v5;
  return (*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _QWORD))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8), &v7, a2, 0);
}

uint64_t sub_2341F962C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    v4 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Failed to receive UDP message: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(1u, 1);
  }
  return result;
}

uint64_t sub_2341F972C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    sub_23425E6FC();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

_BYTE *sub_2341F9750(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 16);
  if (result)
  {
    sub_234112F58(result);
    result = (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

_QWORD *sub_2341F9790@<X0>(_QWORD *result@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  int v6;
  _BYTE v7[16];
  __int128 v8;
  int v9;
  __int16 v10;

  if (*((_BYTE *)a2 + 16) == 1)
  {
    v4 = result;
    if (*((_DWORD *)result + 7) == 1)
    {
      if (result[2])
      {
        v9 = 0;
        sub_23410F2B0((uint64_t)v7);
        v8 = *a2;
        v10 = *((_WORD *)a2 + 9);
        v9 = *((_DWORD *)a2 + 5);
        return sub_234112F04(v4[2], (_QWORD *)a3);
      }
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "src/transport/raw/UDP.cpp";
      v6 = 105;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "src/transport/raw/UDP.cpp";
      v6 = 104;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/transport/raw/UDP.cpp";
    v6 = 103;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_2341F9878@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  char *v15;
  char __str[76];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  sub_23412A258((uint64_t)a2, __str, 0x4CuLL);
  v8 = sub_234117B80(1u, "Inet");
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136315138;
      v15 = __str;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Joining Multicast Group with address %s", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    v10 = *(_QWORD *)(a1 + 16);
    (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)v10 + 8))((char *)&v13 + 4, v10);
    return sub_234112F7C(v10, (int *)&v13 + 1, a2, a4);
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 136315138;
      v15 = __str;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Leaving Multicast Group with address %s", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    v12 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v12 + 8))(&v13, v12);
    return sub_234113054(v12, (int *)&v13, a2, a4);
  }
}

BOOL sub_2341F9A38(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) == 1
      && *(_BYTE *)(a2 + 16) == 1
      && sub_23410F01C((_DWORD *)a2) == *(unsigned __int8 *)(a1 + 24);
}

BOOL sub_2341F9A84(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) == 1 && *(_BYTE *)(a1 + 24) == 2;
}

void sub_2341F9AA8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/transport/raw/Base.h";
  *(_DWORD *)(a1 + 16) = 105;
}

_QWORD *sub_2341F9AC4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250515B38;
  v2 = a1[2];
  if (v2)
  {
    sub_2341109A4(v2);
    a1[2] = 0;
  }
  sub_2341F9B08((uint64_t)a1);
  return a1;
}

void sub_2341F9B08(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t i;
  _QWORD *v5;
  int v6;
  const char *v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v3 = 0;
    for (i = 0; i < v1; ++i)
    {
      v5 = (_QWORD *)(*(_QWORD *)(a1 + 48) + v3);
      if (*v5)
      {
        v6 = 0;
        v7 = "src/transport/raw/TCP.cpp";
        v8 = 74;
        sub_2341F9BC0(a1, (uint64_t)v5, (uint64_t)&v6, 0);
        v1 = *(_QWORD *)(a1 + 56);
      }
      v3 += 64;
    }
  }
}

void sub_2341F9B9C(_QWORD *a1)
{
  sub_2341F9AC4(a1);
  JUMPOUT(0x23493E704);
}

void sub_2341F9BC0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  _QWORD *v9;
  int v10;
  char __str[76];
  uint8_t buf[16];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_DWORD *)(a2 + 40) != 5 && *(_QWORD *)a2)
  {
    sub_23412A258(a2 + 8, __str, 0x4CuLL);
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = __str;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Closing connection with peer %s.", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    v9 = *(_QWORD **)a2;
    if (*(_DWORD *)a3)
      sub_23411095C(v9);
    else
      sub_2341108F8(v9);
    v10 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 5;
    if (a4 == 1)
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v13 = *(_QWORD *)(a3 + 16);
      if (v10 == 3)
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
      else
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    }
    sub_2341FAFF0(a2);
    --*(_QWORD *)(a1 + 40);
  }
}

uint64_t sub_2341F9D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  NSObject *v7;
  char *v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250515B88;
  *(_QWORD *)(a3 + 16) = 81;
  if (*(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/transport/raw/TCP.cpp";
    *(_DWORD *)(a3 + 16) = 83;
  }
  else
  {
    sub_234112A44(*(_BYTE **)a2, (uint64_t *)(a1 + 16), a3);
    if (!*(_DWORD *)a3)
    {
      sub_234110214(*(_BYTE **)(a1 + 16), *(unsigned __int8 *)(a2 + 8), &xmmword_25615DD84, *(unsigned __int16 *)(a2 + 10), *(_DWORD *)(a2 + 12) != 0, (uint64_t)buf);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 16) = v10;
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) = a1;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72) = sub_2341F9F84;
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80) = sub_2341FA228;
        *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 8);
        result = (uint64_t)sub_234110358(*(int **)(a1 + 16), (uint64_t)buf);
        *(_OWORD *)a3 = *(_OWORD *)buf;
        *(_QWORD *)(a3 + 16) = v10;
        if (!*(_DWORD *)a3)
        {
          *(_DWORD *)(a1 + 28) = 1;
          return result;
        }
      }
    }
  }
  v7 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
    v8 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to initialize TCP transport: %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(1u, 1);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = sub_2341109A4(result);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t sub_2341F9F84(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  __int16 v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v14;
  uint64_t (*v15)(_QWORD *, int *);
  int v16;
  const char *v17;
  int v18;
  __int16 v19;
  __int128 v20;
  int v21;
  uint8_t buf[4];
  uint8_t *v23;
  uint8_t v24[80];
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 16);
  v21 = 0;
  v19 = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, __int128 *, __int16 *))*a2)(v24, a2, &v20, &v19);
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, int *))(*a2 + 16))(v24, a2, &v21);
  v7 = v19;
  v8 = v21;
  v25 = v20;
  v9 = *(_QWORD *)(v6 + 56);
  if (*(_QWORD *)(v6 + 40) >= v9)
  {
    v14 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Insufficient connection space to accept new connections.", v24, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(1u, 1);
    sub_2341109A4((uint64_t)a2);
    v15 = *(uint64_t (**)(_QWORD *, int *))(a1 + 80);
    v16 = 114;
    v17 = "src/transport/raw/TCP.cpp";
    v18 = 592;
    return v15(a2, &v16);
  }
  else
  {
    v10 = *(_QWORD *)(v6 + 48);
    while (*(_QWORD *)v10)
    {
      v10 += 64;
      if (!--v9)
      {
        v10 = 0;
        break;
      }
    }
    a2[2] = *(_QWORD *)(a1 + 16);
    a2[5] = sub_2341FB04C;
    a2[6] = 0;
    a2[7] = sub_2341FB204;
    (*(void (**)(uint8_t *__return_ptr, _QWORD *))(*a2 + 24))(v24, a2);
    *(_QWORD *)v10 = a2;
    *(_OWORD *)(v10 + 8) = v25;
    *(_BYTE *)(v10 + 24) = 3;
    *(_WORD *)(v10 + 26) = v7;
    *(_DWORD *)(v10 + 28) = v8;
    v11 = *(_QWORD *)(v10 + 32);
    if (v11)
      sub_23411814C(v11);
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    ++*(_QWORD *)(v6 + 40);
    *(_DWORD *)(v10 + 40) = 4;
    sub_23410EA90(a3, (char *)v24, 0x4Cu);
    v12 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v23 = v24;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Incoming connection established with peer at %s.", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(1u, 2);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 24))(*(_QWORD *)(v6 + 8), v10);
  }
}

uint64_t sub_2341FA228(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_2341109A4(a1);
  v3 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    v4 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Accept error: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(1u, 1);
  }
  return result;
}

uint64_t sub_2341FA32C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = sub_2341109A4(result);
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

_QWORD *sub_2341FA35C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    return 0;
  for (result = *(_QWORD **)(a1 + 48); *result; result += 8)
  {
    if (!--v1)
      return 0;
  }
  return result;
}

uint64_t sub_2341FA384(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  void (***v8)(_QWORD *__return_ptr, _QWORD, _DWORD *, __int16 *);
  _QWORD v10[3];
  __int16 v11;
  _DWORD v12[4];

  if (*(_BYTE *)(a2 + 16) == 3)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      v5 = 0;
      for (i = 0; i < v3; ++i)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = *(void (****)(_QWORD *__return_ptr, _QWORD, _DWORD *, __int16 *))(v7 + v5);
        if (v8 && *(_DWORD *)(v7 + v5 + 40) == 4)
        {
          v11 = 0;
          (**v8)(v10, v8, v12, &v11);
          if (sub_23410ECAC(v12, (_DWORD *)a2) && v11 == *(_WORD *)(a2 + 18))
            return *(_QWORD *)(a1 + 48) + v5;
          v3 = *(_QWORD *)(a1 + 56);
        }
        v5 += 64;
      }
    }
  }
  return 0;
}

uint64_t sub_2341FA44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return 0;
  for (result = *(_QWORD *)(a1 + 48); ; result += 64)
  {
    v4 = *(_QWORD *)result != a2 || *(_QWORD *)result == 0;
    if (!v4 && *(_DWORD *)(result + 40) == 4)
      break;
    if (!--v2)
      return 0;
  }
  return result;
}

_QWORD *sub_2341FA488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return 0;
  for (result = *(_QWORD **)(a1 + 48); *result != a2; result += 8)
  {
    if (!--v2)
      return 0;
  }
  return result;
}

void sub_2341FA4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  int v9;

  if (*(_BYTE *)(a2 + 16) != 3)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    v9 = 207;
LABEL_11:
    *(_DWORD *)(a4 + 16) = v9;
    return;
  }
  if (*(_DWORD *)(a1 + 28) != 1)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    v9 = 208;
    goto LABEL_11;
  }
  if ((unint64_t)(*(_QWORD *)(*a3 + 24) + 4) >= 0xFA01)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    v9 = 210;
    goto LABEL_11;
  }
  if ((sub_23411853C((_QWORD *)*a3, 4u) & 1) == 0)
  {
    *(_DWORD *)a4 = 11;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/TCP.cpp";
    v9 = 213;
    goto LABEL_11;
  }
  sub_2341181B4((_QWORD *)*a3, *(_QWORD *)(*a3 + 8) - 4);
  **(_DWORD **)(*a3 + 8) = *(_DWORD *)(*a3 + 24) - 4;
  v8 = (uint64_t *)sub_2341FA384(a1, a2);
  if (v8)
    sub_23411051C(*v8, a3, 1, (_QWORD *)a4);
  else
    sub_2341FA608((_QWORD *)a1, a2, (uint64_t)a3, (_QWORD *)a4);
}

uint64_t sub_2341FA608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  int v10;
  int v11;
  _QWORD v12[3];
  char v13;
  _QWORD *v14;

  v13 = 0;
  v8 = a1[8];
  v12[0] = a2;
  v12[1] = &v13;
  v12[2] = a3;
  v14 = v12;
  result = (*(uint64_t (**)(uint64_t, _QWORD **, uint64_t (*)(uint64_t **, uint64_t)))(*(_QWORD *)v8 + 40))(v8, &v14, sub_2341FB740);
  if (v13)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/transport/raw/TCP.cpp";
    v10 = 292;
  }
  else if (a1[5] >= a1[7])
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/transport/raw/TCP.cpp";
    v10 = 296;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = sub_2341FA738((uint64_t)a1, a2, 0, v12, a4);
    if (*(_DWORD *)a4)
      return result;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)a1[8] + 16))(a1[8], a2, a3);
    if (result)
    {
      v11 = 0;
      ++a1[5];
      v10 = 305;
    }
    else
    {
      v10 = 302;
      v11 = 11;
    }
    *(_DWORD *)a4 = v11;
    a4[1] = "src/transport/raw/TCP.cpp";
  }
  *((_DWORD *)a4 + 4) = v10;
  return result;
}

uint64_t sub_2341FA738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;

  v18 = 0;
  *a4 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = sub_234112A44(*(_BYTE **)(*(_QWORD *)(a1 + 16) + 24), (uint64_t *)&v18, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    v11 = v18;
    *((_QWORD *)v18 + 2) = a1;
    *((_QWORD *)v11 + 4) = sub_2341FA8AC;
    *((_DWORD *)v11 + 29) = *(_DWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 48);
      while (*(_QWORD *)v13)
      {
        v13 += 64;
        if (!--v12)
          goto LABEL_6;
      }
      *(_QWORD *)v13 = v11;
      v14 = *(_OWORD *)a2;
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)(v13 + 8) = v14;
      *(_DWORD *)(v13 + 28) = *(_DWORD *)(a2 + 20);
      v15 = *(_QWORD *)(v13 + 32);
      if (v15)
        sub_23411814C(v15);
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 48) = a3;
      *(_DWORD *)(v13 + 40) = 3;
      *a4 = v13;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      v16 = *(unsigned __int16 *)(a2 + 18);
      v17 = *(_DWORD *)(a2 + 20);
      result = (uint64_t)sub_234110414(v18, a2, v16, &v17, (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        ++*(_QWORD *)(a1 + 40);
        *(_DWORD *)a5 = 0;
        a5[1] = "src/transport/raw/TCP.cpp";
        *((_DWORD *)a5 + 4) = 263;
        return result;
      }
    }
    else
    {
LABEL_6:
      *(_DWORD *)a5 = 11;
      a5[1] = "src/transport/raw/TCP.cpp";
      *((_DWORD *)a5 + 4) = 249;
    }
    if (v11)
      return sub_2341109A4((uint64_t)v11);
  }
  return result;
}

void sub_2341FA8AC(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int16 v16;
  int v17;
  int v18;
  __int16 v19;
  __int128 v20;
  _QWORD *v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  _BYTE buf[24];
  _DWORD *v28;
  __int128 *v29;
  _QWORD *v30;
  char __str[80];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v25 = a1;
  v23 = xmmword_250515BA0;
  v24 = 460;
  v22 = 0;
  v4 = (_QWORD *)a1[2];
  v21 = v4;
  v19 = 0;
  v18 = 0;
  (*(void (**)(char *__return_ptr, _QWORD *, __int128 *, __int16 *))*a1)(__str, a1, &v20, &v19);
  (*(void (**)(char *__return_ptr, _QWORD *, int *))(*a1 + 16))(__str, a1, &v18);
  v14 = v20;
  v15 = 3;
  v16 = v19;
  v17 = v18;
  sub_23412A258((uint64_t)&v14, __str, 0x4CuLL);
  if (*a2)
  {
    v5 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v23;
      *(_QWORD *)&buf[16] = v24;
      v6 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = __str;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Connection establishment with %s encountered an error: %s", buf, 0x16u);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v23;
      *(_QWORD *)&buf[16] = v24;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 1);
    }
    sub_2341109A4((uint64_t)a1);
    --v4[5];
  }
  else
  {
    a1[5] = sub_2341FB04C;
    a1[6] = 0;
    a1[7] = sub_2341FB204;
    v7 = v4[7];
    if (!v7)
LABEL_11:
      sub_23425E7C0();
    v8 = v4[6];
    while (*(_QWORD **)v8 != a1)
    {
      v8 += 64;
      if (!--v7)
        goto LABEL_11;
    }
    *(_DWORD *)(v8 + 40) = 4;
    (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 24))(&v23, a1);
    if ((_DWORD)v23)
    {
      v12 = v23;
      v13 = v24;
      sub_2341F9BC0((uint64_t)v4, v8, (uint64_t)&v12, 1);
    }
    else
    {
      v9 = v4[8];
      *(_QWORD *)buf = &v14;
      *(_QWORD *)&buf[8] = &v22;
      *(_QWORD *)&buf[16] = &v21;
      v28 = a2;
      v29 = &v23;
      v30 = &v25;
      v26 = buf;
      (*(void (**)(uint64_t, _BYTE **, uint64_t (*)(uint64_t **, uint64_t)))(*(_QWORD *)v9 + 40))(v9, &v26, sub_2341FB79C);
      (*(void (**)(_BYTE *__return_ptr, _QWORD *, _QWORD, _QWORD))(*v25 + 32))(buf, v25, *(unsigned __int16 *)(v8 + 56), *(unsigned __int16 *)(v8 + 58));
      v10 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = __str;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Connection established successfully with %s.", buf, 0xCu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(1u, 2);
      v11 = v21[1];
      *(_DWORD *)buf = 0;
      *(_QWORD *)&buf[8] = "src/transport/raw/TCP.cpp";
      *(_DWORD *)&buf[16] = 521;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 32))(v11, v8, buf);
    }
  }
}

double sub_2341FAC30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  BOOL v10;
  int v11;
  _QWORD *v12;
  double result;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  int v18;
  const char *v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  unsigned int __dst;
  uint8_t buf[4];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 56);
  if (!v6)
  {
LABEL_9:
    *(_DWORD *)a5 = 172;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    v11 = 315;
LABEL_10:
    *(_DWORD *)(a5 + 16) = v11;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 48);
  while (1)
  {
    v10 = *(_QWORD *)v9 != a2 || *(_QWORD *)v9 == 0;
    if (!v10 && *(_DWORD *)(v9 + 40) == 4)
      break;
    v9 += 64;
    if (!--v6)
      goto LABEL_9;
  }
  v12 = *(_QWORD **)(v9 + 32);
  if (v12)
  {
    sub_2341182AC(v12, a4);
  }
  else
  {
    *(_QWORD *)(v9 + 32) = *a4;
    *a4 = 0;
  }
  v14 = *(_QWORD **)(v9 + 32);
  if (!v14)
  {
LABEL_21:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    v11 = 350;
    goto LABEL_10;
  }
  while (1)
  {
    v21 = 0uLL;
    v22 = 0;
    sub_234118490((char *)&__dst, v14, 4uLL, (uint64_t)&v21);
    if ((_DWORD)v21)
      break;
    v15 = __dst;
    if (__dst >= 0xF9FC)
    {
      v17 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v25 = v15;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Received TCP message of length %u exceeds limit.", buf, 8u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(1u, 1);
      v18 = 4;
      v19 = "src/transport/raw/TCP.cpp";
      v20 = 336;
      sub_2341F9BC0(a1, v9, (uint64_t)&v18, 1);
      *(_DWORD *)a5 = 4;
      *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
      v11 = 338;
      goto LABEL_10;
    }
    v16 = *(_QWORD **)(v9 + 32);
    if (v16[2] - 4 < (unint64_t)__dst)
    {
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
      v11 = 344;
      goto LABEL_10;
    }
    *(_QWORD *)(v9 + 32) = sub_234118420(v16, 4uLL);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    sub_2341FAEAC(a1, a3, v9, v15, a5);
    if (*(_DWORD *)a5)
      return result;
    v14 = *(_QWORD **)(v9 + 32);
    if (!v14)
      goto LABEL_21;
  }
  if ((_DWORD)v21 == 25)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    v11 = 325;
    goto LABEL_10;
  }
  result = *(double *)&v21;
  *(_OWORD *)a5 = v21;
  *(_QWORD *)(a5 + 16) = v22;
  return result;
}

void sub_2341FAEAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD **v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a3;
  v8 = (_QWORD **)(a3 + 32);
  if (*(_QWORD *)(*(_QWORD *)(a3 + 32) + 24) == a4)
  {
    sub_234118924((_QWORD **)(a3 + 32), &v11);
    v14 = v11;
    goto LABEL_6;
  }
  sub_234118674(a4, 0, &v11);
  v10 = v11;
  v14 = v11;
  if ((_QWORD)v11)
  {
    v12 = 0;
    v11 = 0uLL;
    sub_234118490(*(char **)(v10 + 8), *v8, a4, (uint64_t)&v11);
    *v8 = sub_234118420(*v8, a4);
    *(_OWORD *)a5 = v11;
    *(_QWORD *)(a5 + 16) = v12;
    if (*(_DWORD *)a5)
    {
LABEL_7:
      sub_23411814C(v10);
      return;
    }
    sub_234118220(v10, a4, 0);
LABEL_6:
    (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, &v14, &v13);
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
    *(_DWORD *)(a5 + 16) = 387;
    v10 = v14;
    if (!v14)
      return;
    goto LABEL_7;
  }
  *(_DWORD *)a5 = 11;
  *(_QWORD *)(a5 + 8) = "src/transport/raw/TCP.cpp";
  *(_DWORD *)(a5 + 16) = 378;
}

void sub_2341FAFF0(uint64_t a1)
{
  uint64_t v2;

  sub_2341109A4(*(_QWORD *)a1);
  *(_OWORD *)(a1 + 8) = xmmword_25615DD84;
  *(_BYTE *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 26) = 5540;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    sub_23411814C(v2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
}

void sub_2341FB04C(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  char *v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  __int16 v15;
  int v16;
  int v17;
  __int16 v18;
  __int128 v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v17 = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, __int128 *, __int16 *))*a1)(buf, a1, &v19, &v18);
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, int *))(*a1 + 16))(buf, a1, &v17);
  v13 = v19;
  v14 = 3;
  v15 = v18;
  v16 = v17;
  v6 = a1[2];
  v11 = 0uLL;
  v12 = 0;
  sub_2341FAC30(v6, (uint64_t)a1, (uint64_t)&v13, a2, (uint64_t)&v11);
  if ((_DWORD)v11)
  {
    v7 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v11;
      v21 = v12;
      v8 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to accept received TCP message: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v11;
      v21 = v12;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 1);
    }
    v9 = 453;
    v10 = 192;
  }
  else
  {
    v10 = 0;
    v9 = 455;
  }
  *(_DWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = "src/transport/raw/TCP.cpp";
  *(_DWORD *)(a3 + 16) = v9;
}

void sub_2341FB204(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 56);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 48);
    while (*(_QWORD *)v5 != a1)
    {
      v5 += 64;
      if (!--v4)
        goto LABEL_5;
    }
    if (*(_DWORD *)a2)
      v6 = 1;
    else
      v6 = a1 == 0;
    if (!v6 && *(_DWORD *)(v5 + 40) == 4)
    {
      *(_DWORD *)a2 = 60;
      *((_QWORD *)a2 + 1) = "src/transport/raw/TCP.cpp";
      *((_DWORD *)a2 + 4) = 544;
    }
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    sub_2341F9BC0(v3, v5, (uint64_t)&v7, 1);
  }
  else
  {
LABEL_5:
    sub_2341109A4(a1);
  }
}

uint64_t sub_2341FB2B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  NSObject *v10;
  int v11;
  uint8_t buf[4];
  char *v13;
  char __str[76];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(result + 28) != 1)
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/transport/raw/TCP.cpp";
    v11 = 605;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a2 + 16) != 3)
  {
    *(_DWORD *)a5 = 47;
    a5[1] = "src/transport/raw/TCP.cpp";
    v11 = 608;
    goto LABEL_13;
  }
  v7 = result;
  if (*(_QWORD *)(result + 40) >= *(_QWORD *)(result + 56))
  {
    *(_DWORD *)a5 = 11;
    a5[1] = "src/transport/raw/TCP.cpp";
    v11 = 610;
    goto LABEL_13;
  }
  sub_23412A258(a2, __str, 0x4CuLL);
  v10 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v13 = __str;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Connecting to peer %s.", buf, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(1u, 2);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = sub_2341FA738(v7, a2, a3, a4, a5);
  if (!*(_DWORD *)a5)
  {
    *(_DWORD *)a5 = 0;
    a5[1] = "src/transport/raw/TCP.cpp";
    v11 = 618;
LABEL_13:
    *((_DWORD *)a5 + 4) = v11;
  }
  return result;
}

void sub_2341FB474(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v6 + v4))
      {
        v7 = v6 + v4;
        if (*(_DWORD *)(v7 + 40) == 4)
        {
          v8 = *(unsigned __int16 *)(v7 + 26);
          if (sub_23410ECAC((_DWORD *)(v7 + 8), (_DWORD *)a2)
            && v8 == *(unsigned __int16 *)(a2 + 18)
            && *(_BYTE *)(a2 + 16) == 3)
          {
            v11 = *(_QWORD *)(a1 + 48) + v4;
            v12 = 0;
            v13 = "src/transport/raw/TCP.cpp";
            v14 = 640;
            sub_2341F9BC0(a1, v11, (uint64_t)&v12, 0);
          }
        }
      }
      ++v5;
      v4 += 64;
    }
    while (v5 < *(_QWORD *)(a1 + 56));
  }
}

void sub_2341FB54C(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  char v7;
  NSObject *v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  uint8_t buf[16];

  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      v6 = *(_DWORD *)(a2 + 40);
      v7 = v6 == 4 ? a3 : 0;
      if ((v7 & 1) == 0 && v6 != 3
        || (v12 = 2, v13 = "src/transport/raw/TCP.cpp",
                     v14 = 659,
                     sub_2341F9BC0(a1, a2, (uint64_t)&v12, 0),
                     *(_QWORD *)a2))
      {
        if (*(_DWORD *)(a2 + 40) == 4 && (a3 & 1) == 0)
        {
          v9 = 0;
          v10 = "src/transport/raw/TCP.cpp";
          v11 = 664;
          sub_2341F9BC0(a1, a2, (uint64_t)&v9, 0);
        }
      }
    }
  }
  else
  {
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to Disconnect. Passed in Connection is null.", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(1u, 1);
  }
}

BOOL sub_2341FB684(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(a1 + 48);
    v4 = 1;
    do
    {
      if (*(_QWORD *)v3 && *(_DWORD *)(v3 + 40) == 4)
        break;
      v4 = ++v2 < v1;
      v3 += 64;
    }
    while (v1 != v2);
  }
  else
  {
    return 0;
  }
  return v4;
}

BOOL sub_2341FB6D4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 28) == 1
      && *(_BYTE *)(a2 + 16) == 3
      && sub_23410F01C((_DWORD *)a2) == *(unsigned __int8 *)(a1 + 24);
}

void sub_2341FB720(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 172;
  *(_QWORD *)(a1 + 8) = "src/transport/raw/Base.h";
  *(_DWORD *)(a1 + 16) = 122;
}

uint64_t sub_2341FB740(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *a1;
  if (!sub_2341D2CD4(a2, **a1))
    return 0;
  v4 = 1;
  *(_BYTE *)v3[1] = 1;
  sub_2341182AC(*(_QWORD **)(a2 + 24), (uint64_t *)v3[2]);
  return v4;
}

uint64_t sub_2341FB79C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  if (sub_2341D2CD4(a2, **a1))
  {
    *(_BYTE *)v3[1] = 1;
    v4 = *(_QWORD *)(a2 + 24);
    v11 = v4;
    *(_QWORD *)(a2 + 24) = 0;
    v5 = *(_QWORD *)(*(_QWORD *)v3[2] + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
    if (!*(_DWORD *)v3[3] && !*(_DWORD *)v3[4])
    {
      sub_23411051C(*(_QWORD *)v3[5], &v11, 1, &v9);
      v6 = v3[4];
      v7 = v9;
      v4 = v11;
      *(_QWORD *)(v6 + 16) = v10;
      *(_OWORD *)v6 = v7;
    }
    if (v4)
      sub_23411814C(v4);
  }
  return 0;
}

_QWORD *sub_2341FB864(_QWORD *a1)
{
  *a1 = &off_250515BE0;
  a1[2] = &unk_250515C70;
  sub_2341FB89C((uint64_t)a1);
  return a1;
}

_QWORD *sub_2341FB89C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    sub_23410BB60(v2, (uint64_t)v4);
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  result = *(_QWORD **)(a1 + 40);
  if (result)
  {
    result = sub_2341094D4(result);
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

_QWORD *sub_2341FB8F0(_QWORD *a1)
{
  *a1 = &off_250515BE0;
  a1[2] = &unk_250515C70;
  sub_2341FB89C((uint64_t)a1);
  return a1;
}

_QWORD *sub_2341FB928(_QWORD *a1)
{
  *a1 = &unk_250515C70;
  *(a1 - 2) = &off_250515BE0;
  return sub_2341FB89C((uint64_t)(a1 - 2));
}

void sub_2341FB940(_QWORD *a1)
{
  *a1 = &off_250515BE0;
  a1[2] = &unk_250515C70;
  sub_2341FB89C((uint64_t)a1);
  JUMPOUT(0x23493E704);
}

void sub_2341FB988(_QWORD *a1)
{
  *a1 = &unk_250515C70;
  *(a1 - 2) = &off_250515BE0;
  sub_2341FB89C((uint64_t)(a1 - 2));
  JUMPOUT(0x23493E704);
}

uint64_t sub_2341FB9D4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v12[16];
  uint8_t buf[16];

  if (!*(_DWORD *)(result + 32))
  {
    v6 = *a2;
    if (!*a2)
    {
      v4 = 67;
      goto LABEL_3;
    }
    v7 = result;
    *(_QWORD *)(result + 24) = v6;
    if (*(_QWORD *)(v6 + 16))
      v8 = *((_BYTE *)a2 + 8) == 0;
    else
      v8 = 1;
    if (v8)
    {
      *(_QWORD *)(v6 + 16) = result + 16;
      v9 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "BLEBase::Init - setting/overriding transport", buf, 2u);
      }
      result = sub_234114844(3u);
      if ((result & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      v10 = sub_234117B80(1u, "Inet");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "BLEBase::Init - not overriding transport", v12, 2u);
      }
      result = sub_234114844(3u);
      if (!(_DWORD)result)
        goto LABEL_19;
    }
    result = sub_2341147D0(1u, 3);
LABEL_19:
    v5 = 0;
    *(_DWORD *)(v7 + 32) = 1;
    v4 = 82;
    goto LABEL_20;
  }
  v4 = 66;
LABEL_3:
  v5 = 3;
LABEL_20:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/transport/raw/BLE.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

_QWORD *sub_2341FBB34@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  int v6;
  const char *v7;
  int v8;

  if (*a2 == 3)
  {
    result[5] = a2;
    v6 = 0;
    v7 = "src/transport/raw/BLE.cpp";
    v8 = 92;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 112))(result);
    v4 = 0;
    v5 = 94;
  }
  else
  {
    v5 = 87;
    v4 = 47;
  }
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/transport/raw/BLE.cpp";
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_2341FBBB0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  int v9;

  if (*a2 == 3)
  {
    v4 = *(_QWORD *)(result - 16);
    *(_QWORD *)(result + 24) = a2;
    v7 = 0;
    v8 = "src/transport/raw/BLE.cpp";
    v9 = 92;
    result = (*(uint64_t (**)(void))(v4 + 112))();
    v5 = 0;
    v6 = 94;
  }
  else
  {
    v6 = 87;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/transport/raw/BLE.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

void sub_2341FBC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;

  if (*(_BYTE *)(a2 + 16) != 2)
  {
    v7 = 99;
    v8 = 47;
LABEL_13:
    *(_DWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/BLE.cpp";
    *(_DWORD *)(a4 + 16) = v7;
    return;
  }
  v5 = *(unsigned __int8 **)(a1 + 40);
  if (!v5)
  {
    v7 = 100;
LABEL_9:
    v8 = 3;
    goto LABEL_13;
  }
  v6 = *(_DWORD *)(a1 + 32);
  if (!v6)
  {
    v7 = 101;
    goto LABEL_9;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (v6 == 2)
    sub_234109DF8(v5, a3, a4);
  else
    sub_2341FBCE0(a1, a3, a4);
  if (!*(_DWORD *)a4)
  {
    v8 = 0;
    v7 = 112;
    goto LABEL_13;
  }
}

void sub_2341FBCE0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[16];

  *(_OWORD *)a3 = xmmword_250515CB0;
  *(_QWORD *)(a3 + 16) = 117;
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v7 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v7))
    {
      if (v4 == ++v7)
        return;
    }
    v8 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Message appended to BLE send queue", v11, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(1u, 3);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(v9 + 8 * v7);
    if (v10)
      sub_23411814C(v10);
    *(_QWORD *)(v9 + 8 * v7) = *a2;
    *a2 = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/transport/raw/BLE.cpp";
    *(_DWORD *)(a3 + 16) = 125;
  }
}

void sub_2341FBDF8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  _QWORD *v6;
  NSObject *v7;
  char *v8;
  __int128 v9;
  int v10;
  uint8_t buf[4];
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&v12 = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "BleConnectionComplete: endPoint %p", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  *(_QWORD *)(a1 + 40) = a2;
  sub_23410859C(a2, (uint64_t)buf);
  v5 = *(_DWORD *)buf;
  v9 = v12;
  v10 = v13;
  if (*(_DWORD *)buf)
  {
    v6 = *(_QWORD **)(a1 + 40);
    if (v6)
    {
      sub_2341094D4(v6);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v7 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v5;
      v12 = v9;
      v13 = v10;
      v8 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&v12 = v8;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to setup BLE endPoint: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_DWORD *)buf = v5;
      v12 = v9;
      v13 = v10;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 1);
    }
  }
}

void sub_2341FBFBC(uint64_t a1, uint64_t a2)
{
  sub_2341FBDF8(a1 - 16, a2);
}

uint64_t sub_2341FBFC4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_2341FC0C8(a1);
  v3 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    v4 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "BleConnection Error: %s", buf, 0xCu);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(1u, 3);
  }
  return result;
}

void sub_2341FC0C8(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = sub_234117B80(1u, "Inet");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Clearing BLE pending packets.", v6, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(1u, 3);
  if (*(_QWORD *)(a1 + 56))
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
        sub_23411814C(v5);
      *(_QWORD *)(v4 + 8 * v3++) = 0;
    }
    while (v3 < *(_QWORD *)(a1 + 56));
  }
}

uint64_t sub_2341FC18C(uint64_t a1, uint64_t a2)
{
  return sub_2341FBFC4(a1 - 16, a2);
}

uint64_t sub_2341FC194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];
  char v5;
  __int16 v6;
  int v7;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 2;
  v6 = 5540;
  v7 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v4, a3, 0);
}

uint64_t sub_2341FC1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];
  char v5;
  __int16 v6;
  int v7;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 2;
  v6 = 5540;
  v7 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 - 8) + 16))(*(_QWORD *)(a1 - 8), v4, a3, 0);
}

uint64_t sub_2341FC224(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  NSObject *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[16];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 32) = 2;
  if (*(_DWORD *)a3)
  {
    v6 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *a3;
      v18 = *((_QWORD *)a3 + 2);
      v7 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Failed to establish BLE connection: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *a3;
      v18 = *((_QWORD *)a3 + 2);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(1u, 1);
    }
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *, __int128 *))(*(_QWORD *)a1 + 120))(a1, a2, &v15);
  }
  else
  {
    if (*(_QWORD *)(a1 + 56))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v9);
        if (*v11)
        {
          sub_234109DF8(a2, v11, (uint64_t)buf);
          *a3 = *(_OWORD *)buf;
          *((_QWORD *)a3 + 2) = v18;
          if (*(_DWORD *)a3)
          {
            v12 = sub_234117B80(1u, "Inet");
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = *a3;
              v18 = *((_QWORD *)a3 + 2);
              v13 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v13;
              _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Deferred sending failed: %s", buf, 0xCu);
            }
            if (sub_234114844(1u))
            {
              *(_OWORD *)buf = *a3;
              v18 = *((_QWORD *)a3 + 2);
              sub_2341083CC((const char **)buf, 1);
              sub_2341147D0(1u, 1);
            }
          }
        }
        ++v10;
        v9 += 8;
      }
      while (v10 < *(_QWORD *)(a1 + 56));
    }
    v14 = sub_234117B80(1u, "Inet");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "BLE EndPoint %p Connection Complete", buf, 0xCu);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      return sub_2341147D0(1u, 3);
  }
  return result;
}

uint64_t sub_2341FC520(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  return sub_2341FC224(a1 - 16, a2, a3);
}

void sub_2341FC528(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  sub_2341FC0C8(a1);
}

void sub_2341FC538(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  sub_2341FC0C8(a1 - 16);
}

BOOL sub_2341FC550(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 32) && *(_BYTE *)(a2 + 16) == 2;
}

uint64_t sub_2341FC568(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 152) = *((_WORD *)a2 + 4);
  *(_QWORD *)(result + 144) = v2;
  return result;
}

uint64_t sub_2341FC57C(uint64_t a1)
{
  return a1 + 144;
}

void sub_2341FC584(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[4];
  uint64_t v26;
  int v27;
  _BYTE v28[4];
  uint64_t v29;
  int v30;
  _BYTE v31[8];
  uint64_t v32;

  if (!*(_QWORD *)(a2 + 32))
  {
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/app/CASEClient.cpp";
    *(_DWORD *)(a7 + 16) = 38;
    return;
  }
  sub_2341FC72C(*(_QWORD *)a2, a4, a5, (uint64_t)v31);
  if (v31[0])
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = (uint64_t *)sub_233CB6588(v31);
    if (a1)
      v14 = a1 + 8;
    else
      v14 = 0;
    v15 = sub_2341AE734(v12, v13, v14, 1u);
    if (v15)
    {
      v16 = (uint64_t)v15;
      if (*(_BYTE *)(a2 + 48))
      {
        v28[0] = *(_BYTE *)(a2 + 48);
        v29 = *(_QWORD *)(a2 + 52);
        v30 = *(_DWORD *)(a2 + 60);
        v17 = 1;
      }
      else
      {
        sub_2341B1BB8((uint64_t)v28);
        v17 = v28[0];
      }
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      *(_QWORD *)a7 = 0;
      v19 = *(_QWORD *)(a2 + 32);
      v20 = *a3;
      v21 = a3[1];
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(_QWORD *)(a2 + 16);
      v25[0] = v17;
      if (v17)
      {
        v26 = v29;
        v27 = v30;
      }
      sub_234121480(a1, v22, v19, v20, v21, v16, v23, v24, a7, a6, v25);
      if (*(_DWORD *)a7)
        goto LABEL_18;
      *(_DWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = "src/app/CASEClient.cpp";
      v18 = 60;
    }
    else
    {
      *(_DWORD *)a7 = 172;
      *(_QWORD *)(a7 + 8) = "src/app/CASEClient.cpp";
      v18 = 51;
    }
  }
  else
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/app/CASEClient.cpp";
    v18 = 42;
  }
  *(_DWORD *)(a7 + 16) = v18;
LABEL_18:
  if (v31[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
}

_QWORD *sub_2341FC72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  do
    v8 = sub_234136ABC();
  while ((unint64_t)(v8 - 1) > 0xFFFFFFEFFFFFFFFELL);
  return sub_2341FC790((unint64_t *)(a1 + 48), v8, a2, a3, a4);
}

_QWORD *sub_2341FC790@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  __int128 v8;
  char v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  v10 = a2;
  result = sub_2341D342C(a1, &v11, &v10, (__int128 *)a3, a4, (uint64_t)a1);
  if (result)
  {
    v8 = *(_OWORD *)a3;
    *((_DWORD *)result + 19) = *(_DWORD *)(a3 + 16);
    *(_OWORD *)((char *)result + 60) = v8;
    *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 20);
    *(_QWORD *)(a5 + 8) = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)a5 = v9;
  return result;
}

_QWORD *sub_2341FC814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = sub_2341FC8C4(a3, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v9 = *a3;
    v10 = a3[2];
    *(_OWORD *)(a1 + 32) = a3[1];
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 16) = v9;
    v11 = *((unsigned __int8 *)a3 + 48);
    *(_BYTE *)(a1 + 64) = v11;
    if (v11)
    {
      v12 = *(_QWORD *)((char *)a3 + 52);
      *(_DWORD *)(a1 + 76) = *((_DWORD *)a3 + 15);
      *(_QWORD *)(a1 + 68) = v12;
    }
    *(_OWORD *)(a1 + 80) = a3[4];
    sub_2341B1480(*((_QWORD *)a3 + 3) + 96, a1 + 8);
    v13 = sub_23421694C();
    return (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v13 + 16))(v13, a2);
  }
  return result;
}

_QWORD *sub_2341FC8C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (*result)
  {
    if (result[3])
    {
      if (result[4])
      {
        if (result[5])
        {
          *(_DWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = "src/app/CASEClient.h";
          v2 = 52;
        }
        else
        {
          *(_DWORD *)a2 = 3;
          *(_QWORD *)(a2 + 8) = "src/app/CASEClient.h";
          v2 = 50;
        }
      }
      else
      {
        *(_DWORD *)a2 = 3;
        *(_QWORD *)(a2 + 8) = "src/app/CASEClient.h";
        v2 = 49;
      }
    }
    else
    {
      *(_DWORD *)a2 = 3;
      *(_QWORD *)(a2 + 8) = "src/app/CASEClient.h";
      v2 = 48;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/app/CASEClient.h";
    v2 = 47;
  }
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_2341FC970()
{
  uint64_t *v0;

  v0 = sub_23421694C();
  return (*(uint64_t (**)(uint64_t *))(*v0 + 48))(v0);
}

_QWORD *sub_2341FC98C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, int a5, _QWORD *a6, char a7)
{
  return sub_2341FC9A0(a1, a2, a3, a4, 0, a5, a6, a7);
}

_QWORD *sub_2341FC9A0(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, int a6, _QWORD *a7, char a8)
{
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  NSObject *v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, _QWORD *, int *);
  int v25;
  const char *v26;
  int v27;
  uint8_t buf[16];
  int v29;
  const char *v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v16 = sub_234117B80(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v17 = *((unsigned __int8 *)a2 + 8);
    v18 = *a2;
    v19 = HIDWORD(*a2);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v19;
    *(_WORD *)&buf[14] = 1024;
    v29 = v18;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "FindOrEstablishSession: PeerId = [%d:%08X%08X]", buf, 0x14u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x27u, 3);
  v20 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), *a2, a2[1], 0);
  if (v20)
    goto LABEL_11;
  v21 = sub_234117B80(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_INFO, "FindOrEstablishSession: No existing OperationalSessionSetup instance found", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x27u, 3);
  result = (_QWORD *)(***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 88))(*(_QWORD *)(a1 + 88), a1 + 16, *(_QWORD *)(a1 + 80), *a2, a2[1], a1);
  v20 = result;
  if (result)
  {
LABEL_11:
    result = sub_234206F6C(v20, a6);
    if (a7)
      result = (_QWORD *)sub_234207014((uint64_t)v20, a7);
    if (a4)
      result = sub_234205604((uint64_t)v20, a3, a4, a8);
    if (a5)
      return sub_234205610((uint64_t)v20, a3, (uint64_t *)a5, a8);
  }
  else
  {
    if (a4)
    {
      v23 = a4[3];
      v24 = (uint64_t (*)(uint64_t, _QWORD *, int *))a4[4];
      v25 = 11;
      v26 = "src/app/CASESessionManager.cpp";
      v27 = 102;
      result = (_QWORD *)v24(v23, a2, &v25);
    }
    if (a5)
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v29 = 11;
      v30 = "src/app/CASESessionManager.cpp";
      v31 = 107;
      v32 = 0;
      v33 = 0;
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint8_t *))(a5 + 32))(*(_QWORD *)(a5 + 24), buf);
    }
  }
  return result;
}

_QWORD *sub_2341FCC34(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, int a5, _QWORD *a6, char a7)
{
  return sub_2341FC9A0(a1, a2, a3, 0, a4, a5, a6, a7);
}

_QWORD *sub_2341FCC4C(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, int a5, _QWORD *a6, char a7)
{
  return sub_2341FC9A0(a1, a2, a3, 0, 0, a5, a6, a7);
}

uint64_t sub_2341FCC64(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), *a2, a2[1], a3);
}

uint64_t sub_2341FCC80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 24))(*(_QWORD *)(a1 + 88));
}

uint64_t sub_2341FCC90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88));
}

uint64_t sub_2341FCCA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __int128 v15;
  int v16;
  _BYTE v17[8];
  uint64_t v18;
  __int16 v19;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v9 = (uint64_t *)(a1 + 16);
  result = (uint64_t)sub_2341FC8C4((_QWORD *)(a1 + 16), (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    v11 = *v9;
    v12 = *a2;
    v13 = a2[1];
    v19 = 513;
    result = sub_2341D24E4(v11, v12, v13, (uint64_t)&v19, a4, (uint64_t)v17);
    if (v17[0])
    {
      v14 = (uint64_t *)sub_233CB6588(v17);
      result = sub_2341CD3C0(*v14);
      v15 = *(_OWORD *)(result + 96);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 112);
      *(_OWORD *)a3 = v15;
      *(_DWORD *)(a3 + 20) = *(_DWORD *)(result + 116);
      v16 = v17[0];
      *(_DWORD *)a5 = 0;
      a5[1] = "src/app/CASESessionManager.cpp";
      *((_DWORD *)a5 + 4) = 151;
      if (v16)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    }
    else
    {
      *(_DWORD *)a5 = 72;
      a5[1] = "src/app/CASESessionManager.cpp";
      *((_DWORD *)a5 + 4) = 149;
    }
  }
  return result;
}

uint64_t sub_2341FCDA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;

  v5 = *(_QWORD *)(a1 + 16);
  v7 = *a2;
  v6 = a2[1];
  v9 = 513;
  return sub_2341D24E4(v5, v7, v6, (uint64_t)&v9, a3, a4);
}

uint64_t sub_2341FCDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  NSObject *v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2, a3, 1);
  v7 = sub_234117B80(0x27u, "CASESessionManager");
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (v8)
    {
      *(_DWORD *)buf = 67109376;
      v12 = HIDWORD(a2);
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "UpdatePeerAddress: Found existing OperationalSessionSetup instance for peerId[%08X%08X]", buf, 0xEu);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x27u, 3);
    return (uint64_t)sub_2342069E4(v6);
  }
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "UpdatePeerAddress: No existing OperationalSessionSetup instance found", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x27u, 3);
  v6 = (_QWORD *)(***(uint64_t (****)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a1 + 88))(*(_QWORD *)(a1 + 88), a1 + 16, *(_QWORD *)(a1 + 80), a2, a3, a1);
  if (v6)
    return (uint64_t)sub_2342069E4(v6);
  v10 = sub_234117B80(0x27u, "CASESessionManager");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "UpdatePeerAddress: Failed to allocate OperationalSessionSetup instance", buf, 2u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0x27u, 3);
  return result;
}

uint64_t sub_2341FCFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2341FCDD8(a1 - 8, a2, a3);
}

uint64_t sub_2341FCFD8(uint64_t result, uint64_t a2)
{
  if (a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 88) + 8))(*(_QWORD *)(result + 88));
  return result;
}

void sub_2341FCFF4(_QWORD *a1)
{
  sub_2341FD048(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2341FD018(uint64_t a1)
{
  return sub_2341FD048((_QWORD *)(a1 - 8));
}

void sub_2341FD020(uint64_t a1)
{
  sub_2341FD048((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2341FD048(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250515D20;
  a1[1] = &unk_250515D50;
  if (a1[2])
  {
    v2 = a1[5];
    if (v2)
    {
      if (a1[6] && a1[7])
        sub_2341B1480(v2 + 96, 0);
    }
  }
  return a1;
}

uint64_t sub_2341FD0A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(_QWORD *)a1 = &off_250515DD0;
  *(_QWORD *)(a1 + 8) = &off_2504F0DD0;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  sub_23411BFF8(a1 + 48);
  sub_23411BFF8(a1 + 88);
  sub_23411BFF8(a1 + 128);
  sub_23411BFF8(a1 + 168);
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = -1;
  sub_234106C48(a1 + 240);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = &unk_250504030;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = &off_250516328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 1;
  *(_BYTE *)(a1 + 398) = 0;
  *(_BYTE *)(a1 + 399) = a5;
  *(_BYTE *)(a1 + 400) = a4;
  *(_WORD *)(a1 + 401) = 0;
  *(_BYTE *)(a1 + 403) = 0;
  *(_BYTE *)(a1 + 404) = a6;
  sub_2341B1F64("src/app/CommandSender.cpp", 63);
  return a1;
}

uint64_t sub_2341FD1B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(_QWORD *)a1 = &off_250515DD0;
  *(_QWORD *)(a1 + 8) = &off_2504F0DD0;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  sub_23411BFF8(a1 + 48);
  sub_23411BFF8(a1 + 88);
  sub_23411BFF8(a1 + 128);
  sub_23411BFF8(a1 + 168);
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = -1;
  sub_234106C48(a1 + 240);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = &unk_250504030;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = &off_250516328;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 1;
  *(_BYTE *)(a1 + 398) = 0;
  *(_BYTE *)(a1 + 399) = a5;
  *(_BYTE *)(a1 + 400) = a4;
  *(_WORD *)(a1 + 401) = 0;
  *(_BYTE *)(a1 + 403) = 1;
  *(_BYTE *)(a1 + 404) = a6;
  sub_2341B1F64("src/app/CommandSender.cpp", 72);
  *(_QWORD *)(a1 + 384) = a1 + 336;
  return a1;
}

_QWORD *sub_2341FD2D8(_QWORD *a1)
{
  uint64_t v2;

  sub_2341B1F64("src/app/CommandSender.cpp", 80);
  a1[42] = &off_250516328;
  sub_2341FF4B8((uint64_t)(a1 + 43));
  sub_2340F6E6C(a1 + 38);
  v2 = a1[28];
  if (v2)
    sub_23411814C(v2);
  a1[28] = 0;
  a1[1] = &off_2504F0DD0;
  sub_233CF4DD8((uint64_t)(a1 + 1));
  return a1;
}

void sub_2341FD354(_QWORD *a1)
{
  sub_2341FD2D8(a1);
  JUMPOUT(0x23493E704);
}

void sub_2341FD378(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];

  if (*(_BYTE *)(a1 + 401))
    goto LABEL_14;
  v4 = (char *)(a1 + 240);
  sub_2341FD4E8(a1 + 240);
  v5 = *(_BYTE *)(a1 + 404) ? 63902 : 1194;
  sub_234118674(v5, 0x26u, v10);
  v9 = v10[0];
  if (v10[0])
  {
    sub_233CAF098(a1 + 304, &v9, 0);
    sub_234106CA8((uint64_t)v4, a1 + 304, 0xFFFFFFFF, (uint64_t)v10);
    *a2 = 0;
    a2[1] = 0;
    v6 = (_OWORD *)(a1 + 48);
    a2[2] = 0;
    sub_23411D5F0(a1 + 48, v4, a2);
    v7 = 0;
    if (!*(_DWORD *)a2)
    {
      v8 = sub_23411B3E0(a1 + 48, *(unsigned __int8 *)(a1 + 399));
      sub_23411D664(v8, *(unsigned __int8 *)(a1 + 400));
      *(_OWORD *)a2 = *v6;
      a2[2] = *(_QWORD *)(a1 + 64);
      if (*(_DWORD *)a2
        || (v7 = 1, sub_23411D6B8(a1 + 48, 1), *(_OWORD *)a2 = *v6, a2[2] = *(_QWORD *)(a1 + 64), *(_DWORD *)a2))
      {
        v7 = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 401) = 1;
      }
    }
  }
  else
  {
    v7 = 0;
    *(_DWORD *)a2 = 11;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 98;
  }
  if (v9)
    sub_23411814C(v9);
  if (v7)
  {
LABEL_14:
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 112;
  }
}

void sub_2341FD4E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    sub_23411814C(v2);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    sub_23411814C(v3);
}

void sub_2341FD528(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;

  if (*(_BYTE *)(a1 + 398) != 2)
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/app/CommandSender.cpp";
    v11 = 117;
    goto LABEL_7;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341FD6C8(a1, (uint64_t *)(a1 + 224), a4);
  if (*(_DWORD *)a4)
    return;
  v8 = sub_2341AE734(*(_QWORD *)(a1 + 40), a2, a1, 1u);
  if (!v8)
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/app/CommandSender.cpp";
    v11 = 123;
    goto LABEL_7;
  }
  v9 = v8;
  sub_233CF4DD8(a1 + 8);
  *(_QWORD *)(a1 + 24) = v9;
  v9[5] = a1 + 8;
  v10 = sub_2340F3F3C(a1 + 8);
  if (sub_2340FAB58(v10))
  {
    *(_DWORD *)a4 = 42;
    a4[1] = "src/app/CommandSender.cpp";
    v11 = 126;
LABEL_7:
    *((_DWORD *)a4 + 4) = v11;
    return;
  }
  v12 = sub_2340F3F3C(a1 + 8);
  v13 = sub_2341CD548(*a2, 2000);
  if (*a3)
    v13 = *(_DWORD *)sub_23412A1D8(a3);
  sub_2341AD100(v12, v13);
  if (!*(_BYTE *)(a1 + 232))
  {
    sub_2341FD894(a1, a4);
    return;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = sub_233CBCEC0((_BYTE *)(a1 + 232));
  sub_23420871C(v14, *(unsigned __int16 *)v15, a4);
  if (!*(_DWORD *)a4)
  {
    sub_2341FD770(a1, 3);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/CommandSender.cpp";
    v11 = 134;
    goto LABEL_7;
  }
}

void sub_2341FD6C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 398) == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23411D898((char *)(a1 + 88), a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23411D724(a1 + 48, (uint64_t)a3);
      if (!*(_DWORD *)a3)
        sub_233C115F0(a1 + 240, a2, a3);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a3 + 4) = 638;
  }
}

uint64_t sub_2341FD770(uint64_t a1, char a2)
{
  NSObject *v3;
  unint64_t v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 398) = a2;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(char *)(a1 + 398);
    if (v4 > 6)
      v5 = "N/A";
    else
      v5 = off_250515E48[v4];
    *(_DWORD *)buf = 68157954;
    v8 = 10;
    v9 = 2080;
    v10 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "ICR moving to [%10.10s]", buf, 0x12u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 3);
  return result;
}

void sub_2341FD894(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __int16 v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = sub_2340F3F3C(a1 + 8);
  v5 = 1;
  sub_2341AD108(v4, 0x10000u, 8, (uint64_t *)(a1 + 224), &v5, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_2341FD770(a1, 4);
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/CommandSender.cpp";
    *((_DWORD *)a2 + 4) = 197;
  }
}

void sub_2341FD918(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  _BYTE v12[4];
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a1[404] && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 80))(*a2) & 1) == 0)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
    v11 = 155;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v11;
    return;
  }
  if (a1[400] != a1[232])
  {
    v8 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = a1[400];
      v10 = a1[232];
      *(_DWORD *)buf = 67109376;
      v15 = v9;
      v16 = 1024;
      v17 = v10;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Inconsistent timed request state in CommandSender: mTimedRequest (%d) != mTimedInvokeTimeoutMs.HasValue() (%d)", buf, 0xEu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xDu, 1);
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
    v11 = 164;
    goto LABEL_13;
  }
  v12[0] = *(_BYTE *)a3;
  if (v12[0])
    v13 = *(_DWORD *)(a3 + 4);
  sub_2341FD528((uint64_t)a1, a2, v12, (_QWORD *)a4);
}

void sub_2341FDAA0(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;

  if (*(_BYTE *)(a1 + 398) == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341FD6C8(a1, (uint64_t *)(a1 + 224), a3);
    if (*(_DWORD *)a3)
      return;
    v6 = sub_2341AE734(*(_QWORD *)(a1 + 40), a2, a1, 1u);
    if (v6)
    {
      v7 = v6;
      sub_233CF4DD8(a1 + 8);
      *(_QWORD *)(a1 + 24) = v7;
      v7[5] = a1 + 8;
      v8 = sub_2340F3F3C(a1 + 8);
      if (sub_2340FAB58(v8))
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_2341FD894(a1, a3);
        if (*(_DWORD *)a3)
          return;
        sub_2341FDB98(a1);
        v9 = 0;
        v10 = 185;
      }
      else
      {
        v10 = 180;
        v9 = 42;
      }
    }
    else
    {
      v10 = 177;
      v9 = 11;
    }
  }
  else
  {
    v10 = 171;
    v9 = 3;
  }
  *(_DWORD *)a3 = v9;
  a3[1] = "src/app/CommandSender.cpp";
  *((_DWORD *)a3 + 4) = v10;
}

_QWORD *sub_2341FDB98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  *(_WORD *)(a1 + 399) = 0;
  sub_2341FD770(a1, 6);
  result = *(_QWORD **)(a1 + 32);
  if (result)
  {
    v3 = 40;
    if (!*(_BYTE *)(a1 + 403))
      v3 = 32;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + v3))();
  }
  return result;
}

void sub_2341FDBF8(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _BOOL4 v11;
  int v12;
  const char *v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  if (*(_BYTE *)(a1 + 398) == 4)
    sub_2341FD770(a1, 5);
  v23 = 0;
  if (*(_QWORD *)(a1 + 24) != a2)
  {
    v11 = 0;
    v5 = 0xD5000000D5;
    v12 = 3;
    v13 = "src/app/CommandSender.cpp";
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 398) != 3)
  {
    if (*((_WORD *)a3 + 2))
    {
      LODWORD(v5) = 257;
      v12 = 42;
      v11 = 1;
      v13 = "src/app/CommandSender.cpp";
      goto LABEL_5;
    }
    v14 = *((unsigned __int16 *)a3 + 3);
    v15 = *a3;
    if (v14 == 1 && v15 == 9)
    {
      ++*(_WORD *)(a1 + 392);
      sub_2341FDED4(a1, a4, &v23, (uint64_t)&v21);
      v12 = v21;
      LODWORD(a3) = DWORD1(v21);
      v13 = (const char *)*((_QWORD *)&v21 + 1);
      v5 = v22;
      if ((_DWORD)v21)
      {
        v11 = 1;
        goto LABEL_5;
      }
      if (v23)
      {
        sub_234215204(0, a2, 1, (uint64_t)&v21);
        sub_2341FD770(a1, 4);
        *(_DWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = "src/app/CommandSender.cpp";
        *(_DWORD *)(a5 + 16) = 244;
        return;
      }
      v12 = 0;
      goto LABEL_7;
    }
    LODWORD(v5) = 257;
    v12 = 42;
    v13 = "src/app/CommandSender.cpp";
    v11 = 1;
    if (v14 == 1 && v15 == 1)
    {
      v21 = xmmword_250515E18;
      v22 = 250;
      sub_2342153C0(a4, (uint64_t)&v21, &v18);
      v12 = v18;
      if ((_DWORD)v18)
        goto LABEL_17;
      v12 = v21;
      if ((_DWORD)v21)
      {
LABEL_25:
        LODWORD(a3) = DWORD1(v21);
        v13 = (const char *)*((_QWORD *)&v21 + 1);
        v5 = v22;
        goto LABEL_5;
      }
      v5 = 0xFD000000FDLL;
      v12 = 42;
    }
LABEL_5:
    *(_QWORD *)&v16 = __PAIR64__(a3, v12);
    *((_QWORD *)&v16 + 1) = v13;
    v17 = v5;
    sub_2341FE154(a1, &v16);
    if (v11)
      sub_234215204(0x80u, a2, 0, (uint64_t)&v21);
    goto LABEL_7;
  }
  v5 = 0xE4000000E4;
  v12 = 42;
  v13 = "src/app/CommandSender.cpp";
  v11 = 1;
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 1)
    goto LABEL_5;
  v21 = xmmword_250515E00;
  v22 = 220;
  sub_2342153C0(a4, (uint64_t)&v21, &v18);
  v12 = v18;
  v11 = v18 != 0;
  if ((_DWORD)v18)
  {
LABEL_17:
    LODWORD(a3) = HIDWORD(v18);
    v13 = v19;
    v5 = v20;
    goto LABEL_5;
  }
  v12 = v21;
  if ((_DWORD)v21)
    goto LABEL_25;
  sub_2341FD894(a1, &v18);
  v12 = v18;
  LODWORD(a3) = HIDWORD(v18);
  v13 = v19;
  v5 = v20;
  if ((_DWORD)v18)
  {
    v11 = 0;
    goto LABEL_5;
  }
LABEL_7:
  if (*(_BYTE *)(a1 + 398) != 4)
  {
    if (!v12)
      sub_2341FE1C8(a1);
    sub_2341FDB98(a1);
  }
  *(_DWORD *)a5 = v12;
  *(_DWORD *)(a5 + 4) = (_DWORD)a3;
  *(_QWORD *)(a5 + 8) = v13;
  *(_QWORD *)(a5 + 16) = v5;
}

void sub_2341FDED4(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  NSObject *v14;
  _QWORD v15[2];
  int v16;
  int v17;
  char v18;
  _BYTE v19[80];
  int v20[20];
  _BYTE v21[16];
  uint64_t v22;
  _BYTE v23[72];
  uint64_t v24;

  sub_234104468((uint64_t)v23);
  v24 = 0;
  sub_234104468((uint64_t)v21);
  sub_23411E074((uint64_t)v20);
  sub_23411E074((uint64_t)v19);
  v18 = 0;
  sub_233C11670((uint64_t)v23, a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_23411DF84((uint64_t)v20, (uint64_t)v23, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_23411AE58(v20, &v18, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_23411DAB8(v20, (uint64_t)v19, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        sub_23411E0BC((uint64_t)v19, (uint64_t)v21);
        while (1)
        {
          sub_2341058CC((uint64_t)v21, v15);
          if (LODWORD(v15[0]))
            break;
          if (v22 != 256)
          {
            *(_DWORD *)a4 = 36;
            *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
            v13 = 306;
LABEL_24:
            *(_DWORD *)(a4 + 16) = v13;
            goto LABEL_4;
          }
          sub_23411E074((uint64_t)v15);
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          sub_23411E964((uint64_t)v15, (uint64_t)v21, (_QWORD *)a4);
          if (!*(_DWORD *)a4)
          {
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
            sub_2341FE274(a1, (int *)v15, a4);
            if (!*(_DWORD *)a4)
              continue;
          }
          goto LABEL_4;
        }
        sub_23411DB28(v20, a3, v15);
        v9 = v15[0];
        v8 = HIDWORD(v15[0]);
        v10 = v17;
        if (LODWORD(v15[0]) == 33)
        {
          *a3 = 0;
          *(_DWORD *)a4 = 0;
          *(_DWORD *)(a4 + 4) = v8;
          v11 = "src/app/CommandSender.cpp";
          *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
          v12 = 318;
          *(_DWORD *)(a4 + 16) = 318;
          *(_DWORD *)(a4 + 20) = v10;
        }
        else
        {
          v11 = (const char *)v15[1];
          v12 = v16;
          *(_DWORD *)a4 = v15[0];
          *(_DWORD *)(a4 + 4) = v8;
          *(_QWORD *)(a4 + 8) = v11;
          *(_DWORD *)(a4 + 16) = v12;
          *(_DWORD *)(a4 + 20) = v10;
          if (v9)
            goto LABEL_4;
        }
        if (v18 && *a3)
        {
          v14 = sub_234117B80(0xDu, "DataManagement");
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v15[0]) = 0;
            _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Spec violation! InvokeResponse has suppressResponse=true, and moreChunkedMessages=true", (uint8_t *)v15, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0xDu, 1);
          *(_DWORD *)a4 = 35;
          *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
          v13 = 326;
          goto LABEL_24;
        }
        *(_DWORD *)a4 = 0;
        *(_DWORD *)(a4 + 4) = v8;
        *(_QWORD *)(a4 + 8) = v11;
        *(_DWORD *)(a4 + 16) = v12;
        *(_DWORD *)(a4 + 20) = v10;
        sub_23411DFEC((uint64_t)v20, (_QWORD *)a4);
      }
    }
  }
LABEL_4:
  if (v24)
    sub_23411814C(v24);
}

uint64_t sub_2341FE154(uint64_t a1, __int128 *a2)
{
  int v3;
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(a1 + 403);
  result = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    if (result)
    {
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)result + 32))(result, a1, &v7);
    }
  }
  else if (result)
  {
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)result + 24))(result, a1, &v5);
  }
  return result;
}

_QWORD *sub_2341FE1C8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  __int16 v4;

  result = *(_QWORD **)(a1 + 384);
  if (result)
  {
    if (*(_BYTE *)(a1 + 403))
    {
      if (*(_QWORD *)(a1 + 32))
      {
        result = (*(_QWORD *(**)(char *__return_ptr))(*result + 48))((char *)&v3 + 6);
        if (BYTE6(v3))
        {
          while (1)
          {
            WORD2(v3) = 0;
            WORD2(v3) = *(_WORD *)sub_233CBCEC0((_BYTE *)&v3 + 6);
            (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), a1, (char *)&v3 + 4);
            result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 384) + 48))(&v3);
            BYTE6(v3) = v3;
            if (!(_BYTE)v3)
              break;
            v4 = WORD1(v3);
          }
        }
      }
    }
  }
  return result;
}

void sub_2341FE274(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  const char *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  __int128 v33;
  _OWORD v34[5];
  _OWORD v35[5];
  _QWORD v36[3];
  int v37[20];
  _OWORD v38[5];
  _BYTE v39[2];
  __int16 v40;
  _BYTE v41[75];
  unsigned __int8 v42[3];
  unsigned __int16 v43;
  uint64_t v44;
  __int128 buf;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v43 = 0;
  *(_WORD *)v42 = 0;
  sub_234104468((uint64_t)v41);
  v39[0] = 0;
  v6 = *(unsigned __int16 *)(a1 + 394);
  sub_23411E074((uint64_t)v38);
  sub_23411BC0C(a2, (uint64_t)v38, &buf);
  v8 = buf;
  v7 = DWORD1(buf);
  v9 = DWORD1(v46);
  if ((_DWORD)buf == 33)
  {
    sub_23411E074((uint64_t)&buf);
    sub_23411E074((uint64_t)v37);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BB9C(a2, (uint64_t)&buf, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BEE0((int *)&buf, (uint64_t)v37, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C298(v37, &v43, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C2A8(v37, (_DWORD *)&v44 + 1, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C0DC(v37, &v44, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    sub_23411C1E8((int *)&buf, (uint64_t)v41, v36);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v34[2] = v47;
    v34[3] = v48;
    v34[4] = v49;
    v34[0] = buf;
    v34[1] = v46;
    sub_2341FEB74((int *)v34, (uint64_t)v39, v6 > 1, a3);
    if (*(_DWORD *)a3)
      return;
    v14 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67110144;
      DWORD1(buf) = v43;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = HIWORD(HIDWORD(v44));
      HIWORD(buf) = 1024;
      LODWORD(v46) = WORD2(v44);
      WORD2(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 6) = WORD1(v44);
      WORD5(v46) = 1024;
      HIDWORD(v46) = (unsigned __int16)v44;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Received Command Response Data, Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xDu, 2);
    v10 = "src/app/CommandSender.cpp";
    v11 = 410;
    v13 = 1;
  }
  else
  {
    v10 = (const char *)*((_QWORD *)&buf + 1);
    v11 = v46;
    if ((_DWORD)buf)
    {
      v15 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf = __PAIR64__(v7, v8);
        *((_QWORD *)&buf + 1) = v10;
        *(_QWORD *)&v46 = __PAIR64__(v9, v11);
        v16 = sub_2341083CC((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Received malformed Command Response, err=%s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_QWORD *)&buf = __PAIR64__(v7, v8);
        *((_QWORD *)&buf + 1) = v10;
        *(_QWORD *)&v46 = __PAIR64__(v9, v11);
        sub_2341083CC((const char **)&buf, 1);
        sub_2341147D0(0xDu, 1);
      }
      *(_DWORD *)a3 = v8;
      *(_DWORD *)(a3 + 4) = v7;
      *(_QWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 16) = v11;
      *(_DWORD *)(a3 + 20) = v9;
      return;
    }
    sub_23411E074((uint64_t)&buf);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BEE0((int *)v38, (uint64_t)&buf, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C2A8((int *)&buf, (_DWORD *)&v44 + 1, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C0DC((int *)&buf, &v44, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411C298((int *)&buf, &v43, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    sub_23411E074((uint64_t)v37);
    sub_23411BC0C((int *)v38, (uint64_t)v37, v36);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411E42C((uint64_t)v37, v42, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v35[2] = v38[2];
    v35[3] = v38[3];
    v35[4] = v38[4];
    v35[0] = v38[0];
    v35[1] = v38[1];
    sub_2341FEB74((int *)v35, (uint64_t)v39, v6 > 1, a3);
    if (*(_DWORD *)a3)
      return;
    v12 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67110400;
      DWORD1(buf) = v43;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = HIWORD(HIDWORD(v44));
      HIWORD(buf) = 1024;
      LODWORD(v46) = WORD2(v44);
      WORD2(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 6) = WORD1(v44);
      WORD5(v46) = 1024;
      HIDWORD(v46) = (unsigned __int16)v44;
      LOWORD(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 2) = v42[0];
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Received Command Response Status for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X Status=0x%x", (uint8_t *)&buf, 0x26u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xDu, 2);
    v13 = 0;
  }
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v9;
  if (!v39[0])
    goto LABEL_60;
  v17 = *(_QWORD *)(a1 + 384);
  if (v17)
  {
    v18 = sub_233CBCEC0(v39);
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(&buf, v17, *(unsigned __int16 *)v18);
    v19 = buf;
    if ((_DWORD)buf)
    {
      v20 = DWORD1(buf);
      v21 = *((_QWORD *)&buf + 1);
      v22 = v46;
      v23 = *(_QWORD *)(a1 + 24);
      v32 = DWORD1(v46);
      if (v23 && *(_BYTE *)(v23 + 88))
      {
        sub_233CB4208(v23, &buf);
        v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)buf + 48))(buf);
        v26 = v25;
        (*(void (**)(_QWORD))(*(_QWORD *)buf + 32))(buf);
        v27 = v26;
      }
      else
      {
        v27 = 0;
        v24 = 0;
      }
      v28 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = *(unsigned __int16 *)sub_233CBCEC0(v39);
        *(_QWORD *)&buf = __PAIR64__(HIDWORD(v24), 67109888);
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v24;
        HIWORD(buf) = 1024;
        LODWORD(v46) = v27;
        WORD2(v46) = 1024;
        *(_DWORD *)((char *)&v46 + 6) = v29;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Received Unexpected Response from remote node <%08X%08X, %d>, commandRef=%u", (uint8_t *)&buf, 0x1Au);
      }
      if (sub_234114844(1u))
      {
        sub_233CBCEC0(v39);
        sub_2341147D0(0xDu, 1);
      }
      *(_DWORD *)a3 = v19;
      *(_DWORD *)(a3 + 4) = v20;
      *(_QWORD *)(a3 + 8) = v21;
      *(_DWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 20) = v32;
      return;
    }
    if (!v39[0])
    {
LABEL_60:
      if (v6 <= 1)
      {
        v30 = *(_QWORD *)(a1 + 384);
        if (v30)
        {
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30) == 1)
          {
            (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 384) + 48))(&buf);
            v39[0] = buf;
            if ((_BYTE)buf)
              v40 = WORD1(buf);
          }
        }
      }
    }
  }
  if (v42[0] && !*(_BYTE *)(a1 + 403))
  {
    sub_23411E5CC(v42, (uint64_t)&v33);
    sub_2341FE154(a1, &v33);
  }
  else
  {
    LOWORD(v37[0]) = v43;
    v37[1] = HIDWORD(v44);
    v37[2] = v44;
    *(_QWORD *)&buf = v37;
    *((_QWORD *)&buf + 1) = v42;
    v31 = v41;
    if (!v13)
      v31 = 0;
    *(_QWORD *)&v46 = v31;
    BYTE8(v46) = v39[0];
    if (v39[0])
      WORD5(v46) = v40;
    sub_2341FEC80(a1, &buf);
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
  *(_DWORD *)(a3 + 16) = 484;
}

_QWORD *sub_2341FEA2C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  __int128 v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_2341AD080(a2))
      v6 = 105;
    else
      v6 = 114;
    *(_DWORD *)buf = 67109376;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Time out! failed to receive invoke command response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_234114844(2u))
  {
    sub_2341AD080(a2);
    sub_2341147D0(0xDu, 2);
  }
  LODWORD(v8) = 50;
  *((_QWORD *)&v8 + 1) = "src/app/CommandSender.cpp";
  v9 = 343;
  sub_2341FE154(a1, &v8);
  return sub_2341FDB98(a1);
}

void sub_2341FEB74(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  __int16 v8;
  int v9;
  __int128 v10;
  int v11;
  __int16 v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  sub_23411AF4C(a1, &v12, &v9);
  v13 = v10;
  v14 = v11;
  if (v9)
  {
    if (v9 != 33)
    {
      *(_DWORD *)a4 = v9;
      *(_OWORD *)(a4 + 4) = v13;
      *(_DWORD *)(a4 + 20) = v14;
      return;
    }
    if (a3)
    {
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
      v7 = 45;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
      v7 = 48;
    }
  }
  else
  {
    v8 = v12;
    *(_BYTE *)a2 = 1;
    *(_WORD *)(a2 + 2) = v8;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/app/CommandSender.cpp";
    v7 = 52;
  }
  *(_DWORD *)(a4 + 16) = v7;
}

uint64_t sub_2341FEC80(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a1 + 403);
  result = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, a1, a2);
  }
  else if (result)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 16))(result, a1, *a2, a2[1], a2[2]);
  }
  return result;
}

uint64_t sub_2341FECC4@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;

  if (*(_BYTE *)(result + 398))
  {
    v3 = 489;
    v4 = 3;
  }
  else
  {
    v5 = (unsigned __int16)*a2;
    if (*a2)
    {
      if (*(_QWORD *)(result + 384))
      {
        *(_WORD *)(result + 396) = v5;
        *(_BYTE *)(result + 402) = (unsigned __int16)*a2 > 1u;
      }
      else if (v5 != 1)
      {
        v3 = 499;
        v4 = 108;
        goto LABEL_10;
      }
      v4 = 0;
      v3 = 501;
    }
    else
    {
      v3 = 490;
      v4 = 47;
    }
  }
LABEL_10:
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
  *(_DWORD *)(a3 + 16) = v3;
  return result;
}

void sub_2341FED40(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_2341FD378(a1, a4);
  if (*(_DWORD *)a4)
    return;
  if (*(_BYTE *)(a1 + 398) == 2)
  {
    v8 = *(unsigned __int8 *)(a1 + 402);
    if (*(_BYTE *)(a1 + 402))
      v8 = *(_BYTE *)(a1 + 403) != 0;
LABEL_7:
    if (!v8)
    {
      v9 = 513;
LABEL_9:
      v10 = 3;
LABEL_26:
      *(_DWORD *)a4 = v10;
      a4[1] = "src/app/CommandSender.cpp";
      *((_DWORD *)a4 + 4) = v9;
      return;
    }
    goto LABEL_10;
  }
  v8 = 0;
  if (*(_BYTE *)(a1 + 398))
    goto LABEL_7;
LABEL_10:
  if (*(unsigned __int16 *)(a1 + 394) >= *(unsigned __int16 *)(a1 + 396))
  {
    v9 = 515;
    v10 = 187;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 402))
  {
    if (!*(_QWORD *)(a1 + 384))
    {
      v9 = 519;
      goto LABEL_9;
    }
    if (!*a3)
    {
      v9 = 520;
      goto LABEL_25;
    }
    v11 = sub_233CBCEC0(a3);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 384) + 32))(*(_QWORD *)(a1 + 384), *(unsigned __int16 *)v11) & 1) != 0)
    {
      v9 = 522;
LABEL_25:
      v10 = 47;
      goto LABEL_26;
    }
  }
  v12 = sub_23411BD24(a1 + 88);
  *(_OWORD *)a4 = *(_OWORD *)(a1 + 88);
  a4[2] = *(_QWORD *)(a1 + 104);
  if (!*(_DWORD *)a4)
  {
    v13 = v12;
    v14 = sub_23411C238(v12);
    *(_OWORD *)a4 = *(_OWORD *)v13;
    a4[2] = *(_QWORD *)(v13 + 16);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_23411C4E0(v14, a2, (uint64_t)a4);
      if (!*(_DWORD *)a4)
      {
        if (!a3[4]
          || (*a4 = 0,
              a4[1] = 0,
              a4[2] = 0,
              sub_234107E40(*(char **)(v13 + 24), 1uLL, 21, (_DWORD *)(a1 + 236), (uint64_t)a4),
              !*(_DWORD *)a4))
        {
          sub_2341FD770(a1, 1);
          v10 = 0;
          v9 = 539;
          goto LABEL_26;
        }
      }
    }
  }
}

void sub_2341FEEF0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  int v7;

  if (!*(_BYTE *)(a1 + 402))
    goto LABEL_6;
  if (!*(_QWORD *)(a1 + 384))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
    v7 = 546;
    goto LABEL_9;
  }
  if (!a2[4])
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
    v7 = 547;
    goto LABEL_9;
  }
  v6 = sub_233CBCEC0(a2 + 4);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 384) + 32))(*(_QWORD *)(a1 + 384), *(unsigned __int16 *)v6))
  {
LABEL_6:
    sub_2341FEFC4(a1, a2, a3);
    return;
  }
  *(_DWORD *)a3 = 47;
  *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
  v7 = 549;
LABEL_9:
  *(_DWORD *)(a3 + 16) = v7;
}

void sub_2341FEFC4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  _QWORD v10[3];

  if (*(_BYTE *)(a1 + 398) != 1)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
    v9 = 576;
LABEL_14:
    *(_DWORD *)(a3 + 16) = v9;
    return;
  }
  if (!a2[8]
    || (*(_QWORD *)a3 = 0,
        *(_QWORD *)(a3 + 8) = 0,
        *(_QWORD *)(a3 + 16) = 0,
        sub_234107FB0(*(char **)(a1 + 152), *(_DWORD *)(a1 + 236), a3),
        !*(_DWORD *)a3))
  {
    if (!a2[4]
      || (*(_QWORD *)a3 = 0,
          *(_QWORD *)(a3 + 8) = 0,
          *(_QWORD *)(a3 + 16) = 0,
          v6 = sub_233CBCEC0(a2 + 4),
          sub_23411C288(a1 + 128, *(unsigned __int16 *)v6, a3),
          !*(_DWORD *)a3))
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411ACD8(a1 + 128, a3);
      if (!*(_DWORD *)a3)
      {
        sub_2341FD770(a1, 2);
        ++*(_WORD *)(a1 + 394);
        v7 = *(_QWORD *)(a1 + 384);
        if (v7 && a2[4])
        {
          v8 = sub_233CBCEC0(a2 + 4);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v10, v7, *(unsigned __int16 *)v8);
        }
        if (*a2)
          sub_2341FF2AC(a1, a2);
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/app/CommandSender.cpp";
        v9 = 605;
        goto LABEL_14;
      }
    }
  }
}

void sub_2341FF118(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  int v11;
  unsigned __int8 v12[2];
  __int16 v13;
  __int16 v15;
  char v16;
  _BYTE v17[2];
  __int16 v18;
  char v19;
  _BYTE v20[80];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_2341FD378(a1, a5);
  if (!*(_DWORD *)a5)
  {
    sub_2341FF350(v20, a1);
    v17[0] = *(_BYTE *)(a4 + 4);
    if (v17[0])
      v18 = *(_WORD *)(a4 + 6);
    v19 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_2341FED40(a1, a2, v17, a5);
    if (*(_DWORD *)a5)
      goto LABEL_16;
    if (*(_BYTE *)(a1 + 398) == 1 && (v10 = *(_QWORD *)(a1 + 152)) != 0)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v10, 1);
      if (*(_DWORD *)a5)
        goto LABEL_16;
      v12[0] = *(_BYTE *)a4;
      if (v12[0])
        v13 = *(_WORD *)(a4 + 2);
      if (*(_BYTE *)(a4 + 4))
        v15 = *(_WORD *)(a4 + 6);
      v16 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      sub_2341FEEF0(a1, v12, (uint64_t)a5);
      if (*(_DWORD *)a5)
        goto LABEL_16;
      v20[73] = 0;
      *(_DWORD *)a5 = 0;
      a5[1] = "src/app/CommandSender.cpp";
      v11 = 569;
    }
    else
    {
      *(_DWORD *)a5 = 3;
      a5[1] = "src/app/CommandSender.cpp";
      v11 = 564;
    }
    *((_DWORD *)a5 + 4) = v11;
LABEL_16:
    sub_2341FF3CC((uint64_t)v20);
  }
}

uint64_t sub_2341FF284(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 398) == 1)
    return *(_QWORD *)(a1 + 152);
  else
    return 0;
}

uint64_t sub_2341FF2A0(uint64_t result)
{
  *(_BYTE *)(result + 73) = 0;
  return result;
}

_BYTE *sub_2341FF2AC(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *result;
  int v5;
  int v6;
  _WORD *v7;
  unsigned int v8;

  v5 = *(unsigned __int8 *)(a1 + 232);
  result = (_BYTE *)(a1 + 232);
  v6 = *a2;
  if (v5)
  {
    if (!*a2)
      return result;
    v7 = sub_233CBCEC0(result);
    result = sub_233C05D98(a2);
    v8 = *(unsigned __int16 *)result;
    if (v8 >= (unsigned __int16)*v7)
      LOWORD(v8) = *v7;
    *(_BYTE *)(a1 + 232) = 1;
  }
  else
  {
    *result = v6;
    if (!v6)
      return result;
    LOWORD(v8) = *((_WORD *)a2 + 1);
  }
  *(_WORD *)(a1 + 234) = v8;
  return result;
}

uint64_t sub_2341FF320(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 392);
}

const char *sub_2341FF328(uint64_t a1)
{
  unint64_t v1;

  v1 = *(char *)(a1 + 398);
  if (v1 > 6)
    return "N/A";
  else
    return off_250515E48[v1];
}

_BYTE *sub_2341FF350(_BYTE *a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = a2;
  sub_234106C48((uint64_t)(a1 + 8));
  a1[73] = 0;
  v4 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 401)
    && (*(unsigned __int8 *)(v4 + 398) | 2) == 2
    && !*(_DWORD *)(v4 + 88)
    && !*(_DWORD *)(v4 + 48))
  {
    v5 = *(__int128 **)(v4 + 72);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[3];
    v3[2] = v5[2];
    v3[3] = v8;
    *v3 = v6;
    v3[1] = v7;
    a1[72] = *(_BYTE *)(v4 + 398);
    a1[73] = 1;
  }
  return a1;
}

uint64_t sub_2341FF3CC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint8_t v9[16];

  if (*(_BYTE *)(a1 + 73) && *(_BYTE *)(*(_QWORD *)a1 + 398) == 1)
  {
    v2 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Rolling back response", v9, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0xDu, 3);
    sub_23411C030(*(_QWORD *)a1 + 88);
    v3 = *(_QWORD *)a1 + 48;
    v4 = *(_OWORD **)(*(_QWORD *)a1 + 72);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a1 + 24);
    v7 = *(_OWORD *)(a1 + 56);
    v4[2] = *(_OWORD *)(a1 + 40);
    v4[3] = v7;
    *v4 = v5;
    v4[1] = v6;
    sub_23411C030(v3);
    sub_2341FD770(*(_QWORD *)a1, *(_BYTE *)(a1 + 72));
    *(_BYTE *)(a1 + 73) = 0;
  }
  return a1;
}

uint64_t sub_2341FF4B8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_2341FF500(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  NSObject *v9;
  char *v10;
  int v11;
  _BYTE v12[4];
  int v13;
  const char *v14[2];
  int v15;
  const char *v16[2];
  int v17;
  uint8_t buf[4];
  _BYTE v19[18];
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) & 1) == 0)
  {
    v9 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v16[0]) = 3;
      v16[1] = "src/app/DeviceProxy.cpp";
      v17 = 43;
      v10 = sub_2341083CC(v16, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v19 = v10;
      *(_WORD *)&v19[8] = 2080;
      *(_QWORD *)&v19[10] = "src/app/DeviceProxy.cpp";
      v20 = 1024;
      v21 = 43;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_234114844(1u))
    {
      LODWORD(v14[0]) = 3;
      v14[1] = "src/app/DeviceProxy.cpp";
      v15 = 43;
      sub_2341083CC(v14, 1);
      sub_2341147D0(0, 1);
    }
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/app/DeviceProxy.cpp";
    v11 = 43;
    goto LABEL_13;
  }
  if (!a2)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/app/DeviceProxy.cpp";
    v11 = 44;
LABEL_13:
    *(_DWORD *)(a4 + 16) = v11;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(buf, a1);
  v8 = (uint64_t *)sub_233C25EA4(buf);
  v12[0] = *(_BYTE *)a3;
  if (v12[0])
    v13 = *(_DWORD *)(a3 + 4);
  sub_2341FD918(a2, v8, (uint64_t)v12, a4);
  if (buf[0])
    (*(void (**)(_QWORD))(**(_QWORD **)&v19[4] + 32))(*(_QWORD *)&v19[4]);
}

_QWORD *sub_2341FF6E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 48))(&v7);
  v9[0] = v7;
  if ((_BYTE)v7)
  {
    v10 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v6 = (uint64_t *)sub_233CB6588(v9);
    result = (_QWORD *)sub_2341CD3C0(*v6);
    *a2 = result + 26;
    a2[1] = 16;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/app/DeviceProxy.cpp";
    *(_DWORD *)(a3 + 16) = 56;
    if (v9[0])
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/DeviceProxy.cpp";
    *(_DWORD *)(a3 + 16) = 53;
  }
  return result;
}

void sub_2341FF7B8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/app/DeviceProxy.h";
  *(_DWORD *)(a1 + 16) = 56;
}

uint64_t sub_2341FF7D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_250515F00;
  *(_QWORD *)(a1 + 8) = &unk_250515FB8;
  *(_QWORD *)(a1 + 16) = &unk_250515FF8;
  *(_QWORD *)(a1 + 24) = &unk_250516020;
  *(_QWORD *)(a1 + 32) = &unk_250516058;
  *(_QWORD *)(a1 + 40) = &unk_250516090;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &unk_2505160D0;
  *(_QWORD *)(a1 + 64) = &unk_250516100;
  *(_QWORD *)(a1 + 72) = &unk_250516138;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = a1 + 104;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 168) = a1 + 160;
  *(_QWORD *)(a1 + 176) = a1 + 160;
  v2 = a1 + 1352;
  v3 = 200;
  *(_BYTE *)(a1 + 192) = 0;
  do
  {
    sub_2342040AC(a1 + v3);
    v3 += 288;
  }
  while (v3 != 1352);
  sub_234209EE4(v2, a1);
  *(_OWORD *)(a1 + 1489) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_QWORD *)(a1 + 1488) = a1 + 1472;
  *(_QWORD *)(a1 + 1480) = a1 + 1472;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_QWORD *)(a1 + 1544) = a1 + 1528;
  *(_QWORD *)(a1 + 1536) = a1 + 1528;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1600) = a1 + 1584;
  *(_QWORD *)(a1 + 1592) = a1 + 1584;
  *(_BYTE *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_QWORD *)(a1 + 1656) = a1 + 1640;
  *(_QWORD *)(a1 + 1648) = a1 + 1640;
  *(_DWORD *)(a1 + 1700) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  *(_BYTE *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  return a1;
}

void *sub_2341FF930()
{
  if (!byte_2542537F8)
  {
    byte_2542537F8 = 1;
    sub_2341FF7D8((uint64_t)&unk_254253128);
  }
  return &unk_254253128;
}

_QWORD *sub_2341FF968@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  _BYTE v11[24];

  if (!a3)
  {
    v10 = 79;
LABEL_10:
    v9 = 47;
    goto LABEL_11;
  }
  if (!a2)
  {
    v10 = 80;
    goto LABEL_10;
  }
  if (!a4)
  {
    v10 = 81;
    goto LABEL_10;
  }
  v8 = (uint64_t)result;
  result[10] = a2;
  result[214] = a3;
  result[215] = a5;
  result[216] = a6;
  result[181] = a4;
  a7[1] = 0;
  a7[2] = 0;
  *a7 = 0;
  result = (_QWORD *)sub_2341E68C4(a3, (uint64_t)(result + 5), (uint64_t)a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    result = sub_2341AE980(*(int **)(v8 + 80), 0x10000, v8, (uint64_t)a7);
    if (!*(_DWORD *)a7)
    {
      sub_234209F10(v8 + 1352, (uint64_t)v11);
      result = sub_23411E69C();
      v9 = 0;
      v10 = 96;
LABEL_11:
      *(_DWORD *)a7 = v9;
      a7[1] = "src/app/InteractionModelEngine.cpp";
      *((_DWORD *)a7 + 4) = v10;
    }
  }
  return result;
}

int *sub_2341FFA3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *result;
  _QWORD v7[3];
  _BYTE v8[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 88) + 24);
  (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v2 + 72))(v2, sub_2341FFBB0, a1);
  sub_234214F20();
  sub_234115DFC((_QWORD *)(a1 + 104), a1 + 88, (unsigned int (*)(uint64_t))sub_234204318);
  v7[0] = a1;
  sub_234115DFC((_QWORD *)(a1 + 160), (uint64_t)v7, (unsigned int (*)(uint64_t))sub_234204330);
  sub_234115DFC((_QWORD *)(a1 + 160), a1 + 144, (unsigned int (*)(uint64_t))sub_234204350);
  sub_234115DFC((_QWORD *)(a1 + 1640), a1 + 1624, (unsigned int (*)(uint64_t))sub_234204368);
  sub_2341B1F64("src/app/InteractionModelEngine.cpp", 299);
  v8[0] = 0;
  LOBYTE(v7[0]) = 0;
  sub_2342001A4((_QWORD *)a1, v8, v7);
  v3 = *(_QWORD *)(a1 + 1680);
  if (v3)
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 192);
      *(_QWORD *)(v3 + 192) = 0;
      *(_QWORD *)(v3 + 200) = 0;
      v3 = v4;
    }
    while (v4);
  }
  v5 = 0;
  *(_QWORD *)(a1 + 1680) = 0;
  do
  {
    if (*(_DWORD *)(a1 + v5 + 432))
      sub_2340FA68C(a1 + v5 + 200);
    v5 += 288;
  }
  while (v5 != 1152);
  sub_234209F30(a1 + 1352);
  sub_234115DFC((_QWORD *)(a1 + 1472), a1 + 1456, (unsigned int (*)(uint64_t))sub_234204380);
  sub_234115DFC((_QWORD *)(a1 + 1528), a1 + 1512, (unsigned int (*)(uint64_t))sub_234204398);
  sub_234115DFC((_QWORD *)(a1 + 1584), a1 + 1568, (unsigned int (*)(uint64_t))sub_2342043B0);
  result = sub_2341AEA98(*(int **)(a1 + 80), 0x10000, (uint64_t)v7);
  *(_QWORD *)(a1 + 1720) = 0;
  return result;
}

void sub_2341FFBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  char v9;
  NSObject *v10;
  NSObject *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16[2];
  void *v17[2];
  uint8_t buf[8];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    *(_BYTE *)(a2 + 1704) = 0;
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)v17 = 0u;
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 1728) + 16))(*(_QWORD *)(a2 + 1728));
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v14))
    {
      v4 = 0;
LABEL_4:
      v12 = v4;
      do
      {
        *(_QWORD *)buf = &v14;
        if (sub_234115DFC((_QWORD *)(a2 + 1640), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_234204E80) != 1)
        {
          v6 = sub_234114774(0x90uLL);
          if (v6)
          {
            v7 = v6;
            sub_234211798((uint64_t)v6);
            sub_234211B54(v8, *(_QWORD *)(a2 + 1720), &v14, (uint64_t)buf);
            if (*(_DWORD *)buf)
            {
              v11 = sub_234117B80(0x23u, "InteractionModel");
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v15;
                _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Failed to ResumeSubscription 0x%x", buf, 8u);
              }
              if (sub_234114844(2u))
                sub_2341147D0(0x23u, 2);
              v13 = 0;
              sub_234204E98((int)&v13, v7);
            }
            else
            {
              v9 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v14);
              v4 = 1;
              if ((v9 & 1) != 0)
                goto LABEL_4;
            }
          }
          else
          {
            v10 = sub_234117B80(0x23u, "InteractionModel");
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Failed to create SubscriptionResumptionSessionEstablisher", buf, 2u);
            }
            if (sub_234114844(2u))
              sub_2341147D0(0x23u, 2);
          }
          goto LABEL_18;
        }
        v5 = sub_234117B80(0x23u, "InteractionModel");
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v15;
          _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Skip resuming live subscriptionId %u", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(0x23u, 2);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 24))(v3, &v14) & 1) != 0);
      if ((v12 & 1) != 0)
        goto LABEL_18;
    }
    *(_DWORD *)(a2 + 1700) = 0;
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v17[1] = 0;
    if (v17[0])
    {
      j__free(v17[0]);
      v17[0] = 0;
    }
    v16[1] = 0;
    if (v16[0])
      j__free(v16[0]);
  }
}

_QWORD *sub_2341FFEC8(_QWORD *a1)
{
  _BYTE v3[22];
  _BYTE v4[2];

  sub_2341B1F64("src/app/InteractionModelEngine.cpp", 299);
  v4[0] = 0;
  v3[0] = 0;
  return sub_2342001A4(a1, v4, v3);
}

uint64_t sub_2341FFF14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1624);
}

uint64_t sub_2341FFF1C(uint64_t a1, char a2)
{
  unsigned int v3;
  _BYTE v4[8];
  unsigned int *v5;

  v3 = 0;
  v4[0] = a2;
  v5 = &v3;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_2342043C8);
  return v3;
}

uint64_t sub_2341FFF5C(uint64_t a1, char a2, char a3)
{
  unsigned int v4;
  _BYTE v5[8];
  unsigned int *v6;

  v4 = 0;
  v5[0] = a2;
  v5[1] = a3;
  v6 = &v4;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_2342043F0);
  return v4;
}

uint64_t sub_2341FFFA0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int *v6;
  uint64_t *v7;

  if (*(_QWORD *)(a1 + 1624) <= (unint64_t)a2)
    return 0;
  v4 = 0;
  v5 = a2;
  v3 = 0;
  v6 = &v4;
  v7 = &v3;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_234204454);
  return v3;
}

uint64_t sub_2341FFFF8(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = 0;
  v3 = 0;
  while (!*(_DWORD *)(a1 + v2 + 432))
  {
LABEL_5:
    v2 += 288;
    if (v2 == 1152)
      return 0;
  }
  if (v3 != a2)
  {
    ++v3;
    goto LABEL_5;
  }
  return a1 + v2 + 200;
}

uint64_t sub_234200038(uint64_t result)
{
  uint64_t v1;
  uint64_t i;

  v1 = result;
  LODWORD(result) = 0;
  for (i = 432; i != 1584; i += 288)
  {
    if (*(_DWORD *)(v1 + i))
      result = (result + 1);
    else
      result = result;
  }
  return result;
}

uint64_t sub_234200060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;

  result = sub_2341B1F64("src/app/InteractionModelEngine.cpp", 269);
  v9 = *(_QWORD *)(a1 + 1680);
  if (v9)
  {
    while (1)
    {
      result = v9;
      v9 = *(_QWORD *)(v9 + 192);
      if (*(_BYTE *)(result + 80) == 1
        && *(_DWORD *)(result + 60) == a3
        && *(unsigned __int8 *)(result + 72) == *(unsigned __int8 *)(a2 + 8)
        && *(_QWORD *)(result + 64) == *(_QWORD *)a2)
      {
        break;
      }
      if (!v9)
        goto LABEL_7;
    }
    LODWORD(v12) = 0;
    *((_QWORD *)&v12 + 1) = "src/app/InteractionModelEngine.cpp";
    v13 = 277;
    result = (uint64_t)sub_23420DCEC(result, &v12, 1);
    v11 = 0;
    v10 = 278;
  }
  else
  {
LABEL_7:
    v10 = 283;
    v11 = 16;
  }
  *(_DWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_23420013C(_QWORD *a1, char a2, uint64_t a3)
{
  char v7[8];
  uint64_t v8;
  _BYTE v9[2];

  sub_2341B1F64("src/app/InteractionModelEngine.cpp", 288);
  v9[0] = 1;
  v9[1] = a2;
  v7[0] = 1;
  v8 = a3;
  return sub_2342001A4(a1, v9, v7);
}

_QWORD *sub_2342001A4(_QWORD *result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  __int128 v9;
  int v10;

  v3 = result[210];
  while (v3)
  {
    v6 = v3;
    v3 = *(_QWORD *)(v3 + 192);
    if (*(_BYTE *)(v6 + 80) == 1)
    {
      if (*a2)
      {
        result = sub_233C27DCC(a2);
        v7 = *(unsigned __int8 *)result == *(unsigned __int8 *)(v6 + 72);
      }
      else
      {
        v7 = 1;
      }
      if (*a3)
      {
        result = sub_233C25EA4(a3);
        v8 = *result == *(_QWORD *)(v6 + 64);
      }
      else
      {
        v8 = 1;
      }
      if (v7 && v8)
      {
        LODWORD(v9) = 0;
        *((_QWORD *)&v9 + 1) = "src/app/InteractionModelEngine.cpp";
        v10 = 318;
        result = sub_23420DCEC(v6, &v9, 1);
      }
    }
  }
  return result;
}

_QWORD *sub_234200288(_QWORD *a1, char a2)
{
  _BYTE v5[22];
  _BYTE v6[2];

  sub_2341B1F64("src/app/InteractionModelEngine.cpp", 293);
  v6[0] = 1;
  v6[1] = a2;
  v5[0] = 0;
  return sub_2342001A4(a1, v6, v5);
}

uint64_t sub_2342002E0(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 v4;
  _BYTE v5[8];
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = 0;
  v5[0] = a2;
  v6 = a3;
  v7 = &v4;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_234204488);
  return v4;
}

uint64_t sub_234200320(uint64_t a1, char a2, uint64_t a3)
{
  unsigned __int8 v4;
  _BYTE v5[8];
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = 0;
  v5[0] = a2;
  v6 = a3;
  v7 = &v4;
  sub_234115DFC((_QWORD *)(a1 + 1584), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_234204488);
  return v4;
}

uint64_t sub_234200360(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12[2];
  void *v13[2];

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1728) + 16))(*(_QWORD *)(a1 + 1728));
  if (!v5)
    return 1;
  v6 = v5;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)v13 = 0u;
  do
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v10);
    if (!(_DWORD)v7)
      break;
  }
  while (v11 != a2 || v10 != a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v13[1] = 0;
  if (v13[0])
  {
    j__free(v13[0]);
    v13[0] = 0;
  }
  v12[1] = 0;
  if (v12[0])
    j__free(v12[0]);
  return v7;
}

uint64_t sub_234200420(uint64_t a1, int a2, uint64_t a3)
{
  return sub_234200360(a1 - 56, a2, a3);
}

void sub_234200428(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1 + 88, a2);
}

void sub_234200430(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1 + 72, a2);
}

void sub_234200438()
{
  NSObject *v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  const char *v6;

  v0 = sub_234117B80(0x1Bu, "Support");
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v2 = "src/app/InteractionModelEngine.cpp";
    v3 = 1024;
    v4 = 391;
    v5 = 2080;
    v6 = "false";
    _os_log_impl(&dword_233BF3000, v0, OS_LOG_TYPE_ERROR, "VerifyOrDie failure at %s:%d: %s", buf, 0x1Cu);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0x1Bu, 1);
  abort();
}

void sub_2342004FC()
{
  sub_234200438();
}

uint64_t sub_234200508(uint64_t a1, void (***a2)(_QWORD))
{
  int v3;

  if (*(void (****)(_QWORD))(a1 + 1368) == a2)
    v3 = *(_DWORD *)(a1 + 1360) - 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 1360) = v3;
  sub_2341EC388(a1 + 1624, a2);
  return sub_234200550(a1);
}

uint64_t sub_234200550(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  NSObject *v3;
  int v4;
  uint8_t buf[24];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 1704))
  {
    v1 = result;
    result = sub_23420069C(result);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v1 + 1704) = 1;
      v2 = *(_DWORD *)(v1 + 1700);
      if (v2 <= 0xA)
        sub_234115890(v2);
      (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + 80) + 88) + 24)
                                                    + 40))(buf);
      ++*(_DWORD *)(v1 + 1700);
      v3 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_DWORD *)(v1 + 1700);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v4;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Schedule subscription resumption when failing to establish session, Retries: %u", buf, 8u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        return sub_2341147D0(0x23u, 2);
    }
  }
  return result;
}

uint64_t sub_234200694(uint64_t a1, void (***a2)(_QWORD))
{
  return sub_234200508(a1 - 32, a2);
}

uint64_t sub_23420069C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[32];
  void *v8[2];
  void *v9[2];
  _BYTE *v10;

  v2 = *(_QWORD *)(a1 + 1728);
  if (!v2)
    return 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v8 = 0u;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v4 = (_QWORD *)(a1 + 1640);
  do
  {
    v5 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 24))(v3, v7);
    if (!(_DWORD)v5)
      break;
    v10 = v7;
  }
  while (sub_234115DFC(v4, (uint64_t)&v10, (unsigned int (*)(uint64_t))sub_234204F10) == 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  v9[1] = 0;
  if (v9[0])
  {
    j__free(v9[0]);
    v9[0] = 0;
  }
  v8[1] = 0;
  if (v8[0])
    j__free(v8[0]);
  return v5;
}

uint64_t sub_23420077C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 1700);
  if (v1 <= 0xA)
    return 300 * sub_234115890(v1) + 300;
  else
    return 21600;
}

uint64_t sub_2342007B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  _QWORD *v8;
  NSObject *v10;
  uint64_t v11;
  uint8_t buf[16];

  v11 = a1;
  *(_QWORD *)buf = a1;
  v8 = sub_234200884((unint64_t *)(a1 + 88), buf, &v11);
  if (v8)
  {
    sub_2340F401C((uint64_t)v8, a2, a4, a5);
    return 0;
  }
  else
  {
    v10 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "no resource for Invoke interaction", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x23u, 2);
    return 156;
  }
}

_QWORD *sub_234200884(unint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;

  v6 = sub_234114774(0x2C0uLL);
  v7 = v6;
  if (v6)
  {
    if (*a2)
      v8 = *a2 + 16;
    else
      v8 = 0;
    v9 = *a3;
    *v6 = &off_250502890;
    v6[1] = &unk_250502928;
    if (v9)
      v10 = v9 + 24;
    else
      v10 = 0;
    v6[2] = &unk_250502960;
    v6[3] = 0;
    v6[4] = v8;
    v6[5] = v10;
    sub_234211F30(v6 + 6, v6 + 1);
    v7[84] = &off_2504F0DD0;
    v7[85] = v7;
    v7[86] = 0;
    *((_WORD *)v7 + 348) = 0;
    v11 = sub_234114774(0x18uLL);
    if (v11)
    {
      *v11 = v7;
      v11[1] = a1 + 2;
      v11[2] = 0;
      v11[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v11;
      a1[4] = (unint64_t)v11;
      v12 = a1[1];
      v13 = *a1 + 1;
      *a1 = v13;
      if (v13 > v12)
        a1[1] = v13;
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

void sub_23420097C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  int v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD v38[2];
  int v39;
  int v40;
  _BYTE v41[80];

  sub_234104468((uint64_t)v41);
  sub_23411E0BC(a3, (uint64_t)v41);
  *a4 = 0;
  *a5 = 0;
  sub_234105EE4((uint64_t)v41, 256, v38);
  v12 = v38[0];
  if (LODWORD(v38[0]))
  {
LABEL_2:
    v13 = HIDWORD(v38[0]);
    v14 = (const char *)v38[1];
    v15 = v39;
    v16 = v40;
    v17 = v12 == 33;
    if (v12 == 33)
    {
      v12 = 0;
      v14 = "src/app/InteractionModelEngine.cpp";
    }
    *(_DWORD *)a6 = v12;
    *(_DWORD *)(a6 + 4) = v13;
    *(_QWORD *)(a6 + 8) = v14;
    if (v17)
      v18 = 518;
    else
      v18 = v15;
    *(_DWORD *)(a6 + 16) = v18;
    *(_DWORD *)(a6 + 20) = v16;
  }
  else
  {
    while (1)
    {
      sub_23411E074((uint64_t)v38);
      v36 = -1;
      v35 = -1;
      v37 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      sub_23411DF0C((uint64_t)v38, (uint64_t)v41, a6);
      if (*(_DWORD *)a6)
        break;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      sub_23411B1D4((int *)v38, (int *)&v35, a6);
      if (*(_DWORD *)a6)
        break;
      if ((unsigned __int16)v36 == 0xFFFF || (_DWORD)v35 == -1 || HIDWORD(v35) == -1)
      {
        sub_2340FC514((uint64_t)&v31, *(_QWORD *)(a1 + 1736), (uint64_t)&v35);
        while (v31)
        {
          v23 = v33;
          v22 = (const char *)v34;
          v29 = v33;
          v30 = v32;
          v24 = sub_2341D512C();
          v26 = sub_234035670(v23, v22, v25);
          sub_2341D4A50(v24, a2, (uint64_t)&v29, v26, (uint64_t)&v27);
          if (!v27)
            goto LABEL_16;
          sub_2340FC560((uint64_t)&v31);
        }
      }
      else
      {
        LOWORD(v27) = v36;
        v28 = v35;
        BYTE2(v27) = 0;
        if (sub_233CBA028((unsigned __int16 *)&v27))
        {
          v29 = v28;
          v30 = v27;
          v19 = sub_2341D512C();
          v21 = sub_234035670(v28, (const char *)HIDWORD(v28), v20);
          sub_2341D4A50(v19, a2, (uint64_t)&v29, v21, (uint64_t)&v31);
          if (!(_DWORD)v31)
LABEL_16:
            *a4 = 1;
        }
      }
      ++*a5;
      sub_234105EE4((uint64_t)v41, 256, v38);
      v12 = v38[0];
      if (LODWORD(v38[0]))
        goto LABEL_2;
    }
  }
}

uint64_t sub_234200BAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1736);
}

void sub_234200BB4(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned __int16 v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  _QWORD v23[2];
  int v24;
  int v25;
  _BYTE v26[72];

  sub_234104468((uint64_t)v26);
  sub_23411E0BC(a2, (uint64_t)v26);
  *a3 = 0;
  *a4 = 0;
  sub_234105EE4((uint64_t)v26, 256, v23);
  v10 = v23[0];
  if (LODWORD(v23[0]))
  {
LABEL_2:
    v11 = HIDWORD(v23[0]);
    v12 = (const char *)v23[1];
    v13 = v24;
    v14 = v25;
    v15 = v10 == 33;
    if (v10 == 33)
    {
      v10 = 0;
      v12 = "src/app/InteractionModelEngine.cpp";
    }
    *(_DWORD *)a5 = v10;
    *(_DWORD *)(a5 + 4) = v11;
    *(_QWORD *)(a5 + 8) = v12;
    if (v15)
      v16 = 664;
    else
      v16 = v13;
    *(_DWORD *)(a5 + 16) = v16;
    *(_DWORD *)(a5 + 20) = v14;
  }
  else
  {
    while (1)
    {
      sub_23411E074((uint64_t)v23);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      sub_23411DF0C((uint64_t)v23, (uint64_t)v26, a5);
      if (*(_DWORD *)a5)
        break;
      v20 = -1;
      v21 = -1;
      v22 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      sub_23411D058((int *)v23, (uint64_t)&v20, a5);
      if (*(_DWORD *)a5)
        break;
      ++*a4;
      if (!*a3)
      {
        if (v21 == 0xFFFF)
        {
          v17 = 0;
          do
          {
            if (sub_233D546A0() <= v17)
              break;
            if ((sub_233D5467C(v17) & 1) != 0)
            {
              v18 = sub_233D54EC4(v17);
              v19 = sub_234200D5C(v18, (int *)&v20, a1);
              *a3 = v19;
            }
            else
            {
              v19 = *a3;
            }
            ++v17;
          }
          while (!v19);
        }
        else
        {
          *a3 = sub_234200D5C(v21, (int *)&v20, a1);
        }
      }
      sub_234105EE4((uint64_t)v26, 256, v23);
      v10 = v23[0];
      if (LODWORD(v23[0]))
        goto LABEL_2;
    }
  }
}

uint64_t sub_234200D5C(__int16 a1, int *a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = *a2;
  if (v6 == -1)
  {
    result = sub_233D54BA8(a1);
    if (result)
    {
      v8 = result;
      if (*(_BYTE *)(result + 8))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          result = sub_23420412C(a1, (int *)(*(_QWORD *)v8 + v9), (uint64_t)a2, a3);
          if ((result & 1) != 0)
            break;
          ++v10;
          v9 += 64;
        }
        while (v10 < *(unsigned __int8 *)(v8 + 8));
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    result = sub_233D54700(a1, v6);
    if (result)
      return sub_23420412C(a1, (int *)result, (uint64_t)a2, a3);
  }
  return result;
}

uint64_t sub_234200E1C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BOOL4 a5)
{
  _BOOL4 v5;
  NSObject *v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  void *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[10];
  __int128 v32;
  uint64_t v33;
  __int16 v34;
  _QWORD v35[10];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[10];
  char v39;
  BOOL v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE buf[72];
  uint64_t v45;
  uint64_t v46;

  v5 = a5;
  v46 = *MEMORY[0x24BDAC8D0];
  v41 = a2;
  v40 = a5;
  v9 = sub_234117B80(0x23u, "InteractionModel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = "Read";
    if (v5)
      v10 = "Subscribe";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "Received %s request", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x23u, 3);
  if (v5)
  {
    sub_234104468((uint64_t)buf);
    v45 = 0;
    v39 = 1;
    sub_233CB4208(a2, v38);
    v11 = *(unsigned __int8 *)(v38[0] + 24);
    (*(void (**)(uint64_t))(*(_QWORD *)v38[0] + 32))(v38[0]);
    if (v11)
    {
      sub_234118648(*a4);
      v38[0] = *a4;
      sub_233C11670((uint64_t)buf, v38);
      if (v38[0])
        sub_23411814C(v38[0]);
      sub_23411E074((uint64_t)v38);
      sub_23411DF84((uint64_t)v38, (uint64_t)buf, v35);
      if (!LODWORD(v35[0]))
      {
        sub_23411AE58((int *)v38, &v39, v35);
        if (!LODWORD(v35[0]))
        {
          if (!v39)
          {
            v35[0] = a2;
            sub_234115DFC(a1 + 205, (uint64_t)v35, (unsigned int (*)(uint64_t))sub_234204570);
          }
          v36 = 0;
          v37 = 0;
          sub_23411E074((uint64_t)v35);
          v34 = 0;
          v32 = 0uLL;
          v33 = 0;
          sub_23411EAD4((int *)v38, (uint64_t)v35, &v32);
          if ((_DWORD)v32 == 33
            || !(_DWORD)v32
            && (sub_233CB4208(a2, &v42),
                v12 = sub_2341CD3C0(v42),
                (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v12 + 64))(v31),
                (*(void (**)(_QWORD))(*(_QWORD *)v42 + 32))(v42),
                sub_23420097C((uint64_t)a1, (uint64_t)v31, (uint64_t)v35, (_BYTE *)&v34 + 1, &v37, (uint64_t)&v42),
                v32 = v42,
                v33 = v43,
                !(_DWORD)v42))
          {
            sub_23411E074((uint64_t)v31);
            sub_23411E148((int *)v38, (uint64_t)v31, &v42);
            v32 = v42;
            v33 = v43;
            v5 = 1;
            if ((_DWORD)v42 != 33)
            {
              if ((_DWORD)v42)
                goto LABEL_32;
              sub_233CB4208(a2, &v29);
              v13 = sub_2341CD3C0(v29);
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v13 + 64))(&v42);
              (*(void (**)(_QWORD))(*(_QWORD *)v29 + 32))(v29);
              sub_234200BB4((uint64_t)&v42, (uint64_t)v31, &v34, &v36, (uint64_t)&v29);
              v32 = v29;
              v33 = v30;
              if ((_DWORD)v29)
                goto LABEL_32;
              v5 = v36 == 0;
            }
            if (v37 || !v5)
            {
              if (HIBYTE(v34) | v34)
              {
                sub_233CB4208(a2, &v42);
                sub_2342016C8((uint64_t)a1, *(_BYTE *)(v42 + 24));
                (*(void (**)(_QWORD))(*(_QWORD *)v42 + 32))(v42);
                v5 = 0;
                goto LABEL_32;
              }
              v23 = sub_234117B80(0x23u, "InteractionModel");
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                sub_233CB4208(a2, &v29);
                v24 = *(unsigned __int8 *)(v29 + 24);
                sub_233CB4208(a2, &v28);
                v25 = *(_DWORD *)(sub_2341CD3C0(v28) + 76);
                sub_233CB4208(a2, &v27);
                v26 = *(_QWORD *)(sub_2341CD3C0(v27) + 72);
                LODWORD(v42) = 67109632;
                DWORD1(v42) = v24;
                WORD4(v42) = 1024;
                *(_DWORD *)((char *)&v42 + 10) = v25;
                HIWORD(v42) = 1024;
                LODWORD(v43) = v26;
                _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Subscription from [%u:%08X%08X] has no access at all. Rejecting request.", (uint8_t *)&v42, 0x14u);
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
                (*(void (**)(_QWORD))(*(_QWORD *)v29 + 32))(v29);
              }
              v5 = 1;
              if (!sub_234114844(1u))
                goto LABEL_32;
            }
            else
            {
              v14 = sub_234117B80(0x23u, "InteractionModel");
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
              {
                sub_233CB4208(a2, &v29);
                v15 = *(unsigned __int8 *)(v29 + 24);
                sub_233CB4208(a2, &v28);
                v16 = *(_DWORD *)(sub_2341CD3C0(v28) + 76);
                sub_233CB4208(a2, &v27);
                v17 = *(_QWORD *)(sub_2341CD3C0(v27) + 72);
                LODWORD(v42) = 67109632;
                DWORD1(v42) = v15;
                WORD4(v42) = 1024;
                *(_DWORD *)((char *)&v42 + 10) = v16;
                HIWORD(v42) = 1024;
                LODWORD(v43) = v17;
                _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Subscription from [%u:%08X%08X] has no attribute or event paths. Rejecting request.", (uint8_t *)&v42, 0x14u);
                (*(void (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
                (*(void (**)(_QWORD))(*(_QWORD *)v29 + 32))(v29);
              }
              v5 = 1;
              if (!sub_234114844(1u))
                goto LABEL_32;
            }
            sub_233CB4208(a2, &v42);
            sub_233CB4208(a2, &v29);
            sub_2341CD3C0(v29);
            sub_233CB4208(a2, &v28);
            sub_2341CD3C0(v28);
            v5 = 1;
            sub_2341147D0(0x23u, 1);
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
            (*(void (**)(_QWORD))(*(_QWORD *)v29 + 32))(v29);
            (*(void (**)(_QWORD))(*(_QWORD *)v42 + 32))(v42);
LABEL_32:
            LOBYTE(v18) = 0x80;
            goto LABEL_33;
          }
        }
      }
LABEL_31:
      v5 = 1;
      goto LABEL_32;
    }
    LOBYTE(v18) = 126;
  }
  else
  {
    sub_234104468((uint64_t)buf);
    v45 = 0;
    sub_234118648(*a4);
    v38[0] = *a4;
    sub_233C11670((uint64_t)buf, v38);
    if (v38[0])
      sub_23411814C(v38[0]);
    sub_23411E074((uint64_t)v38);
    sub_23411DF84((uint64_t)v38, (uint64_t)buf, v35);
    if (LODWORD(v35[0]))
      goto LABEL_31;
    v36 = 0;
    v37 = 0;
    sub_23411E074((uint64_t)v35);
    v32 = 0uLL;
    v33 = 0;
    sub_23411E0D8((int *)v38, (uint64_t)v35, &v32);
    if ((_DWORD)v32 != 33)
    {
      if ((_DWORD)v32)
        goto LABEL_31;
      sub_234104468((uint64_t)v31);
      sub_23411E0BC((uint64_t)v35, (uint64_t)v31);
      sub_234106910((uint64_t)v31, &v37, 0, &v42);
      if ((_DWORD)v42)
        goto LABEL_31;
    }
    sub_23411E074((uint64_t)v31);
    sub_23411DAB8((int *)v38, (uint64_t)v31, &v42);
    v32 = v42;
    v33 = v43;
    if ((_DWORD)v42 != 33)
    {
      if ((_DWORD)v42)
        goto LABEL_31;
      sub_234104468((uint64_t)&v42);
      sub_23411E0BC((uint64_t)v31, (uint64_t)&v42);
      sub_234106910((uint64_t)&v42, &v36, 0, &v29);
      if ((_DWORD)v29)
        goto LABEL_31;
    }
    sub_233CB4208(a2, &v42);
    v18 = sub_2342018B8((uint64_t)a1, *(unsigned __int8 *)(v42 + 24), v37, v36);
    (*(void (**)(_QWORD))(*(_QWORD *)v42 + 32))(v42);
    v5 = v18 != 0;
    if (!v18)
      LOBYTE(v18) = 0x80;
  }
LABEL_33:
  if (v45)
    sub_23411814C(v45);
  if (!v5)
  {
    *(_QWORD *)buf = a1[217];
    v19 = sub_234201B2C(a1 + 203, (uint64_t)a1, &v41, (char *)&v40, a1 + 181, (uint64_t *)buf);
    if (v19)
    {
      sub_2340F7820((uint64_t)v19, a4);
      LOBYTE(v18) = 0;
    }
    else
    {
      v20 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        if (v40)
          v21 = "Subscribe";
        else
          v21 = "Read";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v21;
        _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "no resource for %s interaction", buf, 0xCu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x23u, 2);
      LOBYTE(v18) = -119;
    }
  }
  return v18;
}

uint64_t sub_2342016C8(uint64_t a1, char a2)
{
  _QWORD *v4;
  uint64_t *v5;
  BOOL v6;
  char v7;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v18 = 0;
  v19 = 0;
  v17 = 0;
  v13 = &v19;
  v14 = &v18;
  v4 = (_QWORD *)(a1 + 1640);
  v15 = &v17;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_234204214);
  if (v17 == -1)
  {
    do
    {
      v5 = *(uint64_t **)(a1 + 1712);
      sub_233C0BD8C(v5, (uint64_t)&v13);
      if (v15 == v16)
        break;
      v6 = v16 == (uint64_t *)16 && v15 == (uint64_t *)16;
      v7 = 0;
      if (!v6 || v13 != v5)
      {
LABEL_10:
        v9 = sub_233C06A04((uint64_t *)&v13);
        if (v17 == -1)
        {
          if (v7)
          {
            v7 = 1;
          }
          else
          {
            v7 = sub_234202698(a1, *(_BYTE *)(v9 + 137), 0);
            v18 = 0;
            v19 = 0;
            v17 = 0;
            v20[0] = &v19;
            v20[1] = &v18;
            v20[2] = &v17;
            sub_234115DFC(v4, (uint64_t)v20, (unsigned int (*)(uint64_t))sub_234204214);
          }
          v10 = v15;
          while (1)
          {
            if (v10 < v16)
            {
              v10 = (uint64_t *)((char *)v10 + 1);
              v15 = v10;
            }
            if (v10 == v16)
              break;
            if (BYTE1(v13[19 * (_QWORD)v10 + 17])
              && (unint64_t)(v13[19 * (_QWORD)v10] - 1) < 0xFFFFFFEFFFFFFFFFLL)
            {
              if (v16 != (uint64_t *)16 || v10 != (uint64_t *)16 || v13 != v5)
                goto LABEL_10;
              break;
            }
          }
        }
      }
    }
    while (v7);
    if (v17 == -1)
    {
      do
      {
        v11 = sub_234202698(a1, a2, 1);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        v13 = &v19;
        v14 = &v18;
        v15 = &v17;
        sub_234115DFC(v4, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_234204214);
      }
      while (v17 == -1 && (v11 & 1) != 0);
      if ((v11 & 1) == 0)
        sub_23425E884();
    }
  }
  return 1;
}

uint64_t sub_2342018B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD v27[3];

  v22 = a2;
  v20 = 0;
  v21 = 0;
  v23 = &v21;
  v24 = &v20;
  v25 = &v19;
  v8 = (_QWORD *)(a1 + 1640);
  v19 = 0;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_234204298);
  if (v19 != -1)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 1712) + 2642) == 16 && a2 == 0)
    return 156;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v23 = (uint64_t *)&v22;
  v24 = &v18;
  v25 = &v17;
  v26 = &v16;
  sub_234115DFC(v8, (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_234204A40);
  if ((unint64_t)(v18 + a3) > 9)
    return 156;
  result = 156;
  if ((unint64_t)(v17 + a4) <= 9 && !v16)
  {
    while (1)
    {
      v11 = sub_234202868(a1, 0);
      v20 = 0;
      v21 = 0;
      v19 = 0;
      v23 = &v21;
      v24 = &v20;
      v25 = &v19;
      sub_234115DFC(v8, (uint64_t)&v23, (unsigned int (*)(uint64_t))sub_234204298);
      if (v19 != -1)
        return 0;
      v12 = *(_QWORD *)(a1 + 1712);
      if (*(_BYTE *)(v12 + 2642) != 16 || (v11 & 1) == 0)
      {
        v13 = (uint64_t)sub_233C0BD8C(*(_QWORD **)(a1 + 1712), (uint64_t)&v23);
        if (v25 != v26)
        {
          if (v26 != (uint64_t *)16 || v25 != (uint64_t *)16)
            goto LABEL_22;
          v14 = (uint64_t)v23;
LABEL_19:
          if (v14 != v12)
          {
LABEL_22:
            v13 = sub_233C06A04((uint64_t *)&v23);
            if ((_BYTE)v11)
            {
              v11 = 1;
            }
            else
            {
              v11 = sub_234202868(a1, *(_BYTE *)(v13 + 137));
              v20 = 0;
              v21 = 0;
              v19 = 0;
              v27[0] = &v21;
              v27[1] = &v20;
              v27[2] = &v19;
              v13 = sub_234115DFC(v8, (uint64_t)v27, (unsigned int (*)(uint64_t))sub_234204298);
            }
            if (v19 == -1)
            {
              v15 = (unint64_t)v25;
              v14 = (uint64_t)v23;
              while (1)
              {
                if (v15 < (unint64_t)v26)
                  v25 = (uint64_t *)++v15;
                if ((uint64_t *)v15 == v26)
                  break;
                if (BYTE1(v23[19 * v15 + 17]) && (unint64_t)(v23[19 * v15] - 1) < 0xFFFFFFEFFFFFFFFFLL)
                {
                  if (v26 == (uint64_t *)16 && v15 == 16)
                    goto LABEL_19;
                  goto LABEL_22;
                }
              }
            }
          }
        }
        if (!v11)
        {
          if (v19 == -1)
            sub_23425E8F4(v13);
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_234201B2C(unint64_t *a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  void *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  v12 = sub_234114774(0xD8uLL);
  v13 = v12;
  if (v12)
  {
    sub_2340F70DC((uint64_t)v12, a2 + 32, *a3, *a4, *a5, *a6);
    v14 = sub_234114774(0x18uLL);
    if (v14)
    {
      *v14 = v13;
      v14[1] = a1 + 2;
      v14[2] = 0;
      v14[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v14;
      a1[4] = (unint64_t)v14;
      v15 = a1[1];
      v16 = *a1 + 1;
      *a1 = v16;
      if (v16 > v15)
        a1[1] = v16;
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

uint64_t sub_234201BF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v16[32];

  v9 = sub_234117B80(0x23u, "InteractionModel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "Received Write request", v16, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0x23u, 3);
  v10 = 0;
  while (1)
  {
    v11 = a1 + v10;
    if (!*(_DWORD *)(a1 + v10 + 432))
      break;
    v10 += 288;
    if (v10 == 1152)
    {
      v12 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "no resource for write interaction", v16, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x23u, 2);
      return 156;
    }
  }
  v13 = a1 + 72;
  v14 = v11 + 200;
  sub_2340FA504(v11 + 200, v13, (uint64_t)v16);
  if (*(_DWORD *)v16)
    return 156;
  return sub_2340FACDC(v14, a2, a4, a5);
}

uint64_t sub_234201D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE *v11;
  uint64_t result;
  NSObject *v13;
  uint8_t v14[8];
  uint64_t v15;

  v15 = a1;
  v11 = sub_234201E68((unint64_t *)(a1 + 144), &v15);
  if (v11)
  {
    *a5 = 0;
    *(_QWORD *)(a2 + 40) = v11;
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3, a4);
  }
  else
  {
    v13 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "no resource for Timed interaction", v14, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x23u, 2);
    *a5 = -100;
    *(_DWORD *)a6 = 11;
    *(_QWORD *)(a6 + 8) = "src/app/InteractionModelEngine.cpp";
    *(_DWORD *)(a6 + 16) = 884;
  }
  return result;
}

_BYTE *sub_234201E68(unint64_t *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;

  v4 = sub_234114774(0x20uLL);
  v5 = v4;
  if (v4)
  {
    if (*a2)
      v6 = *a2 + 64;
    else
      v6 = 0;
    *(_QWORD *)v4 = &unk_250516398;
    v4[8] = 0;
    *((_QWORD *)v4 + 2) = v6;
    v7 = sub_234114774(0x18uLL);
    if (v7)
    {
      *v7 = v5;
      v7[1] = a1 + 2;
      v7[2] = 0;
      v7[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v7;
      a1[4] = (unint64_t)v7;
      v8 = a1[1];
      v9 = *a1 + 1;
      *a1 = v9;
      if (v9 > v8)
        a1[1] = v9;
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t sub_234201F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17[10];
  _BYTE v18[72];
  uint64_t v19;
  uint8_t buf[24];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v18);
  v19 = 0;
  sub_234118648(*a4);
  v17[0] = *a4;
  sub_233C11670((uint64_t)v18, v17);
  if (v17[0])
    sub_23411814C(v17[0]);
  sub_23411E074((uint64_t)v17);
  sub_23411DF84((uint64_t)v17, (uint64_t)v18, buf);
  if (*(_DWORD *)buf
    || (v16 = 0, sub_23411AC14((int *)v17, &v16, buf), *(_DWORD *)buf)
    || (sub_23411DFEC((uint64_t)v17, buf), *(_DWORD *)buf))
  {
    v7 = 128;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 1680);
    if (!v9)
      goto LABEL_24;
    v10 = 0;
    do
    {
      sub_233CB4208(a2, buf);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 48))(*(_QWORD *)buf);
      v13 = v12;
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
      if (*(unsigned __int8 *)(v9 + 72) == v13 && *(_QWORD *)(v9 + 64) == v11)
      {
        sub_234211568(v9, (uint64_t)"unsolicited message");
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 40) + 112))(*(_QWORD *)(v9 + 40), v9);
        if (*(_BYTE *)(v9 + 48) == 3 && *(_DWORD *)(v9 + 60) == v16)
        {
          v14 = v10 ? v10 : v9;
          if (*(_BYTE *)(v9 + 80) == 1)
            v10 = v14;
        }
      }
      v9 = *(_QWORD *)(v9 + 192);
    }
    while (v9);
    if (v10)
    {
      sub_23420F808(v10, a2, a4);
      v7 = 0;
    }
    else
    {
LABEL_24:
      v15 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v16;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "Received report with invalid subscriptionId %u", buf, 8u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x23u, 3);
      v7 = 125;
    }
  }
  if (v19)
    sub_23411814C(v19);
  return v7;
}

uint64_t sub_234202188@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a3 + 16) = 958;
  return result;
}

void sub_2342021AC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  _BOOL4 v26;
  unsigned int v27;
  unsigned __int8 v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v28 = 1;
  if (sub_2340FAB58(a2))
  {
    if (*((_WORD *)a3 + 2)
      || ((v17 = *a3, v17 != 8) ? (v18 = v17 == 6) : (v18 = 1),
          !v18 ? (v19 = 0) : (v19 = 1),
          *((_WORD *)a3 + 3) != 1 || (v19 & 1) == 0))
    {
      v11 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *a3;
        *(_DWORD *)buf = 67109120;
        v30 = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Msg type %d not supported for group message", buf, 8u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x23u, 2);
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/app/InteractionModelEngine.cpp";
      v13 = 974;
      goto LABEL_40;
    }
  }
  else if (*((_WORD *)a3 + 2))
  {
    goto LABEL_9;
  }
  v20 = *((unsigned __int16 *)a3 + 3);
  v21 = *a3;
  if (v20 == 1 && v21 == 8)
  {
    v27 = sub_2342007B0(a1, a2, v10, a4, 0);
    goto LABEL_37;
  }
  if (v20 == 1 && v21 == 2)
  {
    v23 = (_QWORD *)a1;
    v24 = a2;
    v25 = a4;
    v26 = 0;
LABEL_36:
    v27 = sub_234200E1C(v23, v24, v10, v25, v26);
    goto LABEL_37;
  }
  if (v20 == 1 && v21 == 6)
  {
    v27 = sub_234201BF0(a1, a2, v10, a4, 0);
    goto LABEL_37;
  }
  if (v20 == 1 && v21 == 3)
  {
    v23 = (_QWORD *)a1;
    v24 = a2;
    v25 = a4;
    v26 = 1;
    goto LABEL_36;
  }
  if (v20 != 1 || v21 != 5)
  {
    if (v20 == 1 && v21 == 10)
    {
      sub_234201D58(a1, a2, (uint64_t)a3, (uint64_t)a4, &v28, (uint64_t)buf);
      v16 = v28;
      if (!v28)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_9:
    v14 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *a3;
      *(_DWORD *)buf = 67109120;
      v30 = v15;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Msg type %d not supported", buf, 8u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x23u, 2);
    v16 = 128;
    goto LABEL_38;
  }
  v27 = sub_234201F18(a1, a2, v10, a4);
LABEL_37:
  v16 = v27;
  if (!v27)
  {
LABEL_39:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/InteractionModelEngine.cpp";
    v13 = 1015;
LABEL_40:
    *(_DWORD *)(a5 + 16) = v13;
    return;
  }
LABEL_38:
  if (sub_2340FAB58(a2))
    goto LABEL_39;
  sub_234215204(v16, a2, 0, a5);
}

void sub_2342024B8(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_2342021AC(a1 - 8, a2, a3, a4, a5);
}

uint64_t sub_2342024C0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  uint64_t result;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(0x23u, "InteractionModel");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4 = *(unsigned __int16 *)(a2 + 112);
    if (sub_2341AD080(a2))
      v5 = 105;
    else
      v5 = 114;
    *(_DWORD *)buf = 67109376;
    v8 = v4;
    v9 = 1024;
    v10 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Time out! Failed to receive IM response from Exchange: %u%c", buf, 0xEu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    sub_2341AD080(a2);
    return sub_2341147D0(0x23u, 1);
  }
  return result;
}

uint64_t sub_2342025D8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 1680);
  if (result)
  {
    v5 = a3;
    do
    {
      v6 = *(_QWORD *)(result + 192);
      if (*(_QWORD *)(result + 64) == a2 && *(unsigned __int8 *)(result + 72) == v5)
        sub_23420EC68(result);
      result = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_23420262C(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;

  result = *(_QWORD *)(a1 + 1680);
  if (result)
  {
    v7 = a3;
    do
    {
      v8 = *(_QWORD *)(result + 192);
      if (*(_QWORD *)(result + 64) == a2 && *(unsigned __int8 *)(result + 72) == v7)
        sub_23420ED68(result, a4);
      result = v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_234202688(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 192) = *(_QWORD *)(result + 1680);
  *(_QWORD *)(result + 1680) = a2;
  return result;
}

uint64_t sub_234202698(uint64_t a1, char a2, char a3)
{
  unsigned int v3;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD v18[8];
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v17 = a2;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1712) + 2642);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (!v3)
    return 0;
  v12 = 0;
  v13 = 0x90 / v3;
  v10 = 0;
  v11 = 0;
  v18[0] = &v17;
  v18[1] = &v16;
  v18[2] = &v15;
  v18[3] = &v14;
  v18[4] = &v12;
  v18[5] = &v13;
  v18[6] = &v11;
  v18[7] = &v10;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)v18, (unsigned int (*)(uint64_t))sub_23420476C);
  if (!v12 || (a3 & 1) == 0 && v16 <= v13 && v15 <= v13 && v14 <= 0x30 / v3)
    return 0;
  v5 = *(_DWORD *)(v12 + 72);
  v6 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_2340FA384(v12);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v7 + 64))(v18);
    *(_DWORD *)buf = 67109376;
    v20 = LOBYTE(v18[0]);
    v21 = 1024;
    v22 = v5;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Evicting Subscription ID %u:0x%x", buf, 0xEu);
  }
  if (sub_234114844(2u))
  {
    v8 = sub_2340FA384(v12);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 64))(v18);
    sub_2341147D0(0xDu, 2);
  }
  sub_2340F7380(v12, 0);
  return 1;
}

uint64_t sub_234202868(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD v11[7];

  v10 = a2;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  v11[0] = &v10;
  v11[1] = &v9;
  v11[2] = &v8;
  v11[3] = &v7;
  v11[4] = &v6;
  v11[5] = &v5;
  v11[6] = &v4;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)v11, (unsigned int (*)(uint64_t))sub_2342048D8);
  result = v6;
  if (v6)
  {
    if (v9 <= 9 && v8 <= 9 && v7 <= 1 && (v10 || *(_BYTE *)(*(_QWORD *)(a1 + 1712) + 2642) != 16))
    {
      return 0;
    }
    else
    {
      sub_2340F7380(v6, 0);
      return 1;
    }
  }
  return result;
}

uint64_t sub_234202934(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(result + 1680);
  if (v2 == a2)
  {
    v4 = (_QWORD *)(result + 1680);
  }
  else
  {
    do
    {
      if (!v2)
        sub_23425E988(result);
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 192);
    }
    while (v2 != a2);
    v4 = (_QWORD *)(v3 + 192);
  }
  *v4 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  return result;
}

uint64_t sub_234202980(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 1680);
  if (!v1)
    return 0;
  result = 0;
  do
  {
    ++result;
    v1 = *(_QWORD *)(v1 + 192);
  }
  while (v1);
  return result;
}

BOOL sub_2342029A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(a1 + 1680);
  do
  {
    v3 = *v2;
    v2 = (_QWORD *)(*v2 + 192);
  }
  while (v3 != a2 && v3 != 0);
  return v3 != 0;
}

uint64_t sub_2342029C8(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v6 = 0;
  while (1)
  {
    v7 = a1 + v6 + 200;
    v8 = v7 == a2 || *(_DWORD *)(a1 + v6 + 432) == 0;
    if (!v8 && sub_234202A34(v7, a3))
      break;
    v6 += 288;
    if (v6 == 1152)
      return 0;
  }
  return 1;
}

BOOL sub_234202A34(uint64_t a1, unsigned __int16 *a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v5;

  v3 = *(unsigned __int8 *)(a1 + 240);
  v2 = (_BYTE *)(a1 + 240);
  if (v3 && (v5 = sub_2340F3688(v2), *(unsigned __int16 *)v5 == *a2) && *((_DWORD *)v5 + 1) == *((_DWORD *)a2 + 1))
    return *((_DWORD *)v5 + 2) == *((_DWORD *)a2 + 2);
  else
    return 0;
}

uint64_t sub_234202A94(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v6 = 0;
  while (1)
  {
    v7 = a1 + v6 + 128;
    v8 = v7 == a2 || *(_DWORD *)(a1 + v6 + 360) == 0;
    if (!v8 && sub_234202A34(v7, a3))
      break;
    v6 += 288;
    if (v6 == 1152)
      return 0;
  }
  return 1;
}

void sub_234202B00(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a2;
  if (v3)
  {
    v4 = a1 + 1456;
    do
    {
      v5 = (_QWORD *)v3[2];
      sub_234202DBC(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_234202B48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  result = (uint64_t)sub_234204B04((unint64_t *)(a1 + 1456));
  if (result)
  {
    v8 = *a3;
    *(_DWORD *)(result + 8) = *((_DWORD *)a3 + 2);
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 16) = *a2;
    *a2 = result;
    *a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    a4[2] = 1669;
  }
  else
  {
    v9 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "AttributePath pool full", v10, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x23u, 1);
    *(_DWORD *)a4 = 1480;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1548;
  }
  return result;
}

void sub_234202C44(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD *v10;

  v2 = *a2;
  if (*a2)
  {
    v4 = 0;
    v5 = a1 + 1456;
    do
    {
      v6 = *((unsigned __int16 *)v2 + 4);
      if (v6 == 0xFFFF
        || *v2 == -1
        || (v7 = v2[1], v7 == -1)
        || !sub_233FF883C(v6, *v2, v7)
        || (v8 = (uint64_t)*a2) == 0)
      {
LABEL_14:
        v9 = (_DWORD **)(v2 + 4);
      }
      else
      {
        while ((_DWORD *)v8 == v2
             || *(__int16 *)(v8 + 8) != -1 && *(_DWORD *)v8 != -1 && *(_DWORD *)(v8 + 4) != -1
             || !sub_234202D58(v8, (uint64_t)v2))
        {
          v8 = *(_QWORD *)(v8 + 16);
          if (!v8)
            goto LABEL_14;
        }
        v10 = (_DWORD *)*((_QWORD *)v2 + 2);
        if (v2 == *a2)
        {
          *a2 = v10;
          sub_234202DBC(v5, v2);
          v2 = v4;
          v9 = a2;
        }
        else
        {
          *((_QWORD *)v4 + 2) = v10;
          v9 = (_DWORD **)(v4 + 4);
          sub_234202DBC(v5, v2);
          v2 = v4;
        }
      }
      v4 = v2;
      v2 = *v9;
    }
    while (*v9);
  }
}

BOOL sub_234202D58(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  int v7;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 != 0xFFFF && v2 != *(unsigned __int16 *)(a2 + 8))
    return 0;
  if (*(_DWORD *)a1 != -1 && *(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 != -1 && v5 != *(_DWORD *)(a2 + 4))
    return 0;
  v7 = *(unsigned __int16 *)(a1 + 10);
  return v7 == 0xFFFF || v7 == *(unsigned __int16 *)(a2 + 10);
}

void sub_234202DBC(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425C1D4(0);
    v5 = v4;
    *v4 = 0;
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

void sub_234202E40(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a2;
  if (v3)
  {
    v4 = a1 + 1512;
    do
    {
      v5 = (_QWORD *)v3[2];
      sub_234202DBC(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_234202E88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];

  result = (uint64_t)sub_234204B90((unint64_t *)(a1 + 1512));
  if (result)
  {
    v8 = *a3;
    *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a3 + 7);
    *(_QWORD *)result = v8;
    *(_QWORD *)(result + 16) = *a2;
    *a2 = result;
    *a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    a4[2] = 1669;
  }
  else
  {
    v9 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "EventPath pool full", v10, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x23u, 1);
    *(_DWORD *)a4 = 1480;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1620;
  }
  return result;
}

void sub_234202F84(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *a2;
  if (v3)
  {
    v4 = a1 + 1568;
    do
    {
      v5 = (_QWORD *)v3[2];
      sub_234202DBC(v4, v3);
      v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

uint64_t sub_234202FCC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  NSObject *v6;
  uint8_t v7[16];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (uint64_t)sub_23420308C(a2, a3, (unint64_t *)(a1 + 1568), (uint64_t)a4);
  if (*(_DWORD *)a4 == 11)
  {
    v6 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "DataVersionFilter pool full, ignore this filter", v7, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x23u, 1);
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/InteractionModelEngine.cpp";
    *((_DWORD *)a4 + 4) = 1637;
  }
  return result;
}

_QWORD *sub_23420308C@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v8;
  int v9;
  int v10;

  result = sub_234204C1C(a3);
  if (result)
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    v8 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)result + 4) = v8;
    if (v8)
      *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    v9 = 0;
    *((_WORD *)result + 6) = *(_WORD *)(a2 + 12);
    result[2] = *a1;
    *a1 = result;
    v10 = 1669;
  }
  else
  {
    v10 = 1664;
    v9 = 11;
  }
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_23420311C(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  char v10;

  v7 = sub_23421519C(*a3, *((_DWORD *)a3 + 1));
  if (!v7)
    return sub_233C01D78((uint64_t)a3, a4, a2);
  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v10 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v9);
  if (!v10)
    return sub_233C01D78((uint64_t)a3, a4, a2);
  return result;
}

uint64_t sub_234203198(uint64_t a1, unsigned __int16 *a2)
{
  return sub_233CB9F24(a2);
}

uint64_t sub_2342031A0(uint64_t a1, unsigned __int16 *a2)
{
  return sub_233CB9F24(a2);
}

void sub_2342031A8(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1 + 144, a2);
}

void sub_2342031B0(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1 + 80, a2);
}

void sub_2342031B8(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  BOOL v10;
  _BOOL8 v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE v15[24];

  *(_QWORD *)(a3 + 40) = a1 + 8;
  sub_2341EC388(a1 + 144, a2);
  if (*(_WORD *)(a4 + 4))
    v10 = 0;
  else
    v10 = *(unsigned __int16 *)(a4 + 6) == 1;
  if (!v10 || *(_BYTE *)a4 != 8)
    sub_23425EAB0(v9);
  v12 = sub_2340FAB58(a3);
  if (v12)
    sub_23425EA1C(v12);
  v14 = sub_2342007B0(a1, a3, v13, a5, 1);
  if (v14)
    sub_234215204(v14, a3, 0, (uint64_t)v15);
}

void sub_234203258(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  sub_2342031B8(a1 - 64, a2, a3, a4, a5);
}

void sub_234203260(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  BOOL v10;
  _BOOL8 v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE v15[24];

  *(_QWORD *)(a3 + 40) = a1 + 8;
  sub_2341EC388(a1 + 144, a2);
  if (*(_WORD *)(a4 + 4))
    v10 = 0;
  else
    v10 = *(unsigned __int16 *)(a4 + 6) == 1;
  if (!v10 || *(_BYTE *)a4 != 6)
    sub_23425EBD8(v9);
  v12 = sub_2340FAB58(a3);
  if (v12)
    sub_23425EB44(v12);
  v14 = sub_234201BF0(a1, a3, v13, a5, 1);
  if (v14)
    sub_234215204(v14, a3, 0, (uint64_t)v15);
}

void sub_234203300(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, uint64_t a4, _QWORD *a5)
{
  sub_234203260(a1 - 64, a2, a3, a4, a5);
}

BOOL sub_234203308(uint64_t a1)
{
  char v2;

  return sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_234204CB0) == 1;
}

uint64_t sub_23420333C()
{
  return 0xFFFFLL;
}

uint64_t sub_234203344(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = 0;
  v3 = &v2;
  sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)&v3, (unsigned int (*)(uint64_t))sub_234204CC0);
  return v2;
}

uint64_t sub_23420337C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t i;
  NSObject *v7;
  uint64_t j;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __int128 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  buf[0] = a3;
  result = sub_234115DFC((_QWORD *)(a1 + 1640), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_234204CF8);
  for (i = *(_QWORD *)(a1 + 1680); i; i = *(_QWORD *)(i + 192))
  {
    if (*(unsigned __int8 *)(i + 72) == a3)
    {
      v7 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v15 = a3;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Fabric removed, deleting obsolete read client with FabricIndex: %u", buf, 8u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0x23u, 2);
      LODWORD(v12) = 161;
      *((_QWORD *)&v12 + 1) = "src/app/InteractionModelEngine.cpp";
      v13 = 1808;
      result = (uint64_t)sub_23420DCEC(i, &v12, 0);
    }
  }
  for (j = 0; j != 1152; j += 288)
  {
    v9 = a1 + j;
    if (*(_DWORD *)(a1 + j + 432))
    {
      v10 = v9 + 200;
      result = sub_2340FB390(v9 + 200);
      if ((_DWORD)result == a3)
      {
        v11 = sub_234117B80(0x23u, "InteractionModel");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v15 = a3;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Fabric removed, deleting obsolete write handler with FabricIndex: %u", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(0x23u, 2);
        result = sub_2340FA68C(v10);
      }
    }
  }
  return result;
}

uint64_t sub_2342035A4(uint64_t a1, uint64_t a2, int a3)
{
  return sub_23420337C(a1 - 40, a2, a3);
}

void sub_2342035AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  _BYTE v12[20];
  unsigned __int16 v13;
  void *v14[2];
  void *v15[2];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 1728);
  if (!v4)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
    v5 = 1831;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 1704))
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
    v5 = 1833;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v5;
    return;
  }
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_BYTE *)(a1 + 1696) = 0;
  v7 = 0;
  if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v12))
  {
    LOWORD(v7) = 0;
    do
    {
      ++*(_BYTE *)(a1 + 1696);
      if ((unsigned __int16)v7 <= v13)
        v7 = v13;
      else
        v7 = (unsigned __int16)v7;
    }
    while (((*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 24))(v6, v12) & 1) != 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  if (*(_BYTE *)(a1 + 1696))
  {
    *(_BYTE *)(a1 + 1704) = 1;
    v8 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(char *)(a1 + 1696);
      *(_DWORD *)buf = 67109376;
      v17 = v9;
      v18 = 1024;
      v19 = v7;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Resuming %d subscriptions in %u seconds", buf, 0xEu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x23u, 2);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 88) + 24);
    (*(void (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v10 + 40))(v10, 1000 * v7, sub_2341FFBB0, a1);
    if (*(_DWORD *)a2)
      goto LABEL_25;
  }
  else
  {
    v11 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "No subscriptions to resume", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x23u, 2);
  }
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/app/InteractionModelEngine.cpp";
  *(_DWORD *)(a2 + 16) = 1872;
LABEL_25:
  v15[1] = 0;
  if (v15[0])
  {
    j__free(v15[0]);
    v15[0] = 0;
  }
  v14[1] = 0;
  if (v14[0])
    j__free(v14[0]);
}

uint64_t sub_234203850(uint64_t result)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = *(char *)(result + 1696);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v3 < 0 == v2)
    *(_BYTE *)(result + 1696) = v3;
  return result;
}

_QWORD *sub_234203864(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250515F00;
  a1[1] = &unk_250515FB8;
  a1[2] = &unk_250515FF8;
  a1[3] = &unk_250516020;
  a1[4] = &unk_250516058;
  a1[5] = &unk_250516090;
  a1[7] = &unk_2505160D0;
  a1[8] = &unk_250516100;
  a1[9] = &unk_250516138;
  sub_2341B4298(a1 + 203);
  sub_2341B4298(a1 + 196);
  sub_2341B4298(a1 + 189);
  sub_2341B4298(a1 + 182);
  sub_2341B4298(a1 + 172);
  v2 = 144;
  do
  {
    a1[v2 - 10] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 10];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 18);
  sub_2341B4298(a1 + 11);
  return a1;
}

void sub_234203934(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250515F00;
  a1[1] = &unk_250515FB8;
  a1[2] = &unk_250515FF8;
  a1[3] = &unk_250516020;
  a1[4] = &unk_250516058;
  a1[5] = &unk_250516090;
  a1[7] = &unk_2505160D0;
  a1[8] = &unk_250516100;
  a1[9] = &unk_250516138;
  sub_2341B4298(a1 + 203);
  sub_2341B4298(a1 + 196);
  sub_2341B4298(a1 + 189);
  sub_2341B4298(a1 + 182);
  sub_2341B4298(a1 + 172);
  v2 = 144;
  do
  {
    a1[v2 - 10] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 10];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 18);
  sub_2341B4298(a1 + 11);
  JUMPOUT(0x23493E704);
}

uint64_t sub_234203A14(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1688);
}

_QWORD *sub_234203A1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 1) = &off_250515F00;
  *a1 = &unk_250515FB8;
  a1[1] = &unk_250515FF8;
  a1[2] = &unk_250516020;
  a1[3] = &unk_250516058;
  a1[4] = &unk_250516090;
  a1[6] = &unk_2505160D0;
  a1[7] = &unk_250516100;
  a1[8] = &unk_250516138;
  sub_2341B4298(a1 + 202);
  sub_2341B4298(a1 + 195);
  sub_2341B4298(a1 + 188);
  sub_2341B4298(a1 + 181);
  sub_2341B4298(a1 + 171);
  v2 = 144;
  do
  {
    a1[v2 - 11] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 11];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 17);
  return sub_2341B4298(a1 + 10);
}

void sub_234203AE4(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 8));
}

_QWORD *sub_234203AEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 2) = &off_250515F00;
  *(a1 - 1) = &unk_250515FB8;
  *a1 = &unk_250515FF8;
  a1[1] = &unk_250516020;
  a1[2] = &unk_250516058;
  a1[3] = &unk_250516090;
  a1[5] = &unk_2505160D0;
  a1[6] = &unk_250516100;
  a1[7] = &unk_250516138;
  sub_2341B4298(a1 + 201);
  sub_2341B4298(a1 + 194);
  sub_2341B4298(a1 + 187);
  sub_2341B4298(a1 + 180);
  sub_2341B4298(a1 + 170);
  v2 = 144;
  do
  {
    a1[v2 - 12] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 12];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 16);
  return sub_2341B4298(a1 + 9);
}

void sub_234203BB4(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 16));
}

_QWORD *sub_234203BBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 3) = &off_250515F00;
  *(a1 - 2) = &unk_250515FB8;
  *(a1 - 1) = &unk_250515FF8;
  *a1 = &unk_250516020;
  a1[1] = &unk_250516058;
  a1[2] = &unk_250516090;
  a1[4] = &unk_2505160D0;
  a1[5] = &unk_250516100;
  a1[6] = &unk_250516138;
  sub_2341B4298(a1 + 200);
  sub_2341B4298(a1 + 193);
  sub_2341B4298(a1 + 186);
  sub_2341B4298(a1 + 179);
  sub_2341B4298(a1 + 169);
  v2 = 144;
  do
  {
    a1[v2 - 13] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 13];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 15);
  return sub_2341B4298(a1 + 8);
}

void sub_234203C84(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 24));
}

_QWORD *sub_234203C8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 4) = &off_250515F00;
  *(a1 - 3) = &unk_250515FB8;
  *(a1 - 2) = &unk_250515FF8;
  *(a1 - 1) = &unk_250516020;
  *a1 = &unk_250516058;
  a1[1] = &unk_250516090;
  a1[3] = &unk_2505160D0;
  a1[4] = &unk_250516100;
  a1[5] = &unk_250516138;
  sub_2341B4298(a1 + 199);
  sub_2341B4298(a1 + 192);
  sub_2341B4298(a1 + 185);
  sub_2341B4298(a1 + 178);
  sub_2341B4298(a1 + 168);
  v2 = 144;
  do
  {
    a1[v2 - 14] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 14];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 14);
  return sub_2341B4298(a1 + 7);
}

void sub_234203D54(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 32));
}

uint64_t sub_234203D5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1656);
}

uint64_t sub_234203D64(uint64_t a1)
{
  return a1 - 32;
}

_QWORD *sub_234203D6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 5) = &off_250515F00;
  *(a1 - 4) = &unk_250515FB8;
  *(a1 - 3) = &unk_250515FF8;
  *(a1 - 2) = &unk_250516020;
  *(a1 - 1) = &unk_250516058;
  *a1 = &unk_250516090;
  a1[2] = &unk_2505160D0;
  a1[3] = &unk_250516100;
  a1[4] = &unk_250516138;
  sub_2341B4298(a1 + 198);
  sub_2341B4298(a1 + 191);
  sub_2341B4298(a1 + 184);
  sub_2341B4298(a1 + 177);
  sub_2341B4298(a1 + 167);
  v2 = 144;
  do
  {
    a1[v2 - 15] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 15];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 13);
  return sub_2341B4298(a1 + 6);
}

void sub_234203E34(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 40));
}

_QWORD *sub_234203E3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 7) = &off_250515F00;
  *(a1 - 6) = &unk_250515FB8;
  *(a1 - 5) = &unk_250515FF8;
  *(a1 - 4) = &unk_250516020;
  *(a1 - 3) = &unk_250516058;
  *(a1 - 2) = &unk_250516090;
  *a1 = &unk_2505160D0;
  a1[1] = &unk_250516100;
  a1[2] = &unk_250516138;
  sub_2341B4298(a1 + 196);
  sub_2341B4298(a1 + 189);
  sub_2341B4298(a1 + 182);
  sub_2341B4298(a1 + 175);
  sub_2341B4298(a1 + 165);
  v2 = 144;
  do
  {
    a1[v2 - 17] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 17];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 11);
  return sub_2341B4298(a1 + 4);
}

void sub_234203F04(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 56));
}

_QWORD *sub_234203F0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 8) = &off_250515F00;
  *(a1 - 7) = &unk_250515FB8;
  *(a1 - 6) = &unk_250515FF8;
  *(a1 - 5) = &unk_250516020;
  *(a1 - 4) = &unk_250516058;
  *(a1 - 3) = &unk_250516090;
  *(a1 - 1) = &unk_2505160D0;
  *a1 = &unk_250516100;
  a1[1] = &unk_250516138;
  sub_2341B4298(a1 + 195);
  sub_2341B4298(a1 + 188);
  sub_2341B4298(a1 + 181);
  sub_2341B4298(a1 + 174);
  sub_2341B4298(a1 + 164);
  v2 = 144;
  do
  {
    a1[v2 - 18] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 18];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 10);
  return sub_2341B4298(a1 + 3);
}

void sub_234203FD4(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 64));
}

_QWORD *sub_234203FDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(a1 - 9) = &off_250515F00;
  *(a1 - 8) = &unk_250515FB8;
  *(a1 - 7) = &unk_250515FF8;
  *(a1 - 6) = &unk_250516020;
  *(a1 - 5) = &unk_250516058;
  *(a1 - 4) = &unk_250516090;
  *(a1 - 2) = &unk_2505160D0;
  *(a1 - 1) = &unk_250516100;
  *a1 = &unk_250516138;
  sub_2341B4298(a1 + 194);
  sub_2341B4298(a1 + 187);
  sub_2341B4298(a1 + 180);
  sub_2341B4298(a1 + 173);
  sub_2341B4298(a1 + 163);
  v2 = 144;
  do
  {
    a1[v2 - 19] = &off_2504F0DD0;
    v3 = (uint64_t)&a1[v2 - 19];
    *(_QWORD *)(v3 - 8) = &off_250502DD8;
    sub_233CF4DD8(v3);
    v2 -= 36;
  }
  while (v2 * 8);
  sub_2341B4298(a1 + 9);
  return sub_2341B4298(a1 + 2);
}

void sub_2342040A4(uint64_t a1)
{
  sub_234203934((_QWORD *)(a1 - 72));
}

uint64_t sub_2342040AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_250502DD8;
  *(_QWORD *)(a1 + 8) = &off_2504F0DD0;
  *(_QWORD *)(a1 + 16) = a1;
  *(_QWORD *)(a1 + 24) = 0;
  sub_23411BFF8(a1 + 32);
  sub_23411BFF8(a1 + 72);
  sub_23411BFF8(a1 + 112);
  sub_23411BFF8(a1 + 152);
  sub_23411BFF8(a1 + 192);
  *(_BYTE *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 235) = 0;
  return a1;
}

BOOL sub_23420412C(__int16 a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  int v8;
  uint64_t v9;
  unsigned int v10;
  __int16 v11[2];
  int v12;
  int v13;

  v5 = *(_DWORD *)(a3 + 4);
  if (v5 == -1)
  {
    v8 = *a2;
    v11[0] = a1;
    v12 = v8;
    v9 = a4;
    v10 = 1;
  }
  else
  {
    v6 = *a2;
    v11[0] = a1;
    v12 = v6;
    v13 = v5;
    if (sub_233CBCB08((unsigned __int16 *)v11))
      return 0;
    v10 = sub_234035660();
    v9 = a4;
  }
  return sub_2342041B0(v9, v11, v10);
}

BOOL sub_2342041B0(uint64_t a1, __int16 *a2, unsigned int a3)
{
  uint64_t *v5;
  _QWORD v7[3];
  int v8;
  __int16 v9;

  v8 = *((_DWORD *)a2 + 1);
  v9 = *a2;
  memset(v7, 0, sizeof(v7));
  v5 = sub_2341D512C();
  sub_2341D4A50(v5, a1, (uint64_t)&v8, a3, (uint64_t)v7);
  return LODWORD(v7[0]) == 0;
}

uint64_t sub_234204214(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(a2 + 203) == 1)
  {
    v2 = *(_QWORD *)(a2 + 160);
    if (v2)
    {
      v3 = 0;
      do
      {
        ++v3;
        v2 = *(_QWORD *)(v2 + 16);
      }
      while (v2);
    }
    else
    {
      v3 = 0;
    }
    **a1 += v3;
    v4 = *(_QWORD *)(a2 + 168);
    if (v4)
    {
      v5 = 0;
      do
      {
        ++v5;
        v4 = *(_QWORD *)(v4 + 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    *a1[1] += v5;
    ++*a1[2];
  }
  return 0;
}

uint64_t sub_234204298(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a2 + 203))
  {
    v2 = *(_QWORD *)(a2 + 160);
    if (v2)
    {
      v3 = 0;
      do
      {
        ++v3;
        v2 = *(_QWORD *)(v2 + 16);
      }
      while (v2);
    }
    else
    {
      v3 = 0;
    }
    **a1 += v3;
    v4 = *(_QWORD *)(a2 + 168);
    if (v4)
    {
      v5 = 0;
      do
      {
        ++v5;
        v4 = *(_QWORD *)(v4 + 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    *a1[1] += v5;
    ++*a1[2];
  }
  return 0;
}

uint64_t sub_234204318(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_234204330(uint64_t a1, uint64_t a2)
{
  sub_2341AFAA0(*(_QWORD *)(*(_QWORD *)a1 + 80), a2);
  return 0;
}

uint64_t sub_234204350(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_234204368(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2341EC388(a1, a2);
  return 0;
}

uint64_t sub_234204380(uint64_t a1, void *a2)
{
  sub_234202DBC(a1, a2);
  return 0;
}

uint64_t sub_234204398(uint64_t a1, void *a2)
{
  sub_234202DBC(a1, a2);
  return 0;
}

uint64_t sub_2342043B0(uint64_t a1, void *a2)
{
  sub_234202DBC(a1, a2);
  return 0;
}

uint64_t sub_2342043C8(unsigned __int8 *a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 203) == *a1)
    ++**((_DWORD **)a1 + 1);
  return 0;
}

uint64_t sub_2342043F0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  if (*(unsigned __int8 *)(a2 + 203) == *a1)
  {
    v3 = sub_2340FA384(a2);
    if (v3)
      v4 = *(unsigned __int8 *)(v3 + 24);
    else
      v4 = 0;
    if (v4 == a1[1])
      ++**((_DWORD **)a1 + 1);
  }
  return 0;
}

uint64_t sub_234204454(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t result;

  v2 = *(_DWORD **)(a1 + 8);
  if (*v2 == *(_DWORD *)a1)
  {
    **(_QWORD **)(a1 + 16) = a2;
    return 1;
  }
  else
  {
    result = 0;
    ++*v2;
  }
  return result;
}

BOOL sub_234204488(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD v10[4];

  if (*(_BYTE *)(a2 + 203) != 1)
    return 0;
  v4 = sub_2340FA384(a2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 64))(v10);
  if (LOBYTE(v10[0]) != *a1 || BYTE1(v10[0]) != 64)
    return 0;
  v5 = *((_QWORD *)a1 + 1);
  if (HIDWORD(v5) == 4294967293)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_DWORD *)((char *)&v10[2] + v6);
      if (v7)
      {
        if ((unsigned __int16)(v5 - 1) < (unsigned __int16)v7 && HIWORD(v7) == WORD1(v5))
          break;
      }
      v6 += 4;
      if (v6 == 12)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if (v5 != v10[1])
      return 0;
  }
  **((_BYTE **)a1 + 2) = (*(_BYTE *)(a2 + 202) & 4) != 0;
  return **((_BYTE **)a1 + 2) != 0;
}

uint64_t sub_234204570(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[8];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (sub_2340F9580(a2, *a1))
  {
    v4 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_233CB4208(*a1, &v11);
      v5 = *(_DWORD *)(sub_2341CD3C0(v11) + 76);
      sub_233CB4208(*a1, &v10);
      v6 = *(_QWORD *)(sub_2341CD3C0(v10) + 72);
      sub_233CB4208(*a1, &v9);
      v7 = v9[24];
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v5;
      v13 = 1024;
      v14 = v6;
      v15 = 1024;
      v16 = v7;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Deleting previous subscription from NodeId: %08X%08X, FabricIndex: %u", buf, 0x14u);
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v9 + 32))(v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    }
    if (sub_234114844(2u))
    {
      sub_233CB4208(*a1, buf);
      sub_2341CD3C0(*(uint64_t *)buf);
      sub_233CB4208(*a1, &v11);
      sub_2341CD3C0(v11);
      sub_233CB4208(*a1, &v10);
      sub_2341147D0(0x23u, 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
    }
    sub_2340F7380(a2, 0);
  }
  return 0;
}

uint64_t sub_23420476C(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  int v13;
  int v14;

  v4 = sub_2340FA384(a2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 24);
  else
    v5 = 0;
  if (v5 == **a1 && *(_BYTE *)(a2 + 203) == 1)
  {
    v6 = *(_QWORD *)(a2 + 160);
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v6 = *(_QWORD *)(v6 + 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_QWORD *)(a2 + 168);
    if (v8)
    {
      v9 = 0;
      do
      {
        ++v9;
        v8 = *(_QWORD *)(v8 + 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)a1[1] += v7;
    *(_QWORD *)a1[2] += v9;
    ++*(_QWORD *)a1[3];
    v10 = a1[4];
    if (!*(_QWORD *)v10)
      goto LABEL_31;
    v11 = *(_QWORD *)a1[5];
    v13 = v7 > v11 || v9 > v11;
    if (v13 == 1 && *(_QWORD *)a1[6] <= v11 && *(_QWORD *)a1[7] <= v11)
    {
      *(_QWORD *)v10 = a2;
      *(_QWORD *)a1[6] = v7;
      *(_QWORD *)a1[7] = v9;
      return 0;
    }
    if (*(_QWORD *)(a2 + 64) < *(_QWORD *)(*(_QWORD *)v10 + 64))
    {
      v14 = *(_QWORD *)a1[6] > v11 || *(_QWORD *)a1[7] > v11;
      if (v14 == v13)
LABEL_31:
        *(_QWORD *)v10 = a2;
    }
  }
  return 0;
}

uint64_t sub_2342048D8(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;

  v4 = sub_2340FA384(a2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 24);
  else
    v5 = 0;
  if (v5 == **a1 && !*(_BYTE *)(a2 + 203))
  {
    v6 = *(_QWORD *)(a2 + 160);
    if (v6)
    {
      v7 = 0;
      do
      {
        ++v7;
        v6 = *(_QWORD *)(v6 + 16);
      }
      while (v6);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_QWORD *)(a2 + 168);
    if (v8)
    {
      v9 = 0;
      do
      {
        ++v9;
        v8 = *(_QWORD *)(v8 + 16);
      }
      while (v8);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)a1[1] += v7;
    *(_QWORD *)a1[2] += v9;
    ++*(_QWORD *)a1[3];
    v10 = (uint64_t *)a1[4];
    v11 = *v10;
    if (!*v10
      || (v7 <= 9 ? (v12 = v9 > 9) : (v12 = 1),
          !v12 ? (v13 = 0) : (v13 = 1),
          v13 == 1 && *(_QWORD *)a1[5] <= 9uLL && *(_QWORD *)a1[6] < 0xAuLL
       || *(_QWORD *)(a2 + 64) > *(_QWORD *)(v11 + 64)
       && (*(_QWORD *)a1[5] <= 9uLL ? (v14 = *(_QWORD *)a1[6] > 9uLL) : (v14 = 1), v14 == v13)))
    {
      *v10 = a2;
      v11 = *(_QWORD *)a1[4];
    }
    if (v11 == a2)
    {
      *(_QWORD *)a1[5] = v7;
      *(_QWORD *)a1[6] = v9;
    }
  }
  return 0;
}

uint64_t sub_234204A40(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a2 + 203))
  {
    v4 = sub_2340FA384(a2);
    v5 = v4 ? *(unsigned __int8 *)(v4 + 24) : 0;
    if (v5 == *(unsigned __int8 *)*a1)
    {
      v6 = *(_QWORD *)(a2 + 160);
      if (v6)
      {
        v7 = 0;
        do
        {
          ++v7;
          v6 = *(_QWORD *)(v6 + 16);
        }
        while (v6);
      }
      else
      {
        v7 = 0;
      }
      *a1[1] += v7;
      v8 = *(_QWORD *)(a2 + 168);
      if (v8)
      {
        v9 = 0;
        do
        {
          ++v9;
          v8 = *(_QWORD *)(v8 + 16);
        }
        while (v8);
      }
      else
      {
        v9 = 0;
      }
      *a1[2] += v9;
      ++*a1[3];
    }
  }
  return 0;
}

_QWORD *sub_234204B04(unint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = sub_234114774(0x18uLL);
  v3 = v2;
  if (v2)
  {
    v2[1] = 0;
    v2[2] = 0;
    *v2 = -1;
    *((_DWORD *)v2 + 2) = -1;
    v4 = sub_234114774(0x18uLL);
    if (v4)
    {
      *v4 = v3;
      v4[1] = a1 + 2;
      v4[2] = 0;
      v4[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      v5 = a1[1];
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5)
        a1[1] = v6;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

_QWORD *sub_234204B90(unint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = sub_234114774(0x18uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = -1;
    v2[1] = 0xFFFFLL;
    v2[2] = 0;
    v4 = sub_234114774(0x18uLL);
    if (v4)
    {
      *v4 = v3;
      v4[1] = a1 + 2;
      v4[2] = 0;
      v4[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      v5 = a1[1];
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5)
        a1[1] = v6;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

_QWORD *sub_234204C1C(unint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = sub_234114774(0x18uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = 0;
    v2[1] = 0;
    *(_DWORD *)v2 = -1;
    *((_WORD *)v2 + 6) = -1;
    v2[2] = 0;
    v4 = sub_234114774(0x18uLL);
    if (v4)
    {
      *v4 = v3;
      v4[1] = a1 + 2;
      v4[2] = 0;
      v4[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      v5 = a1[1];
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5)
        a1[1] = v6;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

BOOL sub_234204CB0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 203) == 0;
}

uint64_t sub_234204CC0(_QWORD **a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 203) == 1 && (*(_QWORD *)(a2 + 40) > *(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 202) & 0x10) != 0))
    ++**a1;
  return 0;
}

uint64_t sub_234204CF8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2340FA384(a2);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 24);
  else
    v5 = 0;
  if (v5 == *a1)
  {
    v6 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_2340FA384(a2);
      if (v7)
        v8 = *(_DWORD *)(v7 + 76);
      else
        v8 = 0;
      v9 = sub_2340FA384(a2);
      if (v9)
        v10 = *(_DWORD *)(v9 + 72);
      else
        v10 = 0;
      v11 = *a1;
      *(_DWORD *)buf = 67109632;
      v14 = v8;
      v15 = 1024;
      v16 = v10;
      v17 = 1024;
      v18 = v11;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Deleting expired ReadHandler for NodeId: %08X%08X, FabricIndex: %u", buf, 0x14u);
    }
    if (sub_234114844(2u))
    {
      sub_2340FA384(a2);
      sub_2340FA384(a2);
      sub_2341147D0(0x23u, 2);
    }
    sub_2340F7380(a2, 0);
  }
  return 0;
}

BOOL sub_234204E80(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 72) == *(_DWORD *)(*(_QWORD *)a1 + 12);
}

void sub_234204E98(int a1, _QWORD *a2)
{
  void (*v3)(_QWORD *);
  void (*v4)(_QWORD *);
  void *v5;
  void *v6;

  if (a2)
  {
    v3 = (void (*)(_QWORD *))a2[15];
    if (v3)
    {
      a2[15] = 0;
      v3(a2 + 13);
    }
    v4 = (void (*)(_QWORD *))a2[10];
    if (v4)
    {
      a2[10] = 0;
      v4(a2 + 8);
    }
    a2[7] = 0;
    v5 = (void *)a2[6];
    if (v5)
    {
      j__free(v5);
      a2[6] = 0;
    }
    a2[5] = 0;
    v6 = (void *)a2[4];
    if (v6)
    {
      j__free(v6);
      a2[4] = 0;
    }
    j__free(a2);
  }
}

BOOL sub_234204F10(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 72) == *(_DWORD *)(*(_QWORD *)a1 + 12);
}

uint64_t sub_234204F28(uint64_t result, int a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(result + 480) != a2)
  {
    v3 = result;
    v4 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(unsigned __int8 *)(v3 + 104);
      v6 = *(_QWORD *)(v3 + 96);
      v7 = *(unsigned __int8 *)(v3 + 480);
      *(_DWORD *)buf = 67110144;
      v10 = v5;
      v11 = 1024;
      v12 = HIDWORD(v6);
      v13 = 1024;
      v14 = v6;
      v15 = 1024;
      v16 = v7;
      v17 = 1024;
      v18 = a2;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: State change %d --> %d", buf, 0x20u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x22u, 3);
    if (*(_BYTE *)(v3 + 480) == 6)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 88);
      if (v8)
      {
        result = *(_QWORD *)(v8 + 24);
        if (result)
          result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)result + 72))(result, sub_234206FA4, v3);
      }
    }
    *(_BYTE *)(v3 + 480) = a2;
    if (a2 != 4)
    {
      if (*(_QWORD *)(v3 + 88))
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 80) + 8))(*(_QWORD *)(v3 + 80));
        *(_QWORD *)(v3 + 88) = 0;
      }
    }
  }
  return result;
}

_QWORD *sub_2342050B8(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(result[5] + 88);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 24);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *(*)(uint64_t, uint64_t), _QWORD *))(*result + 72))(result, sub_234206FA4, v2);
  }
  return result;
}

uint64_t sub_2342050E8(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 88))
  {
    v1 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 80) + 8))(*(_QWORD *)(result + 80));
    *(_QWORD *)(v1 + 88) = 0;
  }
  return result;
}

uint64_t sub_234205120(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE v18[8];
  uint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = *(unsigned __int8 *)(a1 + 480);
  v2 = v1 > 6;
  v3 = (1 << v1) & 0x4E;
  if (v2 || v3 == 0)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  *(_WORD *)buf = 513;
  sub_2341D24E4(v6, v7, v8, (uint64_t)buf, *(_BYTE *)(a1 + 484), (uint64_t)v18);
  if (!v18[0])
    return 0;
  v9 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 104);
    v11 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 67109632;
    v21 = v10;
    v22 = 1024;
    v23 = HIDWORD(v11);
    v24 = 1024;
    v25 = v11;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Found an existing secure session to [%u:%08X%08X]!", buf, 0x14u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  v12 = (uint64_t *)sub_233CB6588(v18);
  v13 = sub_2341CD3C0(*v12);
  v14 = *(_OWORD *)(v13 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(v13 + 112);
  *(_OWORD *)(a1 + 112) = v14;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(v13 + 116);
  v15 = (uint64_t *)sub_233CB6588(v18);
  v16 = sub_2341CDA90((_QWORD *)(a1 + 136), v15);
  if (v18[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  return v16;
}

_QWORD *sub_2342052C8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, char a5)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 484) = a5;
  result = (_QWORD *)sub_2342070FC(a1 + 176, a2, a3, a4);
  v7 = 0x300000003;
  v8 = 0x7300000073;
  v9 = "src/app/OperationalSessionSetup.cpp";
  switch(*(_BYTE *)(a1 + 480))
  {
    case 0:
      goto LABEL_10;
    case 1:
      if ((sub_234205120(a1) & 1) != 0)
        goto LABEL_9;
      sub_234204F28(a1, 2);
      result = (_QWORD *)sub_2342053FC(a1, (uint64_t)&v12);
      if (!(_DWORD)v12)
        return result;
      v9 = v13;
      v8 = v14;
      v11 = v12;
      sub_234204F28(a1, 1);
      v7 = v11;
LABEL_10:
      v12 = v7;
      v13 = v9;
      v14 = v8;
      return sub_234205CE4(a1, (uint64_t)&v12, 1, 0);
    case 2:
    case 6:
      result = (_QWORD *)sub_234205120(a1);
      if (!(_DWORD)result)
        return result;
      goto LABEL_9;
    case 3:
      v10 = sub_234205120(a1);
      v7 = 0x300000003;
      if ((v10 & 1) != 0)
        goto LABEL_9;
      v8 = 0x9600000096;
      goto LABEL_10;
    case 4:
      return result;
    case 5:
LABEL_9:
      sub_234204F28(a1, 5);
      v8 = 101;
      v7 = 0;
      goto LABEL_10;
    default:
      v8 = 0xA3000000A3;
      v9 = "src/app/OperationalSessionSetup.cpp";
      goto LABEL_10;
  }
}

uint64_t sub_2342053F4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return sub_2342070FC(a1 + 176, a2, a3, a4);
}

uint64_t sub_2342053FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  const char *v10;
  uint64_t *v11;
  uint8_t buf[8];
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 486))
    --*(_BYTE *)(a1 + 486);
  v4 = *(unsigned __int8 *)(a1 + 487);
  if (v4 != 255)
    *(_BYTE *)(a1 + 487) = ++v4;
  if (*(_BYTE *)(a1 + 488))
    --*(_BYTE *)(a1 + 488);
  *(_DWORD *)buf = 2;
  v13 = "core_dev_operational_discovery_attempt_ctr";
  LODWORD(v14) = v4;
  BYTE4(v14) = 2;
  sub_2341C4BEC((uint64_t)buf);
  if (*(_QWORD *)(a1 + 216) && *(_QWORD *)(a1 + 224))
  {
    v5 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int8 *)(a1 + 104);
      v7 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v6;
      LOWORD(v13) = 1024;
      *(_DWORD *)((char *)&v13 + 2) = HIDWORD(v7);
      HIWORD(v13) = 1024;
      LODWORD(v14) = v7;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "OperationalSessionSetup[%u:%08X%08X]: Operational node lookup already in progress. Will NOT start a new one.", buf, 0x14u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x22u, 2);
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/OperationalSessionSetup.cpp";
    v9 = 598;
  }
  else
  {
    *(_DWORD *)buf = 0;
    v13 = "core_dev_operational_discovery";
    BYTE4(v14) = 0;
    sub_2341C4BEC((uint64_t)buf);
    result = sub_2341E2E70(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 104));
    if (result)
    {
      v10 = *(const char **)(result + 16);
      *(_QWORD *)buf = *(_QWORD *)(a1 + 96);
      v13 = v10;
      v14 = 0xAFC8000000C8;
      v11 = sub_23421694C();
      return (*(uint64_t (**)(uint64_t *, uint8_t *, uint64_t))(*v11 + 24))(v11, buf, a1 + 208);
    }
    *(_DWORD *)a2 = 113;
    *(_QWORD *)(a2 + 8) = "src/app/OperationalSessionSetup.cpp";
    v9 = 606;
  }
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_234205604(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  return sub_2342052C8(a1, a2, a3, 0, a4);
}

_QWORD *sub_234205610(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  return sub_2342052C8(a1, a2, 0, a3, a4);
}

_QWORD *sub_234205620(_QWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  char *v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  __int128 v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  _BYTE v25[24];
  __int128 v26;
  int v27;
  int v28;
  _BYTE buf[30];
  __int16 v30;
  int v31;
  char __str[76];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v26 = *(_OWORD *)a2;
  v2 = *(_DWORD *)(a2 + 20);
  v27 = *(_DWORD *)(a2 + 16);
  v28 = v2;
  v3 = *((unsigned __int8 *)result + 485);
  *((_BYTE *)result + 485) = 0;
  if (*((_BYTE *)result + 480))
  {
    v5 = (uint64_t)result;
    sub_23412A258((uint64_t)&v26, __str, 0x4CuLL);
    v6 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(unsigned __int8 *)(v5 + 104);
      v8 = *(_QWORD *)(v5 + 96);
      v9 = *(unsigned __int8 *)(v5 + 480);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v8);
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v8;
      *(_WORD *)&buf[20] = 2080;
      *(_QWORD *)&buf[22] = __str;
      v30 = 1024;
      v31 = v9;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: Updating device address to %s while in state %d", buf, 0x24u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
    *(_OWORD *)(v5 + 112) = v26;
    v10 = v28;
    *(_DWORD *)(v5 + 128) = v27;
    *(_DWORD *)(v5 + 132) = v10;
    v11 = *(_QWORD *)(v5 + 88);
    if (v11)
      sub_2341FC568(v11, (uint64_t *)(a2 + 24));
    if (*(_BYTE *)(v5 + 480) != 2)
    {
      v13 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Received UpdateDeviceData in incorrect state", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x22u, 1);
      *(_DWORD *)buf = 3;
      *(_QWORD *)&buf[8] = "src/app/OperationalSessionSetup.cpp";
      v12 = 236;
      goto LABEL_16;
    }
    sub_234204F28(v5, 3);
    sub_2341CF6F4(*(_QWORD *)(v5 + 16), v5 + 96, (uint64_t)&v26);
    if (*(_BYTE *)(v5 + 481))
    {
      *(_DWORD *)buf = 0;
      *(_QWORD *)&buf[8] = "src/app/OperationalSessionSetup.cpp";
      v12 = 248;
LABEL_16:
      *(_DWORD *)&buf[16] = v12;
      return sub_234205CE4(v5, (uint64_t)buf, 1, 0);
    }
    memset(v25, 0, sizeof(v25));
    result = (_QWORD *)sub_234205A38(v5, a2, (uint64_t)v25);
    v14 = *(_DWORD *)v25;
    if (*(_DWORD *)v25)
    {
      v15 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v22 = v14;
        v23 = *(_OWORD *)&v25[4];
        v24 = *(_DWORD *)&v25[20];
        v16 = sub_2341083CC((const char **)&v22, 1);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "src/app/OperationalSessionSetup.cpp";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 254;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_234114844(1u))
      {
        v19 = v14;
        v20 = *(_OWORD *)&v25[4];
        v21 = *(_DWORD *)&v25[20];
        sub_2341083CC((const char **)&v19, 1);
        sub_2341147D0(0, 1);
      }
      sub_234204F28(v5, 2);
      *(_BYTE *)(v5 + 485) = v3;
      v17 = sub_23421694C();
      result = (*(_QWORD *(**)(_BYTE *__return_ptr, uint64_t *, uint64_t))(*v17 + 32))(buf, v17, v5 + 208);
      if (*(_DWORD *)buf)
      {
        *(_OWORD *)buf = *(_OWORD *)v25;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v25[16];
        return sub_234205CE4(v5, (uint64_t)buf, 1, 0);
      }
    }
    else if (v3)
    {
      v18 = sub_234129E7C(a2 + 24);
      *(_DWORD *)buf = 50;
      *(_QWORD *)&buf[8] = "src/app/OperationalSessionSetup.cpp";
      *(_DWORD *)&buf[16] = 265;
      return (_QWORD *)sub_234206E20(v5, (__int128 *)buf, (unsigned __int16)(v18 / 0x3E8) + 1);
    }
  }
  return result;
}

uint64_t sub_234205A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  int v13;
  char v14;
  uint8_t buf[16];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 484) == 1)
  {
    if (!*(_BYTE *)(a2 + 36))
    {
      v8 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 96);
        v10 = *(unsigned __int8 *)(a1 + 104);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = HIDWORD(v9);
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v9;
        *(_WORD *)&buf[14] = 1024;
        LODWORD(v16) = v10;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "LargePayload session requested but peer does not support TCP server, PeerNodeId=<%08X%08X, %d>", buf, 0x14u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(0x22u, 1);
      *(_DWORD *)a3 = 172;
      *(_QWORD *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
      v7 = 315;
      goto LABEL_16;
    }
    *(_BYTE *)(a1 + 128) = 3;
  }
  result = (***(uint64_t (****)(_QWORD))(a1 + 80))(*(_QWORD *)(a1 + 80));
  *(_QWORD *)(a1 + 88) = result;
  if (!result)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
    v7 = 321;
LABEL_16:
    *(_DWORD *)(a3 + 16) = v7;
    return result;
  }
  *(_DWORD *)buf = 0;
  *(_QWORD *)&buf[8] = "core_dev_case_session";
  BYTE4(v16) = 0;
  sub_2341C4BEC((uint64_t)buf);
  memset(buf, 0, sizeof(buf));
  v16 = 0;
  sub_2341FC584(*(_QWORD *)(a1 + 88), a1 + 16, (uint64_t *)(a1 + 96), a1 + 112, a2 + 24, a1, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    result = sub_234204F28(a1, 4);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/app/OperationalSessionSetup.cpp";
    v7 = 334;
    goto LABEL_16;
  }
  v11 = 1;
  v12 = "core_dev_case_session";
  v13 = *(_DWORD *)buf;
  v14 = 3;
  result = sub_2341C4BEC((uint64_t)&v11);
  if (*(_QWORD *)(a1 + 88))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 8))(*(_QWORD *)(a1 + 80));
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = v16;
  return result;
}

uint64_t sub_234205C70(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned int v7;
  __int128 v9;
  uint64_t v10;

  v7 = sub_234129E7C(a3);
  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  return sub_234206E20(a1, &v9, (unsigned __int16)(v7 / 0x3E8) + a4 + 1);
}

_QWORD *sub_234205CE4(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  void (*v11)(void);
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19[3];
  char v20[8];
  uint64_t v21;
  uint64_t *v22[3];

  if (*(_BYTE *)(a1 + 481) && *(_QWORD *)(a1 + 176) != a1 + 176)
    sub_23425ED00(a1);
  v8 = (uint64_t *)(a1 + 496);
  v9 = *(_QWORD *)(a1 + 496);
  if (v9 != a1 + 496 && v9 != 0)
  {
    do
    {
      v11 = *(void (**)(void))(v9 + 16);
      if (v11)
      {
        *(_QWORD *)(v9 + 16) = 0;
        v11();
        v9 = *v8;
      }
    }
    while ((uint64_t *)v9 != v8 && v9);
  }
  v22[0] = (uint64_t *)v22;
  v22[1] = (uint64_t *)v22;
  v22[2] = 0;
  sub_234205E38((uint64_t)v22, (_QWORD **)(a1 + 176));
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 160);
  if (v13)
  {
    v21 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 160));
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    v13 = 1;
  }
  v20[0] = v13;
  *(_OWORD *)v19 = *(_OWORD *)(a1 + 96);
  v14 = *(_WORD *)(a1 + 482);
  if (!a4)
  {
    v15 = *(_QWORD *)(a1 + 200);
    if (!v15)
      sub_23425EC6C(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a1);
  }
  v17 = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  sub_234205E84(v22, &v17, a3, v19, v12, v20, v14);
  if (v20[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  return sub_2342070A0(v22);
}

uint64_t sub_234205E38(uint64_t result, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if ((_QWORD **)result != a2)
  {
    v2 = *a2;
    if (*a2 != a2)
    {
      v3 = *(_QWORD **)(result + 8);
      *v3 = v2;
      v4 = v2[1];
      do
      {
        v2[1] = v3;
        v2 = (_QWORD *)*v2;
      }
      while (v2[1] == v4);
      *a2[1] = result;
      *(_QWORD *)(result + 8) = a2[1];
      *a2 = a2;
      a2[1] = a2;
    }
  }
  return result;
}

BOOL sub_234205E84(uint64_t **a1, __int128 *a2, char a3, uint64_t *a4, uint64_t a5, _BYTE *a6, __int16 a7)
{
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (*v18)(uint64_t *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t *, __int128 *);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _BYTE *);
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint8_t buf[16];
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v37 = 0;
  v35 = 0;
  for (result = sub_2342072C0(a1, &v37, &v36, &v35); result; result = sub_2342072C0(a1, &v37, &v36, &v35))
  {
    v17 = *a1;
    v18 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))(*a1)[2];
    if (v18)
    {
      v17[2] = 0;
      v17 = (uint64_t *)v18(v17, v15, v16);
    }
    if (*(_DWORD *)a2)
    {
      if (v36)
      {
        v19 = v36[3];
        v20 = (void (*)(uint64_t, uint64_t *, __int128 *))v36[4];
        v33 = *a2;
        v34 = *((_QWORD *)a2 + 2);
        v20(v19, a4, &v33);
      }
      if (v35)
      {
        v39 = *a2;
        v40 = *((_QWORD *)a2 + 2);
        *(_OWORD *)buf = *(_OWORD *)a4;
        v41 = a3;
        v42 = 0;
        if (*(_DWORD *)a2 == 219)
        {
          v42 = 1;
          v43 = a7;
        }
        ((void (*)(uint64_t, uint8_t *))v35[4])(v35[3], buf);
      }
    }
    else
    {
      if (!a5)
        sub_23425ED94((uint64_t)v17);
      v21 = (uint64_t *)sub_233C25EA4(a6);
      v22 = sub_2341CD3C0(*v21);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
      if ((v23 & 1) == 0)
        sub_23425EE28(v23);
      if (v37)
      {
        v25 = v37[3];
        v24 = (void (*)(uint64_t, uint64_t, _BYTE *))v37[4];
        v26 = sub_233C25EA4(a6);
        v24(v25, a5, v26);
        v27 = (uint64_t *)sub_233C25EA4(a6);
        v28 = sub_2341CD3C0(*v27);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28) & 1) == 0)
        {
          v29 = sub_234117B80(0x22u, "Discovery");
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v30 = *a4;
            v31 = HIDWORD(*a4);
            v32 = *((unsigned __int8 *)a4 + 8);
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v31;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v30;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v39) = v32;
            _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "Success callback for connection to <%08X%08X, %d> tore down session", buf, 0x14u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0x22u, 1);
          *(_DWORD *)a2 = 2;
          *((_QWORD *)a2 + 1) = "src/app/OperationalSessionSetup.cpp";
          *((_DWORD *)a2 + 4) = 409;
        }
      }
    }
  }
  return result;
}

uint64_t sub_234206118(uint64_t a1, int *a2, char a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t result;
  NSObject *v11;
  __int16 v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  __int16 v17;
  uint64_t v18;
  int v19;
  uint8_t buf[16];
  uint64_t v21;

  if (*(_BYTE *)(a1 + 480) == 4)
  {
    v6 = *a2;
    if (*a2 != 219 && v6 != 50)
      goto LABEL_8;
    v7 = sub_2341FC57C(*(_QWORD *)(a1 + 88));
    v8 = *(_DWORD *)(v7 + 8);
    v18 = *(_QWORD *)v7;
    v19 = v8;
    sub_234204F28(a1, 2);
    *(_BYTE *)(a1 + 485) = 1;
    v9 = sub_23421694C();
    result = (uint64_t)(*(_QWORD *(**)(uint8_t *__return_ptr, uint64_t *, uint64_t))(*v9 + 32))(buf, v9, a1 + 208);
    if (*(_DWORD *)buf)
    {
      *(_BYTE *)(a1 + 485) = 0;
      sub_234204F28(a1, 1);
      if (!*(_BYTE *)(a1 + 486) || (memset(v16, 0, sizeof(v16)), sub_23420632C(a1, &v17, v16), LODWORD(v16[0])))
      {
        v6 = *a2;
LABEL_8:
        *(_DWORD *)buf = 1;
        *(_QWORD *)&buf[8] = "core_dev_operational_discovery";
        LODWORD(v21) = v6;
        BYTE4(v21) = 3;
        sub_2341C4BEC((uint64_t)buf);
        *(_DWORD *)buf = 1;
        *(_QWORD *)&buf[8] = "core_dev_case_session";
        LODWORD(v21) = *a2;
        BYTE4(v21) = 3;
        sub_2341C4BEC((uint64_t)buf);
        v14 = *(_OWORD *)a2;
        v15 = *((_QWORD *)a2 + 2);
        return (uint64_t)sub_234205CE4(a1, (uint64_t)&v14, a3, 0);
      }
      sub_234204F28(a1, 6);
      *(_OWORD *)buf = *(_OWORD *)a2;
      v21 = *((_QWORD *)a2 + 2);
      v12 = v17;
      v13 = sub_234129E7C((uint64_t)&v18);
      return sub_234206E20(a1, (__int128 *)buf, v12 + (unsigned __int16)(v13 / 0x3E8) + 1);
    }
  }
  else
  {
    v11 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "OnSessionEstablishmentError was called while we were not connecting", buf, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 1);
  }
  return result;
}

uint64_t sub_23420632C@<X0>(uint64_t result@<X0>, _WORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint8_t buf[16];
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(result + 486))
    sub_23425EEBC(result);
  v4 = result;
  v5 = *(_QWORD *)(*(_QWORD *)(result + 40) + 88);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v7 = sub_234204F28(result, 1);
    v8 = *(unsigned __int8 *)(v4 + 487);
    if (!*(_BYTE *)(v4 + 487))
      sub_23425EF50(v7);
    v9 = v8 - 1;
    if ((v8 - 1) >= 5)
      v9 = 5;
    v10 = 1000 << v9;
    if (*(_WORD *)(v4 + 482))
    {
      if (v10 <= *(unsigned __int16 *)(v4 + 482))
        v10 = *(unsigned __int16 *)(v4 + 482);
      *(_WORD *)(v4 + 482) = 0;
    }
    if ((v8 & 1) == 0)
    {
      sub_2341B1BB8((uint64_t)buf);
      v19 = sub_2341B1C28();
      v20 = v11;
      if (buf[0])
        v12 = (uint64_t *)sub_233C0FDD4(buf);
      else
        v12 = &v19;
      v10 += sub_234129F50((uint64_t)v12);
    }
    *a2 = v10 / 0x3E8;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 88) + 24);
    (*(void (**)(uint64_t, _QWORD, _QWORD *(*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v13 + 40))(v13, v10, sub_234206FA4, v4);
    v14 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(unsigned __int8 *)(v4 + 487);
      v16 = *(unsigned __int8 *)(v4 + 486);
      v17 = (unsigned __int16)*a2;
      *(_OWORD *)buf = *(_OWORD *)a3;
      v22[0] = a3[2];
      v18 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v16;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v22[0]) = v17;
      WORD2(v22[0]) = 2080;
      *(_QWORD *)((char *)v22 + 6) = v18;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "OperationalSessionSetup:attempts done: %u, attempts left: %u, retry delay %us, status %s", buf, 0x1Eu);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v22[0] = a3[2];
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x22u, 2);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/app/OperationalSessionSetup.cpp";
    *((_DWORD *)a3 + 4) = 733;
  }
  return result;
}

uint64_t sub_23420658C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 482) = a2;
  return result;
}

uint64_t sub_234206594(uint64_t a1, uint64_t *a2)
{
  int v4;
  NSObject *v5;
  uint64_t result;
  int v7;
  const char *v8;
  int v9;
  char v10;

  if (*(_BYTE *)(a1 + 480) == 4)
  {
    v7 = 1;
    v8 = "core_dev_operational_discovery";
    v9 = 0;
    v10 = 3;
    sub_2341C4BEC((uint64_t)&v7);
    v7 = 1;
    v8 = "core_dev_case_session";
    v9 = 0;
    v10 = 3;
    sub_2341C4BEC((uint64_t)&v7);
    if ((sub_2341CDA90((_QWORD *)(a1 + 136), a2) & 1) != 0)
    {
      sub_234204F28(a1, 5);
      v7 = 0;
      v8 = "src/app/OperationalSessionSetup.cpp";
      v4 = 528;
    }
    else
    {
      v7 = 3;
      v8 = "src/app/OperationalSessionSetup.cpp";
      v4 = 520;
    }
    v9 = v4;
    return (uint64_t)sub_234205CE4(a1, (uint64_t)&v7, 1, 0);
  }
  else
  {
    v5 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "OnSessionEstablished was called while we were not connecting", (uint8_t *)&v7, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 1);
  }
  return result;
}

uint64_t sub_2342066E4(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  __int128 v13;
  uint64_t v14;
  uint8_t buf[16];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_250516258;
  *(_QWORD *)(a1 + 8) = &unk_2505162B0;
  v2 = (_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 216) && *(_QWORD *)(a1 + 224))
  {
    v3 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(unsigned __int8 *)(a1 + 104);
      v5 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v5);
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v16) = v5;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "OperationalSessionSetup[%u:%08X%08X]: Cancelling incomplete address resolution as device is being deleted.", buf, 0x14u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
    v13 = 0uLL;
    v14 = 0;
    v6 = sub_23421694C();
    (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t, uint64_t))(*v6 + 40))(&v13, v6, a1 + 208, 1);
    if ((_DWORD)v13)
    {
      v7 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v13;
        v16 = v14;
        v8 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Lookup cancel failed: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v13;
        v16 = v14;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x22u, 1);
      }
    }
  }
  if (*(_QWORD *)(a1 + 88))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 8))(*(_QWORD *)(a1 + 80));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
      (*(void (**)(uint64_t, _QWORD *(*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v10 + 72))(v10, sub_234206FA4, a1);
  }
  *(_DWORD *)buf = 116;
  *(_QWORD *)&buf[8] = "src/app/OperationalSessionSetup.cpp";
  LODWORD(v16) = 568;
  sub_234205CE4(a1, (uint64_t)buf, 1, 1);
  v11 = *(void (**)(uint64_t))(a1 + 512);
  if (v11)
  {
    *(_QWORD *)(a1 + 512) = 0;
    v11(a1 + 496);
  }
  sub_233CB66E0(v2);
  sub_2342070A0((_QWORD *)(a1 + 176));
  sub_2341CD754(a1 + 136);
  return a1;
}

uint64_t sub_234206990(uint64_t a1)
{
  return sub_2342066E4(a1 - 8);
}

void sub_234206998(uint64_t a1)
{
  sub_2342066E4(a1);
  JUMPOUT(0x23493E704);
}

void sub_2342069BC(uint64_t a1)
{
  sub_2342066E4(a1 - 8);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2342069E4(_QWORD *result)
{
  uint64_t v1;
  NSObject *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)result + 481))
  {
    v1 = (uint64_t)result;
    if (*((_BYTE *)result + 480) != 1)
      sub_23425EFE4((uint64_t)result);
    *((_BYTE *)result + 481) = 1;
    sub_234204F28((uint64_t)result, 2);
    v4 = 0uLL;
    v5 = 0;
    result = (_QWORD *)sub_2342053FC(v1, (uint64_t)&v4);
    if ((_DWORD)v4)
    {
      v2 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v4;
        v7 = v5;
        v3 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v3;
        _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "Failed to look up peer address: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v4;
        v7 = v5;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x22u, 1);
      }
      *(_OWORD *)buf = v4;
      v7 = v5;
      return sub_234205CE4(v1, (uint64_t)buf, 1, 0);
    }
  }
  return result;
}

_QWORD *sub_234206B4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_234205620(a1, a3);
}

_QWORD *sub_234206B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_234205620((_QWORD *)(a1 - 8), a3);
}

_QWORD *sub_234206B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[16];
  _QWORD v17[4];

  v17[3] = *MEMORY[0x24BDAC8D0];
  v5 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = *(unsigned __int8 *)(a1 + 104);
    v7 = *(_QWORD *)(a1 + 96);
    *(_OWORD *)buf = *(_OWORD *)a3;
    v17[0] = *(_QWORD *)(a3 + 16);
    v8 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v7);
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v17[0]) = v7;
    WORD2(v17[0]) = 2080;
    *(_QWORD *)((char *)v17 + 6) = v8;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "OperationalSessionSetup[%u:%08X%08X]: operational discovery failed: %s", buf, 0x1Eu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v17[0] = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0x22u, 1);
  }
  if (*(_BYTE *)(a1 + 480) != 2 || !*(_BYTE *)(a1 + 488))
    goto LABEL_16;
  v9 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(a1 + 488);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Retrying operational DNS-SD discovery. Attempts remaining: %u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  v11 = *(unsigned __int8 *)(a1 + 486);
  if (v11 != 255)
    *(_BYTE *)(a1 + 486) = v11 + 1;
  v12 = *(unsigned __int8 *)(a1 + 487);
  if (*(_BYTE *)(a1 + 487))
  {
    LOBYTE(v12) = v12 - 1;
    *(_BYTE *)(a1 + 487) = v12;
    v12 = v12;
  }
  *(_DWORD *)buf = 2;
  *(_QWORD *)&buf[8] = "core_dev_operational_discovery_attempt_ctr";
  LODWORD(v17[0]) = v12;
  BYTE4(v17[0]) = 2;
  sub_2341C4BEC((uint64_t)buf);
  memset(buf, 0, sizeof(buf));
  v17[0] = 0;
  sub_2342053FC(a1, (uint64_t)buf);
  if (!*(_DWORD *)buf)
  {
    v14 = *(_OWORD *)a3;
    v15 = *(_QWORD *)(a3 + 16);
    return (_QWORD *)sub_234206E20(a1, &v14, 0x3Cu);
  }
  else
  {
LABEL_16:
    *(_DWORD *)buf = 1;
    *(_QWORD *)&buf[8] = "core_dev_operational_discovery";
    LODWORD(v17[0]) = *(_DWORD *)a3;
    BYTE4(v17[0]) = 3;
    sub_2341C4BEC((uint64_t)buf);
    *(_OWORD *)buf = *(_OWORD *)a3;
    v17[0] = *(_QWORD *)(a3 + 16);
    return sub_234205CE4(a1, (uint64_t)buf, 1, 0);
  }
}

uint64_t sub_234206E20(uint64_t result, __int128 *a2, unsigned __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  void (*v9)(_QWORD *);
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __int128 *, uint64_t);
  uint64_t (*v13)(_QWORD **);
  uint64_t (*v14)(_QWORD *);
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t (*v19)(_QWORD **);
  _QWORD v20[2];
  uint64_t (*v21)(_QWORD *);

  v21 = 0;
  v3 = result + 496;
  if (*(_QWORD *)(result + 496) != result + 496)
  {
    v4 = result;
    v5 = *(_QWORD **)(result + 504);
    v20[0] = *(_QWORD *)(result + 496);
    v20[1] = v5;
    *v5 = v20;
    v6 = (_QWORD *)v20[0];
    *(_QWORD *)(v20[0] + 8) = v20;
    *(_QWORD *)(result + 496) = v3;
    *(_QWORD *)(result + 504) = v3;
    if (v6 != v20)
    {
      v8 = a3;
      do
      {
        v17 = &v17;
        v18 = &v17;
        v19 = 0;
        v9 = (void (*)(_QWORD *))v6[2];
        if (v9)
        {
          v6[2] = 0;
          v9(v6);
          v10 = (void (*)(_QWORD *))v6[2];
          if (v10)
          {
            v6[2] = 0;
            v10(v6);
          }
        }
        v6[1] = v18;
        v6[2] = sub_234207084;
        *v18 = v6;
        v18 = v6;
        *v6 = &v17;
        v11 = v6[3];
        v12 = (uint64_t (*)(uint64_t, uint64_t, __int128 *, uint64_t))v6[4];
        v15 = *a2;
        v16 = *((_QWORD *)a2 + 2);
        result = v12(v11, v4 + 96, &v15, v8);
        if (v17 != &v17)
          result = sub_234207014(v4, v6);
        v13 = v19;
        if (v19)
        {
          v19 = 0;
          result = v13(&v17);
        }
        v6 = (_QWORD *)v20[0];
      }
      while ((_QWORD *)v20[0] != v20);
    }
    v14 = v21;
    if (v21)
    {
      v21 = 0;
      return v14(v20);
    }
  }
  return result;
}

_QWORD *sub_234206F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_234206B60(a1 - 8, a2, a3);
}

_BYTE *sub_234206F6C(_BYTE *result, int a2)
{
  unsigned __int8 v2;

  if (a2)
  {
    v2 = a2 - (result[480] != 1);
    if (result[486] < v2)
      result[486] = v2;
    if (result[488] < v2)
      result[488] = v2;
  }
  return result;
}

_QWORD *sub_234206FA4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  sub_234204F28(a2, 2);
  v4 = 0uLL;
  v5 = 0;
  result = (_QWORD *)sub_2342053FC(a2, (uint64_t)&v4);
  if ((_DWORD)v4)
  {
    v6 = v4;
    v7 = v5;
    return sub_234205CE4(a2, (uint64_t)&v6, 1, 0);
  }
  return result;
}

uint64_t sub_234207014(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  uint64_t (*v5)(_QWORD *);

  v3 = result;
  v4 = (uint64_t (*)(_QWORD *))a2[2];
  if (v4)
  {
    a2[2] = 0;
    result = v4(a2);
    v5 = (uint64_t (*)(_QWORD *))a2[2];
    if (v5)
    {
      a2[2] = 0;
      result = v5(a2);
    }
  }
  a2[2] = sub_234207084;
  a2[1] = *(_QWORD *)(v3 + 504);
  **(_QWORD **)(v3 + 504) = a2;
  *(_QWORD *)(v3 + 504) = a2;
  *a2 = v3 + 496;
  return result;
}

_QWORD *sub_234207084(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  *(_QWORD *)result[1] = *result;
  *result = result;
  result[1] = result;
  result[2] = 0;
  return result;
}

_QWORD *sub_2342070A0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void (*v4)(_QWORD *);

  v2 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      *v2 = v2;
      v2[1] = v2;
      v2[2] = 0;
      v2 = v3;
    }
    while (v3 != a1);
  }
  *a1 = a1;
  a1[1] = a1;
  v4 = (void (*)(_QWORD *))a1[2];
  if (v4)
  {
    a1[2] = 0;
    v4(a1);
  }
  return a1;
}

uint64_t sub_2342070FC(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  uint64_t (*v9)(uint64_t *);
  _QWORD *v10;
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;

  v6 = a2;
  v7 = result;
  if (a2)
  {
    v8 = (uint64_t (*)(uint64_t *))a2[2];
    if (v8)
    {
      a2[2] = 0;
      result = v8(a2);
    }
    v6[2] = (uint64_t)sub_2342071F4;
    *v6 = v7;
    v6[1] = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v6;
    *(_QWORD *)(v7 + 8) = v6;
  }
  if (a3)
  {
    v9 = (uint64_t (*)(uint64_t *))a3[2];
    if (v9)
    {
      a3[2] = 0;
      result = v9(a3);
    }
    a3[2] = (uint64_t)sub_234207238;
    *a3 = v7;
    if (v6)
      v10 = v6;
    else
      v10 = (_QWORD *)v7;
    if (!v6)
      v6 = a3;
    a3[1] = v10[1];
    **(_QWORD **)(v7 + 8) = a3;
    *(_QWORD *)(v7 + 8) = a3;
  }
  if (a4)
  {
    v11 = (uint64_t (*)(uint64_t *))a4[2];
    if (v11)
    {
      a4[2] = 0;
      result = v11(a4);
    }
    a4[2] = (uint64_t)sub_23420727C;
    *a4 = v7;
    if (v6)
      v12 = v6;
    else
      v12 = (_QWORD *)v7;
    a4[1] = v12[1];
    **(_QWORD **)(v7 + 8) = a4;
    *(_QWORD *)(v7 + 8) = a4;
  }
  return result;
}

uint64_t sub_2342071F4(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD **)(result + 8);
  v2 = (_QWORD *)*v1;
  do
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    *v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((_QWORD *)v2[1] == v1);
  *v1 = v2;
  v4 = v2[1];
  do
  {
    v2[1] = v1;
    v2 = (_QWORD *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

uint64_t sub_234207238(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD **)(result + 8);
  v2 = (_QWORD *)*v1;
  do
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    *v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((_QWORD *)v2[1] == v1);
  *v1 = v2;
  v4 = v2[1];
  do
  {
    v2[1] = v1;
    v2 = (_QWORD *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

uint64_t sub_23420727C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD **)(result + 8);
  v2 = (_QWORD *)*v1;
  do
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    *v3 = v3;
    v3[1] = v3;
    v3[2] = 0;
  }
  while ((_QWORD *)v2[1] == v1);
  *v1 = v2;
  v4 = v2[1];
  do
  {
    v2[1] = v1;
    v2 = (_QWORD *)*v2;
  }
  while (v2[1] == v4);
  return result;
}

BOOL sub_2342072C0(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v12;

  v4 = *a1;
  v12 = v4;
  if (v4 != (uint64_t *)a1)
  {
    v5 = v4[1];
    if ((uint64_t (*)(uint64_t))v4[2] == sub_2342071F4)
    {
      *a2 = v4;
      v6 = (uint64_t *)*v4;
      a2 = &v12;
    }
    else
    {
      v6 = 0;
    }
    *a2 = v6;
    v7 = v12;
    if (v12[1] == v5 && (uint64_t (*)(uint64_t))v12[2] == sub_234207238)
    {
      *a3 = v12;
      v8 = (uint64_t *)*v7;
      a3 = &v12;
    }
    else
    {
      v8 = 0;
    }
    *a3 = v8;
    v9 = v12;
    if (v12[1] == v5 && (uint64_t (*)(uint64_t))v12[2] == sub_23420727C)
    {
      *a4 = v12;
      v10 = (uint64_t *)*v9;
      a4 = &v12;
    }
    else
    {
      v10 = 0;
    }
    *a4 = v10;
  }
  return v4 != (uint64_t *)a1;
}

uint64_t sub_234207388@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v6;
  int v7;
  unsigned __int16 v8;

  v8 = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((result & 1) != 0)
  {
    v6 = 27;
    v7 = 47;
  }
  else
  {
    result = (uint64_t)sub_234207568(a1 + 8, &v8, &v8);
    v7 = 0;
    v6 = 29;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/app/PendingResponseTrackerImpl.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t *sub_2342073FC@<X0>(_QWORD *a1@<X0>, unsigned __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  int v6;
  int v7;
  unsigned __int16 v8;

  v8 = a2;
  result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((_DWORD)result)
  {
    result = sub_2342079A4(a1 + 1, &v8);
    v6 = 0;
    v7 = 36;
  }
  else
  {
    v7 = 34;
    v6 = 16;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = "src/app/PendingResponseTrackerImpl.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

BOOL sub_23420746C(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v3;

  v3 = a2;
  return sub_2342079D8((_QWORD *)(a1 + 8), &v3) != 0;
}

uint64_t sub_23420749C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_2342074A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  __int16 v7;
  char v8;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  if (result)
  {
    v5 = a1 + 1;
    v6 = a1[3];
    v7 = *(_WORD *)(v6 + 16);
    result = sub_234207A8C(v5, (uint64_t *)v6);
    *(_WORD *)(a2 + 2) = v7;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)a2 = v8;
  return result;
}

_QWORD *sub_2342074F8(_QWORD *a1)
{
  *a1 = &off_250516328;
  sub_2341FF4B8((uint64_t)(a1 + 1));
  return a1;
}

void sub_234207528(_QWORD *a1)
{
  *a1 = &off_250516328;
  sub_2341FF4B8((uint64_t)(a1 + 1));
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234207568(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_234207770(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_234207770(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_23420784C(a1, prime);
  }
}

void sub_23420784C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_233CB8554();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t *sub_2342079A4(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_2342079D8(a1, a2);
  if (result)
  {
    sub_234207A8C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t **sub_2342079D8(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t sub_234207A8C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_234207ACC(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_234207ACC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_234207C00(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _BOOL8 v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  uint8_t *v18;
  unint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  uint8_t buf[4];
  _BYTE v43[10];
  _BYTE v44[10];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2340FAB58(a2);
  if (v10)
  {
    v11 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(unsigned __int16 *)(a2 + 112);
      if (sub_2341AD080(a2))
        v13 = 105;
      else
        v13 = 114;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v43 = v12;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v13;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Dropping Timed Request on group exchange %u%c", buf, 0xEu);
    }
    if (sub_234114844(1u))
    {
      sub_2341AD080(a2);
      sub_2341147D0(0xDu, 1);
    }
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/TimedHandler.cpp";
    v14 = 42;
LABEL_10:
    *(_DWORD *)(a5 + 16) = v14;
    return;
  }
  if (*(_BYTE *)(a1 + 8) == 2)
  {
    v19 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    v20 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *(unsigned __int16 *)(a2 + 112);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v43 = HIDWORD(v19);
      if (sub_2341AD080(a2))
        v22 = 105;
      else
        v22 = 114;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = v19;
      *(_WORD *)v44 = 2048;
      *(_QWORD *)&v44[2] = a1;
      v45 = 1024;
      v46 = v21;
      v47 = 1024;
      v48 = v22;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "Timed following action arrived at 0x%08X%08X: handler %p exchange %u%c", buf, 0x24u);
    }
    if (sub_234114844(3u))
    {
      sub_2341AD080(a2);
      sub_2341147D0(0xDu, 3);
    }
    if (*(_QWORD *)(a1 + 24) < v19)
    {
      v23 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = *(unsigned __int16 *)(a2 + 112);
        v25 = sub_2341AD080(a2);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)v43 = a1;
        if (v25)
          v26 = 105;
        else
          v26 = 114;
        *(_WORD *)&v43[8] = 1024;
        *(_DWORD *)v44 = v24;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v26;
        _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Timeout expired: handler %p exchange %u%c", buf, 0x18u);
      }
      if (sub_234114844(1u))
      {
        sub_2341AD080(a2);
        sub_2341147D0(0xDu, 1);
      }
      v18 = (uint8_t *)a5;
      v27 = 148;
      goto LABEL_51;
    }
    if (!*((_WORD *)a3 + 2))
    {
      v32 = *((unsigned __int16 *)a3 + 3);
      v33 = *a3;
      if (v32 == 1 && v33 == 8)
      {
        v34 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          v35 = *(unsigned __int16 *)(a2 + 112);
          v36 = sub_2341AD080(a2);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)v43 = a1;
          if (v36)
            v37 = 105;
          else
            v37 = 114;
          *(_WORD *)&v43[8] = 1024;
          *(_DWORD *)v44 = v35;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v37;
          _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_INFO, "Handing timed invoke to IM engine: handler %p exchange %u%c", buf, 0x18u);
        }
        if (sub_234114844(3u))
        {
          sub_2341AD080(a2);
          sub_2341147D0(0xDu, 3);
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, _QWORD *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a1, a2, a3, a4);
        *(_DWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = "src/app/TimedHandler.cpp";
        v14 = 79;
        goto LABEL_10;
      }
      if (v32 == 1 && v33 == 6)
      {
        v38 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          v39 = *(unsigned __int16 *)(a2 + 112);
          v40 = sub_2341AD080(a2);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)v43 = a1;
          if (v40)
            v41 = 105;
          else
            v41 = 114;
          *(_WORD *)&v43[8] = 1024;
          *(_DWORD *)v44 = v39;
          *(_WORD *)&v44[4] = 1024;
          *(_DWORD *)&v44[6] = v41;
          _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_INFO, "Handing timed write to IM engine: handler %p exchange %u%c", buf, 0x18u);
        }
        if (sub_234114844(3u))
        {
          sub_2341AD080(a2);
          sub_2341147D0(0xDu, 3);
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, unsigned __int8 *, _QWORD *))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a1, a2, a3, a4);
        *(_DWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = "src/app/TimedHandler.cpp";
        v14 = 87;
        goto LABEL_10;
      }
    }
    goto LABEL_42;
  }
  if (*(_BYTE *)(a1 + 8))
  {
LABEL_42:
    v28 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = *(unsigned __int16 *)(a2 + 112);
      v30 = sub_2341AD080(a2);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)v43 = a1;
      if (v30)
        v31 = 105;
      else
        v31 = 114;
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)v44 = v29;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v31;
      _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Unexpected unknown message in tiemd interaction: handler %p exchange %u%c", buf, 0x18u);
    }
    if (sub_234114844(1u))
    {
      sub_2341AD080(a2);
      sub_2341147D0(0xDu, 1);
    }
    v18 = (uint8_t *)a5;
    goto LABEL_50;
  }
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 10)
    sub_23425F078(v10);
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  sub_234208380(a1, a2, a4, (_QWORD *)a5);
  if (*(_DWORD *)a5)
  {
    v15 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *(unsigned __int16 *)(a2 + 112);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)v43 = a1;
      if (sub_2341AD080(a2))
        v17 = 105;
      else
        v17 = 114;
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)v44 = v16;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v17;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Failed to parse Timed Request action: handler %p exchange %u%c", buf, 0x18u);
    }
    if (sub_234114844(1u))
    {
      sub_2341AD080(a2);
      sub_2341147D0(0xDu, 1);
    }
    v18 = buf;
LABEL_50:
    v27 = 128;
LABEL_51:
    sub_234215204(v27, a2, 0, (uint64_t)v18);
  }
}

void sub_234208380(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  NSObject *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned __int16 v21;
  int v22[20];
  _BYTE v23[72];
  uint64_t v24;
  uint64_t buf;
  __int16 v26;
  _BYTE v27[14];
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v23);
  v24 = 0;
  sub_233C11670((uint64_t)v23, a3);
  sub_23411E074((uint64_t)v22);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23411DF84((uint64_t)v22, (uint64_t)v23, a4);
  if (!*(_DWORD *)a4)
  {
    v21 = 0;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_23411C298(v22, &v21, a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_23411DFEC((uint64_t)v22, a4);
      if (!*(_DWORD *)a4)
      {
        v8 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = v21;
          v10 = *(unsigned __int16 *)(a2 + 112);
          v11 = sub_2341AD080(a2);
          buf = __PAIR64__(v9, 67109888);
          v26 = 2048;
          if (v11)
            v12 = 105;
          else
            v12 = 114;
          *(_QWORD *)v27 = a1;
          *(_WORD *)&v27[8] = 1024;
          *(_DWORD *)&v27[10] = v10;
          v28 = 1024;
          v29 = v12;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Got Timed Request with timeout %u: handler %p exchange %u%c", (uint8_t *)&buf, 0x1Eu);
        }
        if (sub_234114844(3u))
        {
          sub_2341AD080(a2);
          sub_2341147D0(0xDu, 3);
        }
        v13 = v21;
        sub_233CB4208(a2, &buf);
        v14 = sub_2341CD548(buf, 2000);
        if (v14 <= v13)
          v15 = v13;
        else
          v15 = v14;
        sub_2341AD100(a2, v15);
        (*(void (**)(uint64_t))(*(_QWORD *)buf + 32))(buf);
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        sub_234215204(0, a2, 1, (uint64_t)a4);
        if (!*(_DWORD *)a4)
        {
          *(_BYTE *)(a1 + 8) = 2;
          *(_QWORD *)(a1 + 24) = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10)
                               + v13;
          v16 = sub_234117B80(0xDu, "DataManagement");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            v17 = *(_QWORD *)(a1 + 24);
            v18 = *(unsigned __int16 *)(a2 + 112);
            v19 = sub_2341AD080(a2);
            LODWORD(buf) = 67110144;
            HIDWORD(buf) = HIDWORD(v17);
            if (v19)
              v20 = 105;
            else
              v20 = 114;
            v26 = 1024;
            *(_DWORD *)v27 = v17;
            *(_WORD *)&v27[4] = 2048;
            *(_QWORD *)&v27[6] = a1;
            v28 = 1024;
            v29 = v18;
            v30 = 1024;
            v31 = v20;
            _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "Timed Request time limit 0x%08X%08X: handler %p exchange %u%c", (uint8_t *)&buf, 0x24u);
          }
          if (sub_234114844(3u))
          {
            sub_2341AD080(a2);
            sub_2341147D0(0xDu, 3);
          }
          *(_DWORD *)a4 = 0;
          a4[1] = "src/app/TimedHandler.cpp";
          *((_DWORD *)a4 + 4) = 139;
        }
      }
    }
  }
  if (v24)
    sub_23411814C(v24);
}

uint64_t sub_2342086F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a1);
}

void sub_234208708()
{
  JUMPOUT(0x23493E704);
}

void sub_23420871C(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  char v9[64];
  _QWORD v10[3];
  char v11;
  uint64_t v12;

  sub_234118674(0x19uLL, 0x26u, &v12);
  if (v12)
  {
    sub_234106C48((uint64_t)v9);
    v10[1] = 0;
    v10[2] = 0;
    v10[0] = &unk_250504030;
    v11 = 0;
    sub_233CAF098((uint64_t)v10, &v12, 0);
    sub_234106CA8((uint64_t)v9, (uint64_t)v10, 0xFFFFFFFF, (uint64_t)&v7);
    sub_23411BFF8((uint64_t)&v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23411E904((uint64_t)&v7, v9, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      sub_23411EDD8((uint64_t)&v7, a2);
      *(_OWORD *)a3 = v7;
      a3[2] = v8;
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_233C115F0((uint64_t)v9, &v12, a3);
        if (!*(_DWORD *)a3)
        {
          v6 = 1;
          sub_2341AD108(a1, 0x10000u, 10, &v12, &v6, (uint64_t)a3);
        }
      }
    }
    sub_2340F6E6C(v10);
    if (v12)
      sub_23411814C(v12);
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/app/TimedRequest.cpp";
    *((_DWORD *)a3 + 4) = 40;
  }
}

uint64_t sub_234208884(uint64_t a1)
{
  uint64_t result;

  sub_2342088C8(a1, 5);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a1);
  return result;
}

uint64_t sub_2342088C8(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 48) = a2;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(int *)(a1 + 48);
    if (v4 > 5)
      v5 = "N/A";
    else
      v5 = off_250516498[v4];
    *(_DWORD *)buf = 68157954;
    v8 = 10;
    v9 = 2080;
    v10 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "WriteClient moving to [%10.10s]", buf, 0x12u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 3);
  return result;
}

void sub_2342089EC(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  _BYTE v19[80];
  int v20[20];
  _BYTE v21[16];
  uint64_t v22;
  _BYTE v23[72];
  uint64_t v24;

  sub_234104468((uint64_t)v23);
  v24 = 0;
  sub_234104468((uint64_t)v21);
  sub_23411E074((uint64_t)v20);
  sub_23411E074((uint64_t)v19);
  sub_233C11670((uint64_t)v23, a2);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23411DF84((uint64_t)v20, (uint64_t)v23, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    sub_23411E0D8(v20, (uint64_t)v19, &v16);
    v6 = v16;
    if ((_DWORD)v16 == 33)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/app/WriteClient.cpp";
      v7 = 63;
LABEL_4:
      *(_DWORD *)(a3 + 16) = v7;
    }
    else
    {
      v8 = v17;
      v9 = v18;
      *(_QWORD *)a3 = v16;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v9;
      if (!v6)
      {
        sub_23411E0BC((uint64_t)v19, (uint64_t)v21);
        while (1)
        {
          sub_2341058CC((uint64_t)v21, &v16);
          v10 = v16;
          if ((_DWORD)v16)
            break;
          if (v22 != 256)
          {
            *(_DWORD *)a3 = 36;
            *(_QWORD *)(a3 + 8) = "src/app/WriteClient.cpp";
            v7 = 71;
            goto LABEL_4;
          }
          sub_23411E074((uint64_t)&v16);
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23411E964((uint64_t)&v16, (uint64_t)v21, (_QWORD *)a3);
          if (!*(_DWORD *)a3)
          {
            *(_QWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            sub_234208BAC(a1, (int *)&v16, (_QWORD *)a3);
            if (!*(_DWORD *)a3)
              continue;
          }
          goto LABEL_6;
        }
        v11 = HIDWORD(v16);
        v12 = v17;
        v13 = v18;
        v14 = HIDWORD(v18);
        v15 = (_DWORD)v16 == 33;
        if ((_DWORD)v16 == 33)
        {
          v10 = 0;
          v12 = "src/app/WriteClient.cpp";
          v13 = 82;
        }
        *(_DWORD *)a3 = v10;
        *(_DWORD *)(a3 + 4) = v11;
        *(_QWORD *)(a3 + 8) = v12;
        *(_DWORD *)(a3 + 16) = v13;
        *(_DWORD *)(a3 + 20) = v14;
        if (v15)
          sub_23411DFEC((uint64_t)v20, (_QWORD *)a3);
      }
    }
  }
LABEL_6:
  if (v24)
    sub_23411814C(v24);
}

void sub_234208BAC(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  __int16 v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  _BYTE v13[20];
  _BYTE v14[85];
  __int16 v15;
  char v16;
  int v17[20];

  *(_OWORD *)a3 = xmmword_250516428;
  a3[2] = 511;
  sub_23411E074((uint64_t)v17);
  v15 = 0;
  sub_23411E074((uint64_t)v14);
  v11 = 0;
  v12 = 0;
  v13[12] = 0;
  memset(v13, 0, 11);
  sub_23411BEE0(a2, (uint64_t)v17, a3);
  if (!*(_DWORD *)a3)
  {
    sub_23411B170(v17, &v11, 0, &v9);
    *(_OWORD *)a3 = v9;
    a3[2] = v10;
    if (!*(_DWORD *)a3)
    {
      sub_23411BC0C(a2, (uint64_t)v14, &v9);
      *(_OWORD *)a3 = v9;
      a3[2] = v10;
      if (!*(_DWORD *)a3)
      {
        sub_23411E42C((uint64_t)v14, &v15, &v9);
        *(_OWORD *)a3 = v9;
        a3[2] = v10;
        if (!*(_DWORD *)a3)
        {
          v6 = *(_QWORD *)(a1 + 40);
          if (v6)
          {
            v7 = v15;
            if (HIBYTE(v15))
              v8 = v16;
            (*(void (**)(uint64_t, uint64_t, __int16 *, __int16 *))(*(_QWORD *)v6 + 16))(v6, a1, &v11, &v7);
          }
        }
      }
    }
  }
}

void sub_234208CF0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  char v17;

  v6 = sub_23411ADE0(a1 + 192);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 208);
  if (!*(_DWORD *)a3)
  {
    v7 = v6;
    if (*((_BYTE *)a2 + 16))
    {
      v8 = (unsigned int *)sub_233C20E2C((_BYTE *)a2 + 16);
      sub_23411AC84(v7, *v8);
      *(_BYTE *)(a1 + 338) = 1;
    }
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
    if (!*(_DWORD *)a3)
    {
      v9 = sub_23411AC30(v7);
      v10 = v9;
      v11 = *a2;
      if (v11 != 0xFFFF)
        sub_23411B488(v9, v11);
      v12 = sub_23411B4DC(v10, *((_DWORD *)a2 + 1));
      sub_23411B530(v12, *((_DWORD *)a2 + 2));
      v13 = *((unsigned __int8 *)a2 + 14);
      if (v13 >= 2)
      {
        if (v13 != 4)
        {
          v15 = 118;
          v14 = 108;
LABEL_13:
          *(_DWORD *)a3 = v14;
          *(_QWORD *)(a3 + 8) = "src/app/WriteClient.cpp";
          *(_DWORD *)(a3 + 16) = v15;
          return;
        }
        LOBYTE(v16) = 0;
        v17 = 0;
        sub_23411B584(v10, &v16);
      }
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411ACD8(v10, a3);
      if (*(_DWORD *)a3)
        return;
      v14 = 0;
      v15 = 123;
      goto LABEL_13;
    }
  }
}

void sub_234208E28(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23411AE50(a1 + 192);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_23411ACD8(v4, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_2342088C8(a1, 1);
    *(_DWORD *)a2 = 0;
    a2[1] = "src/app/WriteClient.cpp";
    *((_DWORD *)a2 + 4) = 131;
  }
}

uint64_t sub_234208E8C(uint64_t a1)
{
  return *(_QWORD *)(sub_23411AE50(a1 + 192) + 24);
}

void sub_234208EA8(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = 0;
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    v5 = *(_QWORD *)(a1 + 176);
    if (v5)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      if (*(_WORD *)(v5 + 60) != 21169)
      {
        v7 = 175;
        v8 = 3;
        goto LABEL_9;
      }
      v6 = *(_DWORD *)(v5 + 52);
      if (v6 <= 6)
      {
        v7 = 176;
        v8 = 11;
LABEL_9:
        *(_DWORD *)a3 = v8;
        a3[1] = "src/lib/core/TLVWriter.h";
        goto LABEL_10;
      }
      *(_DWORD *)(v5 + 52) = v6 - 7;
      *(_DWORD *)(v5 + 40) += 7;
      sub_23411ACD8(a1 + 192, (uint64_t)a3);
      if (*(_DWORD *)a3)
        goto LABEL_11;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v10 = sub_23411E318(a1 + 152, a2);
      sub_23411E36C(v10, (uint64_t)a3);
      if (*(_DWORD *)a3)
        goto LABEL_11;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_233C115F0(a1 + 56, &v12, a3);
      if (*(_DWORD *)a3)
        goto LABEL_11;
      v11 = *(_QWORD **)(a1 + 328);
      if (v11)
      {
        sub_2341182AC(v11, &v12);
      }
      else
      {
        *(_QWORD *)(a1 + 328) = v12;
        v12 = 0;
      }
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/WriteClient.cpp";
      v7 = 153;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      a3[1] = "src/app/WriteClient.cpp";
      v7 = 145;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    a3[1] = "src/app/WriteClient.cpp";
    v7 = 142;
  }
LABEL_10:
  *((_DWORD *)a3 + 4) = v7;
LABEL_11:
  if (v12)
    sub_23411814C(v12);
}

void sub_234209028(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/WriteClient.cpp";
    *(_DWORD *)(a2 + 16) = 162;
  }
  else
  {
    sub_234209054(a1, a2);
  }
}

void sub_234209054(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  _BYTE v8[24];

  if (*(_DWORD *)(a1 + 48) != 1
    || (*(_QWORD *)a2 = 0,
        *(_QWORD *)(a2 + 8) = 0,
        *(_QWORD *)(a2 + 16) = 0,
        sub_234208EA8(a1, 1, (_QWORD *)a2),
        !*(_DWORD *)a2))
  {
    if (*(_BYTE *)(a1 + 320) && *(_QWORD *)(a1 + 328))
    {
      *(_DWORD *)a2 = 11;
      *(_QWORD *)(a2 + 8) = "src/app/WriteClient.cpp";
      *(_DWORD *)(a2 + 16) = 175;
      return;
    }
    sub_234118674(0x4AAuLL, 0x26u, &v7);
    if (v7)
    {
      if ((unint64_t)sub_23411828C(v7) < 0x4AB)
        v4 = 23;
      else
        v4 = (unsigned __int16)(sub_23411828C(v7) - 1171);
      sub_233CAF098(a1 + 120, &v7, 0);
      sub_234106CA8(a1 + 56, a1 + 120, 0xFFFFFFFF, (uint64_t)v8);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_234106E50(a1 + 56, v4, a2);
      if (*(_DWORD *)a2)
        goto LABEL_16;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v6 = (_OWORD *)(a1 + 152);
      *(_QWORD *)(a2 + 16) = 0;
      sub_23411E904(a1 + 152, (char *)(a1 + 56), a2);
      if (*(_DWORD *)a2)
        goto LABEL_16;
      sub_23411B3E0(a1 + 152, *(unsigned __int8 *)(a1 + 324));
      sub_23411D664(a1 + 152, *(unsigned __int8 *)(a1 + 320));
      *(_OWORD *)a2 = *v6;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 168);
      if (*(_DWORD *)a2)
        goto LABEL_16;
      sub_23411EE60(a1 + 152);
      *(_OWORD *)a2 = *v6;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 168);
      if (*(_DWORD *)a2)
        goto LABEL_16;
      if (*(_QWORD *)(a1 + 176))
      {
        *(_DWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = "src/app/WriteClient.cpp";
        v5 = 212;
      }
      else
      {
        *(_DWORD *)a2 = 3;
        *(_QWORD *)(a2 + 8) = "src/app/WriteClient.cpp";
        v5 = 210;
      }
    }
    else
    {
      *(_DWORD *)a2 = 11;
      *(_QWORD *)(a2 + 8) = "src/app/WriteClient.cpp";
      v5 = 178;
    }
    *(_DWORD *)(a2 + 16) = v5;
LABEL_16:
    if (v7)
      sub_23411814C(v7);
  }
}

void sub_234209250(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  int v9;
  int v10;
  _BYTE v11[72];

  sub_234104468((uint64_t)v11);
  sub_2341045C8((uint64_t)v11, a3);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_234208CF0(a1, a2, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    v8 = *(char **)(sub_23411AE50(a1 + 192) + 24);
    if (!v8)
    {
      v10 = 224;
      v9 = 3;
      goto LABEL_7;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_2341079F0(v8, 2uLL, (uint64_t)v11, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_234208E28(a1, a4);
      if (!*(_DWORD *)a4)
      {
        v9 = 0;
        v10 = 227;
LABEL_7:
        *(_DWORD *)a4 = v9;
        a4[1] = "src/app/WriteClient.cpp";
        *((_DWORD *)a4 + 4) = v10;
      }
    }
  }
}

double sub_234209330@<D0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  sub_234106C48((uint64_t)&v21);
  v8 = *(__int128 **)(a1 + 216);
  v9 = v8[3];
  v11 = *v8;
  v10 = v8[1];
  v23 = v8[2];
  v24 = v9;
  v21 = v11;
  v22 = v10;
  v19 = 0uLL;
  v20 = 0;
  sub_234209250(a1, a2, a3, &v19);
  if ((_DWORD)v19 == 25 || (_DWORD)v19 == 11)
  {
    v12 = *(_OWORD **)(a1 + 216);
    v13 = v21;
    v14 = v22;
    v15 = v24;
    v12[2] = v23;
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
    sub_23411C030(a1 + 192);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234209054(a1, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return result;
    sub_234209250(a1, a2, a3, &v17);
    v19 = v17;
    v20 = v18;
  }
  result = *(double *)&v19;
  *(_OWORD *)a4 = v19;
  a4[2] = v20;
  return result;
}

void sub_234209420(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int v9;
  int v10;
  const char *v11;
  int v12;
  unsigned __int8 *v13;
  const char *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  char v20;
  int v22;
  _BYTE v23[72];
  _BYTE v24[72];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    *(_QWORD *)(a4 + 8) = "src/app/WriteClient.cpp";
    *(_DWORD *)(a4 + 16) = 162;
  }
  else
  {
    sub_234209054(a1, a4);
    if (*(_DWORD *)a4)
      return;
  }
  if (*((_BYTE *)a2 + 14) || sub_23410462C(a3) != 22)
  {
    sub_234209330(a1, (unsigned __int16 *)a2, a3, (_QWORD *)a4);
  }
  else
  {
    sub_234104468((uint64_t)v24);
    sub_234104468((uint64_t)v23);
    v17 = *a2;
    v18 = *((_DWORD *)a2 + 2);
    v19 = *((_WORD *)a2 + 6);
    v20 = *((_BYTE *)a2 + 14);
    if (*((_BYTE *)a2 + 16))
      v22 = *((_DWORD *)a2 + 5);
    sub_2341045C8((uint64_t)v24, a3);
    sub_2341053D4((uint64_t)v24, (uint64_t)v23, (uint64_t)&v13);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v13 = 0;
    v14 = 0;
    sub_233CF59BC(a1, (unsigned __int16 *)&v17, &v13, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      v20 = 4;
      while (1)
      {
        sub_2341058CC((uint64_t)v23, &v13);
        if ((_DWORD)v13)
          break;
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        sub_234209330(a1, (unsigned __int16 *)&v17, (uint64_t)v23, (_QWORD *)a4);
        if (*(_DWORD *)a4)
          return;
      }
      v8 = HIDWORD(v13);
      v9 = v16;
      if ((_DWORD)v13 == 33)
        v10 = 0;
      else
        v10 = (int)v13;
      if ((_DWORD)v13 == 33)
        v11 = "src/app/WriteClient.cpp";
      else
        v11 = v14;
      if ((_DWORD)v13 == 33)
        v12 = 280;
      else
        v12 = v15;
      *(_DWORD *)a4 = v10;
      *(_DWORD *)(a4 + 4) = v8;
      *(_QWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 16) = v12;
      *(_DWORD *)(a4 + 20) = v9;
    }
  }
}

const char *sub_2342095D4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 48);
  if (v1 > 5)
    return "N/A";
  else
    return off_250516498[v1];
}

uint64_t sub_2342095FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  int v5;
  int v10;
  const char *v11;
  int v12;
  NSObject *v13;
  char *v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  uint8_t buf[4];
  _BYTE v25[12];
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    v10 = 3;
    v11 = "src/app/WriteClient.cpp";
    v12 = 325;
    goto LABEL_5;
  }
  sub_234208EA8(a1, 0, buf);
  v10 = *(_DWORD *)buf;
  v4 = *(_DWORD *)v25;
  v5 = v27;
  if (*(_DWORD *)buf)
  {
    v11 = *(const char **)&v25[4];
    v12 = v26;
LABEL_5:
    v13 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v10;
      *(_DWORD *)v25 = v4;
      *(_QWORD *)&v25[4] = v11;
      v26 = v12;
      v27 = v5;
      v14 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v25 = v14;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Write client failed to SendWriteRequest: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = v10;
      *(_DWORD *)v25 = v4;
      *(_QWORD *)&v25[4] = v11;
      v26 = v12;
      v27 = v5;
      sub_2341083CC((const char **)buf, 1);
      result = sub_2341147D0(0xDu, 1);
    }
LABEL_9:
    *(_DWORD *)a4 = v10;
    *(_DWORD *)(a4 + 4) = v4;
    *(_QWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 20) = v5;
    return result;
  }
  v16 = sub_2341AE734(*(_QWORD *)(a1 + 8), a2, a1, 1u);
  v11 = "src/app/WriteClient.cpp";
  if (!v16)
  {
    v10 = 11;
    v12 = 333;
    goto LABEL_5;
  }
  v17 = v16;
  sub_233CF4DD8(a1 + 16);
  *(_QWORD *)(a1 + 32) = v17;
  v17[5] = a1 + 16;
  v18 = sub_2340F3F3C(a1 + 16);
  result = sub_2340FAB58(v18);
  if (!(_DWORD)result || !*(_BYTE *)(a1 + 338))
  {
    v19 = sub_2340F3F3C(a1 + 16);
    if (a3)
      sub_2341AD100(v19, a3);
    else
      sub_2341AD0C8(v19, 2000);
    if (*(_BYTE *)(a1 + 320))
    {
      v20 = *(_QWORD *)(a1 + 32);
      v21 = sub_233CBCEC0((_BYTE *)(a1 + 320));
      sub_23420871C(v20, *(unsigned __int16 *)v21, buf);
      v10 = *(_DWORD *)buf;
      v4 = *(_DWORD *)v25;
      v11 = *(const char **)&v25[4];
      v12 = v26;
      v5 = v27;
      if (*(_DWORD *)buf)
        goto LABEL_5;
      sub_2342088C8(a1, 2);
    }
    else
    {
      sub_234209924(a1, buf);
      v10 = *(_DWORD *)buf;
      v4 = *(_DWORD *)v25;
      v11 = *(const char **)&v25[4];
      v12 = v26;
      v5 = v27;
      if (*(_DWORD *)buf)
        goto LABEL_5;
    }
    v22 = *a2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22) == 3
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22), (_DWORD)result == 4))
    {
      v23 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_INFO, "Closing on group Communication ", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xDu, 3);
      sub_2342088C8(a1, 5);
      result = *(_QWORD *)(a1 + 40);
      if (result)
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a1);
    }
    v10 = 0;
    goto LABEL_9;
  }
  *(_DWORD *)a4 = 42;
  *(_QWORD *)(a4 + 8) = "src/app/WriteClient.cpp";
  *(_DWORD *)(a4 + 16) = 338;
  return result;
}

void sub_234209924(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  sub_234118924((_QWORD **)(a1 + 328), &v10);
  v4 = sub_2340F3F3C(a1 + 16);
  v5 = sub_2340FAB58(v4);
  if (*(_QWORD *)(a1 + 328) && v5)
  {
    v6 = 400;
    v7 = 3;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v8 = sub_2340F3F3C(a1 + 16);
    v9 = 1;
    sub_2341AD108(v8, 0x10000u, 6, &v10, &v9, (uint64_t)a2);
    if (*(_DWORD *)a2)
      goto LABEL_7;
    sub_2342088C8(a1, 3);
    v7 = 0;
    v6 = 407;
  }
  *(_DWORD *)a2 = v7;
  a2[1] = "src/app/WriteClient.cpp";
  *((_DWORD *)a2 + 4) = v6;
LABEL_7:
  if (v10)
    sub_23411814C(v10);
}

void sub_2342099F4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  if (*(_DWORD *)(a1 + 48) == 3 && !*(_QWORD *)(a1 + 328))
    sub_2342088C8(a1, 4);
  *(_OWORD *)a5 = xmmword_2505163E0;
  a5[2] = 422;
  if (*(_QWORD *)(a1 + 32) != a2)
  {
    v10 = 0;
    *(_DWORD *)a5 = 3;
    a5[1] = "src/app/WriteClient.cpp";
    *((_DWORD *)a5 + 4) = 428;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 48) != 2)
  {
    if (*((_WORD *)a3 + 2))
      goto LABEL_14;
    v15 = *((unsigned __int16 *)a3 + 3);
    v16 = *a3;
    if (v15 == 1 && v16 == 7)
    {
      sub_2342089EC(a1, a4, (uint64_t)a5);
      if (!*(_DWORD *)a5)
      {
        if (!*(_QWORD *)(a1 + 328))
        {
          v10 = 0;
          goto LABEL_18;
        }
        sub_234209924(a1, &v21);
        v10 = 0;
        *(_OWORD *)a5 = v21;
        v11 = v22;
        goto LABEL_32;
      }
LABEL_17:
      v10 = 1;
      goto LABEL_18;
    }
    if (v15 == 1 && v16 == 1)
    {
      v21 = xmmword_250516410;
      v22 = 464;
      sub_2342153C0(a4, (uint64_t)&v21, a5);
      if (*(_DWORD *)a5)
        goto LABEL_17;
      *(_OWORD *)a5 = v21;
      a5[2] = v22;
      if (*(_DWORD *)a5)
        goto LABEL_17;
      *(_DWORD *)a5 = 42;
      a5[1] = "src/app/WriteClient.cpp";
      v12 = 467;
    }
    else
    {
LABEL_14:
      *(_DWORD *)a5 = 42;
      a5[1] = "src/app/WriteClient.cpp";
      v12 = 471;
    }
LABEL_16:
    *((_DWORD *)a5 + 4) = v12;
    goto LABEL_17;
  }
  if (*((_WORD *)a3 + 2) || *((_WORD *)a3 + 3) != 1 || *a3 != 1)
  {
    *(_DWORD *)a5 = 42;
    a5[1] = "src/app/WriteClient.cpp";
    v12 = 444;
    goto LABEL_16;
  }
  v21 = xmmword_2505163F8;
  v22 = 436;
  sub_2342153C0(a4, (uint64_t)&v21, a5);
  v10 = *(_DWORD *)a5 != 0;
  if (!*(_DWORD *)a5)
  {
    *(_OWORD *)a5 = v21;
    a5[2] = v22;
    if (!*(_DWORD *)a5)
    {
      sub_234209924(a1, &v19);
      *(_OWORD *)a5 = v19;
      v11 = v20;
LABEL_32:
      a5[2] = v11;
    }
  }
LABEL_18:
  v13 = *(_QWORD *)(a1 + 40);
  if (v13 && *(_DWORD *)a5)
  {
    v17 = *(_OWORD *)a5;
    v18 = a5[2];
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v13 + 24))(v13, a1, &v17);
  }
  if (v10)
    sub_234215204(0x80u, a2, 0, (uint64_t)&v21);
  if (*(_DWORD *)(a1 + 48) != 3)
  {
    sub_2342088C8(a1, 5);
    v14 = *(_QWORD *)(a1 + 40);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, a1);
  }
}

uint64_t sub_234209CCC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  const char *v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_2341AD080(a2))
      v6 = 105;
    else
      v6 = 114;
    *(_DWORD *)buf = 67109376;
    v13 = v5;
    v14 = 1024;
    v15 = v6;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive write response from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_234114844(1u))
  {
    sub_2341AD080(a2);
    sub_2341147D0(0xDu, 1);
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v9 = 50;
    v10 = "src/app/WriteClient.cpp";
    v11 = 504;
    (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 24))(v7, a1, &v9);
  }
  sub_2342088C8(a1, 5);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a1);
  return result;
}

void sub_234209E44(_QWORD *a1)
{
  sub_234209E68(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234209E68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250516450;
  sub_2341B1F64("src/app/WriteClient.h", 145);
  v2 = a1[41];
  if (v2)
    sub_23411814C(v2);
  a1[41] = 0;
  v3 = a1[39];
  if (v3)
    sub_23411814C(v3);
  a1[39] = 0;
  sub_2340F6E6C(a1 + 15);
  a1[2] = &off_2504F0DD0;
  sub_233CF4DD8((uint64_t)(a1 + 2));
  return a1;
}

double sub_234209EE4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 40;
  *(_QWORD *)(a1 + 56) = a1 + 40;
  *(_QWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = a2;
  return result;
}

uint64_t sub_234209F10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a2 + 16) = 49;
  return result;
}

uint64_t sub_234209F30(uint64_t a1)
{
  char v3[2];

  v3[0] = 0;
  sub_234209F74(a1, v3);
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return sub_234115DFC((_QWORD *)(a1 + 40), a1 + 24, (unsigned int (*)(uint64_t))sub_23420C510);
}

uint64_t sub_234209F74(uint64_t a1, char *a2)
{
  uint64_t v3;
  char v4;
  _BYTE v6[2];

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *a2;
  if (*a2)
    v6[1] = a2[1];
  v6[0] = v4;
  sub_234115DFC((_QWORD *)(v3 + 1640), (uint64_t)v6, (unsigned int (*)(uint64_t))sub_23420C93C);
  return sub_23420B974(a1);
}

uint64_t sub_234209FCC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int *v8;
  unsigned __int16 v10[2];
  int v11;

  if (a2)
  {
    v4 = a2;
    v5 = 0;
    v6 = 0;
    do
    {
      if (*a3 == *(unsigned __int16 *)(v4 + 12))
      {
        v7 = *((_DWORD *)a3 + 1);
        if (v7 == *(_DWORD *)v4)
        {
          v10[0] = *a3;
          v11 = v7;
          v8 = (int *)sub_233C20E2C((_BYTE *)(v4 + 4));
          v5 |= !sub_233CBC97C(v10, *v8);
          v6 = 1;
        }
      }
      v4 = *(_QWORD *)(v4 + 16);
    }
    while (v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  return v6 & ~v5 & 1;
}

void sub_23420A06C(_OWORD *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unsigned __int16 *a5@<X5>, _QWORD *a6@<X8>)
{
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v12 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = *(_DWORD *)(a4 + 4);
    v14 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)buf = 67109376;
    v18 = v13;
    v19 = 1024;
    v20 = v14;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "<RE:Run> Cluster %x, Attribute %x is dirty", buf, 0xEu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  v15 = sub_234215588();
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 16))(v15, 0, 0, a4);
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  sub_233CBA08C(a1, a2, (unsigned __int16 *)a4, a3, a5, (uint64_t)a6);
  if (!*(_DWORD *)a6)
  {
    v16 = sub_234215588();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 0, 1, a4);
    *(_DWORD *)a6 = 0;
    a6[1] = "src/app/reporting/Engine.cpp";
    *((_DWORD *)a6 + 4) = 98;
  }
}

void sub_23420A1F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, BOOL *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  int v22;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  NSObject *v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  int v57;
  int v58;
  unsigned int v59;
  char *v60;
  NSObject *v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  _QWORD *v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  unsigned int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint8_t v83[16];
  _BYTE v84[10];
  __int16 v85;
  char *v86;
  uint8_t buf[16];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v82 = a3;
  sub_234106C48((uint64_t)&v78);
  v11 = *(__int128 **)(a2 + 24);
  v12 = v11[3];
  v14 = *v11;
  v13 = v11[1];
  v80 = v11[2];
  v81 = v12;
  v78 = v14;
  v79 = v13;
  v15 = sub_23411E3D8(a2);
  v16 = v15;
  *(_OWORD *)a6 = *(_OWORD *)a2;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a2 + 16);
  v17 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
  {
    v18 = 0;
    v19 = 1;
LABEL_4:
    v21 = 1;
    goto LABEL_5;
  }
  v20 = *(_QWORD *)(v15 + 24);
  v18 = *(_DWORD *)(v20 + 44);
  v19 = 1;
  sub_234106E50(v20, 1u, a6);
  v17 = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    goto LABEL_4;
  LOWORD(v76) = 0;
  HIDWORD(v76) = 0;
  v77 = 0;
  BYTE2(v76) = 0;
  v32 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    v33 = *(_QWORD *)(v82 + 40);
    v34 = *(_QWORD *)(v82 + 48);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = HIDWORD(v34);
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v34;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v88) = HIDWORD(v33);
    WORD2(v88) = 1024;
    *(_DWORD *)((char *)&v88 + 6) = v33;
    _os_log_impl(&dword_233BF3000, v32, OS_LOG_TYPE_INFO, "Building Reports for ReadHandler with LastReportGeneration = 0x%08X%08X DirtyGeneration = 0x%08X%08X", buf, 0x1Au);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  v35 = v82;
  if ((*(_BYTE *)(v82 + 202) & 1) == 0)
  {
    sub_2340FA228(v82);
    v35 = v82;
  }
  v77 = *(_DWORD *)(v35 + 24);
  v36 = *(_QWORD *)(v35 + 8);
  v76 = *(_QWORD *)(v35 + 16);
  if (!v36)
  {
LABEL_54:
    v17 = 0;
    v19 = 0;
    goto LABEL_66;
  }
  v68 = (_QWORD *)(a1 + 40);
  v67 = v18;
  while ((*(_BYTE *)(v35 + 202) & 2) != 0)
  {
    v37 = *(_QWORD *)(v35 + 176);
    *(_QWORD *)buf = v76;
    *(_DWORD *)&buf[8] = v77;
    buf[12] = 0;
    if ((sub_234209FCC(v35, v37, (unsigned __int16 *)buf) & 1) == 0)
      goto LABEL_41;
LABEL_53:
    sub_2340FC560(v82 + 8);
    v35 = v82;
    v77 = *(_DWORD *)(v82 + 24);
    v55 = *(_QWORD *)(v82 + 8);
    v76 = *(_QWORD *)(v82 + 16);
    if (!v55)
      goto LABEL_54;
  }
  v83[0] = 0;
  *(_QWORD *)buf = &v76;
  *(_QWORD *)&buf[8] = &v82;
  *(_QWORD *)&v88 = v83;
  sub_234115DFC(v68, (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23420C528);
  if (!v83[0])
    goto LABEL_53;
LABEL_41:
  sub_234106C48((uint64_t)buf);
  v38 = *(__int128 **)(v16 + 24);
  v39 = v38[3];
  v41 = *v38;
  v40 = v38[1];
  v89 = v38[2];
  v90 = v39;
  *(_OWORD *)buf = v41;
  v88 = v40;
  v73 = v76;
  v74 = v77;
  v75 = 0;
  v72 = *(_DWORD *)(v82 + 196);
  v42 = sub_2340FA384(v82);
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v42 + 64))(v83);
  sub_23420A06C(v83, (*(_BYTE *)(v82 + 202) & 8) != 0, v16, (uint64_t)&v73, (unsigned __int16 *)&v72, &v70);
  *(_OWORD *)a6 = v70;
  *(_QWORD *)(a6 + 16) = v71;
  v17 = *(_DWORD *)a6;
  if (!*(_DWORD *)a6)
  {
LABEL_52:
    v54 = v82;
    *(_WORD *)(v82 + 196) = -1;
    *(_BYTE *)(v54 + 198) = 0;
    goto LABEL_53;
  }
  if (!BYTE2(v72) || v17 != 25 && v17 != 11)
  {
    v43 = *(_OWORD **)(v16 + 24);
    v44 = *(_OWORD *)buf;
    v45 = v88;
    v46 = v90;
    v43[2] = v89;
    v43[3] = v46;
    *v43 = v44;
    v43[1] = v45;
    sub_23411C030(v16);
    v47 = v82;
    *(_WORD *)(v82 + 196) = -1;
    *(_BYTE *)(v47 + 198) = 0;
    if (v17 == 11 || v17 == 25)
    {
      v56 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        v57 = HIWORD(HIDWORD(v73));
        v58 = WORD2(v73);
        v59 = HIWORD(v74);
        v69 = (unsigned __int16)v74;
        *(_OWORD *)v83 = *(_OWORD *)a6;
        *(_QWORD *)v84 = *(_QWORD *)(a6 + 16);
        v60 = sub_2341083CC((const char **)v83, 1);
        *(_DWORD *)v83 = 67110146;
        *(_DWORD *)&v83[4] = v57;
        *(_WORD *)&v83[8] = 1024;
        *(_DWORD *)&v83[10] = v58;
        *(_WORD *)&v83[14] = 1024;
        *(_DWORD *)v84 = v59;
        *(_WORD *)&v84[4] = 1024;
        v18 = v67;
        *(_DWORD *)&v84[6] = v69;
        v85 = 2080;
        v86 = v60;
        _os_log_impl(&dword_233BF3000, v56, OS_LOG_TYPE_INFO, "Next attribute value does not fit in packet, roll back on clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04X, err = %s", v83, 0x24u);
      }
      if (sub_234114844(3u))
      {
        *(_OWORD *)v83 = *(_OWORD *)a6;
        *(_QWORD *)v84 = *(_QWORD *)(a6 + 16);
        sub_2341083CC((const char **)v83, 1);
        v18 = v67;
        sub_2341147D0(0xDu, 3);
      }
      goto LABEL_65;
    }
    v48 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v49 = HIWORD(HIDWORD(v73));
      v50 = WORD2(v73);
      v51 = HIWORD(v74);
      v52 = (unsigned __int16)v74;
      *(_OWORD *)v83 = *(_OWORD *)a6;
      *(_QWORD *)v84 = *(_QWORD *)(a6 + 16);
      v53 = sub_2341083CC((const char **)v83, 1);
      *(_DWORD *)v83 = 67110146;
      *(_DWORD *)&v83[4] = v49;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = v50;
      v18 = v67;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)v84 = v51;
      *(_WORD *)&v84[4] = 1024;
      *(_DWORD *)&v84[6] = v52;
      v85 = 2080;
      v86 = v53;
      _os_log_impl(&dword_233BF3000, v48, OS_LOG_TYPE_ERROR, "Fail to retrieve data, roll back and encode status on clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04Xerr = %s", v83, 0x24u);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)v83 = *(_OWORD *)a6;
      *(_QWORD *)v84 = *(_QWORD *)(a6 + 16);
      sub_2341083CC((const char **)v83, 1);
      v18 = v67;
      sub_2341147D0(0xDu, 1);
    }
    *(_OWORD *)v83 = *(_OWORD *)a6;
    *(_QWORD *)v84 = *(_QWORD *)(a6 + 16);
    LOWORD(v70) = 0;
    sub_23411E638(&v70, (int *)v83);
    sub_23411BD74((char **)v16, (unsigned __int16 *)&v73, (unsigned __int8 *)&v70, (uint64_t)v83);
    *(_OWORD *)a6 = *(_OWORD *)v83;
    *(_QWORD *)(a6 + 16) = *(_QWORD *)v84;
    v17 = *(_DWORD *)a6;
    if (*(_DWORD *)a6)
    {
      v63 = *(_OWORD **)(v16 + 24);
      v64 = *(_OWORD *)buf;
      v65 = v88;
      v66 = v90;
      v63[2] = v89;
      v63[3] = v66;
      *v63 = v64;
      v63[1] = v65;
      sub_23411C030(v16);
      goto LABEL_65;
    }
    goto LABEL_52;
  }
  v61 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v83 = 67109888;
    *(_DWORD *)&v83[4] = HIWORD(HIDWORD(v73));
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)&v83[10] = WORD2(v73);
    *(_WORD *)&v83[14] = 1024;
    *(_DWORD *)v84 = HIWORD(v74);
    *(_WORD *)&v84[4] = 1024;
    *(_DWORD *)&v84[6] = (unsigned __int16)v74;
    _os_log_impl(&dword_233BF3000, v61, OS_LOG_TYPE_INFO, "List does not fit in packet, chunk between list items for clusterId: 0x%04X_%04X, attributeId: 0x%04X_%04X", v83, 0x1Au);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  v62 = v82;
  *(_WORD *)(v82 + 196) = v72;
  *(_BYTE *)(v62 + 198) = BYTE2(v72);
LABEL_65:
  v19 = 1;
LABEL_66:
  v21 = 0;
LABEL_5:
  v22 = *(_DWORD *)(*(_QWORD *)(v16 + 24) + 44);
  if (a5)
    *a5 = v22 != v18;
  if (v17 != 11 && v17 != 25)
    v21 = 1;
  if ((v21 & 1) != 0)
  {
    if (!v17)
      goto LABEL_20;
  }
  else
  {
    v24 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_INFO, "<RE:Run> We cannot put more chunks into this report. Enable chunking.", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0xDu, 3);
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a6 + 16) = 288;
LABEL_20:
    v25 = *(_QWORD *)(v16 + 24);
    if (*(_WORD *)(v25 + 60) == 21169)
    {
      v26 = *(_DWORD *)(v25 + 52);
      if (v26)
      {
        *(_DWORD *)(v25 + 52) = v26 - 1;
        ++*(_DWORD *)(v25 + 40);
      }
    }
    sub_23411ACD8(v16, (uint64_t)buf);
    *(_OWORD *)a6 = *(_OWORD *)buf;
    *(_QWORD *)(a6 + 16) = v88;
    if (*(_DWORD *)a6)
      sub_23425F114(v27);
    if (v22 == v18)
    {
      v28 = *(_OWORD **)(a2 + 24);
      v29 = v78;
      v30 = v79;
      v31 = v81;
      v28[2] = v80;
      v28[3] = v31;
      *v28 = v29;
      v28[1] = v30;
      sub_23411C030(a2);
    }
  }
  if (a4)
    *a4 = v19;
}

double sub_23420AA1C@<D0>(char *a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int *v5;
  int v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  double result;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned __int8 v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned __int16 v39[2];
  int v40;
  int v41;
  uint8_t buf[4];
  __int128 v43;
  _BYTE v44[6];
  __int16 v45;
  int v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v47 = xmmword_2505164CC;
  v48 = 0;
  v5 = *(int **)(a3 + 168);
  if (v5)
  {
    v30 = a4 + 4;
    do
    {
      if (*((unsigned __int16 *)v5 + 4) != 0xFFFF)
      {
        v9 = *v5;
        if (*v5 != -1)
        {
          v10 = v5[1];
          if (v10 != -1)
          {
            v39[0] = *((_WORD *)v5 + 4);
            v40 = v9;
            v41 = v10;
            v11 = sub_233CBCB08(v39);
            if (v11)
            {
              v12 = *((_OWORD *)a1 + 1);
              v35 = *(_OWORD *)a1;
              v36 = v12;
              v13 = *((_OWORD *)a1 + 3);
              v37 = *((_OWORD *)a1 + 2);
              v38 = v13;
              v34[0] = v11;
              v34[1] = 0;
              sub_23411D394(a1, v39, v34, buf);
              v14 = *(_DWORD *)buf;
              v47 = v43;
              v48 = *(_DWORD *)v44;
              if (*(_DWORD *)buf)
                goto LABEL_20;
              *a2 = 1;
            }
            v32 = *v5;
            v33 = *((_WORD *)v5 + 4);
            v15 = sub_234035660();
            v16 = sub_2341D512C();
            v17 = sub_2340FA384(a3);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v17 + 64))(&v35);
            sub_2341D4A50(v16, (uint64_t)&v35, (uint64_t)&v32, v15, (uint64_t)buf);
            v18 = *(_DWORD *)buf;
            v47 = v43;
            v48 = *(_DWORD *)v44;
            if (*(_DWORD *)buf == 165)
            {
              v19 = *((_OWORD *)a1 + 1);
              v35 = *(_OWORD *)a1;
              v36 = v19;
              v20 = *((_OWORD *)a1 + 3);
              v37 = *((_OWORD *)a1 + 2);
              v38 = v20;
              v31 = 126;
              sub_23411D394(a1, v39, (unsigned __int8 *)&v31, buf);
              v14 = *(_DWORD *)buf;
              v47 = v43;
              v48 = *(_DWORD *)v44;
              if (*(_DWORD *)buf)
              {
LABEL_20:
                v28 = v36;
                *(_OWORD *)a1 = v35;
                *((_OWORD *)a1 + 1) = v28;
                v29 = v38;
                *((_OWORD *)a1 + 2) = v37;
                *((_OWORD *)a1 + 3) = v29;
                goto LABEL_18;
              }
              *a2 = 1;
              v21 = sub_234117B80(0x23u, "InteractionModel");
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                v22 = *((unsigned __int16 *)v5 + 4);
                v23 = HIWORD(*v5);
                v24 = (unsigned __int16)*v5;
                v25 = HIWORD(v5[1]);
                v26 = (unsigned __int16)v5[1];
                *(_DWORD *)buf = 67110144;
                LODWORD(v43) = v22;
                WORD2(v43) = 1024;
                *(_DWORD *)((char *)&v43 + 6) = v23;
                WORD5(v43) = 1024;
                HIDWORD(v43) = v24;
                *(_WORD *)v44 = 1024;
                *(_DWORD *)&v44[2] = v25;
                v45 = 1024;
                v46 = v26;
                _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_INFO, "Access to event (%u, 0x%04X_%04X, 0x%04X_%04X) denied by ACL", buf, 0x20u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(0x23u, 3);
            }
            else
            {
              *(_DWORD *)a4 = *(_DWORD *)buf;
              result = *(double *)&v47;
              *(_OWORD *)v30 = v47;
              *(_DWORD *)(v30 + 16) = v48;
              if (v18)
                return result;
            }
          }
        }
      }
      v5 = (int *)*((_QWORD *)v5 + 2);
    }
    while (v5);
  }
  v14 = 0;
LABEL_18:
  *(_DWORD *)a4 = v14;
  result = *(double *)&v47;
  *(_OWORD *)(a4 + 4) = v47;
  *(_DWORD *)(a4 + 20) = v48;
  return result;
}

void sub_23420AD40(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, BOOL *a4@<X4>, char *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  BOOL v20;
  BOOL v21;
  char v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  int v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint8_t buf[16];
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a6 = xmmword_2505164E0;
  *(_QWORD *)(a6 + 16) = 385;
  v50 = 0;
  v49 = 0;
  sub_234106C48((uint64_t)&v45);
  v12 = sub_2340F4BC0();
  v13 = *(__int128 **)(a1 + 24);
  v14 = v13[3];
  v16 = *v13;
  v15 = v13[1];
  v47 = v13[2];
  v48 = v14;
  v45 = v16;
  v46 = v15;
  v17 = *(_QWORD *)(a2 + 168);
  if (!v17)
    goto LABEL_9;
  v18 = v12;
  if (*((_DWORD *)v12 + 4) == 3)
  {
    v19 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "EventManagement has not yet initialized", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xDu, 1);
    goto LABEL_8;
  }
  if (sub_2340F9DBC(a2, (uint64_t)v12))
  {
LABEL_8:
    LODWORD(v17) = 0;
LABEL_9:
    v20 = 0;
    goto LABEL_10;
  }
  v27 = sub_23411E2C4(a1);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a1 + 16);
  LODWORD(v17) = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    goto LABEL_27;
  v29 = v27;
  v30 = *(_QWORD *)(v27 + 24);
  v31 = "src/app/reporting/Engine.cpp";
  if (!v30)
  {
    v28 = 0;
    v37 = 416;
LABEL_36:
    LODWORD(v17) = 3;
LABEL_37:
    *(_DWORD *)a6 = v17;
    *(_QWORD *)(a6 + 8) = v31;
    *(_DWORD *)(a6 + 16) = v37;
    goto LABEL_28;
  }
  sub_234106E50(v30, 1u, a6);
  LODWORD(v17) = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    goto LABEL_27;
  sub_23420AA1C(*(char **)(v29 + 24), &v49, a2, (uint64_t)buf);
  *(_OWORD *)a6 = *(_OWORD *)buf;
  *(_QWORD *)(a6 + 16) = v52;
  LODWORD(v17) = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    goto LABEL_27;
  v42 = *(_QWORD *)(v29 + 24);
  v32 = *(_QWORD *)(a2 + 168);
  v33 = sub_2340FA384(a2);
  (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v33 + 64))(buf);
  v34 = v18;
  v35 = (_QWORD *)(a2 + 80);
  sub_2340F6858(v34, v42, v32, (uint64_t *)(a2 + 80), &v50, buf, (uint64_t)&v43);
  *(_OWORD *)a6 = v43;
  *(_QWORD *)(a6 + 16) = v44;
  LODWORD(v17) = *(_DWORD *)a6;
  if (*(_DWORD *)a6 > 0x22u)
  {
LABEL_27:
    v28 = 0;
LABEL_28:
    v20 = v28 != 0;
    goto LABEL_10;
  }
  if (((1 << v17) & 0x600000001) != 0)
  {
    v20 = 0;
    v28 = 0;
    v36 = 427;
  }
  else
  {
    v28 = 0;
    if (((1 << v17) & 0x2000800) == 0)
      goto LABEL_28;
    if (v50)
    {
      v20 = 1;
      v36 = 450;
    }
    else
    {
      if ((a3 & 1) == 0)
        ++*v35;
      v38 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v38, OS_LOG_TYPE_INFO, "<RE:Run> first cluster event is too big so that it fails to fit in the packet!", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xDu, 3);
      v20 = 1;
      v36 = 441;
    }
    v28 = 1;
  }
  *(_DWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a6 + 16) = v36;
  v39 = *(_QWORD *)(v29 + 24);
  if (*(_WORD *)(v39 + 60) != 21169)
  {
    v37 = 175;
    v31 = "src/lib/core/TLVWriter.h";
    goto LABEL_36;
  }
  v40 = *(_DWORD *)(v39 + 52);
  v31 = "src/lib/core/TLVWriter.h";
  if (!v40)
  {
    v37 = 176;
    LODWORD(v17) = 11;
    goto LABEL_37;
  }
  *(_DWORD *)(v39 + 52) = v40 - 1;
  ++*(_DWORD *)(v39 + 40);
  *(_DWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = "src/lib/core/TLVWriter.h";
  *(_DWORD *)(a6 + 16) = 179;
  sub_23411ACD8(v29, (uint64_t)buf);
  *(_OWORD *)a6 = *(_OWORD *)buf;
  *(_QWORD *)(a6 + 16) = v52;
  LODWORD(v17) = *(_DWORD *)a6;
  if (*(_DWORD *)a6)
    goto LABEL_28;
  v41 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v50;
    _os_log_impl(&dword_233BF3000, v41, OS_LOG_TYPE_INFO, "Fetched %u events", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  LODWORD(v17) = 0;
LABEL_10:
  if (a5)
  {
    if (v49)
      v21 = 0;
    else
      v21 = v50 == 0;
    v22 = !v21;
    *a5 = v22;
  }
  if (v17 <= 0x19 && ((1 << v17) & 0x2000801) != 0 && !v49 && !v50)
  {
    v23 = *(_OWORD **)(a1 + 24);
    v24 = v45;
    v25 = v46;
    v26 = v48;
    v23[2] = v47;
    v23[3] = v26;
    *v23 = v24;
    v23[1] = v25;
    sub_23411C030(a1);
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a6 + 16) = 477;
  }
  if (a4)
    *a4 = v20;
}

_QWORD *sub_23420B224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v10;
  _BOOL4 v11;
  NSObject *v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  int v22;
  int v23;
  const char *v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30[40];
  int v31;
  int v32;
  unsigned int v33;
  __int16 v34;
  _QWORD v35[3];
  char v36;
  __int128 buf;
  const char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_2505164F8;
  *(_QWORD *)(a3 + 16) = 492;
  sub_234106C48((uint64_t)v30);
  v35[1] = 0;
  v35[2] = 0;
  v35[0] = &unk_250504030;
  v36 = 0;
  sub_23420C3F0((uint64_t)&v28);
  v27 = 0;
  if (a2)
  {
    if (sub_2340FA384(a2))
    {
      v6 = sub_2340FA3BC(a2);
      sub_234118674(v6, 0x26u, &buf);
      v27 = buf;
      if ((_QWORD)buf)
      {
        if (sub_23411828C(buf) <= v6)
          v7 = 0;
        else
          v7 = sub_23411828C(v27) - v6;
        sub_233CAF098((uint64_t)v35, &v27, 0);
        sub_234106CA8((uint64_t)v30, (uint64_t)v35, 0xFFFFFFFF, (uint64_t)&buf);
        sub_234106E50((uint64_t)v30, v7 + 16, (uint64_t)&buf);
        sub_23411E904((uint64_t)&v28, v30, a3);
        if (*(_DWORD *)a3)
          goto LABEL_10;
        if (*(_BYTE *)(a2 + 203) == 1)
          sub_23411AC84((uint64_t)&v28, *(_DWORD *)(a2 + 72));
        sub_234106E50((uint64_t)v30, 9u, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(_QWORD *)(a3 + 16) = v38;
        if (*(_DWORD *)a3)
          goto LABEL_10;
        v26 = 0;
        v25 = 0;
        sub_23420A1F0(a1, (uint64_t)&v28, a2, (char *)&v26 + 1, (BOOL *)&v25 + 1, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(_QWORD *)(a3 + 16) = v38;
        if (*(_DWORD *)a3)
          goto LABEL_10;
        if (v34 != 21169)
        {
          v8 = 175;
          v10 = 3;
          goto LABEL_24;
        }
        if (v33 < 3)
        {
          v8 = 176;
          v10 = 11;
LABEL_24:
          *(_DWORD *)a3 = v10;
          *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
          goto LABEL_9;
        }
        v33 -= 3;
        v31 += 3;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
        *(_DWORD *)(a3 + 16) = 179;
        sub_23420AD40((uint64_t)&v28, a2, SHIBYTE(v25), (BOOL *)&v26, (char *)&v25, (uint64_t)&buf);
        *(_OWORD *)a3 = buf;
        *(_QWORD *)(a3 + 16) = v38;
        if (*(_DWORD *)a3)
          goto LABEL_10;
        v11 = (HIBYTE(v26) | v26) != 0;
        if (!v25 && HIBYTE(v26) | v26)
        {
          v12 = sub_234117B80(0xDu, "DataManagement");
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "No data actually encoded but hasMoreChunks flag is set, close read handler! (attribute too big?)", (uint8_t *)&buf, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0xDu, 1);
          sub_2340F860C(a2, 0x89u, (uint64_t)&buf);
          *(_OWORD *)a3 = buf;
          *(_QWORD *)(a3 + 16) = v38;
          v13 = *(_DWORD *)a3 == 0;
          if (*(_DWORD *)a3)
            goto LABEL_10;
LABEL_33:
          if (*(_BYTE *)(a2 + 203))
            v14 = 1;
          else
            v14 = v11;
          if (!v13 && v14)
            goto LABEL_11;
          goto LABEL_10;
        }
        *(_OWORD *)a3 = v28;
        *(_QWORD *)(a3 + 16) = v29;
        if (*(_DWORD *)a3)
          goto LABEL_10;
        if (v34 == 21169)
        {
          if (v33 >= 6)
          {
            v33 -= 6;
            v31 += 6;
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
            *(_DWORD *)(a3 + 16) = 179;
            if (v11)
            {
              sub_23411E318((uint64_t)&v28, 1);
            }
            else if (!*(_BYTE *)(a2 + 203))
            {
              sub_23411D220((uint64_t)&v28, 1);
            }
            sub_23411E36C((uint64_t)&v28, (uint64_t)&buf);
            if ((_DWORD)v28)
              sub_23425F1B0(v16);
            sub_233C115F0((uint64_t)v30, &v27, &buf);
            *(_OWORD *)a3 = buf;
            *(_QWORD *)(a3 + 16) = v38;
            if (*(_DWORD *)a3)
              goto LABEL_10;
            v17 = sub_234117B80(0xDu, "DataManagement");
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v32;
              _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_INFO, "<RE> Sending report (payload has %u bytes)...", (uint8_t *)&buf, 8u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(0xDu, 3);
            sub_23420B8FC(a1, a2, &v27, v11, (uint64_t)&buf);
            *(_OWORD *)a3 = buf;
            *(_QWORD *)(a3 + 16) = v38;
            v18 = *(_DWORD *)a3;
            v19 = sub_234117B80(0xDu, "DataManagement");
            v20 = v19;
            if (v18)
            {
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                buf = *(_OWORD *)a3;
                v38 = *(const char **)(a3 + 16);
                v21 = sub_2341083CC((const char **)&buf, 1);
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = v21;
                _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "<RE> Error sending out report data with %s!", (uint8_t *)&buf, 0xCu);
              }
              if (sub_234114844(1u))
              {
                buf = *(_OWORD *)a3;
                v38 = *(const char **)(a3 + 16);
                sub_2341083CC((const char **)&buf, 1);
                sub_2341147D0(0xDu, 1);
              }
              goto LABEL_10;
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              v22 = *(_DWORD *)(a1 + 4);
              v23 = *(_DWORD *)(a1 + 8);
              if (v11)
                v24 = "more messages";
              else
                v24 = "no more messages";
              LODWORD(buf) = 67109634;
              DWORD1(buf) = v22;
              WORD4(buf) = 1024;
              *(_DWORD *)((char *)&buf + 10) = v23;
              HIWORD(buf) = 2080;
              v38 = v24;
              _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_INFO, "<RE> ReportsInFlight = %u with readHandler %u, RE has %s", (uint8_t *)&buf, 0x18u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(0xDu, 3);
            v13 = 0;
            goto LABEL_33;
          }
          v8 = 176;
          v15 = 11;
        }
        else
        {
          v8 = 175;
          v15 = 3;
        }
        *(_DWORD *)a3 = v15;
        *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
        goto LABEL_9;
      }
      *(_DWORD *)a3 = 11;
      *(_QWORD *)(a3 + 8) = "src/app/reporting/Engine.cpp";
      v8 = 520;
    }
    else
    {
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = "src/app/reporting/Engine.cpp";
      v8 = 515;
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/app/reporting/Engine.cpp";
    v8 = 514;
  }
LABEL_9:
  *(_DWORD *)(a3 + 16) = v8;
LABEL_10:
  sub_2340F7380(a2, 0);
LABEL_11:
  if (v27)
    sub_23411814C(v27);
  return sub_2340F6E6C(v35);
}

void sub_23420B8FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7;

  v7 = *(_DWORD *)(a1 + 4);
  *(_OWORD *)a5 = xmmword_250516510;
  *(_QWORD *)(a5 + 16) = 900;
  *(_DWORD *)(a1 + 4) = v7 + 1;
  sub_2340F8C7C(a2, a3, a4, a5);
  if (*(_DWORD *)a5)
    --*(_DWORD *)(a1 + 4);
}

uint64_t sub_23420B968(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return sub_23420B974((uint64_t)a2);
}

uint64_t sub_23420B974(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  unint64_t v11;
  NSObject *v12;
  char v13;
  uint8_t buf[8];
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(v2 + 1624);
  if (*(_DWORD *)(a1 + 4) > 3u || v3 == 0)
  {
    v5 = *(_DWORD *)(a1 + 8);
LABEL_16:
    if (v3 <= v5)
      *(_DWORD *)(a1 + 8) = 0;
    v13 = 1;
    *(_QWORD *)buf = &v13;
    result = sub_234115DFC((_QWORD *)(v2 + 1640), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23420C59C);
    if (v13)
    {
      v12 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "All ReadHandler-s are clean, clear GlobalDirtySet", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xDu, 3);
      return sub_234115DFC((_QWORD *)(a1 + 40), a1 + 24, (unsigned int (*)(uint64_t))sub_23420C510);
    }
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = 1;
    while (1)
    {
      v7 = (_BYTE *)sub_2341FFFA0(*(_QWORD *)(a1 + 88), v5 % *(_DWORD *)(*(_QWORD *)(a1 + 88) + 1624));
      if (!v7)
        sub_23425F24C(0);
      if ((v8 = (uint64_t)v7, v7[200] == 1) && (!v7[203] || (v7[202] & 2) != 0)
        || sub_23420BBDC(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 1448), (uint64_t)v7))
      {
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)buf = 0;
        v15 = 0;
        v16 = 0;
        result = (uint64_t)sub_23420B224(a1, v8, (uint64_t)buf);
        *(_QWORD *)(a1 + 16) = 0;
        if (*(_DWORD *)buf)
          break;
      }
      v10 = *(_DWORD *)(a1 + 4);
      v5 = *(_DWORD *)(a1 + 8) + 1;
      *(_DWORD *)(a1 + 8) = v5;
      if (v10 <= 3)
      {
        v11 = v6++;
        if (v3 > v11)
          continue;
      }
      v2 = *(_QWORD *)(a1 + 88);
      v3 = *(_QWORD *)(v2 + 1624);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *sub_23420BB20@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)result)
  {
    v3 = 0;
    v4 = 644;
    goto LABEL_12;
  }
  v5 = result;
  v6 = *(_QWORD *)(result[11] + 80);
  if (!v6)
  {
    v4 = 650;
LABEL_11:
    v3 = 3;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v6 + 88);
  if (!v7)
  {
    v4 = 655;
    goto LABEL_11;
  }
  result = *(_QWORD **)(v7 + 24);
  if (!result)
  {
    v4 = 660;
    goto LABEL_11;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t (*)(uint64_t, _BYTE *), _BYTE *))(*result + 80))(result, sub_23420B968, v5);
  if (*(_DWORD *)a2)
    return result;
  v3 = 0;
  *v5 = 1;
  v4 = 664;
LABEL_12:
  *(_DWORD *)a2 = v3;
  a2[1] = "src/app/reporting/Engine.cpp";
  *((_DWORD *)a2 + 4) = v4;
  return result;
}

uint64_t sub_23420BBDC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  v6 = 0;
  v7[0] = &v6;
  v7[1] = a2;
  sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v7, (unsigned int (*)(uint64_t))sub_23420C4E8);
  result = v6;
  if (v6)
    return sub_23420C484(v6, &v5);
  return result;
}

BOOL sub_23420BC44(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a1;
  return sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)v3, (unsigned int (*)(uint64_t))sub_23420C5C8) == 1;
}

uint64_t sub_23420BC7C(uint64_t a1)
{
  unsigned __int8 v2;
  _QWORD v3[2];

  v2 = 0;
  v3[0] = a1;
  v3[1] = &v2;
  sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)v3, (unsigned int (*)(uint64_t))sub_23420C658);
  return v2;
}

uint64_t sub_23420BCB8(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v4;
  _QWORD v5[2];

  v5[0] = a1;
  v2 = (_QWORD *)(a1 + 40);
  sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C698);
  v4 = 0;
  v5[0] = a1;
  v5[1] = &v4;
  sub_234115DFC(v2, (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C658);
  return v4;
}

uint64_t sub_23420BD1C(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v4;
  _QWORD v5[2];

  v5[0] = a1;
  v2 = (_QWORD *)(a1 + 40);
  sub_234115DFC((_QWORD *)(a1 + 40), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C754);
  v4 = 0;
  v5[0] = a1;
  v5[1] = &v4;
  sub_234115DFC(v2, (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C658);
  return v4;
}

uint64_t sub_23420BD80@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t *v14;

  v13 = a2;
  v14 = a1;
  v6 = a1 + 5;
  result = sub_234115DFC(a1 + 5, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_23420C5C8);
  if ((_DWORD)result == 1)
  {
    v8 = 0;
    v9 = 838;
  }
  else
  {
    v13 = a2;
    v14 = a1;
    result = sub_234115DFC(v6, (uint64_t)&v13, (unsigned int (*)(uint64_t))sub_23420C5C8);
    if ((_DWORD)result == 1)
    {
      v8 = 0;
      v9 = 848;
    }
    else
    {
      v10 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "Cannot merge the new path into any existing path, create one.", (uint8_t *)&v13, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xDu, 3);
      result = (uint64_t)sub_23420BF3C(a1 + 3);
      if (result)
      {
        v8 = 0;
        v11 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_DWORD *)(result + 8) = v11;
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 16) = a1[10];
        v9 = 861;
      }
      else
      {
        v12 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "mGlobalDirtySet pool full, cannot handle more entries!", (uint8_t *)&v13, 2u);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
          result = sub_2341147D0(0xDu, 1);
        v9 = 856;
        v8 = 11;
      }
    }
  }
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/app/reporting/Engine.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  return result;
}

_DWORD *sub_23420BF3C(unint64_t *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = sub_234114774(0x18uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)v2 = -1;
    v2[2] = -1;
    *((_QWORD *)v2 + 2) = 0;
    v4 = sub_234114774(0x18uLL);
    if (v4)
    {
      *v4 = v3;
      v4[1] = a1 + 2;
      v4[2] = 0;
      v4[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      v5 = a1[1];
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5)
        a1[1] = v6;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_23420BFC8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v6;
  uint64_t result;
  int v8;
  char v9;
  _QWORD v10[2];

  v6 = a1[11];
  ++a1[10];
  v9 = 0;
  v10[0] = a2;
  v10[1] = &v9;
  result = sub_234115DFC((_QWORD *)(v6 + 1640), (uint64_t)v10, (unsigned int (*)(uint64_t))sub_23420C80C);
  if (v9)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    result = sub_23420BD80(a1, a2, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return result;
    v8 = 895;
  }
  else
  {
    v8 = 891;
  }
  *(_DWORD *)a3 = 0;
  a3[1] = "src/app/reporting/Engine.cpp";
  *((_DWORD *)a3 + 4) = v8;
  return result;
}

uint64_t sub_23420C070(uint64_t a1)
{
  int v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  uint8_t buf[24];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 4);
  if (v2 == 4)
  {
    sub_23420BB20(buf, a1);
    v2 = *(_DWORD *)(a1 + 4);
  }
  else if (!v2)
  {
    sub_23425F2E8(a1);
  }
  *(_DWORD *)(a1 + 4) = v2 - 1;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "<RE> OnReportConfirm: NumReports = %u", buf, 8u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 3);
  return result;
}

uint64_t sub_23420C16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 88);
  v4 = a2;
  return sub_234115DFC((_QWORD *)(v2 + 1640), (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_23420C884);
}

_QWORD *sub_23420C1A0@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;
  NSObject *v8;
  int v9;
  uint8_t buf[8];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v6 = a1[11];
  *(_QWORD *)buf = &v9;
  result = (_QWORD *)sub_234115DFC((_QWORD *)(v6 + 1640), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23420C884);
  if ((a2 - v9) < 0x201)
  {
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/app/reporting/Engine.cpp";
    *(_DWORD *)(a3 + 16) = 954;
  }
  else
  {
    v8 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 512;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "<RE> Buffer overfilled CHIP_CONFIG_EVENT_LOGGING_BYTE_THRESHOLD %d, schedule engine run", buf, 8u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0xDu, 3);
    return sub_23420BB20(a1, (_QWORD *)a3);
  }
  return result;
}

uint64_t sub_23420C2DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v7;
  NSObject *v8;
  int v9;
  char v10;
  uint8_t buf[8];
  char *v12;

  v5 = *(_QWORD *)(result + 88);
  if (!*(_QWORD *)(v5 + 1512))
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/app/reporting/Engine.cpp";
    v9 = 965;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v9;
    return result;
  }
  v7 = (_QWORD *)result;
  v10 = 0;
  *(_QWORD *)buf = a2;
  v12 = &v10;
  sub_234115DFC((_QWORD *)(v5 + 1640), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23420C8AC);
  if (v10)
  {
    v8 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Urgent event will be sent once reporting is not blocked by the min interval", buf, 2u);
    }
    result = sub_234114844(3u);
    if ((_DWORD)result)
      result = sub_2341147D0(0xDu, 3);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/app/reporting/Engine.cpp";
    v9 = 992;
    goto LABEL_9;
  }
  return (uint64_t)sub_23420C1A0(v7, a3, a4);
}

uint64_t sub_23420C3F0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23411BFF8(a1);
  sub_23411BFF8(v2 + 40);
  sub_23411BFF8(a1 + 80);
  sub_23411BFF8(a1 + 120);
  sub_23411BFF8(a1 + 160);
  sub_23411BFF8(a1 + 200);
  sub_23411BFF8(a1 + 240);
  sub_23411BFF8(a1 + 280);
  sub_23411BFF8(a1 + 320);
  sub_23411BFF8(a1 + 360);
  sub_23411BFF8(a1 + 400);
  sub_23411BFF8(a1 + 440);
  sub_23411BFF8(a1 + 480);
  sub_23411BFF8(a1 + 520);
  sub_23411BFF8(a1 + 560);
  return a1;
}

uint64_t sub_23420C484(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v2 + 200) != 1)
    return 0;
  if (*a2 < *(_QWORD *)(a1 + 24))
  {
    v3 = *(_BYTE *)(a1 + 40);
    return v3 & 1;
  }
  if (*(_QWORD *)(v2 + 40) <= *(_QWORD *)(v2 + 48) && (*(_BYTE *)(v2 + 202) & 0x10) == 0 && *a2 < *(_QWORD *)(a1 + 32))
  {
    v3 = *(_BYTE *)(a1 + 40);
    if ((v3 & 2) == 0)
      return v3 & 1;
  }
  return 1;
}

uint64_t sub_23420C4E8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 8))
    return 0;
  **(_QWORD **)a1 = a2;
  return 1;
}

uint64_t sub_23420C510(uint64_t a1, void *a2)
{
  sub_23411A940(a1, a2);
  return 0;
}

uint64_t sub_23420C528(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int16 *v9;
  uint64_t result;

  v2 = (uint64_t)*a1;
  v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 != 0xFFFF && v3 != **a1)
    return 0;
  if (*(_DWORD *)a2 != -1 && *(_DWORD *)a2 != *(_DWORD *)(v2 + 4))
    return 0;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_DWORD *)(v2 + 8);
  v8 = v6 == -1 || v6 == v7;
  if (!v8 || *(_QWORD *)(a2 + 16) <= *(_QWORD *)(*(_QWORD *)a1[1] + 48))
    return 0;
  v9 = a1[2];
  result = 1;
  *(_BYTE *)v9 = 1;
  return result;
}

uint64_t sub_23420C59C(_BYTE **a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 40) <= *(_QWORD *)(a2 + 48) && (*(_BYTE *)(a2 + 202) & 0x10) == 0)
    return 0;
  **a1 = 0;
  return 1;
}

BOOL sub_23420C5C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;

  v4 = a1[1];
  if (sub_234202D58(a2, *a1))
  {
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 80);
  }
  else
  {
    result = sub_234202D58(*a1, a2);
    if (!result)
      return result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 80);
    *(_WORD *)(a2 + 8) = *(_WORD *)(*a1 + 8);
    *(_DWORD *)a2 = *(_DWORD *)*a1;
    *(_WORD *)(a2 + 10) = *(_WORD *)(*a1 + 10);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(*a1 + 4);
  }
  return 1;
}

uint64_t sub_23420C658(uint64_t a1, _QWORD *a2)
{
  if (!a2[2])
  {
    sub_23411A940(*(_QWORD *)a1 + 24, a2);
    **(_BYTE **)(a1 + 8) = 1;
  }
  return 0;
}

uint64_t sub_23420C698(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  if (*(_DWORD *)a2 != -1 && *(_QWORD *)(a2 + 16))
  {
    v2 = *a1;
    v5 = &v4;
    sub_234115DFC((_QWORD *)(v2 + 40), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_23420C6EC);
  }
  return 0;
}

uint64_t sub_23420C6EC(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = **a1;
  if (v2 != a2 && *(unsigned __int16 *)(a2 + 8) == *(unsigned __int16 *)(v2 + 8) && *(_DWORD *)a2 == *(_DWORD *)v2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3 > *(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v2 + 16) = v3;
      v2 = **a1;
    }
    *(_DWORD *)(v2 + 4) = -1;
    *(_WORD *)(v2 + 10) = -1;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return 0;
}

uint64_t sub_23420C754(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  if (*(__int16 *)(a2 + 8) != -1 && *(_QWORD *)(a2 + 16))
  {
    v2 = *a1;
    v5 = &v4;
    sub_234115DFC((_QWORD *)(v2 + 40), (uint64_t)&v5, (unsigned int (*)(uint64_t))sub_23420C7A8);
  }
  return 0;
}

uint64_t sub_23420C7A8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = **a1;
  if (v2 != a2 && *(unsigned __int16 *)(a2 + 8) == *(unsigned __int16 *)(v2 + 8))
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3 > *(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v2 + 16) = v3;
      v2 = **a1;
    }
    *(_DWORD *)v2 = -1;
    v4 = **a1;
    *(_DWORD *)(v4 + 4) = -1;
    *(_WORD *)(v4 + 10) = -1;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return 0;
}

uint64_t sub_23420C80C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(unsigned __int8 *)(a2 + 200) - 1 <= 1)
  {
    v3 = *(_QWORD *)(a2 + 160);
    if (v3)
    {
      while (!sub_2340FEE5C(v3, *(_QWORD *)a1))
      {
        v3 = *(_QWORD *)(v3 + 16);
        if (!v3)
          return 0;
      }
      sub_2340FA274(a2, *(_QWORD *)a1);
      **(_BYTE **)(a1 + 8) = 1;
    }
  }
  return 0;
}

uint64_t sub_23420C884(unsigned int **a1, uint64_t a2)
{
  unsigned int v2;

  if (*(_BYTE *)(a2 + 203))
  {
    v2 = *(_DWORD *)(a2 + 192);
    if (v2 < **a1)
      **a1 = v2;
  }
  return 0;
}

uint64_t sub_23420C8AC(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v7;
  BOOL v8;

  if (*(_BYTE *)(a2 + 203))
  {
    v2 = *(_QWORD *)(a2 + 168);
    if (v2)
    {
      v3 = (uint64_t)*a1;
      while (1)
      {
        v4 = *(unsigned __int16 *)(v2 + 8);
        if ((v4 == 0xFFFF || v4 == **a1) && (*(_DWORD *)v2 == -1 || *(_DWORD *)v2 == *(_DWORD *)(v3 + 4)))
        {
          v7 = *(_DWORD *)(v2 + 4);
          v8 = v7 == -1 || v7 == *(_DWORD *)(v3 + 8);
          if (v8 && *(_BYTE *)(v2 + 10))
            break;
        }
        v2 = *(_QWORD *)(v2 + 16);
        if (!v2)
          return 0;
      }
      *(_BYTE *)a1[1] = 1;
      sub_2340FA3B0(a2);
    }
  }
  return 0;
}

uint64_t sub_23420C93C(_BYTE *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a2 + 203))
  {
    if (!*a1
      || ((v3 = *sub_233C27DCC(a1), (v4 = sub_2340FA384(a2)) == 0)
        ? (v5 = 0)
        : (v5 = *(unsigned __int8 *)(v4 + 24)),
          v3 == v5))
    {
      sub_2340FA3B0(a2);
    }
  }
  return 0;
}

_QWORD *sub_23420C99C()
{
  _QWORD *v0;
  _QWORD v2[3];

  v0 = sub_2341FF930();
  return sub_23420BB20(v0 + 169, v2);
}

double sub_23420C9C4(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = a1 + 32;
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)a1 = &off_250516538;
  *(_QWORD *)(a1 + 8) = &unk_2505165C0;
  if (!a2)
    sub_23425F384(a1);
  return result;
}

uint64_t sub_23420CA18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[8];
  uint64_t v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v10 = 0;
  *(_QWORD *)buf = &v10;
  v12 = a2;
  v3 = sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23420C4E8);
  if (v10)
    sub_23425F418(v3);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  *(_QWORD *)buf = a1;
  v4 = sub_23420CB6C((unint64_t *)(a1 + 16), &v9, (uint64_t *)buf, &v10);
  v5 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v4[3];
    v7 = v4[4];
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = HIDWORD(v6);
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = v6;
    HIWORD(v12) = 1024;
    v13 = HIDWORD(v7);
    v14 = 1024;
    v15 = v7;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Registered a ReadHandler that will schedule a report between system Timestamp: 0x%08X%08X and system Timestamp 0x%08X%08X.", buf, 0x1Au);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 2);
  return result;
}

void *sub_23420CB6C(unint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v8 = sub_234114774(0x30uLL);
  v9 = v8;
  if (v8)
  {
    sub_23420D174((uint64_t)v8, *a2, *a3, a4);
    v10 = sub_234114774(0x18uLL);
    if (v10)
    {
      *v10 = v9;
      v10[1] = a1 + 2;
      v10[2] = 0;
      v10[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      v11 = a1[1];
      v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11)
        a1[1] = v12;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

_QWORD *sub_23420CC18(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  unsigned int v6;
  uint64_t v7;

  v7 = 0;
  v5[0] = &v7;
  v5[1] = a2;
  result = (_QWORD *)sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C4E8);
  v4 = v7;
  if (v7)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, unsigned int *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(v5, a1, &v6, v4, &v7);
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(v5, a1, v6, v4, &v7);
  }
  return result;
}

_QWORD *sub_23420CCB8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[3];
  unsigned int v10;
  uint64_t v11;

  v11 = 0;
  v9[0] = &v11;
  v9[1] = a2;
  result = (_QWORD *)sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v9, (unsigned int (*)(uint64_t))sub_23420C4E8);
  v5 = v11;
  if (v11)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
    v11 = v6;
    v7 = *(_BYTE *)(v5 + 40);
    *(_BYTE *)(v5 + 40) = v7 & 0xFD;
    v8 = v6 + 1000 * *(unsigned __int16 *)(a2 + 78);
    *(_QWORD *)(v5 + 24) = v6 + 1000 * *(unsigned __int16 *)(a2 + 76);
    *(_QWORD *)(v5 + 32) = v8;
    *(_BYTE *)(v5 + 40) = v7 & 0xFC;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, unsigned int *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(v9, a1, &v10, v5, &v11);
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)a1 + 96))(v9, a1, v10, v5, &v11);
  }
  return result;
}

void sub_23420CD90(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD);
  _QWORD v5[2];

  sub_23420CDEC(a1, a2);
  v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C4E8);
  if (v4)
    sub_2341AE124(a1 + 16, v4);
}

uint64_t sub_23420CDEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  result = sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C4E8);
  if (v4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  return result;
}

uint64_t sub_23420CE48@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  int v9;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), a3);
  if (a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3, a2);
    if (*(_DWORD *)a4)
      return result;
    v9 = 128;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    v9 = 124;
  }
  *(_DWORD *)a4 = 0;
  a4[1] = "src/app/reporting/ReportSchedulerImpl.cpp";
  *((_DWORD *)a4 + 4) = v9;
  return result;
}

uint64_t sub_23420CEEC(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_23420D204);
}

uint64_t sub_23420CF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[2];

  v4 = 0;
  v5[0] = &v4;
  v5[1] = a2;
  sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v5, (unsigned int (*)(uint64_t))sub_23420C4E8);
  if (v4)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  else
    return 0;
}

uint64_t sub_23420CF80@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v10 = *(_QWORD *)(a3 + 8);
  v17 = 0;
  v18[0] = &v17;
  v18[1] = v10;
  result = sub_234115DFC((_QWORD *)(a1 + 32), (uint64_t)v18, (unsigned int (*)(uint64_t))sub_23420C4E8);
  if (v17)
  {
    result = sub_23420C484(a3, a4);
    if ((result & 1) != 0)
    {
      v12 = 0;
    }
    else
    {
      result = sub_23420D064(a1, *(_QWORD *)(a3 + 8));
      v15 = *a4;
      if ((_DWORD)result && (v16 = *(_QWORD *)(a3 + 24), v16 > v15))
        v12 = v16 - v15;
      else
        v12 = *(_DWORD *)(a3 + 32) - v15;
    }
    v14 = 0;
    *a2 = v12;
    v13 = 174;
  }
  else
  {
    v13 = 155;
    v14 = 47;
  }
  *(_DWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = "src/app/reporting/ReportSchedulerImpl.cpp";
  *(_DWORD *)(a5 + 16) = v13;
  return result;
}

uint64_t sub_23420D064(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  if (!a2 || *(_BYTE *)(a2 + 200) != 1)
    return 0;
  if (!*(_BYTE *)(a2 + 203))
    return 1;
  v2 = *(unsigned __int8 *)(a2 + 202);
  if ((v2 & 2) != 0)
    return 1;
  v3 = (v2 >> 4) & 1;
  if (*(_QWORD *)(a2 + 40) <= *(_QWORD *)(a2 + 48))
    return v3;
  else
    return 1;
}

void sub_23420D0B0(_QWORD *a1)
{
  sub_23420D104(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23420D0D4(uint64_t a1)
{
  return sub_23420D104((_QWORD *)(a1 - 8));
}

void sub_23420D0DC(uint64_t a1)
{
  sub_23420D104((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23420D104(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v4;

  *a1 = &off_250516538;
  a1[1] = &unk_2505165C0;
  v4 = a1;
  v2 = a1 + 2;
  sub_234115DFC(a1 + 4, (uint64_t)&v4, (unsigned int (*)(uint64_t))sub_23420D204);
  *a1 = &unk_250516670;
  a1[1] = &unk_2505166B8;
  sub_2341B14B0(v2);
  return a1;
}

uint64_t sub_23420D174(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v4;

  *(_QWORD *)result = &unk_2505166F8;
  *(_QWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 40) = 0;
  if (!a2)
    sub_23425F4AC(result);
  if (!a3)
    sub_23425F540(result);
  *(_QWORD *)(result + 8) = a2;
  v4 = *(unsigned __int16 *)(a2 + 78);
  *(_QWORD *)(result + 24) = *a4 + 1000 * *(unsigned __int16 *)(a2 + 76);
  *(_QWORD *)(result + 32) = *a4 + 1000 * v4;
  return result;
}

void sub_23420D1D4()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_23420D1E8(uint64_t a1)
{
  *(_BYTE *)(a1 + 40) |= 1u;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_23420D204(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(a2 + 8));
  return 0;
}

uint64_t sub_23420D22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)a1 = &off_250516748;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &off_2504F0DD0;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 48) = 16842752;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1;
  *(_QWORD *)(a1 + 144) = sub_23420D358;
  *(_QWORD *)(a1 + 152) = a1 + 152;
  *(_QWORD *)(a1 + 160) = a1 + 152;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = sub_23420D468;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = &off_250514968;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 321) = 1;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  sub_2341B1F64("src/app/ReadClient.cpp", 53);
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 200) = a2;
  if (a5 == 1)
    sub_234202688(a2, a1);
  return a1;
}

void sub_23420D358(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v6;
  __int128 v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;

  if (!a1)
    sub_23425F5D4(0);
  v6 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "HandleDeviceConnected", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xDu, 2);
  sub_2341CDA90((_QWORD *)(a1 + 208), a3);
  *(_QWORD *)(a1 + 8) = a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40), a3, a1 + 208);
  memset(buf, 0, sizeof(buf));
  v10 = 0;
  sub_23420E57C(a1, a1 + 208, buf);
  if (*(_DWORD *)buf)
  {
    v7 = *(_OWORD *)buf;
    v8 = v10;
    sub_23420DCEC(a1, &v7, 1);
  }
}

_QWORD *sub_23420D468(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  __int16 v6;
  _BYTE *v7;
  NSObject *v8;
  int v9;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    sub_23425F668(0);
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 32);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Failed to establish CASE for re-subscription with error '%s'", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 32);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xDu, 1);
  }
  v7 = (_BYTE *)(a2 + 42);
  v6 = *(unsigned __int8 *)(a2 + 42);
  if (*(_BYTE *)(a2 + 42))
  {
    v8 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(unsigned __int16 *)sub_233CBFC80((_BYTE *)(a2 + 42));
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_INFO, "Will delay resubscription by %u ms due to BUSY response", buf, 8u);
    }
    if (sub_234114844(3u))
    {
      sub_233CBFC80((_BYTE *)(a2 + 42));
      sub_2341147D0(0xDu, 3);
    }
    v6 = *v7;
    if (*v7)
      v6 = *(_WORD *)sub_233CBFC80((_BYTE *)(a2 + 42));
  }
  *(_WORD *)(a1 + 106) = v6;
  v11 = *(_OWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 32);
  return sub_23420DCEC(a1, &v11, 1);
}

uint64_t sub_23420D654(uint64_t a1)
{
  *(_BYTE *)(a1 + 49) = 0;
  *(_WORD *)(a1 + 51) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 105) = 0;
  return sub_23420D674(a1, 0);
}

uint64_t sub_23420D674(uint64_t a1, char a2)
{
  NSObject *v3;
  unint64_t v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 48) = a2;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(char *)(a1 + 48);
    if (v4 > 4)
      v5 = "N/A";
    else
      v5 = off_2505167F0[v4];
    *(_DWORD *)buf = 136315906;
    v8 = "MoveToState";
    v9 = 2048;
    v10 = a1;
    v11 = 1040;
    v12 = 10;
    v13 = 2080;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "%s ReadClient[%p]: Moving to [%10.10s]", buf, 0x26u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 3);
  return result;
}

double sub_23420D7C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v2 + 72))(v2, sub_234210930, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
  (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v3 + 72))(v3, sub_23420DB60, a1);
  *(_BYTE *)(a1 + 105) = 0;
  if (*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 248) || *(_QWORD *)(a1 + 280))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 88))(*(_QWORD *)(a1 + 40), a1 + 208);
    result = 0.0;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
  }
  return result;
}

uint64_t sub_23420D874(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v2 + 72))(v2, sub_234210930, a1);
}

uint64_t sub_23420D8B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
  result = (*(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v2 + 72))(v2, sub_23420DB60, a1);
  *(_BYTE *)(a1 + 105) = 0;
  return result;
}

uint64_t sub_23420D8FC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);

  *(_QWORD *)a1 = &off_250516748;
  sub_2341B1F64("src/app/ReadClient.cpp", 101);
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    sub_23420D7C4(a1);
    v2 = *(_QWORD *)(a1 + 200);
    if (v2)
      sub_234202934(v2, a1);
  }
  sub_2341CD754(a1 + 208);
  v3 = *(void (**)(uint64_t))(a1 + 168);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = 0;
    v3(a1 + 152);
  }
  v4 = *(void (**)(uint64_t))(a1 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = 0;
    v4(a1 + 112);
  }
  *(_QWORD *)(a1 + 16) = &off_2504F0DD0;
  sub_233CF4DD8(a1 + 16);
  return a1;
}

void sub_23420D9A8(uint64_t a1)
{
  sub_23420D8FC(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_23420D9CC(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;

  v2 = *(_DWORD *)(a1 + 328);
  if (v2 > 0xE)
  {
    v3 = 5538000;
  }
  else
  {
    v3 = 10000 * sub_234115890(v2);
    if (!v3)
    {
      v4 = 0;
      goto LABEL_6;
    }
  }
  v4 = 30 * v3 / 0x64u + sub_234136AF8() % (v3 - 30 * v3 / 0x64u);
LABEL_6:
  if (v4 <= *(unsigned __int16 *)(a1 + 106))
    return *(unsigned __int16 *)(a1 + 106);
  else
    return v4;
}

uint64_t sub_23420DA54@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  int v7;
  char v8;
  uint64_t v10;
  uint64_t *v11;
  _BYTE *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(result + 48))
  {
    v6 = 150;
    v7 = 3;
LABEL_3:
    *(_DWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a5 + 16) = v6;
    return result;
  }
  v8 = a4;
  v10 = result;
  if (a4)
  {
    if (*a3)
    {
      v6 = 155;
      v7 = 47;
      goto LABEL_3;
    }
    v12 = (_BYTE *)(result + 232);
    v13 = *(unsigned __int8 *)(v10 + 232);
    *(_BYTE *)(v10 + 104) = a4;
    if (v13)
    {
      v14 = (uint64_t *)sub_233C25EA4(v12);
      v15 = sub_2341CD3C0(*v14);
      sub_2341CB7C4(v15);
    }
  }
  else
  {
    if (*a3)
    {
      v11 = (uint64_t *)sub_233CB6588(a3);
      sub_2341CDA90((_QWORD *)(v10 + 208), v11);
    }
    *(_BYTE *)(v10 + 104) = v8;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
  result = (*(uint64_t (**)(uint64_t, _QWORD, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v16 + 40))(v16, a2, sub_23420DB60, v10);
  if (!*(_DWORD *)a5)
  {
    v7 = 0;
    *(_BYTE *)(v10 + 105) = 1;
    v6 = 176;
    goto LABEL_3;
  }
  return result;
}

void sub_23420DB60(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _BOOL8 v11;
  _QWORD v12[3];
  uint8_t buf[8];
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    sub_23425F6FC(a1);
  *(_BYTE *)(a2 + 105) = 0;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a2 + 104);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "OnResubscribeTimerCallback: ForceCASE = %d", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xDu, 2);
  v5 = *(unsigned __int8 *)(a2 + 232);
  ++*(_DWORD *)(a2 + 328);
  if (v5
    && (v6 = (uint64_t *)sub_233C25EA4((_BYTE *)(a2 + 232)),
        v7 = sub_2341CD3C0(*v6),
        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7) & 1) != 0))
  {
    sub_23420E57C(a2, a2 + 208, buf);
    v8 = *(_QWORD *)buf;
    if (!*(_DWORD *)buf)
      return;
    v9 = v14;
    v10 = v15;
    v11 = 1;
  }
  else
  {
    sub_234210C0C(a2, (uint64_t)buf);
    if (!*(_DWORD *)buf)
      return;
    LODWORD(v10) = 1345;
    v11 = *(_BYTE *)(a2 + 104) == 0;
    v8 = 0x300000003;
    v9 = "src/app/ReadClient.cpp";
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  sub_23420DCEC(a2, v12, v11);
}

_QWORD *sub_23420DCEC(uint64_t a1, __int128 *a2, int a3)
{
  int v6;
  uint64_t v7;
  _QWORD *result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[16];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (!*(_BYTE *)(a1 + 80))
  {
    if (*(_DWORD *)a2)
    {
      v10 = *(_QWORD *)(a1 + 40);
      v18 = *a2;
      v19 = *((_QWORD *)a2 + 2);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 72))(v10, &v18);
    }
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 48) - 1 <= 1)
  {
    *(_DWORD *)buf = 1;
    *(_QWORD *)&buf[8] = "core_dev_subscription_setup";
    LODWORD(v17) = *(_DWORD *)a2;
    BYTE4(v17) = 3;
    sub_2341C4BEC((uint64_t)buf);
  }
  *(_BYTE *)(a1 + 49) = 0;
  *(_WORD *)(a1 + 51) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 105) = 0;
  sub_23420D674(a1, 0);
  v6 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
LABEL_19:
    sub_23420D7C4(a1);
LABEL_20:
    sub_233CF4DD8(a1 + 16);
    return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40), a1);
  }
  if (!a3 || !*(_QWORD *)(a1 + 256) && !*(_QWORD *)(a1 + 272))
    goto LABEL_18;
  v7 = *(_QWORD *)(a1 + 40);
  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  result = (*(_QWORD *(**)(uint8_t *__return_ptr, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 64))(buf, v7, a1, &v14);
  *a2 = *(_OWORD *)buf;
  *((_QWORD *)a2 + 2) = v17;
  if (!*(_DWORD *)a2)
    return result;
  if (*(_DWORD *)a2 != 22)
  {
LABEL_18:
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 72))(v11, &v12);
    goto LABEL_19;
  }
  if (v6 != 22)
    sub_23425F790((uint64_t)result);
  v9 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "ICD device is inactive mark subscription as InactiveICDSubscription", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xDu, 2);
  return (_QWORD *)sub_23420D674(a1, 4);
}

const char *sub_23420DEEC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(char *)(a1 + 48);
  if (v1 > 4)
    return "N/A";
  else
    return off_2505167F0[v1];
}

void sub_23420DF14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    sub_23420E57C(a1, a2, (_QWORD *)a3);
  }
  else if (*(_BYTE *)(a1 + 80))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a3 + 16) = 276;
  }
  else
  {
    sub_23420DF4C(a1, a2, a3);
  }
}

void sub_23420DF4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  char v48[64];
  _QWORD v49[3];
  char v50;
  uint64_t v51;
  uint64_t v52[2];
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  _BYTE buf[24];
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[7];

  v66[6] = *MEMORY[0x24BDAC8D0];
  v6 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "SendReadRequest";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a1;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "%s ReadClient[%p]: Sending Read Request", buf, 0x16u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  if (*(_BYTE *)(a1 + 48))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a3 + 16) = 285;
    return;
  }
  sub_2342116FC(&v54, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  sub_2342116FC(v53, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
  sub_2342116FC(v52, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  v51 = 0;
  sub_23411BFF8((uint64_t)buf);
  sub_23411BFF8((uint64_t)&v58);
  sub_23411BFF8((uint64_t)&v59);
  sub_23411BFF8((uint64_t)&v60);
  sub_23411BFF8((uint64_t)&v61);
  sub_23411BFF8((uint64_t)&v62);
  sub_23411BFF8((uint64_t)&v63);
  sub_23411BFF8((uint64_t)&v64);
  sub_23411BFF8((uint64_t)&v65);
  sub_23411BFF8((uint64_t)v66);
  sub_234106C48((uint64_t)v48);
  v49[1] = 0;
  v49[2] = 0;
  v49[0] = &unk_250504030;
  v50 = 0;
  sub_23420E610((uint64_t)v48, (uint64_t)&v43);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23411E904((uint64_t)buf, v48, a3);
  if (!*(_DWORD *)a3)
  {
    if (!v55)
      goto LABEL_14;
    v7 = sub_23411E1C8((uint64_t)buf);
    v8 = *(_QWORD *)&buf[8];
    v9 = *(_DWORD *)buf;
    *(_QWORD *)a3 = *(_QWORD *)buf;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    if (!v9)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23420E6FC(v7, &v54, a3);
      if (!*(_DWORD *)a3)
      {
LABEL_14:
        if (!v53[1])
          goto LABEL_50;
        v10 = sub_23411E270((uint64_t)buf);
        v11 = *(_QWORD *)&buf[8];
        v12 = *(_DWORD *)buf;
        *(_QWORD *)a3 = *(_QWORD *)buf;
        *(_QWORD *)(a3 + 8) = v11;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
        if (!v12)
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23420E7CC(v10, (uint64_t)v53, a3);
          if (!*(_DWORD *)a3)
          {
            LOBYTE(v43) = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_QWORD *)(a3 + 16) = 0;
            *(_QWORD *)a3 = 0;
            sub_23420E89C((_BYTE *)a1, a2, (uint64_t)&v43, (_QWORD *)a3);
            if (!*(_DWORD *)a3)
            {
              if (!(_BYTE)v43)
                goto LABEL_50;
              v13 = sub_23411E2C4((uint64_t)buf);
              v14 = *(_QWORD *)&buf[8];
              v15 = *(_DWORD *)buf;
              *(_QWORD *)a3 = *(_QWORD *)buf;
              *(_QWORD *)(a3 + 8) = v14;
              *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
              if (!v15)
              {
                v16 = v13;
                *(_QWORD *)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
                *(_QWORD *)(a3 + 16) = 0;
                v17 = (unint64_t *)sub_233CB6588(&v43);
                sub_23411CE7C(v16, *v17, a3);
                if (!*(_DWORD *)a3)
                {
LABEL_50:
                  *(_QWORD *)a3 = 0;
                  *(_QWORD *)(a3 + 8) = 0;
                  *(_QWORD *)(a3 + 16) = 0;
                  v18 = sub_23411E318((uint64_t)buf, *(unsigned __int8 *)(a2 + 113));
                  *(_OWORD *)a3 = *(_OWORD *)v18;
                  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v18 + 16);
                  if (!*(_DWORD *)a3)
                  {
                    v47 = 0;
                    sub_234106C48((uint64_t)&v43);
                    v19 = v57[3];
                    v21 = *v57;
                    v20 = v57[1];
                    v45 = v57[2];
                    v46 = v19;
                    v43 = v21;
                    v44 = v20;
                    v22 = sub_23411E21C((uint64_t)buf);
                    *(_OWORD *)a3 = *(_OWORD *)buf;
                    *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
                    if (!*(_DWORD *)a3)
                    {
                      v23 = v22;
                      if (!v55
                        || (*(_QWORD *)a3 = 0,
                            *(_QWORD *)(a3 + 8) = 0,
                            *(_QWORD *)(a3 + 16) = 0,
                            sub_23420E938(a1, v22, &v54, v52, &v47, (_QWORD *)a3),
                            !*(_DWORD *)a3))
                      {
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        v24 = *(_QWORD *)(v23 + 24);
                        if (*(_WORD *)(v24 + 60) != 21169)
                        {
                          v26 = 175;
                          v27 = 3;
                          goto LABEL_29;
                        }
                        v25 = *(_DWORD *)(v24 + 52);
                        if (v25 <= 4)
                        {
                          v26 = 176;
                          v27 = 11;
LABEL_29:
                          *(_DWORD *)a3 = v27;
                          *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
LABEL_30:
                          *(_DWORD *)(a3 + 16) = v26;
                          goto LABEL_8;
                        }
                        *(_DWORD *)(v24 + 52) = v25 - 5;
                        *(_DWORD *)(v24 + 40) += 5;
                        *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
                        *(_DWORD *)(a3 + 16) = 179;
                        if (!v47)
                        {
                          v28 = v57;
                          v29 = v43;
                          v30 = v44;
                          v31 = v46;
                          v57[2] = v45;
                          v28[3] = v31;
                          *v28 = v29;
                          v28[1] = v30;
                          sub_23411C030((uint64_t)buf);
                          goto LABEL_35;
                        }
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_23411ACD8(v23, a3);
                        if (!*(_DWORD *)a3)
                        {
LABEL_35:
                          *(_QWORD *)a3 = 0;
                          *(_QWORD *)(a3 + 8) = 0;
                          *(_QWORD *)(a3 + 16) = 0;
                          sub_23411E36C((uint64_t)buf, a3);
                          if (*(_DWORD *)a3)
                            goto LABEL_8;
                          *(_QWORD *)a3 = 0;
                          *(_QWORD *)(a3 + 8) = 0;
                          *(_QWORD *)(a3 + 16) = 0;
                          sub_233C115F0((uint64_t)v48, &v51, (_QWORD *)a3);
                          if (*(_DWORD *)a3)
                            goto LABEL_8;
                          if (*(_BYTE *)(a2 + 24))
                          {
                            v32 = *(_QWORD *)(a1 + 8);
                            v42 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a2 + 24));
                            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
                            LOBYTE(v41) = 1;
                            v33 = (uint64_t *)sub_233C25EA4(&v41);
                            v34 = sub_2341AE734(v32, v33, a1, 1u);
                            if ((_BYTE)v41)
                              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
                            if (v34)
                            {
                              sub_233CF4DD8(a1 + 16);
                              *(_QWORD *)(a1 + 32) = v34;
                              v34[5] = a1 + 16;
                              v35 = *(_DWORD *)(a2 + 104);
                              v36 = sub_2340F3F3C(a1 + 16);
                              if (v35)
                                sub_2341AD100(v36, *(_DWORD *)(a2 + 104));
                              else
                                sub_2341AD0C8(v36, 2000);
                              *(_QWORD *)a3 = 0;
                              *(_QWORD *)(a3 + 8) = 0;
                              *(_QWORD *)(a3 + 16) = 0;
                              v37 = sub_2340F3F3C(a1 + 16);
                              v41 = 1;
                              sub_2341AD108(v37, 0x10000u, 2, &v51, &v41, a3);
                              if (*(_DWORD *)a3)
                                goto LABEL_8;
                              v38 = (uint64_t *)sub_233C25EA4((_BYTE *)(a2 + 24));
                              v39 = sub_2341CD3C0(*v38);
                              *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39);
                              *(_BYTE *)(a1 + 72) = v40;
                              sub_23420D674(a1, 1);
                              *(_DWORD *)a3 = 0;
                              *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                              v26 = 371;
                            }
                            else
                            {
                              *(_DWORD *)a3 = 11;
                              *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                              v26 = 352;
                            }
                          }
                          else
                          {
                            *(_DWORD *)a3 = 119;
                            *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                            v26 = 349;
                          }
                          goto LABEL_30;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_8:
  sub_2340F6E6C(v49);
  if (v51)
    sub_23411814C(v51);
}

void sub_23420E57C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  int v5;
  const char *v6;
  int v7;
  char v8;

  if (*(unsigned __int16 *)(a2 + 108) <= *(unsigned __int16 *)(a2 + 110))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_234210CF4(a1, a2, (uint64_t)a3);
    v4 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      v5 = 1;
      v6 = "core_dev_subscription_setup";
      v7 = v4;
      v8 = 3;
      sub_2341C4BEC((uint64_t)&v5);
    }
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 1126;
  }
}

void sub_23420E610(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  _BYTE v8[24];

  sub_234118674(0x4AAuLL, 0x26u, &v7);
  if (!v7)
  {
    v5 = 31;
    v6 = 11;
LABEL_8:
    *(_DWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = "src/app/InteractionModelHelper.h";
    *(_DWORD *)(a2 + 16) = v5;
    goto LABEL_9;
  }
  if ((unint64_t)sub_23411828C(v7) < 0x4AB)
    v4 = 21;
  else
    v4 = (unsigned __int16)(sub_23411828C(v7) - 1173);
  sub_233CAF098(a1 + 64, &v7, 0);
  sub_234106CA8(a1, a1 + 64, 0xFFFFFFFF, (uint64_t)v8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_234106E50(a1, v4, a2);
  if (!*(_DWORD *)a2)
  {
    v6 = 0;
    v5 = 42;
    goto LABEL_8;
  }
LABEL_9:
  if (v7)
    sub_23411814C(v7);
}

void sub_23420E6FC(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a2[1];
  if (v5)
  {
    v6 = *a2;
    v7 = 12 * v5;
    while (*(__int16 *)(v6 + 10) == -1 || *(_DWORD *)(v6 + 4) != -1)
    {
      v8 = sub_23411BB4C(a1);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)a3)
        return;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411B62C(v8, v6, a3);
      if (*(_DWORD *)a3)
        return;
      v6 += 12;
      v7 -= 12;
      if (!v7)
        goto LABEL_8;
    }
    *(_DWORD *)a3 = 181;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a3 + 16) = 392;
  }
  else
  {
LABEL_8:
    sub_23411ACD8(a1, a3);
  }
}

void sub_23420E7CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_DWORD **)a2;
    v7 = 12 * v5;
    while (*v6 != -1 || v6[1] == -1)
    {
      v8 = sub_23411BB4C(a1);
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)a3)
        return;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411D274(v8, (uint64_t)v6, a3);
      if (*(_DWORD *)a3)
        return;
      v6 += 3;
      v7 -= 12;
      if (!v7)
        goto LABEL_8;
    }
    *(_DWORD *)a3 = 182;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a3 + 16) = 378;
  }
  else
  {
LABEL_8:
    sub_23411ACD8(a1, a3);
  }
}

_BYTE *sub_23420E89C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  if (*(_BYTE *)(a2 + 88))
  {
    *(_BYTE *)a3 = *(_BYTE *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 96);
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 5) + 104))(*((_QWORD *)result + 5), a3);
  if (!*(_DWORD *)a4)
  {
    if (!*(_BYTE *)a3)
      goto LABEL_4;
    result = sub_233CB6588((_BYTE *)a3);
    v6 = *(_QWORD *)result + 1;
    *(_BYTE *)a3 = 1;
LABEL_3:
    *(_QWORD *)(a3 + 8) = v6;
LABEL_4:
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a4 + 4) = 1392;
  }
  return result;
}

void sub_23420E938(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, _BYTE *a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 40) + 96))(a6);
  if (!*(_DWORD *)a6)
  {
    if (*a5 || (*a6 = 0, a6[1] = 0, a6[2] = 0, sub_23420E9EC(a2, a3, a4, a5, (uint64_t)a6), !*(_DWORD *)a6))
    {
      *(_DWORD *)a6 = 0;
      a6[1] = "src/app/ReadClient.cpp";
      *((_DWORD *)a6 + 4) = 475;
    }
  }
}

double sub_23420E9EC@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, _BYTE *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v20;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double result;
  int v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = a3[1];
  if (!v6)
  {
LABEL_22:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/ReadClient.cpp";
    v27 = 444;
    goto LABEL_24;
  }
  v10 = *a3;
  v11 = *a3 + 16 * v6;
  while (1)
  {
    v12 = *(unsigned __int16 *)(v10 + 12);
    if (v12 == 0xFFFF || *(_DWORD *)v10 == -1 || !*(_BYTE *)(v10 + 4))
    {
      *(_DWORD *)a5 = 47;
      *(_QWORD *)(a5 + 8) = "src/app/ReadClient.cpp";
      v27 = 408;
      goto LABEL_24;
    }
    v13 = a2[1];
    if (v13)
      break;
LABEL_21:
    v10 += 16;
    if (v10 == v11)
      goto LABEL_22;
  }
  v14 = 12 * v13;
  v15 = *a2 + 8;
  v16 = (unsigned __int16 *)v15;
  while (1)
  {
    v18 = *v16;
    v16 += 6;
    v17 = v18;
    if (v18 == 0xFFFF || v17 == v12)
    {
      v20 = *(_DWORD *)(v15 - 8);
      if (v20 == -1 || v20 == *(_DWORD *)v10)
        break;
    }
    v15 = (uint64_t)v16;
    v14 -= 12;
    if (!v14)
      goto LABEL_21;
  }
  sub_234106C48((uint64_t)&v34);
  v22 = *(__int128 **)(a1 + 24);
  v23 = v22[3];
  v25 = *v22;
  v24 = v22[1];
  v36 = v22[2];
  v37 = v23;
  v34 = v25;
  v35 = v24;
  v32 = 0uLL;
  v33 = 0;
  sub_23420EB90(a1, v10, (uint64_t)&v32);
  if (!(_DWORD)v32)
  {
    *a4 = 1;
    goto LABEL_21;
  }
  if ((_DWORD)v32 == 25 || (_DWORD)v32 == 11)
  {
    v28 = *(_OWORD **)(a1 + 24);
    v29 = v34;
    v30 = v35;
    v31 = v37;
    v28[2] = v36;
    v28[3] = v31;
    *v28 = v29;
    v28[1] = v30;
    sub_23411C030(a1);
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/ReadClient.cpp";
    v27 = 437;
LABEL_24:
    *(_DWORD *)(a5 + 16) = v27;
  }
  else
  {
    result = *(double *)&v32;
    *(_OWORD *)a5 = v32;
    *(_QWORD *)(a5 + 16) = v33;
  }
  return result;
}

void sub_23420EB90(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;

  v6 = sub_23411C688(a1);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  if (!*(_DWORD *)a3)
  {
    v7 = v6;
    v8 = sub_23411BF50(v6);
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
    if (!*(_DWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v9 = sub_23411C140(v8, *(unsigned __int16 *)(a2 + 12));
      v10 = sub_23411C194(v9, *(_DWORD *)a2);
      sub_23411ACD8(v10, a3);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        v11 = (unsigned int *)sub_233C20E2C((_BYTE *)(a2 + 4));
        v12 = sub_23411C48C(v7, *v11);
        sub_23411ACD8(v12, a3);
        if (!*(_DWORD *)a3)
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
          *(_DWORD *)(a3 + 16) = 457;
        }
      }
    }
  }
}

uint64_t sub_23420EC68(uint64_t a1)
{
  uint64_t result;
  __int128 v3;
  int v4;

  result = sub_2342029A4(*(_QWORD *)(a1 + 200), a1);
  if ((result & 1) == 0)
    sub_23425F8B8(result);
  if (*(_BYTE *)(a1 + 48) == 4)
  {
    LODWORD(v3) = 50;
    *((_QWORD *)&v3 + 1) = "src/app/ReadClient.cpp";
    v4 = 487;
    return sub_23420ECD4(a1, &v3);
  }
  return result;
}

uint64_t sub_23420ECD4(uint64_t a1, __int128 *a2)
{
  _BYTE *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];

  v5 = *(unsigned __int8 *)(a1 + 232);
  v4 = (_BYTE *)(a1 + 232);
  if (v5)
  {
    v6 = (uint64_t *)sub_233C25EA4(v4);
    v7 = *(_QWORD *)(sub_2341CD3C0(*v6) + 128);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 80) + 88);
    v12 = &v13;
    v13 = v7;
    v14[0] = a1 + 64;
    v14[1] = &v12;
    sub_234115DFC((_QWORD *)(v8 + 128), (uint64_t)v14, (unsigned int (*)(uint64_t))sub_23421171C);
  }
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  return sub_23420DCEC(a1, &v10, 1);
}

uint64_t sub_23420ED68(uint64_t a1, int a2)
{
  _BOOL8 v4;
  NSObject *v5;
  const char *v6;
  uint64_t result;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2342029A4(*(_QWORD *)(a1 + 200), a1);
  if (!v4)
    sub_23425F94C(v4);
  *(_BYTE *)(a1 + 336) = a2 == 1;
  v5 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 336))
      v6 = "a";
    else
      v6 = "not a";
    *(_DWORD *)buf = 136315138;
    v9 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Peer is now %s LIT ICD.", buf, 0xCu);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0xDu, 2);
  if (!*(_BYTE *)(a1 + 336))
    return sub_23420EC68(a1);
  return result;
}

void sub_23420EE9C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v14;
  int v15;
  NSObject *v18;
  __int128 v19;
  uint64_t v20;
  uint8_t buf[16];
  uint64_t v22;

  v8 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)a5 = xmmword_250516778;
  a5[2] = 508;
  if ((v8 | 4) == 4)
  {
    v9 = 3;
    *(_DWORD *)a5 = 3;
    a5[1] = "src/app/ReadClient.cpp";
    v10 = 510;
LABEL_5:
    *((_DWORD *)a5 + 4) = v10;
    goto LABEL_6;
  }
  if (*((_WORD *)a3 + 2))
  {
LABEL_4:
    v9 = 42;
    *(_DWORD *)a5 = 42;
    a5[1] = "src/app/ReadClient.cpp";
    v10 = 533;
    goto LABEL_5;
  }
  v14 = *((unsigned __int16 *)a3 + 3);
  v15 = *a3;
  if (v14 == 1 && v15 == 5)
  {
    sub_23420F15C(a1, a4, a5);
    v9 = *(_DWORD *)a5;
    if (*(_DWORD *)a5)
      goto LABEL_6;
    goto LABEL_31;
  }
  if (v14 == 1 && v15 == 4)
  {
    v18 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "SubscribeResponse is received", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xDu, 2);
    if (*(_QWORD *)(a1 + 32) != a2)
    {
      v9 = 3;
      *(_DWORD *)a5 = 3;
      a5[1] = "src/app/ReadClient.cpp";
      v10 = 519;
      goto LABEL_5;
    }
    sub_23420F58C(a1, a4, a5);
    *(_DWORD *)buf = 1;
    *(_QWORD *)&buf[8] = "core_dev_subscription_setup";
    LODWORD(v22) = *(_DWORD *)a5;
    v9 = v22;
    BYTE4(v22) = 3;
    sub_2341C4BEC((uint64_t)buf);
    if (v9)
      goto LABEL_6;
LABEL_31:
    v12 = 0;
    goto LABEL_10;
  }
  if (v14 != 1 || v15 != 1)
    goto LABEL_4;
  if (*(_QWORD *)(a1 + 32) != a2)
  {
    v9 = 3;
    *(_DWORD *)a5 = 3;
    a5[1] = "src/app/ReadClient.cpp";
    v10 = 525;
    goto LABEL_5;
  }
  *(_OWORD *)buf = xmmword_250516790;
  v22 = 526;
  sub_2342153C0(a4, (uint64_t)buf, a5);
  v9 = *(_DWORD *)a5;
  if (!*(_DWORD *)a5)
  {
    *(_OWORD *)a5 = *(_OWORD *)buf;
    a5[2] = v22;
    v9 = *(_DWORD *)a5;
    if (!*(_DWORD *)a5)
    {
      v9 = 42;
      *(_DWORD *)a5 = 42;
      a5[1] = "src/app/ReadClient.cpp";
      v10 = 529;
      goto LABEL_5;
    }
  }
LABEL_6:
  if (v9 == 107)
    v11 = 125;
  else
    v11 = 128;
  sub_234215204(v11, a2, 0, (uint64_t)buf);
  v12 = 1;
LABEL_10:
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    if (!v12)
      return;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 52))
    LOBYTE(v12) = 1;
  if ((v12 & 1) != 0)
  {
LABEL_16:
    v19 = *(_OWORD *)a5;
    v20 = a5[2];
    sub_23420DCEC(a1, &v19, 1);
  }
}

void sub_23420F15C(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  __int16 v7;
  int v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[72];
  uint64_t v15;
  _BYTE v16[80];
  _BYTE v17[80];
  int v18;
  char v19;
  int v20[20];

  *(_OWORD *)a3 = xmmword_2505167A8;
  a3[2] = 588;
  sub_23411E074((uint64_t)v20);
  v19 = 1;
  v18 = 0;
  sub_23411E074((uint64_t)v17);
  sub_23411E074((uint64_t)v16);
  sub_234104468((uint64_t)v14);
  v15 = 0;
  sub_233C11670((uint64_t)v14, a2);
  sub_23411DF84((uint64_t)v20, (uint64_t)v14, a3);
  if (*(_DWORD *)a3)
    goto LABEL_2;
  sub_23411D048(v20, &v19, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33)
      goto LABEL_2;
    v19 = 0;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 610;
  }
  sub_23411AC14(v20, &v18, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3 == 33)
  {
    if (*(_BYTE *)(a1 + 80) != 1)
    {
      *(_DWORD *)a3 = 0;
      a3[1] = "src/app/ReadClient.cpp";
      *((_DWORD *)a3 + 4) = 635;
      goto LABEL_30;
    }
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadClient.cpp";
    v8 = 631;
LABEL_28:
    *((_DWORD *)a3 + 4) = v8;
    goto LABEL_2;
  }
  if (*(_DWORD *)a3)
    goto LABEL_2;
  if (*(_BYTE *)(a1 + 80) != 1)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/app/ReadClient.cpp";
    v8 = 617;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(a1 + 51))
  {
    if (*(_DWORD *)(a1 + 60) == v18)
      goto LABEL_30;
    *(_DWORD *)a3 = 107;
    a3[1] = "src/app/ReadClient.cpp";
    v8 = 624;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 60) = v18;
LABEL_30:
  v9 = (_BYTE *)(a1 + 52);
  sub_23411E1B8(v20, (char *)(a1 + 52), &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33)
      goto LABEL_2;
    *v9 = 0;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 644;
  }
  sub_23411D580(v20, (uint64_t)v17, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33)
      goto LABEL_2;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 651;
  }
  else
  {
    sub_234104468((uint64_t)&v12);
    sub_23411E0BC((uint64_t)v17, (uint64_t)&v12);
    sub_23420F8D4(a1, (uint64_t)&v12, (uint64_t)&v10);
    *(_OWORD *)a3 = v10;
    a3[2] = v11;
    if (*(_DWORD *)a3)
      goto LABEL_2;
  }
  sub_23411DAB8(v20, (uint64_t)v16, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 != 33)
      goto LABEL_2;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = 664;
  }
  else
  {
    sub_234104468((uint64_t)&v12);
    sub_23411E0BC((uint64_t)v16, (uint64_t)&v12);
    sub_23420FBA8(a1, (uint64_t)&v12, (uint64_t)&v10);
    *(_OWORD *)a3 = v10;
    a3[2] = v11;
    if (*(_DWORD *)a3)
      goto LABEL_2;
  }
  if (*(_BYTE *)(a1 + 49) && !*v9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
    *(_BYTE *)(a1 + 49) = 0;
  }
  sub_23411DFEC((uint64_t)v20, &v12);
  *(_OWORD *)a3 = v12;
  a3[2] = v13;
LABEL_2:
  if (*(_BYTE *)(a1 + 80) == 1)
  {
    v6 = *(unsigned __int8 *)(a1 + 48);
    if (v6 == 3)
    {
      if (!*(_DWORD *)a3)
      {
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a1);
        sub_23421025C((_QWORD *)a1, &v12);
        *(_OWORD *)a3 = v12;
        a3[2] = v13;
      }
    }
    else if (v6 == 1)
    {
      sub_23420D674(a1, 2);
    }
  }
  if (!v19 && !*(_DWORD *)a3)
  {
    v7 = *(_BYTE *)(a1 + 48) != 3 || *(_BYTE *)(a1 + 52) != 0;
    sub_234215204(0, *(_QWORD *)(a1 + 32), v7, (uint64_t)&v12);
    *(_OWORD *)a3 = v12;
    a3[2] = v13;
  }
  *(_BYTE *)(a1 + 51) = 0;
  if (v15)
    sub_23411814C(v15);
}

void sub_23420F58C(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15[20];
  _BYTE v16[72];
  uint64_t v17;
  uint64_t buf;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  sub_234104468((uint64_t)v16);
  v17 = 0;
  sub_233C11670((uint64_t)v16, a2);
  sub_23411E074((uint64_t)v15);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411DF84((uint64_t)v15, (uint64_t)v16, a3);
  if (*(_DWORD *)a3)
    goto LABEL_16;
  v14 = 0;
  sub_23411AC14(v15, &v14, &buf);
  if ((_DWORD)buf)
  {
    v6 = 1073;
    v7 = 47;
LABEL_15:
    *(_DWORD *)a3 = v7;
    a3[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a3 + 4) = v6;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 60) != v14 || *(_BYTE *)(a1 + 80) != 1)
  {
    v6 = 1074;
    v7 = 107;
    goto LABEL_15;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411AF4C(v15, (_WORD *)(a1 + 56), a3);
  if (!*(_DWORD *)a3)
  {
    v8 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_DWORD *)(a1 + 60);
      v10 = *(unsigned __int16 *)(a1 + 54);
      v11 = *(unsigned __int16 *)(a1 + 56);
      v12 = *(unsigned __int8 *)(a1 + 72);
      v13 = *(_QWORD *)(a1 + 64);
      LODWORD(buf) = 67110400;
      HIDWORD(buf) = v9;
      v19 = 1024;
      v20 = v10;
      v21 = 1024;
      v22 = v11;
      v23 = 1024;
      v24 = v12;
      v25 = 1024;
      v26 = HIDWORD(v13);
      v27 = 1024;
      v28 = v13;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Subscription established with SubscriptionID = 0x%08x MinInterval = %us MaxInterval = %us Peer = %02x:%08X%08X", (uint8_t *)&buf, 0x26u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xDu, 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_23411DFEC((uint64_t)v15, a3);
    if (!*(_DWORD *)a3)
    {
      sub_23420D674(a1, 3);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40), v14);
      *(_DWORD *)(a1 + 328) = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      sub_23421025C((_QWORD *)a1, a3);
      if (!*(_DWORD *)a3)
      {
        v7 = 0;
        v6 = 1092;
        goto LABEL_15;
      }
    }
  }
LABEL_16:
  if (v17)
    sub_23411814C(v17);
}

void sub_23420F808(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;

  v5 = a1 + 16;
  sub_2340FAD44(a1 + 16, a2);
  v6 = sub_2340F3F3C(v5);
  sub_233CB4208(v6, &v11);
  sub_2341CDA90((_QWORD *)(a1 + 208), (uint64_t *)&v11);
  (*(void (**)(_QWORD))(*(_QWORD *)v11 + 32))(v11);
  v11 = 0uLL;
  v12 = 0;
  sub_23420F15C(a1, a3, &v11);
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 107)
      v7 = 125;
    else
      v7 = 128;
    sub_234215204(v7, *(_QWORD *)(a1 + 32), 0, (uint64_t)v10);
    v8 = v11;
    v9 = v12;
    sub_23420DCEC(a1, &v8, 1);
  }
}

void sub_23420F8D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void (*v17)(void);
  _BYTE v18[70];
  int v19[20];
  _QWORD v20[10];
  _OWORD v21[4];
  uint64_t v22;
  __int16 v23;
  _WORD v24[2];
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  int v30[20];
  _QWORD v31[2];
  int v32;
  int v33;
  _BYTE v34[72];

  sub_2341058CC(a2, v31);
  v6 = v31[0];
  if (!LODWORD(v31[0]))
  {
    v13 = (__int128 *)(a1 + 88);
    while (1)
    {
      sub_234104468((uint64_t)v34);
      sub_23411E074((uint64_t)v31);
      sub_23411E074((uint64_t)v30);
      v24[0] = 0;
      v26 = 0;
      v25 = 0;
      v27 = 0;
      v28 = 3;
      LOBYTE(v29) = 0;
      *((_QWORD *)&v29 + 1) = 0;
      v23 = 0;
      v14 = *(_OWORD *)(a2 + 48);
      v21[2] = *(_OWORD *)(a2 + 32);
      v21[3] = v14;
      v22 = *(_QWORD *)(a2 + 64);
      v15 = *(_OWORD *)(a2 + 16);
      v21[0] = *(_OWORD *)a2;
      v21[1] = v15;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      sub_23411E964((uint64_t)v31, (uint64_t)v21, (_QWORD *)a3);
      if (*(_DWORD *)a3)
        return;
      sub_23411BC0C((int *)v31, (uint64_t)v30, v20);
      if (LODWORD(v20[0]) == 33)
        break;
      if (!LODWORD(v20[0]))
      {
        v29 = *v13;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        sub_23411CAF4(v30, (uint64_t)v24, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        *v13 = v29;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        sub_23411C7BC(v30, (uint64_t)v34, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        v16 = v27 + 1;
        *(_BYTE *)(a1 + 296) = 1;
        *(_QWORD *)(a1 + 304) = v16;
        if (!*(_BYTE *)(a1 + 49))
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
          *(_BYTE *)(a1 + 49) = 1;
        }
        v17 = *(void (**)(void))(**(_QWORD **)(a1 + 40) + 40);
LABEL_26:
        v17();
      }
      sub_2341058CC(a2, v31);
      v6 = v31[0];
      if (LODWORD(v31[0]))
        goto LABEL_2;
    }
    sub_23411E074((uint64_t)v20);
    sub_23411E074((uint64_t)v19);
    sub_23411E074((uint64_t)v18);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BB9C((int *)v31, (uint64_t)v20, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BEE0((int *)v20, (uint64_t)v19, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411CF4C(v19, (uint64_t)v24, a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411BC0C((int *)v20, (uint64_t)v18, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_23411E42C((uint64_t)v18, &v23, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      return;
    if (!*(_BYTE *)(a1 + 49))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
      *(_BYTE *)(a1 + 49) = 1;
    }
    v17 = *(void (**)(void))(**(_QWORD **)(a1 + 40) + 40);
    goto LABEL_26;
  }
LABEL_2:
  v7 = HIDWORD(v31[0]);
  v8 = (const char *)v31[1];
  v9 = v32;
  v10 = v33;
  v11 = v6 == 33;
  if (v6 == 33)
  {
    v6 = 0;
    v8 = "src/app/ReadClient.cpp";
  }
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v7;
  *(_QWORD *)(a3 + 8) = v8;
  if (v11)
    v12 = 920;
  else
    v12 = v9;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v10;
}

void sub_23420FBA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  const char *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  void *v32;
  unsigned __int8 v33;
  int v34;
  _OWORD v35[4];
  uint64_t v36;
  __int16 v37;
  unsigned __int16 v38;
  char v39;
  _DWORD v40[3];
  char v41;
  int v42;
  int v43[20];
  int v44[20];
  int v45[20];
  _QWORD v46[2];
  int v47;
  int v48;
  _BYTE v49[72];
  int buf;
  _BYTE v51[12];
  int v52;
  _BYTE v53[6];
  __int16 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _BYTE v59[6];
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  sub_2341058CC(a2, v46);
  v6 = v46[0];
  if (LODWORD(v46[0]))
  {
LABEL_2:
    v7 = HIDWORD(v46[0]);
    v8 = (const char *)v46[1];
    v9 = v47;
    v10 = v48;
    v11 = v6 == 33;
    if (v6 == 33)
    {
      v6 = 0;
      v8 = "src/app/ReadClient.cpp";
    }
    *(_DWORD *)a3 = v6;
    *(_DWORD *)(a3 + 4) = v7;
    if (v11)
      v12 = 862;
    else
      v12 = v9;
    *(_QWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 16) = v12;
    *(_DWORD *)(a3 + 20) = v10;
  }
  else
  {
    while (1)
    {
      sub_234104468((uint64_t)v49);
      sub_23411E074((uint64_t)v46);
      sub_23411E074((uint64_t)v45);
      sub_23411E074((uint64_t)v44);
      sub_23411E074((uint64_t)v43);
      v38 = 0;
      v39 = 0;
      v41 = 0;
      memset(v40, 0, 11);
      v37 = 0;
      v13 = *(_OWORD *)(a2 + 48);
      v35[2] = *(_OWORD *)(a2 + 32);
      v35[3] = v13;
      v36 = *(_QWORD *)(a2 + 64);
      v14 = *(_OWORD *)(a2 + 16);
      v35[0] = *(_OWORD *)a2;
      v35[1] = v14;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      sub_23411E964((uint64_t)v46, (uint64_t)v35, (_QWORD *)a3);
      if (*(_DWORD *)a3)
        break;
      sub_23411BB9C((int *)v46, (uint64_t)v44, &v56);
      if ((_DWORD)v56 == 33)
      {
        v19 = HIDWORD(v56);
        v20 = v57;
        v21 = v58;
        v22 = *(_DWORD *)v59;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411BC0C((int *)v46, (uint64_t)v45, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411ABA4(v45, (uint64_t)v43, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411B170(v43, &v38, 1, &v56);
        v23 = v56;
        v24 = (_DWORD)v56 ? 181 : 0;
        v25 = (_DWORD)v56 ? 751 : 752;
        *(_DWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
        *(_DWORD *)(a3 + 16) = v25;
        if (v23)
          return;
        if (sub_2342106D8((__int16 *)&v38))
        {
          v34 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_23411AC14(v45, &v34, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return;
          v41 = 1;
          v42 = v34;
          if (*(_QWORD *)(a1 + 280))
            sub_234210764(a1, &v38);
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23411AC24(v45, (uint64_t)v49, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return;
          if (!BYTE2(v40[2]))
            BYTE2(v40[2]) = sub_23410462C((uint64_t)v49) == 22;
          if (!v38 && v40[0] == 70 && v40[1] == 8)
          {
            v33 = 0;
            sub_234104468((uint64_t)&v56);
            sub_2341045C8(v27, (uint64_t)v49);
            sub_234210590((uint64_t)&v56, &v33, (uint64_t)&buf);
            if (buf)
            {
              v28 = sub_234117B80(0xDu, "DataManagement");
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                buf = 33;
                *(_DWORD *)v51 = v19;
                *(_QWORD *)&v51[4] = v20;
                v52 = v21;
                *(_DWORD *)v53 = v22;
                v29 = sub_2341083CC((const char **)&buf, 1);
                buf = 136315138;
                *(_QWORD *)v51 = v29;
                _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Failed to get ICD state from attribute data with error'%s'", (uint8_t *)&buf, 0xCu);
              }
              if (sub_234114844(1u))
              {
                buf = 33;
                *(_DWORD *)v51 = v19;
                *(_QWORD *)&v51[4] = v20;
                v52 = v21;
                *(_DWORD *)v53 = v22;
                sub_2341083CC((const char **)&buf, 1);
                sub_2341147D0(0xDu, 1);
              }
            }
            else
            {
              v32 = sub_2341FF930();
              sub_23420262C((uint64_t)v32, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), v33);
            }
          }
          if (!*(_BYTE *)(a1 + 49))
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
            *(_BYTE *)(a1 + 49) = 1;
          }
          (*(void (**)(_QWORD, unsigned __int16 *, _BYTE *, __int16 *, uint64_t))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), &v38, v49, &v37, v26);
        }
        else
        {
          v31 = sub_234117B80(0xDu, "DataManagement");
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v56) = 67110144;
            HIDWORD(v56) = v38;
            LOWORD(v57) = 1024;
            *(_DWORD *)((char *)&v57 + 2) = HIWORD(v40[0]);
            HIWORD(v57) = 1024;
            v58 = LOWORD(v40[0]);
            *(_WORD *)v59 = 1024;
            *(_DWORD *)&v59[2] = HIWORD(v40[1]);
            v60 = 1024;
            v61 = LOWORD(v40[1]);
            _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "Skipping AttributeDataIB  with out-of-range IDs: (%d, 0x%04X_%04X, 0x%04X_%04X) ", (uint8_t *)&v56, 0x20u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0xDu, 1);
        }
      }
      else if (!(_DWORD)v56)
      {
        sub_23411E074((uint64_t)&v56);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411BEE0(v44, (uint64_t)v43, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411B170(v43, &v38, 1, &buf);
        v15 = buf;
        v16 = buf ? 181 : 0;
        v17 = buf ? 751 : 752;
        *(_DWORD *)a3 = v16;
        *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
        *(_DWORD *)(a3 + 16) = v17;
        if (v15)
          return;
        if (sub_2342106D8((__int16 *)&v38))
        {
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23411BC0C(v44, (uint64_t)&v56, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return;
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          sub_23411E42C((uint64_t)&v56, &v37, (_QWORD *)a3);
          if (*(_DWORD *)a3)
            return;
          if (!*(_BYTE *)(a1 + 49))
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
            *(_BYTE *)(a1 + 49) = 1;
          }
          (*(void (**)(_QWORD, unsigned __int16 *, _QWORD, __int16 *, uint64_t))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40), &v38, 0, &v37, v18);
        }
        else
        {
          v30 = sub_234117B80(0xDu, "DataManagement");
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            buf = 67110144;
            *(_DWORD *)v51 = v38;
            *(_WORD *)&v51[4] = 1024;
            *(_DWORD *)&v51[6] = HIWORD(v40[0]);
            *(_WORD *)&v51[10] = 1024;
            v52 = LOWORD(v40[0]);
            *(_WORD *)v53 = 1024;
            *(_DWORD *)&v53[2] = HIWORD(v40[1]);
            v54 = 1024;
            v55 = LOWORD(v40[1]);
            _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_ERROR, "Skipping AttributeStatusIB with out-of-range IDs: (%d, 0x%04X_%04X, 0x%04X_%04X) ", (uint8_t *)&buf, 0x20u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(0xDu, 1);
        }
      }
      sub_2341058CC(a2, v46);
      v6 = v46[0];
      if (LODWORD(v46[0]))
        goto LABEL_2;
    }
  }
}

_QWORD *sub_23421025C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v13 = xmmword_2505167C0;
  v14 = 938;
  if (*((_BYTE *)result + 48) == 3)
  {
    v3 = (uint64_t)result;
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v4 + 72))(v4, sub_234210930, v3);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = (_QWORD *)sub_23421082C(v3, &v12, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      v5 = sub_234117B80(0xDu, "DataManagement");
      v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      v7 = v12;
      if (v6)
      {
        v8 = *(_DWORD *)(v3 + 60);
        v9 = *(unsigned __int8 *)(v3 + 72);
        v10 = *(_QWORD *)(v3 + 64);
        *(_DWORD *)buf = 134219008;
        v16 = v12;
        v17 = 1024;
        v18 = v8;
        v19 = 1024;
        v20 = v9;
        v21 = 1024;
        v22 = HIDWORD(v10);
        v23 = 1024;
        v24 = v10;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Refresh LivenessCheckTime for %lu milliseconds with SubscriptionId = 0x%08x Peer = %02x:%08X%08X", buf, 0x24u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(0xDu, 2);
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
      result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v11 + 40))(&v13, v11, v7, sub_234210930, v3);
      *(_OWORD *)a2 = v13;
      a2[2] = v14;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/app/ReadClient.cpp";
    *((_DWORD *)a2 + 4) = 940;
  }
  return result;
}

_QWORD *sub_23421044C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  __int128 v8;
  int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int16 *)(a2 + 112);
    if (sub_2341AD080(a2))
      v6 = 105;
    else
      v6 = 114;
    *(_DWORD *)buf = 67109376;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Time out! failed to receive report data from Exchange: %u%c", buf, 0xEu);
  }
  if (sub_234114844(1u))
  {
    sub_2341AD080(a2);
    sub_2341147D0(0xDu, 1);
  }
  LODWORD(v8) = 50;
  *((_QWORD *)&v8 + 1) = "src/app/ReadClient.cpp";
  v9 = 716;
  return sub_23420DCEC(a1, &v8, 1);
}

double sub_234210590@<D0>(uint64_t a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  uint64_t v7;
  char v8;

  v8 = 0;
  v6 = 0uLL;
  v7 = 0;
  sub_233CFA9D4(a1, &v8, &v6);
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = v7;
  if (!*(_DWORD *)a3)
  {
    if (v8 == 1)
    {
      *a2 = 1;
    }
    else if (v8)
    {
      LODWORD(v6) = 47;
      *((_QWORD *)&v6 + 1) = "src/app/ReadClient.cpp";
      LODWORD(v7) = 735;
    }
    else
    {
      *a2 = 0;
    }
    result = *(double *)&v6;
    *(_OWORD *)a3 = v6;
    *(_QWORD *)(a3 + 16) = v7;
  }
  return result;
}

void sub_234210638(int *a1@<X1>, _WORD *a2@<X2>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  _QWORD v6[3];

  sub_23411B170(a1, a2, 1, v6);
  if (LODWORD(v6[0]))
    v4 = 181;
  else
    v4 = 0;
  if (LODWORD(v6[0]))
    v5 = 751;
  else
    v5 = 752;
  *(_DWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a3 + 16) = v5;
}

uint64_t sub_23421069C(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 49))
  {
    v1 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 24))(*(_QWORD *)(result + 40));
    *(_BYTE *)(v1 + 49) = 1;
  }
  return result;
}

BOOL sub_2342106D8(__int16 *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  if (*a1 == -1)
    return 0;
  v1 = *((_DWORD *)a1 + 1);
  v2 = HIWORD(v1);
  if (HIWORD(v1) > 0xFFF4u)
    return 0;
  if ((v1 & 0x8000) == 0 && !v2 || (v3 = 0, v2) && (unsigned __int16)(v1 + 1024) <= 0x3FEu)
  {
    v4 = *((_DWORD *)a1 + 2);
    v5 = (unsigned __int16)((unsigned __int16)v4 >> 12) > 4u || HIWORD(v4) >= 0xFFF5u;
    if (v5)
    {
      v5 = v4 >= 0x10000;
      v6 = (unsigned __int16)(v4 + 4096);
      return !v5 && v6 < 0xFFF;
    }
    else
    {
      return 1;
    }
  }
  return v3;
}

uint64_t sub_234210764(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (*(_QWORD *)(result + 288))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(result + 280);
      if (*(unsigned __int16 *)(v4 + v2 + 12) == *a2 && *(_DWORD *)(v4 + v2) == *((_DWORD *)a2 + 1))
      {
        v5 = v4 + v2;
        v6 = *((unsigned __int8 *)a2 + 16);
        *(_BYTE *)(v5 + 4) = v6;
        if (v6)
          *(_DWORD *)(v5 + 8) = *((_DWORD *)a2 + 5);
      }
      ++v3;
      v2 += 16;
    }
    while (v3 < *(_QWORD *)(result + 288));
  }
  return result;
}

_QWORD *sub_2342107CC(uint64_t a1, int a2)
{
  _QWORD *result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 332) = a2;
  v6 = 0uLL;
  v7 = 0;
  result = sub_23421025C((_QWORD *)a1, &v6);
  if ((_DWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    return sub_23420DCEC(a1, &v4, 1);
  }
  return result;
}

uint64_t sub_23421082C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = *(_DWORD *)(result + 332);
  if (v5)
  {
    v6 = 963;
  }
  else
  {
    v7 = result;
    v8 = (_BYTE *)(result + 232);
    if (!*(_BYTE *)(result + 232))
    {
      v6 = 966;
      v16 = 3;
      goto LABEL_6;
    }
    v9 = sub_233C25EA4((_BYTE *)(result + 232));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 88))(*(_QWORD *)v9);
    v11 = sub_233C25EA4(v8);
    v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v11 + 112))(*(_QWORD *)v11, 0);
    v14 = *(_DWORD *)v10;
    v13 = *(_DWORD *)(v10 + 4);
    v15 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    result = sub_2341B1C38(v13, v14, v15, *(unsigned __int16 *)(v10 + 8));
    v5 = v12 + result + 1000 * *(unsigned __int16 *)(v7 + 56) + 2000;
    v6 = 990;
  }
  v16 = 0;
  *a2 = v5;
LABEL_6:
  *(_DWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_234210930(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  __int128 v12;
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = sub_2342029A4(*(_QWORD *)(a2 + 200), a2);
  if (!v3)
    sub_23425F9E0(v3);
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_DWORD *)(a2 + 60);
    v6 = *(unsigned __int8 *)(a2 + 72);
    v7 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)buf = 67109888;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    v19 = 1024;
    v20 = HIDWORD(v7);
    v21 = 1024;
    v22 = v7;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Subscription Liveness timeout with SubscriptionID = 0x%08x, Peer = %02x:%08X%08X", buf, 0x1Au);
  }
  if (sub_234114844(1u))
    sub_2341147D0(0xDu, 1);
  v8 = *(_BYTE *)(a2 + 336) == 0;
  if (*(_BYTE *)(a2 + 336))
    v9 = 22;
  else
    v9 = 50;
  *(_QWORD *)&v12 = v9;
  *((_QWORD *)&v12 + 1) = "src/app/ReadClient.cpp";
  if (v8)
    v10 = 1012;
  else
    v10 = 1027;
  v13 = v10;
  v14 = 0;
  return sub_23420ECD4(a2, &v12);
}

double sub_234210A84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  double result;

  *(_WORD *)(a1 + 106) = 0;
  v5 = a1 + 208;
  sub_234210AF0(a1 + 208, a2);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_23420E57C(a1, v5, a3);
  if (*(_DWORD *)a3)
    return sub_23420D7C4(a1);
  return result;
}

uint64_t sub_234210AF0(uint64_t a1, uint64_t a2)
{
  int v4;

  if (a2 != a1)
  {
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    sub_2341CD920(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    v4 = *(unsigned __int8 *)(a2 + 88);
    *(_BYTE *)(a1 + 88) = v4;
    if (v4)
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
    *(_WORD *)(a1 + 110) = *(_WORD *)(a2 + 110);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
    *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
  }
  return a1;
}

double sub_234210BA4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  double result;

  v6 = *a2;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v6;
  sub_234210AF0(a1 + 208, a3);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_234210C0C(a1, (uint64_t)a4);
  if (*(_DWORD *)a4)
    return sub_23420D7C4(a1);
  return result;
}

_QWORD *sub_234210C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  _QWORD *result;
  int v6;
  int v7;
  uint8_t v8[16];

  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Trying to establish a CASE session for subscription", v8, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0xDu, 2);
  result = (_QWORD *)*((_QWORD *)sub_2341FF930() + 215);
  if (result)
  {
    result = sub_2341FCC34((uint64_t)result, (_QWORD *)(a1 + 64), (uint64_t *)(a1 + 112), a1 + 152, 1, 0, 0);
    v6 = 0;
    v7 = 1430;
  }
  else
  {
    v7 = 1428;
    v6 = 3;
  }
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = "src/app/ReadClient.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

void sub_234210CF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[64];
  _QWORD v58[3];
  char v59;
  uint64_t v60;
  uint64_t v61[2];
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;

  LODWORD(v45) = 0;
  *((_QWORD *)&v45 + 1) = "core_dev_subscription_setup";
  BYTE4(v46) = 0;
  sub_2341C4BEC((uint64_t)&v45);
  if (*(_BYTE *)(a1 + 48))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    *(_DWORD *)(a3 + 16) = 1140;
    return;
  }
  if (a1 + 208 != a2)
    sub_2341CD920(a1 + 208, a2);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 114);
  *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 108);
  sub_2342116FC(&v63, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
  sub_2342116FC(v62, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
  sub_2342116FC(v61, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
  v60 = 0;
  sub_234106C48((uint64_t)v57);
  v58[1] = 0;
  v58[2] = 0;
  v58[0] = &unk_250504030;
  v59 = 0;
  sub_23411BFF8((uint64_t)&v45);
  sub_23411BFF8((uint64_t)&v48);
  sub_23411BFF8((uint64_t)&v49);
  sub_23411BFF8((uint64_t)&v50);
  sub_23411BFF8((uint64_t)&v51);
  sub_23411BFF8((uint64_t)&v52);
  sub_23411BFF8((uint64_t)&v53);
  sub_23411BFF8((uint64_t)&v54);
  sub_23411BFF8((uint64_t)&v55);
  sub_23411BFF8((uint64_t)&v56);
  sub_23420E610((uint64_t)v57, (uint64_t)&v40);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23411E904((uint64_t)&v45, v57, a3);
  if (!*(_DWORD *)a3)
  {
    v6 = sub_23411B3E0((uint64_t)&v45, *(unsigned __int8 *)(a2 + 112));
    v7 = sub_23411C140(v6, *(unsigned __int16 *)(a2 + 108));
    sub_23411B488(v7, *(unsigned __int16 *)(a2 + 110));
    if (!v64
      || (v8 = sub_23411EC34((uint64_t)&v45),
          *(_OWORD *)a3 = *(_OWORD *)v8,
          *(_QWORD *)(a3 + 16) = *(_QWORD *)(v8 + 16),
          !*(_DWORD *)a3)
      && (*(_QWORD *)a3 = 0,
          *(_QWORD *)(a3 + 8) = 0,
          *(_QWORD *)(a3 + 16) = 0,
          sub_23420E6FC(v8, &v63, a3),
          !*(_DWORD *)a3))
    {
      if (!v62[1])
        goto LABEL_50;
      v9 = sub_23411ECDC((uint64_t)&v45);
      *(_OWORD *)a3 = *(_OWORD *)v9;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v9 + 16);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23420E7CC(v9, (uint64_t)v62, a3);
        if (!*(_DWORD *)a3)
        {
          LOBYTE(v40) = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = 0;
          *(_QWORD *)a3 = 0;
          sub_23420E89C((_BYTE *)a1, a2, (uint64_t)&v40, (_QWORD *)a3);
          if (!*(_DWORD *)a3)
          {
            if (!(_BYTE)v40)
              goto LABEL_50;
            v10 = sub_23411ED30((uint64_t)&v45);
            *(_OWORD *)a3 = v45;
            *(_QWORD *)(a3 + 16) = v46;
            if (!*(_DWORD *)a3)
            {
              v11 = v10;
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              v12 = (unint64_t *)sub_233CB6588(&v40);
              sub_23411CE7C(v11, *v12, a3);
              if (!*(_DWORD *)a3)
              {
LABEL_50:
                *(_QWORD *)a3 = 0;
                *(_QWORD *)(a3 + 8) = 0;
                *(_QWORD *)(a3 + 16) = 0;
                v13 = sub_23411ED84((uint64_t)&v45, *(unsigned __int8 *)(a2 + 113));
                *(_OWORD *)a3 = *(_OWORD *)v13;
                *(_QWORD *)(a3 + 16) = *(_QWORD *)(v13 + 16);
                if (!*(_DWORD *)a3)
                {
                  v44 = 0;
                  sub_234106C48((uint64_t)&v40);
                  v14 = v47[3];
                  v16 = *v47;
                  v15 = v47[1];
                  v42 = v47[2];
                  v43 = v14;
                  v40 = v16;
                  v41 = v15;
                  v17 = sub_23411EC88((uint64_t)&v45);
                  *(_OWORD *)a3 = v45;
                  *(_QWORD *)(a3 + 16) = v46;
                  if (!*(_DWORD *)a3)
                  {
                    v18 = v17;
                    if (!v64
                      || (*(_QWORD *)a3 = 0,
                          *(_QWORD *)(a3 + 8) = 0,
                          *(_QWORD *)(a3 + 16) = 0,
                          sub_23420E938(a1, v17, &v63, v61, &v44, (_QWORD *)a3),
                          !*(_DWORD *)a3))
                    {
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      v19 = *(_QWORD *)(v18 + 24);
                      if (*(_WORD *)(v19 + 60) != 21169)
                      {
                        v21 = 175;
                        v22 = 3;
                        goto LABEL_27;
                      }
                      v20 = *(_DWORD *)(v19 + 52);
                      if (v20 <= 4)
                      {
                        v21 = 176;
                        v22 = 11;
LABEL_27:
                        *(_DWORD *)a3 = v22;
                        *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
LABEL_28:
                        *(_DWORD *)(a3 + 16) = v21;
                        goto LABEL_6;
                      }
                      *(_DWORD *)(v19 + 52) = v20 - 5;
                      *(_DWORD *)(v19 + 40) += 5;
                      *(_QWORD *)(a3 + 8) = "src/lib/core/TLVWriter.h";
                      *(_DWORD *)(a3 + 16) = 179;
                      if (!v44)
                      {
                        v23 = v47;
                        v24 = v40;
                        v25 = v41;
                        v26 = v43;
                        v47[2] = v42;
                        v23[3] = v26;
                        *v23 = v24;
                        v23[1] = v25;
                        sub_23411C030((uint64_t)&v45);
                        goto LABEL_33;
                      }
                      *(_QWORD *)a3 = 0;
                      *(_QWORD *)(a3 + 8) = 0;
                      *(_QWORD *)(a3 + 16) = 0;
                      sub_23411ACD8(v18, a3);
                      if (!*(_DWORD *)a3)
                      {
LABEL_33:
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_23411E36C((uint64_t)&v45, a3);
                        if (*(_DWORD *)a3)
                          goto LABEL_6;
                        *(_QWORD *)a3 = 0;
                        *(_QWORD *)(a3 + 8) = 0;
                        *(_QWORD *)(a3 + 16) = 0;
                        sub_233C115F0((uint64_t)v57, &v60, (_QWORD *)a3);
                        if (*(_DWORD *)a3)
                          goto LABEL_6;
                        if (*(_BYTE *)(a2 + 24))
                        {
                          v27 = *(_QWORD *)(a1 + 8);
                          v39 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a2 + 24));
                          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
                          LOBYTE(v38) = 1;
                          v28 = (uint64_t *)sub_233C25EA4(&v38);
                          v29 = sub_2341AE734(v27, v28, a1, 1u);
                          if ((_BYTE)v38)
                            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
                          if (v29)
                          {
                            sub_233CF4DD8(a1 + 16);
                            *(_QWORD *)(a1 + 32) = v29;
                            v29[5] = a1 + 16;
                            v30 = *(_DWORD *)(a2 + 104);
                            v31 = sub_2340F3F3C(a1 + 16);
                            if (v30)
                              sub_2341AD100(v31, *(_DWORD *)(a2 + 104));
                            else
                              sub_2341AD0C8(v31, 2000);
                            *(_QWORD *)a3 = 0;
                            *(_QWORD *)(a3 + 8) = 0;
                            *(_QWORD *)(a3 + 16) = 0;
                            v34 = sub_2340F3F3C(a1 + 16);
                            v38 = 1;
                            sub_2341AD108(v34, 0x10000u, 3, &v60, &v38, a3);
                            if (*(_DWORD *)a3)
                              goto LABEL_6;
                            v35 = (uint64_t *)sub_233C25EA4((_BYTE *)(a2 + 24));
                            v36 = sub_2341CD3C0(*v35);
                            *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36);
                            *(_BYTE *)(a1 + 72) = v37;
                            sub_23420D674(a1, 1);
                            *(_DWORD *)a3 = 0;
                            *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                            v21 = 1248;
                          }
                          else
                          {
                            v32 = (uint64_t *)sub_233C25EA4((_BYTE *)(a2 + 24));
                            v33 = sub_2341CD3C0(*v32);
                            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33))
                            {
                              *(_DWORD *)a3 = 11;
                              *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                              v21 = 1224;
                            }
                            else
                            {
                              *(_DWORD *)a3 = 3;
                              *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                              v21 = 1228;
                            }
                          }
                        }
                        else
                        {
                          *(_DWORD *)a3 = 119;
                          *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
                          v21 = 1217;
                        }
                        goto LABEL_28;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_6:
  sub_2340F6E6C(v58);
  if (v60)
    sub_23411814C(v60);
}

uint64_t sub_2342112E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  unsigned int v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  int v12;
  char *v13;
  _BYTE v14[8];
  uint64_t v15;
  uint8_t buf[16];
  _BYTE v17[10];
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a2 == 22)
  {
    v4 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "ICD device is inactive, skipping scheduling resubscribe within DefaultResubscribePolicy", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0xDu, 2);
    *(_DWORD *)a3 = 22;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    v5 = 1256;
    goto LABEL_9;
  }
  v6 = result;
  if (*(_BYTE *)(result + 48))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/app/ReadClient.cpp";
    v5 = 1259;
LABEL_9:
    *(_DWORD *)(a3 + 16) = v5;
    return result;
  }
  v8 = sub_23420D9CC(result);
  v9 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int8 *)(v6 + 72);
    v11 = *(_QWORD *)(v6 + 64);
    v12 = *(_DWORD *)(v6 + 328);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)v17 = *(_QWORD *)(a2 + 16);
    v13 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = HIDWORD(v11);
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)v17 = v11;
    *(_WORD *)&v17[4] = 1024;
    *(_DWORD *)&v17[6] = v12;
    v18 = 1024;
    v19 = v8;
    v20 = 2080;
    v21 = v13;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Will try to resubscribe to %02x:%08X%08X at retry index %u after %ums due to error %s", buf, 0x2Au);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)v17 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xDu, 2);
  }
  v14[0] = 0;
  result = sub_23420DA54(v6, v8, v14, *(_DWORD *)a2 == 50, a3);
  if (v14[0])
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  return result;
}

void sub_234211568(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 105))
  {
    v4 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218242;
      v8 = a1;
      v9 = 2080;
      v10 = a2;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "ReadClient[%p] triggering resubscribe, reason: %s", buf, 0x16u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0xDu, 3);
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)sub_2341FF930() + 10) + 88) + 24);
    v6 = (*(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v5 + 72))(v5, sub_23420DB60, a1);
    *(_BYTE *)(a1 + 105) = 0;
    sub_23420DB60(v6, a1);
  }
}

uint64_t sub_234211684@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  _QWORD v4[3];
  int v5;

  if (*(_BYTE *)(result + 80) == 1 && *(_BYTE *)(result + 48) == 3)
  {
    memset(v4, 0, sizeof(v4));
    result = sub_23421082C(result, &v5, (uint64_t)v4);
    if (LODWORD(v4[0]))
    {
      v3 = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 4) = v5;
      v3 = 1;
    }
    *(_BYTE *)a2 = v3;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

_QWORD *sub_2342116FC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  if (!a2)
  {
    if (a3)
      sub_23425A880((uint64_t)result);
  }
  return result;
}

uint64_t sub_23421171C(_QWORD ***a1, uint64_t a2)
{
  unsigned __int8 v4;

  if ((_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) == **a1
    && *((unsigned __int8 *)*a1 + 8) == v4
    && *(_BYTE *)(a2 + 57) == 2
    && **a1[1] >= *(_QWORD *)(a2 + 128))
  {
    sub_2341CB7C4(a2);
  }
  return 0;
}

double sub_234211798(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = a1 + 64;
  *(_QWORD *)(a1 + 72) = a1 + 64;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1;
  *(_QWORD *)(a1 + 96) = sub_2342117D0;
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1;
  *(_QWORD *)(a1 + 136) = sub_23421195C;
  return result;
}

_QWORD **sub_2342117D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v11[32];
  uint64_t v12;
  _QWORD *v13;

  v13 = (_QWORD *)a1;
  v5 = sub_2341FF930();
  sub_234203850((uint64_t)v5);
  if ((sub_2342016C8((uint64_t)v5, *(_BYTE *)(a1 + 8)) & 1) != 0)
  {
    *(_QWORD *)v11 = v5[181];
    v12 = sub_234200BAC((uint64_t)v5);
    v6 = sub_234211D0C(v5 + 203, (uint64_t)v5, v11, &v12);
    if (v6)
    {
      sub_2340F719C((uint64_t)v6, a3, a1);
      *(_DWORD *)(a1 + 16) = 0;
      v7 = *((_QWORD *)sub_2341FF930() + 216);
      if (v7)
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v11, v7, a1);
      return sub_234211DB8(&v13);
    }
    v9 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "no resource for ReadHandler creation", v11, 2u);
    }
    if (sub_234114844(2u))
LABEL_12:
      sub_2341147D0(0x23u, 2);
  }
  else
  {
    v8 = sub_234117B80(0x23u, "InteractionModel");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "no resource for subscription resumption", v11, 2u);
    }
    if (sub_234114844(2u))
      goto LABEL_12;
  }
  return sub_234211DB8(&v13);
}

_QWORD **sub_23421195C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  NSObject *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD *v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v12 = a1;
  v5 = sub_2341FF930();
  v6 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v14 = *(_QWORD *)(a3 + 16);
    v7 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Failed to establish CASE for subscription-resumption with error '%s'", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v14 = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xDu, 1);
  }
  sub_234203850((uint64_t)v5);
  v8 = v5[216];
  if (v8)
  {
    if (*((_DWORD *)a1 + 4) > 0xAu)
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(buf, v8, *a1, *((unsigned __int8 *)a1 + 8), *((unsigned int *)a1 + 3));
    }
    else
    {
      v9 = sub_2341FF930();
      sub_234200550((uint64_t)v9);
      ++*((_DWORD *)a1 + 4);
      (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v8 + 24))(buf, v8, a1);
    }
  }
  else
  {
    v10 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to get subscription resumption storage", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xDu, 1);
  }
  return sub_234211DB8(&v12);
}

void *sub_234211B54@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  char v24;

  *a1 = *a3;
  *((_BYTE *)a1 + 8) = *((_BYTE *)a3 + 8);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a3 + 3);
  *((_WORD *)a1 + 10) = *((_WORD *)a3 + 10);
  *((_WORD *)a1 + 11) = *((_WORD *)a3 + 11);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a3 + 24);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
  v8 = a3[5];
  if (v8)
  {
    result = sub_234104068((void **)a1 + 4, 12 * v8);
    if (!a1[4])
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
      v22 = 63;
      goto LABEL_12;
    }
    v10 = 0;
    v11 = 0;
    a1[5] = v8;
    do
    {
      v12 = (uint64_t *)(a3[4] + v10);
      v13 = a1[4] + v10;
      v14 = *v12;
      *(_DWORD *)(v13 + 8) = *((_DWORD *)v12 + 2);
      *(_QWORD *)v13 = v14;
      ++v11;
      v10 += 12;
    }
    while (v11 < a1[5]);
  }
  v15 = a3[7];
  if (v15)
  {
    result = sub_234104068((void **)a1 + 6, 12 * v15);
    if (!a1[6])
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
      v22 = 75;
      goto LABEL_12;
    }
    v16 = 0;
    v17 = 0;
    a1[7] = v15;
    do
    {
      v18 = (uint64_t *)(a3[6] + v16);
      v19 = a1[6] + v16;
      v20 = *v18;
      *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
      *(_QWORD *)v19 = v20;
      ++v17;
      v16 += 12;
    }
    while (v17 < a1[7]);
  }
  v21 = *((_BYTE *)a1 + 8);
  v23 = *a1;
  v24 = v21;
  result = sub_2341FC98C(a2, &v23, a1 + 8, a1 + 13, 1, 0, 0);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/app/SubscriptionResumptionSessionEstablisher.cpp";
  v22 = 85;
LABEL_12:
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

void *sub_234211D0C(unint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  void *v8;
  void *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;

  v8 = sub_234114774(0xD8uLL);
  v9 = v8;
  if (v8)
  {
    sub_2340F7198(v8, a2 + 32, *a3, *a4);
    v10 = sub_234114774(0x18uLL);
    if (v10)
    {
      *v10 = v9;
      v10[1] = a1 + 2;
      v10[2] = 0;
      v10[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v10;
      a1[4] = (unint64_t)v10;
      v11 = a1[1];
      v12 = *a1 + 1;
      *a1 = v12;
      if (v12 > v11)
        a1[1] = v12;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

_QWORD **sub_234211DB8(_QWORD **a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD *);
  void (*v4)(_QWORD *);
  void *v5;
  void *v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (void (*)(_QWORD *))v2[15];
    if (v3)
    {
      v2[15] = 0;
      v3(v2 + 13);
    }
    v4 = (void (*)(_QWORD *))v2[10];
    if (v4)
    {
      v2[10] = 0;
      v4(v2 + 8);
    }
    v2[7] = 0;
    v5 = (void *)v2[6];
    if (v5)
    {
      j__free(v5);
      v2[6] = 0;
    }
    v2[5] = 0;
    v6 = (void *)v2[4];
    if (v6)
    {
      j__free(v6);
      v2[4] = 0;
    }
    j__free(v2);
  }
  return a1;
}

uint64_t sub_234211E38(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_250516828;
  *(_QWORD *)(a1 + 8) = a2;
  sub_23411BFF8(a1 + 16);
  sub_23411BFF8(a1 + 56);
  sub_23411BFF8(a1 + 96);
  sub_23411BFF8(a1 + 136);
  sub_23411BFF8(a1 + 176);
  sub_23411BFF8(a1 + 216);
  sub_23411BFF8(a1 + 256);
  sub_23411BFF8(a1 + 296);
  *(_BYTE *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 368;
  *(_QWORD *)(a1 + 376) = a1 + 368;
  sub_234106C48(a1 + 384);
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = &unk_250504030;
  *(_BYTE *)(a1 + 472) = 0;
  sub_234106C48(a1 + 480);
  *(_QWORD *)(a1 + 544) = 1;
  *(_QWORD *)(a1 + 552) = &unk_2505168F0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 582) = 0;
  *(_QWORD *)(a1 + 572) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 552;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 594) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 610) = 0;
  return a1;
}

uint64_t sub_234211F34(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  sub_234211E38(a1, a3);
  if (*a2)
  {
    *(_QWORD *)(a1 + 544) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
    *(_QWORD *)(a1 + 584) = *a2;
  }
  v5 = a2[1];
  if (v5)
    sub_234211F90(a1, v5);
  return a1;
}

uint64_t sub_234211F90(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(result + 608))
    sub_23425FA74(result);
  *(_QWORD *)(result + 600) = a2;
  return result;
}

_QWORD *sub_234211FB0(_QWORD *a1)
{
  *a1 = &off_250516828;
  sub_234211FF0(a1);
  sub_2340F6E6C(a1 + 56);
  sub_2341CC044(a1 + 46);
  return a1;
}

_QWORD *sub_234211FF0(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = result + 46;
  v2 = (_QWORD *)result[47];
  if (v2 != result + 46)
  {
    v3 = result;
    do
    {
      v2[2] = 0;
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
    while (1)
    {
      result = (_QWORD *)v3[47];
      if (result == v1)
        break;
      sub_2341C4C94(result);
    }
  }
  return result;
}

void sub_234212044(_QWORD *a1)
{
  sub_234211FB0(a1);
  JUMPOUT(0x23493E704);
}

void sub_234212068(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  unint64_t v6;
  _OWORD *v7;
  int v8;
  uint64_t v9;
  _BYTE v10[24];

  if (*(_BYTE *)(a1 + 613) || !*(_QWORD *)(a1 + 600))
  {
    v3 = 64;
    v4 = 3;
LABEL_3:
    *(_DWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a2 + 16) = v3;
    return;
  }
  if (*(_BYTE *)(a1 + 614))
  {
LABEL_18:
    v4 = 0;
    v3 = 101;
    goto LABEL_3;
  }
  sub_2341FD4E8(a1 + 384);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 72))(*(_QWORD *)(a1 + 600));
  sub_234118674(v6, 0x26u, &v9);
  if (v9)
  {
    sub_233CAF098(a1 + 448, &v9, 0);
    sub_234106CA8(a1 + 384, a1 + 448, 0xFFFFFFFF, (uint64_t)v10);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v7 = (_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    sub_23411DB38(a1 + 16, (char *)(a1 + 384), (_QWORD *)a2);
    v8 = 0;
    if (*(_DWORD *)a2)
      goto LABEL_15;
    if (*(_BYTE *)(a1 + 615))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_23411DCF4(a1 + 16, (_QWORD *)a2);
      if (*(_DWORD *)a2)
        goto LABEL_13;
    }
    sub_23411B3E0(a1 + 16, 0);
    v8 = 0;
    *(_OWORD *)a2 = *v7;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)a2)
      goto LABEL_15;
    v8 = 1;
    sub_23411DBAC(a1 + 16, 1);
    *(_OWORD *)a2 = *v7;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)a2)
    {
LABEL_13:
      v8 = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 614) = 1;
      sub_234212218(a1, 1);
    }
  }
  else
  {
    v8 = 0;
    *(_DWORD *)a2 = 11;
    *(_QWORD *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a2 + 16) = 73;
  }
LABEL_15:
  if (v9)
    sub_23411814C(v9);
  if (v8)
    goto LABEL_18;
}

uint64_t sub_234212218(uint64_t a1, char a2)
{
  NSObject *v3;
  unint64_t v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 608) = a2;
  v3 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = *(char *)(a1 + 608);
    if (v4 > 6)
      v5 = "N/A";
    else
      v5 = off_250516950[v4];
    *(_DWORD *)buf = 68157954;
    v8 = 10;
    v9 = 2080;
    v10 = v5;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "Command handler moving to [%10.10s]", buf, 0x12u);
  }
  result = sub_234114844(3u);
  if ((_DWORD)result)
    return sub_2341147D0(0xDu, 3);
  return result;
}

uint64_t sub_23421233C(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  _QWORD v9[3];

  if (*(_BYTE *)(a1 + 608))
    sub_23425FACC(a1);
  sub_234211F90(a1, a2);
  sub_234214ED8(v9, a1);
  v7 = sub_2342123BC(a1, a3, a4);
  *(_BYTE *)(a1 + 617) = 1;
  sub_234214EA0((uint64_t)v9);
  sub_233CB66E0(v9);
  return v7;
}

uint64_t sub_2342123BC(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  int v9;
  _QWORD v10[3];
  unint64_t v11;
  _DWORD v12[4];
  uint64_t v13;
  _OWORD v14[5];
  _BYTE v15[80];
  _OWORD v16[5];
  _BYTE v17[72];
  uint64_t v18;

  sub_234104468((uint64_t)v17);
  v18 = 0;
  sub_23411E074((uint64_t)v16);
  sub_23411E074((uint64_t)v15);
  sub_233C11670((uint64_t)v17, a2);
  sub_23411DF84((uint64_t)v16, (uint64_t)v17, v14);
  if (LODWORD(v14[0]))
    goto LABEL_8;
  v6 = *(_QWORD *)(a1 + 600);
  if (!v6)
    sub_23425FB24(0);
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v6 + 40))(v14);
  if (LOBYTE(v14[0]))
    *(_BYTE *)(a1 + 613) = 1;
  sub_23411AE58((int *)v16, (char *)(a1 + 611), v14);
  if (LODWORD(v14[0])
    || (sub_23411D570((int *)v16, (char *)(a1 + 612), v14), LODWORD(v14[0]))
    || (sub_23411D580((int *)v16, (uint64_t)v15, v14), LODWORD(v14[0])))
  {
LABEL_8:
    v7 = 0x80;
    goto LABEL_9;
  }
  if (*(unsigned __int8 *)(a1 + 612) == a3)
  {
    v14[2] = v16[2];
    v14[3] = v16[3];
    v14[4] = v16[4];
    v14[0] = v16[0];
    v14[1] = v16[1];
    sub_2342129B4(a1, (int *)v14, (uint64_t)v12);
    if (v12[0])
      goto LABEL_8;
    sub_234104468((uint64_t)v12);
    sub_23411E0BC((uint64_t)v15, (uint64_t)v12);
    v11 = 0;
    sub_234106910((uint64_t)v12, &v11, 0, v14);
    if (LODWORD(v14[0]))
      goto LABEL_8;
    if (v11 >= 2)
      *(_BYTE *)(a1 + 615) = 1;
    while (1)
    {
      sub_2341058CC((uint64_t)v12, v14);
      if (LODWORD(v14[0]))
        break;
      if (v13 != 256)
        goto LABEL_8;
      sub_23411E074((uint64_t)v14);
      sub_23411E964((uint64_t)v14, (uint64_t)v12, v10);
      if (LODWORD(v10[0]))
        goto LABEL_8;
      if (*(_BYTE *)(a1 + 613))
        v9 = sub_234212C84(a1, (int *)v14);
      else
        v9 = sub_2342134A4((_QWORD **)a1, (int *)v14);
      v7 = v9;
      if (v9)
        goto LABEL_9;
    }
    if (LODWORD(v14[0]) != 33)
      goto LABEL_8;
    sub_23411DFEC((uint64_t)v16, v14);
    if (LODWORD(v14[0]))
      v7 = 0x80;
    else
      v7 = 0;
  }
  else
  {
    v7 = -55;
  }
LABEL_9:
  if (v18)
    sub_23411814C(v18);
  return v7;
}

void sub_2342125E4(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  unsigned __int16 v15;
  int v16;
  int v17;

  v15 = *(_WORD *)a2;
  v8 = *((_DWORD *)a2 + 2);
  v16 = *((_DWORD *)a2 + 1);
  v17 = a3;
  v12 = *a2;
  v13 = v8;
  v14 = 0;
  v9 = *(_BYTE *)(a1 + 610);
  *(_BYTE *)(a1 + 610) = 1;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_2342126D4(a1, &v15, (uint64_t)&v12, (uint64_t)a5);
  v10 = *(_DWORD *)a5;
  *(_BYTE *)(a1 + 610) = v9;
  if (!v10)
  {
    if (*(_BYTE *)(a1 + 608) == 3 && (v11 = *(_QWORD *)(a1 + 160)) != 0)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, v11, 1);
      if (!*(_DWORD *)a5)
        sub_234212780(a1, 0, a5);
    }
    else
    {
      *(_DWORD *)a5 = 3;
      a5[1] = "src/app/CommandHandlerImpl.cpp";
      *((_DWORD *)a5 + 4) = 135;
    }
  }
}

void sub_2342126D4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v8[2];
  char v9;

  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 16))(v8, *(_QWORD *)(a1 + 584), a3);
  if (v9)
  {
    sub_2342145D4(a1, (uint64_t)v8, a2, *(unsigned __int8 *)(a3 + 12), (_QWORD *)a4);
  }
  else
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a4 + 16) = 655;
  }
}

uint64_t sub_234212764(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 608) == 3)
    return *(_QWORD *)(a1 + 160);
  else
    return 0;
}

void sub_234212780(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  int v6;

  if (*(_BYTE *)(a1 + 608) != 3)
  {
    v6 = 713;
    v5 = 3;
    goto LABEL_10;
  }
  if (!a2
    || (*a3 = 0,
        a3[1] = 0,
        a3[2] = 0,
        sub_234107FB0(*(char **)(a1 + 160), *(_DWORD *)(a1 + 352), (uint64_t)a3),
        !*(_DWORD *)a3))
  {
    if (!*(_BYTE *)(a1 + 594)
      || (*a3 = 0,
          a3[1] = 0,
          a3[2] = 0,
          sub_23411C288(a1 + 136, *(unsigned __int16 *)(a1 + 592), (uint64_t)a3),
          !*(_DWORD *)a3))
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23411ACD8(a1 + 136, (uint64_t)a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_23411ACD8(a1 + 96, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          sub_234212218(a1, 4);
          v5 = 0;
          v6 = 728;
LABEL_10:
          *(_DWORD *)a3 = v5;
          a3[1] = "src/app/CommandHandlerImpl.cpp";
          *((_DWORD *)a3 + 4) = v6;
        }
      }
    }
  }
}

double sub_234212870@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  double result;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 613) || !*(_QWORD *)(a1 + 600))
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/CommandHandlerImpl.cpp";
    v6 = 144;
LABEL_3:
    *(_DWORD *)(a5 + 16) = v6;
    return result;
  }
  *(_BYTE *)(a1 + 616) = 0;
  v14 = 0uLL;
  v15 = 0;
  sub_2342125E4(a1, a2, a3, a4, &v14);
  if (!(_DWORD)v14)
  {
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/app/CommandHandlerImpl.h";
    v6 = 295;
    goto LABEL_3;
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  sub_234214864(a1, a5);
  if (!*(_DWORD *)a5)
  {
    if (*(_BYTE *)(a1 + 608) != 4 || (_DWORD)v14 != 11)
      goto LABEL_13;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    sub_23421479C(a1, (_QWORD *)a5);
    if (!*(_DWORD *)a5)
    {
      sub_2342125E4(a1, a2, a3, a4, &v12);
      v14 = v12;
      v15 = v13;
      if ((_DWORD)v12)
        sub_234214864(a1, (uint64_t)&v12);
LABEL_13:
      result = *(double *)&v14;
      *(_OWORD *)a5 = v14;
      *(_QWORD *)(a5 + 16) = v15;
    }
  }
  return result;
}

void sub_2342129B4(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int v7;
  int i;
  int v9;
  const char *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  __int16 v18;
  __int16 v19;
  char v20;
  _WORD v21[2];
  uint64_t v22;
  int v23[20];
  _QWORD v24[2];
  int v25;
  int v26;
  _BYTE v27[16];
  uint64_t v28;
  _BYTE v29[80];
  unint64_t v30;

  v30 = 0;
  sub_23411E074((uint64_t)v29);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23411D580(a2, (uint64_t)v29, (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    sub_234104468((uint64_t)v27);
    sub_23411E0BC((uint64_t)v29, (uint64_t)v27);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_234106910((uint64_t)v27, &v30, 0, (_QWORD *)a3);
    if (!*(_DWORD *)a3)
    {
      v6 = v30;
      if (*(_BYTE *)(a1 + 613))
      {
        if (v30 == 1)
        {
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          v7 = 167;
        }
        else
        {
          *(_DWORD *)a3 = 47;
          *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          v7 = 166;
        }
        goto LABEL_9;
      }
      if (v30 > *(_QWORD *)(a1 + 544))
      {
        *(_DWORD *)a3 = 47;
        *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
        v7 = 173;
LABEL_9:
        *(_DWORD *)(a3 + 16) = v7;
        return;
      }
      sub_2341058CC((uint64_t)v27, v24);
      for (i = v24[0]; !LODWORD(v24[0]); i = v24[0])
      {
        if (v28 != 256)
        {
          *(_DWORD *)a3 = 47;
          *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
          v7 = 180;
          goto LABEL_9;
        }
        sub_23411E074((uint64_t)v24);
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411E964((uint64_t)v24, (uint64_t)v27, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        sub_23411E074((uint64_t)v23);
        v21[0] = 0;
        v22 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)a3 = 0;
        sub_23411BEE0((int *)v24, (uint64_t)v23, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_23411C2B8(v23, (uint64_t)v21, (_QWORD *)a3);
        if (*(_DWORD *)a3)
          return;
        LOBYTE(v19) = 0;
        v20 = 0;
        v18 = 0;
        sub_23411AF4C((int *)v24, &v18, v17);
        if (LODWORD(v17[0]))
        {
          if (LODWORD(v17[0]) != 33)
          {
            v15 = v17[1];
            v16 = v17[2];
            *(_QWORD *)a3 = v17[0];
            *(_QWORD *)(a3 + 8) = v15;
            *(_QWORD *)(a3 + 16) = v16;
            return;
          }
          if (v6 >= 2)
          {
            *(_DWORD *)a3 = 47;
            *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
            v7 = 198;
            goto LABEL_9;
          }
        }
        else
        {
          v19 = v18;
          v20 = 1;
        }
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        (*(void (**)(_QWORD, _WORD *, __int16 *))(**(_QWORD **)(a1 + 584) + 32))(*(_QWORD *)(a1 + 584), v21, &v19);
        if (*(_DWORD *)a3)
          return;
        sub_2341058CC((uint64_t)v27, v24);
      }
      v9 = HIDWORD(v24[0]);
      v10 = (const char *)v24[1];
      v11 = v25;
      v12 = v26;
      v13 = i == 33;
      if (i == 33)
      {
        i = 0;
        v10 = "src/app/CommandHandlerImpl.cpp";
      }
      *(_DWORD *)a3 = i;
      *(_DWORD *)(a3 + 4) = v9;
      *(_QWORD *)(a3 + 8) = v10;
      if (v13)
        v14 = 213;
      else
        v14 = v11;
      *(_DWORD *)(a3 + 16) = v14;
      *(_DWORD *)(a3 + 20) = v12;
      if (v13)
        sub_23411DFEC((uint64_t)a2, (_QWORD *)a3);
    }
  }
}

uint64_t sub_234212C84(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  _QWORD v30[4];
  int v31;
  __int16 v32;
  _WORD v33[2];
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  _OWORD v38[4];
  uint64_t v39;
  int v40[20];
  _BYTE buf[32];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v45 = xmmword_2505168A4;
  v46 = 0;
  sub_23411E074((uint64_t)v40);
  sub_234104468((uint64_t)v38);
  v37 = 0;
  v36 = -65536;
  v4 = sub_2341EF7E4();
  sub_23411BEE0(a2, (uint64_t)v40, buf);
  if (!*(_DWORD *)buf)
  {
    sub_23411C324(v40, (int *)&v37 + 1, &v37, buf);
    if (!*(_DWORD *)buf)
    {
      v6 = *(_QWORD *)(a1 + 600);
      if (!v6)
        sub_23425FBB8(0);
      (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v6 + 40))(buf);
      v7 = *(unsigned __int16 *)sub_233C05D98(buf);
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v9 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v37));
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = WORD2(v37);
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = WORD1(v37);
        *(_WORD *)&buf[26] = 1024;
        *(_DWORD *)&buf[28] = (unsigned __int16)v37;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "Received group command for Group=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0xDu, 3);
      sub_23411C1E8(a2, (uint64_t)v38, buf);
      v45 = *(_OWORD *)&buf[4];
      v46 = *(_DWORD *)&buf[20];
      if (*(_DWORD *)buf)
      {
        if (*(_DWORD *)buf != 33)
          return 1;
        v10 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&buf[4] = v7;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v37));
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = WORD2(v37);
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&buf[22] = WORD1(v37);
          *(_WORD *)&buf[26] = 1024;
          *(_DWORD *)&buf[28] = (unsigned __int16)v37;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "Received command without data for Group=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
        }
        if (sub_234114844(3u))
          sub_2341147D0(0xDu, 3);
        sub_234104498((uint64_t)v38, (uint64_t)&unk_2342EEE58, 2uLL);
        sub_2341058CC((uint64_t)v38, buf);
        v45 = *(_OWORD *)&buf[4];
        v46 = *(_DWORD *)&buf[20];
        if (*(_DWORD *)buf)
          return 128;
      }
      if ((sub_233D45104(SHIDWORD(v37), v37) & 1) != 0)
        return 0;
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 120))(v4, v8, 0);
      if (v11)
      {
        v12 = v11;
        if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v11 + 24))(v11, &v36))
        {
          v13 = (char *)v30 + 4;
          do
          {
            if (v7 == (unsigned __int16)v36)
            {
              v14 = sub_234117B80(0xDu, "DataManagement");
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 67110144;
                *(_DWORD *)&buf[4] = HIWORD(v36);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = HIWORD(HIDWORD(v37));
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = WORD2(v37);
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = WORD1(v37);
                *(_WORD *)&buf[26] = 1024;
                *(_DWORD *)&buf[28] = (unsigned __int16)v37;
                _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "Processing group command for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", buf, 0x20u);
              }
              if (sub_234114844(3u))
                sub_2341147D0(0xDu, 3);
              v33[0] = HIWORD(v36);
              v34 = HIDWORD(v37);
              v35 = v37;
              if ((*(unsigned int (**)(_QWORD, _WORD *))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v33))
              {
                v15 = sub_234117B80(0xDu, "DataManagement");
                if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 67110144;
                  *(_DWORD *)&buf[4] = WORD1(v37);
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = (unsigned __int16)v37;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = HIWORD(HIDWORD(v37));
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&buf[22] = WORD2(v37);
                  *(_WORD *)&buf[26] = 1024;
                  *(_DWORD *)&buf[28] = HIWORD(v36);
                  _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "No command 0x%04X_%04X in Cluster 0x%04X_%04X on Endpoint 0x%x", buf, 0x20u);
                }
                if (!sub_234114844(3u))
                  continue;
                v16 = 3;
              }
              else
              {
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(buf, a1);
                v31 = v34;
                v32 = v33[0];
                v17 = sub_234035668();
                v18 = sub_2341D512C();
                sub_2341D4A50(v18, (uint64_t)buf, (uint64_t)&v31, v17, (uint64_t)v30);
                if (LODWORD(v30[0]))
                  continue;
                v19 = sub_234215588();
                (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(buf, a1);
                (*(void (**)(_QWORD *__return_ptr, uint64_t, _WORD *, _BYTE *))(*(_QWORD *)v19 + 24))(v30, v19, v33, buf);
                v20 = v30[0];
                v45 = *(_OWORD *)v13;
                v46 = *((_DWORD *)v13 + 4);
                if (!LODWORD(v30[0]))
                {
                  v44 = v39;
                  v42 = v38[2];
                  v43 = v38[3];
                  *(_OWORD *)buf = v38[0];
                  *(_OWORD *)&buf[16] = v38[1];
                  (*(void (**)(_QWORD, uint64_t, _WORD *, _BYTE *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1, v33, buf);
                  v25 = sub_234215588();
                  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(v30, a1);
                  (*(void (**)(uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v25 + 32))(v25, v33, v30);
                  continue;
                }
                v21 = sub_234117B80(0xDu, "DataManagement");
                if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                {
                  v22 = HIWORD(v36);
                  v29 = v13;
                  v23 = HIWORD(HIDWORD(v37));
                  v26 = WORD1(v37);
                  v27 = WORD2(v37);
                  v28 = (unsigned __int16)v37;
                  *(_DWORD *)buf = v20;
                  *(_OWORD *)&buf[4] = v45;
                  *(_DWORD *)&buf[20] = v46;
                  v24 = sub_2341083CC((const char **)buf, 1);
                  *(_DWORD *)buf = 67110402;
                  *(_DWORD *)&buf[4] = v22;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v23;
                  v13 = v29;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = v27;
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&buf[22] = v26;
                  *(_WORD *)&buf[26] = 1024;
                  *(_DWORD *)&buf[28] = v28;
                  LOWORD(v42) = 2080;
                  *(_QWORD *)((char *)&v42 + 2) = v24;
                  _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_ERROR, "Error when calling PreCommandReceived for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X : %s", buf, 0x2Au);
                }
                if (!sub_234114844(1u))
                  continue;
                *(_DWORD *)buf = v20;
                *(_OWORD *)&buf[4] = v45;
                *(_DWORD *)&buf[20] = v46;
                sub_2341083CC((const char **)buf, 1);
                v16 = 1;
              }
              sub_2341147D0(0xDu, v16);
            }
          }
          while (((*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 24))(v12, &v36) & 1) != 0);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
        return 0;
      }
      return 1;
    }
  }
  return 128;
}

uint64_t sub_2342134A4(_QWORD **a1, int *a2)
{
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  __int16 v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  __int16 v20;
  _BYTE v21[76];
  _WORD v22[2];
  uint64_t v23;
  int v24[21];
  __int16 v25;
  uint64_t buf;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  sub_23411E074((uint64_t)v24);
  v22[0] = 0;
  v23 = 0;
  sub_234104468((uint64_t)v21);
  sub_23411BEE0(a2, (uint64_t)v24, &buf);
  if (!(_DWORD)buf)
  {
    sub_23411C2B8(v24, (uint64_t)v22, &buf);
    if (!(_DWORD)buf)
    {
      v5 = (*(uint64_t (**)(_QWORD *, _WORD *))(*a1[1] + 32))(a1[1], v22);
      if (v5)
      {
        v6 = v5;
        v7 = sub_234117B80(0xDu, "DataManagement");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 67110144;
          HIDWORD(buf) = HIWORD(HIDWORD(v23));
          v27 = 1024;
          v28 = WORD2(v23);
          v29 = 1024;
          v30 = WORD1(v23);
          v31 = 1024;
          v32 = (unsigned __int16)v23;
          v33 = 1024;
          v34 = v22[0];
          _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "No command 0x%04X_%04X in Cluster 0x%04X_%04X on Endpoint 0x%x", (uint8_t *)&buf, 0x20u);
        }
        if (sub_234114844(3u))
          sub_2341147D0(0xDu, 3);
        LOWORD(v18[0]) = v6;
      }
      else
      {
        ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&buf, a1);
        v19 = v23;
        v20 = v22[0];
        v9 = sub_234035668();
        v10 = sub_2341D512C();
        sub_2341D4A50(v10, (uint64_t)&buf, (uint64_t)&v19, v9, (uint64_t)v18);
        if (LODWORD(v18[0]))
        {
          if (LODWORD(v18[0]) == 165)
            v11 = 126;
          else
            v11 = 1;
          v25 = v11;
          ((void (*)(_QWORD *__return_ptr, _QWORD **, _WORD *, __int16 *, _QWORD))(*a1)[2])(v18, a1, v22, &v25, 0);
          v8 = v18[0];
          return v8 != 0;
        }
        if (sub_233D45104(v23, HIDWORD(v23))
          && (((uint64_t (*)(_QWORD **))(*a1)[9])(a1) & 1) == 0)
        {
          v16 = 198;
        }
        else if (sub_233D451A4(v23, HIDWORD(v23))
               && !((unsigned int (*)(_QWORD **))(*a1)[6])(a1))
        {
          v16 = 126;
        }
        else
        {
          sub_23411C1E8(a2, (uint64_t)v21, &buf);
          v12 = buf;
          if ((_DWORD)buf == 33)
          {
            v13 = sub_234117B80(0xDu, "DataManagement");
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 67110144;
              HIDWORD(buf) = v22[0];
              v27 = 1024;
              v28 = WORD1(v23);
              v29 = 1024;
              v30 = (unsigned __int16)v23;
              v31 = 1024;
              v32 = HIWORD(HIDWORD(v23));
              v33 = 1024;
              v34 = WORD2(v23);
              _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "Received command without data for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(0xDu, 3);
            sub_234104498((uint64_t)v21, (uint64_t)&unk_2342EEE58, 2uLL);
            sub_2341058CC((uint64_t)v21, &buf);
            v12 = buf;
          }
          if (!v12)
          {
            v14 = sub_234117B80(0xDu, "DataManagement");
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 67110144;
              HIDWORD(buf) = v22[0];
              v27 = 1024;
              v28 = WORD1(v23);
              v29 = 1024;
              v30 = (unsigned __int16)v23;
              v31 = 1024;
              v32 = HIWORD(HIDWORD(v23));
              v33 = 1024;
              v34 = WORD2(v23);
              _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_INFO, "Received command for Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X", (uint8_t *)&buf, 0x20u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(0xDu, 3);
            v15 = sub_234215588();
            ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&buf, a1);
            (*(void (**)(_QWORD *__return_ptr, uint64_t, _WORD *, uint64_t *))(*(_QWORD *)v15 + 24))(v18, v15, v22, &buf);
            if (!LODWORD(v18[0]))
            {
              (*(void (**)(_QWORD *, _QWORD **, _WORD *, _BYTE *))(*a1[1] + 24))(a1[1], a1, v22, v21);
              v17 = sub_234215588();
              ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&buf, a1);
              (*(void (**)(uint64_t, _WORD *, uint64_t *))(*(_QWORD *)v17 + 32))(v17, v22, &buf);
              return 0;
            }
          }
          v16 = 133;
        }
        LOWORD(v18[0]) = v16;
      }
      ((void (*)(uint64_t *__return_ptr, _QWORD **, _WORD *, _QWORD *, _QWORD))(*a1)[2])(&buf, a1, v22, v18, 0);
      v8 = buf;
      return v8 != 0;
    }
  }
  return 128;
}

uint64_t sub_2342139EC(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 611) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  sub_234212218(a1, 6);
  if (*(_QWORD *)(a1 + 360))
    sub_23425FC4C((uint64_t *)(a1 + 360));
  sub_234211FF0((_QWORD *)a1);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a1);
  return result;
}

_QWORD *sub_234213A50(uint64_t a1, _QWORD *a2)
{
  return sub_2341C4C4C((_QWORD *)(a1 + 368), a2);
}

_QWORD *sub_234213A58(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1 + 368;
  v3 = (_QWORD *)(a1 + 368);
  do
    v3 = (_QWORD *)v3[1];
  while (v3 != a2 && v3 != (_QWORD *)v2);
  if (v3 == (_QWORD *)v2)
    sub_23425FCD8(a1);
  return sub_2341C4C94(a2);
}

_QWORD *sub_234213A90(uint64_t a1, _QWORD *a2)
{
  ++*(_QWORD *)(a1 + 360);
  return sub_2341C4C4C((_QWORD *)(a1 + 368), a2);
}

_QWORD *sub_234213AA4(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *result;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  --*(_QWORD *)(a1 + 360);
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 360);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Decreasing reference count for CommandHandlerImpl, remaining %u", buf, 8u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  result = sub_234213A58(a1, a2);
  if (!*(_QWORD *)(a1 + 360))
  {
    if (*(_QWORD *)(a1 + 600))
    {
      if (*(_BYTE *)(a1 + 613))
        return (_QWORD *)sub_2342139EC(a1);
      v11 = 0uLL;
      v12 = 0;
      sub_2342149AC(a1, 0, (uint64_t)&v11);
      if (!(_DWORD)v11)
        return (_QWORD *)sub_2342139EC(a1);
      v7 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v11;
        v14 = v12;
        v8 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to finalize command response: %s", buf, 0xCu);
      }
      if (!sub_234114844(1u))
        return (_QWORD *)sub_2342139EC(a1);
      *(_OWORD *)buf = v11;
      v14 = v12;
      sub_2341083CC((const char **)buf, 1);
      v9 = 1;
    }
    else
    {
      v10 = sub_234117B80(0xDu, "DataManagement");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Skipping command response: response sender is null", buf, 2u);
      }
      if (!sub_234114844(2u))
        return (_QWORD *)sub_2342139EC(a1);
      v9 = 2;
    }
    sub_2341147D0(0xDu, v9);
    return (_QWORD *)sub_2342139EC(a1);
  }
  return result;
}

void sub_234213CF0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 613) || !*(_QWORD *)(a1 + 600))
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a4 + 16) = 584;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234213DBC(a1, a2, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      v7 = sub_23411BFA4(a1 + 216);
      *(_OWORD *)a4 = *(_OWORD *)(a1 + 216);
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 232);
      if (!*(_DWORD *)a4)
      {
        v8 = v7;
        sub_23411E524(v7, a3);
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(v8 + 16);
        if (!*(_DWORD *)a4)
          sub_234213F50(a1, (_QWORD *)a4);
      }
    }
  }
}

void sub_234213DBC(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_234212068(a1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *(unsigned __int8 *)(a1 + 608);
    if (v6 != 1)
    {
      if (v6 != 4)
      {
        *(_DWORD *)a3 = 3;
        a3[1] = "src/app/CommandHandlerImpl.cpp";
        v16 = 737;
LABEL_16:
        *((_DWORD *)a3 + 4) = v16;
        return;
      }
      if (!*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
      {
        v7 = *(__int128 **)(a1 + 40);
        v8 = v7[3];
        v10 = *v7;
        v9 = v7[1];
        *(_OWORD *)(a1 + 512) = v7[2];
        *(_OWORD *)(a1 + 528) = v8;
        *(_OWORD *)(a1 + 480) = v10;
        *(_OWORD *)(a1 + 496) = v9;
        *(_BYTE *)(a1 + 609) = 4;
        *(_BYTE *)(a1 + 616) = 1;
      }
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unsigned __int16 *))(**(_QWORD **)(a1 + 584) + 16))(&v17, *(_QWORD *)(a1 + 584), a2);
    if (!v20)
    {
      v16 = 744;
      v15 = 3;
      goto LABEL_15;
    }
    *(_WORD *)(a1 + 592) = v18;
    *(_BYTE *)(a1 + 594) = v19;
    sub_234212218(a1, 2);
    v11 = sub_23411BD24(a1 + 56);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 56);
    a3[2] = *(_QWORD *)(a1 + 72);
    if (!*(_DWORD *)a3)
    {
      v12 = sub_23411D940(v11);
      *(_OWORD *)a3 = *(_OWORD *)v12;
      a3[2] = *(_QWORD *)(v12 + 16);
      if (!*(_DWORD *)a3)
      {
        v13 = v12;
        v14 = sub_23411BF50(v12);
        *(_OWORD *)a3 = *(_OWORD *)v13;
        a3[2] = *(_QWORD *)(v13 + 16);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_23411C5B8(v14, a2, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            sub_234212218(a1, 3);
            v15 = 0;
            v16 = 757;
LABEL_15:
            *(_DWORD *)a3 = v15;
            a3[1] = "src/app/CommandHandlerImpl.cpp";
            goto LABEL_16;
          }
        }
      }
    }
  }
}

void sub_234213F50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  if (*(_BYTE *)(a1 + 608) != 3)
  {
    v6 = 762;
    v5 = 3;
    goto LABEL_8;
  }
  v4 = a1 + 216;
  if (!*(_BYTE *)(a1 + 594)
    || (*a2 = 0,
        a2[1] = 0,
        a2[2] = 0,
        sub_23411C288(a1 + 216, *(unsigned __int16 *)(a1 + 592), (uint64_t)a2),
        !*(_DWORD *)a2))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_23411ACD8(v4, (uint64_t)a2);
    if (!*(_DWORD *)a2)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_23411ACD8(a1 + 96, (uint64_t)a2);
      if (!*(_DWORD *)a2)
      {
        sub_234212218(a1, 4);
        v5 = 0;
        v6 = 773;
LABEL_8:
        *(_DWORD *)a2 = v5;
        a2[1] = "src/app/CommandHandlerImpl.cpp";
        *((_DWORD *)a2 + 4) = v6;
      }
    }
  }
}

void sub_23421401C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unsigned __int8 *a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 616) = 0;
  v10 = 0uLL;
  v11 = 0;
  sub_234213CF0(a1, a2, a3, (uint64_t)&v10);
  if ((_DWORD)v10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234214864(a1, (uint64_t)a4);
    if (*(_DWORD *)a4)
      return;
    if (*(_BYTE *)(a1 + 608) == 4 && (_DWORD)v10 == 11)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_23421479C(a1, a4);
      if (*(_DWORD *)a4)
        return;
      sub_234213CF0(a1, a2, a3, (uint64_t)&v8);
      v10 = v8;
      v11 = v9;
      if ((_DWORD)v8)
        sub_234214864(a1, (uint64_t)&v8);
    }
    *(_OWORD *)a4 = v10;
    a4[2] = v11;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/app/CommandHandlerImpl.h";
    *((_DWORD *)a4 + 4) = 295;
  }
}

uint64_t sub_234214124(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v4 = 0uLL;
  result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v4);
  if ((_DWORD)v4)
  {
    v2 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v4;
      v7 = v5;
      v3 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "Failed to add command status: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v4;
      v7 = v5;
      sub_2341083CC((const char **)buf, 1);
      result = sub_2341147D0(0xDu, 1);
    }
    if ((_DWORD)v4 != 11)
      sub_23425FD6C(result);
  }
  return result;
}

void sub_234214250(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint8_t *a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint8_t v9;
  const char *v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint8_t v25;
  uint8_t v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  _BYTE v31[2];
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  _QWORD v47[3];

  *(_QWORD *)((char *)&v47[1] + 6) = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  if (*a3)
  {
    v10 = "no additional context";
    if (a4)
      v10 = a4;
    v30 = v10;
    v11 = a3[1];
    v12 = sub_234117B80(0xDu, "DataManagement");
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v13)
      {
        v14 = *a2;
        v15 = HIWORD(*((_DWORD *)a2 + 1));
        v16 = (unsigned __int16)*((_DWORD *)a2 + 1);
        v27 = HIWORD(*((_DWORD *)a2 + 2));
        v28 = (unsigned __int16)*((_DWORD *)a2 + 2);
        v17 = *a3;
        v18 = sub_23411EEB4(v17);
        if (*a3 >= 2u)
        {
          v31[0] = 0;
        }
        else
        {
          v31[0] = a3[1];
          if (v31[0])
            v31[1] = a3[2];
        }
        v24 = *sub_233C27DCC(v31);
        *(_DWORD *)buf = 67111170;
        v33 = v14;
        v34 = 1024;
        v35 = v15;
        v36 = 1024;
        v37 = v16;
        v38 = 1024;
        v39 = v27;
        v40 = 1024;
        v41 = v28;
        v42 = 1024;
        v43 = v17;
        v44 = 2080;
        v45 = v18;
        v46 = 1024;
        LODWORD(v47[0]) = v24;
        WORD2(v47[0]) = 2080;
        *(_QWORD *)((char *)v47 + 6) = v30;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X status 0x%02x (%s) ClusterSpecificCode=%u (%s)", buf, 0x40u);
      }
      if (sub_234114844(1u))
      {
        sub_23411EEB4(*a3);
        if (*a3 >= 2u)
        {
          buf[0] = 0;
        }
        else
        {
          buf[0] = a3[1];
          if (buf[0])
            buf[1] = a3[2];
        }
        sub_233C27DCC(buf);
        goto LABEL_22;
      }
    }
    else
    {
      if (v13)
      {
        v19 = *a2;
        v20 = HIWORD(*((_DWORD *)a2 + 1));
        v21 = (unsigned __int16)*((_DWORD *)a2 + 1);
        v22 = HIWORD(*((_DWORD *)a2 + 2));
        v29 = (unsigned __int16)*((_DWORD *)a2 + 2);
        v23 = *a3;
        *(_DWORD *)buf = 67110914;
        v33 = v19;
        v34 = 1024;
        v35 = v20;
        v36 = 1024;
        v37 = v21;
        v38 = 1024;
        v39 = v22;
        v40 = 1024;
        v41 = v29;
        v42 = 1024;
        v43 = v23;
        v44 = 2080;
        v45 = sub_23411EEB4(v23);
        v46 = 2080;
        v47[0] = v30;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Endpoint=%u Cluster=0x%04X_%04X Command=0x%04X_%04X status 0x%02x (%s) (%s)", buf, 0x3Au);
      }
      if (sub_234114844(1u))
      {
        sub_23411EEB4(*a3);
LABEL_22:
        sub_2341147D0(0xDu, 1);
      }
    }
    buf[0] = *a3;
    v9 = buf[0];
    buf[1] = 0;
    if (buf[0] > 1u)
      goto LABEL_26;
    goto LABEL_24;
  }
  *(_WORD *)buf = 0;
LABEL_24:
  v25 = a3[1];
  if (v25)
  {
    v26 = a3[2];
    buf[0] = v9;
    buf[1] = v25;
    buf[2] = v26;
  }
LABEL_26:
  sub_23421401C(a1, a2, buf, a5);
}

void sub_2342145D4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_234212068(a1, (uint64_t)a5);
  if (!*(_DWORD *)a5)
  {
    if (*(_BYTE *)(a1 + 610)
      || *(_BYTE *)(a1 + 608) != 4
      || (*a5 = 0, a5[1] = 0, a5[2] = 0, sub_23421479C(a1, a5), !*(_DWORD *)a5))
    {
      v10 = *(unsigned __int8 *)(a1 + 608);
      if (v10 != 4 && v10 != 1)
        goto LABEL_22;
      if (!*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
      {
        v12 = *(__int128 **)(a1 + 40);
        v13 = v12[3];
        v15 = *v12;
        v14 = v12[1];
        *(_OWORD *)(a1 + 512) = v12[2];
        *(_OWORD *)(a1 + 528) = v13;
        *(_OWORD *)(a1 + 480) = v15;
        *(_OWORD *)(a1 + 496) = v14;
        *(_BYTE *)(a1 + 609) = v10;
        *(_BYTE *)(a1 + 616) = 1;
      }
      if (v10 != 4 && v10 != 1)
      {
LABEL_22:
        v22 = 683;
        v21 = 3;
        goto LABEL_23;
      }
      v16 = *(_WORD *)(a2 + 12);
      *(_BYTE *)(a1 + 594) = *(_BYTE *)(a2 + 14);
      *(_WORD *)(a1 + 592) = v16;
      sub_234212218(a1, 2);
      v17 = sub_23411BD24(a1 + 56);
      *(_OWORD *)a5 = *(_OWORD *)(a1 + 56);
      a5[2] = *(_QWORD *)(a1 + 72);
      if (!*(_DWORD *)a5)
      {
        v18 = sub_23411BC7C(v17);
        *(_OWORD *)a5 = *(_OWORD *)v18;
        a5[2] = *(_QWORD *)(v18 + 16);
        if (!*(_DWORD *)a5)
        {
          v19 = v18;
          v20 = sub_23411C238(v18);
          *(_OWORD *)a5 = *(_OWORD *)v19;
          a5[2] = *(_QWORD *)(v19 + 16);
          if (!*(_DWORD *)a5)
          {
            *a5 = 0;
            a5[1] = 0;
            a5[2] = 0;
            sub_23411C5B8(v20, a3, (uint64_t)a5);
            if (!*(_DWORD *)a5)
            {
              if (!a4
                || (*a5 = 0,
                    a5[1] = 0,
                    a5[2] = 0,
                    sub_234107E40(*(char **)(v19 + 24), 1uLL, 21, (_DWORD *)(a1 + 352), (uint64_t)a5),
                    !*(_DWORD *)a5))
              {
                sub_234212218(a1, 3);
                v21 = 0;
                v22 = 705;
LABEL_23:
                *(_DWORD *)a5 = v21;
                a5[1] = "src/app/CommandHandlerImpl.cpp";
                *((_DWORD *)a5 + 4) = v22;
              }
            }
          }
        }
      }
    }
  }
}

void sub_23421479C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2342149AC(a1, 1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    if (*(_BYTE *)(a1 + 614))
      sub_23425FE94(v4);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_234212068(a1, (uint64_t)a2);
    if (*(_DWORD *)a2)
    {
      v5 = *(_QWORD *)(a1 + 600);
      if (!v5)
        sub_23425FE00(0);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
    }
  }
}

__n128 sub_23421481C(uint64_t a1)
{
  int v1;
  BOOL v2;
  __int128 *v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = *(unsigned __int8 *)(a1 + 608);
  v2 = v1 == 4 || v1 == 1;
  if (v2 && !*(_DWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 16))
  {
    v3 = *(__int128 **)(a1 + 40);
    result = (__n128)v3[2];
    v5 = v3[3];
    v7 = *v3;
    v6 = v3[1];
    *(__n128 *)(a1 + 512) = result;
    *(_OWORD *)(a1 + 528) = v5;
    *(_OWORD *)(a1 + 480) = v7;
    *(_OWORD *)(a1 + 496) = v6;
    *(_BYTE *)(a1 + 609) = v1;
    *(_BYTE *)(a1 + 616) = 1;
  }
  return result;
}

uint64_t sub_234214864@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  uint8_t v11[16];

  if (!*(_BYTE *)(result + 616))
  {
    v10 = 788;
LABEL_10:
    v9 = 3;
    goto LABEL_11;
  }
  v3 = result;
  if ((*(_BYTE *)(result + 608) & 0xFE) != 2)
  {
    v10 = 789;
    goto LABEL_10;
  }
  v4 = sub_234117B80(0xDu, "DataManagement");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Rolling back response", v11, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xDu, 3);
  sub_23411C030(v3 + 56);
  v5 = *(_OWORD **)(v3 + 40);
  v6 = *(_OWORD *)(v3 + 480);
  v7 = *(_OWORD *)(v3 + 496);
  v8 = *(_OWORD *)(v3 + 528);
  v5[2] = *(_OWORD *)(v3 + 512);
  v5[3] = v8;
  *v5 = v6;
  v5[1] = v7;
  sub_23411C030(v3 + 16);
  result = sub_234212218(v3, *(_BYTE *)(v3 + 609));
  v9 = 0;
  *(_BYTE *)(v3 + 616) = 0;
  v10 = 797;
LABEL_11:
  *(_DWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = "src/app/CommandHandlerImpl.cpp";
  *(_DWORD *)(a2 + 16) = v10;
  return result;
}

uint64_t sub_23421497C(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 617))
    sub_23425FFBC(a1);
  v1 = *(_QWORD *)(a1 + 600);
  if (!v1)
    sub_23425FF28(0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
}

void sub_2342149AC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = 0;
  if (*(_BYTE *)(a1 + 608) != 4)
  {
    v8 = 840;
    v7 = 3;
LABEL_10:
    *(_DWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = "src/app/CommandHandlerImpl.cpp";
    *(_DWORD *)(a3 + 16) = v8;
    goto LABEL_11;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_23411DA10((char *)(a1 + 56), (_QWORD *)a3);
  if (!*(_DWORD *)a3)
  {
    if (!a2
      || (sub_23411DC18(a1 + 16, 1),
          *(_OWORD *)a3 = *(_OWORD *)(a1 + 16),
          *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 32),
          !*(_DWORD *)a3))
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_23411DD50(a1 + 16, a3);
      if (!*(_DWORD *)a3)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        sub_233C115F0(a1 + 384, &v9, (_QWORD *)a3);
        if (!*(_DWORD *)a3)
        {
          v6 = *(_QWORD *)(a1 + 600);
          if (!v6)
            sub_234260050(0);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 56))(v6, &v9);
          v7 = 0;
          *(_BYTE *)(a1 + 614) = 0;
          *(_BYTE *)(a1 + 616) = 0;
          v8 = 855;
          goto LABEL_10;
        }
      }
    }
  }
LABEL_11:
  if (v9)
    sub_23411814C(v9);
}

const char *sub_234214ACC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(char *)(a1 + 608);
  if (v1 > 6)
    return "N/A";
  else
    return off_250516950[v1];
}

uint64_t sub_234214AF4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 600);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t sub_234214B0C(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 617))
    sub_234260178(a1);
  v1 = *(_QWORD *)(a1 + 600);
  if (!v1)
    sub_2342600E4(0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t sub_234214B3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 612);
}

_QWORD *sub_234214B44(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  NSObject *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v7 = 0uLL;
  v8 = 0;
  result = (*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 56))(&v7);
  if ((_DWORD)v7)
  {
    v5 = sub_234117B80(0xDu, "DataManagement");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v7;
      v10 = v8;
      v6 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Adding response failed: %s. Returning failure instead.", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v7;
      v10 = v8;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0xDu, 1);
    }
    *(_WORD *)buf = 1;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, buf, 0);
  }
  return result;
}

uint64_t sub_234214C94(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 600);
  if (!v1)
    sub_23426020C(0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

uint64_t sub_234214CB8(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v4;
  char v5;

  v4 = 256;
  v5 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 16))(a1, a2, &v4, 0);
}

uint64_t sub_234214CF0(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v4;
  char v5;

  v4 = 257;
  v5 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, _QWORD))(*(_QWORD *)a1 + 16))(a1, a2, &v4, 0);
}

void sub_234214D28()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_234214D3C@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int16 *v4;
  char v5;

  v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = (unsigned __int16 *)(result + 16);
    while (*v4 != *a2 || *((_DWORD *)v4 + 1) != *((_DWORD *)a2 + 1) || *((_DWORD *)v4 + 2) != *((_DWORD *)a2 + 2))
    {
      v4 += 8;
      if (!--v3)
        goto LABEL_7;
    }
    *(_OWORD *)a3 = *(_OWORD *)v4;
    v5 = 1;
  }
  else
  {
LABEL_7:
    v5 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v5;
  return result;
}

uint64_t sub_234214DA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 16);
    LOBYTE(v2) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_234214DC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;

  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    v5 = 89;
    LODWORD(v4) = 11;
  }
  else
  {
    *(_QWORD *)&v6 = *(_QWORD *)a2;
    DWORD2(v6) = *(_DWORD *)(a2 + 8);
    WORD6(v6) = *(_WORD *)a3;
    BYTE14(v6) = *(_BYTE *)(a3 + 2);
    *(_OWORD *)(result + 16) = v6;
    *(_QWORD *)(result + 8) = 1;
    v5 = 108;
  }
  *(_DWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = "src/app/CommandPathRegistry.h";
  *(_DWORD *)(a4 + 16) = v5;
  return result;
}

id sub_234214E2C(uint64_t a1, const char *a2)
{
  return sub_234117B80(0xDu, a2);
}

uint64_t sub_234214E34(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, result);
    *(_QWORD *)(v3 + 16) = a2;
  }
  return result;
}

uint64_t sub_234214E70(uint64_t a1)
{
  sub_2341B1F64("src/app/CommandHandler.cpp", 35);
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_234214EA0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 112))(result, a1);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return result;
}

_QWORD *sub_234214ED8(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a1);
    a1[2] = a2;
  }
  return a1;
}

void sub_234214F20()
{
  uint64_t v0;
  uint64_t v1;

  v0 = qword_25615DA38;
  if (qword_25615DA38)
  {
    do
    {
      v1 = *(_QWORD *)(v0 + 16);
      *(_QWORD *)(v0 + 16) = 0;
      v0 = v1;
    }
    while (v1);
  }
  qword_25615DA38 = 0;
}

uint64_t sub_234214F44@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  uint8_t v9[16];

  if (result)
  {
    v3 = result;
    v4 = qword_25615DA38;
    if (qword_25615DA38)
    {
      while (1)
      {
        result = sub_234103314(v4, v3);
        if ((_DWORD)result)
          break;
        v4 = *(_QWORD *)(v4 + 16);
        if (!v4)
        {
          v5 = qword_25615DA38;
          goto LABEL_8;
        }
      }
      v8 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Duplicate command handler registration failed", v9, 2u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        result = sub_2341147D0(0x23u, 1);
      v6 = 58;
      v7 = 3;
    }
    else
    {
      v5 = 0;
LABEL_8:
      v7 = 0;
      *(_QWORD *)(v3 + 16) = v5;
      qword_25615DA38 = v3;
      v6 = 65;
    }
  }
  else
  {
    v6 = 51;
    v7 = 47;
  }
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = "src/app/CommandHandlerInterfaceRegistry.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

_BYTE *sub_23421504C(_BYTE *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = qword_25615DA38;
  if (qword_25615DA38)
  {
    v2 = (int)result;
    v3 = 0;
    do
    {
      result = (_BYTE *)(v1 + 8);
      v4 = v1;
      if (*(_BYTE *)(v1 + 8))
      {
        result = sub_233C05D98(result);
        v4 = v1;
        if (*(unsigned __int16 *)result == v2)
        {
          v5 = (uint64_t *)(v3 + 16);
          if (!v3)
            v5 = &qword_25615DA38;
          *v5 = *(_QWORD *)(v1 + 16);
          *(_QWORD *)(v1 + 16) = 0;
          v4 = v3;
        }
      }
      v1 = *(_QWORD *)(v1 + 16);
      v3 = v4;
    }
    while (v1);
  }
  return result;
}

BOOL sub_2342150D4@<W0>(_BOOL8 result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;

  if (!result)
  {
    v6 = 97;
    v7 = 47;
    goto LABEL_14;
  }
  v3 = qword_25615DA38;
  if (!qword_25615DA38)
  {
LABEL_13:
    v6 = 121;
    v7 = 16;
    goto LABEL_14;
  }
  v4 = result;
  result = sub_234103314(qword_25615DA38, result);
  if (!result)
  {
    v8 = v3;
    while (1)
    {
      v3 = *(_QWORD *)(v8 + 16);
      if (!v3)
        goto LABEL_13;
      result = sub_234103314(*(_QWORD *)(v8 + 16), v4);
      v5 = v8;
      v8 = v3;
      if (result)
        goto LABEL_9;
    }
  }
  v5 = 0;
LABEL_9:
  v7 = 0;
  if (v5)
    v9 = (uint64_t *)(v5 + 16);
  else
    v9 = &qword_25615DA38;
  *v9 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  v6 = 115;
LABEL_14:
  *(_DWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = "src/app/CommandHandlerInterfaceRegistry.cpp";
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_23421519C(int a1, int a2)
{
  uint64_t i;

  for (i = qword_25615DA38; i; i = *(_QWORD *)(i + 16))
  {
    if ((!*(_BYTE *)(i + 8) || *(unsigned __int16 *)sub_233C05D98((_BYTE *)(i + 8)) == a1) && *(_DWORD *)(i + 12) == a2)
      break;
  }
  return i;
}

void sub_234215204(unsigned int a1@<W0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  char v12[64];
  _QWORD v13[3];
  char v14;
  uint64_t v15;

  if (!a2)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/app/StatusResponse.cpp";
    v8 = 28;
LABEL_12:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  sub_234118674(0x4AAuLL, 0x26u, &v15);
  if (!v15)
  {
    *(_DWORD *)a4 = 11;
    *(_QWORD *)(a4 + 8) = "src/app/StatusResponse.cpp";
    v8 = 30;
    goto LABEL_12;
  }
  sub_234106C48((uint64_t)v12);
  v13[1] = 0;
  v13[2] = 0;
  v13[0] = &unk_250504030;
  v14 = 0;
  sub_233CAF098((uint64_t)v13, &v15, 0);
  sub_234106CA8((uint64_t)v12, (uint64_t)v13, 0xFFFFFFFF, (uint64_t)&v10);
  sub_23411BFF8((uint64_t)&v10);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_23411E904((uint64_t)&v10, v12, a4);
  if (!*(_DWORD *)a4)
  {
    sub_23411E818((uint64_t)&v10, a1);
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v11;
    if (!*(_DWORD *)a4)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      sub_233C115F0((uint64_t)v12, &v15, (_QWORD *)a4);
      if (!*(_DWORD *)a4)
      {
        sub_2341AD0C8(a2, 2000);
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        v9 = a3;
        sub_2341AD108(a2, 0x10000u, 1, &v15, &v9, a4);
        if (!*(_DWORD *)a4)
        {
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = "src/app/StatusResponse.cpp";
          *(_DWORD *)(a4 + 16) = 44;
        }
      }
    }
  }
  sub_2340F6E6C(v13);
  if (v15)
    sub_23411814C(v15);
}

void sub_2342153C0(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  int v7;
  const char *v8;
  unsigned __int8 v9[3];
  _BYTE v10[72];
  uint64_t v11;
  int v12[20];
  _BYTE buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  sub_23411E074((uint64_t)v12);
  sub_234104468((uint64_t)v10);
  v11 = 0;
  sub_233C11670((uint64_t)v10, a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23411DF84((uint64_t)v12, (uint64_t)v10, a3);
  if (!*(_DWORD *)a3)
  {
    *(_WORD *)v9 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_23411E7D0(v12, v9, a3);
    if (!*(_DWORD *)a3)
    {
      v6 = sub_234117B80(0x23u, "InteractionModel");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v9[0];
        v8 = sub_23411EEB4(v9[0]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v7;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v8;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Received status response, status is 0x%02x (%s)", buf, 0x12u);
      }
      if (sub_234114844(2u))
      {
        sub_23411EEB4(v9[0]);
        sub_2341147D0(0x23u, 2);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_23411DFEC((uint64_t)v12, a3);
      if (!*(_DWORD *)a3)
      {
        sub_23411E5CC(v9, (uint64_t)buf);
        *(_OWORD *)a2 = *(_OWORD *)buf;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
        *(_DWORD *)a3 = 0;
        a3[1] = "src/app/StatusResponse.cpp";
        *((_DWORD *)a3 + 4) = 63;
      }
    }
  }
  if (v11)
    sub_23411814C(v11);
}

uint64_t sub_234215588()
{
  return qword_2561589A0;
}

uint64_t sub_234215594(uint64_t a1)
{
  uint64_t v1;

  v1 = qword_2561589A0;
  qword_2561589A0 = a1;
  return v1;
}

void sub_2342155A8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/app/util/MatterCallbacks.cpp";
  *(_DWORD *)(a1 + 16) = 53;
}

void sub_2342155C4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "src/app/util/MatterCallbacks.h";
  *(_DWORD *)(a1 + 16) = 60;
}

uint64_t sub_2342155E8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _OWORD v12[13];

  v4 = 0;
  *(_QWORD *)(a1 + 264) = a2;
  v5 = *a3;
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 240) = v5;
  memset(v12, 0, 204);
  do
  {
    v6 = (char *)v12 + v4;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    *((_WORD *)v6 + 9) = 5540;
    *((_DWORD *)v6 + 5) = 0;
    result = sub_2341B1C28();
    *((_QWORD *)v6 + 3) = result;
    *((_DWORD *)v6 + 8) = v8;
    *((_WORD *)v6 + 18) = 0;
    v6[38] = 0;
    v4 += 40;
  }
  while (v4 != 200);
  v9 = 0;
  WORD4(v12[12]) = 0;
  do
  {
    v10 = a1 + v9;
    *(_OWORD *)(v10 + 32) = *(_OWORD *)((char *)v12 + v9);
    v11 = *(_DWORD *)((char *)&v12[1] + v9 + 4);
    *(_DWORD *)(v10 + 48) = *(_DWORD *)((char *)&v12[1] + v9);
    *(_DWORD *)(v10 + 52) = v11;
    *(_QWORD *)(v10 + 56) = *(_QWORD *)((char *)&v12[1] + v9 + 8);
    *(_QWORD *)(v10 + 63) = *(_QWORD *)((char *)&v12[1] + v9 + 15);
    v9 += 40;
  }
  while (v9 != 200);
  *(_WORD *)(a1 + 232) = WORD4(v12[12]);
  return result;
}

uint64_t sub_2342156E4(uint64_t a1, int *a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  uint8_t buf[4];
  char *v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  char __str[8];
  uint64_t v24;
  int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)__str = 0;
  v24 = a1 + 240;
  v25 = a2;
  sub_2341C4B2C((uint64_t)__str);
  v4 = sub_2341F3C68(a2);
  v5 = sub_2342158EC(a1 + 32, (__int128 *)a2, v4);
  sub_23412A258((uint64_t)a2, __str, 0x4CuLL);
  v7 = *(_QWORD *)(a1 + 240);
  v6 = *(_QWORD *)(a1 + 248);
  v8 = sub_234117B80(0x22u, "Discovery");
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v9)
    {
      *(_DWORD *)buf = 136316418;
      v12 = __str;
      v13 = 1024;
      v14 = v4;
      v15 = 1024;
      v16 = HIDWORD(v6);
      v17 = 1024;
      v18 = v6;
      v19 = 1024;
      v20 = HIDWORD(v7);
      v21 = 1024;
      v22 = v7;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "%s: new best score: %u (for %08X%08X-%08X%08X)", buf, 0x2Au);
    }
    result = sub_234114844(2u);
    if ((result & 1) != 0)
      return sub_2341147D0(0x22u, 2);
  }
  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 136316418;
      v12 = __str;
      v13 = 1024;
      v14 = v4;
      v15 = 1024;
      v16 = HIDWORD(v6);
      v17 = 1024;
      v18 = v6;
      v19 = 1024;
      v20 = HIDWORD(v7);
      v21 = 1024;
      v22 = v7;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "%s: score has not improved: %u (for %08X%08X-%08X%08X)", buf, 0x2Au);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(0x22u, 2);
  }
  return result;
}

uint64_t sub_2342158EC(uint64_t a1, __int128 *a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v17[12];
  int v18;

  v6 = 0;
  v7 = a1;
  while (v6 < *(unsigned __int8 *)(a1 + 200))
  {
    v18 = *(_DWORD *)(v7 + 20);
    if (sub_2341F3C68((int *)v7) < a3)
      break;
    ++v6;
    v7 += 40;
    if (v6 == 5)
      return 0;
  }
  v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 > v6)
  {
    v10 = (_QWORD *)(a1 + 40 * *(unsigned __int8 *)(a1 + 200) + 24);
    do
    {
      if (v9 <= 4)
      {
        v11 = (__int128 *)(a1 + 40 * (v9 - 1));
        v12 = *v11;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v11 + 4);
        *(_OWORD *)(v10 - 3) = v12;
        *((_DWORD *)v10 - 1) = *((_DWORD *)v11 + 5);
        v13 = *((_QWORD *)v11 + 3);
        *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)v11 + 31);
        *v10 = v13;
      }
      --v9;
      v10 -= 5;
    }
    while (v6 < v9);
    LODWORD(v9) = *(unsigned __int8 *)(a1 + 200);
  }
  if (v9 < 5)
    *(_BYTE *)(a1 + 200) = v9 + 1;
  v14 = *a2;
  *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v7 = v14;
  *(_DWORD *)(v7 + 20) = *((_DWORD *)a2 + 5);
  v15 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v7 + 31) = *(_QWORD *)((char *)a2 + 31);
  *(_QWORD *)(v7 + 24) = v15;
  if (!sub_23410EF74((_DWORD *)v7))
  {
    *(_DWORD *)(v7 + 20) = 0;
    v16 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_INFO, "Lookup clearing interface for non LL address", v17, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  return 1;
}

uint64_t sub_234215A8C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  NSObject *v5;
  uint8_t v6[16];

  v2 = a2 - *(_QWORD *)(a1 + 264);
  v3 = *(unsigned int *)(a1 + 256);
  if (v2 < v3)
    return (v3 - v2);
  if (*(unsigned __int8 *)(a1 + 232) > *(unsigned __int8 *)(a1 + 233))
    return 0;
  v3 = *(unsigned int *)(a1 + 260);
  if (v2 < v3)
    return (v3 - v2);
  v5 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "Unexpected timeout: lookup should have been cleaned already.", v6, 2u);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    sub_2341147D0(0x22u, 1);
    return 0;
  }
  return result;
}

void sub_234215B50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint8_t buf[16];
  int v12;
  _BYTE v13[19];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = a2 - *(_QWORD *)(a1 + 264);
  v6 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 240);
    v7 = *(_QWORD *)(a1 + 248);
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = HIDWORD(v7);
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    *(_WORD *)&buf[14] = 1024;
    v12 = HIDWORD(v8);
    *(_WORD *)v13 = 1024;
    *(_DWORD *)&v13[2] = v8;
    *(_WORD *)&v13[6] = 2048;
    *(_QWORD *)&v13[8] = v5;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Checking node lookup status for %08X%08X-%08X%08X after %lu ms", buf, 0x24u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (v5 >= *(unsigned int *)(a1 + 256))
  {
    if (*(unsigned __int8 *)(a1 + 232) > *(unsigned __int8 *)(a1 + 233))
    {
      sub_234216A74(a1 + 32, (uint64_t)buf);
      *(_DWORD *)(a3 + 40) = 2;
      *(_OWORD *)a3 = *(_OWORD *)buf;
      v10 = *(_DWORD *)v13;
      *(_DWORD *)(a3 + 16) = v12;
      *(_DWORD *)(a3 + 20) = v10;
      *(_QWORD *)(a3 + 24) = *(_QWORD *)&v13[4];
      *(_QWORD *)(a3 + 31) = *(_QWORD *)&v13[11];
      return;
    }
    if (v5 >= *(unsigned int *)(a1 + 260))
    {
      *(_DWORD *)(a3 + 40) = 1;
      *(_DWORD *)a3 = 50;
      *(_QWORD *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      *(_DWORD *)(a3 + 16) = 123;
      return;
    }
  }
  else
  {
    v9 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "Keeping DNSSD lookup active", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
}

uint64_t sub_234215D74@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint8_t buf[8];
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = a2;
  result = sub_2341C4ACC((uint64_t)buf);
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
    sub_2342155E8(a3, v9, a2);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v10 = sub_2341F3D04();
    result = (*(uint64_t (**)(uint64_t *, __int128 *))(*v10 + 48))(v10, a2);
    if (*(_DWORD *)a4)
      return result;
    sub_2341C4C4C((_QWORD *)(a1 + 32), (_QWORD *)(a3 + 8));
    sub_234215F24(a1);
    v11 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      v14 = HIDWORD(*(_QWORD *)a2);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = HIDWORD(v12);
      v18 = 1024;
      v19 = v12;
      v20 = 1024;
      v21 = v14;
      v22 = 1024;
      v23 = v13;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Lookup started for %08X%08X-%08X%08X", buf, 0x1Au);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      result = sub_2341147D0(0x22u, 2);
    v15 = 0;
    v16 = 198;
  }
  else
  {
    v16 = 190;
    v15 = 3;
  }
  *(_DWORD *)a4 = v15;
  a4[1] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *((_DWORD *)a4 + 4) = v16;
  return result;
}

uint64_t sub_234215F24(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint8_t buf[16];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), sub_234216944, a1);
  result = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
  if (v4 != (_QWORD *)(a1 + 32))
  {
    v5 = result;
    LODWORD(v6) = -1;
    do
    {
      if (v4)
        v7 = (uint64_t)(v4 - 1);
      else
        v7 = 0;
      result = sub_234215A8C(v7, v5);
      if (result >= v6)
        v6 = v6;
      else
        v6 = result;
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    if ((_DWORD)v6 != -1)
    {
      v16 = 0uLL;
      v17 = 0;
      result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 16) + 40))(&v16, *(_QWORD *)(a1 + 16), v6, sub_234216944, a1);
      if ((_DWORD)v16)
      {
        v8 = sub_234117B80(0x22u, "Discovery");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)buf = v16;
          v19 = v17;
          v9 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v9;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Timer schedule error %s assumed permanent", buf, 0xCu);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
        {
          *(_OWORD *)buf = v16;
          v19 = v17;
          sub_2341083CC((const char **)buf, 1);
          result = sub_2341147D0(0x22u, 1);
        }
        v10 = *(_QWORD **)(a1 + 40);
        while (v10 != v3)
        {
          v11 = v10 - 1;
          if (!v10)
            v11 = 0;
          *(_OWORD *)buf = *((_OWORD *)v11 + 15);
          v12 = v11[3];
          sub_2341C4C94(v10);
          v10 = *(_QWORD **)(a1 + 40);
          v13 = sub_2341F3D04();
          (*(void (**)(uint64_t *, uint8_t *))(*v13 + 56))(v13, buf);
          v14 = v16;
          v15 = v17;
          result = (*(uint64_t (**)(uint64_t, uint8_t *, __int128 *))(*(_QWORD *)v12 + 24))(v12, buf, &v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_234216154@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  _QWORD v9[3];
  _BYTE v10[40];
  __int128 v11;

  v4 = result + 32;
  v5 = result + 32;
  do
    v5 = *(_QWORD *)(v5 + 8);
  while (v5 != a2 + 8 && v5 != v4);
  if (v5 == v4)
  {
    if (*(unsigned __int8 *)(a2 + 232) <= *(unsigned __int8 *)(a2 + 233))
    {
      *(_DWORD *)a3 = 216;
      *(_QWORD *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      v7 = 204;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 24);
      v11 = *(_OWORD *)(a2 + 240);
      sub_234216A74(a2 + 32, (uint64_t)v10);
      v9[1] = &v11;
      v9[0] = 2;
      v9[2] = v10;
      sub_2341C4B2C((uint64_t)v9);
      result = (*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v8 + 16))(v8, &v11, v10);
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      v7 = 213;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    v7 = 203;
  }
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

_QWORD *sub_234216254@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  BOOL v7;
  int v8;
  int v9;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  int v16;
  _QWORD v17[4];

  result = a2 + 1;
  if (a2[1])
    v7 = a2[2] == 0;
  else
    v7 = 1;
  if (v7)
  {
    v8 = 218;
    v9 = 47;
  }
  else
  {
    sub_2341C4C94(result);
    v12 = sub_2341F3D04();
    (*(void (**)(uint64_t *, _QWORD *))(*v12 + 56))(v12, a2 + 30);
    sub_234215F24(a1);
    v17[0] = a2 + 30;
    v17[1] = 116;
    v17[2] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    v17[3] = 225;
    result = (_QWORD *)sub_2341C4B8C((uint64_t)v17);
    if (!a3)
    {
      v13 = a2[3];
      v14 = 116;
      v15 = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
      v16 = 229;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v13 + 24))(v13, a2 + 30, &v14);
    }
    v9 = 0;
    v8 = 239;
  }
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t sub_234216340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t result;

  *(_QWORD *)(a1 + 16) = a2;
  v5 = sub_2341F3D04();
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(*v5 + 40))(v5, a1 + 8);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
  *(_DWORD *)(a3 + 16) = 246;
  return result;
}

uint64_t sub_234216390(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v9;
  const char *v10;
  int v11;
  _QWORD v12[4];
  __int128 v13;

  v2 = (_QWORD *)(a1 + 32);
  for (i = *(_QWORD **)(a1 + 40); i != v2; i = *(_QWORD **)(a1 + 40))
  {
    v4 = i - 1;
    if (!i)
      v4 = 0;
    v13 = *((_OWORD *)v4 + 15);
    v5 = v4[3];
    sub_2341C4C94(i);
    v12[1] = 115;
    v12[3] = 260;
    v12[0] = &v13;
    v12[2] = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    sub_2341C4B8C((uint64_t)v12);
    v6 = sub_2341F3D04();
    (*(void (**)(uint64_t *, __int128 *))(*v6 + 56))(v6, &v13);
    v9 = 115;
    v10 = "src/lib/address_resolve/AddressResolve_DefaultImpl.cpp";
    v11 = 266;
    (*(void (**)(uint64_t, __int128 *, int *))(*(_QWORD *)v5 + 24))(v5, &v13, &v9);
  }
  sub_234215F24(a1);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = sub_2341F3D04();
  return (*(uint64_t (**)(uint64_t *, _QWORD))(*v7 + 40))(v7, 0);
}

uint64_t sub_2342164A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v17;
  char v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  char v24;
  uint64_t v25;

  v3 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 != a1 + 32)
  {
    v6 = (__int128 *)(a2 + 16);
    do
    {
      v25 = v4;
      v7 = v4 - 8;
      v8 = v4 == 0;
      v4 = *(_QWORD *)(v4 + 8);
      if (v8)
        v9 = 0;
      else
        v9 = v7;
      if (*(_QWORD *)(v9 + 240) == *(_QWORD *)(a2 + 168) && *(_QWORD *)(v9 + 248) == *(_QWORD *)(a2 + 176))
      {
        v17 = 0uLL;
        v18 = 1;
        v19 = 5540;
        v20 = 0;
        v21 = sub_2341B1C28();
        v22 = v10;
        v23 = 0;
        v24 = 0;
        v19 = *(_WORD *)(a2 + 96);
        v20 = *(_DWORD *)a2;
        v11 = sub_2342165EC(a2);
        v21 = v11;
        LOWORD(v22) = v12;
        HIBYTE(v23) = *(_BYTE *)(a2 + 139);
        LOBYTE(v23) = *(_BYTE *)(a2 + 140);
        if (*(_BYTE *)(a2 + 142))
          v24 = *(_BYTE *)(a2 + 141);
        if (*(_QWORD *)(a2 + 8))
        {
          v13 = 0;
          v14 = v6;
          do
          {
            v15 = *v14++;
            v17 = v15;
            v11 = sub_2342156E4(v9, (int *)&v17);
            ++v13;
          }
          while (v13 < *(_QWORD *)(a2 + 8));
        }
        sub_234216648(v11, &v25);
      }
    }
    while (v4 != v3);
  }
  return sub_234215F24(a1);
}

uint64_t sub_2342165EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_2341B1C28();
  LODWORD(v3) = *(_DWORD *)(a1 + 144);
  if (*(_BYTE *)(a1 + 148))
    v3 = v3;
  else
    v3 = v2;
  LODWORD(v4) = *(_DWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 156))
    v4 = v4;
  else
    v4 = HIDWORD(v2);
  return v3 | (v4 << 32);
}

void sub_234216648(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[8];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*a2)
    v3 = *a2 - 8;
  else
    v3 = 0;
  v4 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  sub_234215B50(v3, v4, (uint64_t)&v17);
  v5 = v19;
  if (v19)
  {
    v6 = (_QWORD *)*a2;
    v7 = *a2 - 8;
    if (!*a2)
      v7 = 0;
    v16 = *(_OWORD *)(v7 + 240);
    v8 = *(_QWORD *)(v7 + 24);
    sub_2341C4C94(v6);
    v9 = sub_2341F3D04();
    (*(void (**)(uint64_t *, __int128 *))(*v9 + 56))(v9, &v16);
    if (v5 == 2)
    {
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v14 = &v16;
      *(_DWORD *)buf = 1;
      *((_QWORD *)&v14 + 1) = &v17;
      sub_2341C4B2C((uint64_t)buf);
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v8 + 16))(v8, &v16, &v17);
    }
    else if (v5 == 1)
    {
      *(_QWORD *)buf = &v16;
      v14 = v17;
      v15 = v18;
      sub_2341C4B8C((uint64_t)buf);
      v11 = v17;
      v12 = v18;
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v8 + 24))(v8, &v16, &v11);
    }
    else
    {
      v10 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Unexpected lookup state (not success or fail).", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0x22u, 1);
    }
  }
}

uint64_t sub_23421680C(uint64_t a1, uint64_t a2)
{
  return sub_2342164A4(a1 - 8, a2);
}

uint64_t sub_234216814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1 + 32;
  v3 = *(_QWORD *)(a1 + 40);
  while (v3 != v2)
  {
    v5 = v3;
    v3 = *(_QWORD *)(v3 + 8);
    sub_234216648(a1, &v5);
  }
  return sub_234215F24(a1);
}

uint64_t sub_234216868(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v13;
  uint64_t v14;

  v4 = (_QWORD *)(a1 + 32);
  v5 = *(_QWORD **)(a1 + 40);
  if (v5 != v4)
  {
    do
    {
      v8 = (_QWORD *)v5[1];
      v9 = v5 - 1;
      if (!v5)
        v9 = 0;
      if (v9[30] == *a2 && v9[31] == a2[1])
      {
        v10 = v9[3];
        sub_2341C4C94(v5);
        v11 = sub_2341F3D04();
        (*(void (**)(uint64_t *, _QWORD *))(*v11 + 56))(v11, a2);
        v13 = *a3;
        v14 = *((_QWORD *)a3 + 2);
        (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v10 + 24))(v10, a2, &v13);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
  return sub_234215F24(a1);
}

uint64_t sub_23421693C(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  return sub_234216868(a1 - 8, a2, a3);
}

uint64_t sub_234216944(uint64_t a1, uint64_t a2)
{
  return sub_234216814(a2);
}

uint64_t *sub_23421694C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25615DA70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25615DA70))
  {
    qword_25615DA40 = (uint64_t)&off_250516A38;
    *(_QWORD *)algn_25615DA48 = &unk_250516A90;
    qword_25615DA50 = 0;
    qword_25615DA60 = (uint64_t)&qword_25615DA60;
    unk_25615DA68 = &qword_25615DA60;
    __cxa_guard_release(&qword_25615DA70);
  }
  return &qword_25615DA40;
}

uint64_t sub_2342169B8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250516A38;
  a1[1] = &unk_250516A90;
  sub_2341CC044(a1 + 4);
  return nullsub_13(a1, v2);
}

void sub_2342169EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250516A38;
  a1[1] = &unk_250516A90;
  sub_2341CC044(a1 + 4);
  nullsub_13(a1, v2);
  JUMPOUT(0x23493E704);
}

uint64_t sub_234216A34(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(a1 - 1) = &off_250516A38;
  v1 = a1 - 1;
  *a1 = &unk_250516A90;
  sub_2341CC044(a1 + 3);
  return nullsub_13(v1, v2);
}

void sub_234216A6C(uint64_t a1)
{
  sub_2342169EC((_QWORD *)(a1 - 8));
}

__n128 sub_234216A74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  __n128 result;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 201);
  if (*(unsigned __int8 *)(a1 + 200) <= v2)
    sub_2342602A0(a1);
  *(_BYTE *)(a1 + 201) = v2 + 1;
  v3 = a1 + 40 * v2;
  result = *(__n128 *)v3;
  *(_OWORD *)a2 = *(_OWORD *)v3;
  v5 = *(_DWORD *)(v3 + 20);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
  *(_DWORD *)(a2 + 20) = v5;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(a2 + 31) = *(_QWORD *)(v3 + 31);
  return result;
}

const char *sub_234216AC8(unint64_t a1)
{
  if ((_WORD)a1 || WORD1(a1) > 4u)
    return "----";
  else
    return *(char **)((char *)off_250516D48 + ((uint64_t)(a1 >> 16 << 48) >> 45));
}

const char *sub_234216B00(unint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  const char *result;

  if ((_WORD)a1 || WORD1(a1) > 4u)
    return "----";
  v2 = (uint64_t)(a1 >> 16 << 48) >> 45;
  v3 = *(_QWORD *)((char *)&unk_2342EEFD0 + v2);
  v4 = *(char **)((char *)&off_250516D70 + v2) + 8;
  v5 = 16 * v3;
  result = "----";
  while (*(v4 - 8) != a2)
  {
    v4 += 16;
    v5 -= 16;
    if (!v5)
      return result;
  }
  return *(const char **)v4;
}

int *sub_234216B74@<X0>(int *result@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  int v5;

  if (a2)
  {
    *((_QWORD *)result + 3) = a2;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = sub_2341AEA90(a2, 0, 0, (uint64_t)result, (uint64_t)a3);
    if (*(_DWORD *)a3)
      return result;
    v4 = 0;
    v5 = 51;
  }
  else
  {
    v5 = 45;
    v4 = 3;
  }
  *(_DWORD *)a3 = v4;
  a3[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *((_DWORD *)a3 + 4) = v5;
  return result;
}

int *sub_234216BE8(uint64_t a1)
{
  int *result;
  _BYTE v3[24];

  result = *(int **)(a1 + 24);
  if (result)
  {
    sub_2341AEB50(result, 0, 0, (uint64_t)v3);
    result = (int *)sub_2341AFAA0(*(_QWORD *)(a1 + 24), a1 + 8);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_234216C34(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((*(_DWORD *)(a3 + 256) - 1) < 2
    || (*(_QWORD *)a4 = 0,
        *(_QWORD *)(a4 + 8) = 0,
        *(_QWORD *)(a4 + 16) = 0,
        sub_234216C90(a1, a2, a3, a4),
        !*(_DWORD *)a4))
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = 73;
  }
}

void sub_234216C90(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  _QWORD *v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[16];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_250516D98;
  *(_QWORD *)(a4 + 16) = 186;
  v13 = 0;
  v12 = 0;
  v6 = sub_2341AE734(*(_QWORD *)(a1 + 24), a2, a1 + 8, 1u);
  if (v6)
  {
    v7 = (uint64_t)v6;
    sub_234118674(0x18uLL, 0x26u, buf);
    v8 = *(_QWORD *)buf;
    v13 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      sub_234139DB0(*(char **)(*(_QWORD *)buf + 8), 8uLL, a4);
      if (!*(_DWORD *)a4)
      {
        sub_234118220(v8, 8uLL, 0);
        sub_2341359FC(&v11, *(_QWORD *)(v8 + 8));
        sub_23421780C(a3 + 256, v11);
        v12 = 3;
        sub_2341AD100(v7, 500);
        sub_2341AD108(v7, 0, 0, &v13, &v12, (uint64_t)buf);
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(_QWORD *)(a4 + 16) = v15;
        if (!*(_DWORD *)a4)
          goto LABEL_13;
      }
    }
    else
    {
      *(_DWORD *)a4 = 11;
      *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
      *(_DWORD *)(a4 + 16) = 196;
    }
    sub_2341AD5A4(v7);
  }
  else
  {
    *(_DWORD *)a4 = 11;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = 193;
  }
  *(_DWORD *)(a3 + 256) = 0;
  v9 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a4 + 16);
    v10 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Failed to send message counter synchronization request with error:%s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a4 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(0xBu, 1);
  }
LABEL_13:
  if (v13)
    sub_23411814C(v13);
}

void sub_234216EE0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_234216C34(a1 - 16, a2, a3, a4);
}

uint64_t sub_234216EE8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, _QWORD **a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t result;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  result = sub_234216F78(a1, a2, a5, a6, a7);
  if (!*(_DWORD *)a7)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a3, a4);
    if (!*(_DWORD *)a7)
    {
      *(_DWORD *)a7 = 0;
      a7[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
      *((_DWORD *)a7 + 4) = 89;
    }
  }
  return result;
}

uint64_t sub_234216F78@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, __int128 *a3@<X2>, _QWORD **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  __int128 v15;
  uint8_t v16[16];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  result = sub_2341F8C80(a2, a4, a5);
  if (!*(_DWORD *)a5)
  {
    for (i = 0; i != 192; i += 32)
    {
      v11 = a1 + i;
      if (!*(_QWORD *)(a1 + i + 56))
      {
        v13 = 0;
        v15 = *a3;
        *(_DWORD *)(v11 + 48) = *((_DWORD *)a3 + 4);
        *(_OWORD *)(v11 + 32) = v15;
        *(_DWORD *)(v11 + 52) = *((_DWORD *)a3 + 5);
        *(_QWORD *)(v11 + 56) = *a4;
        *a4 = 0;
        v14 = 137;
        goto LABEL_11;
      }
    }
    v12 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "MCSP ReceiveTable Already Full", v16, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      v13 = 11;
      result = sub_2341147D0(0xBu, 1);
      v14 = 142;
    }
    else
    {
      v14 = 142;
      v13 = 11;
    }
LABEL_11:
    *(_DWORD *)a5 = v13;
    a5[1] = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *((_DWORD *)a5 + 4) = v14;
  }
  return result;
}

uint64_t sub_2342170A8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, _QWORD **a6@<X5>, _QWORD *a7@<X8>)
{
  return sub_234216EE8(a1 - 16, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2342170B0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  *a2 = result + 8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a3 + 16) = 96;
  return result;
}

uint64_t sub_2342170D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  BOOL v6;
  BOOL v7;

  if (*((_WORD *)a3 + 2))
  {
LABEL_2:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a5 + 16) = 110;
    return result;
  }
  v5 = *a3;
  if (*((_WORD *)a3 + 3))
    v6 = 0;
  else
    v6 = v5 == 0;
  if (v6)
    return sub_234217128(a2, a4, a5);
  if (*((_WORD *)a3 + 3))
    v7 = 0;
  else
    v7 = v5 == 1;
  if (!v7)
    goto LABEL_2;
  return sub_234217320(result, a2, a4, a5);
}

uint64_t sub_234217128@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t result;
  int v10;
  int v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  uint8_t buf[16];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250516DB0;
  *(_QWORD *)(a3 + 16) = 252;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v7 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_INFO, "Received MsgCounterSyncReq request", buf, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xBu, 3);
  if (v5)
  {
    if (v6 == 8)
    {
      v8 = sub_2341359FC(&v14, v5);
      result = sub_23421783C((uint64_t)v8, a1, a3);
      if (!*(_DWORD *)a3)
        return result;
      goto LABEL_12;
    }
    v10 = 260;
    v11 = 24;
  }
  else
  {
    v10 = 259;
    v11 = 13;
  }
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a3 + 16) = v10;
LABEL_12:
  v12 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a3 + 16);
    v13 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Failed to handle MsgCounterSyncReq message with error:%s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0xBu, 1);
  }
  return result;
}

uint64_t sub_234217320@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  NSObject *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint8_t buf[16];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a4 = xmmword_250516DC8;
  *(_QWORD *)(a4 + 16) = 277;
  v8 = *(int **)(*(_QWORD *)a3 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v10 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "Received MsgCounterSyncResp response", buf, 2u);
  }
  v11 = sub_234114844(3u);
  if ((_DWORD)v11)
    v11 = sub_2341147D0(0xBu, 3);
  if (!*(_BYTE *)(a2 + 88))
    sub_234260334(v11);
  if (*(_QWORD *)(*(_QWORD *)a3 + 24) != 12)
  {
    v17 = 288;
LABEL_15:
    v18 = 24;
    goto LABEL_16;
  }
  if (!v8)
  {
    v17 = 290;
    v18 = 13;
LABEL_16:
    *(_DWORD *)a4 = v18;
    *(_QWORD *)(a4 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
    *(_DWORD *)(a4 + 16) = v17;
    goto LABEL_17;
  }
  if (v9 != 12)
  {
    v17 = 291;
    goto LABEL_15;
  }
  v12 = *v8;
  if (!*v8)
  {
    v17 = 294;
    v18 = 174;
    goto LABEL_16;
  }
  v13 = (uint64_t)(v8 + 1);
  sub_233CB4208(a2, &v22);
  v14 = sub_2341CD3C0(v22) + 256;
  sub_2341359FC(&v21, v13);
  sub_2342178FC(v14, v12, v21, (uint64_t)buf);
  *(_OWORD *)a4 = *(_OWORD *)buf;
  *(_QWORD *)(a4 + 16) = v24;
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  if (!*(_DWORD *)a4)
  {
    sub_233CB4208(a2, buf);
    v15 = sub_2341CD3C0(*(uint64_t *)buf);
    sub_23421769C(a1, *(_QWORD *)(v15 + 72));
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
  }
LABEL_17:
  v19 = sub_234117B80(0xBu, "SecureChannel");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v24 = *(_QWORD *)(a4 + 16);
    v20 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v20;
    _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "Failed to handle MsgCounterSyncResp message with error:%s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a4;
    v24 = *(_QWORD *)(a4 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(0xBu, 1);
  }
  return result;
}

uint64_t sub_2342175D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_2342170D4(a1 - 8, a2, a3, a4, a5);
}

uint64_t sub_2342175DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v3;
  uint8_t v4[8];
  uint64_t v5;

  if (*(_BYTE *)(a2 + 88))
  {
    sub_233CB4208(a2, &v5);
    *(_DWORD *)(sub_2341CD3C0(v5) + 256) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  else
  {
    v3 = sub_234117B80(0xBu, "SecureChannel");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "MCSP Timeout! On a already released session.", v4, 2u);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
      return sub_2341147D0(0xBu, 1);
  }
  return result;
}

void sub_23421769C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  uint8_t v9[38];
  __int16 v10;
  int v11;
  _BYTE v12[36];
  int v13;
  char v14;

  v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 88);
  do
  {
    v7 = (uint64_t *)(a1 + v4 + 56);
    v6 = *v7;
    if (!*v7)
      goto LABEL_14;
    v11 = 0;
    v12[0] = 0;
    v12[16] = 0;
    v12[32] = 0;
    v13 = 0;
    v14 = 0;
    v10 = 0;
    sub_2341F8564((uint64_t)&v11, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 24), &v10, (uint64_t)v9);
    if (*(_DWORD *)v9)
    {
      v8 = sub_234117B80(0xBu, "SecureChannel");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "MessageCounterManager::ProcessPendingMessages: Failed to decode PacketHeader", v9, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xBu, 1);
    }
    else
    {
      if (!v12[0] || *(_QWORD *)sub_233C25EA4(v12) != a2)
        goto LABEL_14;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, a1 + v4 + 32, a1 + v4 + 56, 0);
    }
    if (*v7)
      sub_23411814C(*v7);
    *v7 = 0;
LABEL_14:
    v4 += 32;
  }
  while (v4 != 192);
}

uint64_t sub_23421780C(uint64_t result, _QWORD *a2)
{
  if (*(_DWORD *)result)
    sub_2342603CC(result);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *a2;
  return result;
}

uint64_t sub_23421783C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*(_BYTE *)(a2 + 88))
    sub_234260464(a1);
  sub_233CB4208(a2, &v9);
  v4 = v9;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) == 3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  }
  else
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    if (v6 != 4)
    {
      v7 = 236;
      v8 = 47;
      goto LABEL_7;
    }
  }
  v7 = 246;
  v8 = 45;
LABEL_7:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/protocols/secure_channel/MessageCounterManager.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_2342178FC(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  if (*(_DWORD *)a1 == 1)
  {
    if (*(_QWORD *)(a1 + 8) == *a3)
    {
      *(_DWORD *)a1 = 2;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 8) = a2;
      v7 = a1 + 16;
      v8 = 0;
      sub_2341313BC(&v7, 0x20uLL);
      v6 = 0;
      v5 = 86;
    }
    else
    {
      v5 = 78;
      v6 = 47;
    }
  }
  else
  {
    v5 = 74;
    v6 = 3;
  }
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/transport/PeerMessageCounter.h";
  *(_DWORD *)(a4 + 16) = v5;
}

_QWORD *sub_23421799C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  *a1 = &off_250516DF0;
  a1[1] = &unk_250516E48;
  a1[2] = &unk_250516E88;
  for (i = 27; i != 3; i -= 4)
  {
    v3 = a1[i];
    if (v3)
      sub_23411814C(v3);
    a1[i] = 0;
  }
  return a1;
}

void sub_2342179F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_250516DF0;
  a1[1] = &unk_250516E48;
  a1[2] = &unk_250516E88;
  v2 = 27;
  while (1)
  {
    v3 = a1[v2];
    if (v3)
      sub_23411814C(v3);
    a1[v2] = 0;
    v2 -= 4;
    if (v2 == 3)
      JUMPOUT(0x23493E704);
  }
}

void sub_234217A5C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  *(a1 - 1) = &off_250516DF0;
  *a1 = &unk_250516E48;
  a1[1] = &unk_250516E88;
  for (i = 26; i != 2; i -= 4)
  {
    v3 = a1[i];
    if (v3)
      sub_23411814C(v3);
    a1[i] = 0;
  }
}

void sub_234217AB0(uint64_t a1)
{
  sub_2342179F4((_QWORD *)(a1 - 8));
}

void sub_234217AB8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  *(a1 - 2) = &off_250516DF0;
  *(a1 - 1) = &unk_250516E48;
  *a1 = &unk_250516E88;
  for (i = 25; i != 1; i -= 4)
  {
    v3 = a1[i];
    if (v3)
      sub_23411814C(v3);
    a1[i] = 0;
  }
}

void sub_234217B0C(uint64_t a1)
{
  sub_2342179F4((_QWORD *)(a1 - 16));
}

_QWORD *sub_234217B14(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  _BOOL4 v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v4))
  {
    v6 = (v5 != 0) | 2;
    v7 = 1;
LABEL_7:
    v6 |= 0x10u;
    goto LABEL_8;
  }
  v8 = HIDWORD(v5);
  v7 = HIDWORD(v5) != 0;
  v9 = v5 != 0;
  if (v4)
    v6 = v9 | 2;
  else
    v6 = v9;
  if (v8)
    goto LABEL_7;
LABEL_8:
  sub_23411512C(a2, *(_BYTE *)(a1 + 8) | *(_BYTE *)(a1 + 9) & 0xF);
  sub_23411512C(a2, v6);
  sub_234115150(a2, *(unsigned __int16 *)(a1 + 12), 2);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      goto LABEL_18;
    if (v7)
      goto LABEL_14;
LABEL_16:
    v11 = v11;
    v12 = a2;
    v13 = 4;
    goto LABEL_17;
  }
  if (!v7)
  {
    sub_234115150(a2, *(_QWORD *)(a1 + 16), 4);
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      goto LABEL_18;
    goto LABEL_16;
  }
  sub_234115150(a2, v10, 8);
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
LABEL_14:
    v12 = a2;
    v13 = 8;
LABEL_17:
    sub_234115150(v12, v11, v13);
  }
LABEL_18:
  sub_234115150(a2, *(unsigned __int16 *)(a1 + 40), 2);
  v14 = *(const void **)(a1 + 32);
  if (v14)
    sub_2341150D8(a2, v14, *(unsigned __int16 *)(a1 + 40));
  v15 = *(const void **)(a1 + 48);
  if (v15)
    sub_2341150D8(a2, v15, *(_QWORD *)(a1 + 56));
  return a2;
}

void sub_234217C5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unsigned int v22;
  char v23;

  v22 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v17 = v6;
  v18 = v6;
  v19 = v7;
  LODWORD(v20) = 0;
  *((_QWORD *)&v20 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v21) = 330;
  if (!v6)
    v19 = 0;
  v23 = 0;
  sub_234114DD8((uint64_t)&v17, &v23);
  sub_234114DD8((uint64_t)&v17, (_BYTE *)(a1 + 10));
  sub_234114EA0((uint64_t)&v17, (_WORD *)(a1 + 12));
  *(_OWORD *)a3 = v20;
  *(_QWORD *)(a3 + 16) = v21;
  if (!*(_DWORD *)a3)
  {
    v8 = v23;
    v9 = v23 & 0xF;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 9) = v9;
    *(_BYTE *)(a1 + 8) = v8 & 0xF0;
    if ((*(_BYTE *)(a1 + 10) & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 10) & 0x10) != 0)
      {
        sub_234114F78((uint64_t)&v17, (_QWORD *)(a1 + 16));
        *(_OWORD *)a3 = v20;
        *(_QWORD *)(a3 + 16) = v21;
        if (*(_DWORD *)a3)
          return;
      }
      else
      {
        sub_234114F0C((uint64_t)&v17, &v22);
        *(_OWORD *)a3 = v20;
        *(_QWORD *)(a3 + 16) = v21;
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)(a1 + 16) = v22;
      }
    }
    *(_QWORD *)(a1 + 24) = 0;
    if ((*(_BYTE *)(a1 + 10) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 10) & 0x10) != 0)
      {
        sub_234114F78((uint64_t)&v17, (_QWORD *)(a1 + 24));
        *(_OWORD *)a3 = v20;
        *(_QWORD *)(a3 + 16) = v21;
        if (*(_DWORD *)a3)
          return;
      }
      else
      {
        sub_234114F0C((uint64_t)&v17, &v22);
        *(_OWORD *)a3 = v20;
        *(_QWORD *)(a3 + 16) = v21;
        if (*(_DWORD *)a3)
          return;
        *(_QWORD *)(a1 + 24) = v22;
      }
    }
    sub_234114EA0((uint64_t)&v17, (_WORD *)(a1 + 40));
    *(_OWORD *)a3 = v20;
    *(_QWORD *)(a3 + 16) = v21;
    if (!*(_DWORD *)a3)
    {
      v10 = *(unsigned __int16 *)(a1 + 40);
      v11 = v19;
      if (v19 >= v10)
      {
        v14 = v18 - v17;
        *(_QWORD *)(a1 + 32) = v6 + v18 - v17;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        if (v11 > v10)
        {
          v15 = v10 + v14;
          *(_QWORD *)(a1 + 48) = v6 + v15;
          *(_QWORD *)(a1 + 56) = (unsigned __int16)(*(_WORD *)(*(_QWORD *)a2 + 24) - v15);
        }
        v16 = *(_QWORD *)(a1 + 64);
        if (v16)
          sub_23411814C(v16);
        v13 = 0;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)a2;
        *(_QWORD *)a2 = 0;
        v12 = 154;
      }
      else
      {
        v12 = 138;
        v13 = 13;
      }
      *(_DWORD *)a3 = v13;
      *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
      *(_DWORD *)(a3 + 16) = v12;
    }
  }
}

uint64_t sub_234217EB4(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_234217EE8(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  uint64_t result;
  uint8_t buf[4];
  _QWORD v21[2];
  char __str[255];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0xFFuLL, "%.*s", *(unsigned __int16 *)(a1 + 40), *(const char **)(a1 + 32));
  if (a2 == 4)
  {
    v5 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "ReceiveInit", buf, 2u);
    }
    if (sub_234114844(4u))
      goto LABEL_10;
  }
  else if (a2 == 1)
  {
    v4 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "SendInit", buf, 2u);
    }
    if (sub_234114844(4u))
LABEL_10:
      sub_2341147D0(0x26u, 4);
  }
  v6 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 9) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    LODWORD(v21[0]) = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "  Proposed Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v8 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int8 *)(a1 + 10);
    *(_DWORD *)buf = 67109120;
    LODWORD(v21[0]) = v9;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "  Range Control: 0x%X", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v10 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int16 *)(a1 + 12);
    *(_DWORD *)buf = 67109120;
    LODWORD(v21[0]) = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "  Proposed Max Block Size: %u", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v12 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109376;
    LODWORD(v21[0]) = HIDWORD(v13);
    WORD2(v21[0]) = 1024;
    *(_DWORD *)((char *)v21 + 6) = v13;
    _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "  Start Offset: 0x%08X%08X", buf, 0xEu);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v14 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109376;
    LODWORD(v21[0]) = HIDWORD(v15);
    WORD2(v21[0]) = 1024;
    *(_DWORD *)((char *)v21 + 6) = v15;
    _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "  Proposed Max Length: 0x%08X%08X", buf, 0xEu);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v16 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    LODWORD(v21[0]) = v17;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "  File Designator Length: %u", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v18 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v21[0] = __str;
    _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "  File Designator: %s", buf, 0xCu);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

uint64_t sub_2342183F0(uint64_t a1, uint64_t a2)
{
  size_t v2;
  size_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2 != *(_QWORD *)(a2 + 56))
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 40);
  if ((_DWORD)v5 != *(unsigned __int16 *)(a2 + 40))
    return 0;
  if (!*(_WORD *)(a1 + 40))
  {
    v6 = 1;
    if (v2)
      goto LABEL_5;
LABEL_7:
    v7 = 1;
    goto LABEL_8;
  }
  v6 = memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), v5) == 0;
  if (!v2)
    goto LABEL_7;
LABEL_5:
  v7 = memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), v2) == 0;
LABEL_8:
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
  {
    return 0;
  }
  v8 = *(unsigned __int16 *)(a1 + 12) == *(unsigned __int16 *)(a2 + 12) && v6;
  return v8 & v7;
}

_QWORD *sub_2342184D8(uint64_t a1, _QWORD *a2)
{
  const void *v4;

  sub_23411512C(a2, *(_BYTE *)(a1 + 8) | *(_BYTE *)(a1 + 9) & 0xF);
  sub_234115150(a2, *(unsigned __int16 *)(a1 + 10), 2);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    sub_2341150D8(a2, v4, *(_QWORD *)(a1 + 24));
  return a2;
}

void sub_234218538(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v16 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v11 = v6;
  v12 = v6;
  v13 = v7;
  LODWORD(v14) = 0;
  *((_QWORD *)&v14 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v15) = 330;
  if (!v6)
    v13 = 0;
  sub_234114DD8((uint64_t)&v11, &v16);
  sub_234114EA0((uint64_t)&v11, (_WORD *)(a1 + 10));
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  if (!*(_DWORD *)a3)
  {
    v8 = v16;
    *(_BYTE *)(a1 + 9) = v16 & 0xF;
    *(_BYTE *)(a1 + 8) = v8 & 0xF0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v9 = v13;
    if (v13)
    {
      *(_QWORD *)(a1 + 16) = v6 + v12 - v11;
      *(_QWORD *)(a1 + 24) = v9;
    }
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      sub_23411814C(v10);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 256;
  }
}

uint64_t sub_234218644(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_234218678(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int v6;
  uint64_t result;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "SendAccept", buf, 2u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v3 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 9) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v9 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "  Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v5 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int16 *)(a1 + 10);
    *(_DWORD *)buf = 67109120;
    v9 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "  Max Block Size: %u", buf, 8u);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

BOOL sub_234218848(uint64_t a1, uint64_t a2)
{
  size_t v2;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a2 + 24))
    return 0;
  v5 = !v2 || memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2) == 0;
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
  {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
    return v5;
  return 0;
}

_QWORD *sub_2342188D0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  _BOOL4 v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const void *v14;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(v4))
  {
    v6 = (v5 != 0) | 2;
    v7 = 1;
LABEL_7:
    v6 |= 0x10u;
    goto LABEL_8;
  }
  v8 = HIDWORD(v5);
  v7 = HIDWORD(v5) != 0;
  v9 = v5 != 0;
  if (v4)
    v6 = v9 | 2;
  else
    v6 = v9;
  if (v8)
    goto LABEL_7;
LABEL_8:
  sub_23411512C(a2, *(_BYTE *)(a1 + 8) | *(_BYTE *)(a1 + 10) & 0xF);
  sub_23411512C(a2, v6);
  sub_234115150(a2, *(unsigned __int16 *)(a1 + 12), 2);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      goto LABEL_18;
    if (v7)
      goto LABEL_14;
LABEL_16:
    v11 = v11;
    v12 = a2;
    v13 = 4;
    goto LABEL_17;
  }
  if (!v7)
  {
    sub_234115150(a2, *(_QWORD *)(a1 + 16), 4);
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11)
      goto LABEL_18;
    goto LABEL_16;
  }
  sub_234115150(a2, v10, 8);
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
LABEL_14:
    v12 = a2;
    v13 = 8;
LABEL_17:
    sub_234115150(v12, v11, v13);
  }
LABEL_18:
  v14 = *(const void **)(a1 + 32);
  if (v14)
    sub_2341150D8(a2, v14, *(_QWORD *)(a1 + 40));
  return a2;
}

double sub_2342189F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  char v19;

  v19 = 0;
  v18 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v13 = v6;
  v14 = v6;
  v15 = v7;
  LODWORD(v16) = 0;
  *((_QWORD *)&v16 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v17) = 330;
  if (!v6)
    v15 = 0;
  sub_234114DD8((uint64_t)&v13, &v19);
  sub_234114DD8((uint64_t)&v13, (_BYTE *)(a1 + 9));
  sub_234114EA0((uint64_t)&v13, (_WORD *)(a1 + 12));
  result = *(double *)&v16;
  *(_OWORD *)a3 = v16;
  *(_QWORD *)(a3 + 16) = v17;
  if (!*(_DWORD *)a3)
  {
    v9 = v19;
    v10 = v19 & 0xF;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 10) = v10;
    *(_BYTE *)(a1 + 8) = v9 & 0xF0;
    if ((*(_BYTE *)(a1 + 9) & 2) != 0)
    {
      if ((*(_BYTE *)(a1 + 9) & 0x10) != 0)
      {
        sub_234114F78((uint64_t)&v13, (_QWORD *)(a1 + 16));
        result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(_QWORD *)(a3 + 16) = v17;
        if (*(_DWORD *)a3)
          return result;
      }
      else
      {
        sub_234114F0C((uint64_t)&v13, &v18);
        result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(_QWORD *)(a3 + 16) = v17;
        if (*(_DWORD *)a3)
          return result;
        *(_QWORD *)(a1 + 16) = v18;
      }
    }
    *(_QWORD *)(a1 + 24) = 0;
    if ((*(_BYTE *)(a1 + 9) & 1) != 0)
    {
      if ((*(_BYTE *)(a1 + 9) & 0x10) != 0)
      {
        sub_234114F78((uint64_t)&v13, (_QWORD *)(a1 + 24));
        result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(_QWORD *)(a3 + 16) = v17;
        if (*(_DWORD *)a3)
          return result;
      }
      else
      {
        sub_234114F0C((uint64_t)&v13, &v18);
        result = *(double *)&v16;
        *(_OWORD *)a3 = v16;
        *(_QWORD *)(a3 + 16) = v17;
        if (*(_DWORD *)a3)
          return result;
        *(_QWORD *)(a1 + 24) = v18;
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v11 = v15;
    if (v15)
    {
      *(_QWORD *)(a1 + 32) = v6 + v14 - v13;
      *(_QWORD *)(a1 + 40) = v11;
    }
    v12 = *(_QWORD *)(a1 + 48);
    if (v12)
      sub_23411814C(v12);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 393;
  }
  return result;
}

uint64_t sub_234218BE0(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_234218C14(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t result;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "ReceiveAccept", buf, 2u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v3 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 10) | *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v13 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "  Transfer Control: 0x%X", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v5 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 9);
    *(_DWORD *)buf = 67109120;
    v13 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "  Range Control: 0x%X", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v7 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int16 *)(a1 + 12);
    *(_DWORD *)buf = 67109120;
    v13 = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "  Max Block Size: %u", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v9 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109376;
    v13 = HIDWORD(v10);
    v14 = 1024;
    v15 = v10;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_DEFAULT, "  Length: 0x%08X%08X", buf, 0xEu);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

BOOL sub_234218EF4(uint64_t a1, uint64_t a2)
{
  size_t v2;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  v5 = !v2 || memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), v2) == 0;
  if (*(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
    || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12))
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return v5;
  return 0;
}

_QWORD *sub_234218F9C(uint64_t a1, _QWORD *a2)
{
  return sub_234115150(a2, *(unsigned int *)(a1 + 8), 4);
}

double sub_234218FB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  double result;
  _QWORD v6[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6[0] = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6[1] = v6[0];
  v7 = v4;
  LODWORD(v8) = 0;
  *((_QWORD *)&v8 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v9) = 330;
  if (!v6[0])
    v7 = 0;
  sub_234114F0C((uint64_t)v6, (_DWORD *)(a1 + 8));
  result = *(double *)&v8;
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v9;
  return result;
}

uint64_t sub_23421902C(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

BOOL sub_234219060(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t sub_234219074(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t result;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  switch(a2)
  {
    case 20:
      v4 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "BlockAckEOF", buf, 2u);
      }
      if (sub_234114844(4u))
        goto LABEL_15;
      break;
    case 19:
      v5 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "BlockAck", buf, 2u);
      }
      if (sub_234114844(4u))
        goto LABEL_15;
      break;
    case 16:
      v3 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "BlockQuery", buf, 2u);
      }
      if (sub_234114844(4u))
LABEL_15:
        sub_2341147D0(0x26u, 4);
      break;
  }
  v6 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v10 = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

_QWORD *sub_234219284(uint64_t a1, _QWORD *a2)
{
  const void *v4;

  sub_234115150(a2, *(unsigned int *)(a1 + 8), 4);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    sub_2341150D8(a2, v4, *(_QWORD *)(a1 + 24));
  return a2;
}

void sub_2342192CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v10 = v6;
  v11 = v6;
  v12 = v7;
  LODWORD(v13) = 0;
  *((_QWORD *)&v13 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v14) = 330;
  if (!v6)
    v12 = 0;
  sub_234114F0C((uint64_t)&v10, (_DWORD *)(a1 + 8));
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 16) = v14;
  if (!*(_DWORD *)a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v8 = v12;
    if (v12)
    {
      *(_QWORD *)(a1 + 16) = v6 + v11 - v10;
      *(_QWORD *)(a1 + 24) = v8;
    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      sub_23411814C(v9);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxMessages.cpp";
    *(_DWORD *)(a3 + 16) = 510;
  }
}

uint64_t sub_2342193B4(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

uint64_t sub_2342193E8(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t result;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2 == 18)
  {
    v4 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "BlockEOF", buf, 2u);
    }
    if (sub_234114844(4u))
      goto LABEL_10;
  }
  else if (a2 == 17)
  {
    v3 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Block", buf, 2u);
    }
    if (sub_234114844(4u))
LABEL_10:
      sub_2341147D0(0x26u, 4);
  }
  v5 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v11 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v7 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109120;
    v11 = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "  Data Length: %u", buf, 8u);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

BOOL sub_234219614(uint64_t a1, uint64_t a2)
{
  size_t v2;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a2 + 24))
    return 0;
  if (v2)
    v5 = memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2) == 0;
  else
    v5 = 1;
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && v5;
}

_QWORD *sub_23421967C(uint64_t a1, _QWORD *a2)
{
  sub_234115150(a2, *(unsigned int *)(a1 + 8), 4);
  sub_234115150(a2, *(_QWORD *)(a1 + 16), 8);
  return a2;
}

double sub_2342196C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  double result;
  _QWORD v7[2];
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v7[0] = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v7[1] = v7[0];
  v8 = v5;
  LODWORD(v9) = 0;
  *((_QWORD *)&v9 + 1) = "src/lib/support/BufferReader.h";
  LODWORD(v10) = 330;
  if (!v7[0])
    v8 = 0;
  sub_234114F0C((uint64_t)v7, (_DWORD *)(a1 + 8));
  sub_234114F78((uint64_t)v7, (_QWORD *)(a1 + 16));
  result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_234219754(uint64_t a1)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8))(a1, v2) + 16);
}

BOOL sub_234219788(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t sub_2342197B4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t result;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "BlockQueryWithSkip", buf, 2u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v3 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)buf = 67109120;
    v9 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "  Block Counter: %u", buf, 8u);
  }
  if (sub_234114844(4u))
    sub_2341147D0(0x26u, 4);
  v5 = sub_234117B80(0x26u, "Automation");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)buf = 67109376;
    v9 = HIDWORD(v6);
    v10 = 1024;
    v11 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "  Bytes To Skip: 0x%08X%08X", buf, 0xEu);
  }
  result = sub_234114844(4u);
  if ((_DWORD)result)
    return sub_2341147D0(0x26u, 4);
  return result;
}

_QWORD *sub_234219980(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516F10;
  v2 = a1[8];
  if (v2)
    sub_23411814C(v2);
  a1[8] = 0;
  return a1;
}

void sub_2342199BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516F10;
  v2 = a1[8];
  if (v2)
    sub_23411814C(v2);
  a1[8] = 0;
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234219A08(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516F78;
  v2 = a1[4];
  if (v2)
    sub_23411814C(v2);
  a1[4] = 0;
  return a1;
}

void sub_234219A44(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516F78;
  v2 = a1[4];
  if (v2)
    sub_23411814C(v2);
  a1[4] = 0;
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234219A90(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516FD0;
  v2 = a1[6];
  if (v2)
    sub_23411814C(v2);
  a1[6] = 0;
  return a1;
}

void sub_234219ACC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250516FD0;
  v2 = a1[6];
  if (v2)
    sub_23411814C(v2);
  a1[6] = 0;
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234219B18(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250517080;
  v2 = a1[4];
  if (v2)
    sub_23411814C(v2);
  a1[4] = 0;
  return a1;
}

void sub_234219B54(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_250517080;
  v2 = a1[4];
  if (v2)
    sub_23411814C(v2);
  a1[4] = 0;
  JUMPOUT(0x23493E704);
}

void sub_234219BA0()
{
  JUMPOUT(0x23493E704);
}

void sub_234219BB4(uint64_t a1, unsigned __int16 *a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  char *v9;
  int *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[24];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[3];
  uint8_t buf[4];
  void *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 41);
  v4 = sub_234117B80(0xCu, "BDX");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v5 = sub_23421DBB4((uint64_t)a2, *a2);
    *(_DWORD *)buf = 136315138;
    v52 = (void *)v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Got an event %s", buf, 0xCu);
  }
  if (sub_234114844(3u))
  {
    sub_23421DBB4((uint64_t)a2, *a2);
    sub_2341147D0(0xCu, 3);
  }
  switch(*a2)
  {
    case 0u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      return;
    case 1u:
      v48 = 0uLL;
      v49 = 0;
      sub_23421A7E0(a1, (uint64_t)a2, (uint64_t)&v48);
      if ((_DWORD)v48)
      {
        v6 = sub_234117B80(0, "NotSpecified");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          v27 = v48;
          v28 = v49;
          v7 = sub_2341083CC((const char **)&v27, 1);
          *(_DWORD *)buf = 136315650;
          v52 = v7;
          v53 = 2080;
          v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
          v55 = 1024;
          v56 = 64;
          _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        if (sub_234114844(1u))
        {
          v25 = v48;
          v26 = v49;
          sub_2341083CC((const char **)&v25, 1);
          sub_2341147D0(0, 1);
        }
      }
      if (a2[8])
        return;
      if (a2[9] != 2)
        return;
      if (*((_BYTE *)a2 + 20) != 20)
        return;
      v48 = 0uLL;
      v49 = 0;
      LODWORD(v23) = 0;
      *((_QWORD *)&v23 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      v24 = 68;
      sub_23421A5A0(a1, &v23, (uint64_t)&v48);
      if (!(_DWORD)v48)
        return;
      v8 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v21 = v48;
        v22 = v49;
        v9 = sub_2341083CC((const char **)&v21, 1);
        *(_DWORD *)buf = 136315650;
        v52 = v9;
        v53 = 2080;
        v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v55 = 1024;
        v56 = 68;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_234114844(1u))
        return;
      v19 = v48;
      v20 = v49;
      sub_2341083CC((const char **)&v19, 1);
      break;
    case 2u:
      sub_23421A500(a1, v50);
      v10 = (int *)v50;
      goto LABEL_21;
    case 4u:
      sub_23421A750(a1, (uint64_t)a2, (uint64_t)v29);
      v10 = (int *)v29;
LABEL_21:
      sub_23421A284(a1, v10);
      return;
    case 9u:
      v11 = sub_234117B80(0xCu, "BDX");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = a2[8];
        *(_DWORD *)buf = 67109120;
        LODWORD(v52) = v12;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Got StatusReport %x", buf, 8u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(0xCu, 1);
      v48 = 0uLL;
      v49 = 0;
      LODWORD(v46) = 172;
      *((_QWORD *)&v46 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      v47 = 52;
      sub_23421A5A0(a1, &v46, (uint64_t)&v48);
      if (!(_DWORD)v48)
        return;
      v13 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v44 = v48;
        v45 = v49;
        v14 = sub_2341083CC((const char **)&v44, 1);
        *(_DWORD *)buf = 136315650;
        v52 = v14;
        v53 = 2080;
        v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v55 = 1024;
        v56 = 52;
        _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_234114844(1u))
        return;
      v42 = v48;
      v43 = v49;
      sub_2341083CC((const char **)&v42, 1);
      break;
    case 0xAu:
      v48 = 0uLL;
      v49 = 0;
      LODWORD(v40) = 172;
      *((_QWORD *)&v40 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      v41 = 55;
      sub_23421A5A0(a1, &v40, (uint64_t)&v48);
      if (!(_DWORD)v48)
        return;
      v15 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v38 = v48;
        v39 = v49;
        v16 = sub_2341083CC((const char **)&v38, 1);
        *(_DWORD *)buf = 136315650;
        v52 = v16;
        v53 = 2080;
        v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v55 = 1024;
        v56 = 55;
        _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_234114844(1u))
        return;
      v36 = v48;
      v37 = v49;
      sub_2341083CC((const char **)&v36, 1);
      break;
    case 0xBu:
      v48 = 0uLL;
      v49 = 0;
      LODWORD(v34) = 50;
      *((_QWORD *)&v34 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      v35 = 58;
      sub_23421A5A0(a1, &v34, (uint64_t)&v48);
      if (!(_DWORD)v48)
        return;
      v17 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v32 = v48;
        v33 = v49;
        v18 = sub_2341083CC((const char **)&v32, 1);
        *(_DWORD *)buf = 136315650;
        v52 = v18;
        v53 = 2080;
        v54 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v55 = 1024;
        v56 = 58;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (!sub_234114844(1u))
        return;
      v30 = v48;
      v31 = v49;
      sub_2341083CC((const char **)&v30, 1);
      break;
    default:
      sub_233CB7AC0();
  }
  sub_2341147D0(0, 1);
}

void sub_23421A284(uint64_t a1, int *a2)
{
  int v2;
  NSObject *v5;
  char *v6;
  __int16 v7;
  NSObject *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  uint8_t buf[4];
  char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2)
  {
    v22 = *(_OWORD *)(a2 + 1);
    LODWORD(v23) = a2[5];
    v5 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v19 = v2;
      v20 = v22;
      v21 = v23;
      v6 = sub_2341083CC((const char **)&v19, 1);
      *(_DWORD *)buf = 136315650;
      v25 = v6;
      v26 = 2080;
      v27 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
      v28 = 1024;
      v29 = 163;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_234114844(1u))
    {
      v16 = v2;
      v17 = v22;
      v18 = v23;
      sub_2341083CC((const char **)&v16, 1);
      sub_2341147D0(0, 1);
    }
    v22 = 0uLL;
    v23 = 0;
    v14 = *(_OWORD *)a2;
    v15 = *((_QWORD *)a2 + 2);
    v7 = sub_23421DEF8((int *)&v14);
    sub_23421C7F8(a1 + 16, v7, (uint64_t)&v22);
    if ((_DWORD)v22)
    {
      v8 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v12 = v22;
        v13 = v23;
        v9 = sub_2341083CC((const char **)&v12, 1);
        *(_DWORD *)buf = 136315650;
        v25 = v9;
        v26 = 2080;
        v27 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v28 = 1024;
        v29 = 164;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_234114844(1u))
      {
        v10 = v22;
        v11 = v23;
        sub_2341083CC((const char **)&v10, 1);
        sub_2341147D0(0, 1);
      }
    }
  }
}

uint64_t sub_23421A500@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 134);
  if (*(_QWORD *)(a1 + 368))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    result = (uint64_t)sub_23421ADD4((_QWORD *)(a1 + 280), a1 + 16, (uint64_t)a2);
    if (!*(_DWORD *)a2)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368), a1 + 280);
  }
  else
  {
    *(_DWORD *)a2 = 3;
    a2[1] = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *((_DWORD *)a2 + 4) = 135;
  }
  return result;
}

void sub_23421A5A0(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  char *v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 143);
  v6 = *(_QWORD *)(a1 + 368);
  if (v6)
  {
    v17 = 0uLL;
    v18 = 0;
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v6 + 24))(&v17, v6, a1 + 280, &v15);
    if ((_DWORD)v17)
    {
      v7 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v13 = v17;
        v14 = v18;
        v8 = sub_2341083CC((const char **)&v13, 1);
        *(_DWORD *)buf = 136315650;
        v20 = v8;
        v21 = 2080;
        v22 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v23 = 1024;
        v24 = 146;
        _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_234114844(1u))
      {
        v11 = v17;
        v12 = v18;
        sub_2341083CC((const char **)&v11, 1);
        sub_2341147D0(0, 1);
      }
    }
    sub_23421AB30(a1);
    v9 = 0;
    v10 = 148;
  }
  else
  {
    v10 = 144;
    v9 = 3;
  }
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

uint64_t sub_23421A750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD v7[2];

  result = sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 153);
  if (*(_QWORD *)(a1 + 368))
  {
    sub_233BF7114(v7, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 368) + 32))(*(_QWORD *)(a1 + 368), a1 + 280, v7);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *(_DWORD *)(a3 + 16) = 154;
  }
  return result;
}

void sub_23421A7E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  __int16 v8;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  __int16 v12;

  sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 113);
  v6 = *(_QWORD *)(a1 + 256);
  if (!v6)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    *(_DWORD *)(a3 + 16) = 115;
    return;
  }
  if (*(unsigned __int16 *)(a2 + 16) | *(unsigned __int16 *)(a2 + 18))
  {
    v7 = *(unsigned __int8 *)(a2 + 20);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 20);
    if (v7 == 64)
    {
      v8 = 0;
      goto LABEL_8;
    }
  }
  v8 = 1;
LABEL_8:
  v12 = v8;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_2341AD108(v6, *(_DWORD *)(a2 + 16), v7, (uint64_t *)(a2 + 8), &v12, a3);
  if (*(_DWORD *)a3)
  {
    v10 = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
    sub_23421A5A0(a1, &v10, (uint64_t)v9);
  }
}

void sub_23421A8BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, __int128 *a5@<X8>)
{
  BOOL v10;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE buf[12];
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 89);
  if (!a2)
  {
    *(_DWORD *)a5 = 3;
    *((_QWORD *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    v12 = 91;
LABEL_20:
    *((_DWORD *)a5 + 4) = v12;
    return;
  }
  if (*(_WORD *)(a3 + 4))
    v10 = 0;
  else
    v10 = *(unsigned __int16 *)(a3 + 6) == 2;
  if (!v10 || *(_BYTE *)a3 != 1)
    goto LABEL_9;
  sub_233CB4208(a2, buf);
  v13 = *(unsigned __int8 *)(*(_QWORD *)buf + 24);
  (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
  sub_233CB4208(a2, buf);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 48))(*(_QWORD *)buf);
  (*(void (**)(_QWORD))(**(_QWORD **)buf + 32))(*(_QWORD *)buf);
  if (!v13)
  {
    *(_DWORD *)a5 = 47;
    *((_QWORD *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    v12 = 98;
    goto LABEL_20;
  }
  if (!v14)
  {
    *(_DWORD *)a5 = 47;
    *((_QWORD *)a5 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    v12 = 99;
    goto LABEL_20;
  }
  *(_BYTE *)(a1 + 336) = v13;
  *(_QWORD *)(a1 + 344) = v14;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  sub_23421E554((_QWORD *)a1, *(_QWORD *)(a1 + 360), 0, 16, 1024, 300000, 50, a5);
  if (!*(_DWORD *)a5)
  {
LABEL_9:
    sub_23421DF34(a1, a2, (unsigned __int8 *)a3, a4, a5);
    return;
  }
  v15 = sub_234117B80(0, "NotSpecified");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v19 = *a5;
    v20 = *((_QWORD *)a5 + 2);
    v16 = sub_2341083CC((const char **)&v19, 1);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v16;
    v22 = 2080;
    v23 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    v24 = 1024;
    v25 = 105;
    _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
  }
  if (sub_234114844(1u))
  {
    v17 = *a5;
    v18 = *((_QWORD *)a5 + 2);
    sub_2341083CC((const char **)&v17, 1);
    sub_2341147D0(0, 1);
  }
}

double sub_23421AB30(uint64_t a1)
{
  uint64_t v2;

  sub_2341B1F64("src/protocols/bdx/BdxTransferDiagnosticLog.cpp", 169);
  sub_23421E67C(a1);
  v2 = *(_QWORD *)(a1 + 256);
  if (v2)
  {
    *(_BYTE *)(a1 + 352) = 1;
    sub_2341AD5A4(v2);
    *(_BYTE *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  return sub_23421B078(a1 + 280);
}

void sub_23421AB84(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 360) + 80))(buf, *(_QWORD *)(a1 + 360), sub_23421AD6C, a1);
  if (!*(_BYTE *)(a1 + 352))
  {
    *(_QWORD *)(a1 + 256) = 0;
    v10 = 0uLL;
    v11 = 0;
    LODWORD(v8) = 172;
    *((_QWORD *)&v8 + 1) = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
    v9 = 201;
    sub_23421A5A0(a1, &v8, (uint64_t)&v10);
    if ((_DWORD)v10)
    {
      v2 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v6 = v10;
        v7 = v11;
        v3 = sub_2341083CC((const char **)&v6, 1);
        *(_DWORD *)buf = 136315650;
        v13 = v3;
        v14 = 2080;
        v15 = "src/protocols/bdx/BdxTransferDiagnosticLog.cpp";
        v16 = 1024;
        v17 = 201;
        _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      if (sub_234114844(1u))
      {
        v4 = v10;
        v5 = v11;
        sub_2341083CC((const char **)&v4, 1);
        sub_2341147D0(0, 1);
      }
    }
  }
}

void sub_23421AD18(_QWORD *a1)
{
  sub_23421AD7C(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23421AD3C(uint64_t a1)
{
  return sub_23421AD7C((_QWORD *)(a1 - 8));
}

void sub_23421AD44(uint64_t a1)
{
  sub_23421AD7C((_QWORD *)(a1 - 8));
  JUMPOUT(0x23493E704);
}

uint64_t sub_23421AD6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 376) + 24))(*(_QWORD *)(a2 + 376));
}

_QWORD *sub_23421AD7C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_250517130;
  a1[1] = &unk_250517180;
  sub_23421AB30((uint64_t)a1);
  *a1 = &unk_250517350;
  a1[1] = &unk_2505173A0;
  v2 = a1[7];
  if (v2)
    sub_23411814C(v2);
  a1[7] = 0;
  return a1;
}

_QWORD *sub_23421ADD4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;

  if (a2)
  {
    if (result[6])
    {
      v4 = 31;
      v5 = 3;
    }
    else
    {
      v6 = *(unsigned __int16 *)(a2 + 88);
      if (v6 > 0x20)
      {
        v4 = 36;
        v5 = 30;
      }
      else
      {
        v7 = *(const void **)(a2 + 80);
        result[6] = a2;
        *((_BYTE *)result + 8) = v6;
        result = memcpy((char *)result + 9, v7, v6);
        v5 = 0;
        v4 = 41;
      }
    }
  }
  else
  {
    v4 = 30;
    v5 = 47;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
  *(_DWORD *)(a3 + 16) = v4;
  return result;
}

void sub_23421AE64(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char v5[2];
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_23421AEF0(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      v8 = 0;
      v9 = 0;
      v5[0] = 16;
      v6 = *(_WORD *)(v4 + 32);
      v7 = *(_OWORD *)(v4 + 16);
      sub_23421BDA8(v4, v5, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)a2 = 3;
      a2[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a2 + 4) = 47;
    }
  }
}

BOOL sub_23421AEF0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;
  int v5;

  result = sub_2341B1F64("src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp", 89);
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_QWORD *)(a1 + 64))
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      v5 = 93;
    }
    else
    {
      *(_DWORD *)a2 = 3;
      *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      v5 = 91;
    }
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
    v5 = 90;
  }
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void sub_23421AF74(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  __int16 v6;
  __int128 v7;
  uint64_t v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23421AEF0(a1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      v7 = *a2;
      v8 = *((_QWORD *)a2 + 2);
      v6 = sub_23421DEF8((int *)&v7);
      sub_23421C7F8(*(_QWORD *)(a1 + 48), v6, (uint64_t)a3);
    }
    else
    {
      *(_DWORD *)a3 = 3;
      a3[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a3 + 4) = 61;
    }
  }
}

void sub_23421B00C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_23421AEF0(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      sub_23421C62C(v4, (uint64_t)a2);
    }
    else
    {
      *(_DWORD *)a2 = 3;
      a2[1] = "src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp";
      *((_DWORD *)a2 + 4) = 70;
    }
  }
}

double sub_23421B078(uint64_t a1)
{
  double result;

  sub_2341B1F64("src/protocols/bdx/BdxTransferProxyDiagnosticLog.cpp", 89);
  if (*(_BYTE *)(a1 + 56) && *(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a1 + 48))
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return result;
}

void sub_23421B0D8()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_23421B0EC(uint64_t a1)
{
  uint64_t v2;

  sub_233CAF22C(&v2, a1 + 9, *(unsigned __int8 *)(a1 + 8));
  return v2;
}

uint64_t sub_23421B118(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

int *sub_23421B120@<X0>(int *result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;

  if (a2)
  {
    if (a3)
    {
      *((_QWORD *)result + 1) = a2;
      *((_QWORD *)result + 2) = a3;
      return sub_2341AEA90(a3, 0x20000, 1u, (uint64_t)result, a4);
    }
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
    v4 = 27;
  }
  else
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
    v4 = 26;
  }
  *(_DWORD *)(a4 + 16) = v4;
  return result;
}

_QWORD *sub_23421B17C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a1[3];
  v10 = a1[1];
  v11 = v5;
  v9 = a1 + 4;
  result = sub_23421B5B4(a1 + 5, &v11, (uint64_t *)&v9, &v10);
  if (result)
  {
    v7 = 0;
    *a2 = result;
    v8 = 41;
  }
  else
  {
    v8 = 38;
    v7 = 11;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferServer.cpp";
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_23421B1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  v4 = a1;
  v5 = a3;
  return sub_23421B5B4((unint64_t *)(a1 + 8), &v6, &v4, &v5);
}

void sub_23421B234(uint64_t a1, void (***a2)(_QWORD))
{
  sub_23421B4F4(a1 + 40, a2);
}

void sub_23421B23C(uint64_t a1, void (***a2)(_QWORD))
{
  sub_23421B4F4(a1 + 8, a2);
}

uint64_t sub_23421B244(uint64_t result)
{
  _QWORD *v1;
  NSObject *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[4];
  char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)(result + 8);
  if (*(_QWORD *)(result + 8))
  {
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      v8 = 0uLL;
      v9 = 0;
      result = (uint64_t)sub_2341AEB50((int *)result, 0x20000, 1u, (uint64_t)&v8);
      if ((_DWORD)v8)
      {
        v2 = sub_234117B80(0, "NotSpecified");
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        {
          v6 = v8;
          v7 = v9;
          v3 = sub_2341083CC((const char **)&v6, 1);
          *(_DWORD *)buf = 136315650;
          v11 = v3;
          v12 = 2080;
          v13 = "src/protocols/bdx/BdxTransferServer.cpp";
          v14 = 1024;
          v15 = 55;
          _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
        }
        result = sub_234114844(1u);
        if ((_DWORD)result)
        {
          v4 = v8;
          v5 = v9;
          sub_2341083CC((const char **)&v4, 1);
          result = sub_2341147D0(0, 1);
        }
      }
      *v1 = 0;
      v1[1] = 0;
    }
  }
  return result;
}

void sub_23421B3B0(_QWORD *a1)
{
  sub_23421B3D4(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23421B3D4(_QWORD *a1)
{
  *a1 = &off_250517248;
  sub_23421B244((uint64_t)a1);
  a1[4] = &unk_250517298;
  sub_234115DFC(a1 + 7, (uint64_t)(a1 + 5), (unsigned int (*)(uint64_t))sub_23421B4DC);
  sub_23421B588(a1 + 5);
  return a1;
}

_QWORD *sub_23421B434(_QWORD *a1)
{
  *a1 = &unk_250517298;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_23421B4DC);
  sub_23421B588(a1 + 1);
  return a1;
}

void sub_23421B480(_QWORD *a1)
{
  *a1 = &unk_250517298;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_23421B4DC);
  sub_23421B588(a1 + 1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_23421B4DC(uint64_t a1, void (***a2)(_QWORD))
{
  sub_23421B4F4(a1, a2);
  return 0;
}

void sub_23421B4F4(uint64_t a1, void (***a2)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_2342604FC();
    v5 = v4;
    *v4 = 0;
    (**a2)(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

_QWORD *sub_23421B588(_QWORD *result)
{
  if (!byte_25615DDA8)
  {
    if (*result)
      sub_2342605A0();
  }
  return result;
}

_QWORD *sub_23421B5B4(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;

  v8 = sub_234114774(0x180uLL);
  v9 = v8;
  if (v8)
  {
    v10 = *a2;
    v11 = *a3;
    v12 = *a4;
    *v8 = &unk_250517350;
    v8[1] = &unk_2505173A0;
    sub_23421B6CC((uint64_t)(v8 + 2));
    v9[32] = 0;
    v9[33] = 0;
    *((_DWORD *)v9 + 68) = 500;
    *((_BYTE *)v9 + 276) = 0;
    *v9 = &off_250517130;
    v9[1] = &unk_250517180;
    v9[35] = &unk_2505171D0;
    v9[41] = 0;
    *((_BYTE *)v9 + 336) = 0;
    v9[43] = 0;
    *((_OWORD *)v9 + 18) = 0u;
    *((_OWORD *)v9 + 19) = 0u;
    *((_BYTE *)v9 + 320) = 0;
    *((_BYTE *)v9 + 352) = 0;
    v9[45] = v12;
    v9[46] = v10;
    v9[47] = v11;
    v13 = sub_234114774(0x18uLL);
    if (v13)
    {
      *v13 = v9;
      v13[1] = a1 + 2;
      v13[2] = 0;
      v13[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v13;
      a1[4] = (unint64_t)v13;
      v14 = a1[1];
      v15 = *a1 + 1;
      *a1 = v15;
      if (v15 > v14)
        a1[1] = v15;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

double sub_23421B6CC(uint64_t a1)
{
  double result;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 58) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 114) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 172) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 232) = 1;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

void sub_23421B740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  *(_WORD *)a2 = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    sub_23411814C(v6);
  *(_WORD *)(a2 + 16) = 95;
  *(_QWORD *)(a2 + 8) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_QWORD *)(a1 + 224) = a3;
    *(_BYTE *)(a1 + 232) = 0;
  }
  if (*(_BYTE *)(a1 + 233) && a3 - *(_QWORD *)(a1 + 224) >= (unint64_t)*(unsigned int *)(a1 + 216))
  {
    *(_WORD *)a2 = 11;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
      sub_23411814C(v7);
    *(_QWORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 16) = 95;
    *(_BYTE *)(a1 + 2) = 8;
    *(_BYTE *)(a1 + 233) = 0;
  }
  else
  {
    switch(*(_WORD *)a1)
    {
      case 1:
        v8 = *(unsigned int *)(a1 + 176) | ((unint64_t)*(unsigned __int16 *)(a1 + 180) << 32);
        v9 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        *(_WORD *)a2 = 1;
        v10 = *(_QWORD *)(a2 + 8);
        if (v10)
          sub_23411814C(v10);
        *(_QWORD *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 16) = v8;
        *(_BYTE *)(a2 + 20) = BYTE4(v8);
        *(_QWORD *)(a1 + 224) = a3;
        break;
      case 2:
        v23 = *(_OWORD *)(a1 + 56);
        v24 = *(_OWORD *)(a1 + 72);
        v25 = *(_OWORD *)(a1 + 88);
        v26 = *(_QWORD *)(a1 + 104);
        v11 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        v12 = 2;
        goto LABEL_18;
      case 3:
        v23 = *(_OWORD *)(a1 + 112);
        v24 = *(_OWORD *)(a1 + 128);
        *(_QWORD *)&v25 = *(_QWORD *)(a1 + 144);
        v11 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        v12 = 3;
        goto LABEL_18;
      case 4:
        v23 = *(_OWORD *)(a1 + 152);
        *(_QWORD *)&v24 = *(_QWORD *)(a1 + 168);
        v11 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = 0;
        v12 = 4;
LABEL_18:
        *(_WORD *)a2 = v12;
        v13 = *(_QWORD *)(a2 + 8);
        if (v13)
          sub_23411814C(v13);
        *(_QWORD *)(a2 + 8) = v11;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v24;
        *(_OWORD *)(a2 + 48) = v25;
        *(_QWORD *)(a2 + 64) = v26;
        break;
      case 5:
        v14 = 5;
        goto LABEL_27;
      case 6:
        v15 = *(_QWORD *)(a1 + 184);
        *(_WORD *)a2 = 6;
        v16 = *(_QWORD *)(a2 + 8);
        if (v16)
          sub_23411814C(v16);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = v15;
        break;
      case 7:
        v14 = 7;
        goto LABEL_27;
      case 8:
        v14 = 8;
LABEL_27:
        *(_WORD *)a2 = v14;
        goto LABEL_28;
      case 9:
        v18 = *(_WORD *)(a1 + 48);
        v19 = 9;
        goto LABEL_33;
      case 0xA:
        v18 = *(_WORD *)(a1 + 48);
        v19 = 10;
LABEL_33:
        *(_WORD *)a2 = v19;
        v20 = *(_QWORD *)(a2 + 8);
        if (v20)
          sub_23411814C(v20);
        *(_QWORD *)(a2 + 8) = 0;
        *(_WORD *)(a2 + 16) = v18;
        break;
      default:
        *(_WORD *)a2 = 0;
LABEL_28:
        v17 = *(_QWORD *)(a2 + 8);
        if (v17)
          sub_23411814C(v17);
        *(_QWORD *)(a2 + 8) = 0;
        *(_WORD *)(a2 + 16) = 95;
        break;
    }
    if (!*(_WORD *)a2 && *(_BYTE *)(a1 + 2) == 8)
    {
      v21 = *(_WORD *)(a1 + 48);
      *(_WORD *)a2 = 10;
      v22 = *(_QWORD *)(a2 + 8);
      if (v22)
        sub_23411814C(v22);
      *(_QWORD *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 16) = v21;
    }
    *(_WORD *)a1 = 0;
  }
}

uint64_t sub_23421B9B4@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = a2;
  return result;
}

uint64_t sub_23421B9C4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = *a2;
  *a2 = 0;
  *(_DWORD *)(a3 + 16) = result;
  *(_BYTE *)(a3 + 20) = BYTE4(result);
  return result;
}

__n128 sub_23421B9E8@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;

  *(_WORD *)a3 = 2;
  *(_QWORD *)(a3 + 8) = *a2;
  *a2 = 0;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a3 + 48) = result;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 48);
  return result;
}

__n128 sub_23421BA18@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v4;
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 32);
  *(_WORD *)a3 = 3;
  *(_QWORD *)(a3 + 8) = *a2;
  *a2 = 0;
  return result;
}

uint64_t sub_23421BA40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

__n128 sub_23421BA50@<Q0>(__n128 *a1@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;

  a3->n128_u16[0] = 4;
  a3->n128_u64[1] = *a2;
  *a2 = 0;
  result = *a1;
  a3[1] = *a1;
  a3[2].n128_u64[0] = a1[1].n128_u64[0];
  return result;
}

void sub_23421BA78(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint8_t v13[8];
  uint64_t (**v14)();
  char v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 2))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a5 + 16) = 139;
  }
  else
  {
    *(_BYTE *)(a1 + 3) = a2;
    *(_DWORD *)(a1 + 216) = a4;
    *(_BYTE *)(a1 + 4) = *a3;
    v7 = *((_WORD *)a3 + 1);
    *(_WORD *)(a1 + 6) = v7;
    v8 = *((_QWORD *)a3 + 1);
    *(_QWORD *)(a1 + 16) = v8;
    v9 = *((_QWORD *)a3 + 2);
    *(_QWORD *)(a1 + 24) = v9;
    v14 = off_250516F10;
    v15 = *a3;
    v16 = 0;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    v20 = *((_QWORD *)a3 + 3);
    v21 = *((_WORD *)a3 + 16);
    v10 = *((_QWORD *)a3 + 6);
    v22 = *((_QWORD *)a3 + 5);
    v23 = v10;
    v24 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 0;
    sub_23421BC2C((uint64_t)&v14, (uint64_t *)(a1 + 40), a5);
    if (!*(_DWORD *)a5)
    {
      if (*(_BYTE *)(a1 + 3) == 1)
        v11 = 1;
      else
        v11 = 4;
      v12 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v13, 2u);
      }
      if (sub_234114844(4u))
        sub_2341147D0(0x26u, 4);
      sub_234217EE8((uint64_t)&v14, v11);
      *(_BYTE *)(a1 + 2) = 2;
      *(_BYTE *)(a1 + 233) = 1;
      *(_WORD *)a1 = 1;
      *(_DWORD *)(a1 + 176) = 0x20000;
      *(_BYTE *)(a1 + 180) = v11;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      *(_DWORD *)(a5 + 16) = 176;
    }
    v14 = off_250516F10;
    if (v24)
      sub_23411814C(v24);
  }
}

void sub_23421BC2C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_234118674(v6 + 16, 0x26u, &v13);
  v7 = *(_QWORD *)(v13 + 8);
  v8 = v7 + *(_QWORD *)(v13 + 24);
  v9 = sub_23411828C(v13);
  if (v9 >= v6)
    v10 = v6;
  else
    v10 = v9;
  v14 = v8;
  v15 = v10;
  v16 = 0;
  if (!v7)
    v15 = 0;
  v17 = v13;
  if (v13)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 8))(a1, &v14);
    sub_234118A50(&v14, &v17, &v13);
    if (*a2)
      sub_23411814C(*a2);
    v11 = v13;
    *a2 = v13;
    if (v11)
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      v12 = 43;
    }
    else
    {
      *(_DWORD *)a3 = 11;
      *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
      v12 = 41;
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v12 = 35;
  }
  *(_DWORD *)(a3 + 16) = v12;
  if (v17)
    sub_23411814C(v17);
}

uint64_t sub_23421BD60@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, __int16 a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v6;
  int v7;

  v6 = *(unsigned __int8 *)(result + 2);
  if (*(_BYTE *)(result + 2))
  {
    v7 = 182;
    v6 = 3;
  }
  else
  {
    *(_BYTE *)(result + 3) = a2;
    *(_DWORD *)(result + 216) = a5;
    *(_BYTE *)(result + 4) = a3;
    *(_WORD *)(result + 6) = a4;
    v7 = 192;
    *(_BYTE *)(result + 2) = 1;
  }
  *(_DWORD *)a6 = v6;
  *(_QWORD *)(a6 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a6 + 16) = v7;
  return result;
}

void sub_23421BDA8(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t v15[8];
  uint64_t (**v16)();
  char v17;
  char v18;
  __int16 v19;
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 2) != 3)
  {
    v5 = 201;
    goto LABEL_5;
  }
  if (*(_WORD *)a1)
  {
    v5 = 202;
LABEL_5:
    v6 = 3;
LABEL_6:
    *(_DWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if ((*a2 & *(_BYTE *)(a1 + 56)) == 0)
  {
    v5 = 206;
    goto LABEL_12;
  }
  v7 = *((unsigned __int16 *)a2 + 1);
  if (v7 > *(unsigned __int16 *)(a1 + 58))
  {
    v5 = 207;
LABEL_12:
    v6 = 47;
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 32) = v7;
  if (*(_BYTE *)(a1 + 3) == 1)
  {
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    v16 = off_250516FD0;
    v18 = 0;
    v17 = *a2;
    LOBYTE(v19) = *(_BYTE *)(a1 + 9);
    v20 = *((_WORD *)a2 + 1);
    v21 = *(_OWORD *)(a2 + 8);
    v8 = *((_QWORD *)a2 + 4);
    v22 = *((_QWORD *)a2 + 3);
    v23 = v8;
    v24 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_23421BC2C((uint64_t)&v16, (uint64_t *)(a1 + 40), a3);
    v9 = 0;
    v10 = *(_DWORD *)a3;
    if (!*(_DWORD *)a3)
    {
      v11 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v15, 2u);
      }
      if (sub_234114844(4u))
        sub_2341147D0(0x26u, 4);
      v9 = 5;
      sub_234218C14((uint64_t)&v16);
    }
    v16 = off_250516FD0;
    v12 = v24;
    if (v24)
LABEL_21:
      sub_23411814C(v12);
  }
  else
  {
    v16 = off_250516F78;
    v17 = *a2;
    v18 = *(_BYTE *)(a1 + 9);
    v19 = *((_WORD *)a2 + 1);
    v13 = *((_QWORD *)a2 + 4);
    *(_QWORD *)&v21 = *((_QWORD *)a2 + 3);
    *((_QWORD *)&v21 + 1) = v13;
    v22 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    sub_23421BC2C((uint64_t)&v16, (uint64_t *)(a1 + 40), a3);
    v10 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      v9 = 0;
    }
    else
    {
      v14 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v15, 2u);
      }
      if (sub_234114844(4u))
        sub_2341147D0(0x26u, 4);
      v9 = 2;
      sub_234218678((uint64_t)&v16);
    }
    v16 = off_250516F78;
    v12 = v22;
    if (v22)
      goto LABEL_21;
  }
  if (!v10)
  {
    *(_BYTE *)(a1 + 2) = 4;
    if (*(_BYTE *)(a1 + 3) == 1)
    {
      if (*(_BYTE *)(a1 + 8) != 32)
      {
LABEL_38:
        v6 = 0;
        *(_WORD *)a1 = 1;
        *(_DWORD *)(a1 + 176) = 0x20000;
        *(_BYTE *)(a1 + 180) = v9;
        v5 = 261;
        goto LABEL_6;
      }
    }
    else if (*(_BYTE *)(a1 + 3) || *(_BYTE *)(a1 + 8) != 16)
    {
      goto LABEL_38;
    }
    *(_BYTE *)(a1 + 233) = 1;
    goto LABEL_38;
  }
}

void sub_23421C09C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  NSObject *v5;
  int v6;
  uint8_t v7[16];
  void *v8;
  int v9;

  if (*(_BYTE *)(a1 + 2) != 4)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v4 = 268;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 3))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v4 = 269;
LABEL_5:
    *(_DWORD *)(a2 + 16) = v4;
    return;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v4 = 270;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 233))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v4 = 271;
    goto LABEL_5;
  }
  v8 = &unk_250517028;
  v9 = *(_DWORD *)(a1 + 212);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_23421BC2C((uint64_t)&v8, (uint64_t *)(a1 + 40), a2);
  if (!*(_DWORD *)a2)
  {
    v5 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v7, 2u);
    }
    if (sub_234114844(4u))
      sub_2341147D0(0x26u, 4);
    sub_234219074((uint64_t)&v8, 16);
    *(_BYTE *)(a1 + 233) = 1;
    v6 = *(_DWORD *)(a1 + 212);
    *(_DWORD *)(a1 + 208) = v6;
    *(_DWORD *)(a1 + 212) = v6 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(_BYTE *)(a1 + 180) = 16;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v4 = 288;
    goto LABEL_5;
  }
}

void sub_23421C24C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  NSObject *v6;
  int v7;
  uint8_t v8[8];
  void *v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 2) != 4)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 295;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 3))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 296;
LABEL_5:
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 297;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 233))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 298;
    goto LABEL_5;
  }
  v9 = &unk_2505170D8;
  v10 = *(_DWORD *)(a1 + 212);
  v11 = *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_23421BC2C((uint64_t)&v9, (uint64_t *)(a1 + 40), a3);
  if (!*(_DWORD *)a3)
  {
    v6 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v8, 2u);
    }
    if (sub_234114844(4u))
      sub_2341147D0(0x26u, 4);
    sub_2342197B4((uint64_t)&v9);
    *(_BYTE *)(a1 + 233) = 1;
    v7 = *(_DWORD *)(a1 + 212);
    *(_DWORD *)(a1 + 208) = v7;
    *(_DWORD *)(a1 + 212) = v7 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(_BYTE *)(a1 + 180) = 21;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 316;
    goto LABEL_5;
  }
}

void sub_23421C404(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  NSObject *v11;
  int v12;
  uint8_t v13[8];
  uint64_t (**v14)();
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 2) != 4)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 321;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 3) != 1)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 322;
    goto LABEL_7;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 323;
LABEL_7:
    *(_DWORD *)(a3 + 16) = v5;
    return;
  }
  if (*(_BYTE *)(a1 + 233))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 324;
    goto LABEL_7;
  }
  v7 = *a2;
  if (!*a2 || (v8 = a2[1], v8 > *(unsigned __int16 *)(a1 + 32)))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v5 = 327;
    goto LABEL_7;
  }
  v14 = off_250517080;
  v17 = v8;
  v18 = 0;
  v15 = *(_DWORD *)(a1 + 204);
  v16 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_23421BC2C((uint64_t)&v14, (uint64_t *)(a1 + 40), a3);
  if (!*(_DWORD *)a3)
  {
    v9 = *((unsigned __int8 *)a2 + 16);
    if (*((_BYTE *)a2 + 16))
      v10 = 18;
    else
      v10 = 17;
    v11 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v13, 2u);
    }
    if (sub_234114844(4u))
      sub_2341147D0(0x26u, 4);
    sub_2342193E8((uint64_t)&v14, v10);
    if (v9)
      *(_BYTE *)(a1 + 2) = 5;
    *(_BYTE *)(a1 + 233) = 1;
    v12 = *(_DWORD *)(a1 + 204);
    *(_DWORD *)(a1 + 200) = v12;
    *(_DWORD *)(a1 + 204) = v12 + 1;
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(_BYTE *)(a1 + 180) = v10;
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a3 + 16) = 353;
  }
  v14 = off_250517080;
  if (v18)
    sub_23411814C(v18);
}

void sub_23421C62C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  int v8;
  char v9;
  uint8_t v10[16];
  void *v11;
  int v12;

  if (*(_BYTE *)(a1 + 3))
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v3 = 358;
LABEL_22:
    *(_DWORD *)(a2 + 16) = v3;
    return;
  }
  v5 = *(unsigned __int8 *)(a1 + 2);
  if ((v5 | 2) != 6)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v3 = 360;
    goto LABEL_22;
  }
  if (*(_WORD *)a1)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v3 = 361;
    goto LABEL_22;
  }
  v11 = &unk_250517028;
  v12 = *(_DWORD *)(a1 + 200);
  if (v5 == 6)
    v6 = 20;
  else
    v6 = 19;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  sub_23421BC2C((uint64_t)&v11, (uint64_t *)(a1 + 40), a2);
  if (!*(_DWORD *)a2)
  {
    v7 = sub_234117B80(0x26u, "Automation");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Sending BDX Message", v10, 2u);
    }
    if (sub_234114844(4u))
      sub_2341147D0(0x26u, 4);
    sub_234219074((uint64_t)&v11, v6);
    v8 = *(unsigned __int8 *)(a1 + 2);
    if (v8 == 6)
    {
      v9 = 0;
      *(_BYTE *)(a1 + 2) = 7;
    }
    else
    {
      if (v8 != 4 || *(_BYTE *)(a1 + 8) != 16)
        goto LABEL_21;
      *(_DWORD *)(a1 + 208) = v12 + 1;
      v9 = 1;
    }
    *(_BYTE *)(a1 + 233) = v9;
LABEL_21:
    *(_WORD *)a1 = 1;
    *(_DWORD *)(a1 + 176) = 0x20000;
    *(_BYTE *)(a1 + 180) = v6;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    v3 = 392;
    goto LABEL_22;
  }
}

void sub_23421C7F8(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  int v8;
  int v9;

  v4 = *(unsigned __int8 *)(a1 + 2);
  v5 = v4 > 8;
  v6 = (1 << v4) & 0x181;
  if (v5 || v6 == 0)
  {
    sub_23421C860(a1, a2);
    v9 = 0;
    v8 = 403;
  }
  else
  {
    v8 = 399;
    v9 = 3;
  }
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

void sub_23421C860(uint64_t a1, __int16 a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  _BYTE buf[22];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(a1 + 48) = a2;
  sub_2341AC914((uint64_t)&v17, 1, 0x20000, a2);
  v3 = sub_2341ACB18(&v17);
  sub_234118674(v3 + 16, 0x26u, buf);
  v4 = *(_QWORD *)(*(_QWORD *)buf + 8);
  v5 = v4 + *(_QWORD *)(*(_QWORD *)buf + 24);
  v6 = sub_23411828C(*(uint64_t *)buf);
  if (v6 >= v3)
    v7 = v3;
  else
    v7 = v6;
  v13 = v5;
  v14 = v7;
  v15 = 0;
  if (!v4)
    v14 = 0;
  v16 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    sub_2341ACAAC(&v17, &v13);
    sub_234118A50(&v13, &v16, (uint64_t *)buf);
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      sub_23411814C(v8);
    v9 = *(_QWORD *)buf;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)buf;
    if (v9)
    {
      *(_WORD *)a1 = 1;
      *(_DWORD *)(a1 + 176) = 0;
      *(_BYTE *)(a1 + 180) = 64;
    }
    else
    {
      v10 = sub_234117B80(0xCu, "BDX");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 11;
        *(_QWORD *)&buf[8] = "src/protocols/bdx/BdxTransferSession.cpp";
        *(_DWORD *)&buf[16] = 884;
        v11 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "PrepareStatusReport";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "%s: error preparing message: %s", buf, 0x16u);
      }
      if (sub_234114844(1u))
      {
        *(_DWORD *)buf = 11;
        *(_QWORD *)&buf[8] = "src/protocols/bdx/BdxTransferSession.cpp";
        *(_DWORD *)&buf[16] = 884;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0xCu, 1);
      }
      *(_WORD *)a1 = 10;
    }
    v12 = v16;
    *(_BYTE *)(a1 + 2) = 8;
    *(_BYTE *)(a1 + 233) = 0;
    if (v12)
      sub_23411814C(v12);
  }
  else
  {
    *(_WORD *)a1 = 10;
    *(_BYTE *)(a1 + 2) = 8;
    *(_BYTE *)(a1 + 233) = 0;
  }
  if (v18)
    sub_23411814C(v18);
}

void sub_23421CA90(uint64_t a1)
{
  uint64_t v2;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  *(_WORD *)(a1 + 6) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    sub_23411814C(v2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 232) = 1;
}

void sub_23421CAF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v11;
  uint64_t v12;

  v6 = *a3;
  if (!*a3)
  {
    v7 = 434;
    v8 = 47;
    goto LABEL_5;
  }
  if (*(_WORD *)(a2 + 4))
  {
    v7 = 448;
    v8 = 42;
LABEL_5:
    *(_DWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
    *(_DWORD *)(a5 + 16) = v7;
    return;
  }
  if (*(_WORD *)(a2 + 6) == 2)
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v12 = v6;
    *a3 = 0;
    sub_23421CC00((_WORD *)a1, (unsigned __int8 *)a2, &v12, a5);
    if (v12)
      sub_23411814C(v12);
    if (!*(_DWORD *)a5)
    {
      v8 = 0;
      *(_QWORD *)(a1 + 224) = a4;
LABEL_18:
      v7 = 451;
      goto LABEL_5;
    }
  }
  else
  {
    v7 = 448;
    v8 = 42;
    if (*(_WORD *)(a2 + 6) || *(_BYTE *)a2 != 64)
      goto LABEL_5;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v11 = v6;
    *a3 = 0;
    sub_23421CE60(a1, &v11, (_QWORD *)a5);
    if (v11)
      sub_23411814C(v11);
    if (!*(_DWORD *)a5)
    {
      v8 = 0;
      goto LABEL_18;
    }
  }
}

void sub_23421CC00(_WORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf[16];

  if (*a3)
  {
    if (*a1)
    {
      v6 = 458;
      v7 = 3;
    }
    else
    {
      v9 = *a2;
      v10 = sub_234117B80(0x26u, "Automation");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Handling received BDX Message", buf, 2u);
      }
      if (sub_234114844(4u))
        sub_2341147D0(0x26u, 4);
      v6 = 497;
      v7 = 42;
      switch(v9)
      {
        case 1:
        case 4:
          v20 = *a3;
          *a3 = 0;
          sub_23421CF5C((uint64_t)a1, v9, &v20);
          v11 = v20;
          if (!v20)
            goto LABEL_12;
          goto LABEL_11;
        case 2:
          v19 = *a3;
          *a3 = 0;
          sub_23421D0FC((uint64_t)a1, &v19);
          v11 = v19;
          if (!v19)
            goto LABEL_12;
          goto LABEL_11;
        case 5:
          v18 = *a3;
          *a3 = 0;
          sub_23421D268((uint64_t)a1, &v18);
          v11 = v18;
          if (!v18)
            goto LABEL_12;
          goto LABEL_11;
        case 16:
          v17 = *a3;
          *a3 = 0;
          sub_23421D3E4((uint64_t)a1, &v17);
          v11 = v17;
          if (!v17)
            goto LABEL_12;
          goto LABEL_11;
        case 17:
          v15 = *a3;
          *a3 = 0;
          sub_23421D5D0((uint64_t)a1, &v15);
          v11 = v15;
          if (!v15)
            goto LABEL_12;
          goto LABEL_11;
        case 18:
          v14 = *a3;
          *a3 = 0;
          sub_23421D760((uint64_t)a1, &v14);
          v11 = v14;
          if (!v14)
            goto LABEL_12;
          goto LABEL_11;
        case 19:
          v13 = *a3;
          *a3 = 0;
          sub_23421D8D4((uint64_t)a1, &v13);
          v11 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_11;
        case 20:
          v12 = *a3;
          *a3 = 0;
          sub_23421D9CC((uint64_t)a1, &v12);
          v11 = v12;
          if (!v12)
            goto LABEL_12;
          goto LABEL_11;
        case 21:
          v16 = *a3;
          *a3 = 0;
          sub_23421D4D4((uint64_t)a1, &v16);
          v11 = v16;
          if (!v16)
            goto LABEL_12;
LABEL_11:
          sub_23411814C(v11);
LABEL_12:
          v7 = 0;
          v6 = 500;
          break;
        default:
          break;
      }
    }
  }
  else
  {
    v6 = 457;
    v7 = 47;
  }
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a4 + 16) = v6;
}

void sub_23421CE60(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*a2)
  {
    *(_BYTE *)(a1 + 2) = 8;
    *(_BYTE *)(a1 + 233) = 0;
    sub_23410FAEC(&v9);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v8 = *a2;
    *a2 = 0;
    sub_2341AC944((uint64_t)&v9, &v8, (uint64_t)a3);
    if (v8)
      sub_23411814C(v8);
    v8 = 0;
    if (!*(_DWORD *)a3)
    {
      if (*(_DWORD *)((char *)&v9 + 2) == 0x20000)
      {
        v6 = 0;
        *(_WORD *)(a1 + 48) = HIWORD(v9);
        *(_WORD *)a1 = 9;
        v7 = 525;
      }
      else
      {
        v7 = 519;
        v6 = 42;
      }
      *(_DWORD *)a3 = v6;
      a3[1] = "src/protocols/bdx/BdxTransferSession.cpp";
      *((_DWORD *)a3 + 4) = v7;
    }
    if (v10)
      sub_23411814C(v10);
  }
  else
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/protocols/bdx/BdxTransferSession.cpp";
    *((_DWORD *)a3 + 4) = 512;
  }
}

void sub_23421CF5C(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t (**v14)();
  __int16 v15;
  char v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 2) != 1)
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 3) == 1)
  {
    if (a2 != 4)
    {
LABEL_4:
      sub_23421C860(a1, 24);
      return;
    }
  }
  else if (a2 != 1)
  {
    goto LABEL_4;
  }
  v14 = off_250516F10;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  memset(v13, 0, sizeof(v13));
  sub_234118648(*a3);
  v12 = *a3;
  sub_234217C5C((uint64_t)&v14, (uint64_t)&v12, (uint64_t)v13);
  if (v12)
    sub_23411814C(v12);
  v12 = 0;
  if (LODWORD(v13[0]))
  {
    sub_23421C860(a1, 22);
  }
  else
  {
    sub_23421DAC0(a1, &v15);
    *(_BYTE *)(a1 + 9) = 0;
    v6 = v17;
    v7 = *(unsigned __int16 *)(a1 + 6);
    if (v17 < v7)
      LOWORD(v7) = v17;
    *(_WORD *)(a1 + 32) = v7;
    v8 = v18;
    v9 = v19;
    *(_QWORD *)(a1 + 16) = v18;
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 56) = v15;
    *(_WORD *)(a1 + 58) = v6;
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v20;
    *(_WORD *)(a1 + 88) = v21;
    v10 = v23;
    *(_QWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 104) = v10;
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      sub_23411814C(v11);
    *(_QWORD *)(a1 + 40) = *a3;
    *a3 = 0;
    *(_WORD *)a1 = 2;
    *(_BYTE *)(a1 + 2) = 3;
    sub_234217EE8((uint64_t)&v14, a2);
  }
  v14 = off_250516F10;
  if (v24)
    sub_23411814C(v24);
}

void sub_23421D0FC(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  _QWORD v9[3];
  uint64_t (**v10)();
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 3) == 1 && *(_BYTE *)(a1 + 2) == 2)
  {
    v10 = off_250516F78;
    v11 = 0;
    v13 = 0;
    v14 = 0;
    v12 = 0;
    memset(v9, 0, sizeof(v9));
    sub_234118648(*a2);
    v8 = *a2;
    sub_234218538((uint64_t)&v10, (uint64_t)&v8, (uint64_t)v9);
    if (v8)
      sub_23411814C(v8);
    v8 = 0;
    if (LODWORD(v9[0]))
    {
      sub_23421C860(a1, 22);
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      sub_23421DB18(a1, (unsigned __int8 *)&v11, (uint64_t)v7);
      if (!LODWORD(v7[0]))
      {
        v4 = HIWORD(v11);
        *(_WORD *)(a1 + 32) = HIWORD(v11);
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a1 + 8);
        *(_WORD *)(a1 + 114) = v4;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 16);
        v5 = v13;
        *(_QWORD *)(a1 + 136) = v12;
        *(_QWORD *)(a1 + 144) = v5;
        v6 = *(_QWORD *)(a1 + 40);
        if (v6)
          sub_23411814C(v6);
        *(_QWORD *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 3;
        *(_BYTE *)(a1 + 233) = *(_BYTE *)(a1 + 8) == 32;
        *(_BYTE *)(a1 + 2) = 4;
        sub_234218678((uint64_t)&v10);
      }
    }
    v10 = off_250516F78;
    if (v14)
      sub_23411814C(v14);
  }
  else
  {
    sub_23421C860(a1, 24);
  }
}

void sub_23421D268(uint64_t a1, uint64_t *a2)
{
  __int16 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  _QWORD v10[3];
  uint64_t (**v11)();
  __int16 v12;
  char v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 3) || *(_BYTE *)(a1 + 2) != 2)
  {
    sub_23421C860(a1, 24);
  }
  else
  {
    v11 = off_250516FD0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    memset(v10, 0, sizeof(v10));
    sub_234118648(*a2);
    v9 = *a2;
    sub_2342189F4((uint64_t)&v11, (uint64_t)&v9, (uint64_t)v10);
    if (v9)
      sub_23411814C(v9);
    v9 = 0;
    if (LODWORD(v10[0]))
    {
      sub_23421C860(a1, 22);
    }
    else
    {
      memset(v8, 0, sizeof(v8));
      sub_23421DB18(a1, (unsigned __int8 *)&v12, (uint64_t)v8);
      if (!LODWORD(v8[0]))
      {
        v4 = v14;
        *(_WORD *)(a1 + 32) = v14;
        v5 = v15;
        *(_OWORD *)(a1 + 16) = v15;
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(a1 + 8);
        *(_WORD *)(a1 + 114) = v4;
        *(_OWORD *)(a1 + 120) = v5;
        v6 = *((_QWORD *)&v16 + 1);
        *(_QWORD *)(a1 + 136) = v16;
        *(_QWORD *)(a1 + 144) = v6;
        v7 = *(_QWORD *)(a1 + 40);
        if (v7)
          sub_23411814C(v7);
        *(_QWORD *)(a1 + 40) = *a2;
        *a2 = 0;
        *(_WORD *)a1 = 3;
        *(_BYTE *)(a1 + 233) = *(_BYTE *)(a1 + 8) == 16;
        *(_BYTE *)(a1 + 2) = 4;
        sub_234218C14((uint64_t)&v11);
      }
    }
    v11 = off_250516FD0;
    if (v17)
      sub_23411814C(v17);
  }
}

void sub_23421D3E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  _QWORD v7[3];
  void *v8;
  int v9;

  if (*(_BYTE *)(a1 + 3) != 1 || *(_BYTE *)(a1 + 2) != 4 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v8 = &unk_250517028;
  v9 = 0;
  memset(v7, 0, sizeof(v7));
  v6 = *a2;
  *a2 = 0;
  sub_234218FB0((uint64_t)&v8, (uint64_t)&v6, (uint64_t)v7);
  if (v6)
    sub_23411814C(v6);
  v6 = 0;
  if (LODWORD(v7[0]))
  {
    v3 = a1;
    v4 = 22;
  }
  else
  {
    v5 = v9;
    if (v9 == *(_DWORD *)(a1 + 204))
    {
      *(_WORD *)a1 = 5;
      *(_BYTE *)(a1 + 233) = 0;
      *(_DWORD *)(a1 + 208) = v5;
      sub_234219074((uint64_t)&v8, 16);
      return;
    }
    v3 = a1;
    v4 = 23;
  }
  sub_23421C860(v3, v4);
}

void sub_23421D4D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;
  uint64_t v6;
  _QWORD v7[3];
  void *v8;
  int v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 3) != 1 || *(_BYTE *)(a1 + 2) != 4 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v8 = &unk_2505170D8;
  v9 = 0;
  v10 = 0;
  memset(v7, 0, sizeof(v7));
  v6 = *a2;
  *a2 = 0;
  sub_2342196C0((uint64_t)&v8, (uint64_t)&v6, (uint64_t)v7);
  if (v6)
    sub_23411814C(v6);
  v6 = 0;
  if (LODWORD(v7[0]))
  {
    v3 = a1;
    v4 = 22;
  }
  else
  {
    v5 = v9;
    if (v9 == *(_DWORD *)(a1 + 204))
    {
      *(_WORD *)a1 = 6;
      *(_BYTE *)(a1 + 233) = 0;
      *(_DWORD *)(a1 + 208) = v5;
      *(_QWORD *)(a1 + 184) = v10;
      sub_2342197B4((uint64_t)&v8);
      return;
    }
    v3 = a1;
    v4 = 23;
  }
  sub_23421C860(v3, v4);
}

void sub_23421D5D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t (**v12)();
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 3) || *(_BYTE *)(a1 + 2) != 4 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v12 = off_250517080;
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  sub_234118648(*a2);
  v10 = *a2;
  sub_2342192CC((uint64_t)&v12, (uint64_t)&v10, (uint64_t)v11);
  if (v10)
    sub_23411814C(v10);
  v10 = 0;
  if (LODWORD(v11[0]))
    goto LABEL_7;
  v6 = v13;
  if (v13 != *(_DWORD *)(a1 + 208))
  {
    v4 = a1;
    v5 = 23;
    goto LABEL_8;
  }
  v7 = v15;
  if (!v15 || v15 > *(unsigned __int16 *)(a1 + 32))
  {
LABEL_7:
    v4 = a1;
    v5 = 22;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8 || *(_QWORD *)(a1 + 192) + v15 <= v8)
    {
      *(_QWORD *)(a1 + 152) = v14;
      *(_QWORD *)(a1 + 160) = v7;
      *(_BYTE *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 172) = v6;
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
      {
        sub_23411814C(v9);
        v7 = v15;
        v6 = v13;
      }
      *(_QWORD *)(a1 + 40) = *a2;
      *a2 = 0;
      *(_WORD *)a1 = 4;
      *(_QWORD *)(a1 + 192) += v7;
      *(_DWORD *)(a1 + 200) = v6;
      *(_BYTE *)(a1 + 233) = 0;
      sub_2342193E8((uint64_t)&v12, 17);
      goto LABEL_9;
    }
    v4 = a1;
    v5 = 20;
  }
LABEL_8:
  sub_23421C860(v4, v5);
LABEL_9:
  v12 = off_250517080;
  if (v16)
    sub_23411814C(v16);
}

void sub_23421D760(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t (**v11)();
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 3) || *(_BYTE *)(a1 + 2) != 4 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v11 = off_250517080;
  v12 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  memset(v10, 0, sizeof(v10));
  sub_234118648(*a2);
  v9 = *a2;
  sub_2342192CC((uint64_t)&v11, (uint64_t)&v9, (uint64_t)v10);
  if (v9)
    sub_23411814C(v9);
  v9 = 0;
  if (!LODWORD(v10[0]))
  {
    v6 = v12;
    if (v12 != *(_DWORD *)(a1 + 208))
    {
      v4 = a1;
      v5 = 23;
      goto LABEL_15;
    }
    v7 = v14;
    if (v14 <= *(unsigned __int16 *)(a1 + 32))
    {
      *(_QWORD *)(a1 + 152) = v13;
      *(_QWORD *)(a1 + 160) = v7;
      *(_BYTE *)(a1 + 168) = 1;
      *(_DWORD *)(a1 + 172) = v6;
      v8 = *(_QWORD *)(a1 + 40);
      if (v8)
      {
        sub_23411814C(v8);
        v7 = v14;
        v6 = v12;
      }
      *(_QWORD *)(a1 + 40) = *a2;
      *a2 = 0;
      *(_WORD *)a1 = 4;
      *(_QWORD *)(a1 + 192) += v7;
      *(_DWORD *)(a1 + 200) = v6;
      *(_BYTE *)(a1 + 233) = 0;
      *(_BYTE *)(a1 + 2) = 6;
      sub_2342193E8((uint64_t)&v11, 18);
      goto LABEL_16;
    }
  }
  v4 = a1;
  v5 = 22;
LABEL_15:
  sub_23421C860(v4, v5);
LABEL_16:
  v11 = off_250517080;
  if (v15)
    sub_23411814C(v15);
}

void sub_23421D8D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  _QWORD v6[3];
  void *v7;
  int v8;

  if (*(_BYTE *)(a1 + 3) != 1 || *(_BYTE *)(a1 + 2) != 4 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v7 = &unk_250517028;
  v8 = 0;
  memset(v6, 0, sizeof(v6));
  v5 = *a2;
  *a2 = 0;
  sub_234218FB0((uint64_t)&v7, (uint64_t)&v5, (uint64_t)v6);
  if (v5)
    sub_23411814C(v5);
  v5 = 0;
  if (LODWORD(v6[0]))
  {
    v3 = a1;
    v4 = 22;
  }
  else
  {
    if (v8 == *(_DWORD *)(a1 + 200))
    {
      *(_WORD *)a1 = 7;
      *(_BYTE *)(a1 + 233) = *(_BYTE *)(a1 + 8) == 32;
      sub_234219074((uint64_t)&v7, 19);
      return;
    }
    v3 = a1;
    v4 = 23;
  }
  sub_23421C860(v3, v4);
}

void sub_23421D9CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  _QWORD v6[3];
  void *v7;
  int v8;

  if (*(_BYTE *)(a1 + 3) != 1 || *(_BYTE *)(a1 + 2) != 5 || !*(_BYTE *)(a1 + 233))
  {
    sub_23421C860(a1, 24);
    return;
  }
  v7 = &unk_250517028;
  v8 = 0;
  memset(v6, 0, sizeof(v6));
  v5 = *a2;
  *a2 = 0;
  sub_234218FB0((uint64_t)&v7, (uint64_t)&v5, (uint64_t)v6);
  if (v5)
    sub_23411814C(v5);
  v5 = 0;
  if (LODWORD(v6[0]))
  {
    v3 = a1;
    v4 = 22;
  }
  else
  {
    if (v8 == *(_DWORD *)(a1 + 200))
    {
      *(_WORD *)a1 = 8;
      *(_BYTE *)(a1 + 233) = 0;
      *(_BYTE *)(a1 + 2) = 7;
      sub_234219074((uint64_t)&v7, 20);
      return;
    }
    v3 = a1;
    v4 = 23;
  }
  sub_23421C860(v3, v4);
}

void sub_23421DAC0(uint64_t a1, _BYTE *a2)
{
  int v2;
  char v3;

  if ((*a2 & 0x30) == 0 || (v2 = (*(_BYTE *)(a1 + 4) & *a2), (*(_BYTE *)(a1 + 4) & *a2) == 0))
  {
    sub_23421C860(a1, 80);
    return;
  }
  if ((v2 & 0xFFFFFFBF) == 0)
  {
    v3 = 64;
LABEL_11:
    *(_BYTE *)(a1 + 8) = v3;
    return;
  }
  if ((v2 & 0xFFFFFFDF) == 0)
  {
    v3 = 32;
    goto LABEL_11;
  }
  if ((v2 & 0xFFFFFFEF) == 0)
  {
    v3 = 16;
    goto LABEL_11;
  }
}

void sub_23421DB18(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  int v5;
  char v6;
  int v7;

  v4 = *a2;
  if ((v4 & 0xFFFFFFBF) != 0)
  {
    if ((v4 & 0xFFFFFFDF) != 0)
    {
      if ((v4 & 0xFFFFFFEF) != 0)
      {
        sub_23421C860(a1, 22);
        v5 = 853;
LABEL_11:
        v7 = 172;
        goto LABEL_12;
      }
      v6 = 16;
    }
    else
    {
      v6 = 32;
    }
  }
  else
  {
    v6 = 64;
  }
  if ((*(_BYTE *)(a1 + 4) & v6) == 0)
  {
    sub_23421C860(a1, 80);
    v5 = 864;
    goto LABEL_11;
  }
  v7 = 0;
  *(_BYTE *)(a1 + 8) = v6;
  v5 = 867;
LABEL_12:
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/protocols/bdx/BdxTransferSession.cpp";
  *(_DWORD *)(a3 + 16) = v5;
}

const char *sub_23421DBB4(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xB)
    return "Unknown";
  else
    return off_2505172E0[(__int16)a2];
}

__n128 sub_23421DBDC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_WORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t sub_23421DBFC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v8;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v14[2];
  unint64_t v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v14[0] = result;
  v14[1] = a2;
  if (a2 <= 0x17)
  {
    *(_DWORD *)a5 = 30;
    *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
    v8 = 43;
    goto LABEL_16;
  }
  v6 = result;
  if (*(_DWORD *)result == 980968546 && *(_WORD *)(result + 4) == 12079)
  {
    result = sub_234115404(result + 6, 0x10uLL, (uint64_t)v15, 8);
    if (result == 8)
    {
      v11 = bswap64(v15[0]);
      *a3 = v11;
      if (v11 - 1 <= 0xFFFFFFEFFFFFFFFELL)
      {
        if (*(_BYTE *)(v6 + 22) == 47)
        {
          result = sub_23421DD58(v14, 0x17uLL);
          v12 = 0;
          *a4 = result;
          a4[1] = v13;
          v8 = 57;
        }
        else
        {
          v8 = 53;
          v12 = 224;
        }
        goto LABEL_15;
      }
      v8 = 52;
    }
    else
    {
      v8 = 49;
    }
    v12 = 71;
LABEL_15:
    *(_DWORD *)a5 = v12;
    *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
    goto LABEL_16;
  }
  *(_DWORD *)a5 = 223;
  *(_QWORD *)(a5 + 8) = "src/protocols/bdx/BdxUri.cpp";
  v8 = 44;
LABEL_16:
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_23421DD58(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  if (v2 < a2)
    sub_234260644((uint64_t)a1);
  sub_233CAF22C(&v4, *a1 + a2, v2 - a2);
  return v4;
}

unint64_t sub_23421DD94@<X0>(unint64_t result@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v9;
  size_t v10;
  int v11;
  int v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE v16[16];
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v17[0] = bswap64(result);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    result = (unint64_t)sub_234115248((char *)v17, 8, v16, 0x10uLL, 1u, (uint64_t)a5);
    if (*(_DWORD *)a5)
      return result;
    v9 = *(void **)a4;
    v10 = *(_QWORD *)(a4 + 8);
    bzero(*(void **)a4, v10);
    v13 = v9;
    v14 = v10 - 1;
    v15 = 0;
    if (!v9)
      v14 = 0;
    sub_2341150D8(&v13, "bdx://", 6uLL);
    sub_2341150D8(&v13, v16, 0x10uLL);
    sub_23411506C(&v13, "/");
    result = (unint64_t)sub_2341150D8(&v13, a2, a3);
    if (v14 >= v15)
    {
      result = sub_234138204(a4, v15);
      v12 = 0;
      v11 = 84;
    }
    else
    {
      v11 = 81;
      v12 = 25;
    }
    *(_DWORD *)a5 = v12;
    a5[1] = "src/protocols/bdx/BdxUri.cpp";
  }
  else
  {
    *(_DWORD *)a5 = 30;
    a5[1] = "src/protocols/bdx/BdxUri.cpp";
    v11 = 62;
  }
  *((_DWORD *)a5 + 4) = v11;
  return result;
}

uint64_t sub_23421DEF8(int *a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;

  v1 = *a1;
  if (*a1 == 166)
    v2 = 81;
  else
    v2 = 95;
  if (v1 == 108)
    v3 = 80;
  else
    v3 = v2;
  if (v1 == 47)
    v4 = 22;
  else
    v4 = v3;
  if (v1 == 3)
    return 24;
  else
    return v4;
}

void sub_23421DF34(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  _BYTE buf[24];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 256))
    *(_QWORD *)(a1 + 256) = a2;
  v9 = sub_234117B80(0xCu, "BDX");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = *a3;
    v11 = HIWORD(*((_DWORD *)a3 + 1));
    v12 = (unsigned __int16)*((_DWORD *)a3 + 1);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "OnMessageReceived";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v12;
    v18 = 1024;
    v19 = v11;
    _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_INFO, "%s: message 0x%x protocol (%u, %u)", buf, 0x1Eu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(0xCu, 3);
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v16 = *a4;
  *a4 = 0;
  v13 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  sub_23421CAF0(a1 + 16, (uint64_t)a3, &v16, v13, (uint64_t)a5);
  if (v16)
    sub_23411814C(v16);
  v16 = 0;
  if (*(_DWORD *)a5)
  {
    v14 = sub_234117B80(0xCu, "BDX");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      *(_QWORD *)&buf[16] = a5[2];
      v15 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "failed to handle message: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = *(_OWORD *)a5;
      *(_QWORD *)&buf[16] = a5[2];
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0xCu, 1);
    }
  }
  *(_WORD *)(*(_QWORD *)(a1 + 256) + 8) |= 0x40u;
}

void sub_23421E18C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0xCu, "BDX");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(unsigned __int16 *)(a2 + 112);
    *(_DWORD *)buf = 136315650;
    v8 = "OnResponseTimeout";
    if (sub_2341AD080(a2))
      v6 = 105;
    else
      v6 = 114;
    v9 = 1024;
    v10 = v5;
    v11 = 1024;
    v12 = v6;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "%s, ec: %u%c", buf, 0x18u);
  }
  if (sub_234114844(1u))
  {
    sub_2341AD080(a2);
    sub_2341147D0(0xCu, 1);
  }
  *(_QWORD *)(a1 + 256) = 0;
  sub_23421CA90(a1 + 16);
}

void sub_23421E2CC(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_23421E2DC(a2);
}

void sub_23421E2DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = 0;
  v8 = 95;
  v2 = a1 + 16;
  v3 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  sub_23421B740(v2, (uint64_t)&v6, v3);
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a1 + 56))(a1, &v6);
  v4 = *(_QWORD *)(a1 + 264);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 276))
    {
      (*(void (**)(uint64_t, uint64_t (*)(), uint64_t))(*(_QWORD *)v4 + 72))(v4, sub_23421E2CC, a1);
      *(_BYTE *)(a1 + 276) = 0;
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD, uint64_t (*)(), uint64_t))(*(_QWORD *)v4 + 40))(buf, v4, *(unsigned int *)(a1 + 272), sub_23421E2CC, a1);
    }
  }
  else
  {
    v5 = sub_234117B80(0xCu, "BDX");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = "PollForOutput";
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_ERROR, "%s mSystemLayer is null", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0xCu, 1);
  }
  if (v7)
    sub_23411814C(v7);
}

uint64_t sub_23421E45C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  uint8_t buf[4];
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
    return (uint64_t)(*(_QWORD *(**)(uint8_t *__return_ptr, uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v2 + 40))(buf, v2, 1, sub_23421E2CC, a1);
  v4 = sub_234117B80(0xCu, "BDX");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v6 = "ScheduleImmediatePoll";
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "%s mSystemLayer is null", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
    return sub_2341147D0(0xCu, 1);
  return result;
}

_QWORD *sub_23421E554@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>)
{
  _QWORD *v9;
  NSObject *v10;
  int v11;
  int v12;
  uint8_t v13[32];

  if (a2)
  {
    v9 = result;
    *((_DWORD *)result + 68) = a7;
    result[33] = a2;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    result = (_QWORD *)sub_23421BD60((uint64_t)(result + 2), a3, a4, a5, a6, (uint64_t)a8);
    if (*(_DWORD *)a8)
      return result;
    v10 = sub_234117B80(0xCu, "BDX");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Start polling for messages", v13, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0xCu, 2);
    *((_BYTE *)v9 + 276) = 0;
    result = (*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, _QWORD, void (*)(uint64_t, uint64_t), _QWORD *))(*(_QWORD *)v9[33] + 40))(v13, v9[33], *((unsigned int *)v9 + 68), sub_23421E2CC, v9);
    v11 = 0;
    v12 = 111;
  }
  else
  {
    v12 = 101;
    v11 = 47;
  }
  *(_DWORD *)a8 = v11;
  a8[1] = "src/protocols/bdx/TransferFacilitator.cpp";
  *((_DWORD *)a8 + 4) = v12;
  return result;
}

uint64_t sub_23421E67C(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  sub_23421CA90(a1 + 16);
  v2 = sub_234117B80(0xCu, "BDX");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Stop polling for messages", v4, 2u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    result = sub_2341147D0(0xCu, 2);
  *(_BYTE *)(a1 + 276) = 1;
  return result;
}

void sub_23421E718(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, int a5@<W4>, int a6@<W5>, _QWORD *a7@<X8>)
{
  int v9;
  int v10;
  _QWORD v11[3];

  if (a2)
  {
    *(_DWORD *)(a1 + 272) = a6;
    *(_QWORD *)(a1 + 264) = a2;
    a7[1] = 0;
    a7[2] = 0;
    *a7 = 0;
    sub_23421BA78(a1 + 16, a3, a4, a5, (uint64_t)a7);
    if (*(_DWORD *)a7)
      return;
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, void (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 264) + 40))(v11, *(_QWORD *)(a1 + 264), *(unsigned int *)(a1 + 272), sub_23421E2CC, a1);
    v9 = 0;
    v10 = 132;
  }
  else
  {
    v10 = 124;
    v9 = 47;
  }
  *(_DWORD *)a7 = v9;
  a7[1] = "src/protocols/bdx/TransferFacilitator.cpp";
  *((_DWORD *)a7 + 4) = v10;
}

uint64_t sub_23421E7C4(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  const char *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  int8x8_t v64;
  char v65;
  uint8_t buf[4];
  _BYTE v67[12];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (*a2)
    return result;
  v3 = result;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  v5 = sub_2340D9D80(a2);
  v6 = 0;
  v60 = (uint64_t)(v5 + 2);
  v61 = v5 + 1;
  v7 = (char *)v5 + 98;
  v8 = v4;
  while (1)
  {
    if (*(_BYTE *)(v8 + 98))
    {
      v9 = (uint64_t *)(v8 + 8);
      if (*(_QWORD *)(v8 + 8))
      {
        if (sub_23410ECF8((_DWORD *)(v8 + 16), &xmmword_25615DD84))
        {
          sub_2341C5BCC(buf, v8 + 16, *v9);
          sub_2341C5BCC(&v62, v60, *v61);
          v10 = strcmp((const char *)(v8 + 98), v7);
          if (!(_DWORD)v10 && *(unsigned __int16 *)(v8 + 96) == *((unsigned __int16 *)v5 + 48))
          {
            if (*(_QWORD *)&v67[4] > 5uLL || v63 >= 6)
              sub_2342606E0(v10);
            if (*(_QWORD *)&v67[4] == v63)
              break;
          }
        }
      }
    }
LABEL_26:
    ++v6;
    v8 = v4 + 424 * v6;
    if (v6 == 10)
    {
      do
      {
        if (!*(_BYTE *)(v4 + 98) || !*(_QWORD *)(v4 + 8) || !sub_23410ECF8((_DWORD *)(v4 + 16), &xmmword_25615DD84))
        {
          *(_DWORD *)v4 = *(_DWORD *)v5;
          v19 = *(_OWORD *)v61;
          *(_OWORD *)(v4 + 24) = *((_OWORD *)v61 + 1);
          *(_OWORD *)(v4 + 8) = v19;
          v20 = *((_OWORD *)v61 + 2);
          v21 = *((_OWORD *)v61 + 3);
          v22 = *((_OWORD *)v61 + 4);
          *(_OWORD *)(v4 + 88) = *((_OWORD *)v61 + 5);
          *(_OWORD *)(v4 + 72) = v22;
          *(_OWORD *)(v4 + 56) = v21;
          *(_OWORD *)(v4 + 40) = v20;
          v23 = *((_OWORD *)v61 + 6);
          v24 = *((_OWORD *)v61 + 7);
          v25 = *((_OWORD *)v61 + 8);
          *(_OWORD *)(v4 + 147) = *(_OWORD *)((char *)v61 + 139);
          *(_OWORD *)(v4 + 136) = v25;
          *(_OWORD *)(v4 + 120) = v24;
          *(_OWORD *)(v4 + 104) = v23;
          v26 = *(_OWORD *)(v5 + 21);
          v27 = *(_OWORD *)(v5 + 23);
          v28 = *(_OWORD *)(v5 + 25);
          *(_OWORD *)(v4 + 216) = *(_OWORD *)(v5 + 27);
          *(_OWORD *)(v4 + 200) = v28;
          *(_OWORD *)(v4 + 184) = v27;
          *(_OWORD *)(v4 + 168) = v26;
          v29 = *(_OWORD *)(v5 + 29);
          v30 = *(_OWORD *)(v5 + 31);
          v31 = *(_OWORD *)(v5 + 35);
          *(_OWORD *)(v4 + 264) = *(_OWORD *)(v5 + 33);
          *(_OWORD *)(v4 + 280) = v31;
          *(_OWORD *)(v4 + 248) = v30;
          *(_OWORD *)(v4 + 232) = v29;
          v32 = *(_OWORD *)(v5 + 37);
          v33 = *(_OWORD *)(v5 + 39);
          v34 = *(_OWORD *)(v5 + 43);
          *(_OWORD *)(v4 + 328) = *(_OWORD *)(v5 + 41);
          *(_OWORD *)(v4 + 344) = v34;
          *(_OWORD *)(v4 + 296) = v32;
          *(_OWORD *)(v4 + 312) = v33;
          v35 = *(_OWORD *)(v5 + 45);
          v36 = *(_OWORD *)(v5 + 47);
          v37 = *(_OWORD *)(v5 + 49);
          *(_OWORD *)(v4 + 403) = *(_OWORD *)((char *)v5 + 403);
          *(_OWORD *)(v4 + 376) = v36;
          *(_OWORD *)(v4 + 392) = v37;
          *(_OWORD *)(v4 + 360) = v35;
          goto LABEL_36;
        }
        v4 += 424;
        --v6;
      }
      while (v6);
      v18 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v67 = v7;
        _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "Failed to add discovered node with hostname %s- Insufficient space", buf, 0xCu);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
        return sub_2341147D0(0x22u, 1);
      return result;
    }
  }
  v58 = v7;
  v59 = v5;
  if (!*(_QWORD *)&v67[4])
  {
    v12 = 0;
    goto LABEL_25;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = v63;
    if (!v63)
      goto LABEL_22;
    v14 = 0;
    while (((1 << v14) & *(_QWORD *)&v12) != 0)
    {
LABEL_18:
      if (++v14 >= v13)
        goto LABEL_22;
    }
    v15 = (_DWORD *)sub_23421ED38(buf, v11);
    v16 = (_DWORD *)sub_23421ED38(&v62, v14);
    if (!sub_23410ECAC(v15, v16))
    {
      v13 = v63;
      goto LABEL_18;
    }
    if (v14 >= 5)
      abort();
    *(_QWORD *)&v12 |= 1 << v14;
LABEL_22:
    ++v11;
  }
  while (v11 < *(_QWORD *)&v67[4]);
LABEL_25:
  v64 = v12;
  v65 = 1;
  v17 = sub_23421ED60(&v64, 0, (uint64_t)&v64, 5u, &v65);
  v5 = v59;
  v7 = v58;
  if (v17 != v63)
    goto LABEL_26;
  *(_DWORD *)v8 = *(_DWORD *)v59;
  v38 = *((_OWORD *)v61 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v61;
  *(_OWORD *)(v8 + 24) = v38;
  v39 = *((_OWORD *)v61 + 2);
  v40 = *((_OWORD *)v61 + 3);
  v41 = *((_OWORD *)v61 + 5);
  *(_OWORD *)(v8 + 72) = *((_OWORD *)v61 + 4);
  *(_OWORD *)(v8 + 88) = v41;
  *(_OWORD *)(v8 + 40) = v39;
  *(_OWORD *)(v8 + 56) = v40;
  v42 = *((_OWORD *)v61 + 6);
  v43 = *((_OWORD *)v61 + 7);
  v44 = *((_OWORD *)v61 + 8);
  *(_OWORD *)(v8 + 147) = *(_OWORD *)((char *)v61 + 139);
  *(_OWORD *)(v8 + 120) = v43;
  *(_OWORD *)(v8 + 136) = v44;
  *(_OWORD *)(v8 + 104) = v42;
  v45 = v4 + 424 * v6;
  v46 = *(_OWORD *)(v59 + 21);
  v47 = *(_OWORD *)(v59 + 23);
  v48 = *(_OWORD *)(v59 + 25);
  *(_OWORD *)(v45 + 216) = *(_OWORD *)(v59 + 27);
  *(_OWORD *)(v45 + 200) = v48;
  *(_OWORD *)(v45 + 184) = v47;
  *(_OWORD *)(v45 + 168) = v46;
  v49 = *(_OWORD *)(v59 + 29);
  v50 = *(_OWORD *)(v59 + 31);
  v51 = *(_OWORD *)(v59 + 35);
  *(_OWORD *)(v45 + 264) = *(_OWORD *)(v59 + 33);
  *(_OWORD *)(v45 + 280) = v51;
  *(_OWORD *)(v45 + 248) = v50;
  *(_OWORD *)(v45 + 232) = v49;
  v52 = *(_OWORD *)(v59 + 37);
  v53 = *(_OWORD *)(v59 + 39);
  v54 = *(_OWORD *)(v59 + 43);
  *(_OWORD *)(v45 + 328) = *(_OWORD *)(v59 + 41);
  *(_OWORD *)(v45 + 344) = v54;
  *(_OWORD *)(v45 + 296) = v52;
  *(_OWORD *)(v45 + 312) = v53;
  v55 = *(_OWORD *)(v59 + 45);
  v56 = *(_OWORD *)(v59 + 47);
  v57 = *(_OWORD *)(v59 + 49);
  *(_OWORD *)(v45 + 403) = *(_OWORD *)((char *)v59 + 403);
  *(_OWORD *)(v45 + 376) = v56;
  *(_OWORD *)(v45 + 392) = v57;
  *(_OWORD *)(v45 + 360) = v55;
LABEL_36:
  result = *(_QWORD *)(v3 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
  return result;
}

void sub_23421EC18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v4 = 10;
  do
  {
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 144) = 0;
    *(_BYTE *)(v3 + 148) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    *(_BYTE *)(v3 + 156) = 0;
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 162) = 0;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 127) = 0u;
    sub_2341F7078(v3);
    *(_OWORD *)(v3 + 168) = 0u;
    v5 = (_OWORD *)(v3 + 168);
    *(_OWORD *)((char *)v5 + 235) = 0u;
    v5[13] = 0u;
    v5[14] = 0u;
    v5[11] = 0u;
    v5[12] = 0u;
    v5[9] = 0u;
    v5[10] = 0u;
    v5[7] = 0u;
    v5[8] = 0u;
    v5[5] = 0u;
    v5[6] = 0u;
    v5[3] = 0u;
    v5[4] = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v3 = (uint64_t)(v5 + 16);
    --v4;
  }
  while (v4);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/controller/AbstractDnssdDiscoveryController.cpp";
  *(_DWORD *)(a2 + 16) = 104;
}

uint64_t sub_23421ECD0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (a2 > 9)
    return 0;
  v4 = v3 + 424 * a2;
  if (!*(_BYTE *)(v4 + 98) || !*(_QWORD *)(v4 + 8))
    return 0;
  if (sub_23410ECF8((_DWORD *)(v4 + 16), &xmmword_25615DD84))
    return v4;
  return 0;
}

uint64_t sub_23421ED38(_QWORD *a1, unint64_t a2)
{
  if (a1[1] <= a2)
    sub_234260818((uint64_t)a1);
  return *a1 + 16 * a2;
}

uint64_t sub_23421ED60(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  unint64_t v5;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (*a5)
    return sub_23421ED80(a1, a2, v5);
  else
    return sub_23421EE24((uint64_t *)a1, a2, v5);
}

uint64_t sub_23421ED80(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = (uint64_t)*a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_23421EE24(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3)
      v4 = a3;
    else
      v4 = 64 - a2;
    v5 = *a1++;
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      v7 = *a1++;
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t sub_23421EED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _BYTE v8[377];
  _BYTE v9[183];
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_250517458;
  bzero((void *)(a1 + 8), 0x2A0uLL);
  *(_QWORD *)(a1 + 560) = "src/controller/CommissioningDelegate.h";
  *(_DWORD *)(a1 + 568) = 115;
  *(_BYTE *)(a1 + 578) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 604) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 676) = 0;
  *(_WORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 712) = &unk_2505174E0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 736) = &off_250514968;
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  v2 = 1144;
  *(_BYTE *)(a1 + 784) = 0;
  do
  {
    v3 = a1 + v2;
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 16) = 0;
    v2 += 40;
  }
  while (v3 + 40 != a1 + 1224);
  v4 = 1352;
  do
  {
    v5 = a1 + v4;
    *(_DWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_BYTE *)(v5 + 16) = 0;
    *(_BYTE *)(v5 + 24) = 0;
    v4 += 32;
  }
  while (v5 + 32 != a1 + 1672);
  *(_BYTE *)(a1 + 1800) = 0;
  *(_WORD *)(a1 + 1808) = -1;
  *(_WORD *)(a1 + 1812) = -1;
  *(_WORD *)(a1 + 1816) = -1;
  *(_QWORD *)(a1 + 1820) = 0;
  *(_QWORD *)(a1 + 1826) = 0;
  *(_WORD *)(a1 + 1834) = 514;
  *(_DWORD *)(a1 + 1840) = 0;
  *(_WORD *)(a1 + 1844) = 257;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_BYTE *)(a1 + 1856) = 1;
  *(_WORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a1 + 1868) = 0;
  *(_WORD *)(a1 + 1876) = 0;
  *(_DWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  *(_WORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_WORD *)(a1 + 1936) = 0;
  *(_WORD *)(a1 + 2802) = 0;
  *(_WORD *)(a1 + 3704) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_WORD *)(a1 + 1904) = 0;
  bzero(v8, 0x2A0uLL);
  *(_QWORD *)&v9[175] = "src/controller/CommissioningDelegate.h";
  v10 = 115;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(v7, a1, v8);
  if (v8[376])
    sub_23413A7A4(v9, 16);
  return a1;
}

uint64_t sub_23421F0EC(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_250517458;
  v2 = *(void **)(a1 + 1912);
  if (v2)
    j__free(v2);
  *(_WORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
  v3 = *(void **)(a1 + 1928);
  if (v3)
    j__free(v3);
  *(_WORD *)(a1 + 1936) = 0;
  *(_QWORD *)(a1 + 1928) = 0;
  *(_QWORD *)(a1 + 712) = &unk_2505174E0;
  sub_2341CD754(a1 + 736);
  if (*(_BYTE *)(a1 + 384))
    sub_23413A7A4(a1 + 385, 16);
  return a1;
}

void sub_23421F16C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 1912);
  if (v2)
    j__free(v2);
  *(_WORD *)(a1 + 1920) = 0;
  *(_QWORD *)(a1 + 1912) = 0;
}

void sub_23421F19C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 1928);
  if (v2)
    j__free(v2);
  *(_WORD *)(a1 + 1936) = 0;
  *(_QWORD *)(a1 + 1928) = 0;
}

_QWORD *sub_23421F1CC(_QWORD *a1)
{
  *a1 = &unk_2505174E0;
  sub_2341CD754(a1 + 3);
  return a1;
}

void sub_23421F204(uint64_t a1)
{
  sub_23421F0EC(a1);
  JUMPOUT(0x23493E704);
}

uint64_t sub_23421F228(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 704) = a2;
  return result;
}

uint64_t sub_23421F230@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t result;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[8];
  __int128 v14;

  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Checking ICD registration parameters", v13, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (!*(_BYTE *)(a1 + 632))
  {
    v8 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Missing ICD symmetric key!", v13, 2u);
    }
    result = sub_234114844(1u);
    v7 = 77;
    if ((result & 1) == 0)
      goto LABEL_31;
LABEL_30:
    result = sub_2341147D0(9u, 1);
LABEL_31:
    v6 = 47;
    goto LABEL_32;
  }
  v13[0] = *(_BYTE *)(a1 + 632);
  v14 = *(_OWORD *)(a1 + 640);
  result = (uint64_t)sub_233C05DB8(v13);
  if (*(_QWORD *)(result + 8) != 16)
  {
    v9 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Invalid ICD symmetric key length!", v13, 2u);
    }
    result = sub_234114844(1u);
    v7 = 82;
    if ((result & 1) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 600))
  {
    v10 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Missing ICD check-in node id!", v13, 2u);
    }
    result = sub_234114844(1u);
    v7 = 87;
    if ((result & 1) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 616))
  {
    v11 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Missing ICD monitored subject!", v13, 2u);
    }
    result = sub_234114844(1u);
    v7 = 92;
    if ((result & 1) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 656))
  {
    v12 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Missing ICD Client Type!", v13, 2u);
    }
    result = sub_234114844(1u);
    v7 = 97;
    if (!(_DWORD)result)
      goto LABEL_31;
    goto LABEL_30;
  }
  v6 = 0;
  v7 = 99;
LABEL_32:
  *(_DWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a2 + 16) = v7;
  return result;
}

_BYTE *sub_23421F528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  size_t v15;
  NSObject *v16;
  _BYTE *v17;
  size_t v18;
  size_t v19;
  const void *v20;
  NSObject *v21;
  _BYTE *v22;
  const void *v23;
  size_t v24;
  NSObject *v25;
  _BYTE *result;
  int v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  _BOOL4 v32;
  const void *v33;
  _BYTE *v34;
  int v35;
  NSObject *v36;
  _BOOL4 v37;
  const void *v38;
  _BYTE *v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  _BYTE *v45;
  _OWORD *v46;
  __int128 v47;
  NSObject *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  size_t v64;
  uint64_t v65;
  NSObject *v66;
  _BYTE *v67;
  size_t v68;
  _BYTE *v69;
  void *v70;
  const void *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE buf[24];
  __int128 v87;
  __int128 v88;
  _BYTE v89[8];
  __int128 v90;
  _BYTE v91[8];
  __int128 v92;
  _BYTE v93[8];
  __int128 v94;
  _BYTE v95[8];
  __int128 v96;
  _BYTE v97[8];
  __int128 v98;
  _BYTE v99[8];
  __int128 v100;
  _BYTE v101[8];
  __int128 v102;
  _BYTE v103[8];
  __int128 v104;
  _BYTE v105[8];
  __int128 v106;
  _BYTE v107[8];
  __int128 v108;
  _BYTE v109[8];
  __int128 v110;
  _BYTE v111[8];
  __int128 v112;
  _BYTE v113[8];
  __int128 v114;
  _BYTE v115[8];
  __int128 v116;
  char v117[8];
  _BYTE *v118;
  char v119[8];
  _BYTE *v120;
  _BYTE v121[8];
  __int128 v122;
  _BYTE v123[8];
  __int128 v124;
  _BYTE v125[8];
  __int128 v126;
  _BYTE v127[8];
  __int128 v128;
  _BYTE v129[8];
  __int128 v130;
  _BYTE v131[8];
  __int128 v132;
  _BYTE v133[8];
  __int128 v134;
  __int128 v135;
  _BYTE v136[8];
  __int128 v137;
  __int128 v138;
  _BYTE v139[8];
  __int128 v140;
  __int128 v141;
  _BYTE v142[8];
  __int128 v143;
  __int128 v144;
  uint8_t v145[8];
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 264))
  {
    if (!*(_BYTE *)(a1 + 272))
      goto LABEL_69;
    v142[0] = *(_BYTE *)(a2 + 264);
    v6 = *(_OWORD *)(a2 + 288);
    v143 = *(_OWORD *)(a2 + 272);
    v144 = v6;
    v7 = *(_QWORD *)sub_2342206D0(v142);
    v139[0] = *(_BYTE *)(a1 + 272);
    if (v139[0])
    {
      v8 = *(_OWORD *)(a1 + 296);
      v140 = *(_OWORD *)(a1 + 280);
      v141 = v8;
    }
    if (v7 != *(_QWORD *)sub_2342206D0(v139))
      goto LABEL_69;
    v136[0] = *(_BYTE *)(a2 + 264);
    if (v136[0])
    {
      v9 = *(_OWORD *)(a2 + 288);
      v137 = *(_OWORD *)(a2 + 272);
      v138 = v9;
    }
    v10 = *((_QWORD *)sub_2342206D0(v136) + 2);
    v133[0] = *(_BYTE *)(a1 + 272);
    if (v133[0])
    {
      v11 = *(_OWORD *)(a1 + 296);
      v134 = *(_OWORD *)(a1 + 280);
      v135 = v11;
    }
    if (v10 != *((_QWORD *)sub_2342206D0(v133) + 2))
      goto LABEL_69;
  }
  v131[0] = *(_BYTE *)(a2 + 304);
  if (v131[0])
    v132 = *(_OWORD *)(a2 + 312);
  v129[0] = *(_BYTE *)(a1 + 312);
  if (v129[0])
    v130 = *(_OWORD *)(a1 + 320);
  if (sub_2342206F0(v131, v129))
    goto LABEL_69;
  v127[0] = *(_BYTE *)(a2 + 328);
  if (v127[0])
    v128 = *(_OWORD *)(a2 + 336);
  v125[0] = *(_BYTE *)(a1 + 336);
  if (v125[0])
    v126 = *(_OWORD *)(a1 + 344);
  if (sub_2342206F0(v127, v125))
    goto LABEL_69;
  v123[0] = *(_BYTE *)(a2 + 352);
  if (v123[0])
    v124 = *(_OWORD *)(a2 + 360);
  v121[0] = *(_BYTE *)(a1 + 360);
  if (v121[0])
    v122 = *(_OWORD *)(a1 + 368);
  if (sub_2342206F0(v123, v121))
    goto LABEL_69;
  if (*(_BYTE *)(a2 + 376))
  {
    v120 = sub_233C27DCC((_BYTE *)(a2 + 376));
    v119[0] = 1;
    if (!*(_BYTE *)(a1 + 384))
    {
LABEL_69:
      v13 = a1 + 8;
      sub_2342207A0(a1 + 8, (unsigned __int8 *)a2);
      *(_BYTE *)(a1 + 1905) = 0;
LABEL_70:
      sub_234220B58((_BYTE *)v13);
      goto LABEL_71;
    }
  }
  else
  {
    v119[0] = 0;
    if (!*(_BYTE *)(a1 + 384))
    {
      v117[0] = 0;
      goto LABEL_34;
    }
  }
  v118 = sub_233C27DCC((_BYTE *)(a1 + 384));
  v117[0] = 1;
  if (v119[0])
  {
    v12 = *(_QWORD *)sub_233C25EA4(v119);
    if (v12 != *(_QWORD *)sub_233C25EA4(v117))
      goto LABEL_69;
  }
LABEL_34:
  v115[0] = *(_BYTE *)(a2 + 416);
  if (v115[0])
    v116 = *(_OWORD *)(a2 + 424);
  v113[0] = *(_BYTE *)(a1 + 424);
  if (v113[0])
    v114 = *(_OWORD *)(a1 + 432);
  if (sub_2342206F0(v115, v113))
    goto LABEL_69;
  v111[0] = *(_BYTE *)(a2 + 440);
  if (v111[0])
    v112 = *(_OWORD *)(a2 + 448);
  v109[0] = *(_BYTE *)(a1 + 448);
  if (v109[0])
    v110 = *(_OWORD *)(a1 + 456);
  if (sub_2342206F0(v111, v109))
    goto LABEL_69;
  v107[0] = *(_BYTE *)(a2 + 464);
  if (v107[0])
    v108 = *(_OWORD *)(a2 + 472);
  v105[0] = *(_BYTE *)(a1 + 472);
  if (v105[0])
    v106 = *(_OWORD *)(a1 + 480);
  if (sub_2342206F0(v107, v105))
    goto LABEL_69;
  v103[0] = *(_BYTE *)(a2 + 488);
  if (v103[0])
    v104 = *(_OWORD *)(a2 + 496);
  v101[0] = *(_BYTE *)(a1 + 496);
  if (v101[0])
    v102 = *(_OWORD *)(a1 + 504);
  if (sub_2342206F0(v103, v101))
    goto LABEL_69;
  v99[0] = *(_BYTE *)(a2 + 16);
  if (v99[0])
    v100 = *(_OWORD *)(a2 + 24);
  v97[0] = *(_BYTE *)(a1 + 24);
  if (v97[0])
    v98 = *(_OWORD *)(a1 + 32);
  if (sub_234220748(v99, v97))
    goto LABEL_69;
  v95[0] = *(_BYTE *)(a2 + 40);
  if (v95[0])
    v96 = *(_OWORD *)(a2 + 48);
  v93[0] = *(_BYTE *)(a1 + 48);
  if (v93[0])
    v94 = *(_OWORD *)(a1 + 56);
  if (sub_234220748(v95, v93))
    goto LABEL_69;
  v91[0] = *(_BYTE *)(a2 + 632);
  if (v91[0])
    v92 = *(_OWORD *)(a2 + 640);
  v89[0] = *(_BYTE *)(a1 + 640);
  if (v89[0])
    v90 = *(_OWORD *)(a1 + 648);
  if (sub_2342206F0(v91, v89))
    goto LABEL_69;
  if (*(_BYTE *)(a2 + 64))
  {
    buf[0] = *(_BYTE *)(a2 + 64);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 72);
    *(_QWORD *)&v87 = *(_QWORD *)(a2 + 88);
    if (sub_233C05DB8(buf)[16])
    {
      v145[0] = *(_BYTE *)(a2 + 64);
      if (v145[0])
      {
        v146 = *(_OWORD *)(a2 + 72);
        v147 = *(_QWORD *)(a2 + 88);
      }
      v76 = sub_233C05DB8(v145);
      if (!v76[16])
        goto LABEL_234;
      v77 = *(_QWORD *)v76;
      v13 = a1 + 8;
      sub_2342207A0(a1 + 8, (unsigned __int8 *)a2);
      *(_BYTE *)(a1 + 1905) = 0;
      if (v77 == a1 + 1672)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
  v13 = a1 + 8;
  sub_2342207A0(a1 + 8, (unsigned __int8 *)a2);
  *(_BYTE *)(a1 + 1905) = 0;
LABEL_71:
  if (*(_BYTE *)(a2 + 240))
  {
    buf[0] = *(_BYTE *)(a2 + 240);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 248);
    v14 = sub_233C05DB8(buf);
    v15 = *((_QWORD *)v14 + 1);
    if (v15 >= 0xFF)
    {
      v28 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Thread operational data set is too large", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      result = sub_234220B58((_BYTE *)v13);
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      v27 = 151;
      goto LABEL_224;
    }
    memcpy((void *)(a1 + 888), *(const void **)v14, v15);
    v16 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Setting thread operational dataset from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_233BF7114(&v88, a1 + 888, v15);
    *(_BYTE *)(v13 + 240) = 1;
    *(_OWORD *)(v13 + 248) = v88;
    *(_WORD *)(v13 + 594) = 1;
  }
  if (*(_BYTE *)(a2 + 176))
  {
    buf[0] = *(_BYTE *)(a2 + 176);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 184);
    v87 = *(_OWORD *)(a2 + 200);
    v17 = sub_2342206D0(buf);
    v18 = *((_QWORD *)v17 + 1);
    if (v18 > 0x20 || (v19 = *((_QWORD *)v17 + 3), v19 >= 0x41))
    {
      v29 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_ERROR, "Wifi credentials are too large", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      result = sub_234220B58((_BYTE *)v13);
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      v27 = 167;
      goto LABEL_224;
    }
    v20 = (const void *)*((_QWORD *)v17 + 2);
    memcpy((void *)(a1 + 792), *(const void **)v17, v18);
    memcpy((void *)(a1 + 824), v20, v19);
    v21 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_DEFAULT, "Setting wifi credentials from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_233BF7114(&v85, a1 + 792, v18);
    sub_233BF7114(&v84, a1 + 824, v19);
    *(_BYTE *)(v13 + 176) = 1;
    *(_OWORD *)(v13 + 184) = v85;
    *(_OWORD *)(v13 + 200) = v84;
    *(_WORD *)(v13 + 592) = 1;
  }
  if (*(_BYTE *)(a2 + 216))
  {
    buf[0] = *(_BYTE *)(a2 + 216);
    *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 224);
    v22 = sub_233C05DB8(buf);
    v23 = *(const void **)v22;
    v24 = *((_QWORD *)v22 + 1);
    *(_QWORD *)buf = a1 + 1142;
    *(_QWORD *)&buf[8] = 2;
    if (v24 > 2)
    {
      v25 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v145 = 67109120;
        *(_DWORD *)&v145[4] = v24;
        _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_ERROR, "Country code is too large: %u", v145, 8u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      result = sub_234220B58((_BYTE *)v13);
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      v27 = 189;
      goto LABEL_224;
    }
    memcpy((void *)(a1 + 1142), v23, v24);
    sub_234138204((uint64_t)buf, v24);
    sub_233CAF22C(&v83, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
    *(_BYTE *)(v13 + 216) = 1;
    *(_OWORD *)(v13 + 224) = v83;
  }
  v30 = *(unsigned __int8 *)(a2 + 152);
  v31 = sub_234117B80(9u, "Controller");
  v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
  if (v30)
  {
    if (v32)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "Setting attestation nonce from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    buf[0] = *(_BYTE *)(a2 + 152);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 160);
    result = sub_233C05DB8(buf);
    if (*((_QWORD *)result + 1) != 32)
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      v27 = 197;
      goto LABEL_224;
    }
    buf[0] = *(_BYTE *)(a2 + 152);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 160);
    v33 = *(const void **)sub_233C05DB8(buf);
    v145[0] = *(_BYTE *)(a2 + 152);
    if (v145[0])
      v146 = *(_OWORD *)(a2 + 160);
    v34 = sub_233C05DB8(v145);
    memcpy((void *)(a1 + 1938), v33, *((_QWORD *)v34 + 1));
  }
  else
  {
    if (v32)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "Setting attestation nonce to random value", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_234139DB0((char *)(a1 + 1938), 0x20uLL, (uint64_t)buf);
  }
  sub_233BF7114(&v82, a1 + 1938, 32);
  *(_BYTE *)(v13 + 152) = 1;
  *(_OWORD *)(v13 + 160) = v82;
  v35 = *(unsigned __int8 *)(a2 + 128);
  v36 = sub_234117B80(9u, "Controller");
  v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    if (v37)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_DEFAULT, "Setting CSR nonce from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    buf[0] = *(_BYTE *)(a2 + 128);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 136);
    result = sub_233C05DB8(buf);
    if (*((_QWORD *)result + 1) != 32)
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      v27 = 210;
      goto LABEL_224;
    }
    buf[0] = *(_BYTE *)(a2 + 128);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 136);
    v38 = *(const void **)sub_233C05DB8(buf);
    v145[0] = *(_BYTE *)(a2 + 128);
    if (v145[0])
      v146 = *(_OWORD *)(a2 + 136);
    v39 = sub_233C05DB8(v145);
    memcpy((void *)(a1 + 1970), v38, *((_QWORD *)v39 + 1));
  }
  else
  {
    if (v37)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_DEFAULT, "Setting CSR nonce to random value", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_234139DB0((char *)(a1 + 1970), 0x20uLL, (uint64_t)buf);
  }
  result = sub_233BF7114(&v81, a1 + 1970, 32);
  *(_BYTE *)(v13 + 128) = 1;
  *(_OWORD *)(v13 + 136) = v81;
  if (*(_BYTE *)(a2 + 40))
  {
    v40 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v40, OS_LOG_TYPE_DEFAULT, "Setting DST offsets from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    buf[0] = *(_BYTE *)(a2 + 40);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 48);
    v41 = sub_2342206D0(buf);
    if (*((_QWORD *)v41 + 1) >= 0xAuLL)
      v42 = 10;
    else
      v42 = *((_QWORD *)v41 + 1);
    if (v42)
    {
      v43 = 0;
      v44 = (_OWORD *)(a1 + 1352);
      do
      {
        buf[0] = *(_BYTE *)(a2 + 40);
        if (buf[0])
          *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 48);
        v45 = sub_2342206D0(buf);
        v46 = (_OWORD *)sub_234220BD0(v45, v43);
        v47 = v46[1];
        *v44 = *v46;
        v44[1] = v47;
        v44 += 2;
        ++v43;
      }
      while (v42 != v43);
    }
    result = sub_2342116FC(buf, a1 + 1352, v42);
    *(_BYTE *)(v13 + 40) = 1;
    *(_OWORD *)(v13 + 48) = *(_OWORD *)buf;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v48 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v48, OS_LOG_TYPE_DEFAULT, "Setting Time Zone from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    v79 = a3;
    buf[0] = *(_BYTE *)(a2 + 16);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 24);
    v49 = sub_2342206D0(buf);
    if (*((_QWORD *)v49 + 1) >= 2uLL)
      v50 = 2;
    else
      v50 = *((_QWORD *)v49 + 1);
    if (v50)
    {
      v51 = 0;
      v52 = (_OWORD *)(a2 + 24);
      v53 = (_OWORD *)(a1 + 1168);
      v54 = a1 + 1224;
      do
      {
        buf[0] = *(_BYTE *)(a2 + 16);
        if (buf[0])
          *(_OWORD *)&buf[8] = *v52;
        v55 = sub_2342206D0(buf);
        v56 = sub_234220BF8(v55, v51);
        *(_OWORD *)((char *)v53 - 24) = *(_OWORD *)v56;
        v57 = *(unsigned __int8 *)(v56 + 16);
        *((_BYTE *)v53 - 8) = v57;
        if (v57)
          *v53 = *(_OWORD *)(v56 + 24);
        buf[0] = *(_BYTE *)(a2 + 16);
        if (buf[0])
          *(_OWORD *)&buf[8] = *v52;
        v58 = sub_2342206D0(buf);
        if (!*(_BYTE *)(sub_234220BF8(v58, v51) + 16))
          goto LABEL_184;
        v145[0] = *(_BYTE *)(a2 + 16);
        if (v145[0])
          v146 = *v52;
        v59 = sub_2342206D0(v145);
        v60 = sub_234220BF8(v59, v51);
        if (*((_QWORD *)sub_233CB6588((_BYTE *)(v60 + 16)) + 1) <= 0x40uLL)
        {
          sub_2341C5BCC(v145, v54, 64);
          buf[0] = *(_BYTE *)(a2 + 16);
          if (buf[0])
            *(_OWORD *)&buf[8] = *v52;
          v61 = sub_2342206D0(buf);
          v62 = sub_234220BF8(v61, v51);
          v63 = sub_233CB6588((_BYTE *)(v62 + 16));
          v64 = *((_QWORD *)v63 + 1);
          v65 = v146;
          if ((unint64_t)v146 >= v64)
          {
            memcpy(*(void **)v145, *(const void **)v63, v64);
            sub_234138204((uint64_t)v145, v64);
            v65 = v146;
          }
          sub_233CAF22C(buf, *(uint64_t *)v145, v65);
          *((_BYTE *)v53 - 8) = 1;
          *v53 = *(_OWORD *)buf;
        }
        else
        {
LABEL_184:
          *((_BYTE *)v53 - 8) = 0;
        }
        ++v51;
        v53 = (_OWORD *)((char *)v53 + 40);
        v54 += 2;
      }
      while (v50 != v51);
    }
    result = sub_2342116FC(buf, a1 + 1144, v50);
    *(_BYTE *)(v13 + 16) = 1;
    *(_OWORD *)(v13 + 24) = *(_OWORD *)buf;
    a3 = v79;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v66 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v66, OS_LOG_TYPE_DEFAULT, "Setting Default NTP from parameters", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    buf[0] = *(_BYTE *)(a2 + 64);
    if (buf[0])
    {
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 72);
      *(_QWORD *)&v87 = *(_QWORD *)(a2 + 88);
    }
    result = sub_233C05DB8(buf);
    if (result[16])
    {
      v145[0] = *(_BYTE *)(a2 + 64);
      if (v145[0])
      {
        v146 = *(_OWORD *)(a2 + 72);
        v147 = *(_QWORD *)(a2 + 88);
      }
      result = sub_233C05DB8(v145);
      if (result[16])
      {
        if (*((_QWORD *)result + 1) > 0x80uLL)
          goto LABEL_208;
        sub_2341C5BCC(v145, a1 + 1672, 128);
        buf[0] = *(_BYTE *)(a2 + 64);
        if (buf[0])
        {
          *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 72);
          *(_QWORD *)&v87 = *(_QWORD *)(a2 + 88);
        }
        v67 = sub_233C05DB8(buf);
        if (v67[16])
        {
          v68 = *((_QWORD *)v67 + 1);
          if ((unint64_t)v146 >= v68)
          {
            memcpy(*(void **)v145, *(const void **)v67, v68);
            sub_234138204((uint64_t)v145, v68);
          }
          buf[0] = *(_BYTE *)(a2 + 64);
          if (buf[0])
          {
            *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 72);
            *(_QWORD *)&v87 = *(_QWORD *)(a2 + 88);
          }
          v69 = sub_233C05DB8(buf);
          if (v69[16])
          {
            result = sub_233CAF22C(&v80, a1 + 1672, *((_QWORD *)v69 + 1));
            *(_BYTE *)(v13 + 64) = 1;
            *(_OWORD *)(v13 + 72) = v80;
            *(_BYTE *)(v13 + 88) = 1;
            goto LABEL_208;
          }
        }
      }
LABEL_234:
      sub_2342232E8();
      return sub_2342206D0(v78);
    }
  }
LABEL_208:
  if (*(_BYTE *)(a2 + 668) && *(_BYTE *)(a2 + 632))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = (_BYTE *)sub_23421F230(a2, a3);
    if (*(_DWORD *)a3)
      return result;
    v70 = (void *)(a1 + 3770);
    buf[0] = *(_BYTE *)(a2 + 632);
    if (buf[0])
      *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 640);
    v71 = *(const void **)sub_233C05DB8(buf);
    v145[0] = *(_BYTE *)(a2 + 632);
    if (v145[0])
      v146 = *(_OWORD *)(a2 + 640);
    v72 = sub_233C05DB8(v145);
    memcpy(v70, v71, *((_QWORD *)v72 + 1));
    *(_BYTE *)(v13 + 632) = 1;
    *(_QWORD *)(v13 + 640) = v70;
    *(_QWORD *)(v13 + 648) = 16;
    buf[0] = *(_BYTE *)(a2 + 600);
    if (buf[0])
      *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 608);
    v73 = *(_QWORD *)sub_233C25EA4(buf);
    *(_BYTE *)(v13 + 600) = 1;
    *(_QWORD *)(v13 + 608) = v73;
    buf[0] = *(_BYTE *)(a2 + 616);
    if (buf[0])
      *(_QWORD *)&buf[8] = *(_QWORD *)(a2 + 624);
    v74 = *(_QWORD *)sub_233C25EA4(buf);
    *(_BYTE *)(v13 + 616) = 1;
    *(_QWORD *)(v13 + 624) = v74;
    buf[0] = *(_BYTE *)(a2 + 656);
    if (buf[0])
      buf[1] = *(_BYTE *)(a2 + 657);
    result = sub_234220C24(buf);
    v75 = *result;
    *(_BYTE *)(v13 + 656) = 1;
    *(_BYTE *)(v13 + 657) = v75;
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  v27 = 281;
LABEL_224:
  *(_DWORD *)(a3 + 16) = v27;
  return result;
}

_BYTE *sub_2342206D0(_BYTE *a1)
{
  if (!*a1)
    sub_2342585FC((uint64_t)a1);
  return a1 + 8;
}

BOOL sub_2342206F0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v3;

  if (!*a1)
    return 0;
  if (!*a2)
    return 1;
  v3 = *(_QWORD *)sub_233C05DB8(a1);
  return v3 != *(_QWORD *)sub_233C05DB8(a2);
}

BOOL sub_234220748(_BYTE *a1, _BYTE *a2)
{
  uint64_t v3;

  if (!*a1)
    return 0;
  if (!*a2)
    return 1;
  v3 = *(_QWORD *)sub_2342206D0(a1);
  return v3 != *(_QWORD *)sub_2342206D0(a2);
}

uint64_t sub_2342207A0(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v4 = *a2;
  *(_BYTE *)a1 = v4;
  if (v4)
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
  v5 = a2[4];
  *(_BYTE *)(a1 + 4) = v5;
  if (v5)
    *(_WORD *)(a1 + 6) = *((_WORD *)a2 + 3);
  v6 = a2[8];
  *(_BYTE *)(a1 + 8) = v6;
  if (v6)
    *(_BYTE *)(a1 + 9) = a2[9];
  v7 = a2[16];
  *(_BYTE *)(a1 + 16) = v7;
  if (v7)
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v8 = a2[40];
  *(_BYTE *)(a1 + 40) = v8;
  if (v8)
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v9 = a2[64];
  *(_BYTE *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v10;
  }
  v11 = a2[96];
  *(_BYTE *)(a1 + 96) = v11;
  if (v11)
  {
    v12 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v12;
  }
  v13 = a2[128];
  *(_BYTE *)(a1 + 128) = v13;
  if (v13)
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v14 = a2[152];
  *(_BYTE *)(a1 + 152) = v14;
  if (v14)
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  v15 = a2[176];
  *(_BYTE *)(a1 + 176) = v15;
  if (v15)
  {
    v16 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v16;
  }
  v17 = a2[216];
  *(_BYTE *)(a1 + 216) = v17;
  if (v17)
    *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  v18 = a2[240];
  *(_BYTE *)(a1 + 240) = v18;
  if (v18)
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v19 = a2[264];
  *(_BYTE *)(a1 + 264) = v19;
  if (v19)
  {
    v20 = *((_OWORD *)a2 + 18);
    *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(a1 + 288) = v20;
  }
  v21 = a2[304];
  *(_BYTE *)(a1 + 304) = v21;
  if (v21)
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  v22 = a2[328];
  *(_BYTE *)(a1 + 328) = v22;
  if (v22)
    *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  v23 = a2[352];
  *(_BYTE *)(a1 + 352) = v23;
  if (v23)
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  if (*(_BYTE *)(a1 + 376))
    sub_23413A7A4(a1 + 377, 16);
  v24 = a2[376];
  *(_BYTE *)(a1 + 376) = v24;
  if (v24)
    *(_OWORD *)(a1 + 377) = *(_OWORD *)(a2 + 377);
  v25 = a2[400];
  *(_BYTE *)(a1 + 400) = v25;
  if (v25)
    *(_QWORD *)(a1 + 408) = *((_QWORD *)a2 + 51);
  v26 = a2[416];
  *(_BYTE *)(a1 + 416) = v26;
  if (v26)
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v27 = a2[440];
  *(_BYTE *)(a1 + 440) = v27;
  if (v27)
    *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
  v28 = a2[464];
  *(_BYTE *)(a1 + 464) = v28;
  if (v28)
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  v29 = a2[488];
  *(_BYTE *)(a1 + 488) = v29;
  if (v29)
    *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
  v30 = a2[512];
  *(_BYTE *)(a1 + 512) = v30;
  if (v30)
    *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
  v31 = a2[528];
  *(_BYTE *)(a1 + 528) = v31;
  if (v31)
    *(_WORD *)(a1 + 530) = *((_WORD *)a2 + 265);
  v32 = a2[532];
  *(_BYTE *)(a1 + 532) = v32;
  if (v32)
    *(_WORD *)(a1 + 534) = *((_WORD *)a2 + 267);
  v33 = a2[536];
  *(_BYTE *)(a1 + 536) = v33;
  if (v33)
    *(_BYTE *)(a1 + 537) = a2[537];
  v34 = a2[538];
  *(_BYTE *)(a1 + 538) = v34;
  if (v34)
    *(_BYTE *)(a1 + 539) = a2[539];
  v35 = a2[540];
  *(_BYTE *)(a1 + 540) = v35;
  if (v35)
    *(_BYTE *)(a1 + 541) = a2[541];
  v36 = *((_OWORD *)a2 + 34);
  *(_QWORD *)(a1 + 560) = *((_QWORD *)a2 + 70);
  *(_OWORD *)(a1 + 544) = v36;
  v37 = a2[568];
  *(_BYTE *)(a1 + 568) = v37;
  if (v37)
    *(_BYTE *)(a1 + 569) = a2[569];
  v38 = a2[570];
  *(_BYTE *)(a1 + 570) = v38;
  if (v38)
    *(_WORD *)(a1 + 572) = *((_WORD *)a2 + 286);
  v39 = a2[574];
  *(_BYTE *)(a1 + 574) = v39;
  if (v39)
    *(_BYTE *)(a1 + 575) = a2[575];
  v40 = a2[576];
  *(_BYTE *)(a1 + 576) = v40;
  if (v40)
    *(_BYTE *)(a1 + 577) = a2[577];
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a2 + 73);
  v41 = a2[592];
  *(_BYTE *)(a1 + 592) = v41;
  if (v41)
    *(_BYTE *)(a1 + 593) = a2[593];
  v42 = a2[594];
  *(_BYTE *)(a1 + 594) = v42;
  if (v42)
    *(_BYTE *)(a1 + 595) = a2[595];
  v43 = a2[596];
  *(_BYTE *)(a1 + 596) = v43;
  if (v43)
    *(_BYTE *)(a1 + 597) = a2[597];
  v44 = a2[600];
  *(_BYTE *)(a1 + 600) = v44;
  if (v44)
    *(_QWORD *)(a1 + 608) = *((_QWORD *)a2 + 76);
  v45 = a2[616];
  *(_BYTE *)(a1 + 616) = v45;
  if (v45)
    *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
  v46 = a2[632];
  *(_BYTE *)(a1 + 632) = v46;
  if (v46)
    *(_OWORD *)(a1 + 640) = *((_OWORD *)a2 + 40);
  v47 = a2[656];
  *(_BYTE *)(a1 + 656) = v47;
  if (v47)
    *(_BYTE *)(a1 + 657) = a2[657];
  v48 = a2[660];
  *(_BYTE *)(a1 + 660) = v48;
  if (v48)
    *(_DWORD *)(a1 + 664) = *((_DWORD *)a2 + 166);
  *(_WORD *)(a1 + 668) = *((_WORD *)a2 + 334);
  return a1;
}

_BYTE *sub_234220B58(_BYTE *result)
{
  _BYTE *v1;

  v1 = result;
  result[128] = 0;
  result[152] = 0;
  result[176] = 0;
  result[216] = 0;
  result[240] = 0;
  result[264] = 0;
  result[304] = 0;
  result[328] = 0;
  result[352] = 0;
  if (result[376])
    result = (_BYTE *)sub_23413A7A4(result + 377, 16);
  v1[376] = 0;
  v1[416] = 0;
  v1[440] = 0;
  v1[464] = 0;
  v1[488] = 0;
  v1[16] = 0;
  v1[40] = 0;
  v1[64] = 0;
  v1[632] = 0;
  return result;
}

uint64_t sub_234220BD0(_QWORD *a1, unint64_t a2)
{
  if (a1[1] <= a2)
    sub_2342608B4((uint64_t)a1);
  return *a1 + 32 * a2;
}

uint64_t sub_234220BF8(_QWORD *a1, unint64_t a2)
{
  if (a1[1] <= a2)
    sub_2342608B4((uint64_t)a1);
  return *a1 + 40 * a2;
}

_BYTE *sub_234220C24(_BYTE *a1)
{
  if (!*a1)
    sub_2342585FC((uint64_t)a1);
  return a1 + 1;
}

uint64_t sub_234220C44(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_234220C4C(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  char *v10;
  const char *v11;
  _BYTE buf[24];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = sub_234220E44(a1, a2, a3);
  v6 = *a3;
  v7 = sub_234117B80(9u, "Controller");
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      v9 = sub_234226DD4(a2);
      *(_OWORD *)buf = *(_OWORD *)a3;
      *(_QWORD *)&buf[16] = *((_QWORD *)a3 + 2);
      v10 = sub_2341083CC((const char **)buf, 1);
      v11 = sub_234226DD4(v5);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2080;
      v14 = v11;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Going from commissioning step '%s' with lastErr = '%s' -> '%s'", buf, 0x20u);
    }
    if (sub_234114844(2u))
    {
      sub_234226DD4(a2);
      *(_OWORD *)buf = *(_OWORD *)a3;
      *(_QWORD *)&buf[16] = *((_QWORD *)a3 + 2);
      sub_2341083CC((const char **)buf, 1);
      sub_234226DD4(v5);
LABEL_10:
      sub_2341147D0(9u, 2);
    }
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = sub_234226DD4(a2);
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = sub_234226DD4(v5);
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Commissioning stage next step: '%s' -> '%s'", buf, 0x16u);
    }
    if (sub_234114844(2u))
    {
      sub_234226DD4(a2);
      sub_234226DD4(v5);
      goto LABEL_10;
    }
  }
  return v5;
}

uint64_t sub_234220E44(uint64_t a1, char a2, _DWORD *a3)
{
  BOOL v3;
  uint64_t result;
  _BYTE *v7;
  NSObject *v8;
  _BYTE v9[2];
  _BYTE v10[2];
  _BYTE v11[2];
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 681))
    v3 = 0;
  else
    v3 = *a3 == 0;
  if (v3)
  {
    while (2)
    {
      LOBYTE(result) = 2;
      switch(a2)
      {
        case 1:
          return result;
        case 2:
          if (*(_QWORD *)(a1 + 1824))
            return sub_234220C4C(a1, 19, a3);
          LOBYTE(result) = 3;
          return result;
        case 3:
          LOBYTE(result) = 4;
          return result;
        case 4:
          LOBYTE(result) = 5;
          return result;
        case 5:
          if (*(_BYTE *)(a1 + 1840))
            LOBYTE(result) = 6;
          else
            LOBYTE(result) = 10;
          return result;
        case 6:
          a2 = 7;
          if (*(_BYTE *)(a1 + 1841))
          {
            a2 = 7;
            LOBYTE(result) = 7;
            if (*(_BYTE *)(a1 + 24))
              return result;
          }
          continue;
        case 7:
          a2 = 8;
          if (*(_BYTE *)(a1 + 1904))
          {
            a2 = 8;
            LOBYTE(result) = 8;
            if (*(_BYTE *)(a1 + 48))
              return result;
          }
          continue;
        case 8:
          a2 = 9;
          if (*(_BYTE *)(a1 + 1842))
          {
            a2 = 9;
            LOBYTE(result) = 9;
            if (*(_BYTE *)(a1 + 72))
              return result;
          }
          continue;
        case 9:
          LOBYTE(result) = 10;
          return result;
        case 10:
          LOBYTE(result) = 11;
          return result;
        case 11:
          LOBYTE(result) = 12;
          return result;
        case 12:
          LOBYTE(result) = 13;
          return result;
        case 13:
          LOBYTE(result) = 14;
          return result;
        case 14:
          LOBYTE(result) = 15;
          return result;
        case 15:
          LOBYTE(result) = 16;
          return result;
        case 16:
          LOBYTE(result) = 17;
          return result;
        case 17:
          LOBYTE(result) = 18;
          return result;
        case 18:
          LOBYTE(result) = 19;
          return result;
        case 19:
          a2 = 20;
          if (*(_BYTE *)(a1 + 1843))
          {
            a2 = 20;
            LOBYTE(result) = 20;
            if (*(_BYTE *)(a1 + 104))
              return result;
          }
          continue;
        case 20:
          a2 = 22;
          if (!*(_BYTE *)(a1 + 1905))
            continue;
          if (*(_BYTE *)(a1 + 608))
          {
            LOBYTE(result) = 21;
            if (*(_BYTE *)(a1 + 624))
            {
              if (*(_BYTE *)(a1 + 640))
                LOBYTE(result) = 22;
              else
                LOBYTE(result) = 21;
            }
          }
          else
          {
            LOBYTE(result) = 21;
          }
          return result;
        case 21:
          LOBYTE(result) = 22;
          return result;
        case 22:
          if (*(_BYTE *)(a1 + 1800))
          {
            if (sub_234221508(a1))
            {
              LOBYTE(result) = 35;
            }
            else
            {
              v8 = sub_234117B80(9u, "Controller");
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "No NetworkScan enabled or WiFi/Thread endpoint not specified, skipping ScanNetworks", buf, 2u);
              }
              if (sub_234114844(2u))
                sub_2341147D0(9u, 2);
              LOBYTE(result) = sub_2342211C8(a1, 0, (uint64_t)a3);
            }
            return result;
          }
          sub_23422159C(a1);
          v11[0] = *(_BYTE *)(a1 + 604);
          if (!v11[0])
            goto LABEL_69;
          v11[1] = *(_BYTE *)(a1 + 605);
          v7 = v11;
LABEL_68:
          if (!*sub_233C05DD8(v7))
            goto LABEL_69;
          goto LABEL_5;
        case 23:
          LOBYTE(result) = 25;
          return result;
        case 24:
          LOBYTE(result) = 26;
          return result;
        case 25:
          LOBYTE(result) = 27;
          return result;
        case 26:
          LOBYTE(result) = 28;
          return result;
        case 27:
          v10[0] = *(_BYTE *)(a1 + 604);
          if (v10[0])
          {
            v10[1] = *(_BYTE *)(a1 + 605);
            if (*sub_233C05DD8(v10))
            {
              sub_23422159C(a1);
              goto LABEL_5;
            }
          }
          sub_23422159C(a1);
LABEL_69:
          LOBYTE(result) = 29;
          break;
        case 28:
          sub_23422159C(a1);
          v9[0] = *(_BYTE *)(a1 + 604);
          if (!v9[0])
            goto LABEL_69;
          v9[1] = *(_BYTE *)(a1 + 605);
          v7 = v9;
          goto LABEL_68;
        case 29:
          LOBYTE(result) = 30;
          return result;
        case 30:
          LOBYTE(result) = 33;
          return result;
        case 31:
          LOBYTE(result) = 32;
          return result;
        case 32:
          goto LABEL_5;
        case 33:
          LOBYTE(result) = 31;
          return result;
        case 35:
          LOBYTE(result) = 36;
          return result;
        case 36:
        case 38:
          return sub_2342211C8(a1, 0, (uint64_t)a3);
        case 37:
          LOBYTE(result) = 38;
          return result;
        default:
          LOBYTE(result) = 0;
          return result;
      }
      break;
    }
  }
  else
  {
LABEL_5:
    LOBYTE(result) = 34;
  }
  return result;
}

uint64_t sub_2342211C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (sub_234221490(a1))
  {
    if (*(_WORD *)(a1 + 1808))
      v5 = 24;
    else
      v5 = 23;
    if (*(_WORD *)(a1 + 1808))
      v6 = 23;
    else
      v6 = 24;
    if (*(_BYTE *)(a1 + 680))
      return v6;
    else
      return v5;
  }
  else if (!*(_BYTE *)(a1 + 184) || *(__int16 *)(a1 + 1808) == -1)
  {
    if (!*(_BYTE *)(a1 + 248) || *(__int16 *)(a1 + 1812) == -1)
    {
      v8 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Required network information not provided in commissioning parameters", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      v9 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        if (*(_BYTE *)(a1 + 184))
          v10 = "yes";
        else
          v10 = "no";
        if (*(_BYTE *)(a1 + 248))
          v11 = "yes";
        else
          v11 = "no";
        *(_DWORD *)buf = 136315394;
        v17 = v10;
        v18 = 2080;
        v19 = v11;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Parameters supplied: wifi (%s) thread (%s)", buf, 0x16u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      v12 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (*(__int16 *)(a1 + 1808) == -1)
          v13 = "no";
        else
          v13 = "yes";
        if (*(__int16 *)(a1 + 1812) == -1)
          v14 = "no";
        else
          v14 = "yes";
        *(_DWORD *)buf = 136315394;
        v17 = v13;
        v18 = 2080;
        v19 = v14;
        _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Device supports: wifi (%s) thread(%s)", buf, 0x16u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
      *(_DWORD *)(a3 + 16) = 335;
      return 34;
    }
    else
    {
      return 24;
    }
  }
  else
  {
    return 23;
  }
}

BOOL sub_234221490(uint64_t a1)
{
  _BYTE v3[2];

  v3[0] = *(_BYTE *)(a1 + 548);
  if (v3[0]
    && (v3[1] = *(_BYTE *)(a1 + 549), *sub_233C05DD8(v3))
    && *(_BYTE *)(a1 + 184)
    && *(__int16 *)(a1 + 1808) != -1
    && *(_BYTE *)(a1 + 248))
  {
    return *(__int16 *)(a1 + 1812) != -1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_234221508(uint64_t a1)
{
  _BYTE v3[2];
  _BYTE v4[2];

  v4[0] = *(_BYTE *)(a1 + 600);
  if (v4[0])
  {
    v4[1] = *(_BYTE *)(a1 + 601);
    if (*sub_233C05DD8(v4))
    {
      if (*(__int16 *)(a1 + 1808) != -1)
        return 1;
    }
  }
  v3[0] = *(_BYTE *)(a1 + 602);
  if (v3[0] && (v3[1] = *(_BYTE *)(a1 + 603), *sub_233C05DD8(v3)))
    return *(__int16 *)(a1 + 1812) != -1;
  else
    return 0;
}

uint64_t sub_23422159C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6[4];
  int v7;
  _BYTE v8[2];
  __int16 v9;
  char v10[4];
  int v11;

  if (*(_BYTE *)(result + 12))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 696);
    if (v2)
    {
      v3 = *(_QWORD *)(result + 688);
      v4 = *(unsigned __int8 *)(v3 + 4344);
      v8[0] = *(_BYTE *)(result + 12);
      v9 = *(_WORD *)(result + 14);
      v5 = *(unsigned __int16 *)sub_233C05D98(v8);
      sub_234221658(v1, *(_QWORD *)(v1 + 696), 4, (uint64_t)v6);
      v10[0] = v6[0];
      if (v6[0])
        v11 = v7;
      return sub_234231468(v3, v2, v4, v5, v10, (uint64_t)sub_234221800, (void (*)(uint64_t, __int128 *))sub_2342218D0, 1);
    }
  }
  return result;
}

_QWORD *sub_234221658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  NSObject *v8;
  int v9;
  int v10;
  _QWORD *result;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  uint64_t buf;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a3 > 26)
  {
    if (a3 == 28)
    {
      v10 = *(unsigned __int8 *)(a1 + 1814);
    }
    else
    {
      if (a3 != 27)
      {
LABEL_14:
        v6 = 2000;
        goto LABEL_15;
      }
      v8 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(unsigned __int8 *)(a1 + 1810);
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v9;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Setting wifi connection time min = %u", (uint8_t *)&buf, 8u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      v10 = *(unsigned __int8 *)(a1 + 1810);
    }
    v6 = 1000 * v10;
    goto LABEL_15;
  }
  v6 = 7000;
  if (a3 != 15 && a3 != 19)
    goto LABEL_14;
LABEL_15:
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&buf, a2);
  if ((_BYTE)buf)
  {
    v12 = (uint64_t *)sub_233CB6588(&buf);
    result = (_QWORD *)sub_2341CD548(*v12, v6);
    v13 = buf;
    if (result <= 0x7530)
      v14 = 30000;
    else
      v14 = (int)result;
    *(_BYTE *)a4 = 1;
    *(_DWORD *)(a4 + 4) = v14;
    if (v13)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  }
  else
  {
    if (v6 <= 0x7530)
      v15 = 30000;
    else
      v15 = v6;
    *(_BYTE *)a4 = 1;
    *(_DWORD *)(a4 + 4) = v15;
  }
  return result;
}

uint64_t sub_234221800(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t result;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67109120;
    v7 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "ExtendFailsafe received ArmFailSafe response errorCode=%u", buf, 8u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(9u, 2);
  return result;
}

uint64_t sub_2342218D0(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[4];
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    v4 = sub_2341083CC((const char **)&v8, 1);
    *(_DWORD *)buf = 136315138;
    v11 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "ExtendFailsafe received failure response %s\n", buf, 0xCu);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
  {
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)&v6, 1);
    return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_2342219D0(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = 0;
  switch(*a2)
  {
    case 0x17:
    case 0x1B:
      result = *(unsigned __int16 *)(a1 + 1808);
      break;
    case 0x18:
    case 0x1C:
      result = *(unsigned __int16 *)(a1 + 1812);
      break;
    default:
      return result;
  }
  return result;
}

void sub_234221A10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  _BYTE v13[8];
  uint8_t buf[16];
  uint64_t v15;

  if (a2)
  {
    if (a3 && ((*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(buf, a3), buf[0]))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
      *(_BYTE *)(a1 + 681) = 0;
      *(_QWORD *)(a1 + 688) = a2;
      *(_QWORD *)(a1 + 696) = a3;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(buf, a3);
      v8 = (uint64_t *)sub_233C25EA4(buf);
      *(_BYTE *)(a1 + 1800) = *(_BYTE *)(sub_2341CD3C0(*v8) + 112) == 2;
      if (buf[0])
        (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
      *(_OWORD *)buf = xmmword_250517490;
      v15 = 596;
      v9 = sub_234220C4C(a1, 1u, (int *)buf);
      sub_234221658(a1, *(_QWORD *)(a1 + 696), v9, (uint64_t)v13);
      sub_23423856C();
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
      v12 = 600;
    }
    else
    {
      v10 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Device proxy secure session error", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
      v12 = 588;
    }
  }
  else
  {
    v11 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Invalid DeviceCommissioner", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/AutoCommissioner.cpp";
    v12 = 582;
  }
  *(_DWORD *)(a4 + 16) = v12;
}

void sub_234221CA4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, __int128 *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v17;
  __int128 v18;
  _BYTE v19[8];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a1 + 2402;
  v22 = a1 + 2402;
  v23 = 400;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  sub_2341D9834(a6, a7, (uint64_t)&v22, (uint64_t)a9);
  if (!*(_DWORD *)a9)
  {
    sub_233BF7114(&v21, v22, v23);
    *(_BYTE *)(a1 + 312) = 1;
    *(_OWORD *)(a1 + 320) = v21;
    *(_QWORD *)&v21 = a1 + 2002;
    *((_QWORD *)&v21 + 1) = 400;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    sub_2341D9834(a2, a3, (uint64_t)&v21, (uint64_t)a9);
    if (!*(_DWORD *)a9)
    {
      sub_233BF7114(&v20, v21, *((uint64_t *)&v21 + 1));
      *(_BYTE *)(a1 + 336) = 1;
      *(_OWORD *)(a1 + 344) = v20;
      sub_234221658(a1, *(_QWORD *)(a1 + 696), 18, (uint64_t)v19);
      sub_23423856C();
      if (a5)
      {
        *(_QWORD *)&v20 = v17;
        *((_QWORD *)&v20 + 1) = 400;
        a9[1] = 0;
        a9[2] = 0;
        *a9 = 0;
        sub_2341D9834(a4, a5, (uint64_t)&v20, (uint64_t)a9);
        if (*(_DWORD *)a9)
          return;
        sub_233BF7114(&v18, v20, *((uint64_t *)&v20 + 1));
        *(_BYTE *)(a1 + 360) = 1;
        *(_OWORD *)(a1 + 368) = v18;
      }
      else
      {
        *(_BYTE *)(a1 + 360) = 1;
        *(_QWORD *)(a1 + 368) = 0;
        *(_QWORD *)(a1 + 376) = 0;
      }
      sub_234221E68(a1 + 8, a8);
      *(_BYTE *)(a1 + 408) = 1;
      *(_QWORD *)(a1 + 416) = a10;
      *(_DWORD *)a9 = 0;
      a9[1] = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a9 + 4) = 682;
    }
  }
}

uint64_t sub_234221E68(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(a1 + 376))
    sub_23413A7A4(a1 + 377, 16);
  *(_BYTE *)(a1 + 376) = 1;
  *(_OWORD *)(a1 + 377) = v4;
  sub_23413A7A4(&v4, 16);
  return a1;
}

void sub_234221EF8(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  __int16 v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  int v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  NSObject *v29;
  char v30;
  char v31;
  _QWORD *v32;
  char v33;
  void *v34;
  void *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  size_t v41;
  NSObject *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  __int128 *v59;
  _QWORD *v60;
  _QWORD *v61;
  _OWORD *v62;
  NSObject *v63;
  int v64;
  uint64_t v65;
  size_t v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unsigned __int8 v74;
  char v75;
  unsigned __int8 v76;
  __int16 v77;
  unsigned __int8 v78;
  char v79;
  unsigned __int8 v80;
  char v81;
  _BYTE buf[24];
  uint64_t (**v83)();
  __int128 v84;
  char v85;
  uint64_t v86;
  char v87;
  uint8_t v88[24];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v74 = 0;
  v76 = 0;
  v78 = 0;
  v80 = 0;
  v72 = *a2;
  v73 = *((_QWORD *)a2 + 2);
  v8 = *(_DWORD *)a2;
  v9 = sub_234117B80(9u, "Controller");
  v10 = v9;
  if (!v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v18 = sub_234226DD4(*((unsigned __int8 *)a3 + 104));
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Successfully finished commissioning step '%s'", buf, 0xCu);
    }
    if (sub_234114844(2u))
    {
      sub_234226DD4(*((unsigned __int8 *)a3 + 104));
      sub_2341147D0(9u, 2);
    }
    v19 = *((unsigned __int8 *)a3 + 104);
    switch(*((_BYTE *)a3 + 104))
    {
      case 3:
        v20 = sub_234222BD8(a3);
        v21 = v20[1];
        *(_OWORD *)(a1 + 1808) = *v20;
        *(_OWORD *)(a1 + 1824) = v21;
        v22 = v20[4];
        v23 = v20[5];
        v24 = v20[3];
        *(_OWORD *)(a1 + 1840) = v20[2];
        *(_OWORD *)(a1 + 1888) = v23;
        *(_OWORD *)(a1 + 1872) = v22;
        *(_OWORD *)(a1 + 1856) = v24;
        if (!*(_BYTE *)(a1 + 8))
        {
          v25 = *(_WORD *)(a1 + 1832);
          if (v25)
          {
            *(_BYTE *)(a1 + 8) = 1;
            *(_WORD *)(a1 + 10) = v25;
          }
        }
        v26 = *(_WORD *)(a1 + 1820);
        *(_BYTE *)(a1 + 536) = 1;
        *(_WORD *)(a1 + 538) = v26;
        v27 = *(_WORD *)(a1 + 1822);
        *(_BYTE *)(a1 + 540) = 1;
        *(_WORD *)(a1 + 542) = v27;
        LOBYTE(v27) = *(_BYTE *)(a1 + 1834);
        *(_BYTE *)(a1 + 544) = 1;
        *(_BYTE *)(a1 + 545) = v27;
        LOBYTE(v27) = *(_BYTE *)(a1 + 1835);
        *(_BYTE *)(a1 + 546) = 1;
        *(_BYTE *)(a1 + 547) = v27;
        *(_BYTE *)(a1 + 1904) = 0;
        LOBYTE(v27) = *(_BYTE *)(a1 + 1856);
        *(_BYTE *)(a1 + 548) = 1;
        *(_BYTE *)(a1 + 549) = v27;
        if (*(_BYTE *)(a1 + 677))
        {
          v28 = *(_QWORD *)(a1 + 1848);
          if (v28)
          {
            *(_BYTE *)(a1 + 520) = 1;
            *(_QWORD *)(a1 + 528) = v28;
          }
        }
        if (*(_BYTE *)(a1 + 676))
        {
          if (*(_BYTE *)(a1 + 1864) && *(_BYTE *)(a1 + 1865))
          {
            *(_BYTE *)(a1 + 1905) = 1;
            v29 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_INFO, "AutoCommissioner: ICD supports the check-in protocol.", buf, 2u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(9u, 3);
          }
          else if (*(_BYTE *)(a1 + 668))
          {
            v69 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v69, OS_LOG_TYPE_INFO, "AutoCommissioner: Clear ICD StayActiveDurationMsec", buf, 2u);
            }
            if (sub_234114844(3u))
              sub_2341147D0(9u, 3);
            *(_BYTE *)(a1 + 668) = 0;
          }
        }
        goto LABEL_71;
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 0xD:
      case 0xE:
      case 0x10:
        goto LABEL_71;
      case 7:
        *(_BYTE *)(a1 + 1904) = *(_BYTE *)sub_234222BFC(a3);
        goto LABEL_71;
      case 0xA:
        v37 = sub_2341D65EC(a3);
        sub_234222C20(a1, (uint64_t)v37, (uint64_t)buf);
        goto LABEL_71;
      case 0xB:
        v38 = sub_2341D65EC(a3);
        sub_234222D38(a1, (uint64_t)v38, (uint64_t)buf);
        goto LABEL_71;
      case 0xC:
        v39 = sub_2341D660C(a3);
        v40 = sub_2341D660C(a3);
        v41 = v39[1];
        if (v41 >= 0x385)
        {
          v42 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            v43 = v39[1];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v43;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 900;
            _os_log_impl(&dword_233BF3000, v42, OS_LOG_TYPE_ERROR, "AutoCommissioner attestationElements buffer size %u larger than cache size %u", buf, 0xEu);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          *(_DWORD *)a4 = 4;
          a4[1] = "src/controller/AutoCommissioner.cpp";
          v36 = 811;
          goto LABEL_84;
        }
        v61 = v40;
        memcpy((void *)(a1 + 2804), (const void *)*v39, v41);
        *(_WORD *)(a1 + 2802) = v39[1];
        sub_233BF7114(buf, a1 + 2804, v39[1]);
        *(_BYTE *)(a1 + 424) = 1;
        v62 = (_OWORD *)(a1 + 432);
        *(_OWORD *)(a1 + 432) = *(_OWORD *)buf;
        v63 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
        {
          v64 = *((_DWORD *)v39 + 2);
          buf[0] = *(_BYTE *)(a1 + 424);
          if (buf[0])
            *(_OWORD *)&buf[8] = *v62;
          v65 = *((_QWORD *)sub_233C05DB8(buf) + 1);
          *(_DWORD *)v88 = 67109376;
          *(_DWORD *)&v88[4] = v64;
          *(_WORD *)&v88[8] = 1024;
          *(_DWORD *)&v88[10] = v65;
          _os_log_impl(&dword_233BF3000, v63, OS_LOG_TYPE_INFO, "AutoCommissioner setting attestationElements buffer size %u/%u", v88, 0xEu);
        }
        if (sub_234114844(3u))
        {
          buf[0] = *(_BYTE *)(a1 + 424);
          if (buf[0])
            *(_OWORD *)&buf[8] = *v62;
          sub_233C05DB8(buf);
          sub_2341147D0(9u, 3);
        }
        v66 = v61[3];
        if (v66 >= 0x41)
        {
          v67 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            v68 = v61[3];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v68;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 64;
            _os_log_impl(&dword_233BF3000, v67, OS_LOG_TYPE_ERROR, "AutoCommissioner attestationSignature buffer size %u larger than cache size %u", buf, 0xEu);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          *(_DWORD *)a4 = 4;
          a4[1] = "src/controller/AutoCommissioner.cpp";
          v36 = 826;
          goto LABEL_84;
        }
        memcpy((void *)(a1 + 3706), (const void *)v61[2], v66);
        *(_WORD *)(a1 + 3704) = v61[3];
        sub_233BF7114(buf, a1 + 3706, v61[3]);
        *(_BYTE *)(a1 + 448) = 1;
        *(_OWORD *)(a1 + 456) = *(_OWORD *)buf;
        v70 = *(_QWORD *)(a1 + 704);
        if (!v70)
          goto LABEL_71;
        *(_QWORD *)buf = a1 + 1970;
        *(_QWORD *)&buf[8] = 32;
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 40))(v70, buf);
        if (!*(_DWORD *)a4)
        {
          sub_233BF7114(&v71, a1 + 1970, 32);
          *(_BYTE *)(a1 + 136) = 1;
          *(_OWORD *)(a1 + 144) = v71;
          goto LABEL_71;
        }
        return;
      case 0xF:
        *(_OWORD *)buf = *(_OWORD *)sub_234222E54(a3);
        v44 = *((_OWORD *)sub_234222E54(a3) + 1);
        *(_BYTE *)(a1 + 272) = 1;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 296) = v44;
        goto LABEL_71;
      case 0x11:
        v50 = sub_234222E78(a3);
        v51 = *v50;
        v52 = v50[1];
        v53 = sub_234222E78(a3);
        v54 = v53[2];
        v55 = v53[3];
        v56 = sub_234222E78(a3);
        v57 = v56[4];
        v58 = v56[5];
        v59 = (__int128 *)sub_234222E78(a3)[6];
        v60 = sub_234222E78(a3);
        sub_234221CA4(a1, v51, v52, v54, v55, v57, v58, v59, a4, v60[7]);
        return;
      default:
        if ((v19 - 30) < 2)
        {
          v32 = sub_234222E9C(a3);
          *(_QWORD *)(a1 + 720) = v32[1];
          *(_QWORD *)(a1 + 728) = v32[2];
          sub_2341CD920(a1 + 736, (uint64_t)(v32 + 3));
          v33 = *((_BYTE *)v32 + 72);
          *(_QWORD *)(a1 + 776) = v32[8];
          *(_BYTE *)(a1 + 784) = v33;
          goto LABEL_71;
        }
        if (v19 != 34)
          goto LABEL_71;
        if (sub_234221490(a1) && *(_BYTE *)(a1 + 680))
          *(_BYTE *)(a1 + 680) = 0;
        v34 = *(void **)(a1 + 1928);
        if (v34)
          j__free(v34);
        *(_WORD *)(a1 + 1936) = 0;
        *(_QWORD *)(a1 + 1928) = 0;
        v35 = *(void **)(a1 + 1912);
        if (v35)
          j__free(v35);
        *(_WORD *)(a1 + 1920) = 0;
        *(_QWORD *)(a1 + 1912) = 0;
        *(_QWORD *)(a1 + 696) = 0;
        *(_OWORD *)&buf[8] = 0u;
        *(_QWORD *)buf = &unk_2505174E0;
        v84 = 0u;
        v83 = &off_250514968;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        *(_OWORD *)(a1 + 720) = 0u;
        sub_2341CD974(a1 + 736, (uint64_t)&v83);
        *(_QWORD *)(a1 + 776) = v86;
        *(_BYTE *)(a1 + 784) = v87;
        *(_QWORD *)buf = &unk_2505174E0;
        sub_2341CD754(&v83);
        memset(v88, 0, 14);
        *(_OWORD *)buf = 0u;
        *(_QWORD *)(a1 + 1808) = 0xFFFF0000FFFFLL;
        *(_DWORD *)(a1 + 1816) = 0xFFFF;
        *(_QWORD *)(a1 + 1820) = *(_QWORD *)v88;
        *(_QWORD *)(a1 + 1826) = 0;
        *(_WORD *)(a1 + 1834) = 514;
        *(_QWORD *)(a1 + 1836) = 0;
        *(_DWORD *)(a1 + 1844) = 257;
        *(_QWORD *)(a1 + 1848) = 0;
        *(_BYTE *)(a1 + 1856) = 1;
        *(_OWORD *)(a1 + 1857) = 0u;
        *(_QWORD *)(a1 + 1873) = 0;
        *(_QWORD *)(a1 + 1880) = 0;
        *(_OWORD *)(a1 + 1888) = *(_OWORD *)buf;
        *(_BYTE *)(a1 + 1904) = 0;
        *(_DWORD *)a4 = 0;
        a4[1] = "src/controller/AutoCommissioner.cpp";
        v36 = 875;
        break;
    }
    goto LABEL_84;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v11 = sub_234226DD4(*((unsigned __int8 *)a3 + 104));
    *(_OWORD *)buf = *a2;
    *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 2);
    v12 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v12;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Error on commissioning step '%s': '%s'", buf, 0x16u);
  }
  if (sub_234114844(1u))
  {
    sub_234226DD4(*((unsigned __int8 *)a3 + 104));
    *(_OWORD *)buf = *a2;
    *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 1);
  }
  v13 = *((_BYTE *)a3 + 104);
  v74 = 1;
  v75 = v13;
  v14 = *a3;
  if (*a3 == 8)
  {
    v30 = *(_BYTE *)sub_234222BB4(a3);
    v80 = 1;
    v81 = v30;
    if (sub_234221508(a1))
    {
      if (!(_DWORD)v72)
      {
        v72 = *a2;
        v73 = *((_QWORD *)a2 + 2);
      }
      *(_DWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a2 + 4) = 731;
      *((_BYTE *)a3 + 104) = 35;
    }
  }
  else if (v14 == 7)
  {
    v31 = *(_BYTE *)sub_234222B90(a3);
    v78 = 1;
    v79 = v31;
  }
  else if (v14 == 6)
  {
    v15 = *(_WORD *)sub_234222B6C(a3);
    v76 = 1;
    v77 = v15;
    if (*(_WORD *)sub_234222B6C(a3) == 306 || *(_WORD *)sub_234222B6C(a3) == 305)
    {
      v16 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed device attestation. Device vendor and/or product ID do not match the IDs expected. Verify DAC certificate chain and certification declaration to ensure spec rules followed.", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
    }
    if (*((_BYTE *)a3 + 104) == 13)
    {
      v17 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Failed verifying attestation information. Now checking DAC chain revoked status.", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      *(_DWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
      *((_DWORD *)a2 + 4) = 710;
      goto LABEL_71;
    }
  }
  if (*(_DWORD *)a2
    && sub_234221490(a1)
    && !*(_BYTE *)(a1 + 680)
    && *sub_2340F3B54(&v74) >= 0x17u
    && *sub_2340F3B54(&v74) <= 0x21u)
  {
    *(_BYTE *)(a1 + 680) = 1;
    *(_DWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = "src/controller/AutoCommissioner.cpp";
    *((_DWORD *)a2 + 4) = 744;
    *((_BYTE *)a3 + 104) = 37;
  }
LABEL_71:
  v45 = sub_234220C4C(a1, *((unsigned __int8 *)a3 + 104), (int *)a2);
  if (!v45)
  {
    *(_DWORD *)a4 = 3;
    a4[1] = "src/controller/AutoCommissioner.cpp";
    v36 = 884;
LABEL_84:
    *((_DWORD *)a4 + 4) = v36;
    return;
  }
  if (!(_DWORD)v72)
  {
    v72 = *a2;
    v73 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(a1 + 568) = v73;
  *(_OWORD *)(a1 + 552) = v72;
  v46 = v74;
  *(_BYTE *)(a1 + 576) = v74;
  if (v46)
    *(_BYTE *)(a1 + 577) = v75;
  v47 = v76;
  *(_BYTE *)(a1 + 578) = v76;
  if (v47)
    *(_WORD *)(a1 + 580) = v77;
  v48 = v78;
  *(_BYTE *)(a1 + 582) = v78;
  if (v48)
    *(_BYTE *)(a1 + 583) = v79;
  v49 = v80;
  *(_BYTE *)(a1 + 584) = v80;
  if (v49)
    *(_BYTE *)(a1 + 585) = v81;
  sub_234222EC0(a1, v45, (uint64_t)a4);
}

_QWORD *sub_234222B6C(_QWORD *a1)
{
  if (*a1 != 6)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222B90(_QWORD *a1)
{
  if (*a1 != 7)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222BB4(_QWORD *a1)
{
  if (*a1 != 8)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222BD8(_QWORD *a1)
{
  if (*a1 != 5)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222BFC(_QWORD *a1)
{
  if (*a1 != 9)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

void sub_234222C20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  void *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  __int128 v12;

  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v11 = *(void **)(a1 + 1928);
    if (v11)
      j__free(v11);
    v9 = 0;
    *(_WORD *)(a1 + 1936) = 0;
    *(_QWORD *)(a1 + 1928) = 0;
    v10 = 995;
    goto LABEL_17;
  }
  if (v5 > 0x258)
  {
    v10 = 998;
LABEL_16:
    v9 = 47;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 1936))
  {
    v7 = *(void **)(a1 + 1928);
    if (v7)
      j__free(v7);
    *(_WORD *)(a1 + 1936) = 0;
    *(_QWORD *)(a1 + 1928) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >> 16)
    {
      v10 = 1004;
      goto LABEL_16;
    }
  }
  v8 = *(void **)(a1 + 1928);
  if (!v8)
  {
    v5 = (size_t)sub_234114774(v5);
    *(_QWORD *)(a1 + 1928) = v5;
    if (!v5)
    {
      v10 = 1009;
      v9 = 11;
      goto LABEL_17;
    }
    v8 = (void *)v5;
    LOWORD(v5) = *(_WORD *)(a2 + 8);
  }
  *(_WORD *)(a1 + 1936) = v5;
  memcpy(v8, *(const void **)a2, (unsigned __int16)v5);
  sub_233BF7114(&v12, *(_QWORD *)(a1 + 1928), *(unsigned __int16 *)(a1 + 1936));
  v9 = 0;
  *(_BYTE *)(a1 + 472) = 1;
  *(_OWORD *)(a1 + 480) = v12;
  v10 = 1014;
LABEL_17:
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

void sub_234222D38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  void *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  __int128 v12;

  v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v11 = *(void **)(a1 + 1912);
    if (v11)
      j__free(v11);
    v9 = 0;
    *(_WORD *)(a1 + 1920) = 0;
    *(_QWORD *)(a1 + 1912) = 0;
    v10 = 958;
    goto LABEL_17;
  }
  if (v5 > 0x258)
  {
    v10 = 961;
LABEL_16:
    v9 = 47;
    goto LABEL_17;
  }
  if (*(_WORD *)(a1 + 1920))
  {
    v7 = *(void **)(a1 + 1912);
    if (v7)
      j__free(v7);
    *(_WORD *)(a1 + 1920) = 0;
    *(_QWORD *)(a1 + 1912) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >> 16)
    {
      v10 = 967;
      goto LABEL_16;
    }
  }
  v8 = *(void **)(a1 + 1912);
  if (!v8)
  {
    v5 = (size_t)sub_234114774(v5);
    *(_QWORD *)(a1 + 1912) = v5;
    if (!v5)
    {
      v10 = 972;
      v9 = 11;
      goto LABEL_17;
    }
    v8 = (void *)v5;
    LOWORD(v5) = *(_WORD *)(a2 + 8);
  }
  *(_WORD *)(a1 + 1920) = v5;
  memcpy(v8, *(const void **)a2, (unsigned __int16)v5);
  sub_233BF7114(&v12, *(_QWORD *)(a1 + 1912), *(unsigned __int16 *)(a1 + 1920));
  v9 = 0;
  *(_BYTE *)(a1 + 496) = 1;
  *(_OWORD *)(a1 + 504) = v12;
  v10 = 977;
LABEL_17:
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v10;
}

_QWORD *sub_234222E54(_QWORD *a1)
{
  if (*a1 != 2)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222E78(_QWORD *a1)
{
  if (*a1 != 3)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

_QWORD *sub_234222E9C(_QWORD *a1)
{
  if (*a1 != 4)
    sub_23425E264((uint64_t)a1);
  return a1 + 1;
}

void sub_234222EC0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  _BYTE v16[8];
  uint8_t buf[8];
  __int128 v18;

  if ((a2 & 0xFE) == 0x20 || a2 == 34 && *(_QWORD *)(a1 + 776))
  {
    v6 = a1 + 712;
LABEL_6:
    if (a2 == 8)
    {
      buf[0] = *(_BYTE *)(a1 + 48);
      if (buf[0])
        v18 = *(_OWORD *)(a1 + 56);
      if (*((_QWORD *)sub_2342206D0(buf) + 1) > (unint64_t)*(unsigned __int8 *)(a1 + 1845))
      {
        buf[0] = *(_BYTE *)(a1 + 48);
        if (buf[0])
          v18 = *(_OWORD *)(a1 + 56);
        v10 = sub_2342206D0(buf);
        v11 = sub_234223188(v10, 0, *(unsigned __int8 *)(a1 + 1845));
        *(_BYTE *)(a1 + 48) = 1;
        *(_QWORD *)(a1 + 56) = v11;
        *(_QWORD *)(a1 + 64) = v12;
      }
    }
    else if (a2 == 7)
    {
      buf[0] = *(_BYTE *)(a1 + 24);
      if (buf[0])
        v18 = *(_OWORD *)(a1 + 32);
      if (*((_QWORD *)sub_2342206D0(buf) + 1) > (unint64_t)*(unsigned __int8 *)(a1 + 1844))
      {
        buf[0] = *(_BYTE *)(a1 + 24);
        if (buf[0])
          v18 = *(_OWORD *)(a1 + 32);
        v7 = sub_2342206D0(buf);
        v8 = sub_23422313C(v7, 0, *(unsigned __int8 *)(a1 + 1844));
        *(_BYTE *)(a1 + 24) = 1;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = v9;
      }
    }
    sub_234221658(a1, v6, a2, (uint64_t)v16);
    sub_23423856C();
    v13 = 0;
    v14 = 940;
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(a1 + 696);
  if (v6)
    goto LABEL_6;
  v15 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Invalid device for commissioning", buf, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(9u, 1);
  v14 = 915;
  v13 = 3;
LABEL_21:
  *(_DWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = "src/controller/AutoCommissioner.cpp";
  *(_DWORD *)(a3 + 16) = v14;
}

uint64_t sub_234223110(uint64_t a1, int a2)
{
  if ((a2 & 0xFE) == 0x20 || a2 == 34 && *(_QWORD *)(a1 + 776))
    return a1 + 712;
  else
    return *(_QWORD *)(a1 + 696);
}

uint64_t sub_23422313C(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
    sub_23425AFB0((uint64_t)a1);
  if (v5 < a3)
    sub_23425B048((uint64_t)a1);
  sub_2342116FC(&v7, *a1 + 40 * a2, a3);
  return v7;
}

uint64_t sub_234223188(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v7;

  v3 = a1[1];
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
    sub_23425AFB0((uint64_t)a1);
  if (v5 < a3)
    sub_23425B048((uint64_t)a1);
  sub_2342116FC(&v7, *a1 + 32 * a2, a3);
  return v7;
}

void sub_2342231D0(_QWORD *a1)
{
  *a1 = &unk_2505174E0;
  sub_2341CD754(a1 + 3);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234223214(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&v5, a1);
    v2 = (uint64_t *)sub_233C25EA4(&v5);
    v3 = sub_2341CD3C0(*v2);
    sub_2341CB7C4(v3);
    if ((_BYTE)v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  }
  result = sub_2341CD6FC((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

_BYTE *sub_23422329C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *result;
  char v4;
  int v5;
  uint64_t v6;

  v5 = *(unsigned __int8 *)(a1 + 48);
  result = (_BYTE *)(a1 + 48);
  v4 = v5;
  if (v5)
  {
    v6 = *(_QWORD *)sub_233C25EA4(result);
    *(_QWORD *)(a2 + 8) = v6;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v4 = 1;
  }
  *(_BYTE *)a2 = v4;
  return result;
}

uint64_t sub_2342232E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

double sub_2342232E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  *(_QWORD *)&result = sub_2342232FC(v0, v1, v2).n128_u64[0];
  return result;
}

__n128 sub_2342232FC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[7];
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Device Controller Factory already initialized...", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    *(_DWORD *)(a3 + 16) = 58;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)(a2 + 106);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 104);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 96);
    v11[5] = *(_OWORD *)(a2 + 80);
    v11[6] = v9;
    v10 = *(_OWORD *)(a2 + 64);
    v11[3] = v8;
    v11[4] = v10;
    v11[2] = v7;
    sub_234223418(a1, (uint64_t)v11, (_QWORD *)a3);
  }
  return result;
}

void sub_234223418(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  int v33;
  void (***v34)(_QWORD);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  char v68;
  __int16 v69;
  int v70;
  uint64_t v71;
  char v72;
  uint8_t buf[8];
  char v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (void *)sub_2342248D0(v6);
    j__free(v7);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v89 = 0;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v78 = 0u;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  if (byte_2542530C0)
  {
    *(_DWORD *)a3 = 0;
    a3[1] = "src/include/platform/PlatformManager.h";
    *((_DWORD *)a3 + 4) = 368;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_2341BE590((uint64_t)&byte_2542530C0, a3);
    v32 = *(_DWORD *)a3;
    byte_2542530C0 = *(_DWORD *)a3 == 0;
    if (v32)
      goto LABEL_41;
  }
  *(_QWORD *)&v78 = sub_2341B1F60(v6);
  v8 = sub_2341B3D90();
  *(_QWORD *)&v79 = v8;
  v10 = sub_2341B3E10();
  *((_QWORD *)&v78 + 1) = v10;
  if (!*(_QWORD *)(a2 + 64) && !*(_QWORD *)(a2 + 80))
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    v33 = 135;
    goto LABEL_40;
  }
  if (!*(_QWORD *)(a2 + 40))
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    v33 = 136;
    goto LABEL_40;
  }
  v11 = &xmmword_25615DD20;
  if (!byte_25615DD70)
  {
    byte_25615DD70 = 1;
    xmmword_25615DD20 = 0u;
    *(_OWORD *)algn_25615DD30 = 0u;
    xmmword_25615DD40 = 0u;
    unk_25615DD50 = 0u;
    xmmword_25615DD60 = 0u;
    v11 = (__int128 *)sub_23410B9C8((uint64_t)&xmmword_25615DD20);
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 9) = 0;
  }
  v12 = nullsub_13(v11, v9);
  *(_QWORD *)&v80 = v12;
  if (!v12)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    v33 = 144;
    goto LABEL_40;
  }
  v13 = v12;
  v14 = sub_234114774(0x2B8uLL);
  v15 = v14;
  if (v14)
  {
    bzero(v14 + 1, 0x2B0uLL);
    *v15 = &unk_250517558;
    v15[3] = &unk_2505175B0;
    v15[7] = 0;
    v15[8] = 0;
    v15[5] = &off_250515A98;
    v15[6] = 0;
    v15[11] = 0;
    v15[12] = 0;
    v15[9] = &off_250515A98;
    v15[10] = 0;
    v15[18] = 0;
    v15[19] = v15 + 21;
    v15[20] = 1;
    v15[13] = &unk_250517628;
    v15[15] = &unk_2505176B8;
    sub_234224D8C((uint64_t)(v15 + 22));
  }
  *(_QWORD *)&v82 = v15;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v59 = v8;
  DWORD1(v60) = 0;
  *((_QWORD *)&v60 + 1) = 0;
  LOBYTE(v60) = 2;
  WORD1(v60) = *(_WORD *)(a2 + 106);
  *(_QWORD *)buf = v8;
  v76 = 0;
  v77 = 0;
  v74 = 1;
  v75 = WORD1(v60);
  v71 = v13;
  v72 = 1;
  v67 = v10;
  v70 = 0;
  v68 = 2;
  v69 = WORD1(v60);
  sub_234223E18((uint64_t)v15, (uint64_t)&v59, (uint64_t)buf, &v71, (uint64_t)&v67, a3);
  if (*(_DWORD *)a3)
    goto LABEL_41;
  v16 = sub_234114774(0x118uLL);
  if (v16)
    sub_2341CDCBC((uint64_t)v16);
  *(_QWORD *)&v83 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v83 + 1) = v16;
  v17 = sub_234114774(0x10uLL);
  if (v17)
  {
    *v17 = &unk_250504DC8;
    v17[1] = &unk_250504E10;
  }
  *(_QWORD *)&v84 = v17;
  v18 = sub_234114774(0x130uLL);
  if (v18)
    v18 = (void *)sub_2341AE644();
  *((_QWORD *)&v84 + 1) = v18;
  v19 = sub_234114774(0xE0uLL);
  if (v19)
  {
    *v19 = &off_250516DF0;
    v19[1] = &unk_250516E48;
    v19[2] = &unk_250516E88;
    v19[3] = 0;
    v20 = v19 + 4;
    do
    {
      *(_OWORD *)v20 = xmmword_25615DD84;
      *((_BYTE *)v20 + 16) = 0;
      *((_WORD *)v20 + 9) = 5540;
      *((_DWORD *)v20 + 5) = 0;
      v20[3] = 0;
      v20 += 4;
    }
    while (v20 != v19 + 28);
  }
  v21 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v85 = v19;
  *((_QWORD *)&v80 + 1) = v21;
  v22 = sub_234114774(8uLL);
  v23 = v22;
  if (v22)
    *v22 = &unk_250502D40;
  *((_QWORD *)&v88 + 1) = v22;
  v24 = sub_234114774(0x50uLL);
  if (v24)
    v24 = (void *)sub_23420CA0C(v24, v23);
  v25 = *(_QWORD *)(a2 + 40);
  v89 = (uint64_t)v24;
  *(_QWORD *)&v81 = v25;
  v26 = (char *)sub_234114774(0x60uLL);
  if (v26)
  {
    *(_QWORD *)v26 = &off_250517248;
    *((_QWORD *)v26 + 4) = &unk_250517298;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    v26[88] = 0;
    *(_OWORD *)(v26 + 56) = 0u;
    *((_QWORD *)v26 + 8) = v26 + 56;
    *((_QWORD *)v26 + 9) = v26 + 56;
  }
  v27 = *(void **)(a2 + 64);
  *((_QWORD *)&v85 + 1) = v26;
  *((_QWORD *)&v79 + 1) = v27;
  if (v27)
  {
    v28 = 0;
  }
  else
  {
    sub_234223E8C((uint64_t *)buf);
    v35 = *(_QWORD *)buf;
    if (!*(_QWORD *)buf)
    {
      *(_DWORD *)a3 = 11;
      a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
      v33 = 193;
      goto LABEL_40;
    }
    v59 = *(uint64_t **)(a2 + 8);
    v60 = *(_OWORD *)(a2 + 72);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_2341E5E30(v35, &v59, (uint64_t)a3);
    v27 = *(void **)buf;
    if (*(_DWORD *)a3)
    {
      *(_QWORD *)buf = 0;
      if (v27)
        sub_234225AF4((uint64_t)buf, v27);
      goto LABEL_41;
    }
    *((_QWORD *)&v79 + 1) = *(_QWORD *)buf;
    v28 = *(_QWORD *)buf;
  }
  v29 = *(_QWORD *)(a2 + 88);
  if (v29)
  {
    v30 = 0;
    v31 = *(_QWORD *)(a2 + 88);
  }
  else
  {
    v36 = sub_234114774(0x10uLL);
    v30 = v36;
    if (v36)
    {
      *v36 = &unk_250504D30;
      v36[1] = 0;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v37 = *(_QWORD *)(a2 + 8);
    if (!v37)
    {
      *(_DWORD *)a3 = 47;
      a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.h";
      *((_DWORD *)a3 + 4) = 41;
      if (!v36)
        goto LABEL_41;
      (*(void (**)(_QWORD *))*v36)(v36);
      goto LABEL_85;
    }
    v29 = 0;
    v36[1] = v37;
    a3[1] = "src/protocols/secure_channel/SimpleSessionResumptionStorage.h";
    *((_DWORD *)a3 + 4) = 43;
    v31 = (uint64_t)v36;
  }
  *((_QWORD *)&v82 + 1) = v30;
  *((_QWORD *)&v81 + 1) = v29;
  v38 = sub_234114774(0x20uLL);
  v30 = v38;
  if (!v38)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v21)
      goto LABEL_56;
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.h";
    v33 = 238;
LABEL_40:
    *((_DWORD *)a3 + 4) = v33;
    goto LABEL_41;
  }
  *v38 = &unk_2505178A8;
  v38[1] = 0;
  v38[2] = 0;
  v38[3] = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v21)
  {
    *(_DWORD *)a3 = 47;
    a3[1] = "src/controller/CHIPDeviceControllerFactory.h";
    *((_DWORD *)a3 + 4) = 238;
LABEL_85:
    j__free(v30);
    goto LABEL_41;
  }
LABEL_56:
  v38[2] = v21;
  v38[3] = v31;
  *(_QWORD *)&v88 = v38;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_2341E68C4((uint64_t)v27, (uint64_t)v38, (uint64_t)a3);
  if (*(_DWORD *)a3)
    goto LABEL_85;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v39 = (uint64_t *)*((_QWORD *)&v83 + 1);
  v40 = (int *)v85;
  if ((_QWORD)v85)
    v41 = v85 + 16;
  else
    v41 = 0;
  v42 = v78;
  v43 = v82;
  v58 = *((_QWORD *)&v79 + 1);
  sub_2341CDE50(*((uint64_t *)&v83 + 1), v78, v82, v41, *(_QWORD *)(a2 + 8), *((uint64_t *)&v79 + 1), v81, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v44 = (int *)*((_QWORD *)&v84 + 1);
    sub_2341AE648(*((uint64_t *)&v84 + 1), v39, (uint64_t)a3);
    if (!*(_DWORD *)a3)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_234216B74(v40, v44, a3);
      if (!*(_DWORD *)a3)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        sub_234132538(v84, v44, (uint64_t)a3);
        if (!*(_DWORD *)a3)
        {
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
          sub_23421B120(*((int **)&v85 + 1), v42, v44, (uint64_t)a3);
          if (!*(_DWORD *)a3)
          {
            sub_233CB85C8();
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            v45 = sub_2341F3D04();
            (*(void (**)(uint64_t *, _QWORD))(*v45 + 16))(v45, v79);
            if (!*(_DWORD *)a3)
            {
              if (*(_BYTE *)(a2 + 104))
              {
                v46 = sub_234223ED0();
                *(_QWORD *)&v86 = v46;
                a3[1] = 0;
                a3[2] = 0;
                *a3 = 0;
                sub_23411F308(v46, (uint64_t)v44, (uint64_t)v39, v58, v31, v83, *((uint64_t *)&v80 + 1), (uint64_t)a3);
                if (*(_DWORD *)a3)
                  goto LABEL_41;
                v47 = sub_233C0A368();
                *((_WORD *)v47 + 16) = sub_2341F972C(v43 + 40);
                v48 = sub_233C0A368();
                sub_234223EF0((uint64_t)v48, v58);
              }
              v49 = (char *)sub_234114774(0x40uLL);
              v50 = v49;
              if (v49)
              {
                *((_QWORD *)v49 + 7) = 0;
                *(_QWORD *)v49 = &unk_250517978;
                *(_OWORD *)(v49 + 40) = 0u;
                *(_OWORD *)(v49 + 8) = 0u;
                v49[56] = 0;
                *(_OWORD *)(v49 + 24) = 0u;
                *((_QWORD *)v49 + 4) = v49 + 24;
                *((_QWORD *)v49 + 5) = v49 + 24;
              }
              *(_QWORD *)&v87 = v49;
              v51 = (char *)sub_234114774(0x40uLL);
              if (v51)
              {
                *((_QWORD *)v51 + 7) = 0;
                *(_QWORD *)v51 = &unk_250517A48;
                *(_OWORD *)(v51 + 40) = 0u;
                *(_OWORD *)(v51 + 8) = 0u;
                v51[56] = 0;
                *(_OWORD *)(v51 + 24) = 0u;
                *((_QWORD *)v51 + 4) = v51 + 24;
                *((_QWORD *)v51 + 5) = v51 + 24;
              }
              *((_QWORD *)&v87 + 1) = v51;
              v59 = v39;
              *(_QWORD *)&v60 = v31;
              *((_QWORD *)&v60 + 1) = v83;
              v61 = v44;
              v62 = v58;
              v63 = *((_QWORD *)&v80 + 1);
              v64 = 0;
              v65 = v51;
              v66 = v50;
              v52 = sub_234114774(0x60uLL);
              v53 = (uint64_t)v52;
              if (v52)
              {
                v52[8] = 0;
                v52[9] = 0;
                *v52 = &off_250515D20;
                v52[1] = &unk_250515D50;
                *((_OWORD *)v52 + 1) = 0u;
                *((_OWORD *)v52 + 2) = 0u;
                *((_OWORD *)v52 + 3) = 0u;
                *((_BYTE *)v52 + 64) = 0;
                v52[10] = 0;
                v52[11] = 0;
              }
              *((_QWORD *)&v86 + 1) = v52;
              a3[1] = 0;
              a3[2] = 0;
              *a3 = 0;
              sub_2341FC814((uint64_t)v52, v42, (__int128 *)&v59, a3);
              if (!*(_DWORD *)a3)
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                v54 = sub_2341FF930();
                sub_2341FF968(v54, (uint64_t)v44, v58, v89, v53, 0, a3);
                if (!*(_DWORD *)a3)
                {
                  v55 = sub_234223F0C((uint64_t)&v78);
                  *(_QWORD *)(a1 + 8) = v55;
                  v56 = *(_BYTE *)(a2 + 104);
                  v55[22] = v28;
                  *((_BYTE *)v55 + 189) = v56;
                  v57 = sub_234117B80(9u, "Controller");
                  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_233BF3000, v57, OS_LOG_TYPE_INFO, "System State Initialized...", buf, 2u);
                  }
                  if (sub_234114844(3u))
                    sub_2341147D0(9u, 3);
                  *(_DWORD *)a3 = 0;
                  a3[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
                  v33 = 298;
                  goto LABEL_40;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_41:
  v34 = (void (***)(_QWORD))*((_QWORD *)&v82 + 1);
  *((_QWORD *)&v82 + 1) = 0;
  if (v34)
  {
    (**v34)(v34);
    j__free(v34);
  }
}

void sub_234223D60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[6];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int16 v20;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 188))
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_WORD *)a1;
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_BYTE *)(a1 + 56);
      v7 = *(_QWORD *)(v2 + 120);
      v8 = *(_QWORD *)(v2 + 144);
      v9 = *(_QWORD *)(v2 + 72);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v13[0] = *(_QWORD *)v2;
      v13[1] = v5;
      v13[2] = v10;
      v13[3] = v7;
      v13[4] = 0;
      v13[5] = v8;
      v14 = *(_OWORD *)(v2 + 8);
      v15 = v9;
      v16 = *(_OWORD *)(a1 + 24);
      v17 = v11;
      v18 = v3;
      v19 = v6;
      v20 = v4;
      sub_234223418(a1, (uint64_t)v13, (_QWORD *)a2);
      return;
    }
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    v12 = 81;
  }
  else
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/controller/CHIPDeviceControllerFactory.cpp";
    v12 = 80;
  }
  *(_DWORD *)(a2 + 16) = v12;
}

uint64_t sub_234223E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t result;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v8 = a1 + 24;
  result = sub_2342258E8(a1 + 24, a1, a2, a3, a4, a5, (uint64_t)a6);
  if (!*(_DWORD *)a6)
    return sub_2341D3AF8(a1, v8, (uint64_t)a6);
  return result;
}

void *sub_234223E8C@<X0>(uint64_t *a1@<X8>)
{
  void *result;
  uint64_t v3;

  result = sub_234114774(0xA58uLL);
  v3 = (uint64_t)result;
  if (result)
  {
    bzero(result, 0xA58uLL);
    result = (void *)sub_233C0BBF8(v3);
  }
  *a1 = v3;
  return result;
}

void *sub_234223ED0()
{
  void *result;

  result = sub_234114774(0x338uLL);
  if (result)
    return (void *)sub_234225CE0((uint64_t)result);
  return result;
}

uint64_t sub_234223EF0(uint64_t result, uint64_t a2)
{
  if (!a2)
    sub_23426094C(result);
  *(_QWORD *)(result + 16) = a2;
  return result;
}

_QWORD *sub_234223F0C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (***v11)(_QWORD);
  _OWORD v13[4];
  uint64_t v14;
  void (***v15)(_QWORD);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v2 = sub_234114774(0xC0uLL);
  v3 = v2;
  if (v2)
  {
    v4 = *(_OWORD *)(a1 + 48);
    v13[2] = *(_OWORD *)(a1 + 32);
    v13[3] = v4;
    v5 = *(_OWORD *)(a1 + 16);
    v13[0] = *(_OWORD *)a1;
    v13[1] = v5;
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(void (****)(_QWORD))(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    v14 = v6;
    v15 = v7;
    v8 = *(_OWORD *)(a1 + 160);
    v20 = *(_OWORD *)(a1 + 144);
    v21 = v8;
    v22 = *(_QWORD *)(a1 + 176);
    v9 = *(_OWORD *)(a1 + 96);
    v16 = *(_OWORD *)(a1 + 80);
    v17 = v9;
    v10 = *(_OWORD *)(a1 + 128);
    v18 = *(_OWORD *)(a1 + 112);
    v19 = v10;
    sub_234226710(v2, v13);
    v11 = v15;
    v15 = 0;
    if (v11)
    {
      (**v11)(v11);
      j__free(v11);
    }
  }
  return v3;
}

_BYTE *sub_234223FB0(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  int v4;

  *(_QWORD *)(a2 + 16) = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a3 + 16);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 56);
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(a3 + 88);
  *(_BYTE *)(a2 + 90) = *(_BYTE *)(a3 + 90);
  *(_BYTE *)(a2 + 91) = *(_BYTE *)(a3 + 91);
  *(_QWORD *)a2 = *((_QWORD *)result + 1);
  *(_WORD *)(a2 + 94) = *(_WORD *)(a3 + 72);
  *(_BYTE *)(a2 + 89) = *(_BYTE *)(a3 + 89);
  v4 = *(unsigned __int8 *)(a3 + 92);
  v3 = (_BYTE *)(a3 + 92);
  if (v4)
  {
    result = sub_233C27DCC(v3);
    *(_BYTE *)(a2 + 92) = 1;
    *(_BYTE *)(a2 + 93) = *result;
  }
  return result;
}

uint64_t sub_23422404C(uint64_t result, uint64_t a2)
{
  BOOL v2;
  uint64_t *v3;

  if (*(_BYTE *)(result + 56))
    v2 = *(_BYTE *)(a2 + 36) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = sub_233C0A368();
    return sub_234252AC4((uint64_t)v3);
  }
  return result;
}

void sub_23422407C(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD v8[4];
  _BYTE v9[28];
  char v10;
  char v11;
  __int16 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[60];
  char v16;
  char v17;
  __int16 v18;

  if (*(_WORD *)(a2 + 72))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234223D60((uint64_t)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      v15[0] = 0;
      v13 = 0u;
      v14 = 0u;
      memset(&v15[8], 0, 48);
      *(_DWORD *)&v15[56] = 0x10000;
      v16 = 0;
      sub_234223FB0(a1, (uint64_t)&v13, a2);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v8[2] = *(_OWORD *)v15;
      v8[3] = *(_OWORD *)&v15[16];
      *(_OWORD *)v9 = *(_OWORD *)&v15[32];
      *(_OWORD *)&v9[12] = *(_OWORD *)&v15[44];
      v8[0] = v13;
      v8[1] = v14;
      v10 = v16;
      if (v16)
        v11 = v17;
      v12 = v18;
      sub_234229FC4(a3, (uint64_t)v8, a4);
      if (!*(_DWORD *)a4)
        sub_23422404C((uint64_t)a1, a3);
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a4 + 4) = 337;
  }
}

void sub_23422419C(_BYTE *a1@<X0>, int8x16_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _OWORD v8[4];
  _BYTE v9[28];
  char v10;
  char v11;
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[60];
  char v18;
  char v19;
  __int16 v20;
  _OWORD v21[2];

  if (a2[4].i16[4])
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234223D60((uint64_t)a1, (uint64_t)a4);
    if (!*(_DWORD *)a4)
    {
      v17[0] = 0;
      v15 = 0u;
      v16 = 0u;
      memset(&v17[8], 0, 48);
      *(_DWORD *)&v17[56] = 0x10000;
      v18 = 0;
      sub_234223FB0(a1, (uint64_t)&v15, (uint64_t)a2);
      *(_QWORD *)&v21[0] = a2[5].i64[0];
      *(int8x16_t *)((char *)v21 + 8) = vextq_s8(a2[6], a2[6], 8uLL);
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v8[2] = *(_OWORD *)v17;
      v8[3] = *(_OWORD *)&v17[16];
      *(_OWORD *)v9 = *(_OWORD *)&v17[32];
      *(_OWORD *)&v9[12] = *(_OWORD *)&v17[44];
      v8[0] = v15;
      v8[1] = v16;
      v10 = v18;
      if (v18)
        v11 = v19;
      v12 = v20;
      v13 = v21[0];
      v14 = *(_QWORD *)&v21[1];
      sub_23422C248(a3, (uint64_t)v8, a4);
      if (!*(_DWORD *)a4)
        sub_23422404C((uint64_t)a1, (uint64_t)a3);
    }
  }
  else
  {
    *(_DWORD *)a4 = 47;
    a4[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a4 + 4) = 355;
  }
}

void sub_2342242F0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  int v4;

  if (!*(_QWORD *)(a1 + 8))
  {
    v4 = 380;
    v3 = 3;
    goto LABEL_7;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  sub_2341BE614((uint64_t)&byte_2542530C0, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    v3 = 0;
    v4 = 386;
LABEL_7:
    *(_DWORD *)a2 = v3;
    a2[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a2 + 4) = v4;
  }
}

uint64_t sub_234224384(uint64_t a1)
{
  return sub_23422438C(*(_QWORD *)(a1 + 8));
}

uint64_t sub_23422438C(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 184);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  if (v2 == -1)
    sub_2342609E0(result);
  if (*(_BYTE *)(result + 188))
    sub_234260A74(result);
  return result;
}

BOOL sub_2342243C8(uint64_t a1)
{
  return sub_2342243D0(*(_QWORD *)(a1 + 8));
}

BOOL sub_2342243D0(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 184);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (!v2)
    sub_234260B08(a1);
  if (v2 == 1)
    sub_2342244CC(a1);
  return v2 == 1;
}

void sub_234224418(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_234223D60(a1, (uint64_t)a2);
  if (!*(_DWORD *)a2)
  {
    sub_23422438C(*(_QWORD *)(a1 + 8));
    *(_DWORD *)a2 = 0;
    a2[1] = "src/controller/CHIPDeviceControllerFactory.cpp";
    *((_DWORD *)a2 + 4) = 403;
  }
}

uint64_t sub_23422446C(uint64_t a1)
{
  sub_234224490(a1);
  return a1;
}

double sub_234224490(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = (void *)sub_2342248D0(v2);
    j__free(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t sub_2342244CC(uint64_t result)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t *v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  void *v10;
  void (***v11)(_QWORD);
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  _QWORD *v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void (***v25)(_QWORD);
  void (***v26)(_QWORD);
  uint64_t v27;
  void *v28;
  uint64_t i;
  uint8_t v30[16];

  if (atomic_load((unsigned int *)(result + 184)))
    sub_234260B9C(result);
  v2 = result;
  if (!*(_BYTE *)(result + 188))
  {
    *(_BYTE *)(result + 188) = 1;
    v3 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_INFO, "Shutting down the System State, this will teardown the CHIP Stack", v30, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(9u, 3);
    if (*(_QWORD *)(v2 + 176) && *(_BYTE *)(v2 + 189))
    {
      v4 = sub_233C0A368();
      sub_23425306C((uint64_t)v4);
    }
    v5 = *(void (****)(_QWORD))(v2 + 152);
    if (v5)
    {
      v6 = *(_QWORD *)(v2 + 72);
      if (!v6 || (sub_2341E6924(v6, *(_QWORD *)(v2 + 152)), (v5 = *(void (****)(_QWORD))(v2 + 152)) != 0))
      {
        (**v5)(v5);
        j__free(v5);
      }
      *(_QWORD *)(v2 + 152) = 0;
    }
    v7 = *(_QWORD *)(v2 + 80);
    if (v7)
    {
      sub_23421B244(v7);
      v8 = *(void (****)(_QWORD))(v2 + 80);
      if (v8)
      {
        (**v8)(*(_QWORD *)(v2 + 80));
        j__free(v8);
      }
      *(_QWORD *)(v2 + 80) = 0;
    }
    v9 = *(_QWORD *)(v2 + 88);
    if (v9)
    {
      sub_234120514(v9);
      v10 = *(void **)(v2 + 88);
      if (v10)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v10 + 40))(*(_QWORD *)(v2 + 88));
        j__free(v10);
      }
      *(_QWORD *)(v2 + 88) = 0;
    }
    if (*(_QWORD *)(v2 + 96))
    {
      sub_2341FC970();
      v11 = *(void (****)(_QWORD))(v2 + 96);
      if (v11)
      {
        (**v11)(*(_QWORD *)(v2 + 96));
        j__free(v11);
      }
      *(_QWORD *)(v2 + 96) = 0;
    }
    v12 = *(_QWORD *)(v2 + 40);
    if (v12)
      sub_2341CDF6C(v12);
    v13 = *(void **)(v2 + 104);
    if (v13)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v13 + 40))(*(_QWORD *)(v2 + 104));
      j__free(v13);
      *(_QWORD *)(v2 + 104) = 0;
    }
    v14 = *(void **)(v2 + 112);
    if (v14)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v14 + 16))(*(_QWORD *)(v2 + 112));
      j__free(v14);
      *(_QWORD *)(v2 + 112) = 0;
    }
    v15 = sub_2341F3D04();
    (*(void (**)(uint64_t *))(*v15 + 32))(v15);
    v16 = sub_2341FF930();
    sub_2341FFA3C((uint64_t)v16);
    v17 = *(_QWORD **)(v2 + 32);
    if (v17)
    {
      sub_234224874(v17);
      v18 = *(void (****)(_QWORD))(v2 + 32);
      if (v18)
      {
        (**v18)(*(_QWORD *)(v2 + 32));
        j__free(v18);
      }
      *(_QWORD *)(v2 + 32) = 0;
    }
    v19 = *(_QWORD *)(v2 + 56);
    if (v19)
      sub_2341AE6F4(v19);
    v20 = *(_QWORD *)(v2 + 40);
    if (v20)
      sub_2341CDD9C(v20);
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    v21 = *(void (****)(_QWORD))(v2 + 64);
    if (v21)
    {
      (**v21)(*(_QWORD *)(v2 + 64));
      j__free(v21);
      *(_QWORD *)(v2 + 64) = 0;
    }
    v22 = *(void (****)(_QWORD))(v2 + 56);
    if (v22)
    {
      (**v22)(*(_QWORD *)(v2 + 56));
      j__free(v22);
      *(_QWORD *)(v2 + 56) = 0;
    }
    v23 = *(void (****)(_QWORD))(v2 + 48);
    if (v23)
    {
      (**v23)(*(_QWORD *)(v2 + 48));
      j__free(v23);
      *(_QWORD *)(v2 + 48) = 0;
    }
    v24 = *(void (****)(_QWORD))(v2 + 40);
    if (v24)
    {
      (**v24)(*(_QWORD *)(v2 + 40));
      j__free(v24);
      *(_QWORD *)(v2 + 40) = 0;
    }
    v25 = *(void (****)(_QWORD))(v2 + 136);
    if (v25)
    {
      (**v25)(*(_QWORD *)(v2 + 136));
      j__free(v25);
      *(_QWORD *)(v2 + 136) = 0;
    }
    v26 = *(void (****)(_QWORD))(v2 + 128);
    if (v26)
    {
      (**v26)(*(_QWORD *)(v2 + 128));
      j__free(v26);
      *(_QWORD *)(v2 + 128) = 0;
    }
    v27 = *(_QWORD *)(v2 + 176);
    if (v27)
    {
      sub_2341E67E4(v27);
      v28 = *(void **)(v2 + 176);
      if (v28)
      {
        sub_233C0BD1C((uint64_t)v28 + 2432);
        for (i = 2280; i != -152; i -= 152)
          sub_233C0BD1C((uint64_t)v28 + i);
        j__free(v28);
      }
      *(_QWORD *)(v2 + 176) = 0;
      *(_QWORD *)(v2 + 72) = 0;
    }
    if (qword_254253100 != -1)
      dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
    result = sub_2341BE818();
    byte_2542530C0 = 0;
  }
  return result;
}

uint64_t sub_234224874(_QWORD *a1)
{
  sub_2341D3BBC((uint64_t)a1);
  (*(void (**)(_QWORD *))(a1[5] + 72))(a1 + 5);
  (*(void (**)(_QWORD *))(a1[9] + 72))(a1 + 9);
  (*(void (**)(_QWORD *))(a1[13] + 72))(a1 + 13);
  return (*(uint64_t (**)(_QWORD *))(a1[22] + 72))(a1 + 22);
}

uint64_t sub_2342248D0(uint64_t a1)
{
  void (***v2)(_QWORD);

  sub_2342244CC(a1);
  v2 = *(void (****)(_QWORD))(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
  {
    (**v2)(v2);
    j__free(v2);
  }
  return a1;
}

_QWORD *sub_234224918(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_250517558;
  a1[3] = &unk_2505175B0;
  sub_234225148(a1 + 22);
  a1[13] = &unk_250517628;
  a1[15] = &unk_2505176B8;
  v2 = a1[21];
  if (v2)
    sub_23411814C(v2);
  a1[21] = 0;
  sub_2341FB864(a1 + 13);
  sub_2341F90B0(a1 + 9);
  sub_2341F90B0(a1 + 5);
  return a1;
}

void sub_2342249B0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_250517558;
  a1[3] = &unk_2505175B0;
  sub_234225148(a1 + 22);
  a1[13] = &unk_250517628;
  a1[15] = &unk_2505176B8;
  v2 = a1[21];
  if (v2)
    sub_23411814C(v2);
  a1[21] = 0;
  sub_2341FB864(a1 + 13);
  sub_2341F90B0(a1 + 9);
  sub_2341F90B0(a1 + 5);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234224A58(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_2505175B0;
  sub_234225148(a1 + 19);
  a1[10] = &unk_250517628;
  a1[12] = &unk_2505176B8;
  v2 = a1[18];
  if (v2)
    sub_23411814C(v2);
  a1[18] = 0;
  sub_2341FB864(a1 + 10);
  sub_2341F90B0(a1 + 6);
  sub_2341F90B0(a1 + 2);
  return a1;
}

void sub_234224ADC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_2505175B0;
  sub_234225148(a1 + 19);
  a1[10] = &unk_250517628;
  a1[12] = &unk_2505176B8;
  v2 = a1[18];
  if (v2)
    sub_23411814C(v2);
  a1[18] = 0;
  sub_2341FB864(a1 + 10);
  sub_2341F90B0(a1 + 6);
  sub_2341F90B0(a1 + 2);
  JUMPOUT(0x23493E704);
}

uint64_t sub_234224B7C(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(_QWORD *))(a1[2] + 48))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t))(a1[6] + 48))(a1 + 6, a2);
  (*(void (**)(_QWORD *, uint64_t))(a1[10] + 48))(a1 + 10, a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(a1[19] + 48))(a1 + 19, a2);
}

uint64_t sub_234224BE8(_QWORD *a1)
{
  (*(void (**)(_QWORD *))(a1[2] + 72))(a1 + 2);
  (*(void (**)(_QWORD *))(a1[6] + 72))(a1 + 6);
  (*(void (**)(_QWORD *))(a1[10] + 72))(a1 + 10);
  return (*(uint64_t (**)(_QWORD *))(a1[19] + 72))(a1 + 19);
}

_QWORD *sub_234224C3C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_250517628;
  a1[2] = &unk_2505176B8;
  v2 = a1[8];
  if (v2)
    sub_23411814C(v2);
  a1[8] = 0;
  return sub_2341FB864(a1);
}

void sub_234224C84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_250517628;
  a1[2] = &unk_2505176B8;
  v2 = a1[8];
  if (v2)
    sub_23411814C(v2);
  a1[8] = 0;
  sub_2341FB864(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234224CE0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(a1 - 2) = &unk_250517628;
  v2 = a1 - 2;
  *a1 = &unk_2505176B8;
  v3 = a1[6];
  if (v3)
    sub_23411814C(v3);
  a1[6] = 0;
  return sub_2341FB864(v2);
}

void sub_234224D2C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(a1 - 2) = &unk_250517628;
  v2 = a1 - 2;
  *a1 = &unk_2505176B8;
  v3 = a1[6];
  if (v3)
    sub_23411814C(v3);
  a1[6] = 0;
  sub_2341FB864(v2);
  JUMPOUT(0x23493E704);
}

uint64_t sub_234224D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 28) = 0x271000000000;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_QWORD *)(a1 + 56) = 4;
  *(_QWORD *)(a1 + 64) = a1 + 328;
  *(_QWORD *)a1 = &unk_250517720;
  *(_QWORD *)(a1 + 8) = 0;
  do
  {
    v3 = a1 + v2;
    *(_OWORD *)(v3 + 80) = xmmword_25615DD84;
    *(_BYTE *)(v3 + 96) = 0;
    *(_WORD *)(v3 + 98) = 5540;
    *(_DWORD *)(v3 + 100) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 120) = 0;
    *(_DWORD *)(v3 + 128) = 327705;
    v2 += 64;
  }
  while (v2 != 256);
  *(_QWORD *)(a1 + 328) = &unk_250517798;
  sub_234115A28((_QWORD *)(a1 + 336), a1 + 392, a1 + 384, 4, 32);
  for (i = 0; i != 256; i += 64)
  {
    v5 = a1 + i;
    v6 = xmmword_25615DD84;
    *(_QWORD *)(v5 + 72) = 0;
    *(_OWORD *)(v5 + 80) = v6;
    *(_BYTE *)(v5 + 96) = 0;
    *(_WORD *)(v5 + 98) = 5540;
    *(_DWORD *)(v5 + 100) = 0;
    v7 = *(_QWORD *)(a1 + i + 104);
    if (v7)
      sub_23411814C(v7);
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 120) = 0;
  }
  return a1;
}

void sub_234224EE4(_QWORD *a1)
{
  sub_234225148(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234224F08(_QWORD *a1)
{
  *a1 = &unk_250517798;
  sub_2342250B4(a1 + 1);
  return a1;
}

void sub_234224F3C(_QWORD *a1)
{
  *a1 = &unk_250517798;
  sub_2342250B4(a1 + 1);
  JUMPOUT(0x23493E704);
}

__n128 sub_234224F80(uint64_t a1, __n128 *a2, unint64_t *a3)
{
  unint64_t *v5;
  __n128 *v6;
  __n128 result;

  v5 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = (__n128 *)sub_234115AA0(v5);
  if (v6)
  {
    result = *a2;
    v6[1].n128_u32[0] = a2[1].n128_u32[0];
    *v6 = result;
    v6[1].n128_u32[1] = a2[1].n128_u32[1];
    v6[1].n128_u64[1] = *a3;
    *a3 = 0;
  }
  return result;
}

unint64_t sub_234224FD8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_2342250D0(v3, a2);
}

uint64_t sub_234225004(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return sub_234115C0C(v1, (uint64_t)v1, (uint64_t (*)(uint64_t, uint64_t))sub_234225110);
}

uint64_t sub_23422502C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v5 = a3;
  v6 = a2;
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v7[0] = &v5;
  v7[1] = &v6;
  return sub_234115C0C(v3, (uint64_t)v7, (uint64_t (*)(uint64_t, uint64_t))sub_234225128);
}

uint64_t sub_234225070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v5 = a3;
  v6 = a2;
  v3 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v7[0] = &v5;
  v7[1] = &v6;
  return sub_234115C0C(v3, (uint64_t)v7, (uint64_t (*)(uint64_t, uint64_t))sub_234225138);
}

_QWORD *sub_2342250B4(_QWORD *result)
{
  if (*result)
    sub_234260C30((uint64_t)result);
  return result;
}

unint64_t sub_2342250D0(unint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
      sub_23411814C(v4);
    *(_QWORD *)(a2 + 24) = 0;
    return sub_234115B54(v3, a2);
  }
  return result;
}

uint64_t sub_234225110(unint64_t a1, uint64_t a2)
{
  sub_2342250D0(a1, a2);
  return 0;
}

uint64_t sub_234225128(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(a1 + 8));
}

uint64_t sub_234225138(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))a1)(**(_QWORD **)(a1 + 8));
}

_QWORD *sub_234225148(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;
  uint64_t v4;

  *a1 = &unk_250517720;
  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(a1[41] + 56))(a1 + 41);
  sub_234115C0C(v2, (uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t))sub_234225110);
  a1[41] = &unk_250517798;
  sub_2342250B4(a1 + 42);
  for (i = 37; i != 5; i -= 8)
  {
    v4 = a1[i];
    if (v4)
      sub_23411814C(v4);
    a1[i] = 0;
  }
  return sub_2341F9AC4(a1);
}

void sub_2342251D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = a1 + 16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16))
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, a3);
  else
    sub_23422525C(a1, a2, a3, a4);
}

void sub_23422525C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = a1 + 48;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 24))(a1 + 48))
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, a3);
  else
    sub_2342252E8(a1, a2, a3, a4);
}

void sub_2342252E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = a1 + 80;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 24))(a1 + 80))
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, a3);
  else
    sub_234225374(a1, a2, a3, a4);
}

void sub_234225374(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = a1 + 152;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 152) + 24))(a1 + 152))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, a2, a3);
  }
  else
  {
    v8 = *a3;
    *a3 = 0;
    *(_DWORD *)a4 = 12;
    *(_QWORD *)(a4 + 8) = "src/transport/raw/Tuple.h";
    *(_DWORD *)(a4 + 16) = 273;
    if (v8)
      sub_23411814C(v8);
  }
}

uint64_t sub_234225418(_QWORD *a1, uint64_t a2)
{
  if (((*(uint64_t (**)(_QWORD *))(a1[2] + 24))(a1 + 2) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *, uint64_t))(a1[6] + 24))(a1 + 6, a2) & 1) != 0
    || ((*(uint64_t (**)(_QWORD *, uint64_t))(a1[10] + 24))(a1 + 10, a2) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD *, uint64_t))(a1[19] + 24))(a1 + 19, a2);
  }
}

uint64_t sub_234225498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;

  v10 = a1 + 16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2, a3, a4);
  else
    return sub_234225530(a1, a2, a3, a4, a5);
}

uint64_t sub_234225530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;

  v10 = a1 + 48;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 24))(a1 + 48))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2, a3, a4);
  else
    return sub_2342255C8(a1, a2, a3, a4, a5);
}

uint64_t sub_2342255C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = a1 + 80;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 24))(a1 + 80))
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 40);
    v12 = v10;
    return v11(v12, a2, a3, a4);
  }
  v14 = *(_QWORD *)(a1 + 152);
  v13 = a1 + 152;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, a2);
  if ((_DWORD)result)
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 40);
    v12 = v13;
    return v11(v12, a2, a3, a4);
  }
  *(_DWORD *)a5 = 12;
  *(_QWORD *)(a5 + 8) = "src/transport/raw/Tuple.h";
  *(_DWORD *)(a5 + 16) = 181;
  return result;
}

uint64_t sub_234225694(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD *))(a1[2] + 56))(a1 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[6] + 56))(a1 + 6, a2, a3);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a1[10] + 56))(a1 + 10, a2, a3);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[19] + 56))(a1 + 19, a2, a3);
}

uint64_t sub_234225710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = a1 + 16;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 32))(a1 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2, a3);
  else
    return sub_23422579C(a1, a2, a3, a4);
}

uint64_t sub_23422579C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = a1 + 48;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 32))(a1 + 48))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2, a3);
  else
    return sub_234225828(a1, a2, a3, a4);
}

uint64_t sub_234225828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = a1 + 80;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 32))(a1 + 80))
  {
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64);
    v10 = v8;
    return v9(v10, a2, a3);
  }
  v12 = *(_QWORD *)(a1 + 152);
  v11 = a1 + 152;
  result = (*(uint64_t (**)(uint64_t))(v12 + 32))(v11);
  if ((_DWORD)result)
  {
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 64);
    v10 = v11;
    return v9(v10, a2, a3);
  }
  *(_DWORD *)a4 = 12;
  *(_QWORD *)(a4 + 8) = "src/transport/raw/Tuple.h";
  *(_DWORD *)(a4 + 16) = 303;
  return result;
}

uint64_t sub_2342258E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  result = sub_2341F9120(a1 + 16, a3, (uint64_t)&v14);
  if ((_DWORD)v14)
  {
    *(_OWORD *)a7 = v14;
    *(_QWORD *)(a7 + 16) = v15;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = a2;
    return sub_234225984(a1, a2, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_234225984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result;
  __int128 v12;
  uint64_t v13;

  v12 = 0uLL;
  v13 = 0;
  result = sub_2341F9120(a1 + 48, a3, (uint64_t)&v12);
  if ((_DWORD)v12)
  {
    *(_OWORD *)a6 = v12;
    *(_QWORD *)(a6 + 16) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = a2;
    return sub_234225A18(a1, a2, a4, a5, a6);
  }
  return result;
}

uint64_t sub_234225A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v11 = 0uLL;
  v12 = 0;
  result = sub_2341FB9D4(a1 + 80, a3, (uint64_t)&v11);
  if ((_DWORD)v11)
  {
    *(_OWORD *)a5 = v11;
    v10 = v12;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a2;
    v13 = 0uLL;
    v14 = 0;
    result = sub_2341F9D64(a1 + 152, a4, (uint64_t)&v13);
    if (!(_DWORD)v13)
    {
      *(_QWORD *)(a1 + 160) = a2;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = "src/transport/raw/Tuple.h";
      *(_DWORD *)(a5 + 16) = 339;
      return result;
    }
    *(_OWORD *)a5 = v13;
    v10 = v14;
  }
  *(_QWORD *)(a5 + 16) = v10;
  return result;
}

void sub_234225AD4(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 45;
  *(_QWORD *)(a1 + 8) = "src/messaging/ExchangeDelegate.h";
  *(_DWORD *)(a1 + 16) = 172;
}

void sub_234225AF4(uint64_t a1, void *a2)
{
  uint64_t i;

  if (a2)
  {
    sub_233C0BD1C((uint64_t)a2 + 2432);
    for (i = 2280; i != -152; i -= 152)
      sub_233C0BD1C((uint64_t)a2 + i);
    j__free(a2);
  }
}

void sub_234225B3C()
{
  JUMPOUT(0x23493E704);
}

uint64_t sub_234225B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  _QWORD v7[3];

  v3 = a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 208))(v7, v5, a3);
  return sub_234225BA8(a1, v3);
}

uint64_t sub_234225BA0(uint64_t a1, uint64_t a2, int a3)
{
  return sub_234225BA8(a1, a3);
}

uint64_t sub_234225BA8(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  _BYTE buf[24];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v6 = 0uLL;
    v7 = 0;
    result = (uint64_t)(*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)result + 40))(&v6);
    if ((_DWORD)v6)
    {
      v4 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v6;
        *(_QWORD *)&buf[16] = v7;
        v5 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v5;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Warning, failed to delete session resumption state for fabric index 0x%x: %s", buf, 0x12u);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        *(_OWORD *)buf = v6;
        *(_QWORD *)&buf[16] = v7;
        sub_2341083CC((const char **)buf, 1);
        return sub_2341147D0(9u, 1);
      }
    }
  }
  return result;
}

uint64_t sub_234225CE0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_250504468;
  *(_QWORD *)(a1 + 8) = &unk_2505044D0;
  *(_QWORD *)(a1 + 16) = &unk_250504508;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = &unk_250517870;
  v2 = a1 + 64;
  *(_QWORD *)(a1 + 72) = &unk_250517830;
  *(_QWORD *)(a1 + 80) = &unk_250517900;
  *(_QWORD *)(a1 + 96) = &unk_250504C30;
  v3 = (_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = &unk_250517940;
  *(_QWORD *)(a1 + 152) = a1 + 96;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = sub_2341B1C28();
  *(_DWORD *)(a1 + 216) = v4;
  *(_BYTE *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 228) = 0;
  *(_WORD *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)v2 = &off_2505045B0;
  *(_QWORD *)(a1 + 72) = &unk_250504650;
  *(_QWORD *)(a1 + 80) = &unk_250504690;
  *v3 = &unk_2505046D0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  nullsub_13(a1 + 288, v4);
  *(_QWORD *)(a1 + 408) = &off_250505A50;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 528) = xmmword_2342EF3A0;
  *(_WORD *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 562) = 0;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_BYTE *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  return a1;
}

void *sub_234225E5C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[2];

  v9[0] = a4;
  v9[1] = a5;
  v7 = a6;
  v8 = a3;
  return sub_234225FF8((unint64_t *)(a1 + 8), a2, &v8, v9, &v7);
}

void sub_234225E90(uint64_t a1, void *a2)
{
  sub_2342262B8(a1 + 8, a2);
}

uint64_t sub_234225E98(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  char v6;
  _QWORD v7[2];
  _QWORD v8[3];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v5 = 0;
  v8[0] = v7;
  v8[1] = &v6;
  v8[2] = &v5;
  sub_234115DFC((_QWORD *)(a1 + 24), (uint64_t)v8, (unsigned int (*)(uint64_t))sub_23422634C);
  return v5;
}

uint64_t sub_234225EE8(uint64_t a1, char a2)
{
  char v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = &v3;
  v4[1] = a1;
  return sub_234115DFC((_QWORD *)(a1 + 24), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_23422639C);
}

uint64_t sub_234225F20(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return sub_234115DFC((_QWORD *)(a1 + 24), (uint64_t)&v2, (unsigned int (*)(uint64_t))sub_2342263D4);
}

_QWORD *sub_234225F50(_QWORD *a1)
{
  *a1 = &unk_250517978;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_2342263F8);
  sub_2341D2640(a1 + 1);
  return a1;
}

void sub_234225F9C(_QWORD *a1)
{
  *a1 = &unk_250517978;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_2342263F8);
  sub_2341D2640(a1 + 1);
  JUMPOUT(0x23493E704);
}

void *sub_234225FF8(unint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  void *v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;

  v10 = sub_234114774(0x208uLL);
  v11 = v10;
  if (v10)
  {
    sub_2342260AC((uint64_t)v10, a2, *a3, *a4, a4[1], *a5);
    v12 = sub_234114774(0x18uLL);
    if (v12)
    {
      *v12 = v11;
      v12[1] = a1 + 2;
      v12[2] = 0;
      v12[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v12;
      a1[4] = (unint64_t)v12;
      v13 = a1[1];
      v14 = *a1 + 1;
      *a1 = v14;
      if (v14 > v13)
        a1[1] = v14;
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

uint64_t sub_2342260AC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  char v19;
  int64x2_t v20;

  v10 = 0;
  *(_QWORD *)(a1 + 8) = &unk_2505162B0;
  v11 = a1 + 8;
  *(_QWORD *)a1 = off_250516258;
  *(_OWORD *)(a1 + 16) = 0u;
  v12 = (_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_25615DD84;
  *(_QWORD *)(a1 + 136) = &off_250514968;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_BYTE *)(a1 + 128) = 1;
  *(_QWORD *)(a1 + 208) = &unk_2505179E8;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 130) = 5540;
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  do
  {
    v13 = a1 + v10;
    *(_QWORD *)(v13 + 240) = 0;
    *(_QWORD *)(v13 + 248) = 0;
    *(_BYTE *)(v13 + 256) = 1;
    *(_WORD *)(v13 + 258) = 5540;
    *(_DWORD *)(v13 + 260) = 0;
    *(_QWORD *)(v13 + 264) = sub_2341B1C28();
    *(_DWORD *)(v13 + 272) = v14;
    *(_WORD *)(v13 + 276) = 0;
    *(_BYTE *)(v13 + 278) = 0;
    v10 += 40;
  }
  while (v10 != 200);
  *(_WORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0xAFC8000000C8;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 496;
  *(_QWORD *)(a1 + 504) = a1 + 496;
  *(_QWORD *)(a1 + 512) = 0;
  v15 = *a2;
  v16 = a2[2];
  v12[1] = a2[1];
  v12[2] = v16;
  *v12 = v15;
  v17 = *((unsigned __int8 *)a2 + 48);
  *(_BYTE *)(a1 + 64) = v17;
  if (v17)
  {
    v18 = *(_QWORD *)((char *)a2 + 52);
    *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 15);
    *(_QWORD *)(a1 + 68) = v18;
  }
  v19 = 0;
  v20.i64[0] = *((_QWORD *)a2 + 3);
  v20.i64[1] = *(_QWORD *)a2;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v20), (int32x4_t)vceqzq_s64(*((int64x2_t *)a2 + 2))))) & 1) == 0
    && a3
    && a6)
  {
    *(_QWORD *)(a1 + 80) = a3;
    *(_QWORD *)(a1 + 96) = a4;
    *(_BYTE *)(a1 + 104) = a5;
    *(_QWORD *)(a1 + 200) = a6;
    v19 = 1;
    *(_QWORD *)(a1 + 232) = v11;
  }
  *(_BYTE *)(a1 + 480) = v19;
  return a1;
}

void sub_234226280(uint64_t a1)
{
  sub_233CB66E0((_QWORD *)(a1 + 8));
  JUMPOUT(0x23493E704);
}

void sub_2342262B8(uint64_t a1, void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), (uint64_t)a2);
    if (!v4)
      sub_23425DC90(0);
    v5 = v4;
    *v4 = 0;
    (*(void (**)(void *))(*(_QWORD *)a2 + 40))(a2);
    j__free(a2);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_23422634C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 96) != **(_QWORD **)a1
    || *(unsigned __int8 *)(*(_QWORD *)a1 + 8) != *(unsigned __int8 *)(a2 + 104)
    || **(unsigned __int8 **)(a1 + 8) != *(unsigned __int8 *)(a2 + 481))
  {
    return 0;
  }
  **(_QWORD **)(a1 + 16) = a2;
  return 1;
}

uint64_t sub_23422639C(unsigned __int8 **a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 104) == **a1)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1[1] + 8))(a1[1]);
  return 0;
}

uint64_t sub_2342263D4(_QWORD *a1)
{
  (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  return 0;
}

uint64_t sub_2342263F8(uint64_t a1, void *a2)
{
  sub_2342262B8(a1, a2);
  return 0;
}

char *sub_234226410(uint64_t a1)
{
  return sub_2342264C8((unint64_t *)(a1 + 8));
}

void sub_234226418(uint64_t a1, uint64_t a2)
{
  sub_234226670(a1 + 8, a2);
}

_QWORD *sub_234226420(_QWORD *a1)
{
  *a1 = &unk_250517A48;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_2342266F8);
  sub_2341D2640(a1 + 1);
  return a1;
}

void sub_23422646C(_QWORD *a1)
{
  *a1 = &unk_250517A48;
  sub_234115DFC(a1 + 3, (uint64_t)(a1 + 1), (unsigned int (*)(uint64_t))sub_2342266F8);
  sub_2341D2640(a1 + 1);
  JUMPOUT(0x23493E704);
}

char *sub_2342264C8(unint64_t *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (char *)sub_234114774(0x2E0uLL);
  v3 = v2;
  if (v2)
  {
    bzero(v2 + 40, 0x2B8uLL);
    *(_QWORD *)v3 = &unk_250517870;
    *((_QWORD *)v3 + 1) = &unk_250517830;
    *((_QWORD *)v3 + 2) = &unk_250517900;
    *((_QWORD *)v3 + 3) = 0;
    *((_QWORD *)v3 + 4) = &unk_250504C30;
    *((_QWORD *)v3 + 8) = 0;
    v3[72] = 0;
    *((_QWORD *)v3 + 6) = &unk_250517940;
    *((_QWORD *)v3 + 7) = 0;
    *((_QWORD *)v3 + 11) = v3 + 32;
    v3[128] = 0;
    *((_QWORD *)v3 + 18) = sub_2341B1C28();
    *((_DWORD *)v3 + 38) = v4;
    v3[156] = 0;
    v3[160] = 0;
    v3[164] = 0;
    *((_WORD *)v3 + 86) = 1;
    v3[176] = 0;
    *(_QWORD *)v3 = &off_2505045B0;
    *((_QWORD *)v3 + 1) = &unk_250504650;
    *((_QWORD *)v3 + 2) = &unk_250504690;
    *((_QWORD *)v3 + 4) = &unk_2505046D0;
    *(_OWORD *)(v3 + 184) = 0u;
    *(_OWORD *)(v3 + 200) = 0u;
    *((_QWORD *)v3 + 27) = 0;
    nullsub_13(v3 + 224, v4);
    *((_QWORD *)v3 + 43) = &off_250505A50;
    *((_QWORD *)v3 + 53) = 0;
    *((_OWORD *)v3 + 29) = xmmword_2342EF3A0;
    *((_WORD *)v3 + 248) = 0;
    v3[498] = 0;
    *((_QWORD *)v3 + 63) = 0;
    *((_QWORD *)v3 + 64) = 0;
    *((_QWORD *)v3 + 71) = 0;
    *((_QWORD *)v3 + 73) = 0;
    *((_QWORD *)v3 + 72) = 0;
    v3[592] = 0;
    *((_QWORD *)v3 + 75) = 0;
    *((_QWORD *)v3 + 77) = 0;
    *((_QWORD *)v3 + 76) = 0;
    *((_DWORD *)v3 + 156) = 0;
    *(_OWORD *)(v3 + 696) = 0u;
    *(_OWORD *)(v3 + 712) = 0u;
    v5 = sub_234114774(0x18uLL);
    if (v5)
    {
      *v5 = v3;
      v5[1] = a1 + 2;
      v5[2] = 0;
      v5[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v5;
      a1[4] = (unint64_t)v5;
      v6 = a1[1];
      v7 = *a1 + 1;
      *a1 = v7;
      if (v7 > v6)
        a1[1] = v7;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_234226670(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    v4 = sub_234115DD4((_QWORD *)(a1 + 16), a2);
    if (!v4)
      sub_23425DC90(0);
    v5 = v4;
    *v4 = 0;
    v6 = (void *)sub_234120820(a2);
    j__free(v6);
    if (*(_QWORD *)(a1 + 40))
    {
      *(_BYTE *)(a1 + 48) = 1;
    }
    else
    {
      *(_QWORD *)(v5[1] + 16) = v5[2];
      *(_QWORD *)(v5[2] + 8) = v5[1];
      j__free(v5);
    }
    --*(_QWORD *)a1;
  }
}

uint64_t sub_2342266F8(uint64_t a1, uint64_t a2)
{
  sub_234226670(a1, a2);
  return 0;
}

_QWORD *sub_234226710(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _BOOL8 v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = 0;
  a1[4] = a2[8];
  a1[5] = a2[11];
  a1[6] = a2[12];
  a1[7] = a2[13];
  a1[8] = a2[14];
  a1[9] = a2[3];
  a1[10] = a2[15];
  a1[11] = a2[16];
  a1[12] = a2[17];
  a1[13] = a2[18];
  a1[14] = a2[19];
  a1[15] = a2[5];
  a1[16] = a2[21];
  a1[17] = a2[22];
  a1[18] = a2[6];
  a1[19] = a2[20];
  a1[20] = 0;
  v3 = a2[9];
  a2[9] = 0;
  a1[21] = v3;
  a1[22] = 0;
  *(_QWORD *)((char *)a1 + 182) = 0;
  if (!v3)
    v3 = a2[7];
  a1[20] = v3;
  a1[3] = a2[4];
  v4 = sub_2342267FC(a1);
  if (!v4)
    sub_234260CC4(v4);
  return a1;
}

BOOL sub_2342267FC(_QWORD *a1)
{
  return *a1
      && a1[2]
      && a1[4]
      && a1[5]
      && a1[6]
      && a1[7]
      && a1[8]
      && a1[9]
      && a1[12]
      && a1[13]
      && a1[14]
      && a1[15]
      && a1[17]
      && a1[16]
      && a1[18]
      && a1[20]
      && a1[10] != 0;
}

void sub_234226894(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  int v8;
  _BYTE v9[4];
  int v10;
  char v11[8];
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 1992))
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
    v8 = 46;
LABEL_9:
    *(_DWORD *)(a4 + 16) = v8;
    return;
  }
  if (!a2)
  {
    v8 = 47;
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
    goto LABEL_9;
  }
  v12 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 1992));
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v11[0] = 1;
  v7 = (uint64_t *)sub_233C25EA4(v11);
  v9[0] = *(_BYTE *)a3;
  if (v9[0])
    v10 = *(_DWORD *)(a3 + 4);
  sub_2341FD918(a2, v7, (uint64_t)v9, a4);
  if (v11[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
}

uint64_t sub_234226978(uint64_t result)
{
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t sub_234226980(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_234226988(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;

  if (*(_DWORD *)(a1 + 64) == 2)
  {
    if (*(_BYTE *)(a1 + 1992))
    {
      v2 = (uint64_t *)sub_233C25EA4((_BYTE *)(a1 + 1992));
      v3 = (_QWORD *)sub_2341CD3C0(*v2);
      sub_2341CB8F8(v3);
    }
    *(_DWORD *)(a1 + 64) = 0;
    sub_23412C070(a1 + 72);
  }
}

void sub_2342269E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;

  v4 = *(_BYTE *)(a1 + 1992);
  if (v4)
  {
    v5 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 1992));
    *(_QWORD *)(a2 + 8) = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    v4 = 1;
  }
  *(_BYTE *)a2 = v4;
  sub_2341CD6FC((_QWORD *)(a1 + 1968));
  *(_DWORD *)(a1 + 64) = 0;
  sub_23412C070(a1 + 72);
}

uint64_t sub_234226A3C@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  char v12[8];
  uint64_t v13;

  v5 = *a2;
  *(_DWORD *)(result + 56) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(result + 40) = v5;
  *(_DWORD *)(result + 60) = *((_DWORD *)a2 + 5);
  v6 = *a3;
  *(_WORD *)(result + 208) = *((_WORD *)a3 + 4);
  *(_QWORD *)(result + 200) = v6;
  if (*(_BYTE *)(result + 1992))
  {
    v13 = *(_QWORD *)sub_233C25EA4((_BYTE *)(result + 1992));
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    v12[0] = 1;
    v8 = (uint64_t *)sub_233C25EA4(v12);
    result = sub_2341CD3C0(*v8);
    v9 = result;
    if (v12[0])
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
    v10 = *a2;
    *(_DWORD *)(v9 + 112) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(v9 + 96) = v10;
    *(_DWORD *)(v9 + 116) = *((_DWORD *)a2 + 5);
    v11 = 99;
  }
  else
  {
    v11 = 93;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
  *(_DWORD *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_234226B24@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;

  if (*(_DWORD *)(result + 64) == 1)
  {
    v5 = result;
    result = sub_2341CD3C0(*a2);
    if (*(_BYTE *)(result + 57) == 1)
    {
      result = sub_2341CDA90((_QWORD *)(v5 + 1968), a2);
      if ((result & 1) != 0)
      {
        *(_DWORD *)(v5 + 64) = 2;
        *(_DWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
        v6 = 114;
      }
      else
      {
        *(_DWORD *)(v5 + 64) = 0;
        *(_DWORD *)a3 = 172;
        *(_QWORD *)(a3 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
        v6 = 110;
      }
    }
    else
    {
      *(_DWORD *)a3 = 47;
      *(_QWORD *)(a3 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
      v6 = 105;
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioneeDeviceProxy.cpp";
    v6 = 104;
  }
  *(_DWORD *)(a3 + 16) = v6;
  return result;
}

uint64_t sub_234226BF8(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  char v5[8];
  uint64_t v6;

  *(_QWORD *)a1 = &off_250517AA0;
  *(_QWORD *)(a1 + 16) = &unk_250517B08;
  if (*(_BYTE *)(a1 + 1992))
  {
    v6 = *(_QWORD *)sub_233C25EA4((_BYTE *)(a1 + 1992));
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v5[0] = 1;
    v2 = (uint64_t *)sub_233CB6588(v5);
    v3 = (_QWORD *)sub_2341CD3C0(*v2);
    sub_2341CB8F8(v3);
    if (v5[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  }
  sub_2341CD6AC(a1 + 1968);
  sub_23412C1FC((_QWORD *)(a1 + 72));
  return a1;
}

uint64_t sub_234226CA0(uint64_t a1)
{
  return sub_234226BF8(a1 - 16);
}

void sub_234226CA8(uint64_t a1)
{
  sub_234226BF8(a1);
  JUMPOUT(0x23493E704);
}

void sub_234226CCC(uint64_t a1)
{
  sub_234226BF8(a1 - 16);
  JUMPOUT(0x23493E704);
}

void sub_234226CF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  sub_2341D849C(a2, a3, a4, a5, &v10, &v9, a6);
  if (!*(_DWORD *)a6)
  {
    v8 = v10;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    *(_DWORD *)a6 = 0;
    a6[1] = "src/controller/CommissioneeDeviceProxy.cpp";
    *((_DWORD *)a6 + 4) = 132;
  }
}

uint64_t sub_234226D74(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1960);
}

uint64_t sub_234226D7C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;

  v3 = *(_BYTE *)(result + 1992);
  if (v3)
  {
    v4 = *(_QWORD *)sub_233C25EA4((_BYTE *)(result + 1992));
    *(_QWORD *)(a2 + 8) = v4;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v3 = 1;
  }
  *(_BYTE *)a2 = v3;
  return result;
}

BOOL sub_234226DC4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 2;
}

const char *sub_234226DD4(unsigned int a1)
{
  if (a1 > 0x26)
    return "???";
  else
    return off_250517B70[(char)a1];
}

const char *sub_234226DFC(unsigned int a1)
{
  if (a1 > 0x24)
    return "core_commissioning_stage_unknown";
  else
    return off_250517CA8[(char)a1];
}

void sub_234226E24(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, int a5@<W4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  int v14;
  std::string *v15;
  int v16;
  int v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  int v21;
  _BYTE v22[6];
  __int16 v23;
  const char *v24;
  int v25;
  char v26;
  char **v27;
  char *v28[2];
  char **v29;
  char *v30[2];
  void *__p[2];
  char v32;
  std::string v33;
  std::string v34;

  if (!*(_QWORD *)(a2 + 56))
  {
    *(_DWORD *)v22 = 2;
    v24 = "core_setup_code_pairer_pair_dev";
    v25 = 3;
    v26 = 3;
    sub_2341C4BEC((uint64_t)v22);
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
    v17 = 65;
LABEL_13:
    *(_DWORD *)(a7 + 16) = v17;
    return;
  }
  if (!a3)
  {
    *(_DWORD *)v22 = 2;
    v24 = "core_setup_code_pairer_pair_dev";
    v25 = 47;
    v26 = 3;
    sub_2341C4BEC((uint64_t)v22);
    *(_DWORD *)a7 = 47;
    *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
    v17 = 66;
    goto LABEL_13;
  }
  v22[0] = 0;
  WORD1(v24) = 0;
  BYTE4(v24) = 0;
  v25 = 0;
  *(_DWORD *)&v22[2] = 0;
  v23 = 0;
  v27 = v28;
  v28[0] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  v29 = v30;
  v14 = strncmp(__s1, "MT:", 3uLL);
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  if (v14)
  {
    sub_2341B7DA4(__p, __s1);
    v15 = sub_2340457EC(&v34, (__int128 *)__p);
    sub_2341C6210((uint64_t)v15, (uint64_t)v22, a7);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (v32 < 0)
      operator delete(__p[0]);
    if (*(_DWORD *)a7)
      goto LABEL_34;
    if ((sub_2341C868C(v22, 0) & 1) == 0)
    {
      v16 = 55;
LABEL_24:
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
      goto LABEL_33;
    }
  }
  else
  {
    sub_2341B7DA4(&v33, __s1);
    v34 = v33;
    memset(&v33, 0, sizeof(v33));
    sub_2341C7E48((uint64_t)&v34, (uint64_t)v22, (_QWORD *)a7);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (*(_DWORD *)a7)
      goto LABEL_34;
    if ((sub_2341C85BC(v22, 0) & 1) == 0)
    {
      v16 = 50;
      goto LABEL_24;
    }
  }
  *(_DWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
  *(_DWORD *)(a7 + 16) = 58;
  if (*a6)
  {
    if (a5 == 2)
    {
      LODWORD(v34.__r_.__value_.__l.__data_) = 2;
      v34.__r_.__value_.__l.__size_ = (std::string::size_type)"core_setup_code_pairer_pair_dev";
      LODWORD(v34.__r_.__value_.__r.__words[2]) = 47;
      v34.__r_.__value_.__s.__data_[20] = 3;
      sub_2341C4BEC((uint64_t)&v34);
      *(_DWORD *)a7 = 47;
      *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
      v16 = 74;
LABEL_33:
      *(_DWORD *)(a7 + 16) = v16;
      goto LABEL_34;
    }
    v18 = v25;
    if (*(_QWORD *)(a2 + 64) == a3
      && *(_DWORD *)(a2 + 72) == v25
      && *(unsigned __int8 *)(a2 + 76) == a4
      && *(unsigned __int8 *)(a2 + 77) == a5)
    {
      v19 = sub_2342272B0(a6);
      sub_234227210(a2, (uint64_t)v19);
      *(_DWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
      v16 = 79;
      goto LABEL_33;
    }
  }
  else
  {
    v18 = v25;
  }
  *(_BYTE *)(a2 + 76) = a4;
  *(_BYTE *)(a2 + 77) = a5;
  *(_QWORD *)(a2 + 64) = a3;
  *(_DWORD *)(a2 + 72) = v18;
  sub_2342272D0(a2);
  if (*a6)
  {
    v20 = sub_2342272B0(a6);
    sub_234227210(a2, (uint64_t)v20);
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = "src/controller/SetUpCodePairer.cpp";
    v16 = 93;
    goto LABEL_33;
  }
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_2342273A0(a2, (uint64_t)v22, (_QWORD *)a7);
  v21 = *(_DWORD *)a7;
  if (*(_DWORD *)a7)
  {
    LODWORD(v34.__r_.__value_.__l.__data_) = 2;
    v34.__r_.__value_.__l.__size_ = (std::string::size_type)"core_setup_code_pairer_pair_dev";
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v21;
    v34.__r_.__value_.__s.__data_[20] = 3;
  }
  else
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a2 + 56)
                                                                                               + 40))(*(_QWORD *)(a2 + 56), 30000, sub_2342274D4, a2);
    if (*(_DWORD *)a7)
      goto LABEL_34;
    LODWORD(v34.__r_.__value_.__l.__data_) = 0;
    v34.__r_.__value_.__l.__size_ = (std::string::size_type)"core_setup_code_pairer_pair_dev";
    v34.__r_.__value_.__s.__data_[20] = 0;
  }
  sub_2341C4BEC((uint64_t)&v34);
LABEL_34:
  sub_233CF19DC((uint64_t)&v29, v30[0]);
  sub_233CF19DC((uint64_t)&v27, v28[0]);
}

uint64_t sub_234227210(uint64_t a1, uint64_t a2)
{
  uint64_t v5[3];

  if (*(_BYTE *)(a1 + 77) == 1)
  {
    sub_234227BA8(a1, (uint64_t)v5);
    LODWORD(v5[0]) = 0;
    sub_23422890C((_QWORD *)(a1 + 96), (const char *)a2, (int *)v5);
  }
  else
  {
    for (v5[0] = 0; v5[0] < *(_QWORD *)(a2 + 8); ++v5[0])
      sub_234228A24((_QWORD *)(a1 + 96), (const char *)a2, v5);
  }
  return sub_234227C90(a1);
}

_BYTE *sub_2342272B0(_BYTE *a1)
{
  if (!*a1)
    sub_2342584DC((uint64_t)a1);
  return a1 + 8;
}

uint64_t sub_2342272D0(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_234227AB8(a1, (uint64_t)v8);
  sub_234227BA8(a1, (uint64_t)v8);
  *(_BYTE *)(a1 + 90) = 0;
  *(_WORD *)(a1 + 88) = 0;
  v2 = *(void ***)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 136) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 112);
      v2 = (void **)(*(_QWORD *)(a1 + 104) + 8);
      *(_QWORD *)(a1 + 104) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 9;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 18;
LABEL_7:
    *(_QWORD *)(a1 + 128) = v6;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = "src/controller/SetUpCodePairer.cpp";
  *(_DWORD *)(a1 + 400) = 485;
  return (*(uint64_t (**)(_QWORD, uint64_t (*)(uint64_t, uint64_t), uint64_t))(**(_QWORD **)(a1 + 56)
                                                                                              + 72))(*(_QWORD *)(a1 + 56), sub_2342274D4, a1);
}

void sub_2342273A0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v6 = (_BYTE *)(a2 + 7);
  v7 = *(unsigned __int8 *)(a2 + 7);
  if (*(_BYTE *)(a1 + 77) != 2)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (*(_BYTE *)(a2 + 7) && (*sub_234044128((_BYTE *)(a2 + 7)) & 2) == 0)
    goto LABEL_7;
  sub_234227830(a1, a2, v14);
  v8 = v14[0];
  if (v7)
  {
    if (!LODWORD(v14[0]))
    {
      v9 = 1;
LABEL_11:
      if ((*sub_234044128(v6) & 1) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    if (LODWORD(v14[0]) != 108)
    {
LABEL_23:
      v12 = v14[1];
      v13 = v14[2];
      *a3 = v8;
      a3[1] = v12;
      a3[2] = v13;
      return;
    }
LABEL_7:
    v9 = 0;
    goto LABEL_11;
  }
  v9 = LODWORD(v14[0]) == 0;
LABEL_12:
  v9 = v9;
LABEL_13:
  sub_234227954(a1, a2, v14);
  v8 = v14[0];
  if (v7)
    v10 = LODWORD(v14[0]) == 0;
  else
    v10 = 1;
  if (!v10)
    goto LABEL_23;
  if (LODWORD(v14[0]))
    v11 = v9;
  else
    v11 = 1;
  if (v11 == 1)
    *(_DWORD *)a3 = 0;
  else
    *(_DWORD *)a3 = 108;
  a3[1] = "src/controller/SetUpCodePairer.cpp";
  *((_DWORD *)a3 + 4) = 142;
}

uint64_t sub_2342274D4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  char *v5;
  uint64_t result;
  NSObject *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  _DWORD v16[2];
  const char *v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint8_t buf[4];
  _BYTE v31[18];
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Discovery timed out", buf, 2u);
  }
  if (sub_234114844(1u))
    sub_2341147D0(9u, 1);
  v28 = 0uLL;
  v29 = 0;
  sub_234227AB8(a2, (uint64_t)&v28);
  if ((_DWORD)v28)
  {
    v4 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v26 = v28;
      v27 = v29;
      v5 = sub_2341083CC((const char **)&v26, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v31 = v5;
      *(_WORD *)&v31[8] = 2080;
      *(_QWORD *)&v31[10] = "src/controller/SetUpCodePairer.cpp";
      v32 = 1024;
      v33 = 613;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_234114844(1u))
    {
      v24 = v28;
      v25 = v29;
      sub_2341083CC((const char **)&v24, 1);
      sub_2341147D0(0, 1);
    }
  }
  v28 = 0uLL;
  v29 = 0;
  result = (uint64_t)sub_234227BA8(a2, (uint64_t)&v28);
  if ((_DWORD)v28)
  {
    v7 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v22 = v28;
      v23 = v29;
      v8 = sub_2341083CC((const char **)&v22, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v31 = v8;
      *(_WORD *)&v31[8] = 2080;
      *(_QWORD *)&v31[10] = "src/controller/SetUpCodePairer.cpp";
      v32 = 1024;
      v33 = 614;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      v20 = v28;
      v21 = v29;
      sub_2341083CC((const char **)&v20, 1);
      result = sub_2341147D0(0, 1);
    }
  }
  *(_BYTE *)(a2 + 90) = 0;
  if (!*(_BYTE *)(a2 + 376) && !*(_QWORD *)(a2 + 136))
  {
    v9 = *(_DWORD *)(a2 + 384);
    v10 = *(_DWORD *)(a2 + 388);
    if (v9)
      v11 = *(_DWORD *)(a2 + 384);
    else
      v11 = 50;
    v12 = *(_DWORD *)(a2 + 404);
    if (v9)
      v13 = *(const char **)(a2 + 392);
    else
      v13 = "src/controller/SetUpCodePairer.cpp";
    if (v9)
      v14 = *(_DWORD *)(a2 + 400);
    else
      v14 = 624;
    *(_DWORD *)buf = 1;
    *(_QWORD *)&v31[4] = "core_setup_code_pairer_pair_dev";
    *(_DWORD *)&v31[12] = v11;
    v31[16] = 3;
    sub_2341C4BEC((uint64_t)buf);
    v15 = *(_QWORD *)(a2 + 48);
    v16[0] = v11;
    v16[1] = v10;
    v17 = v13;
    v18 = v14;
    v19 = v12;
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v15 + 48))(v15, v16);
  }
  return result;
}

uint64_t sub_234227830@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  if (*(_QWORD *)(result + 8))
  {
    v5 = result;
    v6 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Starting commissioning discovery over BLE", v7, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    *(_BYTE *)(v5 + 88) = 1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result = sub_23410BC60(*(_QWORD *)(v5 + 8), a2 + 10, v5, (uint64_t)sub_234227A84, (uint64_t)sub_234227A88, (uint64_t)a3);
    if (*(_DWORD *)a3)
      *(_BYTE *)(v5 + 88) = 0;
  }
  else
  {
    *(_DWORD *)a3 = 108;
    a3[1] = "src/controller/SetUpCodePairer.cpp";
    *((_DWORD *)a3 + 4) = 152;
  }
  return result;
}

void sub_234227934(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 108;
  *(_QWORD *)(a1 + 8) = "src/controller/SetUpCodePairer.cpp";
  *(_DWORD *)(a1 + 16) = 237;
}

void sub_234227954(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  _BYTE *v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint8_t buf[16];

  v6 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Starting commissioning discovery over DNS-SD", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v7 = (_BYTE *)(a1 + 16);
  if (*(_BYTE *)(a2 + 12))
  {
    *v7 = 1;
    if (*(_BYTE *)(a2 + 12))
      v8 = *(_WORD *)(a2 + 10);
    else
      v8 = HIBYTE(*(_WORD *)(a2 + 10));
    v9 = v8;
  }
  else
  {
    *v7 = 2;
    v9 = sub_2340441C0((_BYTE *)(a2 + 10));
  }
  *(_QWORD *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 89) = 1;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_OWORD *)v7;
  v12 = *(_QWORD *)(a1 + 32);
  sub_2342342EC(v10, (uint64_t)&v11, a3);
  if (*(_DWORD *)a3)
    *(_BYTE *)(a1 + 89) = 0;
}

uint64_t sub_234227A88(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return sub_23422833C(a1, (int *)&v3);
}

uint64_t sub_234227AB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint8_t v6[16];

  if (!*(_BYTE *)(result + 88))
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/controller/SetUpCodePairer.cpp";
    v5 = 181;
LABEL_10:
    *(_DWORD *)(a2 + 16) = v5;
    return result;
  }
  v3 = result;
  *(_BYTE *)(result + 88) = 0;
  if (!*(_QWORD *)(result + 8))
  {
    *(_DWORD *)a2 = 108;
    *(_QWORD *)(a2 + 8) = "src/controller/SetUpCodePairer.cpp";
    v5 = 186;
    goto LABEL_10;
  }
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Stopping commissioning discovery over BLE", v6, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(9u, 3);
  return sub_23410BB60(*(_QWORD *)(v3 + 8), a2);
}

_QWORD *sub_234227BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  _QWORD *result;
  uint8_t v6[32];

  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Stopping commissioning discovery over DNS-SD", v6, 2u);
  }
  if (sub_234114844(3u))
    sub_2341147D0(9u, 3);
  *(_BYTE *)(a1 + 89) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  result = sub_234234354(*(_QWORD *)(a1 + 48), (uint64_t)v6);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/controller/SetUpCodePairer.cpp";
  *(_DWORD *)(a2 + 16) = 232;
  return result;
}

uint64_t sub_234227C70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(result + 90) = 0;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = "src/controller/SetUpCodePairer.cpp";
  *(_DWORD *)(a2 + 16) = 243;
  return result;
}

uint64_t sub_234227C90(uint64_t a1)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  NSObject *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  int v35;
  __int128 v36;
  int v37;
  _BYTE buf[24];
  int v39;
  __int128 v40;
  int v41;
  char __str[76];
  __int128 v43;
  int v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[28];
  unsigned __int8 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  _BYTE v58[25];
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 376))
    return 0;
  v3 = *(_QWORD *)(a1 + 136);
  if (!v3)
    return 0;
  v30 = a1 + 152;
  v31 = a1 + 96;
  v28 = a1 + 288;
  v29 = a1 + 304;
  while (1)
  {
    v4 = *(_QWORD *)(a1 + 128);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v4 / 0x12));
    v6 = (__int128 *)(v5 + 224 * (v4 % 0x12));
    v7 = *((_DWORD *)v6 + 4);
    v43 = *v6;
    v44 = v7;
    v45 = *((_DWORD *)v6 + 5);
    v8 = *(__int128 *)((char *)v6 + 72);
    v9 = *(__int128 *)((char *)v6 + 88);
    v10 = *(__int128 *)((char *)v6 + 104);
    *(_OWORD *)&v51[12] = *(__int128 *)((char *)v6 + 116);
    v50 = v9;
    *(_OWORD *)v51 = v10;
    v49 = v8;
    v11 = *(__int128 *)((char *)v6 + 24);
    v12 = *(__int128 *)((char *)v6 + 56);
    v47 = *(__int128 *)((char *)v6 + 40);
    v48 = v12;
    v46 = v11;
    v52 = *((_BYTE *)v6 + 132);
    if (v52)
    {
      v13 = *((_QWORD *)v6 + 17);
      v54 = *((_DWORD *)v6 + 36);
      v53 = v13;
    }
    v14 = *(__int128 *)((char *)v6 + 152);
    v56 = *((_QWORD *)v6 + 21);
    v55 = v14;
    v15 = v5 + 224 * (v4 % 0x12);
    v16 = *(_OWORD *)(v15 + 176);
    v17 = *(_OWORD *)(v15 + 192);
    *(_OWORD *)&v58[9] = *(_OWORD *)(v15 + 201);
    v57 = v16;
    *(_OWORD *)v58 = v17;
    v59 = *(_DWORD *)(v15 + 220);
    *(_QWORD *)(a1 + 128) = v4 + 1;
    *(_QWORD *)(a1 + 136) = v3 - 1;
    sub_2342294A4(v31, 1);
    LODWORD(v46) = *(_DWORD *)(a1 + 72);
    *(_OWORD *)buf = v43;
    *(_DWORD *)&buf[16] = v44;
    *(_DWORD *)&buf[20] = v45;
    sub_23412A258((uint64_t)buf, __str, 0x4CuLL);
    v18 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = __str;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "Attempting PASE connection to %s", buf, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_234228104(a1);
    if (v44 == 1)
    {
      v19 = v45;
      *(_DWORD *)(v30 + 16) = v44;
      *(_BYTE *)(a1 + 144) = 1;
      *(_OWORD *)v30 = v43;
      *(_DWORD *)(a1 + 172) = v19;
      v20 = *(_OWORD *)v51;
      *(_OWORD *)(a1 + 240) = v50;
      *(_OWORD *)(a1 + 256) = v20;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v51[12];
      v21 = v47;
      *(_OWORD *)(a1 + 176) = v46;
      *(_OWORD *)(a1 + 192) = v21;
      v22 = v49;
      *(_OWORD *)(a1 + 208) = v48;
      *(_OWORD *)(a1 + 224) = v22;
      v23 = v52;
      *(_BYTE *)(a1 + 284) = v52;
      if (v23)
      {
        *(_QWORD *)v28 = v53;
        *(_DWORD *)(v28 + 8) = v54;
      }
      *(_OWORD *)v29 = v55;
      *(_QWORD *)(v29 + 16) = v56;
      v24 = *(_OWORD *)v58;
      *(_OWORD *)(a1 + 328) = v57;
      *(_OWORD *)(a1 + 344) = v24;
      *(_OWORD *)(a1 + 353) = *(_OWORD *)&v58[9];
      *(_DWORD *)(a1 + 372) = v59;
    }
    if (*(_BYTE *)(a1 + 76))
      sub_23422D220(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), (uint64_t)&v43, (uint64_t *)buf);
    else
      sub_23422D06C(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), (uint64_t)&v43, (uint64_t *)buf);
    v25 = *(_DWORD *)buf;
    v40 = *(_OWORD *)&buf[4];
    v41 = *(_DWORD *)&buf[20];
    if (!*(_DWORD *)buf)
      break;
    v26 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v35 = v25;
      v36 = v40;
      v37 = v41;
      v27 = sub_2341083CC((const char **)&v35, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "src/controller/SetUpCodePairer.cpp";
      *(_WORD *)&buf[22] = 1024;
      v39 = 290;
      _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    if (sub_234114844(1u))
    {
      v32 = v25;
      v33 = v40;
      v34 = v41;
      sub_2341083CC((const char **)&v32, 1);
      sub_2341147D0(0, 1);
    }
    sub_234228144(a1);
    v3 = *(_QWORD *)(a1 + 136);
    if (!v3)
      return 0;
  }
  return 1;
}

uint64_t sub_234228104(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(result + 376))
    sub_234260DF4(result);
  *(_BYTE *)(result + 376) = 1;
  v1 = *(_QWORD *)(result + 48);
  v2 = *(_QWORD *)(v1 + 4320);
  if (v2 == result)
    sub_234260D58(result);
  *(_QWORD *)(result + 80) = v2;
  *(_QWORD *)(v1 + 4320) = result;
  return result;
}

uint64_t sub_234228144(uint64_t result)
{
  if (!*(_BYTE *)(result + 376))
    sub_234260E90(result);
  *(_BYTE *)(result + 376) = 0;
  *(_QWORD *)(*(_QWORD *)(result + 48) + 4320) = *(_QWORD *)(result + 80);
  *(_QWORD *)(result + 80) = 0;
  return result;
}

uint64_t sub_234228174(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint8_t v5[8];
  uint64_t v6;

  v6 = a2;
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Discovered device to be commissioned over BLE", v5, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  *(_BYTE *)(a1 + 88) = 0;
  sub_23422821C(a1 + 96, &v6);
  return sub_234227C90(a1);
}

unint64_t sub_23422821C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_234229500((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x12));
  v7 = *v6 + 224 * (v4 % 0x12);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *a2;
  *(_BYTE *)(v7 - 192) = 0;
  *(_WORD *)(v7 - 93) = 0;
  *(_BYTE *)(v7 - 196) = 0;
  *(_DWORD *)(v7 - 4) = 0;
  *(_OWORD *)(v7 - 72) = 0u;
  *(_OWORD *)(v7 - 56) = 0u;
  *(_OWORD *)(v7 - 40) = 0u;
  *(_OWORD *)(v7 - 24) = 0u;
  *(_BYTE *)(v7 - 8) = 0;
  *(_QWORD *)(v7 - 224) = 0;
  *(_QWORD *)(v7 - 216) = 0;
  *(_BYTE *)(v7 - 208) = 2;
  *(_WORD *)(v7 - 206) = 5540;
  *(_QWORD *)(v7 - 204) = 0;
  *(_QWORD *)(v7 - 64) = v8;
  v9 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_2342EF780);
  *(int64x2_t *)(a1 + 32) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v10)
    return 0;
  else
    return *(_QWORD *)(v10 + 8 * (v9.i64[0] / 0x12uLL)) + 224 * (v9.i64[0] % 0x12uLL);
}

uint64_t sub_23422833C(uint64_t a1, int *a2)
{
  NSObject *v4;
  char *v5;
  uint64_t result;
  int v7;
  NSObject *v8;
  char *v9;
  int v10;
  __int128 v11;
  int v12;
  int v13;
  __int128 v14;
  int v15;
  _BYTE buf[24];
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Commissioning discovery over BLE failed: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_QWORD *)&buf[16] = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    result = sub_2341147D0(9u, 1);
  }
  *(_BYTE *)(a1 + 88) = 0;
  v7 = *a2;
  v18 = *(_OWORD *)(a2 + 1);
  v19 = a2[5];
  if (v7)
  {
    v8 = sub_234117B80(0, "NotSpecified");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v13 = v7;
      v14 = v18;
      v15 = v19;
      v9 = sub_2341083CC((const char **)&v13, 1);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "src/controller/SetUpCodePairer.cpp";
      *(_WORD *)&buf[22] = 1024;
      v17 = 334;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      v10 = v7;
      v11 = v18;
      v12 = v19;
      sub_2341083CC((const char **)&v10, 1);
      return sub_2341147D0(0, 1);
    }
  }
  return result;
}

BOOL sub_234228548(int a1)
{
  return a1 != 0;
}

BOOL sub_234228554(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  NSObject *v4;
  _BOOL8 result;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t v14[16];
  uint8_t v15[16];
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t buf[16];
  uint8_t v19[16];

  if (*a2)
    return 0;
  v3 = sub_2340D9D80(a2);
  if (*((_BYTE *)v3 + 188))
  {
    if (*(_WORD *)(a1 + 40) && *((_WORD *)v3 + 91) && *(unsigned __int16 *)(a1 + 40) != *((unsigned __int16 *)v3 + 91))
    {
      v4 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Discovered device does not match our vendor id.", buf, 2u);
      }
      result = sub_234114844(2u);
      if (result)
      {
LABEL_20:
        v8 = 2;
LABEL_21:
        sub_2341147D0(9u, v8);
        return 0;
      }
    }
    else if (*(_WORD *)(a1 + 42)
           && *((_WORD *)v3 + 92)
           && *(unsigned __int16 *)(a1 + 42) != *((unsigned __int16 *)v3 + 92))
    {
      v6 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Discovered device does not match our product id.", v17, 2u);
      }
      result = sub_234114844(2u);
      if (result)
        goto LABEL_20;
    }
    else
    {
      v9 = *(unsigned __int8 *)(a1 + 16);
      if (*(_BYTE *)(a1 + 16))
      {
        if (v9 == 1)
        {
          v10 = *((_BYTE *)v3 + 181) & 0xF;
        }
        else
        {
          if (v9 != 2)
          {
            v12 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v15 = 0;
              _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Unknown filter type; all matches will fail",
                v15,
                2u);
            }
            result = sub_234114844(1u);
            if (result)
            {
              v8 = 1;
              goto LABEL_21;
            }
            return result;
          }
          v10 = *((unsigned __int16 *)v3 + 90);
        }
        if (*(_QWORD *)(a1 + 24) == v10)
          return 1;
        v13 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v14 = 0;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "Discovered device does not match our discriminator.", v14, 2u);
        }
        result = sub_234114844(2u);
        if (result)
          goto LABEL_20;
      }
      else
      {
        v11 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Filter type none; all matches will fail", v16, 2u);
        }
        result = sub_234114844(3u);
        if (result)
        {
          v8 = 3;
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    v7 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Discovered device does not have an open commissioning window.", v19, 2u);
    }
    result = sub_234114844(2u);
    if (result)
      goto LABEL_20;
  }
  return result;
}

uint64_t sub_234228858(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  NSObject *v5;
  _QWORD *v6;
  uint8_t v7[16];

  result = sub_234228554(a1, a2);
  if ((_DWORD)result)
  {
    v5 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Discovered device to be commissioned over DNS-SD", v7, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    v6 = sub_2340D9D80(a2);
    return sub_234227210(a1, (uint64_t)v6);
  }
  return result;
}

uint64_t sub_23422890C(_QWORD *a1, const char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 18 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    sub_234229B0C(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = *(_QWORD *)(v6 + 8 * (v9 / 0x12)) + 224 * (v9 % 0x12);
  }
  sub_23422915C(v10, a2, *a3);
  v11 = a1[4];
  v12 = a1[5] + 1;
  a1[5] = v12;
  v13 = v11 + v12;
  v14 = a1[1];
  v15 = (_QWORD *)(v14 + 8 * (v13 / 0x12));
  v16 = *v15 + 224 * (v13 % 0x12);
  if (a1[2] == v14)
    v16 = 0;
  if (v16 == *v15)
    v16 = *(v15 - 1) + 4032;
  return v16 - 224;
}

uint64_t sub_234228A24(_QWORD *a1, const char *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 18 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    sub_234229B0C(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = *(_QWORD *)(v6 + 8 * (v9 / 0x12)) + 224 * (v9 % 0x12);
  }
  sub_23422915C(v10, a2, *a3);
  v11 = a1[4];
  v12 = a1[5] + 1;
  a1[5] = v12;
  v13 = v11 + v12;
  v14 = a1[1];
  v15 = (_QWORD *)(v14 + 8 * (v13 / 0x12));
  v16 = *v15 + 224 * (v13 % 0x12);
  if (a1[2] == v14)
    v16 = 0;
  if (v16 == *v15)
    v16 = *(v15 - 1) + 4032;
  return v16 - 224;
}

uint64_t sub_234228B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2 || a2 && v2 != a2)
    return 0;
  if (*(_BYTE *)(a1 + 376))
    sub_234228144(a1);
  sub_2342272D0(a1);
  *(_QWORD *)(a1 + 64) = 0;
  return 1;
}

uint64_t sub_234228B94(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  NSObject *v7;
  uint8_t v9[16];
  uint8_t buf[16];

  if (sub_234227C90(a1))
  {
    v2 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Trying connection to commissionee over different transport", buf, 2u);
    }
    if (!sub_234114844(2u))
      return 1;
    goto LABEL_16;
  }
  v3 = 0;
  v4 = a1 + 88;
  do
  {
    v5 = *(unsigned __int8 *)(v4 + v3);
    if (*(_BYTE *)(v4 + v3))
      v6 = 1;
    else
      v6 = v3 == 2;
    ++v3;
  }
  while (!v6);
  if (!v5)
    return 0;
  v7 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Waiting to discover commissionees that match our filters", v9, 2u);
  }
  if (sub_234114844(2u))
LABEL_16:
    sub_2341147D0(9u, 2);
  return 1;
}

BOOL sub_234228CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  BOOL v4;

  v1 = 0;
  v2 = a1 + 88;
  do
  {
    v3 = *(unsigned __int8 *)(v2 + v1);
    if (*(_BYTE *)(v2 + v1))
      v4 = 1;
    else
      v4 = v1 == 2;
    ++v1;
  }
  while (!v4);
  return v3 != 0;
}

uint64_t sub_234228CDC(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  if (a2 != 1)
    goto LABEL_18;
  if (!*(_QWORD *)(a1 + 136))
  {
    v4 = 0;
    v5 = a1 + 88;
    do
    {
      v6 = *(unsigned __int8 *)(v5 + v4);
      if (*(_BYTE *)(v5 + v4))
        v7 = 1;
      else
        v7 = v4 == 2;
      ++v4;
    }
    while (!v7);
    if (v6)
    {
      v8 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Ignoring SecurePairingFailed status for now; we are waiting to see if we discover more devices",
          v9,
          2u);
      }
      result = sub_234114844(2u);
      if ((_DWORD)result)
        return sub_2341147D0(9u, 2);
      return result;
    }
LABEL_18:
    result = *(_QWORD *)(a1 + 80);
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    return result;
  }
  v2 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Ignoring SecurePairingFailed status for now; we have more discovered devices to try",
      buf,
      2u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(9u, 2);
  return result;
}

uint64_t sub_234228E18(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint8_t buf[16];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 80);
  sub_234228144(a1);
  if (*(_DWORD *)a2 == 50)
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v7 = sub_233D4CB30((_BYTE *)(a1 + 144));
      v8 = *(_QWORD *)v7;
      v9 = *((_QWORD *)v7 + 1);
      v17 = 0uLL;
      v18 = 0;
      v10 = sub_2341F3D04();
      v16 = *((_DWORD *)v7 + 55);
      (*(void (**)(__int128 *__return_ptr, uint64_t *, _BYTE *, uint64_t, uint64_t, int *))(*v10 + 80))(&v17, v10, v7 + 176, v8, v9, &v16);
      if ((_DWORD)v17)
      {
        if ((_DWORD)v17 != 45)
        {
          v11 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = v17;
            v22 = v18;
            v12 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v12;
            _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "Error when verifying the validity of an address: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = v17;
            v22 = v18;
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
        }
      }
    }
  }
  else if (!*(_DWORD *)a2)
  {
    v5 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "PASE session established with commissionee. Stopping discovery.", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    sub_2342272D0(a1);
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)buf = 1;
    *(_QWORD *)&buf[8] = "core_setup_code_pairer_pair_dev";
    LODWORD(v22) = *(_DWORD *)a2;
    BYTE4(v22) = 3;
    result = sub_2341C4BEC((uint64_t)buf);
    if (v4)
    {
      v19 = *a2;
      v20 = *((_QWORD *)a2 + 2);
      return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 24))(v4, &v19);
    }
    return result;
  }
  *(_BYTE *)(a1 + 144) = 0;
  result = sub_234228B94(a1);
  if ((_DWORD)result)
  {
    v13 = *a2;
    *(_QWORD *)(a1 + 400) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 384) = v13;
  }
  else
  {
    *(_DWORD *)buf = 1;
    *(_QWORD *)&buf[8] = "core_setup_code_pairer_pair_dev";
    LODWORD(v22) = *(_DWORD *)a2;
    BYTE4(v22) = 3;
    result = sub_2341C4BEC((uint64_t)buf);
    if (v4)
    {
      v14 = *a2;
      v15 = *((_QWORD *)a2 + 2);
      return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 24))(v4, &v14);
    }
  }
  return result;
}

uint64_t sub_2342290DC(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)result + 32))(result, &v3);
  }
  return result;
}

uint64_t sub_23422911C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v4;
  uint64_t v5;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v4 = *a3;
    v5 = *((_QWORD *)a3 + 2);
    return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)result + 40))(result, a2, &v4);
  }
  return result;
}

uint64_t sub_23422915C(uint64_t a1, const char *a2, uint64_t a3)
{
  int *v6;
  __int16 v7;
  _BOOL4 v8;
  int v9;

  *(_OWORD *)a1 = xmmword_25615DD84;
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 18) = 5540;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 131) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)a2;
  strncpy((char *)(a1 + 176), a2 + 98, 0x29uLL);
  *(_BYTE *)(a1 + 216) = 0;
  v6 = (int *)&a2[16 * a3];
  v7 = *((_WORD *)a2 + 48);
  v8 = sub_23410EF74(v6 + 4);
  v9 = *(_DWORD *)a2;
  if (!v8)
    v9 = 0;
  *(_OWORD *)a1 = *((_OWORD *)v6 + 1);
  *(_BYTE *)(a1 + 16) = 1;
  *(_WORD *)(a1 + 18) = v7;
  *(_DWORD *)(a1 + 20) = v9;
  if (a2[148])
    sub_234229248(a1, *((_DWORD *)a2 + 36));
  if (a2[156])
    sub_2342292A0(a1, *((_DWORD *)a2 + 38));
  return a1;
}

uint64_t sub_234229248(uint64_t a1, int a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;

  v4 = (_BYTE *)(a1 + 132);
  if (!*(_BYTE *)(a1 + 132))
  {
    v5 = sub_2341B1C28();
    *(_BYTE *)(a1 + 132) = 1;
    *(_QWORD *)(a1 + 136) = v5;
    *(_DWORD *)(a1 + 144) = v6;
  }
  *(_DWORD *)sub_234122C20(v4) = a2;
  return a1;
}

uint64_t sub_2342292A0(uint64_t a1, int a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;

  v4 = (_BYTE *)(a1 + 132);
  if (!*(_BYTE *)(a1 + 132))
  {
    v5 = sub_2341B1C28();
    *(_BYTE *)(a1 + 132) = 1;
    *(_QWORD *)(a1 + 136) = v5;
    *(_DWORD *)(a1 + 144) = v6;
  }
  *((_DWORD *)sub_234122C20(v4) + 1) = a2;
  return a1;
}

uint64_t sub_2342292FC(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;

  *(_BYTE *)(result + 32) = 0;
  *(_WORD *)(result + 131) = 0;
  *(_BYTE *)(result + 28) = 0;
  *(_DWORD *)(result + 220) = 0;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_BYTE *)(result + 216) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 2;
  *(_WORD *)(result + 18) = 5540;
  v3 = 168;
  if (a3)
    v3 = 160;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + v3) = a2;
  return result;
}

_QWORD *sub_234229354(_QWORD *a1)
{
  *a1 = &off_250517DE0;
  sub_2342293C4(a1 + 12);
  return a1;
}

void sub_234229384(_QWORD *a1)
{
  *a1 = &off_250517DE0;
  sub_2342293C4(a1 + 12);
  JUMPOUT(0x23493E704);
}

uint64_t sub_2342293C4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 9;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 18;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_234229458((uint64_t)a1);
}

uint64_t sub_234229458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_2342294A4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x12)
    a2 = 1;
  if (v2 < 0x24)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 18;
  }
  return v4 ^ 1u;
}

void sub_234229500(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 18 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x12)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_2340FD57C(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      sub_2342299F8(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_2340FD57C((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 9;
      else
        v40 = (uint64_t)a1[4] + 18;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        sub_2342298E4(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      sub_2342297C8((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 9;
      else
        v35 = (uint64_t)a1[4] + 18;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 18;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_2342297C8((uint64_t)a1, &__p);
  }
}

void sub_2342297C8(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_2340FD57C(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_2342298E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_2340FD57C(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_2342299F8(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_2340FD57C(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_234229B0C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x12;
  v4 = v2 - 18;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)sub_2340FD57C(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_2342298E4(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_2342297C8((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)sub_2340FD57C((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_2340FD57C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_2342299F8(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      sub_234229DD0((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void sub_234229DD0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_2340FD57C(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_234229EE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  *(_QWORD *)a1 = &unk_250517410;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = sub_2341F3D04();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_250517E88;
  *(_DWORD *)(a1 + 36) = 256;
  v2 = 40;
  do
  {
    v3 = a1 + v2;
    *(_DWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 144) = 0;
    *(_BYTE *)(v3 + 148) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    *(_BYTE *)(v3 + 156) = 0;
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 162) = 0;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    *(_OWORD *)(v3 + 127) = 0u;
    sub_2341F7078(a1 + v2);
    *(_OWORD *)(v3 + 168) = 0u;
    v4 = (_OWORD *)(a1 + v2 + 168);
    *(_OWORD *)((char *)v4 + 235) = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v2 += 424;
    v4[1] = 0u;
    v4[2] = 0u;
  }
  while (v4 + 16 != (_OWORD *)(a1 + 4280));
  *(_QWORD *)(a1 + 4280) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

void sub_234229FC4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  sub_2341B1F64("src/controller/CHIPDeviceController.cpp", 101);
  if (!*(_DWORD *)(a1 + 32))
  {
    v8 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
    {
      if (*v8)
      {
        if (v8[2])
        {
          if (v8[3])
          {
            if (v8[4])
            {
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              sub_2341F3D3C((_QWORD *)(a1 + 16), (uint64_t)a3);
              if (*(_DWORD *)a3)
                return;
              v9 = *(_QWORD *)(a1 + 24);
              if (v9)
                *(_QWORD *)(v9 + 8) = a1;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
              *(_WORD *)(a1 + 4296) = *(_WORD *)(a2 + 94);
              if (*(_QWORD *)(a2 + 24) || *(_QWORD *)(a2 + 48) || *(_QWORD *)(a2 + 80))
              {
                *a3 = 0;
                a3[1] = 0;
                a3[2] = 0;
                sub_23422A390(a1, (_BYTE *)a2, (uint64_t)a3);
                if (*(_DWORD *)a3)
                  return;
                goto LABEL_15;
              }
              if (!*(_BYTE *)(a2 + 92))
              {
LABEL_15:
                *(_QWORD *)(a1 + 4280) = sub_23422438C(*(_QWORD *)a2);
                *(_DWORD *)(a1 + 32) = 1;
                *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 90);
                *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 91);
                if (*(_BYTE *)(a1 + 36))
                {
                  v10 = sub_234117B80(9u, "Controller");
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                  {
                    v11 = *(unsigned __int8 *)(a1 + 36);
                    v12 = sub_233D53F10(a1);
                    if (v12)
                      v13 = *(_DWORD *)(v12 + 12);
                    else
                      v13 = 0;
                    v16 = sub_233D53F10(a1);
                    if (v16)
                      v17 = *(_DWORD *)(v16 + 8);
                    else
                      v17 = 0;
                    v18 = sub_233D53F10(a1);
                    if (v18)
                      v19 = *(_DWORD *)(v18 + 20);
                    else
                      v19 = 0;
                    v20 = sub_233D53F10(a1);
                    if (v20)
                      v21 = *(_DWORD *)(v20 + 16);
                    else
                      v21 = 0;
                    *(_DWORD *)buf = 67110144;
                    v24 = v11;
                    v25 = 1024;
                    v26 = v13;
                    v27 = 1024;
                    v28 = v17;
                    v29 = 1024;
                    v30 = v19;
                    v31 = 1024;
                    v32 = v21;
                    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Joined the fabric at index %d. Fabric ID is 0x%08X%08X (Compressed Fabric ID: %08X%08X)", buf, 0x20u);
                  }
                  if (sub_234114844(2u))
                  {
                    sub_233D53F10(a1);
                    sub_233D53F10(a1);
                    sub_233D53F10(a1);
                    sub_233D53F10(a1);
                    sub_2341147D0(9u, 2);
                  }
                }
                v7 = 0;
                v6 = 152;
                goto LABEL_25;
              }
              v14 = *(_QWORD *)(*(_QWORD *)a2 + 72);
              if (*(_BYTE *)(v14 + 2642))
              {
                v15 = sub_233CB65A8((_BYTE *)(a2 + 92));
                if (sub_2341E2E70(v14, *v15))
                {
                  *(_BYTE *)(a1 + 36) = *sub_233CB65A8((_BYTE *)(a2 + 92));
                  goto LABEL_15;
                }
                v22 = sub_234117B80(9u, "Controller");
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "There is no fabric corresponding to the given fabricIndex", buf, 2u);
                }
                if (sub_234114844(1u))
                  sub_2341147D0(9u, 1);
                v6 = 134;
              }
              else
              {
                v6 = 126;
              }
            }
            else
            {
              v6 = 113;
            }
          }
          else
          {
            v6 = 110;
          }
        }
        else
        {
          v6 = 107;
        }
      }
      else
      {
        v6 = 106;
      }
    }
    else
    {
      v6 = 104;
    }
    v7 = 47;
    goto LABEL_25;
  }
  v6 = 103;
  v7 = 3;
LABEL_25:
  *(_DWORD *)a3 = v7;
  a3[1] = "src/controller/CHIPDeviceController.cpp";
  *((_DWORD *)a3 + 4) = v6;
}

void sub_23422A390(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v7;
  uint64_t v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  char v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  unsigned __int8 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  uint8_t buf[16];
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t (**v49)();
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v48 = &unk_2342EDFA4;
  v7 = *((_WORD *)a2 + 47);
  v8 = *((_QWORD *)a2 + 3);
  v9 = a2[32];
  v10 = sub_234114774(0x190uLL);
  if (!v10)
  {
    *(_DWORD *)a3 = 11;
    *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
    *(_DWORD *)(a3 + 16) = 182;
    return;
  }
  v11 = v10;
  v46 = 0;
  v47 = 0;
  v12 = sub_234114774(0x190uLL);
  if (v12)
  {
    v13 = v12;
    v14 = sub_234114774(0x190uLL);
    if (!v14)
    {
      *(_DWORD *)a3 = 11;
      *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
      *(_DWORD *)(a3 + 16) = 184;
      goto LABEL_10;
    }
    v15 = v14;
    sub_233CAF22C(&v44, (uint64_t)v11, 400);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341D9834(*((_QWORD *)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)&v44, a3);
    if (*(_DWORD *)a3
      || (*(_QWORD *)a3 = 0,
          *(_QWORD *)(a3 + 8) = 0,
          *(_QWORD *)(a3 + 16) = 0,
          sub_233BF7114(&v49, v44, v45),
          sub_2341D8344((uint64_t)&v49, &v48, (_QWORD *)a3),
          *(_DWORD *)a3))
    {
LABEL_6:
      j__free(v15);
LABEL_10:
      j__free(v13);
      goto LABEL_11;
    }
    v49 = &off_250505A50;
    v50 = *v48;
    v17 = v48[2];
    v16 = v48[3];
    v18 = *((_BYTE *)v48 + 64);
    v51 = v48[1];
    v54 = v18;
    v53 = v16;
    v52 = v17;
    v43 = 0uLL;
    if (*((_QWORD *)a2 + 8))
    {
      sub_233CAF22C(buf, (uint64_t)v13, 400);
      v43 = *(_OWORD *)buf;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      sub_2341D9834(*((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)&v43, a3);
      if (*(_DWORD *)a3)
        goto LABEL_6;
    }
    else
    {
      v19 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_DEFAULT, "Intermediate CA is not needed", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
    }
    sub_233CAF22C(&v41, (uint64_t)v15, 400);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_2341D9834(*((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)&v41, a3);
    if (*(_DWORD *)a3)
      goto LABEL_6;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_233BF7114(buf, v41, v42);
    sub_2341D83F0((uint64_t)buf, &v46, &v47, (_QWORD *)a3);
    if (*(_DWORD *)a3)
      goto LABEL_6;
    v20 = *(_QWORD *)(*(_QWORD *)a2 + 72);
    if (a2[88])
      v21 = sub_2341E2DE8(*(_QWORD *)(*(_QWORD *)a2 + 72), (uint64_t)&v49, v47, v46);
    else
      v21 = sub_2341E2C40(*(_QWORD *)(*(_QWORD *)a2 + 72), (uint64_t)&v49, v47);
    v34 = v20;
    if (v21)
      v22 = *((unsigned __int8 *)v21 + 137);
    else
      v22 = 0;
    v40 = v22;
    v23 = a2[89];
    if (a2[88])
      *(_WORD *)(v34 + 2644) |= 0x40u;
    v24 = v23 ^ 1;
    if (v8)
    {
      if (v21)
      {
        sub_233BF7114(v37, v41, v42);
        sub_233BF7114(v36, v43, *((uint64_t *)&v43 + 1));
        v25 = v22;
        v26 = (_QWORD *)v34;
        sub_2341E7C58(v34, v25, (uint64_t)v37, (uint64_t)v36, v8, v9 != 0, v24, buf);
LABEL_32:
        v27 = *(_QWORD *)buf;
        v28 = *(const char **)&buf[8];
        v3 = v39;
        goto LABEL_33;
      }
      sub_233BF7114(v37, v44, v45);
      v26 = (_QWORD *)v34;
      sub_2341E3DDC((unsigned __int8 *)v34, (uint64_t)buf);
      v27 = *(_QWORD *)buf;
      if (!*(_DWORD *)buf)
      {
        sub_233BF7114(v37, v41, v42);
        sub_233BF7114(v36, v43, *((uint64_t *)&v43 + 1));
        v26 = (_QWORD *)v34;
        sub_2341E7640(v34, (uint64_t)v37, (uint64_t)v36, v7, v8, v9 != 0, v24, &v40, (uint64_t)buf);
        goto LABEL_32;
      }
    }
    else
    {
      if (v21)
      {
        if ((sub_2341E7038(v34, v22) & 1) == 0)
        {
          *(_DWORD *)a3 = 16;
          *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
          v32 = 284;
          goto LABEL_48;
        }
        v33 = v40;
        sub_233BF7114(v37, v41, v42);
        sub_233BF7114(v36, v43, *((uint64_t *)&v43 + 1));
        sub_2341E7C58(v34, v33, (uint64_t)v37, (uint64_t)v36, 0, 0, v24, buf);
        v27 = *(_QWORD *)buf;
        v28 = *(const char **)&buf[8];
        v3 = v39;
        v26 = (_QWORD *)v34;
LABEL_33:
        if (!(_DWORD)v27)
        {
LABEL_34:
          sub_2341E3EE0(v26, (uint64_t)buf);
          v29 = *(_QWORD *)&buf[8];
          v30 = *(_DWORD *)buf;
          v31 = v39;
          *(_QWORD *)a3 = *(_QWORD *)buf;
          *(_QWORD *)(a3 + 8) = v29;
          *(_QWORD *)(a3 + 16) = v31;
          if (v30)
            goto LABEL_6;
          if (v40)
          {
            *(_BYTE *)(a1 + 36) = v40;
            *(_BYTE *)(a1 + 39) = v24;
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
            v32 = 326;
          }
          else
          {
            *(_DWORD *)a3 = 172;
            *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
            v32 = 322;
          }
LABEL_48:
          *(_DWORD *)(a3 + 16) = v32;
          goto LABEL_6;
        }
LABEL_45:
        v35 = v27;
        sub_2341E4A68((uint64_t)v26);
        *(_QWORD *)a3 = v35;
        *(_QWORD *)(a3 + 8) = v28;
        *(_QWORD *)(a3 + 16) = v3;
        goto LABEL_6;
      }
      sub_233BF7114(v37, v44, v45);
      v26 = (_QWORD *)v34;
      sub_2341E3DDC((unsigned __int8 *)v34, (uint64_t)buf);
      v27 = *(_QWORD *)buf;
      if (!*(_DWORD *)buf)
      {
        sub_233BF7114(v37, v41, v42);
        sub_233BF7114(v36, v43, *((uint64_t *)&v43 + 1));
        sub_2341E7640(v34, (uint64_t)v37, (uint64_t)v36, v7, 0, 0, v24, &v40, (uint64_t)buf);
        v27 = *(_QWORD *)buf;
        if (!*(_DWORD *)buf)
        {
          if ((sub_2341E7038(v34, v40) & 1) != 0)
            goto LABEL_34;
          LODWORD(v3) = 304;
          v27 = 0x1000000010;
          v28 = "src/controller/CHIPDeviceController.cpp";
          goto LABEL_45;
        }
      }
    }
    v28 = *(const char **)&buf[8];
    v3 = v39;
    goto LABEL_45;
  }
  *(_DWORD *)a3 = 11;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = 183;
LABEL_11:
  j__free(v11);
}

__n128 sub_23422A98C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  _QWORD *v13;
  __n128 result;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  __n128 *v26;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  __n128 v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 36))
  {
    *(_DWORD *)a6 = 172;
    *(_QWORD *)(a6 + 8) = "src/controller/CHIPDeviceController.cpp";
    v17 = 333;
LABEL_10:
    *(_DWORD *)(a6 + 16) = v17;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 4280);
  if (!v8)
  {
    *(_DWORD *)a6 = 172;
    *(_QWORD *)(a6 + 8) = "src/controller/CHIPDeviceController.cpp";
    v17 = 334;
    goto LABEL_10;
  }
  v13 = *(_QWORD **)(v8 + 72);
  v37 = 0;
  v38 = 0;
  v35 = 0;
  v36 = 0;
  v33 = 0;
  v34 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  sub_2341D83F0(a2, &v37, &v38, (_QWORD *)a6);
  if (*(_DWORD *)a6)
    return result;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341E3650((uint64_t)v13, *(unsigned __int8 *)(a1 + 36), (uint64_t)&v35, (_QWORD *)a6);
  if (*(_DWORD *)a6)
    return result;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  sub_2341D8570(a2, (uint64_t)&v33, (_QWORD *)a6);
  if (*(_DWORD *)a6)
    return result;
  v15 = (_QWORD *)sub_233D53F10(a1);
  v16 = *v15 != v37 || !sub_23400611C((uint64_t)&v35, (uint64_t)&v33);
  if (a4)
  {
    v18 = *(unsigned __int8 *)(a1 + 36);
    v19 = *(unsigned __int8 *)(a1 + 39);
    v20 = (uint64_t)v13;
    v21 = a2;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    goto LABEL_17;
  }
  if ((sub_2341E7038((uint64_t)v13, *(unsigned __int8 *)(a1 + 36)) & 1) == 0)
  {
    *(_DWORD *)a6 = 16;
    *(_QWORD *)(a6 + 8) = "src/controller/CHIPDeviceController.cpp";
    v17 = 358;
    goto LABEL_10;
  }
  v18 = *(unsigned __int8 *)(a1 + 36);
  v19 = *(unsigned __int8 *)(a1 + 39);
  v20 = (uint64_t)v13;
  v21 = a2;
  v22 = a3;
  v23 = 0;
  v24 = 0;
LABEL_17:
  sub_2341E7C58(v20, v18, v21, v22, v23, v24, v19, &v30);
  v25 = v30;
  v39 = v31;
  v40 = v32;
  v26 = (__n128 *)(a6 + 4);
  if (v30)
  {
    sub_2341E4A68((uint64_t)v13);
    *(_DWORD *)a6 = v25;
    result.n128_u64[0] = v39.n128_u64[0];
    *v26 = v39;
    *(_DWORD *)(a6 + 20) = v40;
    return result;
  }
  sub_2341E3EE0(v13, (uint64_t)&v30);
  v27 = v30;
  v28 = v32;
  v40 = v32;
  result = v31;
  v39 = v31;
  *(_DWORD *)a6 = v30;
  *v26 = result;
  *(_DWORD *)(a6 + 20) = v28;
  if (!v27)
  {
    if (v16)
      sub_2341CF1EC(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 40), *(unsigned __int8 *)(a1 + 36));
    v29 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl(&dword_233BF3000, v29, OS_LOG_TYPE_DEFAULT, "Controller NOC chain has updated", (uint8_t *)&v30, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = "src/controller/CHIPDeviceController.cpp";
    v17 = 380;
    goto LABEL_10;
  }
  return result;
}

void sub_23422AC78(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint8_t v4[32];

  sub_2341B1F64("src/controller/CHIPDeviceController.cpp", 385);
  if (*(_DWORD *)(a1 + 32))
  {
    v2 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Shutting down the controller", v4, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(9u, 3);
    *(_DWORD *)(a1 + 32) = 0;
    if (*(_BYTE *)(a1 + 36))
    {
      v3 = sub_2341FF930();
      sub_234200288(v3, *(_BYTE *)(a1 + 36));
      sub_2341FCC80(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 96));
      sub_2341CF1EC(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 40), *(unsigned __int8 *)(a1 + 36));
      if (*(_BYTE *)(a1 + 38))
      {
        sub_2341E5630(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 72), *(unsigned __int8 *)(a1 + 36), (uint64_t)v4);
      }
      else if (*(_BYTE *)(a1 + 37))
      {
        sub_2341E66E8(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 72), *(unsigned __int8 *)(a1 + 36));
      }
    }
    sub_2342243D0(*(_QWORD *)(a1 + 4280));
    *(_QWORD *)(a1 + 4280) = 0;
    sub_2341F3DE0(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_23422ADA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int16 *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11[2];
  __int128 v12;
  char v13;
  __int16 v14;
  int v15;

  if (*(_DWORD *)(result + 32) == 1)
  {
    v12 = xmmword_25615DD84;
    v13 = 0;
    v14 = 5540;
    v15 = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v8 = *(_QWORD *)(*(_QWORD *)(result + 4280) + 96);
    v9 = *(unsigned __int8 *)(result + 36);
    v11[0] = a2;
    v11[1] = v9;
    result = sub_2341FCCA0(v8, v11, (uint64_t)&v12, 0, a5);
    if (*(_DWORD *)a5)
      return result;
    *a3 = v12;
    *a4 = v14;
    *(_DWORD *)a5 = 0;
    a5[1] = "src/controller/CHIPDeviceController.cpp";
    v10 = 433;
  }
  else
  {
    *(_DWORD *)a5 = 3;
    a5[1] = "src/controller/CHIPDeviceController.cpp";
    v10 = 428;
  }
  *((_DWORD *)a5 + 4) = v10;
  return result;
}

uint64_t sub_23422AE80@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9[2];

  if (*(_DWORD *)(result + 32) == 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 4280) + 96);
    v6 = *(unsigned __int8 *)(result + 36);
    v9[0] = a2;
    v9[1] = v6;
    result = sub_2341FCCA0(v5, v9, a3, 0, a4);
    if (*(_DWORD *)a4)
      return result;
    v7 = 0;
    v8 = 441;
  }
  else
  {
    v8 = 438;
    v7 = 3;
  }
  *(_DWORD *)a4 = v7;
  a4[1] = "src/controller/CHIPDeviceController.cpp";
  *((_DWORD *)a4 + 4) = v8;
  return result;
}

void sub_23422AF0C(uint64_t a1@<X1>, int a2@<W2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  int v6;

  v6 = a2;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  sub_23412C5D0(a4, a1, a3, 0, (char *)&v6, a5);
  if (!*(_DWORD *)a5)
  {
    *(_DWORD *)a5 = 0;
    a5[1] = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a5 + 4) = 449;
  }
}

uint64_t sub_23422AF70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 4280) + 40);
}

uint64_t sub_23422AF80(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_BYTE *)(a1 + 9090);
  v3 = a1 + 4864;
  v4 = a1 + 4344;
  v5 = sub_234229EE8(a1);
  *(_QWORD *)v5 = &off_250517EC8;
  *(_QWORD *)(v5 + 4304) = &unk_250517F20;
  *(_QWORD *)(v5 + 4312) = &unk_250517FC8;
  *(_QWORD *)(v5 + 4320) = 0;
  *(_OWORD *)(v5 + 4328) = 0u;
  *(_WORD *)(v5 + 4344) = 1;
  *(_QWORD *)(v5 + 4376) = 0;
  *(_OWORD *)(v5 + 4449) = 0u;
  *(_OWORD *)(v5 + 4440) = 0u;
  *(_OWORD *)(v5 + 4408) = 0u;
  *(_OWORD *)(v5 + 4424) = 0u;
  *(_QWORD *)(v5 + 4448) = v5 + 4432;
  *(_QWORD *)(v5 + 4440) = v5 + 4432;
  *(_OWORD *)(v5 + 4472) = xmmword_25615DD84;
  *(_BYTE *)(v4 + 144) = 0;
  *(_WORD *)(v5 + 4490) = 5540;
  *(_BYTE *)(v4 + 160) = 0;
  *(_WORD *)(v5 + 4603) = 0;
  *(_BYTE *)(v5 + 4500) = 0;
  *(_QWORD *)(v5 + 4492) = 0;
  *(_QWORD *)(v5 + 4640) = 0;
  *(_OWORD *)(v5 + 4624) = 0u;
  *(_QWORD *)(v5 + 4656) = v5 + 4648;
  *(_QWORD *)(v5 + 4648) = v5 + 4648;
  *(_QWORD *)(v5 + 4664) = 0;
  *(_QWORD *)(v5 + 4672) = v5;
  *(_QWORD *)(v5 + 4680) = sub_23422B1E4;
  *(_QWORD *)(v5 + 4696) = v5 + 4688;
  *(_QWORD *)(v5 + 4688) = v5 + 4688;
  *(_QWORD *)(v5 + 4704) = 0;
  *(_QWORD *)(v5 + 4712) = v5;
  *(_QWORD *)(v5 + 4720) = sub_23422B3EC;
  *(_QWORD *)(v5 + 4736) = v5 + 4728;
  *(_QWORD *)(v5 + 4728) = v5 + 4728;
  *(_QWORD *)(v5 + 4744) = 0;
  *(_QWORD *)(v5 + 4752) = v5;
  *(_QWORD *)(v5 + 4760) = sub_23422B638;
  *(_QWORD *)(v5 + 4776) = v5 + 4768;
  *(_QWORD *)(v5 + 4768) = v5 + 4768;
  *(_QWORD *)(v5 + 4784) = 0;
  *(_QWORD *)(v5 + 4792) = v5;
  *(_QWORD *)(v5 + 4800) = sub_23422B844;
  *(_QWORD *)(v5 + 4816) = v5 + 4808;
  *(_QWORD *)(v5 + 4808) = v5 + 4808;
  *(_QWORD *)(v5 + 4824) = 0;
  *(_QWORD *)(v5 + 4832) = v5;
  *(_QWORD *)(v5 + 4840) = sub_23422BDAC;
  *(_QWORD *)(v5 + 4848) = &off_250517DE0;
  *(_QWORD *)(v5 + 4856) = 0;
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v5 + 4888) = 0;
  *(_OWORD *)(v5 + 4872) = 0u;
  *(_QWORD *)(v5 + 4896) = v5;
  *(_QWORD *)(v5 + 4917) = 0;
  *(_OWORD *)(v5 + 4904) = 0u;
  *(_BYTE *)(v3 + 61) = 2;
  *(_QWORD *)(v5 + 4928) = 0;
  *(_BYTE *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 73) = 0;
  *(_BYTE *)(v3 + 360) = 0;
  *(_DWORD *)(v5 + 5232) = 0;
  *(_BYTE *)(v5 + 4992) = 0;
  *(_OWORD *)(v5 + 4976) = 0u;
  *(_OWORD *)(v5 + 4960) = 0u;
  *(_OWORD *)(v5 + 4944) = 0u;
  *(_QWORD *)(v5 + 5240) = "src/controller/SetUpCodePairer.h";
  *(_DWORD *)(a1 + 5248) = 212;
  sub_23421F0E8(v5 + 5256);
  *(_OWORD *)(a1 + 9048) = 0u;
  *(_DWORD *)(a1 + 9064) = 0;
  *(_QWORD *)(a1 + 9072) = "src/controller/CommissioningDelegate.h";
  *(_DWORD *)(a1 + 9080) = 115;
  *(_BYTE *)(a1 + 9088) = 0;
  *v2 = 0;
  v2[4] = 0;
  v2[6] = 0;
  *(_OWORD *)(a1 + 9104) = 0u;
  *(_OWORD *)(a1 + 9128) = 0u;
  return a1;
}

void sub_23422B1E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __n128 v18;
  uint64_t v19;
  _BYTE v20[56];
  _QWORD v21[4];
  _BYTE v22[80];
  uint64_t v23;
  const char *v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  LODWORD(v23) = 1;
  v24 = "core_dcm_operational_setup";
  v25 = 0;
  v26 = 3;
  v6 = sub_2341C4BEC((uint64_t)&v23);
  if ((*(_BYTE *)(a1 + 4344) & 0xFE) != 0x1E)
    sub_234260FC0(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 4328) + 24))(*(_QWORD *)(a1 + 4328));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3);
  if (v7 != v8)
    sub_234260F2C(v8);
  sub_23422F440(a1);
  v23 = -1;
  v28 = 0;
  v12 = &unk_2505174E0;
  v13 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v14 = a2;
  v15[0] = &off_250514968;
  v16 = 0;
  sub_2341CDA90(v15, a3);
  *(_QWORD *)&v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3);
  *((_QWORD *)&v17 + 1) = v9;
  v18.n128_u64[0] = (unint64_t)&unk_2505174E0;
  v18.n128_u64[1] = 0;
  v19 = a2;
  sub_2341CD8A4(v20, v15);
  *(_OWORD *)&v20[40] = v17;
  sub_234235354((uint64_t)&v23, &v18);
  v18.n128_u64[0] = (unint64_t)&unk_2505174E0;
  sub_2341CD754(v20);
  v12 = &unk_2505174E0;
  sub_2341CD754(v15);
  LODWORD(v10) = 0;
  *((_QWORD *)&v10 + 1) = "src/controller/CHIPDeviceController.cpp";
  v11 = 2039;
  sub_23423ECD4((uint64_t)v21, (uint64_t)&v23);
  v22[72] = v28;
  sub_23422EEF4(a1, &v10, (uint64_t)v21);
  if (v21[0] == 4)
  {
    v21[1] = &unk_2505174E0;
    sub_2341CD754(v22);
  }
  if (v23 == 4)
  {
    v24 = (const char *)&unk_2505174E0;
    sub_2341CD754(&v27);
  }
}

void sub_23422B3EC(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[16];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = "core_dcm_operational_setup";
  LODWORD(v17) = *a3;
  BYTE4(v17) = 3;
  v6 = sub_2341C4BEC((uint64_t)buf);
  if ((*(_BYTE *)(a1 + 4344) & 0xFE) != 0x1E)
    sub_2342610E8(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 4328) + 24))(*(_QWORD *)(a1 + 4328));
  if (v7 != *a2)
    sub_234261054(v7);
  sub_23422F440(a1);
  v8 = *a3;
  v9 = sub_234117B80(9u, "Controller");
  v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v17 = *((_QWORD *)a3 + 2);
      v11 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Device connection failed. Error %s", buf, 0xCu);
    }
    if (sub_234114844(2u))
    {
      *(_OWORD *)buf = *(_OWORD *)a3;
      v17 = *((_QWORD *)a3 + 2);
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 2);
    }
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Device connection failed without a valid error code.", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *a3 = 172;
    *((_QWORD *)a3 + 1) = "src/controller/CHIPDeviceController.cpp";
    a3[4] = 2060;
  }
  v12 = *(_OWORD *)a3;
  v13 = *((_QWORD *)a3 + 2);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v12, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
}

uint64_t sub_23422B638(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int16 a4)
{
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unsigned __int16 v16;
  unsigned int v17;
  char v18[4];
  int v19;
  uint8_t buf[16];
  _BYTE v21[14];
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v8 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v9 = *a2;
    v10 = HIDWORD(*a2);
    v11 = *((unsigned __int8 *)a2 + 8);
    *(_OWORD *)buf = *(_OWORD *)a3;
    *(_QWORD *)v21 = *(_QWORD *)(a3 + 16);
    v12 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v9;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)v21 = v11;
    *(_WORD *)&v21[4] = 2080;
    *(_QWORD *)&v21[6] = v12;
    v22 = 1024;
    v23 = a4;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Session establishment failed for <%08X%08X, %d>, error: %s.  Next retry expected to get a response to Sigma1 or fail within %d seconds", buf, 0x24u);
  }
  v13 = sub_234114844(1u);
  if ((_DWORD)v13)
  {
    *(_OWORD *)buf = *(_OWORD *)a3;
    *(_QWORD *)v21 = *(_QWORD *)(a3 + 16);
    sub_2341083CC((const char **)buf, 1);
    v13 = sub_2341147D0(9u, 1);
  }
  if ((*(_BYTE *)(a1 + 4344) & 0xFE) != 0x1E)
    sub_234261210(v13);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 4328) + 24))(*(_QWORD *)(a1 + 4328));
  if (v14 != *a2)
    sub_23426117C(v14);
  result = sub_23422C920(a1, v14);
  if (result)
  {
    v16 = a4 + 60;
    if (a4 > 0xFFC3u)
      v16 = -1;
    v17 = *(unsigned __int8 *)(a1 + 4344);
    v18[0] = 1;
    v19 = 30000;
    return sub_234231468(a1, result, v17, v16, v18, (uint64_t)sub_2342353E0, (void (*)(uint64_t, __int128 *))sub_2342354B0, 1);
  }
  return result;
}

void sub_23422B844(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v17;
  NSObject *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  _QWORD v27[4];
  _BYTE v28[80];
  _QWORD v29[13];
  char v30;
  uint8_t v31[4];
  int v32;
  _QWORD v33[13];
  char v34;
  _QWORD v35[13];
  char v36;
  _BYTE buf[22];
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnDeviceAttestationInformationVerification";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_BYTE *)(a1 + 4344) == 13)
  {
    v39 = 0;
    *(_WORD *)&buf[8] = a3;
    *(_QWORD *)buf = 6;
    if (a3)
      v7 = 172;
    else
      v7 = 0;
    LODWORD(v25) = v7;
    *((_QWORD *)&v25 + 1) = "src/controller/CHIPDeviceController.cpp";
    v26 = 1209;
    v8 = v35;
    sub_23423ECD4((uint64_t)v35, (uint64_t)buf);
    v36 = v39;
    sub_23422EEF4(a1, &v25, (uint64_t)v35);
    if (v35[0] != 4)
      goto LABEL_36;
    v35[1] = &unk_2505174E0;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 4328))
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 9048) + 24))(*(_QWORD *)(a1 + 9048));
    v10 = *(_QWORD *)(v9 + 584);
    if (*(_BYTE *)(v9 + 570) && (v11 = sub_234230B44((_BYTE *)(v9 + 570)), v12 = (unsigned __int16)*v11, *v11)
      || (v12 = a3) != 0)
    {
      v39 = 0;
      *(_WORD *)&buf[8] = v12;
      *(_QWORD *)buf = 6;
      v13 = sub_234117B80(9u, "Controller");
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (v12 == 0xFFFF)
      {
        if (v14)
        {
          *(_WORD *)v31 = 0;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Failed in verifying 'Attestation Information' command received from the device due to default DeviceAttestationVerifier Class not being overridden by a real implementation.", v31, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v23) = 45;
        *((_QWORD *)&v23 + 1) = "src/controller/CHIPDeviceController.cpp";
        v24 = 1239;
        v8 = v33;
        sub_23423ECD4((uint64_t)v33, (uint64_t)buf);
        v34 = v39;
        sub_23422EEF4(a1, &v23, (uint64_t)v33);
        if (v33[0] != 4)
          goto LABEL_36;
        v33[1] = &unk_2505174E0;
      }
      else
      {
        if (v14)
        {
          *(_DWORD *)v31 = 67109120;
          v32 = v12;
          _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Failed in verifying 'Attestation Information' command received from the device: err %hu. Look at AttestationVerificationResult enum to understand the errors", v31, 8u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        if (v10)
        {
          sub_234230B64(a1, a2, v12);
          goto LABEL_36;
        }
        LODWORD(v21) = 172;
        *((_QWORD *)&v21 + 1) = "src/controller/CHIPDeviceController.cpp";
        v22 = 1258;
        v8 = v29;
        sub_23423ECD4((uint64_t)v29, (uint64_t)buf);
        v30 = v39;
        sub_23422EEF4(a1, &v21, (uint64_t)v29);
        if (v29[0] != 4)
          goto LABEL_36;
        v29[1] = &unk_2505174E0;
      }
LABEL_9:
      sub_2341CD754(v8 + 4);
LABEL_36:
      if (*(_QWORD *)buf != 4)
        goto LABEL_39;
      *(_QWORD *)&buf[8] = &unk_2505174E0;
      v16 = &v38;
      goto LABEL_38;
    }
    if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10))
    {
      sub_234230B64(a1, a2, 0);
      goto LABEL_39;
    }
    v18 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "Successfully validated 'Attestation Information' command received from the device.", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    LODWORD(v19) = 0;
    *((_QWORD *)&v19 + 1) = "src/controller/CHIPDeviceController.cpp";
    v20 = 1270;
    v27[0] = -1;
    v28[72] = 0;
    sub_23422EEF4(a1, &v19, (uint64_t)v27);
    if (v27[0] == 4)
    {
      v27[1] = &unk_2505174E0;
      v16 = (uint64_t *)v28;
LABEL_38:
      sub_2341CD754(v16);
    }
  }
  else
  {
    v15 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Device attestation verification result received when we're not commissioning a device", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
  }
LABEL_39:
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnDeviceAttestationInformationVerification";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422BDAC(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, _BYTE *a6, _BYTE *a7)
{
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  char *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[4];
  _BYTE v38[80];
  _BYTE buf[24];
  _OWORD v40[2];
  _QWORD *v41;
  uint64_t v42;
  char v43;
  _QWORD v44[5];

  v44[2] = *MEMORY[0x24BDAC8D0];
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnDeviceNOCChainGeneration";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v44[0] = 0;
  v44[1] = 0;
  if (!*(_DWORD *)a2 && !*a6)
  {
    v15 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_ERROR, "Did not have an IPK from the OperationalCredentialsIssuer! Cannot commission.", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_DWORD *)a2 = 47;
    *((_QWORD *)a2 + 1) = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a2 + 4) = 1526;
  }
  v16 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *a2;
    v36 = *((_QWORD *)a2 + 2);
    v17 = sub_2341083CC((const char **)&v35, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Received callback from the CA for NOC Chain generation. Status %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v33 = *a2;
    v34 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)&v33, 1);
    sub_2341147D0(9u, 2);
  }
  if (!*(_DWORD *)a2)
  {
    if (*(_DWORD *)(a1 + 32) == 1)
      goto LABEL_21;
    *(_DWORD *)a2 = 3;
    *((_QWORD *)a2 + 1) = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a2 + 4) = 1532;
  }
  v18 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    v31 = *a2;
    v32 = *((_QWORD *)a2 + 2);
    v19 = sub_2341083CC((const char **)&v31, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v19;
    _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "Failed in generating device's operational credentials. Error %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    v29 = *a2;
    v30 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)&v29, 1);
    sub_2341147D0(9u, 1);
  }
LABEL_21:
  v43 = 0;
  v26 = *a4;
  v24 = *a3;
  v25 = *a5;
  if (*a6)
    v20 = *(_QWORD **)sub_234121AD0(a6);
  else
    v20 = v44;
  if (*a7)
  {
    v21 = (uint64_t *)sub_233CB6588(a7);
LABEL_27:
    v22 = *v21;
    goto LABEL_28;
  }
  v21 = (uint64_t *)sub_233D53F10(a1);
  if (v21)
    goto LABEL_27;
  v22 = 0;
LABEL_28:
  *(_OWORD *)&buf[8] = v24;
  v40[0] = v26;
  v40[1] = v25;
  v41 = v20;
  v42 = v22;
  *(_QWORD *)buf = 3;
  v27 = *a2;
  v28 = *((_QWORD *)a2 + 2);
  sub_23423ECD4((uint64_t)v37, (uint64_t)buf);
  v38[72] = v43;
  sub_23422EEF4(a1, &v27, (uint64_t)v37);
  if (v37[0] == 4)
  {
    v37[1] = &unk_2505174E0;
    sub_2341CD754(v38);
  }
  if (*(_QWORD *)buf == 4)
  {
    *(_QWORD *)&buf[8] = &unk_2505174E0;
    sub_2341CD754((char *)v40 + 8);
  }
  v23 = sub_2341C4608();
  if (os_signpost_enabled(v23))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnDeviceNOCChainGeneration";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422C248(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t v17[16];
  _OWORD v18[4];
  _BYTE v19[28];
  char v21;
  __int16 v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v13 = 471;
    goto LABEL_10;
  }
  a1[536] = v4;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v7 = *(_OWORD *)(a2 + 48);
  v18[2] = *(_OWORD *)(a2 + 32);
  v18[3] = v7;
  *(_OWORD *)v19 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v19[12] = *(_OWORD *)(a2 + 76);
  v8 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v8;
  if (*(_BYTE *)(a2 + 92))
    v21 = *(_BYTE *)(a2 + 93);
  v22 = *(_WORD *)(a2 + 94);
  sub_234229FC4((uint64_t)a1, (uint64_t)v18, a3);
  if (!*(_DWORD *)a3)
  {
    a1[540] = *(_QWORD *)(a2 + 96);
    v9 = *(_QWORD *)(a2 + 112);
    a1[1142] = v9;
    if (v9)
    {
LABEL_6:
      v10 = 0;
      v11 = *(_QWORD **)(a2 + 104);
      if (!v11)
        v11 = a1 + 657;
      a1[1131] = v11;
      v12 = (_QWORD *)a1[535];
      a1[613] = *v12;
      a1[607] = v12[3];
      v13 = 530;
      goto LABEL_11;
    }
    v14 = sub_2341F3840();
    a1[1142] = v14;
    v15 = sub_234117B80(9u, "Controller");
    v16 = v15;
    if (v14)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "*** Missing DeviceAttestationVerifier configuration at DeviceCommissioner init: using global default, consider passing one in CommissionerInitParams.", v17, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      goto LABEL_6;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Missing DeviceAttestationVerifier configuration at DeviceCommissioner init and none set with Credentials::SetDeviceAttestationVerifier()!", v17, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v13 = 487;
LABEL_10:
    v10 = 47;
LABEL_11:
    *(_DWORD *)a3 = v10;
    a3[1] = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a3 + 4) = v13;
  }
}

void sub_23422C42C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  const char *v6;
  int v7;
  uint8_t buf[16];

  if (*(_DWORD *)(a1 + 32))
  {
    v2 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Shutting down the commissioner", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(9u, 3);
    sub_234228B3C(a1 + 4848, 0);
    v3 = *(_QWORD *)(a1 + 4336);
    if (v3 && *(_DWORD *)(v3 + 64) == 1)
    {
      v4 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_INFO, "Setup in progress, stopping setup before shutting down", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(9u, 3);
      v5 = 2;
      v6 = "src/controller/CHIPDeviceController.cpp";
      v7 = 546;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 48))(a1, &v5);
    }
    sub_23422C5A8(a1);
    *(_QWORD *)buf = a1;
    sub_234115DFC((_QWORD *)(a1 + 4432), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23423F01C);
    sub_23422AC78(a1);
  }
}

void sub_23422C5A8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  void (***v4)(_QWORD);
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 9112))
  {
    v2 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      *(_DWORD *)buf = 136315138;
      v18 = v3;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_INFO, "Cancelling read request for step '%s'", buf, 0xCu);
    }
    if (sub_234114844(3u))
    {
      sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      sub_2341147D0(9u, 3);
    }
    v4 = *(void (****)(_QWORD))(a1 + 9112);
    *(_QWORD *)(a1 + 9112) = 0;
    if (v4)
    {
      (**v4)(v4);
      j__free(v4);
    }
  }
  if (*(_QWORD *)(a1 + 4376))
  {
    v5 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      *(_DWORD *)buf = 136315138;
      v18 = v6;
      _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_INFO, "Cancelling command invocation for step '%s'", buf, 0xCu);
    }
    if (sub_234114844(3u))
    {
      sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      sub_2341147D0(9u, 3);
    }
    v7 = *(_QWORD *)(a1 + 4376);
    if (!v7)
      goto LABEL_37;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    v8 = *(_QWORD **)(a1 + 4376);
    *(_QWORD *)(a1 + 4376) = 0;
    if (v8 == (_QWORD *)(a1 + 4352))
    {
      v9 = 4;
      v8 = (_QWORD *)(a1 + 4352);
    }
    else
    {
      if (!v8)
        goto LABEL_19;
      v9 = 5;
    }
    (*(void (**)(_QWORD *))(*v8 + 8 * v9))(v8);
  }
LABEL_19:
  if (!*(_QWORD *)(a1 + 4408))
    goto LABEL_30;
  v10 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
    *(_DWORD *)buf = 136315138;
    v18 = v11;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_INFO, "Cancelling write request for step '%s'", buf, 0xCu);
  }
  if (sub_234114844(3u))
  {
    sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
    sub_2341147D0(9u, 3);
  }
  v12 = *(_QWORD *)(a1 + 4408);
  if (!v12)
LABEL_37:
    sub_23423F254();
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  v13 = *(_QWORD **)(a1 + 4408);
  *(_QWORD *)(a1 + 4408) = 0;
  if (v13 == (_QWORD *)(a1 + 4384))
  {
    v14 = 4;
    v13 = (_QWORD *)(a1 + 4384);
  }
  else
  {
    if (!v13)
      goto LABEL_30;
    v14 = 5;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v14))(v13);
LABEL_30:
  if (*(_QWORD *)(a1 + 4664))
  {
    v15 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      *(_DWORD *)buf = 136315138;
      v18 = v16;
      _os_log_impl(&dword_233BF3000, v15, OS_LOG_TYPE_INFO, "Cancelling CASE setup for step '%s'", buf, 0xCu);
    }
    if (sub_234114844(3u))
    {
      sub_234226DD4(*(unsigned __int8 *)(a1 + 4344));
      sub_2341147D0(9u, 3);
    }
    sub_23422F440(a1);
  }
}

uint64_t sub_23422C920(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE buf[22];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v3 = sub_2341C4608();
  if (os_signpost_enabled(v3))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "FindCommissioneeDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v7 = 0;
  *(_QWORD *)buf = &v8;
  *(_QWORD *)&buf[8] = &v7;
  sub_234115DFC((_QWORD *)(a1 + 4432), (uint64_t)buf, (unsigned int (*)(uint64_t))sub_23423F038);
  v4 = v7;
  v5 = sub_2341C4608();
  if (os_signpost_enabled(v5))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "FindCommissioneeDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  return v4;
}

uint64_t sub_23422CA88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = 0;
  v4[0] = a2;
  v4[1] = &v3;
  sub_234115DFC((_QWORD *)(a1 + 4432), (uint64_t)v4, (unsigned int (*)(uint64_t))sub_23423F08C);
  return v3;
}

void sub_23422CAC8(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v5[16];

  if (*(_QWORD *)(a1[535] + 24) && *(_BYTE *)(a2 + 56) == 2)
  {
    v4 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Closing all BLE connections", v5, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(0x22u, 2);
    sub_23410BAA4();
  }
  if (a1[542] == a2)
    a1[542] = 0;
  if (a1[541] == a2)
    a1[541] = 0;
  sub_2341D3824((uint64_t)(a1 + 552), (void (***)(_QWORD))a2);
}

uint64_t sub_23422CBB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  int v7;

  if (!a3)
  {
    v7 = 635;
LABEL_6:
    v6 = 47;
    goto LABEL_7;
  }
  result = sub_23422C920(result, a2);
  if (!result)
  {
    v7 = 638;
    goto LABEL_6;
  }
  v6 = 0;
  *a3 = result;
  v7 = 642;
LABEL_7:
  *(_DWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

void sub_23422CC14(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  NSObject *v21;
  _BYTE v22[8];
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    v34 = "DeviceCommissioner";
    v35 = 2080;
    v36 = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v15 = *(_QWORD *)(a1 + 9048);
  if (v15)
  {
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, a4);
    if (!*(_DWORD *)a7)
    {
      v22[0] = *(_BYTE *)a6;
      if (v22[0])
      {
        v23 = *(_DWORD *)(a6 + 8);
        v16 = *(_OWORD *)(a6 + 128);
        v30 = *(_OWORD *)(a6 + 112);
        v31 = v16;
        v32[0] = *(_OWORD *)(a6 + 144);
        *(_OWORD *)((char *)v32 + 11) = *(_OWORD *)(a6 + 155);
        v17 = *(_OWORD *)(a6 + 64);
        v26 = *(_OWORD *)(a6 + 48);
        v27 = v17;
        v18 = *(_OWORD *)(a6 + 96);
        v28 = *(_OWORD *)(a6 + 80);
        v29 = v18;
        v19 = *(_OWORD *)(a6 + 32);
        v24 = *(_OWORD *)(a6 + 16);
        v25 = v19;
      }
      sub_234226E24(a3, a1 + 4848, a2, 0, a5, v22, (uint64_t)a7);
    }
  }
  else
  {
    v20 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "No default commissioner is specified", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_DWORD *)a7 = 3;
    a7[1] = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a7 + 4) = 653;
  }
  v21 = sub_2341C4608();
  if (os_signpost_enabled(v21))
  {
    *(_DWORD *)buf = 136315394;
    v34 = "DeviceCommissioner";
    v35 = 2080;
    v36 = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v21, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422CEA0(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  _BYTE v18[8];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "DeviceCommissioner";
    v31 = 2080;
    v32 = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v18[0] = *(_BYTE *)a5;
  if (v18[0])
  {
    v19 = *(_DWORD *)(a5 + 8);
    v13 = *(_OWORD *)(a5 + 128);
    v26 = *(_OWORD *)(a5 + 112);
    v27 = v13;
    v28[0] = *(_OWORD *)(a5 + 144);
    *(_OWORD *)((char *)v28 + 11) = *(_OWORD *)(a5 + 155);
    v14 = *(_OWORD *)(a5 + 64);
    v22 = *(_OWORD *)(a5 + 48);
    v23 = v14;
    v15 = *(_OWORD *)(a5 + 96);
    v24 = *(_OWORD *)(a5 + 80);
    v25 = v15;
    v16 = *(_OWORD *)(a5 + 32);
    v20 = *(_OWORD *)(a5 + 16);
    v21 = v16;
  }
  sub_234226E24(a3, a1 + 4848, a2, 0, a4, v18, a6);
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "DeviceCommissioner";
    v31 = 2080;
    v32 = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422D06C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  _BYTE v12[18];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    v11 = 136315394;
    *(_QWORD *)v12 = "DeviceCommissioner";
    *(_WORD *)&v12[8] = 2080;
    *(_QWORD *)&v12[10] = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_23422D220(a1, a2, a3, a4);
  v9 = *(_DWORD *)a4;
  if (*(_DWORD *)a4
    || (*a4 = 0, a4[1] = 0, a4[2] = 0, sub_23422D9B8(a1, a2, (uint64_t)a4), (v9 = *(_DWORD *)a4) != 0))
  {
    v11 = 2;
    *(_QWORD *)&v12[4] = "core_dcm_commission_device";
    *(_DWORD *)&v12[12] = v9;
    v12[16] = 3;
    sub_2341C4BEC((uint64_t)&v11);
  }
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    *(_QWORD *)v12 = "DeviceCommissioner";
    *(_WORD *)&v12[8] = 2080;
    *(_QWORD *)&v12[10] = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_23422D220(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  __int16 v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint8_t v66[16];
  uint64_t v67;
  int v68;
  const char *v69;
  int v70;
  char v71[8];
  uint64_t v72;
  _BYTE buf[24];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v9 = sub_2341C4608();
  if (os_signpost_enabled(v9))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "EstablishPASEConnection";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  *(_DWORD *)buf = 0;
  *(_QWORD *)&buf[8] = "core_dcm_pase_session";
  buf[20] = 0;
  sub_2341C4BEC((uint64_t)buf);
  *(_OWORD *)buf = xmmword_25615DD84;
  buf[16] = 1;
  *(_WORD *)&buf[18] = 5540;
  *(_DWORD *)&buf[20] = 0;
  v71[0] = 0;
  v10 = 0x300000003;
  if (*(_DWORD *)(a1 + 32) != 1)
  {
    LODWORD(v4) = 709;
    goto LABEL_7;
  }
  v11 = "src/controller/CHIPDeviceController.cpp";
  if (*(_QWORD *)(a1 + 4336))
  {
    LODWORD(v4) = 710;
LABEL_8:
    v59 = v10;
    *(_DWORD *)v66 = 1;
    *(_QWORD *)&v66[8] = "core_dcm_pase_session";
    LODWORD(v67) = v10;
    BYTE4(v67) = 3;
    sub_2341C4BEC((uint64_t)v66);
    v12 = v59;
    goto LABEL_9;
  }
  switch(*(_BYTE *)(a3 + 16))
  {
    case 0:
    case 2:
      if (!*(_QWORD *)(a3 + 152))
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 2;
        *(_WORD *)(a3 + 18) = 5540;
        *(_DWORD *)(a3 + 20) = 0;
      }
      v14 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v15 = 5540;
      v16 = 2;
      goto LABEL_19;
    case 1:
    case 3:
      v15 = *(_WORD *)(a3 + 18);
      v14 = *(_DWORD *)(a3 + 20);
      *(_OWORD *)buf = *(_OWORD *)a3;
      v16 = 1;
LABEL_19:
      buf[16] = v16;
      *(_WORD *)&buf[18] = v15;
      *(_DWORD *)&buf[20] = v14;
      break;
    default:
      break;
  }
  v62 = 0;
  *(_QWORD *)v66 = buf;
  *(_QWORD *)&v66[8] = &v62;
  sub_234115DFC((_QWORD *)(a1 + 4432), (uint64_t)v66, (unsigned int (*)(uint64_t))sub_23423F08C);
  v17 = v62;
  if (!v62)
  {
LABEL_34:
    v21 = (char *)sub_23422E35C((unint64_t *)(a1 + 4416));
    if (v21)
    {
      v22 = (uint64_t)v21;
      *(_QWORD *)(a1 + 4336) = v21;
      v23 = *(_QWORD *)(a1 + 4280);
      v24 = *(_QWORD *)(v23 + 40);
      v25 = *(_QWORD *)(v23 + 56);
      *((_QWORD *)v21 + 244) = v24;
      *((_QWORD *)v21 + 245) = v25;
      *((_QWORD *)v21 + 3) = a2;
      *((_QWORD *)v21 + 4) = 0;
      *(_OWORD *)(v21 + 40) = *(_OWORD *)buf;
      LODWORD(v24) = *(_DWORD *)&buf[20];
      *((_DWORD *)v21 + 14) = *(_DWORD *)&buf[16];
      *((_DWORD *)v21 + 15) = v24;
      *((_DWORD *)v21 + 16) = 1;
      *(_OWORD *)v66 = *(_OWORD *)a3;
      LODWORD(v24) = *(_DWORD *)(a3 + 20);
      LODWORD(v67) = *(_DWORD *)(a3 + 16);
      HIDWORD(v67) = v24;
      v64 = sub_23422E3E0(a3);
      v65 = v26;
      sub_234226A3C(v22, (__int128 *)v66, &v64, (uint64_t)&v62);
      if (*(_BYTE *)(a3 + 16) == 2)
      {
        v27 = *(_QWORD *)(a3 + 160);
        if (!v27)
        {
          if (*(_QWORD *)(a3 + 168))
          {
            v38 = *(_OWORD *)a3;
            *(_DWORD *)(a1 + 4488) = *(_DWORD *)(a3 + 16);
            *(_OWORD *)(a1 + 4472) = v38;
            *(_DWORD *)(a1 + 4492) = *(_DWORD *)(a3 + 20);
            v39 = *(_OWORD *)(a3 + 24);
            v40 = *(_OWORD *)(a3 + 40);
            *(_OWORD *)(a1 + 4528) = *(_OWORD *)(a3 + 56);
            *(_OWORD *)(a1 + 4512) = v40;
            *(_OWORD *)(a1 + 4496) = v39;
            v41 = *(_OWORD *)(a3 + 72);
            v42 = *(_OWORD *)(a3 + 88);
            v43 = *(_OWORD *)(a3 + 104);
            *(_OWORD *)(a1 + 4588) = *(_OWORD *)(a3 + 116);
            *(_OWORD *)(a1 + 4576) = v43;
            *(_OWORD *)(a1 + 4560) = v42;
            *(_OWORD *)(a1 + 4544) = v41;
            v44 = *(unsigned __int8 *)(a3 + 132);
            *(_BYTE *)(a1 + 4604) = v44;
            if (v44)
            {
              v45 = *(_QWORD *)(a3 + 136);
              *(_DWORD *)(a1 + 4616) = *(_DWORD *)(a3 + 144);
              *(_QWORD *)(a1 + 4608) = v45;
            }
            v46 = *(_OWORD *)(a3 + 152);
            *(_QWORD *)(a1 + 4640) = *(_QWORD *)(a3 + 168);
            *(_OWORD *)(a1 + 4624) = v46;
            sub_23410BD00(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 24), *(_QWORD *)(a3 + 168), a1, (uint64_t)sub_23422E420, (uint64_t)sub_23422E694, (uint64_t)v66);
            goto LABEL_55;
          }
          if (*(_BYTE *)(a3 + 32))
          {
            v47 = *(_OWORD *)a3;
            *(_DWORD *)(a1 + 4488) = *(_DWORD *)(a3 + 16);
            *(_OWORD *)(a1 + 4472) = v47;
            *(_DWORD *)(a1 + 4492) = *(_DWORD *)(a3 + 20);
            v48 = *(_OWORD *)(a3 + 24);
            v49 = *(_OWORD *)(a3 + 40);
            *(_OWORD *)(a1 + 4528) = *(_OWORD *)(a3 + 56);
            *(_OWORD *)(a1 + 4512) = v49;
            *(_OWORD *)(a1 + 4496) = v48;
            v50 = *(_OWORD *)(a3 + 72);
            v51 = *(_OWORD *)(a3 + 88);
            v52 = *(_OWORD *)(a3 + 104);
            *(_OWORD *)(a1 + 4588) = *(_OWORD *)(a3 + 116);
            *(_OWORD *)(a1 + 4576) = v52;
            *(_OWORD *)(a1 + 4560) = v51;
            *(_OWORD *)(a1 + 4544) = v50;
            v53 = *(unsigned __int8 *)(a3 + 132);
            *(_BYTE *)(a1 + 4604) = v53;
            if (v53)
            {
              v54 = *(_QWORD *)(a3 + 136);
              *(_DWORD *)(a1 + 4616) = *(_DWORD *)(a3 + 144);
              *(_QWORD *)(a1 + 4608) = v54;
            }
            v55 = *(_OWORD *)(a3 + 152);
            *(_QWORD *)(a1 + 4640) = *(_QWORD *)(a3 + 168);
            *(_OWORD *)(a1 + 4624) = v55;
            v56 = *(_QWORD *)(*(_QWORD *)(a1 + 4280) + 24);
            v57 = sub_23422E760(a3);
            LODWORD(v62) = v57;
            WORD2(v62) = WORD2(v57);
            if ((v57 & 0xFF00000000) == 0)
            {
              v58 = sub_2342232E8();
              sub_23422D9B8(v58);
              return;
            }
            sub_23410BC60(v56, (uint64_t)&v62, a1, (uint64_t)sub_23422E420, (uint64_t)sub_23422E694, (uint64_t)v66);
            goto LABEL_55;
          }
          LODWORD(v4) = 804;
          v37 = 0x2F0000002FLL;
LABEL_49:
          v60 = v37;
          v11 = "src/controller/CHIPDeviceController.cpp";
          goto LABEL_57;
        }
        sub_23410BDA0(*(_QWORD *)(*(_QWORD *)(a1 + 4280) + 24), v27, (uint64_t)v66);
        if (*(_DWORD *)v66)
        {
          v60 = *(_QWORD *)v66;
          v11 = *(const char **)&v66[8];
          v4 = v67;
LABEL_57:
          sub_23422CAC8((_QWORD *)a1, v22);
          v10 = v60;
          goto LABEL_8;
        }
      }
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 4280) + 40);
      *(_OWORD *)v66 = *(_OWORD *)a3;
      v29 = *(_DWORD *)(a3 + 20);
      LODWORD(v67) = *(_DWORD *)(a3 + 16);
      HIDWORD(v67) = v29;
      v64 = sub_23422E3E0(a3);
      v65 = v30;
      sub_2341FC72C(v28, (uint64_t)v66, (uint64_t)&v64, (uint64_t)&v62);
      v71[0] = (char)v62;
      if ((_BYTE)v62)
      {
        v72 = v63;
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 32))(v63);
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 4280) + 56);
        v32 = (uint64_t *)sub_233CB6588(v71);
        v33 = sub_2341AE734(v31, v32, v22 + 80, 1u);
        if (v33)
        {
          v34 = (uint64_t)v33;
          v35 = *(_QWORD *)(*(_QWORD *)(a1 + 4280) + 40);
          v36 = *(_DWORD *)(a3 + 24);
          sub_2341B1BB8((uint64_t)v61);
          sub_23412CB5C(v22 + 72, v35, v36, v61, v34, a1 + 4312, v66);
LABEL_55:
          HIDWORD(v12) = *(_DWORD *)&v66[4];
          v11 = *(const char **)&v66[8];
          v4 = v67;
          if (!*(_DWORD *)v66)
          {
            LODWORD(v12) = 0;
LABEL_9:
            *a4 = v12;
            a4[1] = (uint64_t)v11;
            a4[2] = v4;
            if (v71[0])
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 32))(v72);
            goto LABEL_11;
          }
          v60 = *(_QWORD *)v66;
          goto LABEL_57;
        }
        LODWORD(v4) = 818;
        v37 = 0xAC000000ACLL;
      }
      else
      {
        LODWORD(v4) = 809;
        v37 = 0xB0000000BLL;
      }
      goto LABEL_49;
    }
    v4 = 0x30000000300;
    v10 = 0xB0000000BLL;
LABEL_7:
    v11 = "src/controller/CHIPDeviceController.cpp";
    goto LABEL_8;
  }
  if ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v62 + 24))(v62) != a2)
    goto LABEL_29;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17))
  {
    v18 = *(_QWORD *)(a1 + 4320);
    if (v18)
    {
      v68 = 0;
      v69 = "src/controller/CHIPDeviceController.cpp";
      v70 = 746;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v18 + 24))(v18, &v68);
    }
    *(_DWORD *)v66 = 1;
    *(_QWORD *)&v66[8] = "core_dcm_pase_session";
    LODWORD(v67) = 0;
    BYTE4(v67) = 3;
    sub_2341C4BEC((uint64_t)v66);
    *(_DWORD *)a4 = 0;
    a4[1] = (uint64_t)"src/controller/CHIPDeviceController.cpp";
    v19 = 749;
    goto LABEL_28;
  }
  if (v17[16] != 1)
  {
LABEL_29:
    v20 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Found unconnected device, removing", v66, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    sub_23422CAC8((_QWORD *)a1, (uint64_t)v17);
    goto LABEL_34;
  }
  *(_DWORD *)a4 = 0;
  a4[1] = (uint64_t)"src/controller/CHIPDeviceController.cpp";
  v19 = 755;
LABEL_28:
  *((_DWORD *)a4 + 4) = v19;
LABEL_11:
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "EstablishPASEConnection";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422D9B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  _DWORD *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  unsigned __int8 *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  const char *v18;
  NSObject *v19;
  uint8_t buf[4];
  _BYTE v21[18];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v21 = "DeviceCommissioner";
    *(_WORD *)&v21[8] = 2080;
    *(_QWORD *)&v21[10] = "Commission";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(_QWORD *)(a1 + 9048))
  {
    v11 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "No default commissioner is specified", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 895;
    goto LABEL_36;
  }
  v7 = sub_23422C920(a1, a2);
  if (!v7
    || (v8 = (_DWORD *)v7, ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7) & 1) == 0) && v8[16] != 1)
  {
    v12 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v21 = HIDWORD(a2);
      *(_WORD *)&v21[4] = 1024;
      *(_DWORD *)&v21[6] = a2;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Invalid device for commissioning %08X%08X", buf, 0xEu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 902;
    goto LABEL_36;
  }
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8) & 1) == 0 && v8 != *(_DWORD **)(a1 + 4336))
  {
    v9 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v21 = HIDWORD(a2);
      *(_WORD *)&v21[4] = 1024;
      *(_DWORD *)&v21[6] = a2;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Device is not connected and not being paired %08X%08X", buf, 0xEu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 908;
LABEL_36:
    v17 = 3;
    goto LABEL_37;
  }
  v13 = (unsigned __int8 *)(a1 + 4344);
  v14 = *(unsigned __int8 *)(a1 + 4344);
  v15 = sub_234117B80(9u, "Controller");
  v16 = v15;
  if (v14 != 1)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18 = sub_234226DD4(*v13);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v21 = v18;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Commissioning already in progress (stage '%s') - not restarting", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      sub_234226DD4(*v13);
      sub_2341147D0(9u, 1);
    }
    v10 = 915;
    goto LABEL_36;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v21 = HIDWORD(a2);
    *(_WORD *)&v21[4] = 1024;
    *(_DWORD *)&v21[6] = a2;
    _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Commission called for node ID 0x%08X%08X", buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 9048) + 32))(*(_QWORD *)(a1 + 9048), *(_QWORD *)(a1 + 4288));
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v8 + 72))(v8))
  {
    *(_DWORD *)buf = 0;
    *(_QWORD *)&v21[4] = "core_dcm_commission_device";
    v21[16] = 0;
    sub_2341C4BEC((uint64_t)buf);
    (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t, _DWORD *))(**(_QWORD **)(a1 + 9048) + 40))(buf, *(_QWORD *)(a1 + 9048), a1, v8);
    v17 = 0;
  }
  else
  {
    v17 = 0;
    *(_BYTE *)(a1 + 4345) = 1;
  }
  v10 = 930;
LABEL_37:
  *(_DWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  v19 = sub_2341C4608();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v21 = "DeviceCommissioner";
    *(_WORD *)&v21[8] = 2080;
    *(_QWORD *)&v21[10] = "Commission";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422DE9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v13 = 136315394;
    *(_QWORD *)v14 = "DeviceCommissioner";
    *(_WORD *)&v14[8] = 2080;
    *(_QWORD *)&v14[10] = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_23422D220(a1, a2, a3, a5);
  v11 = *(_DWORD *)a5;
  if (*(_DWORD *)a5 || (*a5 = 0, a5[1] = 0, a5[2] = 0, sub_23422E060(a1, a2, a4, a5), (v11 = *(_DWORD *)a5) != 0))
  {
    v13 = 2;
    *(_QWORD *)&v14[4] = "core_dcm_commission_device";
    *(_DWORD *)&v14[12] = v11;
    v14[16] = 3;
    sub_2341C4BEC((uint64_t)&v13);
  }
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    v13 = 136315394;
    *(_QWORD *)v14 = "DeviceCommissioner";
    *(_WORD *)&v14[8] = 2080;
    *(_QWORD *)&v14[10] = "PairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v13, 0x16u);
  }
}

void sub_23422E060(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int v12;
  char v13;

  v6 = *(_QWORD *)(a1 + 9048);
  if (v6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(a4, v6, a3);
    v8 = *(_DWORD *)a4;
    if (*(_DWORD *)a4
      || (*a4 = 0, a4[1] = 0, a4[2] = 0, sub_23422D9B8(a1, a2, (uint64_t)a4), (v8 = *(_DWORD *)a4) != 0))
    {
      v10 = 2;
      v11 = "core_dcm_commission_device";
      v12 = v8;
      v13 = 3;
      sub_2341C4BEC((uint64_t)&v10);
    }
  }
  else
  {
    v9 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "No default commissioner is specified", (uint8_t *)&v10, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    *(_DWORD *)a4 = 3;
    a4[1] = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a4 + 4) = 880;
  }
}

void sub_23422E190(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  NSObject *v17;
  _BYTE v18[8];
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "DeviceCommissioner";
    v31 = 2080;
    v32 = "EstablishPASEConnection";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v18[0] = *(_BYTE *)a5;
  if (v18[0])
  {
    v19 = *(_DWORD *)(a5 + 8);
    v13 = *(_OWORD *)(a5 + 128);
    v26 = *(_OWORD *)(a5 + 112);
    v27 = v13;
    v28[0] = *(_OWORD *)(a5 + 144);
    *(_OWORD *)((char *)v28 + 11) = *(_OWORD *)(a5 + 155);
    v14 = *(_OWORD *)(a5 + 64);
    v22 = *(_OWORD *)(a5 + 48);
    v23 = v14;
    v15 = *(_OWORD *)(a5 + 96);
    v24 = *(_OWORD *)(a5 + 80);
    v25 = v15;
    v16 = *(_OWORD *)(a5 + 32);
    v20 = *(_OWORD *)(a5 + 16);
    v21 = v16;
  }
  sub_234226E24(a3, a1 + 4848, a2, 1, a4, v18, a6);
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    v30 = "DeviceCommissioner";
    v31 = 2080;
    v32 = "EstablishPASEConnection";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void *sub_23422E35C(unint64_t *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  v2 = sub_234114774(0x7E0uLL);
  v3 = v2;
  if (v2)
  {
    sub_23423F0C8((uint64_t)v2);
    v4 = sub_234114774(0x18uLL);
    if (v4)
    {
      *v4 = v3;
      v4[1] = a1 + 2;
      v4[2] = 0;
      v4[2] = a1[4];
      *(_QWORD *)(a1[4] + 8) = v4;
      a1[4] = (unint64_t)v4;
      v5 = a1[1];
      v6 = *a1 + 1;
      *a1 = v6;
      if (v6 > v5)
        a1[1] = v6;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_23422E3E0(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;
  int v4;

  result = sub_2341B1C28();
  v4 = *(unsigned __int8 *)(a1 + 132);
  v3 = (_BYTE *)(a1 + 132);
  if (v4)
    return *(_QWORD *)sub_233C0FDD4(v3);
  return result;
}

uint64_t sub_23422E420(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE **)(result + 4336);
  if (v2 && v2[56] == 2)
  {
    v4 = result;
    v5 = result + 4488;
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(result + 4336));
    v23 = *(_OWORD *)(v4 + 4472);
    v7 = *(_DWORD *)(v4 + 4492);
    v24 = *(_DWORD *)(v4 + 4488);
    v25 = v7;
    v29 = *(_OWORD *)(v4 + 4544);
    v30 = *(_OWORD *)(v4 + 4560);
    *(_OWORD *)v31 = *(_OWORD *)(v4 + 4576);
    *(_OWORD *)&v31[12] = *(_OWORD *)(v4 + 4588);
    v26 = *(_OWORD *)(v4 + 4496);
    v27 = *(_OWORD *)(v4 + 4512);
    v28 = *(_OWORD *)(v4 + 4528);
    if (*(_BYTE *)(v5 + 116))
    {
      v33 = *(_QWORD *)(v4 + 4608);
      v34 = *(_DWORD *)(v4 + 4616);
    }
    v35 = *(_OWORD *)(v4 + 4624);
    v8 = *(_QWORD *)(v4 + 4640);
    *((_QWORD *)&v35 + 1) = a2;
    v36 = v8;
    *(_OWORD *)(v4 + 4472) = xmmword_25615DD84;
    *(_WORD *)v5 = 0;
    *(_WORD *)(v4 + 4490) = 5540;
    *(_QWORD *)(v4 + 4624) = 0;
    *(_QWORD *)(v4 + 4640) = 0;
    *(_QWORD *)(v4 + 4632) = 0;
    *(_OWORD *)(v4 + 4492) = 0u;
    *(_OWORD *)(v4 + 4508) = 0u;
    *(_OWORD *)(v4 + 4524) = 0u;
    *(_OWORD *)(v4 + 4540) = 0u;
    *(_OWORD *)(v4 + 4556) = 0u;
    *(_OWORD *)(v4 + 4572) = 0u;
    *(_OWORD *)(v4 + 4588) = 0u;
    *(_BYTE *)(v4 + 4604) = 0;
    sub_23422CAC8((_QWORD *)v4, (uint64_t)v2);
    v15 = 0uLL;
    v16 = 0;
    result = (uint64_t)sub_23422D220(&v15, v4, v6, &v23);
    if ((_DWORD)v15)
    {
      v9 = sub_234117B80(0, "NotSpecified");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v13 = v15;
        v14 = v16;
        v10 = sub_2341083CC((const char **)&v13, 1);
        *(_DWORD *)buf = 136315650;
        v18 = v10;
        v19 = 2080;
        v20 = "src/controller/CHIPDeviceController.cpp";
        v21 = 1024;
        v22 = 851;
        _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "%s at %s:%d", buf, 0x1Cu);
      }
      result = sub_234114844(1u);
      if ((_DWORD)result)
      {
        v11 = v15;
        v12 = v16;
        sub_2341083CC((const char **)&v11, 1);
        return sub_2341147D0(0, 1);
      }
    }
  }
  return result;
}

_QWORD *sub_23422E694(_QWORD *result, __int128 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _WORD *v5;
  __int128 v6;
  uint64_t v7;

  v3 = result[542];
  if (v3 && *(_BYTE *)(v3 + 56) == 2)
  {
    v4 = result;
    v5 = result + 561;
    sub_23422CAC8(result, v3);
    *(_OWORD *)(v4 + 559) = xmmword_25615DD84;
    *v5 = 0;
    *((_WORD *)v4 + 2245) = 5540;
    v4[578] = 0;
    v4[580] = 0;
    v4[579] = 0;
    *(_OWORD *)((char *)v4 + 4492) = 0u;
    *(_OWORD *)((char *)v4 + 4508) = 0u;
    *(_OWORD *)((char *)v4 + 4524) = 0u;
    *(_OWORD *)((char *)v4 + 4540) = 0u;
    *(_OWORD *)((char *)v4 + 4556) = 0u;
    *(_OWORD *)((char *)v4 + 4572) = 0u;
    *(_OWORD *)((char *)v4 + 4588) = 0u;
    *((_BYTE *)v4 + 4604) = 0;
    result = (_QWORD *)v4[540];
    if (result)
    {
      v6 = *a2;
      v7 = *((_QWORD *)a2 + 2);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *))(*result + 24))(result, &v6);
    }
  }
  return result;
}

unint64_t sub_23422E760(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (!*(_BYTE *)(a1 + 32))
  {
    v2 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_ERROR, "Get RendezvousParameters::GetSetupDiscriminator() called without discriminator in params (inconsistent).", v4, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(0x22u, 1);
  }
  return *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int16 *)(a1 + 32) << 32);
}

void sub_23422E800(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  unint64_t v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t *v27;
  NSObject *v28;
  NSObject *log;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  _QWORD v34[4];
  _BYTE v35[80];
  _QWORD v36[4];
  _BYTE v37[80];
  _BYTE buf[22];
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = sub_2341C4608();
  if (os_signpost_enabled(v8))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "continueCommissioningDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!*(_QWORD *)(a1 + 9048))
  {
    v11 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_ERROR, "No default commissioner is specified", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 942;
    goto LABEL_16;
  }
  if (!a2 || *(_QWORD *)(a1 + 4328) != a2)
  {
    v9 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Invalid device for commissioning %p", buf, 0xCu);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 948;
LABEL_16:
    v12 = 3;
    goto LABEL_17;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v15 = sub_23422C920(a1, v14);
  if (!v15)
  {
    v20 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Couldn't find commissionee device", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 954;
    goto LABEL_16;
  }
  v16 = v15;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15) || v16 != *(_QWORD *)(a1 + 4328))
  {
    v17 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16) >> 32;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v18;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v19;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Invalid device for commissioning after attestation failure: 0x%08X%08X", buf, 0xEu);
    }
    if (sub_234114844(1u))
    {
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      sub_2341147D0(9u, 1);
    }
    v10 = 960;
    goto LABEL_16;
  }
  v21 = *(unsigned __int8 *)(a1 + 4344);
  v22 = sub_234117B80(9u, "Controller");
  if (v21 != 14)
  {
    v28 = v22;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_ERROR, "Commissioning is not attestation verification phase", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v10 = 966;
    goto LABEL_16;
  }
  log = v22;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16) >> 32;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v23;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v24;
    _os_log_impl(&dword_233BF3000, log, OS_LOG_TYPE_DEFAULT, "Continuing commissioning after attestation failure for device ID 0x%08X%08X", buf, 0xEu);
  }
  if (sub_234114844(2u))
  {
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    sub_2341147D0(9u, 2);
  }
  v25 = sub_234117B80(9u, "Controller");
  v26 = v25;
  if (a3)
  {
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_ERROR, "Client selected error: %u for failed 'Attestation Information' for device", buf, 8u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
    v40 = 0;
    *(_WORD *)&buf[8] = a3;
    *(_QWORD *)buf = 6;
    LODWORD(v32) = 172;
    *((_QWORD *)&v32 + 1) = "src/controller/CHIPDeviceController.cpp";
    v33 = 979;
    sub_23423ECD4((uint64_t)v36, (uint64_t)buf);
    v37[72] = v40;
    sub_23422EEF4(a1, &v32, (uint64_t)v36);
    if (v36[0] == 4)
    {
      v36[1] = &unk_2505174E0;
      sub_2341CD754(v37);
    }
    if (*(_QWORD *)buf != 4)
      goto LABEL_59;
    *(_QWORD *)&buf[8] = &unk_2505174E0;
    v27 = &v39;
  }
  else
  {
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v26, OS_LOG_TYPE_DEFAULT, "Overriding attestation failure per client and continuing commissioning", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    LODWORD(v30) = 0;
    *((_QWORD *)&v30 + 1) = "src/controller/CHIPDeviceController.cpp";
    v31 = 984;
    v34[0] = -1;
    v35[72] = 0;
    sub_23422EEF4(a1, &v30, (uint64_t)v34);
    if (v34[0] != 4)
      goto LABEL_59;
    v34[1] = &unk_2505174E0;
    v27 = (uint64_t *)v35;
  }
  sub_2341CD754(v27);
LABEL_59:
  v12 = 0;
  v10 = 986;
LABEL_17:
  *(_DWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a4 + 16) = v10;
  v13 = sub_2341C4608();
  if (os_signpost_enabled(v13))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "continueCommissioningDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422EEF4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  NSObject *v6;
  _BYTE *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  NSObject *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _BYTE buf[24];
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  _QWORD v35[4];
  _BYTE v36[80];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "CommissioningStageComplete";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v7 = (_BYTE *)(a1 + 4344);
  v8 = sub_234226DFC(*(unsigned __int8 *)(a1 + 4344));
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = v8;
  *(_DWORD *)&buf[16] = *(_DWORD *)a2;
  buf[20] = 3;
  sub_2341C4BEC((uint64_t)buf);
  v9 = *(_QWORD *)(a1 + 4328);
  if (!v9)
    sub_2342612A4(0);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v11 = *(_QWORD *)(a1 + 4328);
  *(_QWORD *)(a1 + 4328) = 0;
  v12 = *(_QWORD **)(a1 + 4376);
  *(_QWORD *)(a1 + 4376) = 0;
  if (v12 == (_QWORD *)(a1 + 4352))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 4352);
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_9:
  v14 = *(_QWORD **)(a1 + 4408);
  *(_QWORD *)(a1 + 4408) = 0;
  if (v14 == (_QWORD *)(a1 + 4384))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 4384);
  }
  else
  {
    if (!v14)
      goto LABEL_14;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_14:
  v16 = *(_QWORD *)(a1 + 4320);
  if (v16)
  {
    v17 = sub_233D53F10(a1);
    if (v17)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = 0;
    v19 = *v7;
    v27 = *a2;
    v28 = *((_QWORD *)a2 + 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v16 + 64))(v16, v10, v18, v19, &v27);
  }
  if (*(_QWORD *)(a1 + 9056))
  {
    *(_BYTE *)(a3 + 104) = *v7;
    v25 = 0uLL;
    v26 = 0;
    v20 = *(_QWORD *)(a1 + 9056);
    v23 = *a2;
    v24 = *((_QWORD *)a2 + 2);
    sub_23423ECD4((uint64_t)v35, a3);
    v36[72] = *(_BYTE *)(a3 + 104);
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, _QWORD *))(*(_QWORD *)v20 + 48))(&v25, v20, &v23, v35);
    if (v35[0] == 4)
    {
      v35[1] = &unk_2505174E0;
      sub_2341CD754(v36);
    }
    if ((_DWORD)v25 && *v7 != 34)
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      *(_OWORD *)buf = v25;
      *(_QWORD *)&buf[16] = v26;
      v21 = *(_BYTE *)(a3 + 104);
      v30 = 1;
      v31 = v21;
      *v7 = 34;
      *(_QWORD *)(a1 + 4328) = v11;
      sub_234234638(a1, v11, v10, (__int128 *)buf);
    }
  }
  v22 = sub_2341C4608();
  if (os_signpost_enabled(v22))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "CommissioningStageComplete";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v22, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422F244(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[4];
  _BYTE v13[80];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    if (a2)
    {
      v6 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v15 = HIDWORD(a2);
        v16 = 1024;
        v17 = a2;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "StopPairing called for node ID 0x%08X%08X", buf, 0xEu);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      if (sub_234228B3C(a1 + 4848, a2))
      {
        v7 = 0;
        *(_BYTE *)(a1 + 4345) = 0;
        v8 = 1000;
      }
      else
      {
        v9 = sub_23422C920(a1, a2);
        if (v9)
        {
          if (*(_QWORD *)(a1 + 4328) == v9)
          {
            sub_23422C5A8(a1);
            LODWORD(v10) = 116;
            *((_QWORD *)&v10 + 1) = "src/controller/CHIPDeviceController.cpp";
            v11 = 1010;
            v12[0] = -1;
            v13[72] = 0;
            sub_23422EEF4(a1, &v10, (uint64_t)v12);
            if (v12[0] == 4)
            {
              v12[1] = &unk_2505174E0;
              sub_2341CD754(v13);
            }
          }
          else
          {
            sub_23422CAC8((_QWORD *)a1, v9);
          }
          v7 = 0;
          v8 = 1016;
        }
        else
        {
          v8 = 1005;
          v7 = 51;
        }
      }
    }
    else
    {
      v8 = 992;
      v7 = 47;
    }
  }
  else
  {
    v8 = 991;
    v7 = 3;
  }
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = v8;
}

uint64_t sub_23422F440(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);

  v1 = result;
  v2 = *(uint64_t (**)(uint64_t))(result + 4664);
  if (v2)
  {
    *(_QWORD *)(result + 4664) = 0;
    result = v2(result + 4648);
  }
  v3 = *(uint64_t (**)(uint64_t))(v1 + 4704);
  if (v3)
  {
    *(_QWORD *)(v1 + 4704) = 0;
    result = v3(v1 + 4688);
  }
  v4 = *(uint64_t (**)(uint64_t))(v1 + 4744);
  if (v4)
  {
    *(_QWORD *)(v1 + 4744) = 0;
    return v4(v1 + 4728);
  }
  return result;
}

void sub_23422F4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v8 = 136315394;
    v9 = "DeviceCommissioner";
    v10 = 2080;
    v11 = "UnpairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    sub_23425033C(a1, a2, (_QWORD *)a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
    *(_DWORD *)(a3 + 16) = 1057;
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    v8 = 136315394;
    v9 = "DeviceCommissioner";
    v10 = 2080;
    v11 = "UnpairDevice";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v8, 0x16u);
  }
}

_QWORD *sub_23422F62C(_QWORD *result, __int128 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  uint64_t v6;

  v3 = result[542];
  if (v3)
  {
    v4 = result;
    sub_23422CAC8(result, v3);
    result = (_QWORD *)v4[540];
    if (result)
    {
      v5 = *a2;
      v6 = *((_QWORD *)a2 + 2);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, __int128 *))(*result + 24))(result, &v5);
    }
  }
  return result;
}

_QWORD *sub_23422F688(_QWORD *a1, int *a2)
{
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  int v8;
  const char *v9;
  int v10;
  char v11;

  v8 = 1;
  v9 = "core_dcm_pase_session";
  v10 = *a2;
  v11 = 3;
  sub_2341C4BEC((uint64_t)&v8);
  v4 = a1[540];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 1);
  v6 = *(_OWORD *)a2;
  v7 = *((_QWORD *)a2 + 2);
  return sub_23422F62C(a1, &v6);
}

_QWORD *sub_23422F710(uint64_t a1, int *a2)
{
  return sub_23422F688((_QWORD *)(a1 - 4312), a2);
}

_QWORD *sub_23422F71C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  _QWORD *result;
  int v9;
  const char *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint8_t buf[4];
  _BYTE v24[12];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 4336);
  *(_QWORD *)(a1 + 4336) = 0;
  if (v3)
  {
    v18 = 0uLL;
    v19 = 0;
    sub_234226B24(v3, a2, (uint64_t)&v18);
    v4 = v18;
    v5 = sub_234117B80(9u, "Controller");
    v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v16 = v18;
        v17 = v19;
        v7 = sub_2341083CC((const char **)&v16, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v24 = v7;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Failed in setting up secure channel: err %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        v14 = v18;
        v15 = v19;
        sub_2341083CC((const char **)&v14, 1);
        sub_2341147D0(9u, 1);
      }
      v12 = v18;
      v13 = v19;
      return (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 48))(a1, &v12);
    }
    else
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_INFO, "Remote device completed SPAKE2+ handshake", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(9u, 3);
      *(_DWORD *)buf = 1;
      *(_QWORD *)&v24[4] = "core_dcm_pase_session";
      v25 = 0;
      v26 = 3;
      sub_2341C4BEC((uint64_t)buf);
      result = *(_QWORD **)(a1 + 4320);
      if (result)
      {
        v9 = 0;
        v10 = "src/controller/CHIPDeviceController.cpp";
        v11 = 1113;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, int *))(*result + 24))(result, &v9);
      }
      if (*(_BYTE *)(a1 + 4345))
      {
        *(_BYTE *)(a1 + 4345) = 0;
        *(_DWORD *)buf = 0;
        *(_QWORD *)&v24[4] = "core_dcm_commission_device";
        v26 = 0;
        sub_2341C4BEC((uint64_t)buf);
        return (*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 9048)
                                                                                          + 40))(buf, *(_QWORD *)(a1 + 9048), a1, v3);
      }
    }
  }
  else
  {
    v20 = 51;
    v21 = "src/controller/CHIPDeviceController.cpp";
    v22 = 1098;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 48))(a1, &v20);
  }
  return result;
}

_QWORD *sub_23422F9A0(uint64_t a1, uint64_t *a2)
{
  return sub_23422F71C(a1 - 4312, a2);
}

void sub_23422F9AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint8_t a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  _BYTE v13[4];
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "DeviceCommissioner";
    v17 = 2080;
    v18 = "SendCertificateChainRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v11 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v16 = (const char *)a2;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Sending Certificate Chain request to %p device", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(9u, 3);
  if (a2)
  {
    buf[0] = a3;
    v13[0] = *(_BYTE *)a4;
    if (v13[0])
      v14 = *(_DWORD *)(a4 + 4);
    sub_23422FBE4(a1, a2, (uint64_t)buf, (uint64_t)sub_23422FDA4, (uint64_t)sub_23422FFE4, 0, (uint64_t)v13, 0, a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    *(_DWORD *)(a5 + 16) = 1130;
  }
  v12 = sub_2341C4608();
  if (os_signpost_enabled(v12))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "DeviceCommissioner";
    v17 = 2080;
    v18 = "SendCertificateChainRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_QWORD *sub_23422FBE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250518278;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250518308;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_23423F268(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_23422FDA4(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  __int128 v7;
  int v8;
  _QWORD v9[4];
  _BYTE v10[80];
  _BYTE buf[24];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnCertificateChainResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Received certificate chain from the device", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v13 = 0;
  *(_OWORD *)&buf[8] = *a2;
  *(_QWORD *)buf = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = "src/controller/CHIPDeviceController.cpp";
  v8 = 1156;
  sub_23423ECD4((uint64_t)v9, (uint64_t)buf);
  v10[72] = v13;
  sub_23422EEF4(a1, &v7, (uint64_t)v9);
  if (v9[0] == 4)
  {
    v9[1] = &unk_2505174E0;
    sub_2341CD754(v10);
  }
  if (*(_QWORD *)buf == 4)
  {
    *(_QWORD *)&buf[8] = &unk_2505174E0;
    sub_2341CD754(&v12);
  }
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnCertificateChainResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23422FFE4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnCertificateChainFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)&v12, 1);
    *(_DWORD *)buf = 136315138;
    v17 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Device failed to receive the Certificate Chain request Response: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v10, 1);
    sub_2341147D0(9u, 2);
  }
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v8, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnCertificateChainFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23423022C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint8_t v15[8];
  _BYTE v16[4];
  int v17;
  _BYTE buf[22];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendAttestationRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v11 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Sending Attestation request to %p device", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(9u, 3);
  if (!a2)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1164;
LABEL_17:
    *(_DWORD *)(a5 + 16) = v13;
    goto LABEL_18;
  }
  *(_OWORD *)buf = *a3;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v16[0] = *(_BYTE *)a4;
  if (v16[0])
    v17 = *(_DWORD *)(a4 + 4);
  sub_2342304F4(a1, a2, (uint64_t)buf, (uint64_t)sub_2342306B4, (uint64_t)sub_2342308FC, 0, (uint64_t)v16, 0, a5);
  if (!*(_DWORD *)a5)
  {
    v12 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "Sent Attestation request, waiting for the Attestation Information", v15, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(9u, 3);
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1172;
    goto LABEL_17;
  }
LABEL_18:
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendAttestationRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_QWORD *sub_2342304F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250518518;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_2505185A8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234240024(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_2342306B4(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  NSObject *v7;
  __int128 v8;
  int v9;
  _QWORD v10[4];
  _BYTE v11[80];
  _BYTE buf[24];
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnAttestationResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Received Attestation Information from the device", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v14 = 0;
  v6 = a2[1];
  *(_OWORD *)&buf[8] = *a2;
  v13 = v6;
  *(_QWORD *)buf = 1;
  LODWORD(v8) = 0;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = 1192;
  sub_23423ECD4((uint64_t)v10, (uint64_t)buf);
  v11[72] = v14;
  sub_23422EEF4(a1, &v8, (uint64_t)v10);
  if (v10[0] == 4)
  {
    v10[1] = &unk_2505174E0;
    sub_2341CD754(v11);
  }
  if (*(_QWORD *)buf == 4)
  {
    *(_QWORD *)&buf[8] = &unk_2505174E0;
    sub_2341CD754((char *)&v13 + 8);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnAttestationResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2342308FC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnAttestationFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)&v12, 1);
    *(_DWORD *)buf = 136315138;
    v17 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Device failed to receive the Attestation Information Response: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v10, 1);
    sub_2341147D0(9u, 2);
  }
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v8, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnAttestationFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_BYTE *sub_234230B44(_BYTE *a1)
{
  if (!*a1)
    sub_2342585FC((uint64_t)a1);
  return a1 + 2;
}

void sub_234230B64(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char v16[4];
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned __int8 *)(a1 + 4344);
  *(_WORD *)(a1 + 9120) = a3;
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 9048) + 24))(*(_QWORD *)(a1 + 9048)) + 584);
  v7 = sub_234114774(0x38uLL);
  v8 = (uint64_t)v7;
  if (v7)
    sub_2341F3974((uint64_t)v7, a2);
  sub_23423EF94((uint64_t *)(a1 + 9128), v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(&v18, v6);
  v9 = v18;
  v10 = sub_234117B80(9u, "Controller");
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v9)
  {
    if (v11)
    {
      WORD2(v18) = 0;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Proceeding without changing fail-safe timer value as delegate has not set it", (uint8_t *)&v18 + 4, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    goto LABEL_14;
  }
  if (v11)
  {
    v12 = *(unsigned __int16 *)sub_233CBCEC0(&v18);
    HIDWORD(v18) = 67109120;
    v19 = v12;
    _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "Changing fail-safe timer to %u seconds to handle DA failure", (uint8_t *)&v18 + 4, 8u);
  }
  if (sub_234114844(2u))
  {
    sub_233CBCEC0(&v18);
    sub_2341147D0(9u, 2);
  }
  v13 = *(_QWORD *)(a1 + 4328);
  v14 = *v5;
  v15 = *(unsigned __int16 *)sub_233CBCEC0(&v18);
  v16[0] = 1;
  v17 = 30000;
  if (!sub_234231468(a1, v13, v14, v15, v16, (uint64_t)sub_234230D68, sub_234231028, 0))
LABEL_14:
    sub_234230E34(a1);
}

void sub_234230D68(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  uint8_t v5[16];

  v2 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Successfully extended fail-safe timer to handle DA failure", v5, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v3 = *(_QWORD **)(a1 + 4376);
  *(_QWORD *)(a1 + 4376) = 0;
  if (v3 == (_QWORD *)(a1 + 4352))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 4352);
    goto LABEL_9;
  }
  if (v3)
  {
    v4 = 5;
LABEL_9:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  sub_234230E34(a1);
}

void sub_234230E34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  __int128 v5;
  int v6;
  _QWORD v7[4];
  _BYTE v8[80];
  uint8_t buf[8];
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 4328))
  {
    v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 9048) + 24))(*(_QWORD *)(a1 + 9048)) + 584);
    v3 = sub_234117B80(9u, "Controller");
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Device attestation completed, delegating continuation to client", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 24))(v2, a1, *(_QWORD *)(a1 + 4328), *(_QWORD *)(a1 + 9128), *(unsigned __int16 *)(a1 + 9120));
    }
    else
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Device attestation failed and no delegate set, failing commissioning", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      v12 = 0;
      LOWORD(v10) = *(_WORD *)(a1 + 9120);
      *(_QWORD *)buf = 6;
      LODWORD(v5) = 172;
      *((_QWORD *)&v5 + 1) = "src/controller/CHIPDeviceController.cpp";
      v6 = 1310;
      sub_23423ECD4((uint64_t)v7, (uint64_t)buf);
      v8[72] = v12;
      sub_23422EEF4(a1, &v5, (uint64_t)v7);
      if (v7[0] == 4)
      {
        v7[1] = &unk_2505174E0;
        sub_2341CD754(v8);
      }
      if (*(_QWORD *)buf == 4)
      {
        v10 = &unk_2505174E0;
        sub_2341CD754(&v11);
      }
    }
  }
}

void sub_234231028(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  char *v5;
  __int128 v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];
  _BYTE v13[80];
  _OWORD buf[2];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)&v10, 1);
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Failed to extend fail-safe timer to handle attestation failure %s", (uint8_t *)buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)&v8, 1);
    sub_2341147D0(9u, 2);
  }
  v16 = 0;
  WORD4(buf[0]) = *(_WORD *)(a1 + 9120);
  *(_QWORD *)&buf[0] = 6;
  LODWORD(v6) = 172;
  *((_QWORD *)&v6 + 1) = "src/controller/CHIPDeviceController.cpp";
  v7 = 1321;
  sub_23423ECD4((uint64_t)v12, (uint64_t)buf);
  v13[72] = v16;
  sub_23422EEF4(a1, &v6, (uint64_t)v12);
  if (v12[0] == 4)
  {
    v12[1] = &unk_2505174E0;
    sub_2341CD754(v13);
  }
  if (*(_QWORD *)&buf[0] == 4)
  {
    *((_QWORD *)&buf[0] + 1) = &unk_2505174E0;
    sub_2341CD754(&v15);
  }
}

void sub_2342311D4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  __int128 v9;
  int v10;
  int v11;
  _QWORD v12[4];
  _BYTE v13[80];
  _QWORD v14[4];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v8 = 1329;
    v7 = 47;
    goto LABEL_11;
  }
  if (*(_BYTE *)(a1 + 4344) != 22)
  {
    v8 = 1330;
LABEL_10:
    v7 = 3;
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(a1 + 4328);
  if (!v3)
  {
    v8 = 1331;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(a1 + 4320);
  if (v4)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 112))(v4, v6, *(unsigned __int8 *)(a1 + 36), *a2);
  }
  v7 = 0;
  v8 = 1327;
LABEL_11:
  v14[0] = -1;
  v16 = 0;
  *(_QWORD *)&v9 = v7;
  *((_QWORD *)&v9 + 1) = "src/controller/CHIPDeviceController.cpp";
  v10 = v8;
  v11 = 0;
  sub_23423ECD4((uint64_t)v12, (uint64_t)v14);
  v13[72] = v16;
  sub_23422EEF4(a1, &v9, (uint64_t)v12);
  if (v12[0] == 4)
  {
    v12[1] = &unk_2505174E0;
    sub_2341CD754(v13);
  }
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(&v15);
  }
}

void sub_234231330(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  int v8;
  _QWORD v9[4];
  _BYTE v10[80];
  _QWORD v11[4];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (*(_BYTE *)(a1 + 4344) == 33)
    {
      v3 = *(_QWORD *)(a1 + 4328);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 4320);
        if (v4)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 120))(v4, v6, *(unsigned __int8 *)(a1 + 36), *a2);
        }
      }
    }
  }
  v11[0] = -1;
  v13 = 0;
  LODWORD(v7) = 0;
  *((_QWORD *)&v7 + 1) = "src/controller/CHIPDeviceController.cpp";
  v8 = 1363;
  sub_23423ECD4((uint64_t)v9, (uint64_t)v11);
  v10[72] = v13;
  sub_23422EEF4(a1, &v7, (uint64_t)v9);
  if (v9[0] == 4)
  {
    v9[1] = &unk_2505174E0;
    sub_2341CD754(v10);
  }
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(&v12);
  }
}

BOOL sub_234231468(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char *a5, uint64_t a6, void (*a7)(uint64_t, __int128 *), int a8)
{
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  int v22;
  __int128 v25;
  uint64_t v26;
  char v27[4];
  int v28;
  __int16 v29;
  uint64_t v30;
  uint8_t buf[16];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v15 = (*((unint64_t (**)(unint64_t *))*off_256157A10 + 2))((unint64_t *)off_256157A10);
  v16 = v15 + 1000 * a4;
  v17 = *(_QWORD *)(a2 + 8);
  if (v16 < v17)
  {
    v20 = v15;
    v21 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = (unsigned __int16)(((((*(_QWORD *)(a2 + 8) - v20) >> 3)
                                             * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v22;
      _os_log_impl(&dword_233BF3000, v21, OS_LOG_TYPE_DEFAULT, "Skipping arming failsafe: new time (%u seconds from now) before old time (%u seconds from now)", buf, 0xEu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
  }
  else
  {
    v29 = a4;
    v30 = a3;
    v18 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a4;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_DEFAULT, "Arming failsafe (%u seconds)", buf, 8u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    memset(buf, 0, sizeof(buf));
    v32 = 0;
    v27[0] = *a5;
    if (v27[0])
      v28 = *((_DWORD *)a5 + 1);
    sub_2342316FC(a1, a2, (uint64_t)&v29, a6, (uint64_t)a7, 0, (uint64_t)v27, a8, (uint64_t)buf);
    if (*(_DWORD *)buf)
    {
      if (a8)
        v19 = 0;
      else
        v19 = a1;
      v25 = *(_OWORD *)buf;
      v26 = v32;
      a7(v19, &v25);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = v16;
    }
  }
  return v16 >= v17;
}

_QWORD *sub_2342316FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_2505187B8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250518848;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234240880(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_2342318BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v11 = 136315394;
    v12 = "DeviceCommissioner";
    v13 = 2080;
    v14 = "ValidateAttestationInfo";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v7 = *(_QWORD *)(a1 + 9136);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2, a1 + 4768);
      v8 = 0;
      v9 = 1443;
      goto LABEL_9;
    }
    v9 = 1437;
  }
  else
  {
    v9 = 1436;
  }
  v8 = 3;
LABEL_9:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    v12 = "DeviceCommissioner";
    v13 = 2080;
    v14 = "ValidateAttestationInfo";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_234231A5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    v11 = 136315394;
    v12 = "DeviceCommissioner";
    v13 = 2080;
    v14 = "CheckForRevokedDACChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v7 = *(_QWORD *)(a1 + 9136);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2, a1 + 4768);
      v8 = 0;
      v9 = 1455;
      goto LABEL_9;
    }
    v9 = 1451;
  }
  else
  {
    v9 = 1450;
  }
  v8 = 3;
LABEL_9:
  *(_DWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = v9;
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    v11 = 136315394;
    v12 = "DeviceCommissioner";
    v13 = 2080;
    v14 = "CheckForRevokedDACChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", (uint8_t *)&v11, 0x16u);
  }
}

void sub_234231BFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  NSObject *v14;
  uint64_t *v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    v22 = 2080;
    v23 = "ValidateCSR";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) != 1)
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/controller/CHIPDeviceController.cpp";
    v16 = 1462;
LABEL_11:
    *(_DWORD *)(a7 + 16) = v16;
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a1 + 9136))
  {
    *(_DWORD *)a7 = 3;
    *(_QWORD *)(a7 + 8) = "src/controller/CHIPDeviceController.cpp";
    v16 = 1463;
    goto LABEL_11;
  }
  *(_QWORD *)buf = &off_250505A50;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)a7 = 0;
  sub_23413C364(a5, (uint64_t)buf, a7);
  if (!*(_DWORD *)a7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v18, a2);
    v15 = (uint64_t *)sub_233C25EA4(&v18);
    v20[0] = sub_2341CD3C0(*v15) + 208;
    v20[1] = 16;
    if ((_BYTE)v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 9136) + 40))(*(_QWORD *)(a1 + 9136), a3, v20, a4, buf, a6);
  }
LABEL_12:
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    v22 = 2080;
    v23 = "ValidateCSR";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234231E50(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint8_t v15[8];
  _BYTE v16[4];
  int v17;
  _BYTE buf[22];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendOperationalCertificateSigningRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v11 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Sending CSR request to %p device", buf, 0xCu);
  }
  if (sub_234114844(3u))
    sub_2341147D0(9u, 3);
  if (!a2)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1482;
LABEL_17:
    *(_DWORD *)(a5 + 16) = v13;
    goto LABEL_18;
  }
  buf[16] = 0;
  *(_OWORD *)buf = *a3;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v16[0] = *(_BYTE *)a4;
  if (v16[0])
    v17 = *(_DWORD *)(a4 + 4);
  sub_23423211C(a1, a2, (uint64_t)buf, (uint64_t)sub_2342322DC, (uint64_t)sub_234232524, 0, (uint64_t)v16, 0, a5);
  if (!*(_DWORD *)a5)
  {
    v12 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_INFO, "Sent CSR request, waiting for the CSR", v15, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(9u, 3);
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1490;
    goto LABEL_17;
  }
LABEL_18:
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendOperationalCertificateSigningRequestCommand";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_QWORD *sub_23423211C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250518A58;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250518AE8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342410DC(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_2342322DC(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  NSObject *v7;
  __int128 v8;
  int v9;
  _QWORD v10[4];
  _BYTE v11[80];
  _BYTE buf[24];
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnOperationalCertificateSigningRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Received certificate signing request from the device", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v14 = 0;
  v6 = a2[1];
  *(_OWORD *)&buf[8] = *a2;
  v13 = v6;
  *(_QWORD *)buf = 2;
  LODWORD(v8) = 0;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = 1510;
  sub_23423ECD4((uint64_t)v10, (uint64_t)buf);
  v11[72] = v14;
  sub_23422EEF4(a1, &v8, (uint64_t)v10);
  if (v10[0] == 4)
  {
    v10[1] = &unk_2505174E0;
    sub_2341CD754(v11);
  }
  if (*(_QWORD *)buf == 4)
  {
    *(_QWORD *)&buf[8] = &unk_2505174E0;
    sub_2341CD754((char *)&v13 + 8);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "OnOperationalCertificateSigningRequest";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234232524(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnCSRFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)&v12, 1);
    *(_DWORD *)buf = 136315138;
    v17 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Device failed to receive the CSR request Response: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v10, 1);
    sub_2341147D0(9u, 2);
  }
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v8, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnCSRFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_23423276C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  _BYTE buf[22];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "IssueNOCChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v11 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(a1 + 36);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Getting certificate chain for the device on fabric idx %u", buf, 8u);
    }
    if (sub_234114844(2u))
    {
      v18 = *(unsigned __int8 *)(a1 + 36);
      sub_2341147D0(9u, 2);
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 4288) + 24))(*(_QWORD *)(a1 + 4288), a3);
    if (*(_BYTE *)(a1 + 36))
    {
      v13 = *(_QWORD *)(a1 + 4288);
      v14 = sub_233D53F10(a1);
      if (v14)
        v15 = *(_QWORD *)(v14 + 8);
      else
        v15 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v15);
    }
    v16 = *(_QWORD *)(a1 + 4288);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v22[0] = 0;
    v22[1] = 0;
    v21[0] = 0;
    v21[1] = 0;
    v20[0] = 0;
    v20[1] = 0;
    v19[0] = 0;
    v19[1] = 0;
    (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD *, _QWORD *, _QWORD *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a2, buf, v22, v21, v20, v19, a4, v18);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    *(_DWORD *)(a5 + 16) = 1550;
  }
  v17 = sub_2341C4608();
  if (os_signpost_enabled(v17))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "IssueNOCChain";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2342329F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  NSObject *v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _BYTE buf[12];
  __int16 v29;
  const char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    v29 = 2080;
    v30 = "ProcessOpCSR";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v17 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "Getting certificate chain for the device from the issuer", buf, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    *(_QWORD *)buf = &off_250505A50;
    a8[1] = 0;
    a8[2] = 0;
    *a8 = 0;
    sub_23413C364(a5, (uint64_t)buf, (uint64_t)a8);
    if (!*(_DWORD *)a8)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v25, a2);
      v18 = (uint64_t *)sub_233C25EA4(&v25);
      v27[0] = sub_2341CD3C0(*v18) + 208;
      v27[1] = 16;
      if ((_BYTE)v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      v19 = *(_QWORD *)(a1 + 4288);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v20);
      if (*(_BYTE *)(a1 + 36))
      {
        v21 = *(_QWORD *)(a1 + 4288);
        v22 = sub_233D53F10(a1);
        if (v22)
          v23 = *(_QWORD *)(v22 + 8);
        else
          v23 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, v23);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 4288) + 16))(*(_QWORD *)(a1 + 4288), a3, a7, a4, v27, a5, a6, a1 + 4808);
    }
  }
  else
  {
    *(_DWORD *)a8 = 3;
    a8[1] = "src/controller/CHIPDeviceController.cpp";
    *((_DWORD *)a8 + 4) = 1572;
  }
  v24 = sub_2341C4608();
  if (os_signpost_enabled(v24))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    v29 = 2080;
    v30 = "ProcessOpCSR";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v24, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234232D04(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  uint8_t v20[8];
  _BYTE v21[4];
  int v22;
  _BYTE buf[22];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v16 = sub_2341C4608();
  if (os_signpost_enabled(v16))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendOperationalCertificate";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v16, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!a2)
  {
    *(_DWORD *)a8 = 47;
    *(_QWORD *)(a8 + 8) = "src/controller/CHIPDeviceController.cpp";
    v18 = 1601;
LABEL_15:
    *(_DWORD *)(a8 + 16) = v18;
    goto LABEL_16;
  }
  *(_OWORD *)buf = *a3;
  buf[16] = *(_BYTE *)a4;
  if (buf[16])
    v24 = *(_OWORD *)(a4 + 8);
  v25 = a5;
  v26 = 16;
  v27 = a6;
  v28 = *(_WORD *)(a1 + 4296);
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)a8 = 0;
  v21[0] = *(_BYTE *)a7;
  if (v21[0])
    v22 = *(_DWORD *)(a7 + 4);
  sub_234232F98(a1, a2, (uint64_t)buf, (uint64_t)sub_234233158, (uint64_t)sub_234233534, 0, (uint64_t)v21, 0, a8);
  if (!*(_DWORD *)a8)
  {
    v17 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "Sent operational certificate to the device", v20, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    *(_DWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = "src/controller/CHIPDeviceController.cpp";
    v18 = 1615;
    goto LABEL_15;
  }
LABEL_16:
  v19 = sub_2341C4608();
  if (os_signpost_enabled(v19))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendOperationalCertificate";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_QWORD *sub_234232F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250518CF8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250518D88;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234241938(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_234233158(uint64_t a1, _BYTE *a2)
{
  int v2;
  uint8_t *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  __int128 v16;
  int v17;
  int v18;
  const char *v19[2];
  int v20;
  int v21;
  const char *v22[2];
  int v23;
  int v24;
  _QWORD v25[4];
  _BYTE v26[80];
  uint8_t buf[4];
  _BYTE v28[20];
  uint64_t v29;

  v5 = buf;
  v29 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v28 = "DeviceCommissioner";
    *(_WORD *)&v28[8] = 2080;
    *(_QWORD *)&v28[10] = "OnOperationalCertificateAddResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v7 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v28 = v8;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Device returned status %d on receiving the NOC", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    v9 = *(const char **)(a1 + 4328);
    if (v9)
    {
      v10 = 197;
      v11 = "src/controller/CHIPDeviceController.cpp";
      v12 = 1626;
      switch(*a2)
      {
        case 0:
          sub_2342337C4(a1, v9, (uint64_t)buf);
          v10 = *(_DWORD *)buf;
          if (!*(_DWORD *)buf)
            goto LABEL_20;
          LODWORD(v5) = *(_DWORD *)v28;
          v11 = *(const char **)&v28[4];
          v12 = *(_DWORD *)&v28[12];
          v2 = *(_DWORD *)&v28[16];
          break;
        case 1:
          break;
        case 2:
          v10 = 92;
          v12 = 1628;
          break;
        case 3:
          v10 = 80;
          v12 = 1630;
          break;
        case 4:
          v10 = 3;
          v12 = 1632;
          break;
        case 5:
          v10 = 11;
          v12 = 1634;
          break;
        case 6:
          v10 = 120;
          v12 = 1636;
          break;
        case 7:
          v10 = 86;
          v12 = 1645;
          break;
        case 9:
          v10 = 126;
          v12 = 1638;
          break;
        case 0xA:
          v10 = 47;
          v12 = 1640;
          break;
        case 0xB:
          v10 = 113;
          v12 = 1642;
          break;
        default:
          v10 = 86;
          v11 = "src/controller/CHIPDeviceController.cpp";
          v12 = 1648;
          break;
      }
    }
    else
    {
      v10 = 3;
      v11 = "src/controller/CHIPDeviceController.cpp";
      v12 = 1670;
    }
  }
  else
  {
    v10 = 3;
    v11 = "src/controller/CHIPDeviceController.cpp";
    v12 = 1668;
  }
  v13 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v22[0] = (const char *)__PAIR64__(v5, v10);
    v22[1] = v11;
    v23 = v12;
    v24 = v2;
    v14 = sub_2341083CC(v22, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v28 = v14;
    _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "Add NOC failed with error %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v19[0] = (const char *)__PAIR64__(v5, v10);
    v19[1] = v11;
    v20 = v12;
    v21 = v2;
    sub_2341083CC(v19, 1);
    sub_2341147D0(9u, 2);
  }
  *(_QWORD *)&v16 = __PAIR64__(v5, v10);
  *((_QWORD *)&v16 + 1) = v11;
  v17 = v12;
  v18 = v2;
  v25[0] = -1;
  v26[72] = 0;
  sub_23422EEF4(a1, &v16, (uint64_t)v25);
  if (v25[0] == 4)
  {
    v25[1] = &unk_2505174E0;
    sub_2341CD754(v26);
  }
LABEL_20:
  v15 = sub_2341C4608();
  if (os_signpost_enabled(v15))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)v28 = "DeviceCommissioner";
    *(_WORD *)&v28[8] = 2080;
    *(_QWORD *)&v28[10] = "OnOperationalCertificateAddResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234233534(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnAddNOCFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)&v12, 1);
    *(_DWORD *)buf = 136315138;
    v17 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Device failed to receive the operational certificate Response: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v10, 1);
    sub_2341147D0(9u, 2);
  }
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v8, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnAddNOCFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

uint64_t sub_23423377C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;

  if (result > 0xB)
  {
    v3 = 1648;
    v2 = 86;
  }
  else
  {
    v2 = dword_2343001F0[(char)result];
    v3 = dword_234300220[(char)result];
  }
  *(_DWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void sub_2342337C4(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  __int128 v12;
  int v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2341C4608();
  if (os_signpost_enabled(v6))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnOperationalCredentialsProvisioningCompletion";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v7 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v17 = a2;
    _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Operational credentials provisioned on device %p", buf, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 4320);
    if (v8)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, 0);
    LODWORD(v12) = 0;
    *((_QWORD *)&v12 + 1) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1729;
    v14[0] = -1;
    v15[72] = 0;
    sub_23422EEF4(a1, &v12, (uint64_t)v14);
    if (v14[0] == 4)
    {
      v14[1] = &unk_2505174E0;
      sub_2341CD754(v15);
    }
    v9 = 0;
    v10 = 1731;
  }
  else
  {
    v10 = 1723;
    v9 = 47;
  }
  *(_DWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a3 + 16) = v10;
  v11 = sub_2341C4608();
  if (os_signpost_enabled(v11))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnOperationalCredentialsProvisioningCompletion";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v11, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234233A24(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  uint8_t v15[8];
  _BYTE v16[4];
  int v17;
  _BYTE buf[22];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v10 = sub_2341C4608();
  if (os_signpost_enabled(v10))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendTrustedRootCertificate";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  if (!a2)
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1689;
LABEL_17:
    *(_DWORD *)(a5 + 16) = v13;
    goto LABEL_18;
  }
  v11 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_DEFAULT, "Sending root certificate to the device", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  *(_OWORD *)buf = *a3;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  v16[0] = *(_BYTE *)a4;
  if (v16[0])
    v17 = *(_DWORD *)(a4 + 4);
  sub_234233CDC(a1, a2, (uint64_t)buf, (uint64_t)sub_234233E9C, (uint64_t)sub_234234098, 0, (uint64_t)v16, 0, a5);
  if (!*(_DWORD *)a5)
  {
    v12 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_DEFAULT, "Sent root certificate to the device", v15, 2u);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = "src/controller/CHIPDeviceController.cpp";
    v13 = 1700;
    goto LABEL_17;
  }
LABEL_18:
  v14 = sub_2341C4608();
  if (os_signpost_enabled(v14))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "DeviceCommissioner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "SendTrustedRootCertificate";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v14, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

_QWORD *sub_234233CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250518F98;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519028;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234242194(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_234233E9C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  __int128 v5;
  int v6;
  _QWORD v7[4];
  _BYTE v8[80];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_2341C4608();
  if (os_signpost_enabled(v2))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "DeviceCommissioner";
    v11 = 2080;
    v12 = "OnRootCertSuccessResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Device confirmed that it has received the root certificate", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  LODWORD(v5) = 0;
  *((_QWORD *)&v5 + 1) = "src/controller/CHIPDeviceController.cpp";
  v6 = 1708;
  v7[0] = -1;
  v8[72] = 0;
  sub_23422EEF4(a1, &v5, (uint64_t)v7);
  if (v7[0] == 4)
  {
    v7[1] = &unk_2505174E0;
    sub_2341CD754(v8);
  }
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "DeviceCommissioner";
    v11 = 2080;
    v12 = "OnRootCertSuccessResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_234234098(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[4];
  _BYTE v15[80];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = sub_2341C4608();
  if (os_signpost_enabled(v4))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnRootCertFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    v6 = sub_2341083CC((const char **)&v12, 1);
    *(_DWORD *)buf = 136315138;
    v17 = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "Device failed to receive the root certificate Response: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v10, 1);
    sub_2341147D0(9u, 2);
  }
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v14[0] = -1;
  v15[72] = 0;
  sub_23422EEF4(a1, &v8, (uint64_t)v14);
  if (v14[0] == 4)
  {
    v14[1] = &unk_2505174E0;
    sub_2341CD754(v15);
  }
  v7 = sub_2341C4608();
  if (os_signpost_enabled(v7))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "DeviceCommissioner";
    v18 = 2080;
    v19 = "OnRootCertFailureResponse";
    _os_signpost_emit_with_name_impl(&dword_233BF3000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "com.csa.matter.signpost", "%s-%s", buf, 0x16u);
  }
}

void sub_2342342E0()
{
  sub_23410BAA4();
}

void sub_2342342EC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  uint64_t v7;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_23421EC18(a1, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    v6 = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    sub_2341F3E44((uint64_t *)(a1 + 16), &v6, (uint64_t)a3);
  }
}

_QWORD *sub_234234354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2341F3F7C((_QWORD *)(a1 + 16), a2);
}

uint64_t sub_234234360(uint64_t a1, _QWORD *a2)
{
  sub_23421E7C4(a1, a2);
  return sub_234228858(a1 + 4848, a2);
}

void sub_234234390(uint64_t a1)
{
  __int128 v1;
  int v2;
  _QWORD v3[4];
  _BYTE v4[80];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  LODWORD(v1) = 0;
  *((_QWORD *)&v1 + 1) = "src/controller/CHIPDeviceController.cpp";
  v2 = 1807;
  v3[0] = -1;
  v4[72] = 0;
  sub_23422EEF4(a1, &v1, (uint64_t)v3);
  if (v3[0] == 4)
  {
    v3[1] = &unk_2505174E0;
    sub_2341CD754(v4);
  }
}

void sub_234234434(uint64_t a1)
{
  __int128 v1;
  int v2;
  _QWORD v3[4];
  _BYTE v4[80];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  LODWORD(v1) = 0;
  *((_QWORD *)&v1 + 1) = "src/controller/CHIPDeviceController.cpp";
  v2 = 1813;
  v3[0] = -1;
  v4[72] = 0;
  sub_23422EEF4(a1, &v1, (uint64_t)v3);
  if (v3[0] == 4)
  {
    v3[1] = &unk_2505174E0;
    sub_2341CD754(v4);
  }
}

void sub_2342344D8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];
  _BYTE v13[80];
  uint8_t buf[4];
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
    v5 = sub_2341083CC((const char **)&v10, 1);
    *(_DWORD *)buf = 136315138;
    v15 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received failure response %s\n", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    v8 = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)&v8, 1);
    sub_2341147D0(9u, 2);
  }
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  v12[0] = -1;
  v13[72] = 0;
  sub_23422EEF4(a1, &v6, (uint64_t)v12);
  if (v12[0] == 4)
  {
    v12[1] = &unk_2505174E0;
    sub_2341CD754(v13);
  }
}

_QWORD *sub_234234638(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _BYTE *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  char *v35;
  _BYTE v36[8];
  int v37;
  const char *v38;
  int v39;
  _BYTE v40[8];
  _BYTE v41[40];
  _BYTE v42[40];
  __int128 v43;
  uint64_t v44;
  _QWORD v45[5];
  __int128 v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  _BYTE v50[8];
  uint64_t v51;
  int v52;
  const char *v53;
  int v54;
  _QWORD v55[4];
  _BYTE v56[80];
  _BYTE v57[24];
  _BYTE *v58;
  _BYTE v59[24];
  _BYTE *v60;
  __int128 buf;
  uint64_t v62;
  char v63[24];
  _QWORD v64[4];
  _BYTE v65[80];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 9088;
  v8 = (__int128 *)(a1 + 9064);
  v9 = *a4;
  *(_QWORD *)(a1 + 9080) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 9064) = v9;
  v10 = (char *)a4 + 24;
  v11 = *((unsigned __int8 *)a4 + 24);
  *(_BYTE *)v7 = v11;
  if (v11)
    *(_BYTE *)(v7 + 1) = *((_BYTE *)a4 + 25);
  v12 = *((unsigned __int8 *)a4 + 26);
  *(_BYTE *)(v7 + 2) = v12;
  if (v12)
    *(_WORD *)(v7 + 4) = *((_WORD *)a4 + 14);
  v13 = *((unsigned __int8 *)a4 + 30);
  *(_BYTE *)(v7 + 6) = v13;
  if (v13)
    *(_BYTE *)(v7 + 7) = *((_BYTE *)a4 + 31);
  v14 = *((unsigned __int8 *)a4 + 32);
  *(_BYTE *)(v7 + 8) = v14;
  if (v14)
    *(_BYTE *)(v7 + 9) = *((_BYTE *)a4 + 33);
  if (*(_DWORD *)a4 == 116)
  {
    v17 = sub_23422C920(a1, a3);
    if (v17 == a2)
    {
      v18 = v50;
      sub_2342269E0(a2, (uint64_t)v50);
    }
    else
    {
      v18 = v49;
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(v49, a2);
    }
    v22 = (uint64_t *)sub_233C25EA4(v18);
    *((_QWORD *)&buf + 1) = 0;
    v62 = 0;
    *(_QWORD *)&buf = &off_250514968;
    v63[0] = 0;
    sub_2341CDA90(&buf, v22);
    if (v17 == a2)
    {
      if (!v50[0])
        goto LABEL_39;
      v23 = v51;
    }
    else
    {
      if (!LOBYTE(v49[0]))
        goto LABEL_39;
      v23 = v49[1];
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
LABEL_39:
    v48[0] = 0;
    v48[1] = 0;
    sub_2341CD8A4(&v46, &buf);
    sub_2341CD8A4(v45, &buf);
    v24 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v66) = 134217984;
      *(_QWORD *)((char *)&v66 + 4) = a2;
      _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_DEFAULT, "Disarming failsafe on device %p in background", (uint8_t *)&v66, 0xCu);
    }
    if (sub_234114844(2u))
      sub_2341147D0(9u, 2);
    v43 = 0uLL;
    v44 = 0;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v26 = v63[0];
    if (v63[0])
    {
      *((_QWORD *)&v66 + 1) = *(_QWORD *)sub_233C25EA4(v63);
      (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 24))(*((_QWORD *)&v66 + 1));
      v26 = 1;
    }
    LOBYTE(v66) = v26;
    v27 = (uint64_t *)sub_233C25EA4(&v66);
    sub_2341CD8A4(v42, &v46);
    v28 = operator new(0x30uLL);
    *v28 = &off_2505190A8;
    sub_2341CD91C(v28 + 1, v42);
    v60 = v28;
    sub_2341CD8A4(v41, v45);
    v29 = operator new(0x30uLL);
    *v29 = &off_250519128;
    sub_2341CD91C(v29 + 1, v41);
    v58 = v29;
    v40[0] = 0;
    sub_234234F88(v25, v27, 0, (uint64_t)v48, (uint64_t)v59, (uint64_t)v57, (uint64_t)v40, (uint64_t)&v43);
    v30 = v58;
    if (v58 == v57)
    {
      v31 = 4;
      v30 = v57;
    }
    else
    {
      if (!v58)
        goto LABEL_50;
      v31 = 5;
    }
    (*(void (**)(_QWORD *))(*v30 + 8 * v31))(v30);
LABEL_50:
    sub_2341CD754(v41);
    v32 = v60;
    if (v60 == v59)
    {
      v33 = 4;
      v32 = v59;
    }
    else
    {
      if (!v60)
      {
LABEL_55:
        sub_2341CD754(v42);
        if ((_BYTE)v66)
          (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 32))(*((_QWORD *)&v66 + 1));
        if ((_DWORD)v43)
        {
          v34 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v66 = v43;
            v67 = v44;
            v35 = sub_2341083CC((const char **)&v66, 1);
            LODWORD(v66) = 136315138;
            *(_QWORD *)((char *)&v66 + 4) = v35;
            _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_ERROR, "Failed to send command to disarm fail-safe: %s", (uint8_t *)&v66, 0xCu);
          }
          if (sub_234114844(1u))
          {
            v66 = v43;
            v67 = v44;
            sub_2341083CC((const char **)&v66, 1);
            sub_2341147D0(9u, 1);
          }
        }
        sub_2342350B0(a1);
        sub_2341CD754(v45);
        sub_2341CD754(&v46);
        return (_QWORD *)sub_2341CD754(&buf);
      }
      v33 = 5;
    }
    (*(void (**)(_QWORD *))(*v32 + 8 * v33))(v32);
    goto LABEL_55;
  }
  if (!*(_DWORD *)a4)
  {
    v52 = 0;
    v53 = "src/controller/CHIPDeviceController.cpp";
    v54 = 1858;
    v64[0] = -1;
    v65[72] = 0;
    sub_23422EEF4(a1, &v52, v64);
    if (v64[0] == 4)
    {
      v64[1] = &unk_2505174E0;
      sub_2341CD754(v65);
    }
    v15 = sub_23422C920(a1, a3);
    if (v15)
      sub_23422CAC8((_QWORD *)a1, v15);
    return (_QWORD *)sub_234234D20(a1, a3, v8);
  }
  if (*v10 && *sub_234220C24(v10) >= 0x17u)
  {
    v37 = 0;
    v38 = "src/controller/CHIPDeviceController.cpp";
    v39 = 1902;
    v55[0] = -1;
    v56[72] = 0;
    sub_23422EEF4(a1, &v37, v55);
    if (v55[0] == 4)
    {
      v55[1] = &unk_2505174E0;
      sub_2341CD754(v56);
    }
    return (_QWORD *)sub_234234D20(a1, a3, v8);
  }
  v19 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_DEFAULT, "Disarming failsafe on device %p", (uint8_t *)&buf, 0xCu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0uLL;
  v47 = 0;
  v36[0] = 0;
  result = sub_2342316FC(a1, a2, (uint64_t)v45, (uint64_t)sub_2342351AC, (uint64_t)sub_234235240, 0, (uint64_t)v36, 0, (uint64_t)&v46);
  if ((_DWORD)v46)
  {
    v20 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      buf = v46;
      v62 = v47;
      v21 = sub_2341083CC((const char **)&buf, 1);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_ERROR, "Failed to send command to disarm fail-safe: %s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      buf = v46;
      v62 = v47;
      sub_2341083CC((const char **)&buf, 1);
      sub_2341147D0(9u, 1);
    }
    return (_QWORD *)sub_2342350B0(a1);
  }
  return result;
}

uint64_t sub_234234D20(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[2];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint8_t buf[16];
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)buf = 1;
  *(_QWORD *)&buf[8] = "core_dcm_commission_device";
  LODWORD(v20) = *(_DWORD *)a3;
  BYTE4(v20) = 3;
  sub_2341C4BEC((uint64_t)buf);
  v6 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)a3)
    {
      *(_OWORD *)buf = *a3;
      v20 = (char *)*((_QWORD *)a3 + 2);
      v7 = sub_2341083CC((const char **)buf, 1);
    }
    else
    {
      v7 = "success";
    }
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = HIDWORD(a2);
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a2;
    *(_WORD *)&buf[14] = 2080;
    v20 = v7;
    _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Commissioning complete for node ID 0x%08X%08X: %s", buf, 0x18u);
  }
  if (sub_234114844(2u))
  {
    if (*(_DWORD *)a3)
    {
      *(_OWORD *)buf = *a3;
      v20 = (char *)*((_QWORD *)a3 + 2);
      sub_2341083CC((const char **)buf, 1);
    }
    sub_2341147D0(9u, 2);
  }
  *(_BYTE *)(a1 + 4344) = 1;
  result = *(_QWORD *)(a1 + 4320);
  if (result)
  {
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)result + 40))(result, a2, &v17);
    v9 = sub_233D53F10(a1);
    if (v9)
      v10 = *(_QWORD *)(v9 + 16);
    else
      v10 = 0;
    v11 = *(_QWORD *)(a1 + 4320);
    if (*(_DWORD *)a3)
    {
      v15 = *a3;
      v16 = *((_QWORD *)a3 + 2);
      if (*((_BYTE *)a3 + 24))
        v12 = *sub_234220C24((_BYTE *)a3 + 24);
      else
        v12 = 0;
      v13[0] = *((_BYTE *)a3 + 26);
      if (v13[0])
        v14 = *((_WORD *)a3 + 14);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, _BYTE *))(*(_QWORD *)v11 + 56))(v11, a2, v10, &v15, v12, v13);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, a2, v10);
    }
  }
  return result;
}

_QWORD *sub_234234F88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  unsigned __int8 v19[4];
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  sub_233CF11B0((uint64_t)v22, a5);
  sub_233CF11B0((uint64_t)v20, a6);
  v19[0] = 0;
  sub_234240880(a1, a2, a3, a4, (uint64_t)v22, (uint64_t)v20, v19, a7, a8, 0);
  v15 = v21;
  if (v21 == v20)
  {
    v16 = 4;
    v15 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  result = v23;
  if (v23 == v22)
  {
    v18 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

uint64_t sub_2342350B0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  _QWORD v8[4];
  _BYTE v9[80];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 4328);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v5 = 0;
    v6 = "src/controller/CHIPDeviceController.cpp";
    v7 = 1946;
    v8[0] = -1;
    v9[72] = 0;
    sub_23422EEF4(a1, &v5, v8);
    if (v8[0] == 4)
    {
      v8[1] = &unk_2505174E0;
      sub_2341CD754(v9);
    }
    v4 = sub_23422C920(a1, v3);
    if (v4)
      sub_23422CAC8((_QWORD *)a1, v4);
    return sub_234234D20(a1, v3, (__int128 *)(a1 + 9064));
  }
  return result;
}

uint64_t sub_2342351AC(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Failsafe disarmed", v4, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  return sub_2342350B0(a1);
}

uint64_t sub_234235240(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[16];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Ignoring failure to disarm failsafe: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  return sub_2342350B0(a1);
}

__n128 sub_234235354(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  if (*(_QWORD *)a1 == 4)
  {
    *(_QWORD *)(a1 + 8) = &unk_2505174E0;
    sub_2341CD754(a1 + 32);
  }
  *(_QWORD *)(a1 + 8) = &unk_250515E90;
  v4 = a2->n128_u64[1];
  *(_QWORD *)(a1 + 8) = &unk_2505174E0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  sub_2341CD91C(a1 + 32, &a2[1].n128_i8[8]);
  result = a2[4];
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)a1 = 4;
  return result;
}

uint64_t sub_2342353E0(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  uint64_t result;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    *(_DWORD *)buf = 67109120;
    v7 = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Status of extending fail-safe for CASE retry: %u", buf, 8u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(9u, 2);
  return result;
}

uint64_t sub_2342354B0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint64_t result;
  uint8_t buf[16];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    v4 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_ERROR, "Failed to extend fail-safe for CASE retry: %s", buf, 0xCu);
  }
  result = sub_234114844(1u);
  if ((_DWORD)result)
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    return sub_2341147D0(9u, 1);
  }
  return result;
}

void sub_2342355B0(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v4;
  int v5;
  __int128 v6;
  int v7;
  _QWORD v8[4];
  _BYTE v9[80];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (!a2 || *(void (****)(_QWORD))(a1 + 9112) != a2)
    sub_2342613BC(a1);
  *(_QWORD *)(a1 + 9112) = 0;
  (**a2)(a2);
  j__free(a2);
  v5 = *(unsigned __int8 *)(a1 + 4344);
  if (v5 == 3)
  {
    sub_2342356D8(a1);
  }
  else
  {
    if (v5 != 2)
      sub_234261450(v4);
    LODWORD(v6) = 0;
    *((_QWORD *)&v6 + 1) = "src/controller/CHIPDeviceController.cpp";
    v7 = 2134;
    v8[0] = -1;
    v9[72] = 0;
    sub_23422EEF4(a1, &v6, (uint64_t)v8);
    if (v8[0] == 4)
    {
      v8[1] = &unk_2505174E0;
      sub_2341CD754(v9);
    }
  }
}

void sub_2342356D8(uint64_t a1)
{
  int v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  int v5;
  __int128 v6;
  int v7;
  _BYTE v8[32];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[4];
  _BYTE v14[80];
  _BYTE v15[24];
  _OWORD v16[5];
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)v8 = -1;
  *(_WORD *)&v8[4] = -1;
  *(_WORD *)&v8[8] = -1;
  *(_QWORD *)&v8[12] = 0;
  *(_QWORD *)&v8[18] = 0;
  *(_WORD *)&v8[26] = 514;
  LODWORD(v9) = 0;
  WORD2(v9) = 257;
  *((_QWORD *)&v9 + 1) = 0;
  LOBYTE(v10) = 1;
  WORD4(v10) = 0;
  HIDWORD(v10) = 0;
  LODWORD(v11) = 0;
  WORD2(v11) = 0;
  DWORD2(v11) = 0;
  v12 = 0uLL;
  sub_2342358D4(a1, (uint64_t)v8, (uint64_t)v15);
  v18 = *(_OWORD *)&v15[4];
  v2 = *(_DWORD *)v15;
  v19 = *(_DWORD *)&v15[20];
  if (*(_DWORD *)v15)
  {
    v3 = *(void (****)(_QWORD))(a1 + 9104);
    *(_QWORD *)(a1 + 9104) = 0;
  }
  else
  {
    sub_234236448(a1, (uint64_t)v8, (uint64_t)v15);
    v18 = *(_OWORD *)&v15[4];
    v2 = *(_DWORD *)v15;
    v19 = *(_DWORD *)&v15[20];
    v3 = *(void (****)(_QWORD))(a1 + 9104);
    *(_QWORD *)(a1 + 9104) = 0;
    v4 = *(_QWORD *)(a1 + 4320);
    if (v4 && !v2)
    {
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 72))(v4, v8);
      v2 = 0;
    }
  }
  v16[1] = v9;
  v16[2] = v10;
  v16[3] = v11;
  v16[4] = v12;
  *(_OWORD *)&v15[8] = *(_OWORD *)v8;
  v17 = 0;
  v16[0] = *(_OWORD *)&v8[16];
  *(_QWORD *)v15 = 5;
  v5 = v2;
  v7 = v19;
  v6 = v18;
  sub_23423ECD4((uint64_t)v13, (uint64_t)v15);
  v14[72] = v17;
  sub_23422EEF4(a1, (__int128 *)&v5, (uint64_t)v13);
  if (v13[0] == 4)
  {
    v13[1] = &unk_2505174E0;
    sub_2341CD754(v14);
  }
  if (*(_QWORD *)v15 == 4)
  {
    *(_QWORD *)&v15[8] = &unk_2505174E0;
    sub_2341CD754((char *)v16 + 8);
  }
  if (v3)
  {
    (**v3)(v3);
    j__free(v3);
  }
}

void sub_2342358C8(uint64_t a1, void (***a2)(_QWORD))
{
  sub_2342355B0(a1 - 4304, a2);
}

void sub_2342358D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  char v30;
  NSObject *v31;
  _BOOL4 v32;
  __int16 v33;
  NSObject *v34;
  NSObject *v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  __int16 *v58;
  __int128 v59;
  uint64_t v60;
  _DWORD v61[3];
  int v62;
  uint8_t v63[4];
  uint64_t v64;
  uint8_t buf[16];
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250518000;
  *(_QWORD *)(a3 + 16) = 2178;
  v61[0] = 0;
  v6 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)buf = 0;
  *(_QWORD *)&buf[4] = 0x100000030;
  buf[2] = 0;
  sub_234242E70(v6, (uint64_t)buf, v61, &v59);
  if ((_DWORD)v59)
  {
    v7 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      v8 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to read BasicCommissioningInfo: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *(_OWORD *)a3 = v59;
    *(_QWORD *)(a3 + 16) = v60;
  }
  else
  {
    *(_WORD *)(a2 + 24) = v61[0];
  }
  v9 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)v63 = 0;
  v64 = 0x200000030;
  v63[2] = 0;
  sub_234242F14(v9, (uint64_t)v63, (_BYTE *)(a2 + 26), buf);
  v59 = *(_OWORD *)buf;
  v60 = v66;
  if (*(_DWORD *)buf)
  {
    v10 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      v11 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to read RegulatoryConfig: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *(_OWORD *)a3 = v59;
    *(_QWORD *)(a3 + 16) = v60;
  }
  v12 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)v63 = 0;
  v64 = 0x300000030;
  v63[2] = 0;
  sub_234242FB8(v12, (uint64_t)v63, (_BYTE *)(a2 + 27), buf);
  v59 = *(_OWORD *)buf;
  v60 = v66;
  if (*(_DWORD *)buf)
  {
    v13 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      v14 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_ERROR, "Failed to read LocationCapability: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *(_OWORD *)a3 = v59;
    *(_QWORD *)(a3 + 16) = v60;
  }
  v15 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)v63 = 0;
  v64 = 48;
  v63[2] = 0;
  sub_23424305C(v15, (uint64_t)v63, (_QWORD *)(a2 + 16), buf);
  v59 = *(_OWORD *)buf;
  v60 = v66;
  if (*(_DWORD *)buf)
  {
    v16 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      v17 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to read Breadcrumb: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v59;
      v66 = v60;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *(_OWORD *)a3 = v59;
    *(_QWORD *)(a3 + 16) = v60;
  }
  v18 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)v63 = 0;
  v64 = 0x200000028;
  v63[2] = 0;
  sub_234243100(v18, (uint64_t)v63, (_WORD *)(a2 + 12), (uint64_t)buf);
  v59 = *(_OWORD *)buf;
  v60 = v66;
  if (*(_DWORD *)buf)
    v19 = &v59;
  else
    v19 = (__int128 *)a3;
  v20 = *((_QWORD *)v19 + 2);
  *(_OWORD *)a3 = *v19;
  *(_QWORD *)(a3 + 16) = v20;
  v21 = *(_QWORD *)(a1 + 9104);
  *(_WORD *)v63 = 0;
  v64 = 0x400000028;
  v63[2] = 0;
  sub_2342431C8(v21, (uint64_t)v63, (_WORD *)(a2 + 14), buf);
  v59 = *(_OWORD *)buf;
  v60 = v66;
  if (*(_DWORD *)buf)
    v22 = &v59;
  else
    v22 = (__int128 *)a3;
  v23 = *((_QWORD *)v22 + 2);
  *(_OWORD *)a3 = *v22;
  *(_QWORD *)(a3 + 16) = v23;
  v24 = *((_QWORD *)v22 + 2);
  *(_OWORD *)a3 = *v22;
  *(_QWORD *)(a3 + 16) = v24;
  v25 = *(_QWORD *)(a1 + 9104);
  v26 = *(_QWORD **)(v25 + 16);
  v55 = a3;
  v56 = (_QWORD *)(v25 + 24);
  v58 = (__int16 *)a2;
  if (v26 != (_QWORD *)(v25 + 24))
  {
    while (1)
    {
      v27 = (_QWORD *)v26[5];
      if (v27 != v26 + 6)
        break;
LABEL_78:
      v41 = (_QWORD *)v26[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v26[2];
          v38 = *v42 == (_QWORD)v26;
          v26 = v42;
        }
        while (!v38);
      }
      v26 = v42;
      if (v42 == v56)
      {
        v25 = *(_QWORD *)(a1 + 9104);
        v26 = *(_QWORD **)(v25 + 16);
        goto LABEL_85;
      }
    }
    while (1)
    {
      if (*((_DWORD *)v27 + 8) == 49)
      {
        v28 = (_QWORD *)v27[5];
        if (v28 != v27 + 6)
          break;
      }
LABEL_72:
      v39 = (_QWORD *)v27[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v27[2];
          v38 = *v40 == (_QWORD)v27;
          v27 = v40;
        }
        while (!v38);
      }
      v27 = v40;
      if (v40 == v26 + 6)
        goto LABEL_78;
    }
    while (1)
    {
      v29 = *((_DWORD *)v28 + 8);
      LOWORD(v61[0]) = *((_WORD *)v26 + 16);
      v61[1] = 49;
      v61[2] = v29;
      BYTE2(v61[0]) = 0;
      if (v29 == 65532)
      {
        sub_234104468((uint64_t)buf);
        sub_234100268(*(_QWORD *)(a1 + 9104), (unsigned __int16 *)v61, (uint64_t)buf, v63);
        if (!*(_DWORD *)v63)
        {
          v62 = 0;
          sub_23424326C((uint64_t)buf, &v62, v63);
          if (!*(_DWORD *)v63)
          {
            v30 = v62;
            if ((v62 & 1) != 0)
            {
              v34 = sub_234117B80(9u, "Controller");
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v63 = 67109120;
                LODWORD(v64) = LOWORD(v61[0]);
                _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_DEFAULT, "----- NetworkCommissioning Features: has WiFi. endpointid = %u", v63, 8u);
              }
              if (sub_234114844(2u))
                sub_2341147D0(9u, 2);
              v33 = v61[0];
              a2 = (uint64_t)v58;
              goto LABEL_55;
            }
            if ((v62 & 2) != 0)
            {
              v35 = sub_234117B80(9u, "Controller");
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v63 = 67109120;
                LODWORD(v64) = LOWORD(v61[0]);
                _os_log_impl(&dword_233BF3000, v35, OS_LOG_TYPE_DEFAULT, "----- NetworkCommissioning Features: has Thread. endpointid = %u", v63, 8u);
              }
              if (sub_234114844(2u))
                sub_2341147D0(9u, 2);
              a2 = (uint64_t)v58;
              v58[2] = v61[0];
              goto LABEL_66;
            }
            v31 = sub_234117B80(9u, "Controller");
            v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
            if ((v30 & 4) != 0)
            {
              if (v32)
              {
                *(_DWORD *)v63 = 67109120;
                LODWORD(v64) = LOWORD(v61[0]);
                _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "----- NetworkCommissioning Features: has Ethernet. endpointid = %u", v63, 8u);
              }
              if (sub_234114844(2u))
                sub_2341147D0(9u, 2);
              a2 = (uint64_t)v58;
              v58[4] = v61[0];
              goto LABEL_66;
            }
            if (v32)
            {
              *(_WORD *)v63 = 0;
              _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_DEFAULT, "----- NetworkCommissioning Features: no features.", v63, 2u);
            }
            if (sub_234114844(2u))
              sub_2341147D0(9u, 2);
            a2 = (uint64_t)v58;
            if (v58[2] == -1)
              v58[2] = v61[0];
            if (*v58 == -1)
            {
              v33 = v61[0];
LABEL_55:
              *(_WORD *)a2 = v33;
            }
          }
        }
      }
LABEL_66:
      v36 = (_QWORD *)v28[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v28[2];
          v38 = *v37 == (_QWORD)v28;
          v28 = v37;
        }
        while (!v38);
      }
      v28 = v37;
      if (v37 == v27 + 6)
        goto LABEL_72;
    }
  }
LABEL_85:
  *(_QWORD *)&v59 = 0;
  *((_QWORD *)&v59 + 1) = "src/app/ClusterStateCache.h";
  v60 = 419;
  v57 = (_QWORD *)(v25 + 24);
  if (v26 == (_QWORD *)(v25 + 24))
  {
LABEL_117:
    *(_DWORD *)buf = 0;
    *(_QWORD *)&buf[8] = "src/app/ClusterStateCache.h";
    LODWORD(v66) = 419;
    goto LABEL_119;
  }
  while (1)
  {
    v43 = (_QWORD *)v26[5];
    if (v43 != v26 + 6)
      break;
LABEL_111:
    v50 = (_QWORD *)v26[1];
    if (v50)
    {
      do
      {
        v51 = v50;
        v50 = (_QWORD *)*v50;
      }
      while (v50);
    }
    else
    {
      do
      {
        v51 = (_QWORD *)v26[2];
        v38 = *v51 == (_QWORD)v26;
        v26 = v51;
      }
      while (!v38);
    }
    v26 = v51;
    a2 = (uint64_t)v58;
    if (v51 == v57)
      goto LABEL_117;
  }
  while (1)
  {
    if (*((_DWORD *)v43 + 8) == 49)
    {
      v44 = (_QWORD *)v43[5];
      if (v44 != v43 + 6)
        break;
    }
LABEL_105:
    v48 = (_QWORD *)v43[1];
    if (v48)
    {
      do
      {
        v49 = v48;
        v48 = (_QWORD *)*v48;
      }
      while (v48);
    }
    else
    {
      do
      {
        v49 = (_QWORD *)v43[2];
        v38 = *v49 == (_QWORD)v43;
        v43 = v49;
      }
      while (!v38);
    }
    v43 = v49;
    if (v49 == v26 + 6)
      goto LABEL_111;
  }
  while (1)
  {
    v45 = *((_DWORD *)v44 + 8);
    *(_WORD *)v63 = *((_WORD *)v26 + 16);
    LODWORD(v64) = 49;
    HIDWORD(v64) = v45;
    v63[2] = 0;
    v66 = 0;
    memset(buf, 0, sizeof(buf));
    if (v45 == 3)
      break;
    *(_QWORD *)&buf[8] = "src/controller/CHIPDeviceController.cpp";
    LODWORD(v66) = 2292;
LABEL_99:
    v46 = (_QWORD *)v44[1];
    if (v46)
    {
      do
      {
        v47 = v46;
        v46 = (_QWORD *)*v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        v47 = (_QWORD *)v44[2];
        v38 = *v47 == (_QWORD)v44;
        v44 = v47;
      }
      while (!v38);
    }
    v44 = v47;
    if (v47 == v43 + 6)
      goto LABEL_105;
  }
  LOBYTE(v61[0]) = 0;
  v66 = 0;
  memset(buf, 0, sizeof(buf));
  sub_2342432D0(*(_QWORD *)(a1 + 9104), (uint64_t)v63, v61, buf);
  if (!*(_DWORD *)buf)
  {
    if (*(unsigned __int16 *)v63 == (unsigned __int16)*v58)
    {
      *((_BYTE *)v58 + 2) = v61[0];
    }
    else if (*(unsigned __int16 *)v63 == (unsigned __int16)v58[2])
    {
      *((_BYTE *)v58 + 6) = v61[0];
    }
    else if (*(unsigned __int16 *)v63 == (unsigned __int16)v58[4])
    {
      *((_BYTE *)v58 + 10) = v61[0];
    }
    *(_DWORD *)buf = 0;
    *(_QWORD *)&buf[8] = "src/controller/CHIPDeviceController.cpp";
    LODWORD(v66) = 2308;
    goto LABEL_99;
  }
  a2 = (uint64_t)v58;
LABEL_119:
  v59 = *(_OWORD *)buf;
  v60 = v66;
  v52 = &v59;
  if (!*(_DWORD *)buf)
    v52 = (__int128 *)v55;
  v53 = *((_QWORD *)v52 + 2);
  *(_OWORD *)v55 = *v52;
  *(_QWORD *)(v55 + 16) = v53;
  sub_2342365D8(a1, a2);
  if (*(_DWORD *)v55)
  {
    v54 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v54, OS_LOG_TYPE_ERROR, "Error parsing commissioning information", buf, 2u);
    }
    if (sub_234114844(1u))
      sub_2341147D0(9u, 1);
  }
}

void sub_234236448(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  NSObject *v8;
  char *v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250518018;
  *(_QWORD *)(a3 + 16) = 2384;
  v6 = *(_QWORD *)(a1 + 9104);
  v7 = (_BYTE *)(a2 + 48);
  v10 = 0;
  v12 = 0x400000030;
  v11 = 0;
  sub_2342436AC(v6, (uint64_t)&v10, (char *)(a2 + 48), buf);
  if (*(_DWORD *)buf)
  {
    v8 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = xmmword_250518018;
      v14 = 2384;
      v9 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Failed to read SupportsConcurrentConnection: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = xmmword_250518018;
      v14 = 2384;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    *v7 = 1;
  }
  sub_23423676C(a1, a2, a3);
  if (!*(_DWORD *)a3)
    sub_234236D30(a1, a2, a3);
}

void sub_2342365D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  char v17;
  uint64_t v18;

  v15 = 0;
  v4 = *(_QWORD *)(a1 + 9104);
  LOWORD(v13) = 0;
  v14 = 0xFFFC00000038;
  BYTE2(v13) = 0;
  sub_234243374(v4, (uint64_t)&v13, &v15, v10);
  if (LODWORD(v10[0]))
  {
    *(_DWORD *)(a2 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 32) = 1;
    v5 = v15;
    *(_BYTE *)(a2 + 33) = v15 & 1;
    *(_BYTE *)(a2 + 34) = (v5 & 2) != 0;
    *(_BYTE *)(a2 + 35) = (v5 & 8) != 0;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 9104);
      LOWORD(v13) = 0;
      v14 = 0xA00000038;
      BYTE2(v13) = 0;
      sub_23424341C(v6, (uint64_t)&v13, (_BYTE *)(a2 + 36), v10);
      if (LODWORD(v10[0]))
        *(_BYTE *)(a2 + 33) = 0;
      v7 = *(_QWORD *)(a1 + 9104);
      LOWORD(v13) = 0;
      v14 = 0xB00000038;
      BYTE2(v13) = 0;
      sub_2342434C0(v7, (uint64_t)&v13, (_BYTE *)(a2 + 37), v10);
      if (LODWORD(v10[0]))
        *(_BYTE *)(a2 + 33) = 0;
    }
    if (*(_BYTE *)(a2 + 34))
    {
      LOBYTE(v10[0]) = 0;
      v11 = 0;
      v8 = *(_QWORD *)(a1 + 9104);
      v16 = 0;
      v18 = 0x400000038;
      v17 = 0;
      sub_234243564(v8, (uint64_t)&v16, (uint64_t)v10, &v13);
      if (!v13 && v11 && v10[1])
        *(_BYTE *)(a2 + 34) = 0;
    }
    if (*(_BYTE *)(a2 + 35))
    {
      LOBYTE(v10[0]) = 0;
      v12 = 0;
      v9 = *(_QWORD *)(a1 + 9104);
      v16 = 0;
      v18 = 0x300000038;
      v17 = 0;
      sub_234243608(v9, (uint64_t)&v16, (uint64_t)v10, &v13);
      if (!v13)
      {
        if (v12)
          *(_BYTE *)(a2 + 35) = 0;
      }
    }
  }
}

uint64_t sub_23423676C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t result;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  int v38;
  int v39;
  uint8_t v40[32];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[72];
  uint8_t v48;
  uint8_t v49;
  _QWORD v50[10];
  uint8_t buf[8];
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = xmmword_250518030;
  *(_QWORD *)(a3 + 16) = 2409;
  v4 = *(_QWORD *)(a1 + 9104);
  v5 = *(_QWORD **)(v4 + 16);
  v29 = (_QWORD *)(v4 + 24);
  if (v5 != (_QWORD *)(v4 + 24))
  {
    while (1)
    {
      v6 = (_QWORD *)v5[5];
      v30 = v5 + 6;
      if (v6 != v5 + 6)
        break;
LABEL_55:
      v26 = (_QWORD *)v5[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v5[2];
          v23 = *v27 == (_QWORD)v5;
          v5 = v27;
        }
        while (!v23);
      }
      v5 = v27;
      if (v27 == v29)
        goto LABEL_61;
    }
    v32 = v5;
    while (1)
    {
      if (*((_DWORD *)v6 + 8) == 62)
      {
        v7 = (_QWORD *)v6[5];
        v8 = v6 + 6;
        if (v7 != v6 + 6)
          break;
      }
LABEL_49:
      v24 = (_QWORD *)v6[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v6[2];
          v23 = *v25 == (_QWORD)v6;
          v6 = v25;
        }
        while (!v23);
      }
      v6 = v25;
      if (v25 == v30)
        goto LABEL_55;
    }
    while (1)
    {
      v9 = *((_DWORD *)v7 + 8);
      v36 = *((_WORD *)v5 + 16);
      v38 = 62;
      v39 = v9;
      v37 = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      if (v9 == 1)
      {
        sub_234104468((uint64_t)v47);
        v48 = 0;
        sub_234104498((uint64_t)v47, 0, 0);
        v33 = 0;
        v34 = 0;
        v35 = 0;
        sub_234243750(*(_QWORD *)(a1 + 9104), (uint64_t)&v36, (uint64_t)v47, &v33);
        if ((_DWORD)v33)
          break;
        buf[0] = v48;
        if (v48)
          buf[1] = v49;
        sub_23402E0A4((uint64_t)&v42, (uint64_t)v47, buf);
        if (sub_23402DEFC((uint64_t)&v42))
        {
          while (1)
          {
            v10 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&buf[4] = v44;
              *(_WORD *)v52 = 1024;
              *(_DWORD *)&v52[2] = HIDWORD(v45);
              *(_WORD *)&v52[6] = 1024;
              *(_DWORD *)&v52[8] = v45;
              *(_WORD *)&v52[12] = 1024;
              *(_DWORD *)&v52[14] = HIDWORD(v46);
              *(_WORD *)&v52[18] = 1024;
              *(_DWORD *)&v52[20] = v46;
              _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_DEFAULT, "DeviceCommissioner::OnDone - fabric.vendorId=0x%04X fabric.fabricId=0x%08X%08X fabric.nodeId=0x%08X%08X", buf, 0x20u);
            }
            if (sub_234114844(2u))
              sub_2341147D0(9u, 2);
            v11 = sub_233D53F10(a1);
            if (v11)
              v12 = *(_QWORD *)(v11 + 8);
            else
              v12 = 0;
            if (v12 != v45)
              goto LABEL_33;
            v13 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_DEFAULT, "DeviceCommissioner::OnDone - found a matching fabric id", buf, 2u);
            }
            if (sub_234114844(2u))
              sub_2341147D0(9u, 2);
            v14 = v43;
            if (v43 != 65)
              break;
            sub_233C01D28(&v41, v42);
            *(_QWORD *)buf = &off_250505A50;
            *(_OWORD *)v52 = *(_OWORD *)v41;
            v16 = *(_OWORD *)(v41 + 32);
            v15 = *(_OWORD *)(v41 + 48);
            v17 = *(_OWORD *)(v41 + 16);
            v55 = *(_BYTE *)(v41 + 64);
            v53 = v16;
            v54 = v15;
            *(_OWORD *)&v52[16] = v17;
            v50[0] = &off_250505A50;
            sub_23423EB00(a1, (uint64_t)v50, (uint64_t)v40);
            if (!*(_DWORD *)v40)
            {
              if (sub_233D50ED4((uint64_t)v50, (uint64_t)buf))
              {
                v20 = sub_234117B80(9u, "Controller");
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v40 = 0;
                  _os_log_impl(&dword_233BF3000, v20, OS_LOG_TYPE_DEFAULT, "DeviceCommissioner::OnDone - fabric root keys match", v40, 2u);
                }
                if (sub_234114844(2u))
                  sub_2341147D0(9u, 2);
                *(_QWORD *)(a2 + 40) = v46;
              }
              goto LABEL_33;
            }
            v18 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)v40 = 0;
              _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "DeviceCommissioner::OnDone - error reading commissioner root public key", v40, 2u);
            }
            if (sub_234114844(1u))
              goto LABEL_32;
LABEL_33:
            if (!sub_23402DEFC((uint64_t)&v42))
              goto LABEL_42;
          }
          v19 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v14;
            *(_WORD *)v52 = 1024;
            *(_DWORD *)&v52[2] = 65;
            _os_log_impl(&dword_233BF3000, v19, OS_LOG_TYPE_ERROR, "DeviceCommissioner::OnDone - fabric root key size mismatch %u != %u", buf, 0xEu);
          }
          if (!sub_234114844(1u))
            goto LABEL_33;
LABEL_32:
          sub_2341147D0(9u, 1);
          goto LABEL_33;
        }
LABEL_42:
        LODWORD(v33) = 0;
        v34 = "src/controller/CHIPDeviceController.cpp";
        LODWORD(v35) = 2461;
        v5 = v32;
        v8 = v6 + 6;
      }
      else
      {
        v34 = "src/controller/CHIPDeviceController.cpp";
        LODWORD(v35) = 2464;
      }
      v21 = (_QWORD *)v7[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v7[2];
          v23 = *v22 == (_QWORD)v7;
          v7 = v22;
        }
        while (!v23);
      }
      v7 = v22;
      if (v22 == v8)
        goto LABEL_49;
    }
  }
LABEL_61:
  result = *(_QWORD *)(a1 + 4320);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 80))(result, *(_QWORD *)(a2 + 40));
  return result;
}

void sub_234236D30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  char *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  unsigned __int8 v45[3];
  unsigned int v46;
  unsigned __int16 v47;
  char v48;
  uint64_t v49;
  __int128 buf;
  unint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  v6 = *(_QWORD *)(a1 + 9104);
  v47 = 0;
  v49 = 0xFFFC00000046;
  v48 = 0;
  sub_2342437F4(v6, (uint64_t)&v47, &v46, &buf);
  v8 = buf;
  v7 = DWORD1(buf);
  v9 = (const char *)*((_QWORD *)&buf + 1);
  v11 = v51;
  v10 = HIDWORD(v51);
  if (!(_DWORD)buf)
  {
    v17 = v46;
    *(_BYTE *)(a2 + 56) = (v46 & 4) != 0;
    *(_BYTE *)(a2 + 57) = v17 & 1;
    v18 = (v17 >> 1) & 1;
    goto LABEL_8;
  }
  if ((_DWORD)buf == 16)
  {
    v18 = 0;
    *(_BYTE *)(a2 + 56) = 0;
    v11 = 2496;
    v9 = "src/controller/CHIPDeviceController.cpp";
LABEL_8:
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v7;
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 20) = v10;
    *(_QWORD *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    if (v18)
    {
      v19 = *(_QWORD *)(a1 + 9104);
      v47 = 0;
      v49 = 0x600000046;
      v48 = 0;
      sub_23424389C(v19, (uint64_t)&v47, (_DWORD *)(a2 + 72), &buf);
      if ((_DWORD)buf)
      {
        v20 = *((_QWORD *)&buf + 1);
        v44 = buf;
        v21 = v51;
        v22 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_233BF3000, v22, OS_LOG_TYPE_ERROR, "IcdManagement.UserActiveModeTriggerHint expected, but failed to read.", (uint8_t *)&buf, 2u);
        }
        if (!sub_234114844(1u))
          goto LABEL_14;
        goto LABEL_13;
      }
      if ((*(_DWORD *)(a2 + 72) & 0x1AEE4) != 0)
      {
        v23 = *(_QWORD *)(a1 + 9104);
        v47 = 0;
        v49 = 0x700000046;
        v48 = 0;
        sub_234243940(v23, (uint64_t)&v47, (_OWORD *)(a2 + 80), &buf);
        if ((_DWORD)buf)
        {
          v20 = *((_QWORD *)&buf + 1);
          v44 = buf;
          v21 = v51;
          v24 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_233BF3000, v24, OS_LOG_TYPE_ERROR, "IcdManagement.UserActiveModeTriggerInstruction expected for given active mode trigger hint, but failed to read.", (uint8_t *)&buf, 2u);
          }
          if (!sub_234114844(1u))
            goto LABEL_14;
LABEL_13:
          sub_2341147D0(9u, 1);
LABEL_14:
          *(_QWORD *)a3 = v44;
          *(_QWORD *)(a3 + 8) = v20;
          *(_QWORD *)(a3 + 16) = v21;
          return;
        }
      }
    }
    if (v8)
    {
LABEL_23:
      *(_DWORD *)(a2 + 60) = 0;
      *(_DWORD *)(a2 + 64) = 0;
      *(_WORD *)(a2 + 68) = 0;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
      *(_DWORD *)(a3 + 16) = 2561;
      return;
    }
    v25 = *(_QWORD *)(a1 + 9104);
    v47 = 0;
    v49 = 70;
    v48 = 0;
    sub_2342439E4(v25, (uint64_t)&v47, (_DWORD *)(a2 + 60), &buf);
    v26 = buf;
    if ((_DWORD)buf)
    {
      v27 = DWORD1(buf);
      v28 = *((_QWORD *)&buf + 1);
      v29 = v51;
      v30 = HIDWORD(v51);
      v31 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf = __PAIR64__(v27, v26);
        *((_QWORD *)&buf + 1) = v28;
        v51 = __PAIR64__(v30, v29);
        v32 = sub_2341083CC((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_233BF3000, v31, OS_LOG_TYPE_ERROR, "IcdManagement.IdleModeDuration expected, but failed to read: %s", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_234114844(1u))
        goto LABEL_36;
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 9104);
      v47 = 0;
      v49 = 0x100000046;
      v48 = 0;
      sub_234243A88(v33, (uint64_t)&v47, (_DWORD *)(a2 + 64), &buf);
      v26 = buf;
      if (!(_DWORD)buf)
      {
        v39 = *(_QWORD *)(a1 + 9104);
        v47 = 0;
        v49 = 0x200000046;
        v48 = 0;
        sub_234243B2C(v39, (uint64_t)&v47, (_WORD *)(a2 + 68), &buf);
        v40 = buf;
        v41 = DWORD1(buf);
        v28 = *((_QWORD *)&buf + 1);
        v29 = v51;
        v30 = HIDWORD(v51);
        if ((_DWORD)buf)
        {
          v42 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            *(_QWORD *)&buf = __PAIR64__(v41, v40);
            *((_QWORD *)&buf + 1) = v28;
            v51 = __PAIR64__(v30, v29);
            v43 = sub_2341083CC((const char **)&buf, 1);
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v43;
            _os_log_impl(&dword_233BF3000, v42, OS_LOG_TYPE_ERROR, "IcdManagement.ActiveModeThreshold expected, but failed to read: %s", (uint8_t *)&buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_QWORD *)&buf = __PAIR64__(v41, v40);
            *((_QWORD *)&buf + 1) = v28;
            v51 = __PAIR64__(v30, v29);
            sub_2341083CC((const char **)&buf, 1);
            sub_2341147D0(9u, 1);
          }
        }
        *(_DWORD *)a3 = v40;
        *(_DWORD *)(a3 + 4) = v41;
        goto LABEL_37;
      }
      v27 = DWORD1(buf);
      v28 = *((_QWORD *)&buf + 1);
      v29 = v51;
      v30 = HIDWORD(v51);
      v34 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf = __PAIR64__(v27, v26);
        *((_QWORD *)&buf + 1) = v28;
        v51 = __PAIR64__(v30, v29);
        v35 = sub_2341083CC((const char **)&buf, 1);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v35;
        _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_ERROR, "IcdManagement.ActiveModeDuration expected, but failed to read: %s", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_234114844(1u))
      {
LABEL_36:
        *(_DWORD *)a3 = v26;
        *(_DWORD *)(a3 + 4) = v27;
LABEL_37:
        *(_QWORD *)(a3 + 8) = v28;
        *(_DWORD *)(a3 + 16) = v29;
        *(_DWORD *)(a3 + 20) = v30;
        return;
      }
    }
    *(_QWORD *)&buf = __PAIR64__(v27, v26);
    *((_QWORD *)&buf + 1) = v28;
    v51 = __PAIR64__(v30, v29);
    sub_2341083CC((const char **)&buf, 1);
    sub_2341147D0(9u, 1);
    goto LABEL_36;
  }
  if ((_DWORD)buf != 202)
  {
    *(_DWORD *)a3 = buf;
    *(_DWORD *)(a3 + 4) = v7;
    *(_QWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a3 + 16) = v11;
    *(_DWORD *)(a3 + 20) = v10;
    return;
  }
  *(_WORD *)v45 = 0;
  v12 = *(_QWORD *)(a1 + 9104);
  v47 = 0;
  v49 = 0xFFFC00000046;
  v48 = 0;
  sub_234100364(v12, &v47, v45, (uint64_t)&buf);
  v13 = DWORD1(buf);
  v14 = *((_QWORD *)&buf + 1);
  v16 = v51;
  v15 = HIDWORD(v51);
  if ((_DWORD)buf)
  {
    *(_DWORD *)a3 = buf;
    *(_DWORD *)(a3 + 4) = v13;
    *(_QWORD *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 16) = v16;
    *(_DWORD *)(a3 + 20) = v15;
    return;
  }
  if (v45[0] == 195)
  {
    *(_BYTE *)(a2 + 56) = 0;
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v13;
    *(_QWORD *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 16) = v16;
    *(_DWORD *)(a3 + 20) = v15;
LABEL_40:
    *(_DWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    goto LABEL_23;
  }
  sub_23411E5CC(v45, (uint64_t)&buf);
  v36 = *((_QWORD *)&buf + 1);
  v37 = buf;
  v38 = v51;
  *(_QWORD *)a3 = buf;
  *(_QWORD *)(a3 + 8) = v36;
  *(_QWORD *)(a3 + 16) = v38;
  if (!v37)
    goto LABEL_40;
}

void sub_234237340(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[4];
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = -1;
  v18 = 0;
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received ArmFailSafe response errorCode=%u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*a2)
  {
    LOBYTE(v16) = *a2;
    v15 = 7;
    v6 = 2599;
    v7 = 172;
  }
  else
  {
    v7 = 0;
    v6 = 2594;
  }
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = v6;
  v10 = 0;
  sub_23423ECD4((uint64_t)v11, (uint64_t)&v15);
  v12[72] = v18;
  sub_23422EEF4(a1, &v8, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  if (v15 == 4)
  {
    v16 = &unk_2505174E0;
    sub_2341CD754(&v17);
  }
}

void sub_2342374D0(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[4];
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = -1;
  v18 = 0;
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received SetRegulatoryConfig response errorCode=%u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*a2)
  {
    LOBYTE(v16) = *a2;
    v15 = 7;
    v6 = 2616;
    v7 = 172;
  }
  else
  {
    v7 = 0;
    v6 = 2611;
  }
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = v6;
  v10 = 0;
  sub_23423ECD4((uint64_t)v11, (uint64_t)&v15);
  v12[72] = v18;
  sub_23422EEF4(a1, &v8, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  if (v15 == 4)
  {
    v16 = &unk_2505174E0;
    sub_2341CD754(&v17);
  }
}

void sub_234237660(uint64_t a1, _BYTE *a2)
{
  _QWORD v3[4];
  _BYTE v4[80];
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  LOBYTE(v6) = *a2;
  v5 = 9;
  sub_23423ECD4((uint64_t)v3, (uint64_t)&v5);
  v4[72] = v8;
  sub_23422EEF4(a1, &xmmword_250518048, (uint64_t)v3);
  if (v3[0] == 4)
  {
    v3[1] = &unk_2505174E0;
    sub_2341CD754(v4);
  }
  if (v5 == 4)
  {
    v6 = &unk_2505174E0;
    sub_2341CD754(&v7);
  }
}

void sub_23423773C(uint64_t a1)
{
  __int128 v1;
  int v2;
  _QWORD v3[4];
  _BYTE v4[80];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  LODWORD(v1) = 0;
  *((_QWORD *)&v1 + 1) = "src/controller/CHIPDeviceController.cpp";
  v2 = 2639;
  v3[0] = -1;
  v4[72] = 0;
  sub_23422EEF4(a1, &v1, (uint64_t)v3);
  if (v3[0] == 4)
  {
    v3[1] = &unk_2505174E0;
    sub_2341CD754(v4);
  }
}

uint64_t sub_2342377E0(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  char *v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *a2;
    v14 = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received ScanNetworks failure response %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *a2;
    v14 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  LODWORD(v9) = 0;
  *((_QWORD *)&v9 + 1) = "src/controller/CHIPDeviceController.cpp";
  v10 = 2650;
  v11[0] = -1;
  v12[72] = 0;
  sub_23422EEF4(a1, &v9, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  result = *(_QWORD *)(a1 + 4320);
  if (result)
  {
    v7 = *a2;
    v8 = *((_QWORD *)a2 + 2);
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)result + 96))(result, &v7);
  }
  return result;
}

uint64_t sub_234237970(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  void *v6;
  _BYTE *v7;
  void **v8;
  void *v9;
  _BYTE *v10;
  uint64_t result;
  __int128 v12;
  int v13;
  void *__p[2];
  char v15;
  _QWORD v16[4];
  _BYTE v17[80];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    if (a2[8])
    {
      v6 = *(void **)sub_233C05DB8(a2 + 8);
      v7 = sub_233C05DB8(a2 + 8);
      sub_2341C8518(__p, v6, *((_QWORD *)v7 + 1));
      if (v15 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v19 = v5;
      v20 = 2080;
      v21 = (const char *)v8;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received ScanNetwork response, networkingStatus=%u debugText=%s", buf, 0x12u);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 67109378;
      v19 = v5;
      v20 = 2080;
      v21 = "none provided";
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received ScanNetwork response, networkingStatus=%u debugText=%s", buf, 0x12u);
    }
  }
  if (sub_234114844(2u))
  {
    if (a2[8])
    {
      v9 = *(void **)sub_233C05DB8(a2 + 8);
      v10 = sub_233C05DB8(a2 + 8);
      sub_2341C8518(__p, v9, *((_QWORD *)v10 + 1));
      sub_2341147D0(9u, 2);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    else
    {
      sub_2341147D0(9u, 2);
    }
  }
  LODWORD(v12) = 0;
  *((_QWORD *)&v12 + 1) = "src/controller/CHIPDeviceController.cpp";
  v13 = 2670;
  v16[0] = -1;
  v17[72] = 0;
  sub_23422EEF4(a1, &v12, (uint64_t)v16);
  if (v16[0] == 4)
  {
    v16[1] = &unk_2505174E0;
    sub_2341CD754(v17);
  }
  result = *(_QWORD *)(a1 + 4320);
  if (result)
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)result + 88))(result, a2);
  return result;
}

void sub_234237BF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  int v6;
  _QWORD v7[4];
  _BYTE v8[80];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 4344) == 36)
  {
    LODWORD(v5) = 0;
    *((_QWORD *)&v5 + 1) = "src/controller/CHIPDeviceController.cpp";
    v6 = 2683;
    v7[0] = -1;
    v8[72] = 0;
    sub_23422EEF4(a1, &v5, (uint64_t)v7);
    if (v7[0] == 4)
    {
      v7[1] = &unk_2505174E0;
      sub_2341CD754(v8);
    }
    v3 = 0;
    v4 = 2685;
  }
  else
  {
    v4 = 2680;
    v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a2 + 16) = v4;
}

void sub_234237CD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  int v6;
  _QWORD v7[4];
  _BYTE v8[80];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 4344) == 21)
  {
    LODWORD(v5) = 0;
    *((_QWORD *)&v5 + 1) = "src/controller/CHIPDeviceController.cpp";
    v6 = 2693;
    v7[0] = -1;
    v8[72] = 0;
    sub_23422EEF4(a1, &v5, (uint64_t)v7);
    if (v7[0] == 4)
    {
      v7[1] = &unk_2505174E0;
      sub_2341CD754(v8);
    }
    v3 = 0;
    v4 = 2695;
  }
  else
  {
    v4 = 2690;
    v3 = 3;
  }
  *(_DWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = "src/controller/CHIPDeviceController.cpp";
  *(_DWORD *)(a2 + 16) = v4;
}

void sub_234237DB8(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[4];
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = -1;
  v18 = 0;
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received NetworkConfig response, networkingStatus=%u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*a2)
  {
    LOBYTE(v16) = *a2;
    v15 = 8;
    v6 = 2707;
    v7 = 172;
  }
  else
  {
    v7 = 0;
    v6 = 2702;
  }
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = v6;
  v10 = 0;
  sub_23423ECD4((uint64_t)v11, (uint64_t)&v15);
  v12[72] = v18;
  sub_23422EEF4(a1, &v8, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  if (v15 == 4)
  {
    v16 = &unk_2505174E0;
    sub_2341CD754(&v17);
  }
}

void sub_234237F48(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[4];
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = -1;
  v18 = 0;
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received ConnectNetwork response, networkingStatus=%u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*a2)
  {
    LOBYTE(v16) = *a2;
    v15 = 8;
    v6 = 2723;
    v7 = 172;
  }
  else
  {
    v7 = 0;
    v6 = 2718;
  }
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = v6;
  v10 = 0;
  sub_23423ECD4((uint64_t)v11, (uint64_t)&v15);
  v12[72] = v18;
  sub_23422EEF4(a1, &v8, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  if (v15 == 4)
  {
    v16 = &unk_2505174E0;
    sub_2341CD754(&v17);
  }
}

void sub_2342380D8(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  __int128 v8;
  int v9;
  int v10;
  _QWORD v11[4];
  _BYTE v12[80];
  uint8_t buf[4];
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = -1;
  v18 = 0;
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    v14 = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received CommissioningComplete response, errorCode=%u", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  if (*a2)
  {
    LOBYTE(v16) = *a2;
    v15 = 7;
    v6 = 2739;
    v7 = 172;
  }
  else
  {
    v7 = 0;
    v6 = 2734;
  }
  *(_QWORD *)&v8 = v7;
  *((_QWORD *)&v8 + 1) = "src/controller/CHIPDeviceController.cpp";
  v9 = v6;
  v10 = 0;
  sub_23423ECD4((uint64_t)v11, (uint64_t)&v15);
  v12[72] = v18;
  sub_23422EEF4(a1, &v8, (uint64_t)v11);
  if (v11[0] == 4)
  {
    v11[1] = &unk_2505174E0;
    sub_2341CD754(v12);
  }
  if (v15 == 4)
  {
    v16 = &unk_2505174E0;
    sub_2341CD754(&v17);
  }
}

uint64_t sub_234238268(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t *v11;
  void (***v12)(_QWORD);
  uint64_t v13;
  void (***v14)(_QWORD);
  void (***v15)(_QWORD);
  NSObject *v16;
  char *v17;
  void (***v19)(_QWORD);
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  char v31;
  __int16 v32;
  _QWORD v33[4];
  _BYTE v34[80];
  uint8_t buf[16];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 9112))
    sub_2342614E4(a1);
  v10 = sub_2341FF930();
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(buf, a2);
  v11 = (uint64_t *)sub_233C25EA4(buf);
  v24[2] = 0;
  v24[0] = &off_250514968;
  v24[1] = 0;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 1;
  sub_2341CDA90(v24, v11);
  if (buf[0])
    (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
  LOBYTE(v32) = 0;
  if (*a3)
    LODWORD(v30) = *(_DWORD *)sub_234122C20(a3);
  *(_QWORD *)&v27 = a4;
  *((_QWORD *)&v27 + 1) = a5;
  v12 = *(void (****)(_QWORD))(a1 + 9104);
  *(_QWORD *)(a1 + 9104) = 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v14 = (void (***)(_QWORD))sub_234114774(0x158uLL);
  v15 = v14;
  if (v14)
    sub_23420D650(v14, v10, v13, v12 + 22, 0);
  v22 = 0uLL;
  v23 = 0;
  sub_23420DF14((uint64_t)v15, (uint64_t)v24, (uint64_t)&v22);
  if ((_DWORD)v22)
  {
    v16 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v22;
      v36 = v23;
      v17 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_ERROR, "Failed to send read request: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v22;
      v36 = v23;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(9u, 1);
    }
    v20 = v22;
    v21 = v23;
    v33[0] = -1;
    v34[72] = 0;
    sub_23422EEF4(a1, &v20, (uint64_t)v33);
    if (v33[0] == 4)
    {
      v33[1] = &unk_2505174E0;
      sub_2341CD754(v34);
    }
    if (v15)
    {
      (**v15)(v15);
      j__free(v15);
    }
    if (v12)
    {
LABEL_18:
      (**v12)(v12);
      j__free(v12);
    }
  }
  else
  {
    v19 = *(void (****)(_QWORD))(a1 + 9104);
    *(_QWORD *)(a1 + 9104) = v12;
    if (v19)
    {
      (**v19)(v19);
      j__free(v19);
    }
    v12 = *(void (****)(_QWORD))(a1 + 9112);
    *(_QWORD *)(a1 + 9112) = v15;
    if (v12)
      goto LABEL_18;
  }
  return sub_2341CD754(v24);
}

void sub_23423856C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  _OWORD *v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void (***v27)(_QWORD);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  _BYTE *v38;
  char v39;
  NSObject *v40;
  char *v41;
  _QWORD *v42;
  NSObject *v43;
  NSObject *v44;
  char *v45;
  NSObject *v46;
  char v47;
  _BYTE *v48;
  NSObject *v49;
  char *v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  _BYTE *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  char *v63;
  _BYTE *v64;
  char v65;
  NSObject *v66;
  char *v67;
  NSObject *v68;
  char *v69;
  char v70;
  __int128 v71;
  NSObject *v72;
  char *v73;
  NSObject *v74;
  char *v75;
  NSObject *v76;
  const char *v77;
  _BYTE *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  NSObject *v83;
  NSObject *v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  char *v88;
  __int16 *v89;
  char v90;
  uint64_t *v91;
  NSObject *v92;
  char *v93;
  char v94;
  uint64_t *v95;
  NSObject *v96;
  char *v97;
  NSObject *v98;
  NSObject *v99;
  char *v100;
  char v101;
  _BYTE *v102;
  NSObject *v103;
  char *v104;
  char v105;
  __int128 v106;
  _BYTE *v107;
  __int128 v108;
  _BYTE *v109;
  uint64_t *v110;
  _BYTE *v111;
  NSObject *v112;
  char v113;
  __int128 v114;
  _BYTE *v115;
  __int128 v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t *v119;
  _BYTE *v120;
  _BYTE *v121;
  NSObject *v122;
  NSObject *v123;
  char v124;
  _BYTE *v125;
  NSObject *v126;
  char *v127;
  _QWORD *v128;
  NSObject *v129;
  char *v130;
  _BYTE *v131;
  NSObject *v132;
  char *v133;
  NSObject *v134;
  _BYTE *v135;
  uint64_t *v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  _BYTE *v142;
  __int16 v143;
  __int16 v144;
  NSObject *v145;
  _BYTE *v146;
  uint64_t *v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE *v153;
  __int16 v154;
  __int16 v155;
  NSObject *v156;
  NSObject *v157;
  NSObject *v158;
  NSObject *v159;
  NSObject *v160;
  _BYTE *v161;
  _BYTE *v162;
  NSObject *v163;
  int64x2_t v164;
  NSObject *v165;
  NSObject *v166;
  NSObject *v167;
  NSObject *v168;
  NSObject *v169;
  NSObject *v170;
  NSObject *v171;
  NSObject *v172;
  char *v173;
  NSObject *v174;
  NSObject *v175;
  NSObject *v176;
  unsigned int v177;
  _BOOL8 v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  NSObject *v183;
  char *v184;
  NSObject *v185;
  char *v186;
  NSObject *v187;
  int v188;
  NSObject *v189;
  char *v190;
  _QWORD *v191;
  NSObject *v192;
  char *v193;
  NSObject *v194;
  NSObject *v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  char v199[4];
  int v200;
  __int128 v201;
  uint64_t v202;
  char v203[4];
  int v204;
  __int128 v205;
  int v206;
  __int128 v207;
  uint64_t v208;
  __int128 v209;
  int v210;
  __int128 v211;
  uint64_t v212;
  char v213[4];
  int v214;
  __int128 v215;
  int v216;
  __int128 v217;
  uint64_t v218;
  char v219[4];
  int v220;
  __int128 v221;
  int v222;
  int v223;
  __int128 v224;
  int v225;
  char v226[4];
  int v227;
  __int128 v228;
  int v229;
  __int128 v230;
  uint64_t v231;
  char v232[4];
  int v233;
  __int128 v234;
  int v235;
  __int128 v236;
  uint64_t v237;
  char v238[4];
  int v239;
  __int128 v240;
  int v241;
  __int128 v242;
  uint64_t v243;
  char v244[4];
  int v245;
  __int128 v246;
  int v247;
  __int128 v248;
  uint64_t v249;
  char v250[4];
  int v251;
  __int128 v252;
  int v253;
  __int128 v254;
  int v255;
  __int128 v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  char v260[4];
  int v261;
  __int128 v262;
  int v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  int v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  int v271;
  __int128 v272;
  uint64_t v273;
  char v274[4];
  int v275;
  __int128 v276;
  int v277;
  __int128 v278;
  int v279;
  __int128 v280;
  int v281;
  __int128 v282;
  int v283;
  _BYTE v284[2];
  __int16 v285;
  _BYTE v286[2];
  __int16 v287;
  _BYTE v288[8];
  __int128 v289;
  _BYTE v290[24];
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  int v294;
  __int128 v295;
  uint64_t v296;
  char v297[4];
  int v298;
  __int128 v299;
  int v300;
  __int128 v301;
  uint64_t v302;
  char v303[4];
  int v304;
  __int128 v305;
  uint64_t v306;
  char v307[4];
  int v308;
  __int128 v309;
  uint64_t v310;
  char v311[4];
  int v312;
  _BYTE v313[24];
  __int128 v314;
  uint64_t v315;
  char v316[4];
  int v317;
  __int128 v318;
  uint64_t v319;
  char v320[4];
  int v321;
  __int128 v322;
  int v323;
  __int128 v324;
  uint64_t v325;
  char v326[4];
  int v327;
  __int128 v328;
  int v329;
  __int128 v330;
  uint64_t v331;
  char v332[4];
  int v333;
  __int128 v334;
  int v335;
  __int128 v336;
  uint64_t v337;
  char v338[4];
  int v339;
  __int128 v340;
  int v341;
  char v342;
  int v343;
  char v344;
  int v345;
  char v346[4];
  int v347;
  _QWORD v348[13];
  char v349;
  _QWORD v350[13];
  char v351;
  _QWORD v352[13];
  char v353;
  _QWORD v354[13];
  char v355;
  _QWORD v356[13];
  char v357;
  _QWORD v358[13];
  char v359;
  _QWORD v360[13];
  char v361;
  _QWORD v362[13];
  char v363;
  _QWORD v364[13];
  char v365;
  _BYTE buf[96];
  uint64_t v367;
  __int16 v368;
  __int16 v369;
  char v370;
  _QWORD v371[13];
  char v372;
  _QWORD v373[13];
  char v374;
  _QWORD v375[13];
  char v376;
  _QWORD v377[13];
  char v378;
  _QWORD v379[13];
  char v380;
  _QWORD v381[13];
  char v382;
  _QWORD v383[13];
  char v384;
  _QWORD v385[13];
  char v386;
  _QWORD v387[13];
  char v388;
  _QWORD v389[13];
  char v390;
  _QWORD v391[13];
  char v392;
  _QWORD v393[13];
  char v394;
  _QWORD v395[13];
  char v396;
  _QWORD v397[13];
  char v398;
  _QWORD v399[13];
  char v400;
  _QWORD v401[13];
  char v402;
  _QWORD v403[13];
  char v404;
  _QWORD v405[13];
  char v406;
  _QWORD v407[13];
  char v408;
  _QWORD v409[13];
  char v410;
  _QWORD v411[13];
  char v412;
  _QWORD v413[13];
  char v414;
  _QWORD v415[13];
  char v416;
  _QWORD v417[13];
  char v418;
  _QWORD v419[13];
  char v420;
  _QWORD v421[13];
  char v422;
  _QWORD v423[13];
  char v424;
  _QWORD v425[13];
  char v426;
  _QWORD v427[13];
  char v428;
  _QWORD v429[13];
  char v430;
  _BYTE v431[24];
  __int128 v432;
  _QWORD v433[13];
  char v434;
  _QWORD v435[13];
  char v436;
  _QWORD v437[13];
  char v438;
  _QWORD v439[13];
  char v440;
  _QWORD v441[13];
  char v442;
  _QWORD v443[13];
  char v444;
  _QWORD v445[13];
  char v446;
  _QWORD v447[13];
  char v448;
  uint8_t v449[24];
  uint64_t v450;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v196 = v0;
  v450 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)buf = 2;
  *(_QWORD *)&buf[8] = "core_dcm_commission_stage";
  *(_DWORD *)&buf[16] = v9;
  buf[20] = 2;
  sub_2341C4BEC((uint64_t)buf);
  v13 = sub_234226DFC(v10);
  *(_DWORD *)buf = 0;
  *(_QWORD *)&buf[8] = v13;
  buf[20] = 0;
  sub_2341C4BEC((uint64_t)buf);
  v14 = (_OWORD *)(v8 + 544);
  v15 = *(_DWORD *)(v8 + 544);
  v16 = sub_234117B80(9u, "Controller");
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v17)
    {
      v18 = sub_234226DD4(v10);
      *(_OWORD *)buf = *v14;
      *(_QWORD *)&buf[16] = *(_QWORD *)(v8 + 560);
      v19 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Performing next commissioning step '%s' with completion status = '%s'", buf, 0x16u);
    }
    v20 = sub_234114844(2u);
    if (!(_DWORD)v20)
      goto LABEL_11;
    sub_234226DD4(v10);
    *(_OWORD *)buf = *v14;
    *(_QWORD *)&buf[16] = *(_QWORD *)(v8 + 560);
    sub_2341083CC((const char **)buf, 1);
  }
  else
  {
    if (v17)
    {
      v21 = sub_234226DD4(v10);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl(&dword_233BF3000, v16, OS_LOG_TYPE_DEFAULT, "Performing next commissioning step '%s'", buf, 0xCu);
    }
    v20 = sub_234114844(2u);
    if (!(_DWORD)v20)
      goto LABEL_11;
    sub_234226DD4(v10);
  }
  v20 = sub_2341147D0(9u, 2);
LABEL_11:
  *(_BYTE *)(v196 + 4344) = v10;
  *(_QWORD *)(v196 + 9056) = v6;
  *(_QWORD *)(v196 + 4328) = v12;
  v22 = v10;
  switch(v10)
  {
    case 0u:
      *(_BYTE *)(v196 + 4344) = 1;
      return;
    case 2u:
      v25 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v25, OS_LOG_TYPE_DEFAULT, "Sending read request for commissioning information", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      v26 = (uint64_t)sub_234114774(0x100uLL);
      if (v26)
      {
        buf[0] = 0;
        v26 = sub_233CF284C(v26, v196 + 4304, buf);
      }
      v27 = *(void (****)(_QWORD))(v196 + 9104);
      *(_QWORD *)(v196 + 9104) = v26;
      if (v27)
      {
        (**v27)(v27);
        j__free(v27);
      }
      *(_QWORD *)buf = 0xFFFC00000031;
      *(_DWORD *)&buf[8] = -1;
      *(_QWORD *)&buf[12] = 48;
      *(_WORD *)&buf[20] = v4;
      *(_WORD *)&buf[22] = -1;
      *(_QWORD *)&buf[24] = 0x100000030;
      *(_WORD *)&buf[32] = v4;
      *(_WORD *)&buf[34] = -1;
      *(_QWORD *)&buf[36] = 0x200000030;
      *(_WORD *)&buf[44] = v4;
      *(_WORD *)&buf[46] = -1;
      *(_QWORD *)&buf[48] = 0x300000030;
      *(_WORD *)&buf[56] = v4;
      *(_WORD *)&buf[58] = -1;
      *(_QWORD *)&buf[60] = 0x200000028;
      *(_WORD *)&buf[68] = v4;
      *(_WORD *)&buf[70] = -1;
      *(_QWORD *)&buf[72] = 0x400000028;
      *(_WORD *)&buf[80] = v4;
      *(_WORD *)&buf[82] = -1;
      *(_QWORD *)&buf[84] = 0x300000031;
      *(_DWORD *)&buf[92] = -1;
      v367 = -4294967240;
      v368 = v4;
      v369 = -1;
      v344 = *(_BYTE *)v2;
      if (v344)
        v345 = *(_DWORD *)(v2 + 4);
      v28 = &v344;
      v29 = v196;
      v30 = (uint64_t)v12;
      v31 = 9;
      goto LABEL_407;
    case 3u:
      *(_DWORD *)&buf[92] = -1;
      *(_QWORD *)&v32 = -1;
      *((_QWORD *)&v32 + 1) = -1;
      *(_OWORD *)&buf[76] = v32;
      *(_OWORD *)&buf[60] = v32;
      *(_OWORD *)&buf[44] = v32;
      *(_OWORD *)&buf[28] = v32;
      *(_OWORD *)&buf[12] = v32;
      *(_QWORD *)buf = 0x400000030;
      *(_WORD *)&buf[8] = v4;
      *(_WORD *)&buf[10] = -1;
      if (*(_BYTE *)(v8 + 669))
      {
        *(_QWORD *)&buf[12] = 0x10000003ELL;
        *(_WORD *)&buf[22] = -1;
        v33 = 2;
      }
      else
      {
        v33 = 1;
      }
      if (*(_BYTE *)(v8 + 668))
      {
        v161 = &buf[12 * v33++];
        *(_QWORD *)v161 = 0xFFFC00000046;
        *((_WORD *)v161 + 4) = v4;
        *((_WORD *)v161 + 5) = -1;
      }
      v29 = v196;
      v162 = &buf[12 * v33];
      *(_QWORD *)v162 = 0x600000046;
      *((_WORD *)v162 + 4) = v4;
      *((_WORD *)v162 + 5) = -1;
      *(_QWORD *)(v162 + 12) = 0x700000046;
      *((_WORD *)v162 + 10) = v4;
      *((_WORD *)v162 + 11) = -1;
      *((_QWORD *)v162 + 3) = 70;
      *((_WORD *)v162 + 16) = v4;
      *((_WORD *)v162 + 17) = -1;
      *(_QWORD *)(v162 + 36) = 0x100000046;
      *((_WORD *)v162 + 22) = v4;
      *((_WORD *)v162 + 23) = -1;
      v31 = v33 + 5;
      *((_QWORD *)v162 + 6) = 0x200000046;
      *((_WORD *)v162 + 28) = v4;
      *((_WORD *)v162 + 29) = -1;
      v342 = *(_BYTE *)v2;
      if (v342)
        v343 = *(_DWORD *)(v2 + 4);
      v28 = &v342;
      v30 = (uint64_t)v12;
LABEL_407:
      sub_234238268(v29, v30, v28, (uint64_t)buf, v31);
      return;
    case 4u:
      if (v4)
        sub_23426160C(v20);
      v12[1] = 0;
      buf[0] = *(_BYTE *)v8;
      if (buf[0])
      {
        *(_WORD *)&buf[2] = *(_WORD *)(v8 + 2);
        v89 = (__int16 *)sub_233C05D98(buf);
      }
      else
      {
        v89 = &word_2342EF956;
      }
      v177 = (unsigned __int16)*v89;
      v346[0] = *(_BYTE *)v2;
      if (v346[0])
        v347 = *(_DWORD *)(v2 + 4);
      v178 = sub_234231468(v196, (uint64_t)v12, 4u, v177, v346, (uint64_t)sub_234237340, (void (*)(uint64_t, __int128 *))sub_2342344D8, 0);
      if (!v178)
        sub_234261578(v178);
      return;
    case 5u:
      v34 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v34, OS_LOG_TYPE_DEFAULT, "Setting Regulatory Config", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      buf[0] = *(_BYTE *)(v8 + 538);
      if (!buf[0])
      {
        LOBYTE(v35) = 1;
LABEL_409:
        v163 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v163, OS_LOG_TYPE_DEFAULT, "Device does not support configurable regulatory location", buf, 2u);
        }
        if (sub_234114844(2u))
          goto LABEL_412;
        goto LABEL_413;
      }
      buf[1] = *(_BYTE *)(v8 + 539);
      v35 = *sub_234220C24(buf);
      if (v35 != 2)
        goto LABEL_409;
      if (*(_BYTE *)(v8 + 8))
      {
        buf[0] = *(_BYTE *)(v8 + 8);
        buf[1] = *(_BYTE *)(v8 + 9);
        v35 = *sub_234220C24(buf);
        v36 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v35;
          _os_log_impl(&dword_233BF3000, v36, OS_LOG_TYPE_DEFAULT, "Setting regulatory config to %u from commissioner override", buf, 8u);
        }
        if (sub_234114844(2u))
LABEL_412:
          sub_2341147D0(9u, 2);
      }
      else if (*(_BYTE *)(v8 + 536))
      {
        buf[0] = *(_BYTE *)(v8 + 536);
        buf[1] = *(_BYTE *)(v8 + 537);
        v35 = *sub_234220C24(buf);
        v187 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v35;
          _os_log_impl(&dword_233BF3000, v187, OS_LOG_TYPE_DEFAULT, "No regulatory config supplied by controller, leaving as device default (%u)", buf, 8u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(9u, 2);
      }
      else
      {
        v195 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v195, OS_LOG_TYPE_DEFAULT, "No overrride or device regulatory config supplied, setting to outdoor", buf, 2u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(9u, 2);
        LOBYTE(v35) = 1;
      }
LABEL_413:
      v449[0] = *(_BYTE *)(v8 + 216);
      if (v449[0])
      {
        *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 224);
        v164 = *(int64x2_t *)sub_233C05DB8(v449);
      }
      else
      {
        v164 = vdupq_n_s64(2uLL);
        v164.i64[0] = (uint64_t)"XX";
      }
      buf[0] = v35;
      *(int64x2_t *)&buf[8] = v164;
      *(_QWORD *)&buf[24] = v22;
      memset(v313, 0, sizeof(v313));
      v311[0] = *(_BYTE *)v2;
      if (v311[0])
        v312 = *(_DWORD *)(v2 + 4);
      sub_23423D7C4(v196, (uint64_t)v12, (uint64_t)buf, (uint64_t)sub_2342374D0, (uint64_t)sub_2342344D8, v4, (uint64_t)v311, 0, (uint64_t)v313);
      if (*(_DWORD *)v313)
      {
        v172 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
        {
          *(_OWORD *)v431 = *(_OWORD *)v313;
          *(_QWORD *)&v431[16] = *(_QWORD *)&v313[16];
          v173 = sub_2341083CC((const char **)v431, 1);
          *(_DWORD *)v431 = 136315138;
          *(_QWORD *)&v431[4] = v173;
          _os_log_impl(&dword_233BF3000, v172, OS_LOG_TYPE_ERROR, "Failed to send SetRegulatoryConfig command: %s", v431, 0xCu);
        }
        if (sub_234114844(1u))
        {
          *(_OWORD *)v431 = *(_OWORD *)v313;
          *(_QWORD *)&v431[16] = *(_QWORD *)&v313[16];
          sub_2341083CC((const char **)v431, 1);
          sub_2341147D0(9u, 1);
        }
        v309 = *(_OWORD *)v313;
        v310 = *(_QWORD *)&v313[16];
        v427[0] = -1;
        v428 = 0;
        v42 = v427;
        sub_23422EEF4(v196, &v309, (uint64_t)v427);
        if (v427[0] == 4)
        {
          v427[1] = &unk_2505174E0;
LABEL_534:
          v191 = v42 + 4;
LABEL_535:
          sub_2341CD754(v191);
        }
      }
      return;
    case 6u:
      v449[9] = 0;
      (*((void (**)(_QWORD *@<X1>, uint64_t@<X8>))*off_256157A10 + 5))(v313, (uint64_t)buf);
      if (*(_DWORD *)buf)
      {
        v37 = v196;
      }
      else
      {
        v37 = v196;
        if (*(_QWORD *)v313 >= 0x35D013B37E001uLL)
        {
          *(_QWORD *)v449 = *(_QWORD *)v313 - 946684800000000;
          v449[8] = 2;
          memset(v431, 0, sizeof(v431));
          v338[0] = *(_BYTE *)v2;
          if (v338[0])
            v339 = *(_DWORD *)(v2 + 4);
          sub_23423CF04(v196, (uint64_t)v12, (uint64_t)v449, (uint64_t)sub_234234390, (uint64_t)sub_23423773C, v4, (uint64_t)v338, 0, (uint64_t)v431);
          if (*(_DWORD *)v431)
          {
            v185 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = *(_OWORD *)v431;
              *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
              v186 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v186;
              _os_log_impl(&dword_233BF3000, v185, OS_LOG_TYPE_ERROR, "Failed to send SetUTCTime command: %s", buf, 0xCu);
            }
            if (sub_234114844(1u))
            {
              *(_OWORD *)buf = *(_OWORD *)v431;
              *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
              sub_2341083CC((const char **)buf, 1);
              sub_2341147D0(9u, 1);
            }
            v336 = *(_OWORD *)v431;
            v337 = *(_QWORD *)&v431[16];
            v445[0] = -1;
            v446 = 0;
            v42 = v445;
            sub_23422EEF4(v196, &v336, (uint64_t)v445);
            if (v445[0] == 4)
            {
              v445[1] = &unk_2505174E0;
              goto LABEL_534;
            }
          }
          return;
        }
      }
      LODWORD(v340) = 0;
      *((_QWORD *)&v340 + 1) = "src/controller/CHIPDeviceController.cpp";
      v341 = 2937;
      v447[0] = -1;
      v448 = 0;
      v42 = v447;
      sub_23422EEF4(v37, &v340, (uint64_t)v447);
      if (v447[0] != 4)
        return;
      v447[1] = &unk_2505174E0;
      goto LABEL_534;
    case 7u:
      v90 = *(_BYTE *)(v8 + 16);
      if (v90)
      {
        *(_QWORD *)v449 = 0;
        *(_QWORD *)&v449[8] = 0;
        buf[0] = v90;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 24);
        v91 = (uint64_t *)sub_2342206D0(buf);
        sub_233CAF22C(v449, *v91, v91[1]);
        memset(v431, 0, sizeof(v431));
        v332[0] = *(_BYTE *)v2;
        if (v332[0])
          v333 = *(_DWORD *)(v2 + 4);
        sub_23423D0C4(v196, (uint64_t)v12, (uint64_t)v449, (uint64_t)sub_234237660, (uint64_t)sub_2342344D8, v4, (uint64_t)v332, 0, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v92 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v93 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v93;
            _os_log_impl(&dword_233BF3000, v92, OS_LOG_TYPE_ERROR, "Failed to send SetTimeZone command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v330 = *(_OWORD *)v431;
          v331 = *(_QWORD *)&v431[16];
          v441[0] = -1;
          v442 = 0;
          v42 = v441;
          sub_23422EEF4(v196, &v330, (uint64_t)v441);
          if (v441[0] == 4)
          {
            v441[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v174 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v174, OS_LOG_TYPE_ERROR, "ConfigureTimeZone stage called with no time zone data", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v334) = 47;
        *((_QWORD *)&v334 + 1) = "src/controller/CHIPDeviceController.cpp";
        v335 = 2958;
        v443[0] = -1;
        v444 = 0;
        v42 = v443;
        sub_23422EEF4(v196, &v334, (uint64_t)v443);
        if (v443[0] == 4)
        {
          v443[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 8u:
      v94 = *(_BYTE *)(v8 + 40);
      if (v94)
      {
        *(_QWORD *)v449 = 0;
        *(_QWORD *)&v449[8] = 0;
        buf[0] = v94;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 48);
        v95 = (uint64_t *)sub_2342206D0(buf);
        sub_233CAF22C(v449, *v95, v95[1]);
        memset(v431, 0, sizeof(v431));
        v326[0] = *(_BYTE *)v2;
        if (v326[0])
          v327 = *(_DWORD *)(v2 + 4);
        sub_23423D284(v196, (uint64_t)v12, (uint64_t)v449, (uint64_t)sub_234234390, (uint64_t)sub_2342344D8, v4, (uint64_t)v326, 0, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v96 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v97 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v97;
            _os_log_impl(&dword_233BF3000, v96, OS_LOG_TYPE_ERROR, "Failed to send SetDSTOffset command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v324 = *(_OWORD *)v431;
          v325 = *(_QWORD *)&v431[16];
          v437[0] = -1;
          v438 = 0;
          v42 = v437;
          sub_23422EEF4(v196, &v324, (uint64_t)v437);
          if (v437[0] == 4)
          {
            v437[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v175 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v175, OS_LOG_TYPE_ERROR, "ConfigureDSTOffset stage called with no DST data", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v328) = 47;
        *((_QWORD *)&v328 + 1) = "src/controller/CHIPDeviceController.cpp";
        v329 = 2977;
        v439[0] = -1;
        v440 = 0;
        v42 = v439;
        sub_23422EEF4(v196, &v328, (uint64_t)v439);
        if (v439[0] == 4)
        {
          v439[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 9u:
      if (*(_BYTE *)(v8 + 64))
      {
        buf[0] = *(_BYTE *)(v8 + 64);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 72);
        *(_QWORD *)&buf[24] = *(_QWORD *)(v8 + 88);
        v38 = sub_233C05DB8(buf);
        v39 = v38[16];
        *(_OWORD *)v431 = *(_OWORD *)v38;
        v431[16] = v39;
        memset(v449, 0, sizeof(v449));
        v320[0] = *(_BYTE *)v2;
        if (v320[0])
          v321 = *(_DWORD *)(v2 + 4);
        sub_23423D444(v196, (uint64_t)v12, (uint64_t)v431, (uint64_t)sub_234234390, (uint64_t)sub_2342344D8, v4, (uint64_t)v320, 0, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v40 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v449;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v449[16];
            v41 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v41;
            _os_log_impl(&dword_233BF3000, v40, OS_LOG_TYPE_ERROR, "Failed to send SetDefaultNTP command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v449;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v449[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v318 = *(_OWORD *)v449;
          v319 = *(_QWORD *)&v449[16];
          v433[0] = -1;
          v434 = 0;
          v42 = v433;
          sub_23422EEF4(v196, &v318, (uint64_t)v433);
          if (v433[0] == 4)
          {
            v433[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v165 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v165, OS_LOG_TYPE_ERROR, "ConfigureDefaultNTP stage called with no default NTP data", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v322) = 47;
        *((_QWORD *)&v322 + 1) = "src/controller/CHIPDeviceController.cpp";
        v323 = 2996;
        v435[0] = -1;
        v436 = 0;
        v42 = v435;
        sub_23422EEF4(v196, &v322, (uint64_t)v435);
        if (v435[0] == 4)
        {
          v435[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0xAu:
      v98 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v98, OS_LOG_TYPE_DEFAULT, "Sending request for PAI certificate", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      memset(v431, 0, sizeof(v431));
      v307[0] = *(_BYTE *)v2;
      if (v307[0])
        v308 = *(_DWORD *)(v2 + 4);
      sub_23422F9AC(v196, (uint64_t)v12, 2u, (uint64_t)v307, (uint64_t)v431);
      if (!*(_DWORD *)v431)
        return;
      v99 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        v100 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v100;
        _os_log_impl(&dword_233BF3000, v99, OS_LOG_TYPE_ERROR, "Failed to send CertificateChainRequest command to get PAI: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(9u, 1);
      }
      v305 = *(_OWORD *)v431;
      v306 = *(_QWORD *)&v431[16];
      v425[0] = -1;
      v426 = 0;
      v42 = v425;
      sub_23422EEF4(v196, &v305, (uint64_t)v425);
      if (v425[0] != 4)
        return;
      v425[1] = &unk_2505174E0;
      goto LABEL_534;
    case 0xBu:
      v43 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v43, OS_LOG_TYPE_DEFAULT, "Sending request for DAC certificate", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      memset(v431, 0, sizeof(v431));
      v303[0] = *(_BYTE *)v2;
      if (v303[0])
        v304 = *(_DWORD *)(v2 + 4);
      sub_23422F9AC(v196, (uint64_t)v12, 1u, (uint64_t)v303, (uint64_t)v431);
      if (!*(_DWORD *)v431)
        return;
      v44 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        v45 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v45;
        _os_log_impl(&dword_233BF3000, v44, OS_LOG_TYPE_ERROR, "Failed to send CertificateChainRequest command to get DAC: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(9u, 1);
      }
      v301 = *(_OWORD *)v431;
      v302 = *(_QWORD *)&v431[16];
      v423[0] = -1;
      v424 = 0;
      v42 = v423;
      sub_23422EEF4(v196, &v301, (uint64_t)v423);
      if (v423[0] != 4)
        return;
      v423[1] = &unk_2505174E0;
      goto LABEL_534;
    case 0xCu:
      v46 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v46, OS_LOG_TYPE_DEFAULT, "Sending Attestation Request to the device.", buf, 2u);
      }
      if (sub_234114844(2u))
        sub_2341147D0(9u, 2);
      v47 = *(_BYTE *)(v8 + 152);
      if (v47)
      {
        memset(v431, 0, sizeof(v431));
        buf[0] = v47;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 160);
        v48 = sub_233C05DB8(buf);
        v297[0] = *(_BYTE *)v2;
        if (v297[0])
          v298 = *(_DWORD *)(v2 + 4);
        sub_23423022C(v196, (uint64_t)v12, v48, (uint64_t)v297, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v49 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v50 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v50;
            _os_log_impl(&dword_233BF3000, v49, OS_LOG_TYPE_ERROR, "Failed to send AttestationRequest command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v295 = *(_OWORD *)v431;
          v296 = *(_QWORD *)&v431[16];
          v419[0] = -1;
          v420 = 0;
          v42 = v419;
          sub_23422EEF4(v196, &v295, (uint64_t)v419);
          if (v419[0] == 4)
          {
            v419[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v166 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v166, OS_LOG_TYPE_ERROR, "No attestation nonce found", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v299) = 47;
        *((_QWORD *)&v299 + 1) = "src/controller/CHIPDeviceController.cpp";
        v300 = 3126;
        v421[0] = -1;
        v422 = 0;
        v42 = v421;
        sub_23422EEF4(v196, &v299, (uint64_t)v421);
        if (v421[0] == 4)
        {
          v421[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0xDu:
      v51 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v51, OS_LOG_TYPE_DEFAULT, "Verifying attestation", buf, 2u);
      }
      v52 = sub_234114844(2u);
      if ((_DWORD)v52)
        v52 = sub_2341147D0(9u, 2);
      if (sub_23423D984(v52, (_BYTE *)v8))
      {
        v53 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v53, OS_LOG_TYPE_ERROR, "Missing attestation information", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v293) = 47;
        *((_QWORD *)&v293 + 1) = "src/controller/CHIPDeviceController.cpp";
        v294 = 3144;
        v417[0] = -1;
        v418 = 0;
        v42 = v417;
        sub_23422EEF4(v196, &v293, (uint64_t)v417);
        if (v417[0] == 4)
        {
          v417[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      else
      {
        v431[0] = *(_BYTE *)(v8 + 416);
        if (v431[0])
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 424);
        v135 = sub_233C05DB8(v431);
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v12 + 48))(&v291, v12);
        v136 = (uint64_t *)sub_233C25EA4(&v291);
        v137 = sub_2341CD3C0(*v136);
        v449[0] = *(_BYTE *)(v8 + 440);
        if (v449[0])
          *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 448);
        v138 = sub_233C05DB8(v449);
        v313[0] = *(_BYTE *)(v8 + 464);
        if (v313[0])
          *(_OWORD *)&v313[8] = *(_OWORD *)(v8 + 472);
        v139 = sub_233C05DB8(v313);
        v290[0] = *(_BYTE *)(v8 + 488);
        if (v290[0])
          *(_OWORD *)&v290[8] = *(_OWORD *)(v8 + 496);
        v140 = sub_233C05DB8(v290);
        v288[0] = *(_BYTE *)(v8 + 152);
        if (v288[0])
          v289 = *(_OWORD *)(v8 + 160);
        v141 = v137 + 208;
        v142 = sub_233C05DB8(v288);
        v286[0] = *(_BYTE *)(v8 + 528);
        if (v286[0])
          v287 = *(_WORD *)(v8 + 530);
        v143 = *(_WORD *)sub_233C05D98(v286);
        v284[0] = *(_BYTE *)(v8 + 532);
        if (v284[0])
          v285 = *(_WORD *)(v8 + 534);
        v144 = *(_WORD *)sub_233C05D98(v284);
        *(_OWORD *)buf = *(_OWORD *)v135;
        *(_QWORD *)&buf[16] = v141;
        *(_QWORD *)&buf[24] = 16;
        *(_OWORD *)&buf[32] = *(_OWORD *)v138;
        *(_OWORD *)&buf[48] = *(_OWORD *)v139;
        *(_OWORD *)&buf[64] = *(_OWORD *)v140;
        *(_OWORD *)&buf[80] = *(_OWORD *)v142;
        LOWORD(v367) = v143;
        WORD1(v367) = v144;
        if ((_BYTE)v291)
          (*(void (**)(uint64_t))(*(_QWORD *)v292 + 32))(v292);
        sub_2342318BC(v196, (uint64_t)buf, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v145 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v431 = 0;
            _os_log_impl(&dword_233BF3000, v145, OS_LOG_TYPE_ERROR, "Error validating attestation information", v431, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          LODWORD(v282) = 32;
          *((_QWORD *)&v282 + 1) = "src/controller/CHIPDeviceController.cpp";
          v283 = 3157;
          v415[0] = -1;
          v416 = 0;
          v42 = v415;
          sub_23422EEF4(v196, &v282, (uint64_t)v415);
          if (v415[0] == 4)
          {
            v415[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      return;
    case 0xEu:
      v54 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v54, OS_LOG_TYPE_DEFAULT, "Verifying device's DAC chain revocation status", buf, 2u);
      }
      v55 = sub_234114844(2u);
      if ((_DWORD)v55)
        v55 = sub_2341147D0(9u, 2);
      if (sub_23423D984(v55, (_BYTE *)v8))
      {
        v56 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v56, OS_LOG_TYPE_ERROR, "Missing attestation information", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v280) = 47;
        *((_QWORD *)&v280 + 1) = "src/controller/CHIPDeviceController.cpp";
        v281 = 3167;
        v413[0] = -1;
        v414 = 0;
        v42 = v413;
        sub_23422EEF4(v196, &v280, (uint64_t)v413);
        if (v413[0] == 4)
        {
          v413[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      else
      {
        v431[0] = *(_BYTE *)(v8 + 416);
        if (v431[0])
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 424);
        v146 = sub_233C05DB8(v431);
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v12 + 48))(&v291, v12);
        v147 = (uint64_t *)sub_233C25EA4(&v291);
        v148 = sub_2341CD3C0(*v147);
        v449[0] = *(_BYTE *)(v8 + 440);
        if (v449[0])
          *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 448);
        v149 = sub_233C05DB8(v449);
        v313[0] = *(_BYTE *)(v8 + 464);
        if (v313[0])
          *(_OWORD *)&v313[8] = *(_OWORD *)(v8 + 472);
        v150 = sub_233C05DB8(v313);
        v290[0] = *(_BYTE *)(v8 + 488);
        if (v290[0])
          *(_OWORD *)&v290[8] = *(_OWORD *)(v8 + 496);
        v151 = sub_233C05DB8(v290);
        v288[0] = *(_BYTE *)(v8 + 152);
        if (v288[0])
          v289 = *(_OWORD *)(v8 + 160);
        v152 = v148 + 208;
        v153 = sub_233C05DB8(v288);
        v286[0] = *(_BYTE *)(v8 + 528);
        if (v286[0])
          v287 = *(_WORD *)(v8 + 530);
        v154 = *(_WORD *)sub_233C05D98(v286);
        v284[0] = *(_BYTE *)(v8 + 532);
        if (v284[0])
          v285 = *(_WORD *)(v8 + 534);
        v155 = *(_WORD *)sub_233C05D98(v284);
        *(_OWORD *)buf = *(_OWORD *)v146;
        *(_QWORD *)&buf[16] = v152;
        *(_QWORD *)&buf[24] = 16;
        *(_OWORD *)&buf[32] = *(_OWORD *)v149;
        *(_OWORD *)&buf[48] = *(_OWORD *)v150;
        *(_OWORD *)&buf[64] = *(_OWORD *)v151;
        *(_OWORD *)&buf[80] = *(_OWORD *)v153;
        LOWORD(v367) = v154;
        WORD1(v367) = v155;
        if ((_BYTE)v291)
          (*(void (**)(uint64_t))(*(_QWORD *)v292 + 32))(v292);
        sub_234231A5C(v196, (uint64_t)buf, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v156 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v431 = 0;
            _os_log_impl(&dword_233BF3000, v156, OS_LOG_TYPE_ERROR, "Error validating device's DAC chain revocation status", v431, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          LODWORD(v278) = 32;
          *((_QWORD *)&v278 + 1) = "src/controller/CHIPDeviceController.cpp";
          v279 = 3180;
          v411[0] = -1;
          v412 = 0;
          v42 = v411;
          sub_23422EEF4(v196, &v278, (uint64_t)v411);
          if (v411[0] == 4)
          {
            v411[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      return;
    case 0xFu:
      v101 = *(_BYTE *)(v8 + 128);
      if (v101)
      {
        memset(v431, 0, sizeof(v431));
        buf[0] = v101;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 136);
        v102 = sub_233C05DB8(buf);
        v274[0] = *(_BYTE *)v2;
        if (v274[0])
          v275 = *(_DWORD *)(v2 + 4);
        sub_234231E50(v196, (uint64_t)v12, v102, (uint64_t)v274, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v103 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v104 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v104;
            _os_log_impl(&dword_233BF3000, v103, OS_LOG_TYPE_ERROR, "Failed to send CSR request: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v272 = *(_OWORD *)v431;
          v273 = *(_QWORD *)&v431[16];
          v407[0] = -1;
          v408 = 0;
          v42 = v407;
          sub_23422EEF4(v196, &v272, (uint64_t)v407);
          if (v407[0] == 4)
          {
            v407[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v176 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v176, OS_LOG_TYPE_ERROR, "No CSR nonce found", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v276) = 47;
        *((_QWORD *)&v276 + 1) = "src/controller/CHIPDeviceController.cpp";
        v277 = 3189;
        v409[0] = -1;
        v410 = 0;
        v42 = v409;
        sub_23422EEF4(v196, &v276, (uint64_t)v409);
        if (v409[0] == 4)
        {
          v409[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x10u:
      v105 = *(_BYTE *)(v8 + 264);
      if (v105 && *(_BYTE *)(v8 + 488) && *(_BYTE *)(v8 + 128))
      {
        memset(v449, 0, sizeof(v449));
        buf[0] = v105;
        v106 = *(_OWORD *)(v8 + 288);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 272);
        *(_OWORD *)&buf[24] = v106;
        v107 = sub_2342206D0(buf);
        v431[0] = *(_BYTE *)(v8 + 264);
        if (v431[0])
        {
          v108 = *(_OWORD *)(v8 + 288);
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 272);
          v432 = v108;
        }
        v109 = sub_2342206D0(v431) + 16;
        v313[0] = *(_BYTE *)(v8 + 488);
        if (v313[0])
          *(_OWORD *)&v313[8] = *(_OWORD *)(v8 + 496);
        v110 = (uint64_t *)sub_233C05DB8(v313);
        v290[0] = *(_BYTE *)(v8 + 128);
        if (v290[0])
          *(_OWORD *)&v290[8] = *(_OWORD *)(v8 + 136);
        v111 = sub_233C05DB8(v290);
        sub_234231BFC(v196, (uint64_t)v12, (uint64_t)v107, (uint64_t)v109, v110, (uint64_t)v111, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v112 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v112, OS_LOG_TYPE_ERROR, "Unable to validate CSR", buf, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
        }
        v268 = *(_OWORD *)v449;
        v269 = *(_QWORD *)&v449[16];
        v403[0] = -1;
        v404 = 0;
        v42 = v403;
        sub_23422EEF4(v196, &v268, (uint64_t)v403);
        if (v403[0] == 4)
        {
          v403[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      else
      {
        v158 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v158, OS_LOG_TYPE_ERROR, "Unable to validate CSR", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v270) = 47;
        *((_QWORD *)&v270 + 1) = "src/controller/CHIPDeviceController.cpp";
        v271 = 3206;
        v405[0] = -1;
        v406 = 0;
        v42 = v405;
        sub_23422EEF4(v196, &v270, (uint64_t)v405);
        if (v405[0] == 4)
        {
          v405[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x11u:
      v113 = *(_BYTE *)(v8 + 264);
      if (v113 && *(_BYTE *)(v8 + 488) && *(_BYTE *)(v8 + 464) && *(_BYTE *)(v8 + 128))
      {
        memset(v449, 0, sizeof(v449));
        buf[0] = v113;
        v114 = *(_OWORD *)(v8 + 288);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 272);
        *(_OWORD *)&buf[24] = v114;
        v115 = sub_2342206D0(buf);
        v431[0] = *(_BYTE *)(v8 + 264);
        if (v431[0])
        {
          v116 = *(_OWORD *)(v8 + 288);
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 272);
          v432 = v116;
        }
        v117 = sub_2342206D0(v431);
        v313[0] = *(_BYTE *)(v8 + 488);
        if (v313[0])
          *(_OWORD *)&v313[8] = *(_OWORD *)(v8 + 496);
        v118 = (uint64_t)(v117 + 16);
        v119 = (uint64_t *)sub_233C05DB8(v313);
        v290[0] = *(_BYTE *)(v8 + 464);
        if (v290[0])
          *(_OWORD *)&v290[8] = *(_OWORD *)(v8 + 472);
        v120 = sub_233C05DB8(v290);
        v288[0] = *(_BYTE *)(v8 + 128);
        if (v288[0])
          v289 = *(_OWORD *)(v8 + 136);
        v121 = sub_233C05DB8(v288);
        sub_2342329F8(v196, (uint64_t)v12, (uint64_t)v115, v118, v119, (uint64_t)v120, (uint64_t)v121, v449);
        if (*(_DWORD *)v449)
        {
          v122 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v122, OS_LOG_TYPE_ERROR, "Unable to process Op CSR", buf, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          v123 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233BF3000, v123, OS_LOG_TYPE_ERROR, "Failed to process the certificate signing request", buf, 2u);
          }
          if (sub_234114844(1u))
            sub_2341147D0(9u, 1);
          v264 = *(_OWORD *)v449;
          v265 = *(_QWORD *)&v449[16];
          v399[0] = -1;
          v400 = 0;
          v42 = v399;
          sub_23422EEF4(v196, &v264, (uint64_t)v399);
          if (v399[0] == 4)
          {
            v399[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v159 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v159, OS_LOG_TYPE_ERROR, "Unable to generate NOC chain parameters", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v266) = 47;
        *((_QWORD *)&v266 + 1) = "src/controller/CHIPDeviceController.cpp";
        v267 = 3225;
        v401[0] = -1;
        v402 = 0;
        v42 = v401;
        sub_23422EEF4(v196, &v266, (uint64_t)v401);
        if (v401[0] == 4)
        {
          v401[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x12u:
      v124 = *(_BYTE *)(v8 + 304);
      if (v124 && *(_BYTE *)(v8 + 328))
      {
        memset(v431, 0, sizeof(v431));
        buf[0] = v124;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 312);
        v125 = sub_233C05DB8(buf);
        v260[0] = *(_BYTE *)v2;
        if (v260[0])
          v261 = *(_DWORD *)(v2 + 4);
        sub_234233A24(v196, (uint64_t)v12, v125, (uint64_t)v260, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v126 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v127 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v127;
            _os_log_impl(&dword_233BF3000, v126, OS_LOG_TYPE_ERROR, "Error sending trusted root certificate: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v258 = *(_OWORD *)v431;
          v259 = *(_QWORD *)&v431[16];
          v395[0] = -1;
          v396 = 0;
          sub_23422EEF4(v196, &v258, (uint64_t)v395);
          if (v395[0] != 4)
            return;
          v128 = v395;
        }
        else
        {
          v449[0] = *(_BYTE *)(v8 + 304);
          if (v449[0])
            *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 312);
          v179 = (uint64_t *)sub_233C05DB8(v449);
          v180 = *v179;
          v181 = v179[1];
          v313[0] = *(_BYTE *)(v8 + 328);
          if (v313[0])
            *(_OWORD *)&v313[8] = *(_OWORD *)(v8 + 336);
          v182 = sub_233C05DB8(v313);
          (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD, _QWORD))(*v12 + 56))(buf, v12, v180, v181, *v182, v182[1]);
          *(_OWORD *)v431 = *(_OWORD *)buf;
          *(_QWORD *)&v431[16] = *(_QWORD *)&buf[16];
          if (*(_DWORD *)buf)
          {
            v183 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
            {
              *(_OWORD *)buf = *(_OWORD *)v431;
              *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
              v184 = sub_2341083CC((const char **)buf, 1);
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v184;
              _os_log_impl(&dword_233BF3000, v183, OS_LOG_TYPE_ERROR, "Error setting peer id: %s", buf, 0xCu);
            }
            if (sub_234114844(1u))
            {
              *(_OWORD *)buf = *(_OWORD *)v431;
              *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
              sub_2341083CC((const char **)buf, 1);
              sub_2341147D0(9u, 1);
            }
            v256 = *(_OWORD *)v431;
            v257 = *(_QWORD *)&v431[16];
            v393[0] = -1;
            v394 = 0;
            sub_23422EEF4(v196, &v256, (uint64_t)v393);
            if (v393[0] != 4)
              return;
            v128 = v393;
          }
          else
          {
            if ((unint64_t)((*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12) - 1) < 0xFFFFFFEFFFFFFFFFLL)
              return;
            v194 = sub_234117B80(9u, "Controller");
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233BF3000, v194, OS_LOG_TYPE_ERROR, "Given node ID is not an operational node ID", buf, 2u);
            }
            if (sub_234114844(1u))
              sub_2341147D0(9u, 1);
            LODWORD(v254) = 47;
            *((_QWORD *)&v254 + 1) = "src/controller/CHIPDeviceController.cpp";
            v255 = 3266;
            v391[0] = -1;
            v392 = 0;
            sub_23422EEF4(v196, &v254, (uint64_t)v391);
            if (v391[0] != 4)
              return;
            v128 = v391;
          }
        }
        v191 = v128 + 4;
        v128[1] = &unk_2505174E0;
        goto LABEL_535;
      }
      v160 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v160, OS_LOG_TYPE_ERROR, "No trusted root cert or NOC specified", buf, 2u);
      }
      if (sub_234114844(1u))
        sub_2341147D0(9u, 1);
      LODWORD(v262) = 47;
      *((_QWORD *)&v262 + 1) = "src/controller/CHIPDeviceController.cpp";
      v263 = 3245;
      v397[0] = -1;
      v398 = 0;
      v42 = v397;
      sub_23422EEF4(v196, &v262, (uint64_t)v397);
      if (v397[0] == 4)
      {
        v397[1] = &unk_2505174E0;
        goto LABEL_534;
      }
      return;
    case 0x13u:
      if (*(_BYTE *)(v8 + 328)
        && *(_BYTE *)(v8 + 376)
        && (v57 = (char *)(v8 + 376), sub_233C27DCC((_BYTE *)(v8 + 376)), *(_BYTE *)(v8 + 400)))
      {
        memset(v431, 0, sizeof(v431));
        buf[0] = *(_BYTE *)(v8 + 328);
        if (buf[0])
          *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 336);
        v58 = sub_233C05DB8(buf);
        v449[0] = *(_BYTE *)(v8 + 352);
        if (v449[0])
          *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 360);
        v59 = *v57;
        if (*v57)
        {
          *(_QWORD *)&v313[8] = sub_233C27DCC((_BYTE *)(v8 + 376));
          v59 = 1;
        }
        v313[0] = v59;
        v60 = *(_QWORD *)sub_233C25EA4(v313);
        v290[0] = *(_BYTE *)(v8 + 400);
        if (v290[0])
          *(_QWORD *)&v290[8] = *(_QWORD *)(v8 + 408);
        v61 = *(_QWORD *)sub_233C25EA4(v290);
        v250[0] = *(_BYTE *)v2;
        if (v250[0])
          v251 = *(_DWORD *)(v2 + 4);
        sub_234232D04(v196, (uint64_t)v12, v58, (uint64_t)v449, v60, v61, (uint64_t)v250, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v62 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v63 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v63;
            _os_log_impl(&dword_233BF3000, v62, OS_LOG_TYPE_ERROR, "Error sending operational certificate: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v248 = *(_OWORD *)v431;
          v249 = *(_QWORD *)&v431[16];
          v387[0] = -1;
          v388 = 0;
          v42 = v387;
          sub_23422EEF4(v196, &v248, (uint64_t)v387);
          if (v387[0] == 4)
          {
            v387[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v134 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v134, OS_LOG_TYPE_ERROR, "AddNOC contents not specified", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v252) = 47;
        *((_QWORD *)&v252 + 1) = "src/controller/CHIPDeviceController.cpp";
        v253 = 3275;
        v389[0] = -1;
        v390 = 0;
        v42 = v389;
        sub_23422EEF4(v196, &v252, (uint64_t)v389);
        if (v389[0] == 4)
        {
          v389[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x14u:
      if (*(_BYTE *)(v8 + 96))
      {
        buf[0] = *(_BYTE *)(v8 + 96);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 104);
        *(_QWORD *)&buf[24] = *(_QWORD *)(v8 + 120);
        v64 = sub_2342206D0(buf);
        v65 = v64[16];
        *(_OWORD *)v431 = *(_OWORD *)v64;
        v431[16] = v65;
        memset(v449, 0, sizeof(v449));
        v244[0] = *(_BYTE *)v2;
        if (v244[0])
          v245 = *(_DWORD *)(v2 + 4);
        sub_23423D9D4(v196, (uint64_t)v12, (uint64_t)v431, (uint64_t)sub_234234390, (uint64_t)sub_2342344D8, v4, (uint64_t)v244, 0, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v66 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v449;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v449[16];
            v67 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v67;
            _os_log_impl(&dword_233BF3000, v66, OS_LOG_TYPE_ERROR, "Failed to send SendTrustedTimeSource command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v449;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v449[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v242 = *(_OWORD *)v449;
          v243 = *(_QWORD *)&v449[16];
          v383[0] = -1;
          v384 = 0;
          v42 = v383;
          sub_23422EEF4(v196, &v242, (uint64_t)v383);
          if (v383[0] == 4)
          {
            v383[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v167 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v167, OS_LOG_TYPE_ERROR, "ConfigureTrustedTimeSource stage called with no trusted time source data", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v246) = 47;
        *((_QWORD *)&v246 + 1) = "src/controller/CHIPDeviceController.cpp";
        v247 = 3293;
        v385[0] = -1;
        v386 = 0;
        v42 = v385;
        sub_23422EEF4(v196, &v246, (uint64_t)v385);
        if (v385[0] == 4)
        {
          v385[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x15u:
      (*(void (**)(_QWORD))(**(_QWORD **)(v196 + 4320) + 104))(*(_QWORD *)(v196 + 4320));
      return;
    case 0x16u:
      buf[56] = 0;
      memset(&buf[16], 0, 17);
      if (*(_BYTE *)(v8 + 600) && *(_BYTE *)(v8 + 616) && *(_BYTE *)(v8 + 632))
      {
        v431[0] = *(_BYTE *)(v8 + 600);
        *(_QWORD *)&v431[8] = *(_QWORD *)(v8 + 608);
        *(_QWORD *)buf = *(_QWORD *)sub_233C25EA4(v431);
        v431[0] = *(_BYTE *)(v8 + 616);
        if (v431[0])
          *(_QWORD *)&v431[8] = *(_QWORD *)(v8 + 624);
        *(_QWORD *)&buf[8] = *(_QWORD *)sub_233C25EA4(v431);
        v431[0] = *(_BYTE *)(v8 + 632);
        if (v431[0])
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 640);
        *(_OWORD *)&buf[16] = *(_OWORD *)sub_233C05DB8(v431);
        memset(v449, 0, sizeof(v449));
        v213[0] = *(_BYTE *)v2;
        if (v213[0])
          v214 = *(_DWORD *)(v2 + 4);
        sub_23423E368(v196, (uint64_t)v12, (uint64_t)buf, (uint64_t)sub_2342311D4, (uint64_t)sub_2342344D8, v4, (uint64_t)v213, 0, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v68 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            v69 = sub_2341083CC((const char **)v431, 1);
            *(_DWORD *)v431 = 136315138;
            *(_QWORD *)&v431[4] = v69;
            _os_log_impl(&dword_233BF3000, v68, OS_LOG_TYPE_ERROR, "Failed to send IcdManagement.RegisterClient command: %s", v431, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            sub_2341083CC((const char **)v431, 1);
            sub_2341147D0(9u, 1);
          }
          v211 = *(_OWORD *)v449;
          v212 = *(_QWORD *)&v449[16];
          v358[0] = -1;
          v359 = 0;
          v42 = v358;
          sub_23422EEF4(v196, &v211, (uint64_t)v358);
          if (v358[0] == 4)
          {
            v358[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v157 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v431 = 0;
          _os_log_impl(&dword_233BF3000, v157, OS_LOG_TYPE_ERROR, "No ICD Registration information provided!", v431, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v215) = 3;
        *((_QWORD *)&v215 + 1) = "src/controller/CHIPDeviceController.cpp";
        v216 = 3421;
        v360[0] = -1;
        v361 = 0;
        v42 = v360;
        sub_23422EEF4(v196, &v215, (uint64_t)v360);
        if (v360[0] == 4)
        {
          v360[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x17u:
      v70 = *(_BYTE *)(v8 + 176);
      if (v70)
      {
        buf[48] = 0;
        buf[72] = 0;
        LOBYTE(v367) = 0;
        v431[0] = v70;
        *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 184);
        v432 = *(_OWORD *)(v8 + 200);
        *(_OWORD *)buf = *(_OWORD *)sub_2342206D0(v431);
        v431[0] = *(_BYTE *)(v8 + 176);
        if (v431[0])
        {
          v71 = *(_OWORD *)(v8 + 200);
          *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 184);
          v432 = v71;
        }
        *(_OWORD *)&buf[16] = *((_OWORD *)sub_2342206D0(v431) + 1);
        buf[32] = 1;
        *(_QWORD *)&buf[40] = v10;
        memset(v449, 0, sizeof(v449));
        v238[0] = *(_BYTE *)v2;
        if (v238[0])
          v239 = *(_DWORD *)(v2 + 4);
        sub_23423DB94(v196, (uint64_t)v12, (uint64_t)buf, (uint64_t)sub_234237DB8, (uint64_t)sub_2342344D8, v4, (uint64_t)v238, 0, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v72 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            v73 = sub_2341083CC((const char **)v431, 1);
            *(_DWORD *)v431 = 136315138;
            *(_QWORD *)&v431[4] = v73;
            _os_log_impl(&dword_233BF3000, v72, OS_LOG_TYPE_ERROR, "Failed to send AddOrUpdateWiFiNetwork command: %s", v431, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            sub_2341083CC((const char **)v431, 1);
            sub_2341147D0(9u, 1);
          }
          v236 = *(_OWORD *)v449;
          v237 = *(_QWORD *)&v449[16];
          v379[0] = -1;
          v380 = 0;
          v42 = v379;
          sub_23422EEF4(v196, &v236, (uint64_t)v379);
          if (v379[0] == 4)
          {
            v379[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v168 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v168, OS_LOG_TYPE_ERROR, "No wifi credentials specified", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v240) = 47;
        *((_QWORD *)&v240 + 1) = "src/controller/CHIPDeviceController.cpp";
        v241 = 3312;
        v381[0] = -1;
        v382 = 0;
        v42 = v381;
        sub_23422EEF4(v196, &v240, (uint64_t)v381);
        if (v381[0] == 4)
        {
          v381[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x18u:
      if (*(_BYTE *)(v8 + 240))
      {
        v431[0] = *(_BYTE *)(v8 + 240);
        *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 248);
        *(_OWORD *)buf = *(_OWORD *)sub_233C05DB8(v431);
        buf[16] = 1;
        *(_QWORD *)&buf[24] = v10;
        memset(v449, 0, sizeof(v449));
        v232[0] = *(_BYTE *)v2;
        if (v232[0])
          v233 = *(_DWORD *)(v2 + 4);
        sub_23423DD54(v196, (uint64_t)v12, (uint64_t)buf, (uint64_t)sub_234237DB8, (uint64_t)sub_2342344D8, v4, (uint64_t)v232, 0, (uint64_t)v449);
        if (*(_DWORD *)v449)
        {
          v74 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            v75 = sub_2341083CC((const char **)v431, 1);
            *(_DWORD *)v431 = 136315138;
            *(_QWORD *)&v431[4] = v75;
            _os_log_impl(&dword_233BF3000, v74, OS_LOG_TYPE_ERROR, "Failed to send AddOrUpdateThreadNetwork command: %s", v431, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)v431 = *(_OWORD *)v449;
            *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
            sub_2341083CC((const char **)v431, 1);
            sub_2341147D0(9u, 1);
          }
          v230 = *(_OWORD *)v449;
          v231 = *(_QWORD *)&v449[16];
          v375[0] = -1;
          v376 = 0;
          v42 = v375;
          sub_23422EEF4(v196, &v230, (uint64_t)v375);
          if (v375[0] == 4)
          {
            v375[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v169 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v169, OS_LOG_TYPE_ERROR, "No thread credentials specified", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v234) = 47;
        *((_QWORD *)&v234 + 1) = "src/controller/CHIPDeviceController.cpp";
        v235 = 3334;
        v377[0] = -1;
        v378 = 0;
        v42 = v377;
        sub_23422EEF4(v196, &v234, (uint64_t)v377);
        if (v377[0] == 4)
        {
          v377[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x19u:
    case 0x1Au:
      sub_23423DF14(v196, (uint64_t)v12, v8, v10);
      return;
    case 0x1Bu:
      if (*(_BYTE *)(v8 + 176))
      {
        buf[0] = *(_BYTE *)(v8 + 176);
        *(_OWORD *)&buf[8] = *(_OWORD *)(v8 + 184);
        *(_OWORD *)&buf[24] = *(_OWORD *)(v8 + 200);
        *(_OWORD *)v431 = *(_OWORD *)sub_2342206D0(buf);
        v431[16] = 1;
        *(_QWORD *)&v432 = v10;
        *(_OWORD *)v449 = xmmword_250518064;
        *(_DWORD *)&v449[16] = 0;
        v76 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(v8 + 540))
          {
            *(_WORD *)v313 = *(_WORD *)(v8 + 540);
            if (*sub_233C05DD8(v313))
              v77 = "true";
            else
              v77 = "false";
            *(_DWORD *)buf = 136315138;
          }
          else
          {
            *(_DWORD *)buf = 136315138;
            v77 = "missing";
          }
          *(_QWORD *)&buf[4] = v77;
          _os_log_impl(&dword_233BF3000, v76, OS_LOG_TYPE_DEFAULT, "SendCommand kWiFiNetworkEnable, supportsConcurrentConnection=%s", buf, 0xCu);
        }
        if (sub_234114844(2u))
        {
          if (*(_BYTE *)(v8 + 540))
          {
            buf[0] = *(_BYTE *)(v8 + 540);
            buf[1] = *(_BYTE *)(v8 + 541);
            sub_233C05DD8(buf);
          }
          sub_2341147D0(9u, 2);
        }
        v226[0] = *(_BYTE *)v2;
        if (v226[0])
          v227 = *(_DWORD *)(v2 + 4);
        sub_23423E1A8(v196, (uint64_t)v12, (uint64_t)v431, (uint64_t)sub_234237F48, (uint64_t)sub_2342344D8, v4, (uint64_t)v226, 0, (uint64_t)buf);
        *(_OWORD *)v449 = *(_OWORD *)&buf[4];
        v188 = *(_DWORD *)buf;
        *(_DWORD *)&v449[16] = *(_DWORD *)&buf[20];
        if (*(_DWORD *)buf)
        {
          v189 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)&buf[4] = *(_OWORD *)v449;
            *(_DWORD *)buf = v188;
            *(_DWORD *)&buf[20] = *(_DWORD *)&v449[16];
            v190 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v190;
            _os_log_impl(&dword_233BF3000, v189, OS_LOG_TYPE_ERROR, "Failed to send WiFi ConnectNetwork command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)&buf[4] = *(_OWORD *)v449;
            *(_DWORD *)buf = v188;
            *(_DWORD *)&buf[20] = *(_DWORD *)&v449[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v223 = v188;
          v224 = *(_OWORD *)v449;
          v225 = *(_DWORD *)&v449[16];
          v371[0] = -1;
          v372 = 0;
          v42 = v371;
          sub_23422EEF4(v196, (__int128 *)&v223, (uint64_t)v371);
          if (v371[0] == 4)
          {
            v371[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v170 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v170, OS_LOG_TYPE_ERROR, "No wifi credentials specified", buf, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v228) = 47;
        *((_QWORD *)&v228 + 1) = "src/controller/CHIPDeviceController.cpp";
        v229 = 3362;
        v373[0] = -1;
        v374 = 0;
        v42 = v373;
        sub_23422EEF4(v196, &v228, (uint64_t)v373);
        if (v373[0] == 4)
        {
          v373[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x1Cu:
      *(_OWORD *)v290 = 0uLL;
      v370 = 0;
      if (!*(_BYTE *)(v8 + 240)
        || (v449[0] = *(_BYTE *)(v8 + 240),
            *(_OWORD *)&v449[8] = *(_OWORD *)(v8 + 248),
            v78 = sub_233C05DB8(v449),
            sub_234115F2C(buf, *((_QWORD *)v78 + 1), *(unsigned __int8 **)v78, (uint64_t)v431),
            *(_DWORD *)v431)
        || (sub_234116368(buf, v290, (uint64_t)v313), *(_DWORD *)v313))
      {
        v79 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v431 = 0;
          _os_log_impl(&dword_233BF3000, v79, OS_LOG_TYPE_ERROR, "Unable to get extended pan ID for thread operational dataset\n", v431, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        LODWORD(v221) = 47;
        *((_QWORD *)&v221 + 1) = "src/controller/CHIPDeviceController.cpp";
        v222 = 3393;
        v364[0] = -1;
        v365 = 0;
        v42 = v364;
        sub_23422EEF4(v196, &v221, (uint64_t)v364);
        if (v364[0] == 4)
        {
          v364[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      else
      {
        *(_OWORD *)v431 = *(_OWORD *)v290;
        v431[16] = 1;
        *(_QWORD *)&v432 = v10;
        memset(v313, 0, sizeof(v313));
        v219[0] = *(_BYTE *)v2;
        if (v219[0])
          v220 = *(_DWORD *)(v2 + 4);
        sub_23423E1A8(v196, (uint64_t)v12, (uint64_t)v431, (uint64_t)sub_234237F48, (uint64_t)sub_2342344D8, v4, (uint64_t)v219, 0, (uint64_t)v313);
        if (*(_DWORD *)v313)
        {
          v192 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)v449 = *(_OWORD *)v313;
            *(_QWORD *)&v449[16] = *(_QWORD *)&v313[16];
            v193 = sub_2341083CC((const char **)v449, 1);
            *(_DWORD *)v449 = 136315138;
            *(_QWORD *)&v449[4] = v193;
            _os_log_impl(&dword_233BF3000, v192, OS_LOG_TYPE_ERROR, "Failed to send Thread ConnectNetwork command: %s", v449, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)v449 = *(_OWORD *)v313;
            *(_QWORD *)&v449[16] = *(_QWORD *)&v313[16];
            sub_2341083CC((const char **)v449, 1);
            sub_2341147D0(9u, 1);
          }
          v217 = *(_OWORD *)v313;
          v218 = *(_QWORD *)&v313[16];
          v362[0] = -1;
          v363 = 0;
          v42 = v362;
          sub_23422EEF4(v196, &v217, (uint64_t)v362);
          if (v362[0] == 4)
          {
            v362[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      return;
    case 0x1Du:
      v80 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
      v81 = *(unsigned __int8 *)(v196 + 36);
      *(_QWORD *)buf = v80;
      *(_QWORD *)&buf[8] = v81;
      sub_2341CF0CC(*(_QWORD *)(*(_QWORD *)(v196 + 4280) + 40), (uint64_t *)buf);
      LODWORD(v209) = 0;
      *((_QWORD *)&v209 + 1) = "src/controller/CHIPDeviceController.cpp";
      v210 = 3450;
      v356[0] = -1;
      v357 = 0;
      v42 = v356;
      sub_23422EEF4(v196, &v209, (uint64_t)v356);
      if (v356[0] != 4)
        return;
      v356[1] = &unk_2505174E0;
      goto LABEL_534;
    case 0x1Eu:
    case 0x1Fu:
      v23 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
      v24 = *(unsigned __int8 *)(v196 + 36);
      *(_QWORD *)v431 = v23;
      *(_QWORD *)&v431[8] = v24;
      *(_DWORD *)buf = 0;
      *(_QWORD *)&buf[8] = "core_dcm_operational_setup";
      buf[20] = 0;
      sub_2341C4BEC((uint64_t)buf);
      sub_2341FC98C(*(_QWORD *)(*(_QWORD *)(v196 + 4280) + 96), v431, (uint64_t *)(v196 + 4648), (uint64_t *)(v196 + 4688), 3, (_QWORD *)(v196 + 4728), 0);
      return;
    case 0x20u:
      memset(v431, 0, sizeof(v431));
      v199[0] = *(_BYTE *)v2;
      if (v199[0])
        v200 = *(_DWORD *)(v2 + 4);
      sub_23423E8B8(v196, (uint64_t)v12, (uint64_t)v449, (uint64_t)sub_2342380D8, (uint64_t)sub_2342344D8, v4, (uint64_t)v199, 0, (uint64_t)v431);
      if (!*(_DWORD *)v431)
        return;
      v129 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        v130 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v130;
        _os_log_impl(&dword_233BF3000, v129, OS_LOG_TYPE_ERROR, "Failed to send CommissioningComplete command: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(9u, 1);
      }
      v197 = *(_OWORD *)v431;
      v198 = *(_QWORD *)&v431[16];
      v348[0] = -1;
      v349 = 0;
      v42 = v348;
      sub_23422EEF4(v196, &v197, (uint64_t)v348);
      if (v348[0] != 4)
        return;
      v348[1] = &unk_2505174E0;
      goto LABEL_534;
    case 0x21u:
      if (*(_BYTE *)(v8 + 660))
      {
        buf[0] = *(_BYTE *)(v8 + 660);
        *(_DWORD *)&buf[4] = *(_DWORD *)(v8 + 664);
        v82 = *(_DWORD *)sub_233C20E2C(buf);
        *(_DWORD *)v449 = v82;
        v83 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v82;
          _os_log_impl(&dword_233BF3000, v83, OS_LOG_TYPE_ERROR, "Send ICD StayActive with Duration %u", buf, 8u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(9u, 1);
        memset(v431, 0, sizeof(v431));
        v203[0] = *(_BYTE *)v2;
        if (v203[0])
          v204 = *(_DWORD *)(v2 + 4);
        sub_23423E6F8(v196, (uint64_t)v12, (uint64_t)v449, (uint64_t)sub_234231330, (uint64_t)sub_2342344D8, v4, (uint64_t)v203, 0, (uint64_t)v431);
        if (*(_DWORD *)v431)
        {
          v84 = sub_234117B80(9u, "Controller");
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            v85 = sub_2341083CC((const char **)buf, 1);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v85;
            _os_log_impl(&dword_233BF3000, v84, OS_LOG_TYPE_ERROR, "Failed to send IcdManagement.StayActive command: %s", buf, 0xCu);
          }
          if (sub_234114844(1u))
          {
            *(_OWORD *)buf = *(_OWORD *)v431;
            *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
            sub_2341083CC((const char **)buf, 1);
            sub_2341147D0(9u, 1);
          }
          v201 = *(_OWORD *)v431;
          v202 = *(_QWORD *)&v431[16];
          v350[0] = -1;
          v351 = 0;
          v42 = v350;
          sub_23422EEF4(v196, &v201, (uint64_t)v350);
          if (v350[0] == 4)
          {
            v350[1] = &unk_2505174E0;
            goto LABEL_534;
          }
        }
      }
      else
      {
        v171 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233BF3000, v171, OS_LOG_TYPE_DEFAULT, "Skipping kICDSendStayActive", buf, 2u);
        }
        if (sub_234114844(2u))
          sub_2341147D0(9u, 2);
        LODWORD(v205) = 0;
        *((_QWORD *)&v205 + 1) = "src/controller/CHIPDeviceController.cpp";
        v206 = 3490;
        v352[0] = -1;
        v353 = 0;
        v42 = v352;
        sub_23422EEF4(v196, &v205, (uint64_t)v352);
        if (v352[0] == 4)
        {
          v352[1] = &unk_2505174E0;
          goto LABEL_534;
        }
      }
      return;
    case 0x22u:
      v86 = (*(uint64_t (**)(_QWORD *))(*v12 + 24))(v12);
      sub_234234638(v196, (uint64_t)v12, v86, (__int128 *)(v8 + 544));
      return;
    case 0x23u:
      buf[0] = 0;
      if (*(_BYTE *)(v8 + 176))
      {
        v431[0] = *(_BYTE *)(v8 + 176);
        *(_OWORD *)&v431[8] = *(_OWORD *)(v8 + 184);
        v432 = *(_OWORD *)(v8 + 200);
        v131 = sub_2342206D0(v431);
        buf[0] = 1;
        *(_OWORD *)&buf[8] = *(_OWORD *)v131;
        buf[24] = 1;
      }
      buf[32] = 1;
      *(_QWORD *)&buf[40] = v10;
      memset(v449, 0, sizeof(v449));
      v316[0] = *(_BYTE *)v2;
      if (v316[0])
        v317 = *(_DWORD *)(v2 + 4);
      sub_23423D604(v196, (uint64_t)v12, (uint64_t)buf, (uint64_t)sub_234237970, (uint64_t)sub_2342377E0, v4, (uint64_t)v316, 0, (uint64_t)v449);
      if (!*(_DWORD *)v449)
        return;
      v132 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v431 = *(_OWORD *)v449;
        *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
        v133 = sub_2341083CC((const char **)v431, 1);
        *(_DWORD *)v431 = 136315138;
        *(_QWORD *)&v431[4] = v133;
        _os_log_impl(&dword_233BF3000, v132, OS_LOG_TYPE_ERROR, "Failed to send ScanNetworks command: %s", v431, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v431 = *(_OWORD *)v449;
        *(_QWORD *)&v431[16] = *(_QWORD *)&v449[16];
        sub_2341083CC((const char **)v431, 1);
        sub_2341147D0(9u, 1);
      }
      v314 = *(_OWORD *)v449;
      v315 = *(_QWORD *)&v449[16];
      v429[0] = -1;
      v430 = 0;
      v42 = v429;
      sub_23422EEF4(v196, &v314, (uint64_t)v429);
      if (v429[0] != 4)
        return;
      v429[1] = &unk_2505174E0;
      goto LABEL_534;
    case 0x26u:
      v449[0] = 0;
      memset(v431, 0, sizeof(v431));
      sub_23423E528(v196, (uint64_t)v12, v4, 0x31u, 4u, v449, (uint64_t)sub_234234434, (uint64_t)sub_2342344D8, v431);
      if (!*(_DWORD *)v431)
        return;
      v87 = sub_234117B80(9u, "Controller");
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        v88 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v88;
        _os_log_impl(&dword_233BF3000, v87, OS_LOG_TYPE_ERROR, "Failed to send InterfaceEnabled write request: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = *(_OWORD *)v431;
        *(_QWORD *)&buf[16] = *(_QWORD *)&v431[16];
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(9u, 1);
      }
      v207 = *(_OWORD *)v431;
      v208 = *(_QWORD *)&v431[16];
      v354[0] = -1;
      v355 = 0;
      v42 = v354;
      sub_23422EEF4(v196, &v207, (uint64_t)v354);
      if (v354[0] != 4)
        return;
      v354[1] = &unk_2505174E0;
      goto LABEL_534;
    default:
      return;
  }
}

_QWORD *sub_23423CF04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_2505192E8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519368;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234243BD0(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423D0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250519578;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519608;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342442E0(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423D284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_2505197C8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519848;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234244B38(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423D444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250519A08;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519A88;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234245248(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423D604@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250519C98;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519D28;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234245958(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423D7C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_250519F38;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_250519FC8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342461BC(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

BOOL sub_23423D984(uint64_t a1, _BYTE *a2)
{
  BOOL v2;

  if (a2[416])
    v2 = a2[440] == 0;
  else
    v2 = 1;
  if (v2 || a2[152] == 0 || a2[488] == 0)
    return 1;
  return !a2[464] || a2[528] == 0 || a2[532] == 0;
}

_QWORD *sub_23423D9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051A188;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051A208;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234246A18(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423DB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051A418;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051A4A8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234247128(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423DD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051A668;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051A6E8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234247990(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

void sub_23423DF14(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  __int16 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  int v18;
  char v19[4];
  int v20;
  __int128 v21;
  int v22;
  _QWORD v23[13];
  char v24;
  _QWORD v25[13];
  char v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (sub_23422C920(a1, v8) == a2)
  {
    buf[0] = *(_BYTE *)a3;
    if (buf[0])
    {
      *(_WORD *)&buf[2] = *(_WORD *)(a3 + 2);
      v13 = (__int16 *)sub_233C05D98(buf);
    }
    else
    {
      v13 = &word_2342EF956;
    }
    v14 = (unsigned __int16)*v13;
    v15 = v14 + (unsigned __int16)(sub_234129E7C(a2 + 200) / 0x3E8);
    if (v15 >= 0xFFFF)
      v16 = 0xFFFF;
    else
      v16 = v15;
    v19[0] = 1;
    v20 = 30000;
    if (!sub_234231468(a1, a2, a4, v16, v19, (uint64_t)sub_234237340, (void (*)(uint64_t, __int128 *))sub_2342344D8, 0))
    {
      LODWORD(v17) = 0;
      *((_QWORD *)&v17 + 1) = "src/controller/CHIPDeviceController.cpp";
      v18 = 3565;
      v23[0] = -1;
      v24 = 0;
      sub_23422EEF4(a1, &v17, (uint64_t)v23);
      if (v23[0] == 4)
      {
        v12 = v23;
        goto LABEL_17;
      }
    }
  }
  else
  {
    v9 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) >> 32;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      *(_DWORD *)buf = 67109376;
      v28 = v10;
      v29 = 1024;
      v30 = v11;
      _os_log_impl(&dword_233BF3000, v9, OS_LOG_TYPE_ERROR, "Trying to extend fail-safe for an unknown commissionee with device id %08X%08X", buf, 0xEu);
    }
    if (sub_234114844(1u))
    {
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      sub_2341147D0(9u, 1);
    }
    LODWORD(v21) = 3;
    *((_QWORD *)&v21 + 1) = "src/controller/CHIPDeviceController.cpp";
    v22 = 3543;
    v25[0] = -1;
    v26 = 0;
    sub_23422EEF4(a1, &v21, (uint64_t)v25);
    if (v25[0] == 4)
    {
      v12 = v25;
LABEL_17:
      v12[1] = &unk_2505174E0;
      sub_2341CD754(v12 + 4);
    }
  }
}

_QWORD *sub_23423E1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051A8F8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051A988;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342480A0(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423E368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051AB98;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051AC28;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342488FC(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423E528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  _BYTE v25[8];
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 4408))
    sub_2342616A0(a1);
  v17 = (_QWORD *)(a1 + 4384);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v18 = (uint64_t *)sub_233C25EA4(&v27);
  v33[0] = &unk_25051ACA8;
  v33[1] = a1;
  v33[2] = a7;
  v34 = v33;
  v31[0] = &unk_25051AD28;
  v31[1] = a1;
  v31[2] = a8;
  v32 = v31;
  v26[0] = 0;
  v30 = 0;
  v25[0] = 0;
  sub_233FC2194(v18, a3, a4, a5, a6, (uint64_t)v33, (uint64_t)v31, v26, a9, (uint64_t)v29, (uint64_t)v25, v17);
  v19 = v30;
  if (v30 == v29)
  {
    v20 = 4;
    v19 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_7;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_7:
  v21 = v32;
  if (v32 == v31)
  {
    v22 = 4;
    v21 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_12;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_12:
  result = v34;
  if (v34 == v33)
  {
    v24 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_17;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_17:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423E6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051AF38;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051AFC8;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_2342492FC(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

_QWORD *sub_23423E8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unsigned __int8 v26[4];
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if ((a8 & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = a1;
    if (*(_QWORD *)(a1 + 4376))
      sub_234261338(a1);
  }
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v27, a2);
  v19 = (uint64_t *)sub_233C25EA4(&v27);
  v31[0] = &unk_25051B1D8;
  v31[1] = v17;
  v31[2] = a4;
  v32 = v31;
  v29[0] = &unk_25051B268;
  v29[1] = v17;
  v29[2] = a5;
  v30 = v29;
  v26[0] = 0;
  v20 = (_QWORD *)(a1 + 4352);
  if (a8)
    v20 = 0;
  sub_234249B54(v18, v19, a6, a3, (uint64_t)v31, (uint64_t)v29, v26, a7, a9, v20);
  v21 = v30;
  if (v30 == v29)
  {
    v22 = 4;
    v21 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v24 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v24 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v24))();
LABEL_16:
  if ((_BYTE)v27)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
  return result;
}

uint64_t sub_23423EA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v6;
  int v7;
  const char *v8;

  result = sub_233D53F10(a1);
  if (result)
  {
    if (*(_QWORD *)(a2 + 8) == 8)
    {
      v6 = 0;
      **(_QWORD **)a2 = bswap64(*(_QWORD *)(result + 16));
      v7 = 101;
      v8 = "src/credentials/FabricTable.h";
    }
    else
    {
      v7 = 99;
      v8 = "src/credentials/FabricTable.h";
      v6 = 47;
    }
  }
  else
  {
    v7 = 3584;
    v8 = "src/controller/CHIPDeviceController.cpp";
    v6 = 113;
  }
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

void sub_23423EB00(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 4280);
  if (v3 && (v4 = *(_QWORD *)(v3 + 72)) != 0)
  {
    sub_2341E34CC(v4, *(unsigned __int8 *)(a1 + 36), a2, a3);
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/controller/CHIPDeviceController.cpp";
    *(_DWORD *)(a3 + 16) = 3591;
  }
}

_QWORD *sub_23423EB40(_QWORD *a1)
{
  *a1 = &unk_250517410;
  sub_2341F3DE0((uint64_t)(a1 + 2));
  return a1;
}

void sub_23423EB74(_QWORD *a1)
{
  *a1 = &unk_250517410;
  sub_2341F3DE0((uint64_t)(a1 + 2));
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23423EBB8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;

  if (*((_DWORD *)result + 8) == 1)
  {
    v7 = *(_QWORD *)(result[535] + 96);
    v8 = *((_BYTE *)result + 36);
    v11 = a2;
    v12 = v8;
    result = sub_2341FC98C(v7, &v11, a3, a4, 1, 0, a5);
    v9 = 0;
    v10 = 257;
  }
  else
  {
    v10 = 251;
    v9 = 3;
  }
  *(_DWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = "src/controller/CHIPDeviceController.h";
  *(_DWORD *)(a6 + 16) = v10;
  return result;
}

void sub_23423EC40(_QWORD *a1)
{
  sub_23423EDD4(a1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23423EC64(uint64_t a1)
{
  return sub_23423EDD4((_QWORD *)(a1 - 4304));
}

void sub_23423EC70(uint64_t a1)
{
  sub_23423EDD4((_QWORD *)(a1 - 4304));
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23423EC9C(uint64_t a1)
{
  return sub_23423EDD4((_QWORD *)(a1 - 4312));
}

void sub_23423ECA8(uint64_t a1)
{
  sub_23423EDD4((_QWORD *)(a1 - 4312));
  JUMPOUT(0x23493E704);
}

uint64_t sub_23423ECD4(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = (_OWORD *)(a2 + 8);
  switch(*(_QWORD *)a2)
  {
    case 0:
      *v3 = *v4;
      break;
    case 1:
    case 2:
      v5 = *v4;
      v6 = *(_OWORD *)(a2 + 24);
      goto LABEL_5;
    case 3:
      v5 = *v4;
      v6 = *(_OWORD *)(a2 + 24);
      v7 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v7;
LABEL_5:
      *v3 = v5;
      *(_OWORD *)(a1 + 24) = v6;
      break;
    case 4:
      *(_QWORD *)(a1 + 8) = &unk_250515E90;
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = &unk_2505174E0;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      sub_2341CD8A4(a1 + 32, a2 + 32);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      break;
    case 5:
      v10 = *(_OWORD *)(a2 + 24);
      *v3 = *v4;
      *(_OWORD *)(a1 + 24) = v10;
      v11 = *(_OWORD *)(a2 + 40);
      v12 = *(_OWORD *)(a2 + 56);
      v13 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = v13;
      *(_OWORD *)(a1 + 40) = v11;
      *(_OWORD *)(a1 + 56) = v12;
      break;
    case 6:
      *(_WORD *)v3 = *(_WORD *)v4;
      break;
    default:
      if ((unint64_t)(*(_QWORD *)a2 - 7) <= 2)
        *(_BYTE *)v3 = *(_BYTE *)v4;
      break;
  }
  return a1;
}

_QWORD *sub_23423EDD4(_QWORD *a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void (*v4)(_QWORD *);
  void (*v5)(_QWORD *);
  void (*v6)(_QWORD *);
  void (*v7)(_QWORD *);
  void (*v8)(_QWORD *);
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  *a1 = &off_250517EC8;
  a1[538] = &unk_250517F20;
  a1[539] = &unk_250517FC8;
  sub_23423EF94(a1 + 1141, 0);
  v2 = (void (***)(_QWORD))a1[1139];
  a1[1139] = 0;
  if (v2)
  {
    (**v2)(v2);
    j__free(v2);
  }
  v3 = (void (***)(_QWORD))a1[1138];
  a1[1138] = 0;
  if (v3)
  {
    (**v3)(v3);
    j__free(v3);
  }
  sub_23421F200((uint64_t)(a1 + 657));
  a1[606] = &off_250517DE0;
  sub_2342293C4(a1 + 618);
  v4 = (void (*)(_QWORD *))a1[603];
  if (v4)
  {
    a1[603] = 0;
    v4(a1 + 601);
  }
  v5 = (void (*)(_QWORD *))a1[598];
  if (v5)
  {
    a1[598] = 0;
    v5(a1 + 596);
  }
  v6 = (void (*)(_QWORD *))a1[593];
  if (v6)
  {
    a1[593] = 0;
    v6(a1 + 591);
  }
  v7 = (void (*)(_QWORD *))a1[588];
  if (v7)
  {
    a1[588] = 0;
    v7(a1 + 586);
  }
  v8 = (void (*)(_QWORD *))a1[583];
  if (v8)
  {
    a1[583] = 0;
    v8(a1 + 581);
  }
  sub_2341B14B0(a1 + 552);
  v9 = (_QWORD *)a1[551];
  if (v9 == a1 + 548)
  {
    v10 = 4;
    v9 = a1 + 548;
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  v11 = (_QWORD *)a1[547];
  if (v11 == a1 + 544)
  {
    v12 = 4;
    v11 = a1 + 544;
    goto LABEL_24;
  }
  if (v11)
  {
    v12 = 5;
LABEL_24:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  *a1 = &unk_250517410;
  sub_2341F3DE0((uint64_t)(a1 + 2));
  return a1;
}

void sub_23423EF94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_23423EFC0(v3);
    j__free(v4);
  }
}

uint64_t sub_23423EFC0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    j__free(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    j__free(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    j__free(*(void **)a1);
    *(_QWORD *)a1 = 0;
  }
  return a1;
}

uint64_t sub_23423F01C(_QWORD **a1, uint64_t a2)
{
  sub_23422CAC8(*a1, a2);
  return 0;
}

uint64_t sub_23423F038(_QWORD **a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != **a1)
    return 0;
  *a1[1] = a2;
  return 1;
}

BOOL sub_23423F08C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_2341D2CD4(a2 + 40, *(_QWORD *)a1);
  if (result)
  {
    **(_QWORD **)(a1 + 8) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_23423F0C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250517AA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_250517B08;
  v2 = a1 + 16;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = xmmword_25615DD84;
  *(_BYTE *)(a1 + 56) = 1;
  *(_WORD *)(a1 + 58) = 5540;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = &unk_250504C30;
  v3 = (_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = &unk_250517870;
  *(_QWORD *)(a1 + 80) = &unk_250517830;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = &unk_250517940;
  *(_QWORD *)(a1 + 144) = a1 + 88;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = sub_2341B1C28();
  *(_DWORD *)(a1 + 208) = v4;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_WORD *)(a1 + 228) = 1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 72) = &off_2505049F8;
  *(_QWORD *)(a1 + 80) = &unk_250504A88;
  *v3 = &unk_250504AC8;
  *(_BYTE *)(a1 + 236) = 0;
  sub_234132844(a1 + 240, 32, 65, 0x20uLL);
  *(_QWORD *)(a1 + 240) = &off_250505898;
  nullsub_13(a1 + 480, v5);
  bzero((void *)(a1 + 600), 0x400uLL);
  *(_BYTE *)(a1 + 1728) = 0;
  nullsub_13(a1 + 1768, v6);
  *(_DWORD *)(a1 + 1888) = 0;
  *(_WORD *)(a1 + 1892) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1936) = 32;
  *(_BYTE *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_QWORD *)(a1 + 1968) = &unk_250517940;
  *(_QWORD *)(a1 + 2008) = v2;
  return a1;
}

uint64_t sub_23423F254()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return sub_23423F268();
}

void sub_23423F268(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x20000003ELL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_23423F684((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250518138;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_23423F58C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23423F5D8(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_23423F58C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_2505181B8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_23423F5D8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_2505181F8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_23423F684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_2505180E8;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

_QWORD *sub_23423F6E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_23423F794(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x23493E704);
}

uint64_t sub_23423F854(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  __int128 v17;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17 = 0uLL;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 62 && *(_DWORD *)(a3 + 8) == 3)
      {
        sub_233D0F280(&v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v13 + 48))(v13, a3, a4, &v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_23423F93C(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_23423F93C(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  if (!*(_BYTE *)(result + 104))
  {
    *(_BYTE *)(result + 104) = 1;
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    v3 = *(_QWORD *)(result + 64);
    if (v3)
    {
      return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 48))(v3, &v5);
    }
    else
    {
      v4 = sub_23423F254();
      return sub_23423F990(v4);
    }
  }
  return result;
}

_QWORD *sub_23423F990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 104))
  {
    LODWORD(v8) = 33;
    *((_QWORD *)&v8 + 1) = "src/controller/TypedCommandCallback.h";
    v9 = 84;
    sub_23423F93C(a1, a2, &v8);
  }
  v10 = a2;
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v10);
  v6 = (_QWORD *)sub_23423F254();
  return sub_23423FA0C(v6, v7);
}

_QWORD *sub_23423FA0C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

_QWORD *sub_23423FB74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250518138;
  result[1] = v3;
  return result;
}

uint64_t sub_23423FBAC(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250518138;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_23423FBD0(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_23423FBD8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518198))
    return a1 + 8;
  else
    return 0;
}

void *sub_23423FC14()
{
  return &unk_250518198;
}

void sub_23423FC20(_QWORD **a1, _QWORD *a2)
{
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (*a2)
  {
    v3 = (void *)sub_2341FD350();
    j__free(v3);
  }
  v4 = *a1;
  if (v4)
  {
    v5 = (_QWORD *)v4[12];
    if (v5 == v4 + 9)
    {
      v6 = 4;
      v5 = v4 + 9;
    }
    else
    {
      if (!v5)
        goto LABEL_10;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
    v7 = (_QWORD *)v4[8];
    if (v7 == v4 + 5)
    {
      v8 = 4;
      v7 = v4 + 5;
    }
    else
    {
      if (!v7)
        goto LABEL_15;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
    v9 = (_QWORD *)v4[4];
    if (v9 == v4 + 1)
    {
      v10 = 4;
      v9 = v4 + 1;
    }
    else
    {
      if (!v9)
      {
LABEL_20:
        j__free(v4);
        return;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_20;
  }
}

void sub_23423FCF4()
{
  JUMPOUT(0x23493E704);
}

double sub_23423FD08@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0F088(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

__n128 sub_23423FD10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505181F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23423FD4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505181F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23423FD70(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_23423FD78(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518258))
    return a1 + 8;
  else
    return 0;
}

void *sub_23423FDB4()
{
  return &unk_250518258;
}

void sub_23423FDC0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (*(_QWORD *)(a1 + 8))
  {
    v2 = (void *)sub_2341FD350();
    j__free(v2);
  }
  v3 = *(_QWORD **)a1;
  if (v3)
  {
    v4 = (_QWORD *)v3[12];
    if (v4 == v3 + 9)
    {
      v5 = 4;
      v4 = v3 + 9;
    }
    else
    {
      if (!v4)
        goto LABEL_10;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
    v6 = (_QWORD *)v3[8];
    if (v6 == v3 + 5)
    {
      v7 = 4;
      v6 = v3 + 5;
    }
    else
    {
      if (!v6)
        goto LABEL_15;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_15:
    v8 = (_QWORD *)v3[4];
    if (v8 == v3 + 1)
    {
      v9 = 4;
      v8 = v3 + 1;
    }
    else
    {
      if (!v8)
      {
LABEL_20:
        j__free(v3);
        return;
      }
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    goto LABEL_20;
  }
}

__n128 sub_23423FE94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23423FED0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23423FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23423FF00(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505182E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23423FF3C()
{
  return &unk_2505182E8;
}

__n128 sub_23423FF48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23423FF84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23423FFA8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23423FFDC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518368))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240018()
{
  return &unk_250518368;
}

void sub_234240024(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 62;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234240440((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_2505183D8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234240348(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234240394(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234240348(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250518458;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234240394(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250518498;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234240440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250518388;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_2342404A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _OWORD v17[2];

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    memset(v17, 0, sizeof(v17));
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 62 && *(_DWORD *)(a3 + 8) == 1)
      {
        sub_233D0EF38(v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_23424058C(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_23424058C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_2505183D8;
  result[1] = v3;
  return result;
}

uint64_t sub_2342405C4(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_2505183D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342405E8(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_2342405F0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518438))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424062C()
{
  return &unk_250518438;
}

double sub_234240638@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D08650(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234240640(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424067C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518498;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2342406A0(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_2342406A8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505184F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342406E4()
{
  return &unk_2505184F8;
}

__n128 sub_2342406F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424072C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518518;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234240750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23424075C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518588))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240798()
{
  return &unk_250518588;
}

__n128 sub_2342407A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505185A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342407E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505185A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234240804(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234240838(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518608))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240874()
{
  return &unk_250518608;
}

void sub_234240880(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 48;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234240C9C((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250518678;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234240BA4(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234240BF0(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234240BA4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_2505186F8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234240BF0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250518738;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234240C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250518628;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234240CFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v18 = 0;
    v19 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 48 && *(_DWORD *)(a3 + 8) == 1)
      {
        sub_233D045B0((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234240DE8(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234240DE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250518678;
  result[1] = v3;
  return result;
}

uint64_t sub_234240E20(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250518678;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234240E44(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234240E4C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505186D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240E88()
{
  return &unk_2505186D8;
}

double sub_234240E94@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D04230(*(unsigned __int16 **)(a1 + 8), a2, a3, a4);
}

__n128 sub_234240E9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234240ED8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234240EFC(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234240F04(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518798))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240F40()
{
  return &unk_250518798;
}

__n128 sub_234240F4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505187B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234240F88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505187B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234240FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234240FB8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518828))
    return a1 + 8;
  else
    return 0;
}

void *sub_234240FF4()
{
  return &unk_250518828;
}

__n128 sub_234241000(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518848;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424103C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518848;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234241060(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234241094(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505188A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342410D0()
{
  return &unk_2505188A8;
}

void sub_2342410DC(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x40000003ELL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342414F8((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250518918;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234241400(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23424144C(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234241400(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250518998;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_23424144C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_2505189D8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_2342414F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_2505188C8;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234241558(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _OWORD v17[2];

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    memset(v17, 0, sizeof(v17));
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 62 && *(_DWORD *)(a3 + 8) == 5)
      {
        sub_233D0F604(v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234241644(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234241644(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250518918;
  result[1] = v3;
  return result;
}

uint64_t sub_23424167C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250518918;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342416A0(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_2342416A8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518978))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342416E4()
{
  return &unk_250518978;
}

double sub_2342416F0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0F3A4(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_2342416F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505189D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234241734(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505189D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234241758(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234241760(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518A38))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424179C()
{
  return &unk_250518A38;
}

__n128 sub_2342417A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342417E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518A58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234241808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234241814(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518AC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234241850()
{
  return &unk_250518AC8;
}

__n128 sub_23424185C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234241898(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342418BC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_2342418F0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518B48))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424192C()
{
  return &unk_250518B48;
}

void sub_234241938(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x60000003ELL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234241D54((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250518BB8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234241C5C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234241CA8(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234241C5C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250518C38;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234241CA8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250518C78;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234241D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250518B68;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234241DB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  __int16 v17;
  char v18;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17 = 0;
    v18 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 62 && *(_DWORD *)(a3 + 8) == 8)
      {
        sub_233D0FD14((uint64_t)&v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(_QWORD *)v13 + 48))(v13, a3, a4, &v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234241EA0(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234241EA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250518BB8;
  result[1] = v3;
  return result;
}

uint64_t sub_234241ED8(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250518BB8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234241EFC(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234241F04(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518C18))
    return a1 + 8;
  else
    return 0;
}

void *sub_234241F40()
{
  return &unk_250518C18;
}

double sub_234241F4C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0F754(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234241F54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518C78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234241F90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518C78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234241FB4(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234241FBC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518CD8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234241FF8()
{
  return &unk_250518CD8;
}

__n128 sub_234242004(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234242040(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234242064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234242070(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518D68))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342420AC()
{
  return &unk_250518D68;
}

__n128 sub_2342420B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518D88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342420F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518D88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234242118(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23424214C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518DE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234242188()
{
  return &unk_250518DE8;
}

void sub_234242194(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0xB0000003ELL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250518E58;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2342424B8(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234242504(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_2342424B8(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250518ED8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234242504(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250518F18;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_2342425B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250518E08;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234242610(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  const char *v10;
  int v11;

  if (!*(_BYTE *)(result + 104))
  {
    *(_BYTE *)(result + 104) = 1;
    if (a5)
    {
      v9 = 142;
      v10 = "src/controller/TypedCommandCallback.h";
      v11 = 164;
      v5 = *(_QWORD *)(result + 64);
      if (v5)
        return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v9);
      goto LABEL_8;
    }
    v6 = *(_QWORD *)(result + 32);
    if (!v6)
    {
LABEL_8:
      v7 = sub_23423F254();
      return sub_23424269C(v7);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v6 + 48))(v6, a3, a4, &v8);
  }
  return result;
}

_QWORD *sub_23424269C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250518E58;
  result[1] = v3;
  return result;
}

uint64_t sub_2342426D4(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250518E58;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342426F8(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234242700(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518EB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424273C()
{
  return &unk_250518EB8;
}

__n128 sub_234242748(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518F18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234242784(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518F18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2342427A8(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_2342427B0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250518F78))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342427EC()
{
  return &unk_250518F78;
}

__n128 sub_2342427F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250518F98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234242834(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250518F98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234242858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234242864(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519008))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342428A0()
{
  return &unk_250519008;
}

__n128 sub_2342428AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342428E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424290C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234242940(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519088))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424297C()
{
  return &unk_250519088;
}

_QWORD *sub_234242988(_QWORD *a1)
{
  *a1 = &off_2505190A8;
  sub_2341CD754(a1 + 1);
  return a1;
}

void sub_2342429B8(_QWORD *a1)
{
  *a1 = &off_2505190A8;
  sub_2341CD754(a1 + 1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_2342429F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_2505190A8;
  sub_2341CD8A4(v2 + 1, v1);
  return v2;
}

uint64_t sub_234242A38(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2505190A8;
  return sub_2341CD8A4(a2 + 1, a1 + 8);
}

uint64_t sub_234242A54(uint64_t a1)
{
  return sub_2341CD754(a1 + 8);
}

void sub_234242A5C(char *a1)
{
  sub_2341CD754(a1 + 8);
  operator delete(a1);
}

_BYTE *sub_234242A84(uint64_t a1)
{
  NSObject *v2;
  char v3;
  _BYTE *v4;
  int v5;
  _BYTE *result;
  uint8_t v7[8];
  uint64_t v8;

  v2 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Failsafe disarmed", v7, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v5 = *(unsigned __int8 *)(a1 + 32);
  v4 = (_BYTE *)(a1 + 32);
  v3 = v5;
  if (v5)
  {
    v8 = *(_QWORD *)sub_233C25EA4(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    v3 = 1;
  }
  v7[0] = v3;
  result = sub_234242BA4(v7);
  if (v7[0])
    return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  return result;
}

uint64_t sub_234242B5C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519108))
    return a1 + 8;
  else
    return 0;
}

void *sub_234242B98()
{
  return &unk_250519108;
}

_BYTE *sub_234242BA4(_BYTE *result)
{
  uint64_t *v1;
  _QWORD *v2;

  if (*result)
  {
    v1 = (uint64_t *)sub_233C25EA4(result);
    v2 = (_QWORD *)sub_2341CD3C0(*v1);
    return (_BYTE *)sub_2341CB8F8(v2);
  }
  return result;
}

_QWORD *sub_234242BD0(_QWORD *a1)
{
  *a1 = &off_250519128;
  sub_2341CD754(a1 + 1);
  return a1;
}

void sub_234242C00(_QWORD *a1)
{
  *a1 = &off_250519128;
  sub_2341CD754(a1 + 1);
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234242C40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_250519128;
  sub_2341CD8A4(v2 + 1, v1);
  return v2;
}

uint64_t sub_234242C80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250519128;
  return sub_2341CD8A4(a2 + 1, a1 + 8);
}

uint64_t sub_234242C9C(uint64_t a1)
{
  return sub_2341CD754(a1 + 8);
}

void sub_234242CA4(char *a1)
{
  sub_2341CD754(a1 + 8);
  operator delete(a1);
}

_BYTE *sub_234242CCC(uint64_t a1, __int128 *a2)
{
  NSObject *v3;
  char *v4;
  uint8_t v5;
  _BYTE *v6;
  int v7;
  _BYTE *result;
  __int128 v9;
  uint64_t v10;
  uint8_t buf[16];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v3 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = v9;
    v12 = v10;
    v4 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_233BF3000, v3, OS_LOG_TYPE_DEFAULT, "Ignoring failure to disarm failsafe: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = v9;
    v12 = v10;
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  v7 = *(unsigned __int8 *)(a1 + 32);
  v6 = (_BYTE *)(a1 + 32);
  v5 = v7;
  if (v7)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)sub_233C25EA4(v6);
    (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 24))(*(_QWORD *)&buf[8]);
    v5 = 1;
  }
  buf[0] = v5;
  result = sub_234242BA4(buf);
  if (buf[0])
    return (_BYTE *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&buf[8] + 32))(*(_QWORD *)&buf[8]);
  return result;
}

uint64_t sub_234242E28(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519188))
    return a1 + 8;
  else
    return 0;
}

void *sub_234242E64()
{
  return &unk_250519188;
}

double sub_234242E70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, _QWORD *a4@<X8>)
{
  double result;
  _BYTE v10[72];

  result = sub_234104468((uint64_t)v10);
  if (*(_DWORD *)(a2 + 4) == 48 && *(_DWORD *)(a2 + 8) == 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v10, a4);
    if (!*(_DWORD *)a4)
      return sub_233D04124(a3, (uint64_t)v10, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
  return result;
}

void sub_234242F14(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 48 && *(_DWORD *)(a2 + 8) == 2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233CFDFA8((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234242FB8(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 48 && *(_DWORD *)(a2 + 8) == 3)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233CFDFA8((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_23424305C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 48 && *(_DWORD *)(a2 + 8) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_23410499C((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243100(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v9;
  const char *v10;
  int v11;
  _BYTE v12[72];

  sub_234104468((uint64_t)v12);
  if (*(_DWORD *)(a2 + 4) != 40 || *(_DWORD *)(a2 + 8) != 2)
  {
    v9 = 169;
    v10 = "src/app/ClusterStateCache.h";
    v11 = 142;
LABEL_6:
    *(_DWORD *)a4 = v11;
    *(_QWORD *)(a4 + 8) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v12, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_233D45404((uint64_t)v12, a3, (_QWORD *)a4);
    if (!*(_DWORD *)a4)
    {
      v11 = 0;
      v9 = 61;
      v10 = "src/app/data-model/Decode.h";
      goto LABEL_6;
    }
  }
}

void sub_2342431C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 40 && *(_DWORD *)(a2 + 8) == 4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_2341049E0((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

uint64_t sub_23424326C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  int v6;

  v6 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_234104A50(a1, &v6, (uint64_t)a3);
  if (!*(_DWORD *)a3)
  {
    *a2 = v6;
    *(_DWORD *)a3 = 0;
    a3[1] = "src/lib/core/TLVReader.h";
    *((_DWORD *)a3 + 4) = 534;
  }
  return result;
}

void sub_2342432D0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 49 && *(_DWORD *)(a2 + 8) == 3)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_23410492C((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243374(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 56 && *(_DWORD *)(a2 + 8) == 65532)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_234104A50((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_23424341C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 56 && *(_DWORD *)(a2 + 8) == 10)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_23410492C((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_2342434C0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 56 && *(_DWORD *)(a2 + 8) == 11)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_23410492C((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243564(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 56 && *(_DWORD *)(a2 + 8) == 4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233D0AC9C((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 56 && *(_DWORD *)(a2 + 8) == 3)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233D0D10C((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_2342436AC(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 48 && *(_DWORD *)(a2 + 8) == 4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_2341046D0((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243750(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 62 && *(_DWORD *)(a2 + 8) == 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233D45328(a3, (uint64_t)v9, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_2342437F4(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 65532)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_234104A50((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_23424389C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 6)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_233D45D0C((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243940(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 7)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_234104C8C((uint64_t)v9, a3, a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_2342439E4(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_234104A50((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243A88(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_234104A50((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243B2C(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE v9[72];

  sub_234104468((uint64_t)v9);
  if (*(_DWORD *)(a2 + 4) == 70 && *(_DWORD *)(a2 + 8) == 2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_234100268(a1, (unsigned __int16 *)a2, (uint64_t)v9, a4);
    if (!*(_DWORD *)a4)
      sub_2341049E0((uint64_t)v9, a3, (uint64_t)a4);
  }
  else
  {
    *(_DWORD *)a4 = 142;
    a4[1] = "src/app/ClusterStateCache.h";
    *((_DWORD *)a4 + 4) = 169;
  }
}

void sub_234243BD0(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 56;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_2505191A8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234243EF4(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234243F40(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234243EF4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250519228;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234243F40(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250519268;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234243FEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_2505191A8;
  result[1] = v3;
  return result;
}

uint64_t sub_234244024(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_2505191A8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234244048(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234244050(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519208))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424408C()
{
  return &unk_250519208;
}

double sub_234244098@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0C258(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_2342440A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342440DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234244100(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234244108(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505192C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234244144()
{
  return &unk_2505192C8;
}

__n128 sub_234244150(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505192E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424418C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505192E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342441B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_2342441BC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519348))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342441F8()
{
  return &unk_250519348;
}

__n128 sub_234244204(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234244240(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234244264(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234244298(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505193C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342442D4()
{
  return &unk_2505193C8;
}

void sub_2342442E0(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x200000038;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342446FC((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250519438;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234244604(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234244650(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234244604(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_2505194B8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234244650(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_2505194F8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_2342446FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_2505193E8;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_23424475C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  char v17;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 56 && *(_DWORD *)(a3 + 8) == 3)
      {
        sub_233D0CA58(&v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v13 + 48))(v13, a3, a4, &v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234244844(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234244844(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250519438;
  result[1] = v3;
  return result;
}

uint64_t sub_23424487C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250519438;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342448A0(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_2342448A8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519498))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342448E4()
{
  return &unk_250519498;
}

double sub_2342448F0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0C6F4(*(uint64_t **)(a1 + 8), a2, a3, a4);
}

__n128 sub_2342448F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505194F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234244934(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505194F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234244958(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234244960(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519558))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424499C()
{
  return &unk_250519558;
}

__n128 sub_2342449A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342449E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519578;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234244A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234244A14(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505195E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234244A50()
{
  return &unk_2505195E8;
}

__n128 sub_234244A5C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234244A98(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519608;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234244ABC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234244AF0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519668))
    return a1 + 8;
  else
    return 0;
}

void *sub_234244B2C()
{
  return &unk_250519668;
}

void sub_234244B38(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x400000038;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250519688;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234244E5C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234244EA8(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234244E5C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250519708;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234244EA8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250519748;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234244F54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250519688;
  result[1] = v3;
  return result;
}

uint64_t sub_234244F8C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250519688;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234244FB0(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234244FB8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505196E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234244FF4()
{
  return &unk_2505196E8;
}

double sub_234245000@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0CB2C(*(uint64_t **)(a1 + 8), a2, a3, a4);
}

__n128 sub_234245008(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234245044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519748;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234245068(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234245070(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505197A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342450AC()
{
  return &unk_2505197A8;
}

__n128 sub_2342450B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2505197C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342450F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2505197C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234245118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234245124(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519828))
    return a1 + 8;
  else
    return 0;
}

void *sub_234245160()
{
  return &unk_250519828;
}

__n128 sub_23424516C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519848;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342451A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519848;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342451CC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234245200(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505198A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424523C()
{
  return &unk_2505198A8;
}

void sub_234245248(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x500000038;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_2505198C8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_23424556C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_2342455B8(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_23424556C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250519948;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_2342455B8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250519988;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234245664(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_2505198C8;
  result[1] = v3;
  return result;
}

uint64_t sub_23424569C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_2505198C8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342456C0(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_2342456C8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519928))
    return a1 + 8;
  else
    return 0;
}

void *sub_234245704()
{
  return &unk_250519928;
}

double sub_234245710@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0CDAC(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234245718(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234245754(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234245778(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234245780(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_2505199E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342457BC()
{
  return &unk_2505199E8;
}

__n128 sub_2342457C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519A08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234245804(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519A08;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234245828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234245834(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519A68))
    return a1 + 8;
  else
    return 0;
}

void *sub_234245870()
{
  return &unk_250519A68;
}

__n128 sub_23424587C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519A88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342458B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519A88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342458DC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234245910(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519AE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424594C()
{
  return &unk_250519AE8;
}

void sub_234245958(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 49;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234245D74((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250519B58;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234245C7C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234245CC8(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234245C7C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250519BD8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234245CC8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250519C18;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234245D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250519B08;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234245DD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[208];

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v17[8] = 0;
    v17[32] = 0;
    v6 = 0x8E0000008ELL;
    v17[120] = 0;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 49 && *(_DWORD *)(a3 + 8) == 1)
      {
        sub_233D05A80((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234245EC8(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234245EC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250519B58;
  result[1] = v3;
  return result;
}

uint64_t sub_234245F00(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250519B58;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234245F24(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234245F2C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519BB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234245F68()
{
  return &unk_250519BB8;
}

double sub_234245F74@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D05684(*(_BYTE **)(a1 + 8), a2, a3, a4);
}

__n128 sub_234245F7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234245FB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519C18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234245FDC(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234245FE4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519C78))
    return a1 + 8;
  else
    return 0;
}

void *sub_234246020()
{
  return &unk_250519C78;
}

__n128 sub_23424602C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234246068(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519C98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234246098(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519D08))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342460D4()
{
  return &unk_250519D08;
}

__n128 sub_2342460E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519D28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424611C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519D28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234246140(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234246174(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519D88))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342461B0()
{
  return &unk_250519D88;
}

void sub_2342461BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x200000030;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342465D8((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_250519DF8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2342464E0(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23424652C(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_2342464E0(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_250519E78;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_23424652C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_250519EB8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_2342465D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_250519DA8;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234246638(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v18 = 0;
    v19 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 48 && *(_DWORD *)(a3 + 8) == 3)
      {
        sub_233D04904((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234246724(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234246724(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_250519DF8;
  result[1] = v3;
  return result;
}

uint64_t sub_23424675C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_250519DF8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234246780(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234246788(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519E58))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342467C4()
{
  return &unk_250519E58;
}

double sub_2342467D0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D046BC(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_2342467D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234246814(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519EB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234246838(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234246840(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519F18))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424687C()
{
  return &unk_250519F18;
}

__n128 sub_234246888(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519F38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342468C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519F38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342468E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_2342468F4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_250519FA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234246930()
{
  return &unk_250519FA8;
}

__n128 sub_23424693C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_250519FC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234246978(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_250519FC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424699C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_2342469D0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A028))
    return a1 + 8;
  else
    return 0;
}

void *sub_234246A0C()
{
  return &unk_25051A028;
}

void sub_234246A18(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x100000038;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051A048;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234246D3C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234246D88(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234246D3C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051A0C8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234246D88(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051A108;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234246E34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051A048;
  result[1] = v3;
  return result;
}

uint64_t sub_234246E6C(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051A048;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234246E90(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234246E98(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A0A8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234246ED4()
{
  return &unk_25051A0A8;
}

double sub_234246EE0@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0C4B0(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234246EE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234246F24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234246F48(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234246F50(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A168))
    return a1 + 8;
  else
    return 0;
}

void *sub_234246F8C()
{
  return &unk_25051A168;
}

__n128 sub_234246F98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234246FD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A188;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234246FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234247004(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A1E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234247040()
{
  return &unk_25051A1E8;
}

__n128 sub_23424704C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A208;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234247088(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A208;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342470AC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_2342470E0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A268))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424711C()
{
  return &unk_25051A268;
}

void sub_234247128(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x200000031;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234247544((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051A2D8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_23424744C(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234247498(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_23424744C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051A358;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234247498(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051A398;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234247544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_25051A288;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_2342475A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[88];

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v17[8] = 0;
    v17[32] = 0;
    v17[40] = 0;
    v6 = 0x8E0000008ELL;
    v17[64] = 0;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 49 && *(_DWORD *)(a3 + 8) == 5)
      {
        sub_233D06564((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_23424769C(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_23424769C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051A2D8;
  result[1] = v3;
  return result;
}

uint64_t sub_2342476D4(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051A2D8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342476F8(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234247700(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A338))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424773C()
{
  return &unk_25051A338;
}

double sub_234247748@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D05CA8(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234247750(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424778C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2342477B0(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_2342477B8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A3F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342477F4()
{
  return &unk_25051A3F8;
}

__n128 sub_234247800(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424783C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234247860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23424786C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A488))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342478A8()
{
  return &unk_25051A488;
}

__n128 sub_2342478B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342478F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234247914(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234247948(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A508))
    return a1 + 8;
  else
    return 0;
}

void *sub_234247984()
{
  return &unk_25051A508;
}

void sub_234247990(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x300000031;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234247544((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051A528;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234247CB4(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234247D00(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234247CB4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051A5A8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234247D00(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051A5E8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234247DAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051A528;
  result[1] = v3;
  return result;
}

uint64_t sub_234247DE4(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051A528;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234247E08(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234247E10(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A588))
    return a1 + 8;
  else
    return 0;
}

void *sub_234247E4C()
{
  return &unk_25051A588;
}

double sub_234247E58@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D06034(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234247E60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234247E9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234247EC0(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234247EC8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A648))
    return a1 + 8;
  else
    return 0;
}

void *sub_234247F04()
{
  return &unk_25051A648;
}

__n128 sub_234247F10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234247F4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234247F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234247F7C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A6C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234247FB8()
{
  return &unk_25051A6C8;
}

__n128 sub_234247FC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234248000(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234248024(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234248058(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A748))
    return a1 + 8;
  else
    return 0;
}

void *sub_234248094()
{
  return &unk_25051A748;
}

void sub_2342480A0(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x600000031;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342484BC((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051A7B8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_2342483C4(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234248410(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_2342483C4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051A838;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234248410(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051A878;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_2342484BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_25051A768;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_23424851C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[40];

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v17[8] = 0;
    v17[32] = 0;
    v6 = 0x8E0000008ELL;
    v17[36] = 0;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 49 && *(_DWORD *)(a3 + 8) == 7)
      {
        sub_233D0695C((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234248610(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234248610(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051A7B8;
  result[1] = v3;
  return result;
}

uint64_t sub_234248648(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051A7B8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_23424866C(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234248674(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A818))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342486B0()
{
  return &unk_25051A818;
}

__n128 sub_2342486BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342486F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A878;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23424871C(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234248724(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A8D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234248760()
{
  return &unk_25051A8D8;
}

__n128 sub_23424876C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A8F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342487A8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A8F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342487CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_2342487D8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A968))
    return a1 + 8;
  else
    return 0;
}

void *sub_234248814()
{
  return &unk_25051A968;
}

__n128 sub_234248820(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051A988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424885C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051A988;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234248880(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_2342488B4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051A9E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342488F0()
{
  return &unk_25051A9E8;
}

void sub_2342488FC(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 70;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234248D18((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051AA58;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234248C20(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234248C6C(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234248C20(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051AAD8;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234248C6C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051AB18;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234248D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_25051AA08;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234248D78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  int v17;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 70 && *(_DWORD *)(a3 + 8) == 1)
      {
        sub_233D11F2C(&v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, a3, a4, &v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234248E60(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234248E60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051AA58;
  result[1] = v3;
  return result;
}

uint64_t sub_234248E98(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051AA58;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234248EBC(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234248EC4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AAB8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234248F00()
{
  return &unk_25051AAB8;
}

double sub_234248F0C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D11B30(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

__n128 sub_234248F14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AB18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234248F50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AB18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234248F74(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234248F7C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AB78))
    return a1 + 8;
  else
    return 0;
}

void *sub_234248FB8()
{
  return &unk_25051AB78;
}

__n128 sub_234248FC4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234249000(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AB98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234249024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234249030(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AC08))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424906C()
{
  return &unk_25051AC08;
}

__n128 sub_234249078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AC28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342490B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AC28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342490D8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23424910C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AC88))
    return a1 + 8;
  else
    return 0;
}

void *sub_234249148()
{
  return &unk_25051AC88;
}

void sub_234249154()
{
  JUMPOUT(0x23493E704);
}

__n128 sub_234249168(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051ACA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342491A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051ACA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342491C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2342491D4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AD08))
    return a1 + 8;
  else
    return 0;
}

void *sub_234249210()
{
  return &unk_25051AD08;
}

__n128 sub_23424921C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234249258(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AD28;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424927C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a3;
  v5 = *((_QWORD *)a3 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v4);
}

uint64_t sub_2342492B4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AD88))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342492F0()
{
  return &unk_25051AD88;
}

void sub_2342492FC(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x300000046;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234249718((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051ADF8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234249620(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23424966C(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234249620(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051AE78;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_23424966C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051AEB8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234249718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_25051ADA8;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234249778(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  int v17;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 70 && *(_DWORD *)(a3 + 8) == 4)
      {
        sub_233D122EC(&v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, a3, a4, &v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_234249860(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_234249860(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051ADF8;
  result[1] = v3;
  return result;
}

uint64_t sub_234249898(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051ADF8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_2342498BC(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_2342498C4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AE58))
    return a1 + 8;
  else
    return 0;
}

void *sub_234249900()
{
  return &unk_25051AE58;
}

double sub_23424990C@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D11E4C(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

__n128 sub_234249914(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AEB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234249950(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AEB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234249974(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_23424997C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AF18))
    return a1 + 8;
  else
    return 0;
}

void *sub_2342499B8()
{
  return &unk_25051AF18;
}

__n128 sub_2342499C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AF38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234249A00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AF38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234249A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234249A30(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051AFA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234249A6C()
{
  return &unk_25051AFA8;
}

__n128 sub_234249A78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051AFC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234249AB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051AFC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234249AD8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234249B0C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B028))
    return a1 + 8;
  else
    return 0;
}

void *sub_234249B48()
{
  return &unk_25051B028;
}

void sub_234249B54(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x400000030;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234249F70((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051B098;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234249E78(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_234249EC4(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234249E78(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051B118;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_234249EC4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051B158;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_234249F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_25051B048;
  sub_233CF11B0(a1 + 8, a2);
  sub_233CF11B0(a1 + 40, a3);
  sub_233CF11B0(a1 + 72, a4);
  *(_BYTE *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_234249FD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(result + 104))
  {
    v5 = result;
    *(_BYTE *)(result + 104) = 1;
    v17[0] = 0;
    v18 = 0;
    v19 = 0;
    v6 = 0x8E0000008ELL;
    if (a5)
    {
      if (*(_DWORD *)(a3 + 4) == 48 && *(_DWORD *)(a3 + 8) == 5)
      {
        sub_233D04A10((uint64_t)v17, a5, (uint64_t)v16);
        v6 = v16[0];
        if (!LODWORD(v16[0]))
        {
          v13 = *(_QWORD *)(v5 + 32);
          if (v13)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a3, a4, v17);
          goto LABEL_17;
        }
        v10 = (const char *)v16[1];
        v9 = v16[2];
LABEL_12:
        v15[0] = v6;
        v15[1] = v10;
        v15[2] = v9;
        v12 = *(_QWORD *)(v5 + 64);
        if (v12)
          return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v15);
LABEL_17:
        v14 = sub_23423F254();
        return sub_23424A0BC(v14);
      }
      v9 = 0x7F0000007FLL;
    }
    else
    {
      v9 = 0x7800000078;
    }
    v10 = "src/controller/TypedCommandCallback.h";
    goto LABEL_12;
  }
  return result;
}

_QWORD *sub_23424A0BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051B098;
  result[1] = v3;
  return result;
}

uint64_t sub_23424A0F4(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051B098;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_23424A118(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_23424A120(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B0F8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424A15C()
{
  return &unk_25051B0F8;
}

double sub_23424A168@<D0>(char *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_233CFA4BC(a1, a2, a3);
}

__n128 sub_23424A170(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424A1AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B158;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23424A1D0(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_23424A1D8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B1B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424A214()
{
  return &unk_25051B1B8;
}

__n128 sub_23424A220(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B1D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424A25C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B1D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424A280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23424A28C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B248))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424A2C8()
{
  return &unk_25051B248;
}

__n128 sub_23424A2D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424A310(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424A334(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23424A368(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B2C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424A3A4()
{
  return &unk_25051B2C8;
}

uint64_t sub_23424A3D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[18];
  __int128 *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_BYTE *)(result + 8))
  {
    *(_DWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    *(_DWORD *)(a5 + 16) = 41;
  }
  else
  {
    v8 = (_QWORD *)result;
    memset(v17, 0, sizeof(v17));
    v19 = 0u;
    v18 = &v19;
    v21 = 0;
    v22 = 0;
    v20 = &v21;
    v10 = (_QWORD *)(result + 72);
    v9 = *(char **)(result + 72);
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 50) = *(_QWORD *)&v17[10];
    *(_WORD *)(result + 58) = 0;
    v11 = (_QWORD *)(result + 64);
    sub_233CF19DC(result + 64, v9);
    v12 = v19;
    *(v10 - 1) = v18;
    *v10 = v12;
    v13 = *((_QWORD *)&v19 + 1);
    v10[1] = *((_QWORD *)&v19 + 1);
    if (v13)
    {
      *(_QWORD *)(v12 + 16) = v10;
      v18 = &v19;
      v19 = 0uLL;
    }
    else
    {
      *v11 = v10;
    }
    v14 = v8 + 12;
    sub_233CF19DC((uint64_t)(v8 + 11), (char *)v8[12]);
    v15 = v21;
    v8[11] = v20;
    v8[12] = v15;
    v16 = v22;
    v8[13] = v22;
    if (v16)
    {
      *(_QWORD *)(v15 + 16) = v14;
      v15 = 0;
      v20 = &v21;
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v8[11] = v14;
    }
    sub_233CF19DC((uint64_t)&v20, (char *)v15);
    sub_233CF19DC((uint64_t)&v18, (char *)v19);
    *((_BYTE *)v8 + 130) = 0;
    v8[3] = 0;
    v8[4] = a4;
    v8[2] = 0;
    v8[15] = a2;
    *((_WORD *)v8 + 64) = a3;
    *((_BYTE *)v8 + 8) = 3;
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, a2, v8 + 35, v8 + 40, 0);
  }
  return result;
}

uint64_t sub_23424A568(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 3) = *(int *)((char *)a2 + 3);
  *(_DWORD *)a1 = v4;
  v5 = *((unsigned __int8 *)a2 + 7);
  *(_BYTE *)(a1 + 7) = v5;
  if (v5)
  {
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *((_BYTE *)a2 + 7) = 0;
  }
  v6 = *(_QWORD *)((char *)a2 + 10);
  *(_WORD *)(a1 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a1 + 10) = v6;
  sub_23424C428(a1 + 24, (_QWORD *)a2 + 3);
  sub_23424C428(a1 + 48, (_QWORD *)a2 + 6);
  return a1;
}

void sub_23424A5DC(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, int a4@<W3>, __int16 a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  char v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v13 = a2;
  LOWORD(v14) = a3;
  DWORD1(v14) = a4;
  BYTE8(v14) = 1;
  WORD5(v14) = a5;
  v11 = *a6;
  if (*a6)
    LODWORD(v15) = *((_DWORD *)a6 + 1);
  BYTE12(v14) = v11;
  v12 = *a7;
  if (*a7)
    v16 = *(_OWORD *)(a7 + 8);
  BYTE8(v15) = v12;
  LOBYTE(v17) = a11;
  *((_QWORD *)&v17 + 1) = a8;
  sub_23424A65C(a1, (uint64_t)&v13, a10, a9);
}

void sub_23424A65C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  _BYTE *v9;
  unsigned int *v10;
  _BYTE *v11;
  const void *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD v24[3];

  if (*((_BYTE *)a1 + 8))
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v5 = 78;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v5;
    return;
  }
  if (!*(_QWORD *)a2)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v5 = 79;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v5 = 80;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(a2 + 12) - 1000) >= 0x182B9)
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v5 = 83;
    goto LABEL_3;
  }
  v9 = (_BYTE *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32)
    && (*((_QWORD *)sub_233C05DB8((_BYTE *)(a2 + 32)) + 1) < 0x10uLL
     || *((_QWORD *)sub_233C05DB8((_BYTE *)(a2 + 32)) + 1) >= 0x21uLL))
  {
    *(_DWORD *)a4 = 47;
    *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v5 = 87;
    goto LABEL_3;
  }
  v20 = 0;
  v22 = 0u;
  v19 = 0u;
  v21 = &v22;
  v24[0] = 0;
  v24[1] = 0;
  v23 = v24;
  sub_23424A568((uint64_t)(a1 + 5), (int *)&v19);
  sub_233CEB4AC((uint64_t)&v19);
  if (*(_BYTE *)(a2 + 20))
  {
    v10 = (unsigned int *)sub_233C20E2C((_BYTE *)(a2 + 20));
    if (!sub_2341C8690(*v10))
    {
      *(_DWORD *)a4 = 47;
      *(_QWORD *)(a4 + 8) = "src/controller/CommissioningWindowOpener.cpp";
      v5 = 93;
      goto LABEL_3;
    }
    *((_BYTE *)a1 + 130) = 2;
    *((_DWORD *)a1 + 14) = *(_DWORD *)sub_233C20E2C((_BYTE *)(a2 + 20));
  }
  else
  {
    *((_BYTE *)a1 + 130) = 1;
  }
  *((_BYTE *)a1 + 40) = 0;
  v11 = sub_233C05D98((_BYTE *)(a2 + 16));
  sub_233D52960((uint64_t)(a1 + 14), *(unsigned __int16 *)v11);
  *((_BYTE *)a1 + 52) = *((_BYTE *)a1 + 114);
  *((_WORD *)a1 + 25) = *((_WORD *)a1 + 56);
  *(_WORD *)((char *)a1 + 47) = 1025;
  if (*v9)
  {
    v12 = *(const void **)sub_233C05DB8((_BYTE *)(a2 + 32));
    v13 = sub_233C05DB8((_BYTE *)(a2 + 32));
    memcpy(a1 + 29, v12, *((_QWORD *)v13 + 1));
    v14 = sub_233C05DB8((_BYTE *)(a2 + 32));
    sub_233BF7114(&v19, (uint64_t)(a1 + 29), *((_QWORD *)v14 + 1));
    *(_OWORD *)(a1 + 33) = v19;
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    sub_234139DB0((char *)a1 + 232, 0x20uLL, a4);
    if (*(_DWORD *)a4)
      return;
    a1[33] = a1 + 29;
    a1[34] = 32;
  }
  v15 = *(unsigned int *)(a2 + 12);
  *((_DWORD *)a1 + 57) = v15;
  v16 = *(_BYTE *)(a2 + 20) == 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  sub_23412C5D0((uint64_t)a1 + 131, v15, a1 + 33, v16, (char *)a1 + 56, (_QWORD *)a4);
  if (!*(_DWORD *)a4)
  {
    sub_23424A98C(a3, (int *)a1 + 10);
    a1[2] = *(_QWORD *)(a2 + 64);
    a1[3] = 0;
    a1[4] = 0;
    v17 = sub_23424AA0C((uint64_t *)a2);
    a1[15] = v17;
    *((_WORD *)a1 + 64) = *(_WORD *)(a2 + 8);
    if (*(_BYTE *)(a2 + 56))
      v18 = 1;
    else
      v18 = 3;
    *((_BYTE *)a1 + 8) = v18;
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, v17, a1 + 35, a1 + 40, 0);
  }
}

uint64_t sub_23424A98C(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;

  v4 = *a2;
  *(_DWORD *)(a1 + 3) = *(int *)((char *)a2 + 3);
  *(_DWORD *)a1 = v4;
  v5 = *((unsigned __int8 *)a2 + 7);
  *(_BYTE *)(a1 + 7) = v5;
  if (v5)
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)((char *)a2 + 10);
  *(_WORD *)(a1 + 18) = *((_WORD *)a2 + 9);
  *(_QWORD *)(a1 + 10) = v6;
  if ((int *)a1 != a2)
  {
    sub_23404590C((uint64_t **)(a1 + 24), *((const std::string ***)a2 + 3), (const std::string **)a2 + 4);
    sub_234045C1C((uint64_t **)(a1 + 48), *((const std::string ***)a2 + 6), (const std::string **)a2 + 7);
  }
  return a1;
}

uint64_t sub_23424AA0C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    sub_2342617CC(0);
  return result;
}

uint64_t sub_23424AA28@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  _QWORD *v6;
  const void *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  __int128 v11;

  if (*(_BYTE *)(result + 8))
  {
    *(_DWORD *)a3 = 3;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v4 = 144;
LABEL_3:
    *(_DWORD *)(a3 + 16) = v4;
    return result;
  }
  if (!*(_QWORD *)a2)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v4 = 145;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a2 + 16))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v4 = 146;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(a2 + 12) - 1000) >= 0x182B9)
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v4 = 149;
    goto LABEL_3;
  }
  v6 = (_QWORD *)result;
  result = (uint64_t)sub_233C05DB8((_BYTE *)(a2 + 24));
  if (*(_QWORD *)(result + 8) < 0x10uLL
    || (result = (uint64_t)sub_233C05DB8((_BYTE *)(a2 + 24)), *(_QWORD *)(result + 8) >= 0x21uLL))
  {
    *(_DWORD *)a3 = 47;
    *(_QWORD *)(a3 + 8) = "src/controller/CommissioningWindowOpener.cpp";
    v4 = 152;
    goto LABEL_3;
  }
  v7 = *(const void **)sub_233C05DB8((_BYTE *)(a2 + 24));
  v8 = sub_233C05DB8((_BYTE *)(a2 + 24));
  memcpy(v6 + 29, v7, *((_QWORD *)v8 + 1));
  v9 = sub_233C05DB8((_BYTE *)(a2 + 24));
  sub_233BF7114(&v11, (uint64_t)(v6 + 29), *((_QWORD *)v9 + 1));
  *(_OWORD *)(v6 + 33) = v11;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v11 = *(_OWORD *)sub_233C05DB8((_BYTE *)(a2 + 48));
  result = sub_234133A8C((uint64_t)v6 + 131, (uint64_t)&v11, a3);
  if (!*(_DWORD *)a3)
  {
    v6[3] = *(_QWORD *)(a2 + 72);
    v6[4] = 0;
    v6[2] = 0;
    v6[15] = sub_23424AA0C((uint64_t *)a2);
    *((_WORD *)v6 + 64) = *(_WORD *)(a2 + 8);
    *((_DWORD *)v6 + 57) = *(_DWORD *)(a2 + 12);
    *((_BYTE *)v6 + 130) = 2;
    v10 = sub_233C05D98((_BYTE *)(a2 + 16));
    sub_233D52960((uint64_t)(v6 + 14), *(unsigned __int16 *)v10);
    *((_BYTE *)v6 + 8) = 3;
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[15], v6 + 35, v6 + 40, 0);
  }
  return result;
}

uint64_t sub_23424AC50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  unsigned __int8 v11[2];
  __int16 v12;
  __int16 v13;
  _QWORD v14[2];
  __int16 v15;
  _BYTE v16[20];
  __int128 *p_buf;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[3];
  char v21;
  __int16 v22;
  char v23;
  __int128 buf;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 120);
    LODWORD(buf) = 67109376;
    DWORD1(buf) = HIDWORD(v9);
    WORD4(buf) = 1024;
    *(_DWORD *)((char *)&buf + 10) = v9;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "OpenCommissioningWindow for device ID 0x%08X%08X", (uint8_t *)&buf, 0xEu);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  v19[0] = &unk_2504F5578;
  v19[1] = a2;
  v20[2] = 0;
  v20[0] = &off_250514968;
  v20[1] = 0;
  v21 = 0;
  sub_2341CDA90(v20, a3);
  v22 = 0;
  v23 = 0;
  if (*(_BYTE *)(a1 + 130))
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    buf = 0u;
    v25 = 0u;
    p_buf = &buf;
    v18 = 97;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    sub_234133A00(a1 + 131, &p_buf, (uint64_t)a4);
    if (*(_DWORD *)a4)
      goto LABEL_11;
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
    memset(v16, 0, sizeof(v16));
    v13 = *(_WORD *)(a1 + 128);
    sub_233BF7114(v14, (uint64_t)p_buf, v18);
    v15 = sub_2340441C0((_BYTE *)(a1 + 112));
    *(_DWORD *)v16 = *(_DWORD *)(a1 + 228);
    *(_OWORD *)&v16[4] = *(_OWORD *)(a1 + 264);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v11[0] = 1;
    v12 = 10000;
    sub_23424AEF0((uint64_t)v19, (uint64_t)&v13, a1, (uint64_t)sub_23424B074, (uint64_t)sub_23424B58C, v11, (uint64_t)a4);
  }
  else
  {
    v13 = *(_WORD *)(a1 + 128);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    LOBYTE(buf) = 1;
    WORD1(buf) = 10000;
    sub_23424B760((uint64_t)v19, (uint64_t)&v13, a1, (uint64_t)sub_23424B074, (uint64_t)sub_23424B58C, (unsigned __int8 *)&buf, (uint64_t)a4);
  }
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 0;
    a4[1] = "src/controller/CommissioningWindowOpener.cpp";
    *((_DWORD *)a4 + 4) = 204;
  }
LABEL_11:
  v19[0] = &unk_2504F5578;
  return sub_2341CD754(v20);
}

_QWORD *sub_23424AEF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  _BYTE *v15;
  char v16;
  int v17;
  uint64_t *v18;
  unsigned __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 40);
  v15 = (_BYTE *)(a1 + 40);
  v16 = v17;
  if (v17)
  {
    v25 = *(_QWORD *)sub_233C25EA4(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    v16 = 1;
  }
  v24[0] = v16;
  v18 = (uint64_t *)sub_233C25EA4(v24);
  v19 = *(_WORD *)(a1 + 56);
  v28[0] = &unk_25051B428;
  v28[1] = a3;
  v28[2] = a4;
  v29 = v28;
  v26[0] = &unk_25051B4A8;
  v26[1] = a3;
  v26[2] = a5;
  v27 = v26;
  sub_23424C4E4(v14, v18, v19, a2, (uint64_t)v28, (uint64_t)v26, a6, a1 + 60, a7, 0);
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_8:
  result = v29;
  if (v29 == v28)
  {
    v23 = 4;
    result = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v23 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
LABEL_13:
  if (v24[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  return result;
}

void sub_23424B074(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD *v4;
  uint64_t *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, int *);
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, int *, _BYTE *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, int *);
  uint64_t v27;
  int v28;
  const char *v29;
  int v30;
  int v31;
  const char *v32;
  int v33;
  _BYTE v34[7];
  char v36;
  uint64_t v37;
  __int16 v38;
  char **v39;
  char *v40[2];
  char **v41;
  char *v42[2];
  int v43;
  const char *v44;
  int v45;
  _BYTE v46[7];
  char v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51[2];
  __int128 v52;
  uint64_t v53;
  const char *v54[2];
  uint8_t buf[144];
  _BYTE v56[24];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v2 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Successfully opened pairing window on the device", buf, 2u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  *(_BYTE *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v54[0] = (const char *)buf;
    v54[1] = (const char *)129;
    v52 = 0uLL;
    v4 = (_DWORD *)(a1 + 40);
    v3 = *(_DWORD *)(a1 + 40);
    v53 = 0;
    *(_DWORD *)v56 = v3;
    *(_DWORD *)&v56[3] = *(_DWORD *)(a1 + 43);
    v56[7] = *(_BYTE *)(a1 + 47);
    if (v56[7])
      v56[8] = *(_BYTE *)(a1 + 48);
    v5 = (uint64_t *)(a1 + 50);
    *(_QWORD *)&v56[10] = *(_QWORD *)(a1 + 50);
    *(_WORD *)&v56[18] = *(_WORD *)(a1 + 58);
    *(_WORD *)&v56[20] = 0;
    sub_2341C56D8((uint64_t)v56, v54, (uint64_t)&v52);
    v6 = v52;
    v7 = sub_234117B80(9u, "Controller");
    v8 = v7;
    if (v6)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v56 = v52;
        *(_QWORD *)&v56[16] = v53;
        v9 = sub_2341083CC((const char **)v56, 1);
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = v9;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "Unable to generate manual code for setup payload: %s", v56, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)v56 = v52;
        *(_QWORD *)&v56[16] = v53;
        sub_2341083CC((const char **)v56, 1);
        v10 = 1;
LABEL_19:
        sub_2341147D0(9u, v10);
      }
    }
    else
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = buf;
        _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Manual pairing code: [%s]", v56, 0xCu);
      }
      if (sub_234114844(2u))
      {
        v10 = 2;
        goto LABEL_19;
      }
    }
    v51[0] = (uint64_t)buf;
    v51[1] = 129;
    *(_DWORD *)v46 = *v4;
    *(_DWORD *)&v46[3] = *(_DWORD *)(a1 + 43);
    if (*(_BYTE *)(a1 + 47))
      v48 = *(_BYTE *)(a1 + 48);
    v49 = *v5;
    v50 = *(_WORD *)(a1 + 58);
    sub_2341C6FA0(v46, v51, (uint64_t)v56);
    v52 = *(_OWORD *)v56;
    v53 = *(_QWORD *)&v56[16];
    v15 = *(_DWORD *)v56;
    v16 = sub_234117B80(9u, "Controller");
    v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)v56 = v52;
        *(_QWORD *)&v56[16] = v53;
        v18 = sub_2341083CC((const char **)v56, 1);
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = v18;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_ERROR, "Unable to generate QR code for setup payload: %s", v56, 0xCu);
      }
      if (!sub_234114844(1u))
        goto LABEL_32;
      *(_OWORD *)v56 = v52;
      *(_QWORD *)&v56[16] = v53;
      sub_2341083CC((const char **)v56, 1);
      v19 = 1;
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = buf;
        _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "SetupQRCode: [%s]", v56, 0xCu);
      }
      if (!sub_234114844(2u))
        goto LABEL_32;
      v19 = 2;
    }
    sub_2341147D0(9u, v19);
LABEL_32:
    v20 = *(_QWORD *)(a1 + 16);
    v21 = *(_QWORD *)(v20 + 24);
    v22 = *(void (**)(uint64_t, uint64_t, int *, _BYTE *))(v20 + 32);
    v23 = *(_QWORD *)(a1 + 120);
    v43 = 0;
    v44 = "src/controller/CommissioningWindowOpener.cpp";
    v45 = 275;
    *(_DWORD *)v34 = *v4;
    *(_DWORD *)&v34[3] = *(_DWORD *)(a1 + 43);
    if (*(_BYTE *)(a1 + 47))
      v36 = *(_BYTE *)(a1 + 48);
    v37 = *v5;
    v38 = *(_WORD *)(a1 + 58);
    v40[0] = 0;
    v40[1] = 0;
    v39 = v40;
    sub_233CF15FC((uint64_t *)&v39, *(unsigned __int8 **)(a1 + 64), (unsigned __int8 *)(a1 + 72));
    v42[0] = 0;
    v42[1] = 0;
    v41 = v42;
    sub_233CF1A80((uint64_t *)&v41, *(unsigned __int8 **)(a1 + 88), (unsigned __int8 *)(a1 + 96));
    v22(v21, v23, &v43, v34);
    sub_233CF19DC((uint64_t)&v41, v42[0]);
    sub_233CF19DC((uint64_t)&v39, v40[0]);
    return;
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 24);
    v13 = *(void (**)(uint64_t, uint64_t, int *))(v11 + 32);
    v14 = *(_QWORD *)(a1 + 120);
    v31 = 0;
    v32 = "src/controller/CommissioningWindowOpener.cpp";
    v33 = 282;
    v13(v12, v14, &v31);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 32);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 24);
      v26 = *(void (**)(uint64_t, uint64_t, int *))(v24 + 32);
      v27 = *(_QWORD *)(a1 + 120);
      v28 = 0;
      v29 = "src/controller/CommissioningWindowOpener.cpp";
      v30 = 288;
      v26(v25, v27, &v28);
    }
  }
}

void sub_23424B58C(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, __int128 *, __int128 *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, __int128 *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, __int128 *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  char **v26;
  char *v27[3];
  __int128 v28;
  uint64_t v29;
  uint8_t buf[16];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)buf = *a2;
    v31 = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Failed to open pairing window on the device. Status %s", buf, 0xCu);
  }
  if (sub_234114844(1u))
  {
    *(_OWORD *)buf = *a2;
    v31 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 1);
  }
  *(_BYTE *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(void (**)(uint64_t, uint64_t, __int128 *, __int128 *))(v6 + 32);
    v9 = *(_QWORD *)(a1 + 120);
    v28 = *a2;
    v29 = *((_QWORD *)a2 + 2);
    v22 = 0u;
    v23 = 0;
    v25 = 0u;
    v24 = &v25;
    v27[0] = 0;
    v27[1] = 0;
    v26 = v27;
    v8(v7, v9, &v28, &v22);
    sub_233CF19DC((uint64_t)&v26, v27[0]);
    sub_233CF19DC((uint64_t)&v24, (char *)v25);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 24);
      v12 = *(void (**)(uint64_t, uint64_t, __int128 *))(v10 + 32);
      v13 = *(_QWORD *)(a1 + 120);
      v20 = *a2;
      v21 = *((_QWORD *)a2 + 2);
      v12(v11, v13, &v20);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 24);
        v16 = *(void (**)(uint64_t, uint64_t, __int128 *))(v14 + 32);
        v17 = *(_QWORD *)(a1 + 120);
        v18 = *a2;
        v19 = *((_QWORD *)a2 + 2);
        v16(v15, v17, &v18);
      }
    }
  }
}

_QWORD *sub_23424B760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  _BYTE *v15;
  char v16;
  int v17;
  uint64_t *v18;
  unsigned __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 40);
  v15 = (_BYTE *)(a1 + 40);
  v16 = v17;
  if (v17)
  {
    v25 = *(_QWORD *)sub_233C25EA4(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    v16 = 1;
  }
  v24[0] = v16;
  v18 = (uint64_t *)sub_233C25EA4(v24);
  v19 = *(_WORD *)(a1 + 56);
  v28[0] = &unk_25051B668;
  v28[1] = a3;
  v28[2] = a4;
  v29 = v28;
  v26[0] = &unk_25051B6E8;
  v26[1] = a3;
  v26[2] = a5;
  v27 = v26;
  sub_23424CC14(v14, v18, v19, a2, (uint64_t)v28, (uint64_t)v26, a6, a1 + 60, a7, 0);
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_8:
  result = v29;
  if (v29 == v28)
  {
    v23 = 4;
    result = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v23 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
LABEL_13:
  if (v24[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  return result;
}

void sub_23424B8E4(_QWORD *a1, int a2)
{
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[16];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received PID for the device. Value %d", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  *((_WORD *)a1 + 22) = a2;
  *((_BYTE *)a1 + 8) = 3;
  memset(buf, 0, sizeof(buf));
  v8 = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 40))(buf, *a1, a1[15], a1 + 35, a1 + 40, 0);
  if (*(_DWORD *)buf)
  {
    v5 = *(_OWORD *)buf;
    v6 = v8;
    sub_23424B58C((uint64_t)a1, &v5);
  }
}

void sub_23424BA18(_QWORD *a1, int a2)
{
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[16];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Received VID for the device. Value %d", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(9u, 2);
  *((_WORD *)a1 + 21) = a2;
  *((_BYTE *)a1 + 8) = 2;
  memset(buf, 0, sizeof(buf));
  v8 = 0;
  (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 40))(buf, *a1, a1[15], a1 + 35, a1 + 40, 0);
  if (*(_DWORD *)buf)
  {
    v5 = *(_OWORD *)buf;
    v6 = v8;
    sub_23424B58C((uint64_t)a1, &v5);
  }
}

void sub_23424BB4C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint8_t buf[16];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Failed to read VID/PID for the device. error %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v9 = *(_QWORD *)(a2 + 16);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  sub_23424B58C(a1, &v6);
}

void sub_23424BC74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  const char *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _BYTE buf[24];
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  LODWORD(v3) = 352;
  v5 = "src/controller/CommissioningWindowOpener.cpp";
  v6 = 0x300000003;
  v7 = "Just got a connected device; how can we be done?";
  switch(*(_BYTE *)(a1 + 8))
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_QWORD *)buf = &unk_2504F5578;
      *(_QWORD *)&buf[8] = a2;
      v20 = 0;
      *(_QWORD *)&buf[16] = &off_250514968;
      v19 = 0;
      v21 = 0;
      sub_2341CDA90(&buf[16], a3);
      v22 = 0;
      v23 = 0;
      sub_23424D344((uint64_t)buf, a1, 40, 2, (uint64_t)sub_23424BA18, (uint64_t)sub_23424BB4C, 1, (uint64_t)&v15);
      v10 = v15;
      v5 = v16;
      v3 = v17;
      *(_QWORD *)buf = &unk_2504F5578;
      sub_2341CD754(&buf[16]);
      v6 = v10;
      v7 = "Could not read VID for opening commissioning window";
      goto LABEL_5;
    case 2:
      *(_QWORD *)buf = &unk_2504F5578;
      *(_QWORD *)&buf[8] = a2;
      v20 = 0;
      *(_QWORD *)&buf[16] = &off_250514968;
      v19 = 0;
      v21 = 0;
      sub_2341CDA90(&buf[16], a3);
      v22 = 0;
      v23 = 0;
      sub_23424E760((uint64_t)buf, a1, 40, 4, (uint64_t)sub_23424B8E4, (uint64_t)sub_23424BB4C, 1, (uint64_t)&v15);
      v11 = v15;
      v5 = v16;
      v3 = v17;
      *(_QWORD *)buf = &unk_2504F5578;
      sub_2341CD754(&buf[16]);
      v6 = v11;
      v7 = "Could not read PID for opening commissioning window";
      goto LABEL_5;
    case 3:
      sub_23424AC50(a1, a2, a3, buf);
      v6 = *(_QWORD *)buf;
      v5 = *(const char **)&buf[8];
      v7 = "Could not connect to open commissioning window";
      v3 = *(_QWORD *)&buf[16];
LABEL_5:
      if ((_DWORD)v6)
      {
LABEL_6:
        v12 = v6;
        v8 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_QWORD *)buf = v12;
          *(_QWORD *)&buf[8] = v5;
          *(_QWORD *)&buf[16] = v3;
          v9 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v9;
          _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_ERROR, "%s: %s", buf, 0x16u);
        }
        if (sub_234114844(1u))
        {
          *(_QWORD *)buf = v12;
          *(_QWORD *)&buf[8] = v5;
          *(_QWORD *)&buf[16] = v3;
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(9u, 1);
        }
        *(_QWORD *)&v13 = v12;
        *((_QWORD *)&v13 + 1) = v5;
        v14 = v3;
        sub_23424B58C(a1, &v13);
      }
      break;
    default:
      return;
  }
}

void sub_23424BF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  sub_23424B58C(a1, &v3);
}

_QWORD *sub_23424BF80(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_233CF1D44(a1, a2);
  result[45] = result + 45;
  result[46] = result + 45;
  result[47] = 0;
  result[48] = result;
  result[49] = sub_23424BFC0;
  result[50] = result + 50;
  result[51] = result + 50;
  result[52] = 0;
  result[53] = result;
  result[54] = sub_23424C060;
  return result;
}

uint64_t sub_23424BFC0(uint64_t result)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = *(void (**)(uint64_t))(result + 416);
    if (v2)
    {
      *(_QWORD *)(result + 416) = 0;
      v2(result + 400);
    }
    v3 = *(void (**)(uint64_t))(v1 + 376);
    if (v3)
    {
      *(_QWORD *)(v1 + 376) = 0;
      v3(v1 + 360);
    }
    v4 = *(void (**)(uint64_t))(v1 + 336);
    if (v4)
    {
      *(_QWORD *)(v1 + 336) = 0;
      v4(v1 + 320);
    }
    v5 = *(void (**)(uint64_t))(v1 + 296);
    if (v5)
    {
      *(_QWORD *)(v1 + 296) = 0;
      v5(v1 + 280);
    }
    sub_233CF19DC(v1 + 88, *(char **)(v1 + 96));
    sub_233CF19DC(v1 + 64, *(char **)(v1 + 72));
    JUMPOUT(0x23493E704);
  }
  return result;
}

uint64_t sub_23424C060(uint64_t result)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = *(void (**)(uint64_t))(result + 416);
    if (v2)
    {
      *(_QWORD *)(result + 416) = 0;
      v2(result + 400);
    }
    v3 = *(void (**)(uint64_t))(v1 + 376);
    if (v3)
    {
      *(_QWORD *)(v1 + 376) = 0;
      v3(v1 + 360);
    }
    v4 = *(void (**)(uint64_t))(v1 + 336);
    if (v4)
    {
      *(_QWORD *)(v1 + 336) = 0;
      v4(v1 + 320);
    }
    v5 = *(void (**)(uint64_t))(v1 + 296);
    if (v5)
    {
      *(_QWORD *)(v1 + 296) = 0;
      v5(v1 + 280);
    }
    sub_233CF19DC(v1 + 88, *(char **)(v1 + 96));
    sub_233CF19DC(v1 + 64, *(char **)(v1 + 72));
    JUMPOUT(0x23493E704);
  }
  return result;
}

uint64_t sub_23424C100@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void (*v13)(_QWORD *);
  void (*v14)(_QWORD *);
  void (*v15)(uint64_t);
  void (*v16)(uint64_t);

  result = (uint64_t)operator new(0x1B8uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v9 = result;
    v10 = (_QWORD *)sub_233CF1D44(result, a1);
    v11 = v10 + 45;
    v10[45] = v10 + 45;
    v10[46] = v10 + 45;
    v10[47] = 0;
    v10[48] = v10;
    v12 = v10 + 50;
    v10[49] = sub_23424BFC0;
    v10[50] = v10 + 50;
    v10[51] = v10 + 50;
    v10[52] = 0;
    v10[53] = v10;
    v10[54] = sub_23424C060;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    result = sub_23424A3D8((uint64_t)v10, a2, a3, (uint64_t)(v10 + 50), (uint64_t)a4);
    if (*(_DWORD *)a4)
    {
      v13 = *(void (**)(_QWORD *))(v9 + 416);
      if (v13)
      {
        *(_QWORD *)(v9 + 416) = 0;
        v13(v12);
      }
      v14 = *(void (**)(_QWORD *))(v9 + 376);
      if (v14)
      {
        *(_QWORD *)(v9 + 376) = 0;
        v14(v11);
      }
      v15 = *(void (**)(uint64_t))(v9 + 336);
      if (v15)
      {
        *(_QWORD *)(v9 + 336) = 0;
        v15(v9 + 320);
      }
      v16 = *(void (**)(uint64_t))(v9 + 296);
      if (v16)
      {
        *(_QWORD *)(v9 + 296) = 0;
        v16(v9 + 280);
      }
      sub_233CF19DC(v9 + 88, *(char **)(v9 + 96));
      sub_233CF19DC(v9 + 64, *(char **)(v9 + 72));
      JUMPOUT(0x23493E704);
    }
  }
  else
  {
    *(_DWORD *)a4 = 11;
    a4[1] = "src/controller/CommissioningWindowOpener.cpp";
    *((_DWORD *)a4 + 4) = 384;
  }
  return result;
}

void sub_23424C254(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, int a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10)
{
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(_QWORD *);
  void (*v24)(uint64_t);
  void (*v25)(char *);
  void (*v26)(char *);
  __int16 v27;
  char v29[8];
  __int128 v30;
  char v31[4];
  int v32;

  v18 = (char *)operator new(0x1B8uLL, MEMORY[0x24BEDB6B8]);
  if (v18)
  {
    v19 = v18;
    v27 = a5;
    v20 = (_QWORD *)sub_233CF1D44((uint64_t)v18, a1);
    v21 = (uint64_t)(v20 + 45);
    v20[45] = v20 + 45;
    v20[46] = v20 + 45;
    v20[47] = 0;
    v20[48] = v20;
    v22 = v20 + 50;
    v20[49] = sub_23424BFC0;
    v20[50] = v20 + 50;
    v20[51] = v20 + 50;
    v20[52] = 0;
    v20[53] = v20;
    v20[54] = sub_23424C060;
    a9[1] = 0;
    a9[2] = 0;
    *a9 = 0;
    v31[0] = *(_BYTE *)a6;
    if (v31[0])
      v32 = *(_DWORD *)(a6 + 4);
    v29[0] = *(_BYTE *)a7;
    if (v29[0])
      v30 = *(_OWORD *)(a7 + 8);
    sub_23424A5DC(v19, a2, a3, a4, v27, v31, v29, v21, (uint64_t)a9, a8, a10);
    if (*(_DWORD *)a9)
    {
      v23 = (void (*)(_QWORD *))*((_QWORD *)v19 + 52);
      if (v23)
      {
        *((_QWORD *)v19 + 52) = 0;
        v23(v22);
      }
      v24 = (void (*)(uint64_t))*((_QWORD *)v19 + 47);
      if (v24)
      {
        *((_QWORD *)v19 + 47) = 0;
        v24(v21);
      }
      v25 = (void (*)(char *))*((_QWORD *)v19 + 42);
      if (v25)
      {
        *((_QWORD *)v19 + 42) = 0;
        v25(v19 + 320);
      }
      v26 = (void (*)(char *))*((_QWORD *)v19 + 37);
      if (v26)
      {
        *((_QWORD *)v19 + 37) = 0;
        v26(v19 + 280);
      }
      sub_233CF19DC((uint64_t)(v19 + 88), *((char **)v19 + 12));
      sub_233CF19DC((uint64_t)(v19 + 64), *((char **)v19 + 9));
      JUMPOUT(0x23493E704);
    }
  }
  else
  {
    *(_DWORD *)a9 = 11;
    a9[1] = "src/controller/CommissioningWindowOpener.cpp";
    *((_DWORD *)a9 + 4) = 406;
  }
}

void sub_23424C428(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_233CF19DC(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_23424C490(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  sub_233CF19DC(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    for (i = *(_QWORD *)(v2 + 16); i; i = *(_QWORD *)(i + 16))
    {
      v2 = i;
      *(_QWORD *)(a1 + 8) = i;
    }
    sub_233CF19DC(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

void sub_23424C4E4(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 60;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051B2E8;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_23424C808(v35, v39, a4, (uint64_t)a7, a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23424C874(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_23424C808(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
  {
    v6 = *(_WORD *)(a4 + 2);
    v7 = 0;
    v8[0] = &unk_25051B368;
    v8[1] = a3;
    sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, (_QWORD *)a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/app/CommandSender.h";
    *(_DWORD *)(a5 + 16) = 424;
  }
}

_QWORD *sub_23424C874(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051B3A8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_23424C920(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051B2E8;
  result[1] = v3;
  return result;
}

uint64_t sub_23424C958(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051B2E8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_23424C97C(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_23424C984(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B348))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424C9C0()
{
  return &unk_25051B348;
}

double sub_23424C9CC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D0E074(*(unsigned __int16 **)(a1 + 8), a2, a3, a4);
}

__n128 sub_23424C9D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424CA10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B3A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23424CA34(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_23424CA3C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B408))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424CA78()
{
  return &unk_25051B408;
}

__n128 sub_23424CA84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424CAC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424CAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23424CAF0(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B488))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424CB2C()
{
  return &unk_25051B488;
}

__n128 sub_23424CB38(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424CB74(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B4A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424CB98(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23424CBCC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B508))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424CC08()
{
  return &unk_25051B508;
}

void sub_23424CC14(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0x10000003CLL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_2342425B0((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051B528;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_23424CF38(v35, v39, a4, (uint64_t)a7, a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23424CFA4(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_23424CF38(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
  {
    v6 = *(_WORD *)(a4 + 2);
    v7 = 0;
    v8[0] = &unk_25051B5A8;
    v8[1] = a3;
    sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, (_QWORD *)a5);
  }
  else
  {
    *(_DWORD *)a5 = 47;
    *(_QWORD *)(a5 + 8) = "src/app/CommandSender.h";
    *(_DWORD *)(a5 + 16) = 424;
  }
}

_QWORD *sub_23424CFA4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051B5E8;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_23424D050(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051B528;
  result[1] = v3;
  return result;
}

uint64_t sub_23424D088(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051B528;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_23424D0AC(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_23424D0B4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B588))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424D0F0()
{
  return &unk_25051B588;
}

double sub_23424D0FC@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233CF90CC(*(unsigned __int16 **)(a1 + 8), a2, a3, a4);
}

__n128 sub_23424D104(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424D140(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_23424D164(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_23424D16C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B648))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424D1A8()
{
  return &unk_25051B648;
}

__n128 sub_23424D1B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424D1F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424D214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_23424D220(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B6C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424D25C()
{
  return &unk_25051B6C8;
}

__n128 sub_23424D268(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424D2A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B6E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424D2C8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_23424D2FC(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B748))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424D338()
{
  return &unk_25051B748;
}

_QWORD *sub_23424D344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  _BYTE *v17;
  char v18;
  int v19;
  uint64_t *v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned __int8 *)(a1 + 40);
  v17 = (_BYTE *)(a1 + 40);
  v18 = v19;
  if (v19)
  {
    v27 = *(_QWORD *)sub_233C25EA4(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v18 = 1;
  }
  v26[0] = v18;
  v20 = (uint64_t *)sub_233C25EA4(v26);
  v21 = *(_WORD *)(a1 + 56);
  v30[0] = &unk_25051B8A0;
  v30[1] = a2;
  v30[2] = a5;
  v31 = v30;
  v28[0] = &unk_25051B930;
  v28[1] = a2;
  v28[2] = a6;
  v29 = v28;
  sub_23424D4D0(v16, v20, v21, a3, a4, (uint64_t)v30, (uint64_t)v28, a7, a8);
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  result = v31;
  if (v31 == v30)
  {
    v25 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_13;
    v25 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
LABEL_13:
  if (v26[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  return result;
}

uint64_t sub_23424D4D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[8];
  _QWORD v29[3];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v29[2] = 0;
  v29[0] = &off_250514968;
  v29[1] = 0;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  sub_2341CDA90(v29, a2);
  v39 = 0;
  v41 = 0;
  v43 = 0;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v36 = 0;
  sub_23424D704(v38, a6);
  sub_23424D704(v40, a7);
  LOBYTE(v37) = a8;
  v28[0] = 0;
  sub_23424D79C(a1, a3, a4, a5, (uint64_t)v29, v28, a9);
  v17 = v47;
  if (v47 == v46)
  {
    v18 = 4;
    v17 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  v19 = v45;
  if (v45 == v44)
  {
    v20 = 4;
    v19 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = v43;
  if (v43 == v42)
  {
    v22 = 4;
    v21 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_16;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_16:
  v23 = v41;
  if (v41 == v40)
  {
    v24 = 4;
    v23 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_21;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_21:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_25;
  }
  if (v39)
  {
    v26 = 5;
LABEL_25:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return sub_2341CD754(v29);
}

_QWORD *sub_23424D704(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_233CF11B0((uint64_t)v6, a2);
  sub_23423FA0C(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_23424D79C(uint64_t a1@<X0>, __int16 a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  void *v14;
  _DWORD *v15;
  void *v16;
  _BYTE *v17;
  _DWORD *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void *v25;
  void (***v26)(_QWORD);
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v33 = a4;
  v34 = a3;
  v14 = sub_2341FF930();
  v31 = xmmword_25051B9B0;
  v32 = 57;
  v15 = sub_234114774(0xCuLL);
  if (!v15)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 60;
    return;
  }
  v16 = v15;
  *v15 = a3;
  v15[1] = a4;
  *((_WORD *)v15 + 4) = a2;
  *((_WORD *)v15 + 5) = -1;
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = 1;
  if (*a6)
  {
    v17 = sub_233C20E2C(a6);
    v18 = sub_234114774(0x10uLL);
    if (!v18)
    {
      *(_DWORD *)a7 = 11;
      *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
      *(_DWORD *)(a7 + 16) = 67;
LABEL_39:
      j__free(v16);
      return;
    }
    v19 = v18;
    v20 = *(_DWORD *)v17;
    *v18 = a3;
    *((_BYTE *)v18 + 4) = 1;
    v18[2] = v20;
    *((_WORD *)v18 + 6) = a2;
    *(_QWORD *)(a5 + 72) = v18;
    *(_QWORD *)(a5 + 80) = 1;
  }
  else
  {
    v19 = 0;
  }
  sub_233CF11B0((uint64_t)v37, a5 + 248);
  if (v38)
  {
    if (v38 == v37)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v35);
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(void))(*v38 + 16))();
    }
  }
  else
  {
    v36 = 0;
  }
  v21 = sub_23424DB00(&v34, &v33, a5 + 120, a5 + 152, (uint64_t)v35, a5 + 184, a5 + 216);
  if (!v21)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 83;
    goto LABEL_26;
  }
  v22 = (uint64_t)v21;
  v23 = (void (***)(_QWORD))sub_234114774(0x158uLL);
  if (!v23)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 87;
LABEL_22:
    v25 = (void *)sub_23424E018(v22);
    j__free(v25);
    goto LABEL_26;
  }
  v24 = v23;
  if (*(_BYTE *)(sub_23420D650(v23, v14, a1, v22 + 176, *(unsigned __int8 *)(a5 + 280)) + 80) == 1)
  {
    sub_234210A84((uint64_t)v24, a5, &v31);
    v19 = 0;
    v16 = 0;
  }
  else
  {
    sub_23420DF14((uint64_t)v24, a5, (uint64_t)&v31);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
  if (*(_DWORD *)a7)
  {
    (**v24)(v24);
    j__free(v24);
    goto LABEL_22;
  }
  v26 = *(void (****)(_QWORD))(v22 + 240);
  *(_QWORD *)(v22 + 240) = v24;
  if (v26)
  {
    (**v26)(v26);
    j__free(v26);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
LABEL_26:
  v27 = v36;
  if (v36 == v35)
  {
    v28 = 4;
    v27 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_31;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_31:
  v29 = v38;
  if (v38 == v37)
  {
    v30 = 4;
    v29 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_36;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_36:
  if (v19)
    j__free(v19);
  if (v16)
    goto LABEL_39;
}

void *sub_23424DB00(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = sub_234114774(0x100uLL);
  if (!v14)
    return v14;
  v15 = *a1;
  v16 = *a2;
  sub_233CF11B0((uint64_t)v40, a3);
  sub_233CF11B0((uint64_t)v38, a4);
  sub_233CF11B0((uint64_t)v34, a5);
  sub_23424DD38((uint64_t)v36, v34);
  sub_233CF11B0((uint64_t)v32, a6);
  sub_233CF11B0((uint64_t)v30, a7);
  sub_23424E198((uint64_t)v14, v15, v16, (uint64_t)v40, (uint64_t)v38, (uint64_t)v36, (uint64_t)v32, (uint64_t)v30);
  v17 = v31;
  if (v31 == v30)
  {
    v18 = 4;
    v17 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_7:
  v19 = v33;
  if (v33 == v32)
  {
    v20 = 4;
    v19 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_12;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_12:
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_17;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_17:
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_22;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v26 = 5;
LABEL_26:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = v41;
  if (v41 == v40)
  {
    v28 = 4;
    v27 = v40;
    goto LABEL_31;
  }
  if (v41)
  {
    v28 = 5;
LABEL_31:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return v14;
}

uint64_t sub_23424DD38(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &unk_25051B768;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *sub_23424DDC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_25051B768;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_23424DE24(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_25051B768;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23424DE94(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_25051B768;
  sub_233CF11B0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_23424DED8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_25051B768;
  return sub_233CF11B0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_23424DEF8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_23424DF2C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_23424DF7C(uint64_t a1, uint64_t *a2)
{
  sub_23424DFCC(a1 + 8, a2);
}

uint64_t sub_23424DF84(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B7D8))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424DFC0()
{
  return &unk_25051B7D8;
}

void sub_23424DFCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  if (v2)
  {
    v4 = (void *)sub_23424E018(v2);
    j__free(v4);
  }
}

uint64_t sub_23424E018(uint64_t a1)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void **v15;

  v2 = *(void (****)(_QWORD))(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v2)
  {
    (**v2)(v2);
    j__free(v2);
    v3 = *(void (****)(_QWORD))(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;
    if (v3)
    {
      (**v3)(v3);
      j__free(v3);
    }
  }
  *(_QWORD *)(a1 + 176) = off_250502E50;
  v15 = (void **)(a1 + 208);
  sub_2340FD4E8(&v15);
  v4 = *(_QWORD **)(a1 + 168);
  if (v4 == (_QWORD *)(a1 + 144))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 144);
  }
  else
  {
    if (!v4)
      goto LABEL_9;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
  v6 = *(_QWORD **)(a1 + 136);
  if (v6 == (_QWORD *)(a1 + 112))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
  v8 = *(_QWORD **)(a1 + 104);
  if (v8 == (_QWORD *)(a1 + 80))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v8)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_19:
  v10 = *(_QWORD **)(a1 + 72);
  if (v10 == (_QWORD *)(a1 + 48))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v10)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_24:
  v12 = *(_QWORD **)(a1 + 40);
  if (v12 == (_QWORD *)(a1 + 16))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 16);
    goto LABEL_28;
  }
  if (v12)
  {
    v13 = 5;
LABEL_28:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

uint64_t sub_23424E198(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = &unk_25051B7F8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  sub_233CF11B0(a1 + 16, a4);
  sub_233CF11B0(a1 + 48, a5);
  sub_233CF11B0(a1 + 80, a6);
  sub_233CF11B0(a1 + 112, a7);
  sub_233CF11B0(a1 + 144, a8);
  *(_QWORD *)(a1 + 176) = off_250502E50;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 195) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  return a1;
}

void sub_23424E25C(uint64_t a1)
{
  sub_23424E018(a1);
  JUMPOUT(0x23493E704);
}

unsigned __int8 *sub_23424E280(unsigned __int8 *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  __int16 v12;

  v5 = result;
  if (!result[248] || *(_BYTE *)(*((_QWORD *)result + 30) + 80))
  {
    result[248] = 1;
    v12 = 0;
    if (*(unsigned __int8 *)(a2 + 14) >= 2u)
      sub_2342618FC((uint64_t)result);
    if (*a4)
    {
      result = sub_23411E5CC(a4, (uint64_t)v11);
      if (!LODWORD(v11[0]))
        return result;
    }
    else if (*(_DWORD *)(a2 + 4) == *((_DWORD *)result + 2) && *(_DWORD *)(a2 + 8) == *((_DWORD *)result + 3))
    {
      if (a3)
      {
        memset(v11, 0, sizeof(v11));
        sub_233D45404(a3, &v12, v11);
        if (!LODWORD(v11[0]))
        {
          v6 = *((_QWORD *)v5 + 5);
          if (v6)
          {
            v7 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 48);
            return (unsigned __int8 *)v7();
          }
LABEL_19:
          v9 = sub_23423F254();
          return (unsigned __int8 *)sub_23424E3B0(v9, v10);
        }
      }
    }
    v11[0] = a2;
    v8 = *((_QWORD *)v5 + 9);
    if (v8)
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 48);
      return (unsigned __int8 *)v7();
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_23424E3B0(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = *(_QWORD *)(a1 + 136);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 240);
    v5 = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)result + 48))(result, v4, &v5);
  }
  return result;
}

uint64_t sub_23424E3F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v14 = *a3;
  v15 = *((_QWORD *)a3 + 2);
  result = sub_2342112E8(a2, (uint64_t)&v14, (uint64_t)a4);
  if (!*(_DWORD *)a4)
  {
    if (*(_QWORD *)(a1 + 168))
    {
      v9 = *(_QWORD *)(a1 + 240);
      v12 = *a3;
      v13 = *((_QWORD *)a3 + 2);
      LODWORD(v14) = sub_23420D9CC(a2);
      v10 = *(_QWORD *)(a1 + 168);
      if (!v10)
      {
        v11 = sub_23423F254();
        return sub_23424E4C4(v11);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v10 + 48))(v10, v9, &v12, &v14);
    }
    *(_DWORD *)a4 = 0;
    a4[1] = "src/controller/TypedReadCallback.h";
    *((_DWORD *)a4 + 4) = 146;
  }
  return result;
}

uint64_t sub_23424E4C4(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(result + 248) || *(_BYTE *)(*(_QWORD *)(result + 240) + 80))
  {
    *(_BYTE *)(result + 248) = 1;
    v4 = *a2;
    v5 = *((_QWORD *)a2 + 2);
    v6 = 0;
    v2 = *(_QWORD *)(result + 72);
    if (v2)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v2 + 48))(v2, &v6, &v4);
    }
    else
    {
      v3 = sub_23423F254();
      return sub_23424E52C(v3);
    }
  }
  return result;
}

uint64_t sub_23424E52C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = a1;
  v1 = *(_QWORD *)(a1 + 104);
  if (v1)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v4);
  v3 = sub_23423F254();
  return sub_23424E564(v3);
}

void sub_23424E564(void *a1, _QWORD *a2)
{
  void *v3;

  if (a2[8] != 1 || (a1 = (void *)a2[7]) == 0)
    sub_234261994((uint64_t)a1);
  j__free(a1);
  if (a2[10] == 1)
  {
    v3 = (void *)a2[9];
    if (v3)
      j__free(v3);
  }
}

__n128 sub_23424E5BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424E5F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B8A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424E61C(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD))(result + 16);
  if (v3)
    return v3(*(_QWORD *)(result + 8), *a3);
  return result;
}

uint64_t sub_23424E634(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B910))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424E670()
{
  return &unk_25051B910;
}

__n128 sub_23424E67C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051B930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424E6B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051B930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424E6DC(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t (*v3)(uint64_t, __int128 *);
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, __int128 *))(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    return v3(v4, &v5);
  }
  return result;
}

uint64_t sub_23424E718(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051B9A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424E754()
{
  return &unk_25051B9A0;
}

_QWORD *sub_23424E760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  _BYTE *v17;
  char v18;
  int v19;
  uint64_t *v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned __int8 *)(a1 + 40);
  v17 = (_BYTE *)(a1 + 40);
  v18 = v19;
  if (v19)
  {
    v27 = *(_QWORD *)sub_233C25EA4(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v18 = 1;
  }
  v26[0] = v18;
  v20 = (uint64_t *)sub_233C25EA4(v26);
  v21 = *(_WORD *)(a1 + 56);
  v30[0] = &unk_25051BB10;
  v30[1] = a2;
  v30[2] = a5;
  v31 = v30;
  v28[0] = &unk_25051BBA0;
  v28[1] = a2;
  v28[2] = a6;
  v29 = v28;
  sub_23424E8EC(v16, v20, v21, a3, a4, (uint64_t)v30, (uint64_t)v28, a7, a8);
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  result = v31;
  if (v31 == v30)
  {
    v25 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_13;
    v25 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
LABEL_13:
  if (v26[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  return result;
}

uint64_t sub_23424E8EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[8];
  _QWORD v29[3];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v29[2] = 0;
  v29[0] = &off_250514968;
  v29[1] = 0;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  sub_2341CDA90(v29, a2);
  v39 = 0;
  v41 = 0;
  v43 = 0;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v36 = 0;
  sub_23424D704(v38, a6);
  sub_23424D704(v40, a7);
  LOBYTE(v37) = a8;
  v28[0] = 0;
  sub_23424EB20(a1, a3, a4, a5, (uint64_t)v29, v28, a9);
  v17 = v47;
  if (v47 == v46)
  {
    v18 = 4;
    v17 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  v19 = v45;
  if (v45 == v44)
  {
    v20 = 4;
    v19 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = v43;
  if (v43 == v42)
  {
    v22 = 4;
    v21 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_16;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_16:
  v23 = v41;
  if (v41 == v40)
  {
    v24 = 4;
    v23 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_21;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_21:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_25;
  }
  if (v39)
  {
    v26 = 5;
LABEL_25:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return sub_2341CD754(v29);
}

void sub_23424EB20(uint64_t a1@<X0>, __int16 a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  void *v14;
  _DWORD *v15;
  void *v16;
  _BYTE *v17;
  _DWORD *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void *v25;
  void (***v26)(_QWORD);
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v33 = a4;
  v34 = a3;
  v14 = sub_2341FF930();
  v31 = xmmword_25051B9B0;
  v32 = 57;
  v15 = sub_234114774(0xCuLL);
  if (!v15)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 60;
    return;
  }
  v16 = v15;
  *v15 = a3;
  v15[1] = a4;
  *((_WORD *)v15 + 4) = a2;
  *((_WORD *)v15 + 5) = -1;
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = 1;
  if (*a6)
  {
    v17 = sub_233C20E2C(a6);
    v18 = sub_234114774(0x10uLL);
    if (!v18)
    {
      *(_DWORD *)a7 = 11;
      *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
      *(_DWORD *)(a7 + 16) = 67;
LABEL_39:
      j__free(v16);
      return;
    }
    v19 = v18;
    v20 = *(_DWORD *)v17;
    *v18 = a3;
    *((_BYTE *)v18 + 4) = 1;
    v18[2] = v20;
    *((_WORD *)v18 + 6) = a2;
    *(_QWORD *)(a5 + 72) = v18;
    *(_QWORD *)(a5 + 80) = 1;
  }
  else
  {
    v19 = 0;
  }
  sub_233CF11B0((uint64_t)v37, a5 + 248);
  if (v38)
  {
    if (v38 == v37)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v35);
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(void))(*v38 + 16))();
    }
  }
  else
  {
    v36 = 0;
  }
  v21 = sub_23424EE84(&v34, &v33, a5 + 120, a5 + 152, (uint64_t)v35, a5 + 184, a5 + 216);
  if (!v21)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 83;
    goto LABEL_26;
  }
  v22 = (uint64_t)v21;
  v23 = (void (***)(_QWORD))sub_234114774(0x158uLL);
  if (!v23)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 87;
LABEL_22:
    v25 = (void *)sub_23424E018(v22);
    j__free(v25);
    goto LABEL_26;
  }
  v24 = v23;
  if (*(_BYTE *)(sub_23420D650(v23, v14, a1, v22 + 176, *(unsigned __int8 *)(a5 + 280)) + 80) == 1)
  {
    sub_234210A84((uint64_t)v24, a5, &v31);
    v19 = 0;
    v16 = 0;
  }
  else
  {
    sub_23420DF14((uint64_t)v24, a5, (uint64_t)&v31);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
  if (*(_DWORD *)a7)
  {
    (**v24)(v24);
    j__free(v24);
    goto LABEL_22;
  }
  v26 = *(void (****)(_QWORD))(v22 + 240);
  *(_QWORD *)(v22 + 240) = v24;
  if (v26)
  {
    (**v26)(v26);
    j__free(v26);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
LABEL_26:
  v27 = v36;
  if (v36 == v35)
  {
    v28 = 4;
    v27 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_31;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_31:
  v29 = v38;
  if (v38 == v37)
  {
    v30 = 4;
    v29 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_36;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_36:
  if (v19)
    j__free(v19);
  if (v16)
    goto LABEL_39;
}

void *sub_23424EE84(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = sub_234114774(0x100uLL);
  if (!v14)
    return v14;
  v15 = *a1;
  v16 = *a2;
  sub_233CF11B0((uint64_t)v40, a3);
  sub_233CF11B0((uint64_t)v38, a4);
  sub_233CF11B0((uint64_t)v34, a5);
  sub_23424F0BC((uint64_t)v36, v34);
  sub_233CF11B0((uint64_t)v32, a6);
  sub_233CF11B0((uint64_t)v30, a7);
  sub_23424F350((uint64_t)v14, v15, v16, (uint64_t)v40, (uint64_t)v38, (uint64_t)v36, (uint64_t)v32, (uint64_t)v30);
  v17 = v31;
  if (v31 == v30)
  {
    v18 = 4;
    v17 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_7:
  v19 = v33;
  if (v33 == v32)
  {
    v20 = 4;
    v19 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_12;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_12:
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_17;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_17:
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_22;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v26 = 5;
LABEL_26:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = v41;
  if (v41 == v40)
  {
    v28 = 4;
    v27 = v40;
    goto LABEL_31;
  }
  if (v41)
  {
    v28 = 5;
LABEL_31:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return v14;
}

uint64_t sub_23424F0BC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &unk_25051B9D8;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *sub_23424F148(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_25051B9D8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_23424F1A8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_25051B9D8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23493E704);
}

_QWORD *sub_23424F218(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_25051B9D8;
  sub_233CF11B0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_23424F25C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_25051B9D8;
  return sub_233CF11B0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_23424F27C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_23424F2B0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_23424F300(uint64_t a1, uint64_t *a2)
{
  sub_23424DFCC(a1 + 8, a2);
}

uint64_t sub_23424F308(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BA48))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424F344()
{
  return &unk_25051BA48;
}

uint64_t sub_23424F350(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = &unk_25051BA68;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  sub_233CF11B0(a1 + 16, a4);
  sub_233CF11B0(a1 + 48, a5);
  sub_233CF11B0(a1 + 80, a6);
  sub_233CF11B0(a1 + 112, a7);
  sub_233CF11B0(a1 + 144, a8);
  *(_QWORD *)(a1 + 176) = off_250502E50;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 195) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  return a1;
}

unsigned __int8 *sub_23424F414(unsigned __int8 *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  v5 = result;
  if (!result[248] || *(_BYTE *)(*((_QWORD *)result + 30) + 80))
  {
    result[248] = 1;
    v11 = 0;
    if (*(unsigned __int8 *)(a2 + 14) >= 2u)
      sub_2342618FC((uint64_t)result);
    if (*a4)
    {
      result = sub_23411E5CC(a4, (uint64_t)&v10);
      if (!(_DWORD)v10)
        return result;
    }
    else if (*(_DWORD *)(a2 + 4) == *((_DWORD *)result + 2) && *(_DWORD *)(a2 + 8) == *((_DWORD *)result + 3))
    {
      if (a3)
      {
        sub_2341049E0(a3, &v11, (uint64_t)&v10);
        if (!(_DWORD)v10)
        {
          v6 = *((_QWORD *)v5 + 5);
          if (v6)
          {
            v7 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 48);
            return (unsigned __int8 *)v7();
          }
LABEL_18:
          v9 = sub_23423F254();
          return (unsigned __int8 *)sub_23424F53C(v9);
        }
      }
    }
    v10 = a2;
    v8 = *((_QWORD *)v5 + 9);
    if (v8)
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 48);
      return (unsigned __int8 *)v7();
    }
    goto LABEL_18;
  }
  return result;
}

__n128 sub_23424F53C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BB10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424F578(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BB10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424F59C(uint64_t result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD))(result + 16);
  if (v3)
    return v3(*(_QWORD *)(result + 8), *a3);
  return result;
}

uint64_t sub_23424F5B4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BB80))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424F5F0()
{
  return &unk_25051BB80;
}

__n128 sub_23424F5FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BBA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_23424F638(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BBA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23424F65C(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t (*v3)(uint64_t, __int128 *);
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, __int128 *))(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    return v3(v4, &v5);
  }
  return result;
}

uint64_t sub_23424F698(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BC00))
    return a1 + 8;
  else
    return 0;
}

void *sub_23424F6D4()
{
  return &unk_25051BC00;
}

uint64_t sub_23424F6E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[11] = a3;
  a1[12] = a2;
  *((_BYTE *)a1 + 105) = 1;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

uint64_t sub_23424F70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v7[2];
  _QWORD v8[3];
  char v9;
  __int16 v10;
  char v11;

  v7[0] = &unk_2504F5578;
  v7[1] = a2;
  v8[2] = 0;
  v8[0] = &off_250514968;
  v8[1] = 0;
  v9 = 0;
  sub_2341CDA90(v8, a3);
  v10 = 0;
  v11 = 0;
  sub_2342504A0((uint64_t)v7, a1, 62, 5, (uint64_t)sub_23424F7B8, (uint64_t)sub_23424F8A8, 1, a4);
  v7[0] = &unk_2504F5578;
  return sub_2341CD754(v8);
}

uint64_t sub_23424F7B8(_QWORD *a1, char a2)
{
  uint64_t result;
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  uint8_t buf[16];
  uint64_t v8;

  if (a1)
  {
    *((_BYTE *)a1 + 104) = a2;
    *((_BYTE *)a1 + 105) = 2;
    memset(buf, 0, sizeof(buf));
    v8 = 0;
    result = (uint64_t)(*(_QWORD *(**)(uint8_t *__return_ptr, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*a1 + 40))(buf, *a1, a1[12], a1 + 1, a1 + 6, 0);
    if (*(_DWORD *)buf)
    {
      v5 = *(_OWORD *)buf;
      v6 = v8;
      return sub_23424FF4C((uint64_t)a1, (int *)&v5);
    }
  }
  else
  {
    v4 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Success Read Current Fabric index callback with null context. Ignoring", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_23424F8A8(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  char *v5;
  uint64_t result;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[16];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *a2;
    v11 = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "OnReadAttributeFailure %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *a2;
    v11 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  if (a1)
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    return sub_23424FF4C(a1, (int *)&v8);
  }
  else
  {
    v7 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Read Attribute failure callback with null context. Ignoring", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_23424FA40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD v6[2];
  _QWORD v7[3];
  char v8;
  __int16 v9;
  char v10;
  char v11;
  unsigned __int8 v12[4];

  if (*(_BYTE *)(result + 104))
  {
    v5 = result;
    v11 = *(_BYTE *)(result + 104);
    v6[0] = &unk_2504F5578;
    v6[1] = a2;
    v7[2] = 0;
    v7[0] = &off_250514968;
    v7[1] = 0;
    v8 = 0;
    sub_2341CDA90(v7, a3);
    v9 = 0;
    v10 = 0;
    v12[0] = 0;
    sub_234251478((uint64_t)v6, (uint64_t)&v11, v5, (uint64_t)sub_23424FB18, (uint64_t)sub_23424FBC8, v12, a4);
    v6[0] = &unk_2504F5578;
    return sub_2341CD754(v7);
  }
  else
  {
    *(_DWORD *)a4 = 113;
    *(_QWORD *)(a4 + 8) = "src/controller/CurrentFabricRemover.cpp";
    *(_DWORD *)(a4 + 16) = 51;
  }
  return result;
}

uint64_t sub_23424FB18(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  int v5;
  uint8_t buf[16];

  if (a1)
  {
    v3 = 0;
    v4 = "src/controller/CurrentFabricRemover.cpp";
    v5 = 133;
    return sub_23424FF4C(a1, &v3);
  }
  else
  {
    v2 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v2, OS_LOG_TYPE_DEFAULT, "Success Remove Fabric command callback with null context. Ignoring", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_23424FBC8(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  char *v5;
  uint64_t result;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  uint8_t buf[16];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *a2;
    v11 = *((_QWORD *)a2 + 2);
    v5 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "OnCommandFailure %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *a2;
    v11 = *((_QWORD *)a2 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  if (a1)
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    return sub_23424FF4C(a1, (int *)&v8);
  }
  else
  {
    v7 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_DEFAULT, "Send command failure callback with null context. Ignoring", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_23424FD60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  int v4;
  int v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  const char *v10;
  int v11;
  NSObject *v12;
  char *v13;
  int v14[2];
  const char *v15;
  int v16;
  int v17;
  uint8_t buf[4];
  _BYTE v19[12];
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v6 = *(unsigned __int8 *)(a1 + 105);
    if (v6 == 2)
    {
      result = sub_23424FA40(a1, a2, a3, (uint64_t)buf);
    }
    else
    {
      if (v6 != 1)
      {
        v9 = 3;
        v10 = "src/controller/CurrentFabricRemover.cpp";
        v11 = 80;
LABEL_13:
        v12 = sub_234117B80(9u, "Controller");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v9;
          *(_DWORD *)v19 = v3;
          *(_QWORD *)&v19[4] = v10;
          v20 = v11;
          v21 = v4;
          v13 = sub_2341083CC((const char **)buf, 1);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v19 = v13;
          _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Current Fabric Remover failure : %s", buf, 0xCu);
        }
        if (sub_234114844(1u))
        {
          *(_DWORD *)buf = v9;
          *(_DWORD *)v19 = v3;
          *(_QWORD *)&v19[4] = v10;
          v20 = v11;
          v21 = v4;
          sub_2341083CC((const char **)buf, 1);
          sub_2341147D0(9u, 1);
        }
        v14[0] = v9;
        v14[1] = v3;
        v15 = v10;
        v16 = v11;
        v17 = v4;
        return sub_23424FF4C(a1, v14);
      }
      result = sub_23424F70C(a1, a2, a3, (uint64_t)buf);
    }
    v9 = *(_DWORD *)buf;
    v3 = *(_DWORD *)v19;
    v10 = *(const char **)&v19[4];
    v11 = v20;
    v4 = v21;
    if (!*(_DWORD *)buf)
      return result;
    goto LABEL_13;
  }
  v8 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Device connected callback with null context. Ignoring", buf, 2u);
  }
  result = sub_234114844(2u);
  if ((_DWORD)result)
    return sub_2341147D0(9u, 2);
  return result;
}

uint64_t sub_23424FF4C(uint64_t a1, int *a2)
{
  int v4;
  NSObject *v5;
  NSObject *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, __int128 *);
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint8_t buf[16];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = sub_234117B80(9u, "Controller");
  v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v17 = *((_QWORD *)a2 + 2);
      v7 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_ERROR, "Remove Current Fabric Failed : %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v17 = *((_QWORD *)a2 + 2);
      sub_2341083CC((const char **)buf, 1);
      v9 = 1;
LABEL_10:
      result = sub_2341147D0(9u, v9);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v6, OS_LOG_TYPE_DEFAULT, "Remove Current Fabric succeeded.", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
    {
      v9 = 2;
      goto LABEL_10;
    }
  }
  *(_BYTE *)(a1 + 105) = 0;
  v10 = *(_QWORD *)(a1 + 88);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 24);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(v10 + 32);
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_OWORD *)a2;
    v15 = *((_QWORD *)a2 + 2);
    return v12(v11, v13, &v14);
  }
  return result;
}

uint64_t sub_2342500E0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *v5;
  char *v6;
  uint64_t result;
  NSObject *v8;
  __int128 v9;
  uint64_t v10;
  uint8_t buf[16];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = sub_234117B80(9u, "Controller");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_OWORD *)buf = *a3;
    v12 = *((_QWORD *)a3 + 2);
    v6 = sub_2341083CC((const char **)buf, 1);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl(&dword_233BF3000, v5, OS_LOG_TYPE_DEFAULT, "OnDeviceConnectionFailureFn: %s", buf, 0xCu);
  }
  if (sub_234114844(2u))
  {
    *(_OWORD *)buf = *a3;
    v12 = *((_QWORD *)a3 + 2);
    sub_2341083CC((const char **)buf, 1);
    sub_2341147D0(9u, 2);
  }
  if (a1)
  {
    v9 = *a3;
    v10 = *((_QWORD *)a3 + 2);
    return sub_23424FF4C(a1, (int *)&v9);
  }
  else
  {
    v8 = sub_234117B80(9u, "Controller");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v8, OS_LOG_TYPE_DEFAULT, "Device connected failure callback with null context. Ignoring", buf, 2u);
    }
    result = sub_234114844(2u);
    if ((_DWORD)result)
      return sub_2341147D0(9u, 2);
  }
  return result;
}

uint64_t sub_234250278(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = result + 8;
  *(_QWORD *)(result + 16) = result + 8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = result;
  *(_QWORD *)(result + 40) = sub_23424FD60;
  *(_QWORD *)(result + 48) = result + 48;
  *(_QWORD *)(result + 56) = result + 48;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = result;
  *(_QWORD *)(result + 80) = sub_2342500E0;
  *(_WORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = result + 112;
  *(_QWORD *)(result + 120) = result + 112;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = result;
  *(_QWORD *)(result + 144) = sub_2342502C8;
  return result;
}

uint64_t sub_2342502C8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  void (*v3)(uint64_t);
  void (*v4)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = *(void (**)(uint64_t))(result + 128);
    if (v2)
    {
      *(_QWORD *)(result + 128) = 0;
      v2(result + 112);
    }
    v3 = *(void (**)(uint64_t))(v1 + 64);
    if (v3)
    {
      *(_QWORD *)(v1 + 64) = 0;
      v3(v1 + 48);
    }
    v4 = *(void (**)(uint64_t))(v1 + 24);
    if (v4)
    {
      *(_QWORD *)(v1 + 24) = 0;
      v4(v1 + 8);
    }
    JUMPOUT(0x23493E704);
  }
  return result;
}

_QWORD *sub_23425033C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  void (*v11)(char *);
  void (*v12)(char *);
  void (*v13)(char *);

  result = operator new(0x98uLL, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v7 = result;
    v8 = (char *)(result + 1);
    *result = a1;
    result[1] = result + 1;
    result[2] = result + 1;
    result[3] = 0;
    result[4] = result;
    result[5] = sub_23424FD60;
    v9 = (char *)(result + 6);
    result[6] = result + 6;
    result[7] = result + 6;
    result[8] = 0;
    result[9] = result;
    *((_BYTE *)result + 104) = 0;
    result[17] = result;
    result[18] = sub_2342502C8;
    v10 = (char *)(result + 14);
    result[14] = result + 14;
    result[15] = result + 14;
    result[16] = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    result[11] = result + 14;
    result[12] = a2;
    result[10] = sub_2342500E0;
    *((_BYTE *)result + 105) = 1;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, result + 1, result + 6, 0);
    if (*(_DWORD *)a3)
    {
      v11 = (void (*)(char *))v7[16];
      if (v11)
      {
        v7[16] = 0;
        v11(v10);
      }
      v12 = (void (*)(char *))v7[8];
      if (v12)
      {
        v7[8] = 0;
        v12(v9);
      }
      v13 = (void (*)(char *))v7[3];
      if (v13)
      {
        v7[3] = 0;
        v13(v8);
      }
      JUMPOUT(0x23493E704);
    }
  }
  else
  {
    *(_DWORD *)a3 = 11;
    a3[1] = "src/controller/CurrentFabricRemover.cpp";
    *((_DWORD *)a3 + 4) = 174;
  }
  return result;
}

_QWORD *sub_2342504A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  _BYTE *v17;
  char v18;
  int v19;
  uint64_t *v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  char v26[8];
  uint64_t v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v16 = *(_QWORD *)(a1 + 8);
  v19 = *(unsigned __int8 *)(a1 + 40);
  v17 = (_BYTE *)(a1 + 40);
  v18 = v19;
  if (v19)
  {
    v27 = *(_QWORD *)sub_233C25EA4(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    v18 = 1;
  }
  v26[0] = v18;
  v20 = (uint64_t *)sub_233C25EA4(v26);
  v21 = *(_WORD *)(a1 + 56);
  v30[0] = &unk_25051BD70;
  v30[1] = a2;
  v30[2] = a5;
  v31 = v30;
  v28[0] = &unk_25051BE00;
  v28[1] = a2;
  v28[2] = a6;
  v29 = v28;
  sub_23425062C(v16, v20, v21, a3, a4, (uint64_t)v30, (uint64_t)v28, a7, a8);
  v22 = v29;
  if (v29 == v28)
  {
    v23 = 4;
    v22 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_8;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_8:
  result = v31;
  if (v31 == v30)
  {
    v25 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_13;
    v25 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
LABEL_13:
  if (v26[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  return result;
}

uint64_t sub_23425062C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[8];
  _QWORD v29[3];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;
  __int16 v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _BYTE v42[24];
  _BYTE *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v29[2] = 0;
  v29[0] = &off_250514968;
  v29[1] = 0;
  v30 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  sub_2341CDA90(v29, a2);
  v39 = 0;
  v41 = 0;
  v43 = 0;
  v45 = 0;
  v47 = 0;
  v48 = 0;
  v36 = 0;
  sub_23424D704(v38, a6);
  sub_23424D704(v40, a7);
  LOBYTE(v37) = a8;
  v28[0] = 0;
  sub_234250860(a1, a3, a4, a5, (uint64_t)v29, v28, a9);
  v17 = v47;
  if (v47 == v46)
  {
    v18 = 4;
    v17 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  v19 = v45;
  if (v45 == v44)
  {
    v20 = 4;
    v19 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_11:
  v21 = v43;
  if (v43 == v42)
  {
    v22 = 4;
    v21 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_16;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_16:
  v23 = v41;
  if (v41 == v40)
  {
    v24 = 4;
    v23 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_21;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_21:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_25;
  }
  if (v39)
  {
    v26 = 5;
LABEL_25:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return sub_2341CD754(v29);
}

void sub_234250860(uint64_t a1@<X0>, __int16 a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  void *v14;
  _DWORD *v15;
  void *v16;
  _BYTE *v17;
  _DWORD *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void *v25;
  void (***v26)(_QWORD);
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v33 = a4;
  v34 = a3;
  v14 = sub_2341FF930();
  v31 = xmmword_25051BC10;
  v32 = 57;
  v15 = sub_234114774(0xCuLL);
  if (!v15)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 60;
    return;
  }
  v16 = v15;
  *v15 = a3;
  v15[1] = a4;
  *((_WORD *)v15 + 4) = a2;
  *((_WORD *)v15 + 5) = -1;
  *(_QWORD *)(a5 + 56) = v15;
  *(_QWORD *)(a5 + 64) = 1;
  if (*a6)
  {
    v17 = sub_233C20E2C(a6);
    v18 = sub_234114774(0x10uLL);
    if (!v18)
    {
      *(_DWORD *)a7 = 11;
      *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
      *(_DWORD *)(a7 + 16) = 67;
LABEL_39:
      j__free(v16);
      return;
    }
    v19 = v18;
    v20 = *(_DWORD *)v17;
    *v18 = a3;
    *((_BYTE *)v18 + 4) = 1;
    v18[2] = v20;
    *((_WORD *)v18 + 6) = a2;
    *(_QWORD *)(a5 + 72) = v18;
    *(_QWORD *)(a5 + 80) = 1;
  }
  else
  {
    v19 = 0;
  }
  sub_233CF11B0((uint64_t)v37, a5 + 248);
  if (v38)
  {
    if (v38 == v37)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _BYTE *))(v37[0] + 24))(v37, v35);
    }
    else
    {
      v36 = (_BYTE *)(*(uint64_t (**)(void))(*v38 + 16))();
    }
  }
  else
  {
    v36 = 0;
  }
  v21 = sub_234250BC4(&v34, &v33, a5 + 120, a5 + 152, (uint64_t)v35, a5 + 184, a5 + 216);
  if (!v21)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 83;
    goto LABEL_26;
  }
  v22 = (uint64_t)v21;
  v23 = (void (***)(_QWORD))sub_234114774(0x158uLL);
  if (!v23)
  {
    *(_DWORD *)a7 = 11;
    *(_QWORD *)(a7 + 8) = "src/controller/ReadInteraction.h";
    *(_DWORD *)(a7 + 16) = 87;
LABEL_22:
    v25 = (void *)sub_23424E018(v22);
    j__free(v25);
    goto LABEL_26;
  }
  v24 = v23;
  if (*(_BYTE *)(sub_23420D650(v23, v14, a1, v22 + 176, *(unsigned __int8 *)(a5 + 280)) + 80) == 1)
  {
    sub_234210A84((uint64_t)v24, a5, &v31);
    v19 = 0;
    v16 = 0;
  }
  else
  {
    sub_23420DF14((uint64_t)v24, a5, (uint64_t)&v31);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
  if (*(_DWORD *)a7)
  {
    (**v24)(v24);
    j__free(v24);
    goto LABEL_22;
  }
  v26 = *(void (****)(_QWORD))(v22 + 240);
  *(_QWORD *)(v22 + 240) = v24;
  if (v26)
  {
    (**v26)(v26);
    j__free(v26);
  }
  *(_OWORD *)a7 = v31;
  *(_QWORD *)(a7 + 16) = v32;
LABEL_26:
  v27 = v36;
  if (v36 == v35)
  {
    v28 = 4;
    v27 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_31;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_31:
  v29 = v38;
  if (v38 == v37)
  {
    v30 = 4;
    v29 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_36;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_36:
  if (v19)
    j__free(v19);
  if (v16)
    goto LABEL_39;
}

void *sub_234250BC4(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = sub_234114774(0x100uLL);
  if (!v14)
    return v14;
  v15 = *a1;
  v16 = *a2;
  sub_233CF11B0((uint64_t)v40, a3);
  sub_233CF11B0((uint64_t)v38, a4);
  sub_233CF11B0((uint64_t)v34, a5);
  sub_234250DFC((uint64_t)v36, v34);
  sub_233CF11B0((uint64_t)v32, a6);
  sub_233CF11B0((uint64_t)v30, a7);
  sub_234251090((uint64_t)v14, v15, v16, (uint64_t)v40, (uint64_t)v38, (uint64_t)v36, (uint64_t)v32, (uint64_t)v30);
  v17 = v31;
  if (v31 == v30)
  {
    v18 = 4;
    v17 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_7;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_7:
  v19 = v33;
  if (v33 == v32)
  {
    v20 = 4;
    v19 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_12;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_12:
  v21 = v37;
  if (v37 == v36)
  {
    v22 = 4;
    v21 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_17;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_17:
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_22;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  v25 = v39;
  if (v39 == v38)
  {
    v26 = 4;
    v25 = v38;
    goto LABEL_26;
  }
  if (v39)
  {
    v26 = 5;
LABEL_26:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = v41;
  if (v41 == v40)
  {
    v28 = 4;
    v27 = v40;
    goto LABEL_31;
  }
  if (v41)
  {
    v28 = 5;
LABEL_31:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return v14;
}

uint64_t sub_234250DFC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &unk_25051BC38;
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    }
    else
    {
      v4[4] = v6;
      a2[3] = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

_QWORD *sub_234250E88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_25051BC38;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_234250EE8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_25051BC38;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23493E704);
}

_QWORD *sub_234250F58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x28uLL);
  *v2 = &unk_25051BC38;
  sub_233CF11B0((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_234250F9C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_25051BC38;
  return sub_233CF11B0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_234250FBC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_234250FF0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_234251040(uint64_t a1, uint64_t *a2)
{
  sub_23424DFCC(a1 + 8, a2);
}

uint64_t sub_234251048(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BCA8))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251084()
{
  return &unk_25051BCA8;
}

uint64_t sub_234251090(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)a1 = &unk_25051BCC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  sub_233CF11B0(a1 + 16, a4);
  sub_233CF11B0(a1 + 48, a5);
  sub_233CF11B0(a1 + 80, a6);
  sub_233CF11B0(a1 + 112, a7);
  sub_233CF11B0(a1 + 144, a8);
  *(_QWORD *)(a1 + 176) = off_250502E50;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 195) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  return a1;
}

unsigned __int8 *sub_234251154(unsigned __int8 *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = result;
  if (!result[248] || *(_BYTE *)(*((_QWORD *)result + 30) + 80))
  {
    result[248] = 1;
    v11 = 0;
    if (*(unsigned __int8 *)(a2 + 14) >= 2u)
      sub_234261A2C((uint64_t)result);
    if (*a4)
    {
      result = sub_23411E5CC(a4, (uint64_t)&v10);
      if (!(_DWORD)v10)
        return result;
    }
    else if (*(_DWORD *)(a2 + 4) == *((_DWORD *)result + 2) && *(_DWORD *)(a2 + 8) == *((_DWORD *)result + 3))
    {
      if (a3)
      {
        sub_23410492C(a3, &v11, (uint64_t)&v10);
        if (!(_DWORD)v10)
        {
          v6 = *((_QWORD *)v5 + 5);
          if (v6)
          {
            v7 = *(uint64_t (**)(void))(*(_QWORD *)v6 + 48);
            return (unsigned __int8 *)v7();
          }
LABEL_18:
          v9 = sub_23423F254();
          return (unsigned __int8 *)sub_23425127C(v9);
        }
      }
    }
    v10 = a2;
    v8 = *((_QWORD *)v5 + 9);
    if (v8)
    {
      v7 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 48);
      return (unsigned __int8 *)v7();
    }
    goto LABEL_18;
  }
  return result;
}

void sub_23425127C(void *a1, _QWORD *a2)
{
  void *v3;

  if (a2[8] != 1 || (a1 = (void *)a2[7]) == 0)
    sub_234261AC8((uint64_t)a1);
  j__free(a1);
  if (a2[10] == 1)
  {
    v3 = (void *)a2[9];
    if (v3)
      j__free(v3);
  }
}

__n128 sub_2342512D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234251310(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BD70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234251334(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD))(result + 16);
  if (v3)
    return v3(*(_QWORD *)(result + 8), *a3);
  return result;
}

uint64_t sub_23425134C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BDE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251388()
{
  return &unk_25051BDE0;
}

__n128 sub_234251394(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BE00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2342513D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BE00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2342513F4(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t (*v3)(uint64_t, __int128 *);
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t, __int128 *))(result + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(result + 8);
    v5 = *a3;
    v6 = *((_QWORD *)a3 + 2);
    return v3(v4, &v5);
  }
  return result;
}

uint64_t sub_234251430(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BE60))
    return a1 + 8;
  else
    return 0;
}

void *sub_23425146C()
{
  return &unk_25051BE60;
}

_QWORD *sub_234251478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  _BYTE *v15;
  char v16;
  int v17;
  uint64_t *v18;
  unsigned __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 8);
  v17 = *(unsigned __int8 *)(a1 + 40);
  v15 = (_BYTE *)(a1 + 40);
  v16 = v17;
  if (v17)
  {
    v25 = *(_QWORD *)sub_233C25EA4(v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    v16 = 1;
  }
  v24[0] = v16;
  v18 = (uint64_t *)sub_233C25EA4(v24);
  v19 = *(_WORD *)(a1 + 56);
  v28[0] = &unk_25051BFC0;
  v28[1] = a3;
  v28[2] = a4;
  v29 = v28;
  v26[0] = &unk_25051C040;
  v26[1] = a3;
  v26[2] = a5;
  v27 = v26;
  sub_2342515FC(v14, v18, v19, a2, (uint64_t)v28, (uint64_t)v26, a6, a1 + 60, a7, 0);
  v20 = v27;
  if (v27 == v26)
  {
    v21 = 4;
    v20 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_8:
  result = v29;
  if (v29 == v28)
  {
    v23 = 4;
    result = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v23 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
LABEL_13:
  if (v24[0])
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
  return result;
}

void sub_2342515FC(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _QWORD *a10)
{
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  void *v36;
  _BYTE v37[4];
  int v38;
  unsigned __int16 v39[2];
  uint64_t v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  __int128 v48;
  __int128 *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v19 = *a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2) == 3
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) == 4)
  {
    *(_DWORD *)a9 = 47;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    v20 = 62;
LABEL_4:
    *(_DWORD *)(a9 + 16) = v20;
    return;
  }
  v39[0] = a3;
  v39[1] = 0;
  v40 = 0xA0000003ELL;
  v41 = 1;
  v21 = sub_234114774(0x70uLL);
  if (!v21)
  {
    v20 = 71;
    v25 = 11;
LABEL_10:
    *(_DWORD *)a9 = v25;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    goto LABEL_4;
  }
  v22 = v21;
  sub_233CF11B0((uint64_t)&v48, a5);
  sub_233CF11B0((uint64_t)v46, a6);
  v45 = 0;
  sub_234241D54((uint64_t)v22, (uint64_t)&v48, (uint64_t)v46, (uint64_t)v44);
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_13;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_13:
  v26 = v47;
  if (v47 == v46)
  {
    v27 = 4;
    v26 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_18;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_18:
  v28 = v49;
  if (v49 == &v48)
  {
    v29 = 4;
    v28 = &v48;
  }
  else
  {
    if (!v49)
      goto LABEL_23;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_23:
  v42[0] = &unk_25051BE80;
  v42[1] = v22;
  v43 = v42;
  sub_233CF1118(v22 + 9, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_28;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_28:
  v32 = *a7;
  v33 = (unsigned __int8 *)sub_234114774(0x198uLL);
  if (!v33)
  {
    *(_DWORD *)a9 = 11;
    *(_QWORD *)(a9 + 8) = "src/controller/InvokeInteraction.h";
    *(_DWORD *)(a9 + 16) = 86;
    goto LABEL_35;
  }
  v34 = v33;
  v35 = sub_2341FD1B4(v33, v22, a1, v32 != 0, 0, 0);
  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = 0;
  sub_234251920(v35, v39, a4, (uint64_t)a7, (_QWORD *)a9);
  if (!*(_DWORD *)a9)
  {
    *(_QWORD *)a9 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    v37[0] = *(_BYTE *)a8;
    if (v37[0])
      v38 = *(_DWORD *)(a8 + 4);
    sub_2341FD918(v34, a2, (uint64_t)v37, a9);
    if (!*(_DWORD *)a9)
    {
      if (a10)
      {
        *(_QWORD *)&v48 = v22;
        *((_QWORD *)&v48 + 1) = v34;
        sub_23425196C(a10, &v48);
      }
      v25 = 0;
      v20 = 109;
      goto LABEL_10;
    }
  }
  v36 = (void *)sub_2341FD350(v34);
  j__free(v36);
LABEL_35:
  *(_QWORD *)&v48 = 0;
  sub_233CF635C((int)&v48, v22);
}

void sub_234251920(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE v5[2];
  __int16 v6;
  char v7;
  _QWORD v8[2];

  v5[0] = *(_BYTE *)a4;
  if (v5[0])
    v6 = *(_WORD *)(a4 + 2);
  v7 = 0;
  v8[0] = &unk_25051BF00;
  v8[1] = a3;
  sub_2341FF118(a1, a2, (uint64_t)v8, (uint64_t)v5, a5);
}

_QWORD *sub_23425196C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_25051BF40;
  v7 = *a2;
  v8 = &v6;
  sub_23423FA0C(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_234251A18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25051BE80;
  result[1] = v3;
  return result;
}

uint64_t sub_234251A50(uint64_t result, _QWORD *a2)
{
  *a2 = &unk_25051BE80;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_234251A74(uint64_t a1, _QWORD *a2)
{
  sub_23423FC20((_QWORD **)(a1 + 8), a2);
}

uint64_t sub_234251A7C(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BEE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251AB8()
{
  return &unk_25051BEE0;
}

double sub_234251AC4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_233D1007C(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

__n128 sub_234251ACC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BF40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234251B08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BF40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_234251B2C(uint64_t a1)
{
  sub_23423FDC0(a1 + 8);
}

uint64_t sub_234251B34(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051BFA0))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251B70()
{
  return &unk_25051BFA0;
}

__n128 sub_234251B7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051BFC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234251BB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051BFC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234251BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 8), a4);
}

uint64_t sub_234251BE8(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051C020))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251C24()
{
  return &unk_25051C020;
}

__n128 sub_234251C30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_25051C040;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_234251C6C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_25051C040;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_234251C90(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  return (*(uint64_t (**)(_QWORD, __int128 *))(a1 + 16))(*(_QWORD *)(a1 + 8), &v3);
}

uint64_t sub_234251CC4(uint64_t a1, uint64_t a2)
{
  if (sub_233CF3118(a2, (uint64_t)&unk_25051C0A0))
    return a1 + 8;
  else
    return 0;
}

void *sub_234251D00()
{
  return &unk_25051C0A0;
}

BOOL sub_234251D0C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    sub_234261B64(a1);
  return *(_BYTE *)(v1 + 2642) != 0;
}

uint64_t sub_234251D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = sub_2341F3A88();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v5 + 72))(v5, a2, a3);
}

_BYTE *sub_234251D78@<X0>(_BYTE *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  int v5;
  int v7;

  v3 = result;
  v5 = *a2;
  if (!*a2)
  {
    result[40] = 0;
LABEL_7:
    v7 = 145;
    goto LABEL_8;
  }
  result = sub_233C05D98(a2);
  if (*(unsigned __int16 *)result <= 0xFFFu)
  {
    v5 = *a2;
    v3[40] = v5;
    if (v5)
    {
      v5 = 0;
      *((_WORD *)v3 + 21) = *((_WORD *)a2 + 1);
    }
    goto LABEL_7;
  }
  v7 = 142;
  v5 = 47;
LABEL_8:
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = "src/app/server/Dnssd.cpp";
  *(_DWORD *)(a3 + 16) = v7;
  return result;
}

char *sub_234251E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _UNKNOWN **v6;
  char *result;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  int v11;
  uint8_t v12[32];

  v6 = sub_2341B2114();
  result = (char *)(*(_QWORD *(**)(uint8_t *__return_ptr, _UNKNOWN **, uint64_t, uint64_t))*v6)(v12, v6, a2, a3);
  if (*(_DWORD *)v12)
  {
    v8 = 0;
    v9 = (char *)(a1 + 8);
    while (!v9[v8])
    {
      if (++v8 == 6)
      {
        v10 = sub_234117B80(0x22u, "Discovery");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to get primary mac address of device. Generating a random one.", v12, 2u);
        }
        if (sub_234114844(1u))
          sub_2341147D0(0x22u, 1);
        result = sub_234139DB0(v9, 6uLL, (uint64_t)v12);
        break;
      }
    }
    if (a3 != 6)
      sub_234261C00((uint64_t)result);
    v11 = *(_DWORD *)v9;
    *(_WORD *)(a2 + 4) = *((_WORD *)v9 + 2);
    *(_DWORD *)a2 = v11;
  }
  return result;
}

uint64_t sub_234251F0C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  __int16 v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  NSObject *v17;
  unint64_t v18;
  int v19;
  _BYTE v20[16];
  const void *v21;
  unint64_t v22;
  _BYTE v23[6];
  uint64_t v24[2];
  uint64_t v25;
  unint64_t v26;
  _BYTE __dst[47];
  __int128 v28;
  _WORD v29[2];
  int v30;
  char v31;
  __int128 v32;
  _BYTE v33[26];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = "src/app/server/Dnssd.cpp";
    v19 = 191;
    goto LABEL_33;
  }
  v4 = result;
  result = (uint64_t)sub_233C0BD8C(*(_QWORD **)(result + 16), (uint64_t)v24);
  if (v25 == v26 || (v26 == 16 ? (v5 = v25 == 16) : (v5 = 0), v5 ? (v6 = v24[0] == v3) : (v6 = 0), v6))
  {
LABEL_31:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = "src/app/server/Dnssd.cpp";
    v19 = 228;
LABEL_33:
    *(_DWORD *)(a2 + 16) = v19;
    return result;
  }
LABEL_10:
  result = sub_233C06A04(v24);
  if (!*(_BYTE *)(result + 141))
    goto LABEL_22;
  v7 = (_QWORD *)result;
  sub_234251E04(v4, (uint64_t)v23, 6);
  memset(__dst, 0, sizeof(__dst));
  v8 = v7[2];
  *(_QWORD *)&v28 = *v7;
  *((_QWORD *)&v28 + 1) = v8;
  sub_233BF7114(&v21, (uint64_t)v23, 6);
  if (v22 >= 8)
    v9 = 8;
  else
    v9 = v22;
  *(_QWORD *)&__dst[15] = v9;
  memcpy(__dst, v21, v9);
  v10 = *(_WORD *)(v4 + 32);
  v11 = *(_DWORD *)(v4 + 36);
  sub_2341B1BB8((uint64_t)v20);
  if (v20[0])
  {
    v12 = sub_233C0FDD4(v20);
    v13 = *(_QWORD *)v12;
    v14 = *((_DWORD *)v12 + 2);
    v15 = 0x100000000;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = 0;
  }
  *(_QWORD *)&__dst[23] = v13;
  __dst[35] = BYTE4(v15);
  *(_DWORD *)&__dst[31] = v15 | v14;
  v29[0] = v10;
  v30 = v11;
  v31 = 1;
  *(_OWORD *)&v33[10] = *(_OWORD *)&__dst[26];
  v32 = *(_OWORD *)__dst;
  *(_OWORD *)v33 = *(_OWORD *)&__dst[16];
  v34 = v28;
  *(_WORD *)&v33[23] = 6;
  v16 = sub_2341F3A88();
  v17 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__dst = 67109888;
    *(_DWORD *)&__dst[4] = HIDWORD(v34);
    *(_WORD *)&__dst[8] = 1024;
    *(_DWORD *)&__dst[10] = DWORD2(v34);
    *(_WORD *)&__dst[14] = 1024;
    *(_DWORD *)&__dst[16] = DWORD1(v34);
    *(_WORD *)&__dst[20] = 1024;
    *(_DWORD *)&__dst[22] = v34;
    _os_log_impl(&dword_233BF3000, v17, OS_LOG_TYPE_DEFAULT, "Advertise operational node %08X%08X-%08X%08X", __dst, 0x1Au);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = (*(uint64_t (**)(uint64_t *, _WORD *))(*v16 + 48))(v16, v29);
  if (!*(_DWORD *)a2)
  {
LABEL_22:
    v18 = v25;
    while (1)
    {
      if (v18 < v26)
        v25 = ++v18;
      if (v18 == v26)
        goto LABEL_31;
      if (*(_BYTE *)(v24[0] + 152 * v18 + 137)
        && (unint64_t)(*(_QWORD *)(v24[0] + 152 * v18) - 1) < 0xFFFFFFEFFFFFFFFFLL)
      {
        if (v26 != 16 || v18 != 16 || v24[0] != v3)
          goto LABEL_10;
        goto LABEL_31;
      }
    }
  }
  return result;
}

uint64_t sub_234252228@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v8;
  size_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  _UNKNOWN **v14;
  _UNKNOWN **v15;
  _UNKNOWN **v16;
  _UNKNOWN **v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  char *v24;
  uint64_t result;
  __int16 *v26;
  _UNKNOWN **v27;
  NSObject *v28;
  _UNKNOWN **v29;
  NSObject *v30;
  _UNKNOWN **v31;
  NSObject *v32;
  _UNKNOWN **v33;
  uint64_t *v34;
  NSObject *v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const void *v42;
  unint64_t v43;
  uint8_t v44[6];
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BOOL4 v55;
  char __src[33];
  uint8_t buf[16];
  uint64_t v58;
  _WORD v59[2];
  int v60;
  char v61;
  _BYTE v62[15];
  size_t v63;
  _BYTE v64[12];
  char v65;
  int v66;
  __int16 v67;
  int v68;
  uint8_t v69;
  int v70;
  uint64_t v71;
  int v72;
  char v73;
  __int16 v74;
  char v75;
  __int16 v76;
  char v77;
  char v78[32];
  _BYTE v79[3];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[22];
  char v86[128];
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  memset(&v62[8], 0, 7);
  *(_QWORD *)&v64[1] = 0;
  *(_DWORD *)&v64[8] = 0;
  *(_DWORD *)buf = 0;
  buf[10] = 0;
  *(_WORD *)((char *)&v72 + 1) = 0;
  HIBYTE(v72) = 0;
  v74 = 0;
  v75 = 0;
  memset(v78, 0, sizeof(v78));
  *(_WORD *)v79 = 0;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  memset(v85, 0, 21);
  LOBYTE(v87) = 0;
  memset(v86, 0, sizeof(v86));
  *(_DWORD *)&buf[3] = 0;
  *(_DWORD *)&buf[6] = 0;
  v7 = 34;
  if (a2)
    v7 = 32;
  v8 = *(_DWORD *)(a1 + 36);
  v59[0] = *(_WORD *)(a1 + v7);
  v60 = v8;
  v61 = 1;
  *(_QWORD *)v62 = 0;
  v63 = 0;
  v64[0] = 0;
  v65 = 0;
  v67 = *(_WORD *)&buf[4];
  v66 = *(_DWORD *)buf;
  v68 = 0;
  v69 = buf[10];
  LOBYTE(v72) = 0;
  v71 = 0;
  v73 = 0;
  v76 = 0;
  v77 = 0;
  v79[2] = 0;
  v85[21] = 0;
  *(_WORD *)((char *)&v87 + 1) = 0;
  HIBYTE(v87) = 0;
  HIBYTE(v68) = a2 ^ 1;
  v70 = a3;
  sub_234251E04(a1, (uint64_t)v44, 6);
  sub_233BF7114(&v42, (uint64_t)v44, 6);
  if (v43 >= 8)
    v9 = 8;
  else
    v9 = v43;
  v63 = v9;
  memcpy(v62, v42, v9);
  v41 = 0;
  v40 = 0;
  v10 = sub_2341B1D04();
  (*(void (**)(uint8_t *__return_ptr, uint64_t, __int16 *))(*(_QWORD *)v10 + 24))(buf, v10, &v41);
  if (*(_DWORD *)buf)
  {
    v11 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v11, OS_LOG_TYPE_INFO, "Vendor ID not known", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  else
  {
    BYTE2(v71) = 1;
    LOWORD(v71) = v41;
  }
  v12 = sub_2341B1D04();
  (*(void (**)(uint8_t *__return_ptr, uint64_t, __int16 *))(*(_QWORD *)v12 + 40))(buf, v12, &v41);
  if (*(_DWORD *)buf)
  {
    v13 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233BF3000, v13, OS_LOG_TYPE_INFO, "Product ID not known", buf, 2u);
    }
    if (sub_234114844(3u))
      sub_2341147D0(0x22u, 3);
  }
  else
  {
    BYTE6(v71) = 1;
    WORD2(v71) = v41;
  }
  v14 = sub_2341B2114();
  if ((*((unsigned int (**)(_UNKNOWN **))*v14 + 30))(v14))
  {
    v15 = sub_2341B2114();
    (*((void (**)(uint8_t *__return_ptr, _UNKNOWN **, int *))*v15 + 31))(buf, v15, &v40);
    if (!*(_DWORD *)buf)
    {
      v73 = 1;
      v72 = v40;
    }
  }
  v16 = sub_2341B2114();
  if ((*((unsigned int (**)(_UNKNOWN **))*v16 + 32))(v16))
  {
    v17 = sub_2341B2114();
    (*((void (**)(uint8_t *__return_ptr, _UNKNOWN **, char *, uint64_t))*v17 + 33))(buf, v17, __src, 33);
    if (!*(_DWORD *)buf)
    {
      strncpy(&v78[1], __src, 0x21uLL);
      *(_WORD *)&v79[1] = 256;
    }
  }
  sub_2341B1BB8((uint64_t)buf);
  if (buf[0])
  {
    v18 = sub_233C0FDD4(buf);
    v19 = *(_QWORD *)v18;
    v20 = *((_DWORD *)v18 + 2);
    v21 = 0x100000000;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v19 = 0;
  }
  *(_QWORD *)v64 = v19;
  v65 = BYTE4(v21);
  *(_DWORD *)&v64[8] = v21 | v20;
  if (!a2)
    goto LABEL_59;
  v39 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v22 = sub_2341B1CD4();
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)v22 + 16))(v22, &v39);
  if (*(_DWORD *)a4)
  {
    v23 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = *(_OWORD *)a4;
      v58 = a4[2];
      v24 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_233BF3000, v23, OS_LOG_TYPE_ERROR, "Setup discriminator read error (%s)! Critical error, will not be commissionable.", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = *(_OWORD *)a4;
      v58 = a4[2];
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x22u, 1);
    }
    return result;
  }
  if (*(_BYTE *)(a1 + 40))
    v26 = (__int16 *)sub_233C05D98((_BYTE *)(a1 + 40));
  else
    v26 = &v39;
  v39 = *v26;
  LOBYTE(v68) = HIBYTE(v39) & 0xF;
  *(_WORD *)((char *)&v68 + 1) = v39;
  if (sub_234251D0C(a1))
  {
    v27 = sub_2341B2114();
    (*((void (**)(uint8_t *__return_ptr, _UNKNOWN **, __int16 *))*v27 + 36))(buf, v27, &v41);
    if (*(_DWORD *)buf)
    {
      v28 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v28, OS_LOG_TYPE_INFO, "DNS-SD Pairing Hint not set", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x22u, 3);
    }
    else
    {
      v77 = 1;
      v76 = v41;
    }
    v31 = sub_2341B2114();
    (*((void (**)(uint64_t *__return_ptr, _UNKNOWN **, uint8_t *, uint64_t))*v31 + 37))(&v45, v31, buf, 129);
    if ((_DWORD)v45)
    {
      v32 = sub_234117B80(0x22u, "Discovery");
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        goto LABEL_56;
      LOWORD(v45) = 0;
      goto LABEL_55;
    }
  }
  else
  {
    v29 = sub_2341B2114();
    (*((void (**)(uint8_t *__return_ptr, _UNKNOWN **, __int16 *))*v29 + 34))(buf, v29, &v41);
    if (*(_DWORD *)buf)
    {
      v30 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233BF3000, v30, OS_LOG_TYPE_INFO, "DNS-SD Pairing Hint not set", buf, 2u);
      }
      if (sub_234114844(3u))
        sub_2341147D0(0x22u, 3);
    }
    else
    {
      v77 = 1;
      v76 = v41;
    }
    v33 = sub_2341B2114();
    (*((void (**)(uint64_t *__return_ptr, _UNKNOWN **, uint8_t *, uint64_t))*v33 + 35))(&v45, v33, buf, 129);
    if ((_DWORD)v45)
    {
      v32 = sub_234117B80(0x22u, "Discovery");
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        goto LABEL_56;
      LOWORD(v45) = 0;
LABEL_55:
      _os_log_impl(&dword_233BF3000, v32, OS_LOG_TYPE_INFO, "DNS-SD Pairing Instruction not set", (uint8_t *)&v45, 2u);
LABEL_56:
      if (sub_234114844(3u))
        sub_2341147D0(0x22u, 3);
      goto LABEL_59;
    }
  }
  strncpy(v86, (const char *)buf, 0x81uLL);
  LOWORD(v87) = 256;
LABEL_59:
  v34 = sub_2341F3A88();
  v35 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    if ((v71 & 0xFF0000) != 0)
      v36 = (unsigned __int16)v71;
    else
      v36 = 0;
    if ((v71 & 0xFF000000000000) != 0)
      v37 = WORD2(v71);
    else
      v37 = 0;
    v38 = BYTE2(v87);
    if (HIWORD(v87) <= 0x100u)
      v38 = 0;
    LODWORD(v45) = 67110400;
    HIDWORD(v45) = v36;
    v46 = 1024;
    v47 = v37;
    v48 = 1024;
    v49 = *(unsigned __int16 *)((char *)&v68 + 1);
    v50 = 1024;
    v51 = v68;
    v52 = 1024;
    v53 = v70;
    v54 = 1024;
    v55 = v38 != 0;
    _os_log_impl(&dword_233BF3000, v35, OS_LOG_TYPE_DEFAULT, "Advertise commission parameter vendorID=%u productID=%u discriminator=%04u/%02u cm=%u cp=%u", (uint8_t *)&v45, 0x26u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  return (*(uint64_t (**)(uint64_t *, _WORD *))(*v34 + 56))(v34, v59);
}

uint64_t sub_234252AAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_234252228(a1, 0, 0, a2);
}

uint64_t sub_234252AB8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return sub_234252228(a1, 1, a2, a3);
}

uint64_t sub_234252AC4(uint64_t a1)
{
  uint64_t (***v2)(_QWORD);
  int v3;

  v2 = *(uint64_t (****)(_QWORD))(a1 + 24);
  if (v2)
    v3 = (**v2)(v2);
  else
    v3 = 0;
  return sub_234252B04(a1, v3);
}

uint64_t sub_234252B04(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  NSObject *v7;
  char *v8;
  uint64_t *v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  char *v15;
  uint64_t *v16;
  uint64_t result;
  NSObject *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint8_t buf[16];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = sub_234117B80(0x22u, "Discovery");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_DEFAULT, "Updating services using commissioning mode %d", buf, 8u);
  }
  if (sub_234114844(2u))
    sub_2341147D0(0x22u, 2);
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  sub_2341BDED8(&qword_2542530D0, (uint64_t)sub_2342531F4, 0, (uint64_t)buf);
  v20 = 0uLL;
  v21 = 0;
  v5 = sub_2341F3A88();
  v6 = sub_2341B3D90();
  (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t *))(*v5 + 16))(&v20, v5, v6);
  if ((_DWORD)v20)
  {
    v7 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      v8 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_233BF3000, v7, OS_LOG_TYPE_ERROR, "Failed to initialize advertiser: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x22u, 1);
    }
  }
  v9 = sub_2341F3A88();
  (*(void (**)(uint8_t *__return_ptr))(*v9 + 40))(buf);
  v20 = *(_OWORD *)buf;
  v21 = v23;
  if (*(_DWORD *)buf)
  {
    v10 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      v11 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_233BF3000, v10, OS_LOG_TYPE_ERROR, "Failed to remove advertised services: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x22u, 1);
    }
  }
  sub_234251F0C(a1, (uint64_t)buf);
  v20 = *(_OWORD *)buf;
  v21 = v23;
  if (*(_DWORD *)buf)
  {
    v12 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      v13 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_233BF3000, v12, OS_LOG_TYPE_ERROR, "Failed to advertise operational node: %s", buf, 0xCu);
    }
    if (sub_234114844(1u))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      sub_2341083CC((const char **)buf, 1);
      sub_2341147D0(0x22u, 1);
    }
  }
  if (a2)
  {
    sub_234252228(a1, 1, a2, buf);
    v20 = *(_OWORD *)buf;
    v21 = v23;
    if (*(_DWORD *)buf)
    {
      v14 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v20;
        v23 = v21;
        v15 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl(&dword_233BF3000, v14, OS_LOG_TYPE_ERROR, "Failed to advertise commissionable node: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v20;
        v23 = v21;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x22u, 1);
      }
    }
  }
  v16 = sub_2341F3A88();
  result = (uint64_t)(*(_QWORD *(**)(uint8_t *__return_ptr))(*v16 + 64))(buf);
  v20 = *(_OWORD *)buf;
  v21 = v23;
  if (*(_DWORD *)buf)
  {
    v18 = sub_234117B80(0x22u, "Discovery");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      v19 = sub_2341083CC((const char **)buf, 1);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl(&dword_233BF3000, v18, OS_LOG_TYPE_ERROR, "Failed to finalize service update: %s", buf, 0xCu);
    }
    result = sub_234114844(1u);
    if ((_DWORD)result)
    {
      *(_OWORD *)buf = v20;
      v23 = v21;
      sub_2341083CC((const char **)buf, 1);
      return sub_2341147D0(0x22u, 1);
    }
  }
  return result;
}

uint64_t sub_23425306C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t *v3;
  NSObject *v4;
  char *v5;
  uint64_t *v6;
  __int128 v7;
  uint64_t v8;
  uint8_t buf[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 16) = 0;
  if (qword_254253100 != -1)
    dispatch_once_f(&qword_254253100, &byte_2542530C0, (dispatch_function_t)sub_233C0BA78);
  sub_2341BDF84((_QWORD **)&qword_2542530D0, (uint64_t)sub_2342531F4, 0);
  v1 = sub_2341F3A88();
  result = (*(uint64_t (**)(uint64_t *))(*v1 + 24))(v1);
  if ((_DWORD)result)
  {
    v7 = 0uLL;
    v8 = 0;
    v3 = sub_2341F3A88();
    (*(void (**)(__int128 *__return_ptr))(*v3 + 40))(&v7);
    if ((_DWORD)v7)
    {
      v4 = sub_234117B80(0x22u, "Discovery");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_OWORD *)buf = v7;
        v10 = v8;
        v5 = sub_2341083CC((const char **)buf, 1);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl(&dword_233BF3000, v4, OS_LOG_TYPE_ERROR, "Failed to remove advertised services: %s", buf, 0xCu);
      }
      if (sub_234114844(1u))
      {
        *(_OWORD *)buf = v7;
        v10 = v8;
        sub_2341083CC((const char **)buf, 1);
        sub_2341147D0(0x22u, 1);
      }
    }
    v6 = sub_2341F3A88();
    return (*(uint64_t (**)(uint64_t *))(*v6 + 32))(v6);
  }
  return result;
}

_WORD *sub_2342531F4(_WORD *result)
{
  uint64_t *v1;
  uint64_t (***v2)(_QWORD);
  int v3;

  if ((*result & 0xFFFE) == 0x8012)
  {
    v1 = sub_233C0A368();
    v2 = (uint64_t (***)(_QWORD))v1[3];
    if (v2)
      v3 = (**v2)(v2);
    else
      v3 = 0;
    return (_WORD *)sub_234252B04((uint64_t)v1, v3);
  }
  return result;
}

uint64_t sub_234253258(uint64_t a1)
{
  uint64_t (***v2)(_QWORD);
  int v3;

  v2 = *(uint64_t (****)(_QWORD))(a1 + 24);
  if (v2)
    v3 = (**v2)(v2);
  else
    v3 = 0;
  return sub_234252B04(a1, v3);
}

